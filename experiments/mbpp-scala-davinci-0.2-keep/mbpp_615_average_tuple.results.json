{
  "name": "mbpp_615_average_tuple",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_615_average_tuple.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val numsList = nums.toString.toList.map(x => x.toString.toInt)\n        val numsTuple = numsList.grouped(2).toList\n        val numsTupleFloat = numsTuple.map(x => x.map(y => y.toFloat))\n        val numsTupleFloatAvg = numsTupleFloat.map(x => x.sum / x.length)\n        numsTupleFloatAvg\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf98lwka2.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf98lwka2.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf98lwka2.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var sum = 0\n        var count = 0\n        for (i <- 1 to nums) {\n            if (i % 3 == 0 || i % 5 == 0) {\n                sum += i\n                count += 1\n            }\n        }\n        List(sum.toFloat / count)\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprusb_pm6.scala:8:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprusb_pm6.scala:17:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprusb_pm6.scala:18:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var lst = List[Float]()\n        for (i <- 1 to nums) {\n            var sum = 0.0\n            for (j <- 1 to i) {\n                sum += j\n            }\n            lst = lst :+ (sum / i)\n        }\n        lst\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpk1zwwzsy.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpk1zwwzsy.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            lst = lst :+ (sum / i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    Double\n\u001b[31m   |\u001b[0m                          Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpk1zwwzsy.scala:17:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpk1zwwzsy.scala:18:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val numsList = nums.toString.map(_.toString.toInt).toList\n        val numsListTuple = numsList.grouped(2).toList\n        numsListTuple.map(x => x.sum.toFloat / x.length).toList\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyhvbqsik.scala:11:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyhvbqsik.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyhvbqsik.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val numsList = nums.toString.toList.map(_.asDigit)\n        val numsListSize = numsList.size\n        val numsListSum = numsList.sum\n        val numsListAvg = numsListSum / numsListSize\n        val numsListAvgList = numsListAvg.toString.toList.map(_.asDigit)\n        val numsListAvgListSize = numsListAvgList.size\n        val numsListAvgListSum = numsListAvgList.sum\n        val numsListAvgListAvg = numsListAvgListSum / numsListAvgListSize\n        val numsListAvgListAvgList = numsListAvgListAvg.toString.toList.map(_.asDigit)\n        val numsListAvgListAvgListSize = numsListAvgListAvgList.size\n        val numsListAvgListAvgListSum = numsListAvgListAvgList.sum\n        val numsListAvgListAvgListAvg = numsListAvgListAvgListSum / numsListAvgListAvgListSize\n        val numsListAvgListAvgListAvgList = numsListAvgListAvgListAvg.toString.toList.map(_.asDigit)\n        val numsListAvgListAvgListAvgListSize = numsListAvgListAvgListAvgList.size\n        val numsListAvgListAvgListAvgListSum = numsListAvgListAvgListAvgList.sum\n        val numsListAvgListAvgListAvgListAvg = numsListAvgListAvgListAvgListSum / numsListAvgListAvgListAvgListSize\n        val numsListAvgListAvgListAvgListAvgList = numsListAvgListAvgListAvgListAvg.toString.toList.map(_.asDigit)\n        val numsListAvgListAvgListAvgListAvgListSize = numsListAvgListAvgListAvgListAvgList.size\n        val numsListAvgListAvgListAvgListAvgListSum = numsListAvgListAvgListAvgListAvgList.sum\n        val numsListAvgListAvgListAvgListAvgListAvg = numsListAvgListAvgListAvgListAvgListSum / numsListAvgListAvgListAvgListAvgListSize\n       \n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj7g1dk9s.scala:27:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Float]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj7g1dk9s.scala:29:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj7g1dk9s.scala:30:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj7g1dk9s.scala:31:24 -------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val list = ListBuffer[Float]()\n        for (i <- 1 to nums) {\n            val nums = scala.io.StdIn.readLine.split(\" \").map(_.toFloat)\n            list += nums.sum / nums.length\n        }\n        list.toList\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9o1ifjqu.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9o1ifjqu.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9o1ifjqu.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var result = List[Float]()\n        for (i <- 1 to nums) {\n            var sum = 0.0\n            for (j <- 1 to i) {\n                sum += j\n            }\n            result = (sum / i) :: result\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpu65omtk5.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpu65omtk5.scala:12:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            result = (sum / i) :: result\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    Double\n\u001b[31m   |\u001b[0m                      Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpu65omtk5.scala:17:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpu65omtk5.scala:18:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val numsList = nums.toString.map(_.asDigit).toList\n        val numsTuple = numsList.grouped(2).toList\n        val numsTupleFloat = numsTuple.map(x => (x(0).toFloat + x(1).toFloat) / 2)\n        numsTupleFloat\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptz_a4o_s.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptz_a4o_s.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptz_a4o_s.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var result = List[Float]()\n        for (i <- 0 to nums.toString.length - 1) {\n            result = result :+ nums.toString.charAt(i).toString.toInt\n        }\n        result.map(x => x.toFloat).toList\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx8avq7nr.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx8avq7nr.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx8avq7nr.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var l = List[Float]()\n        for (i <- 1 to nums) {\n            var sum = 0\n            for (j <- 1 to i) {\n                sum += j\n            }\n            l = l :+ (sum.toFloat / i)\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_5kwzu_x.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_5kwzu_x.scala:17:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_5kwzu_x.scala:18:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var result = List[Float]()\n        for (i <- 1 to nums) {\n            var sum = 0.0\n            for (j <- 1 to nums) {\n                sum += pow(i, j)\n            }\n            result = (sum / nums) :: result\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmlvfdcpo.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmlvfdcpo.scala:9:27 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                           ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                           Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                           Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmlvfdcpo.scala:12:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            result = (sum / nums) :: result\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    Double\n\u001b[31m   |\u001b[0m                      Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmlvfdcpo.scala:17:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var list = List[Float]()\n        for (i <- 0 until nums.toInt) {\n            var sum = 0.0\n            for (j <- 0 until nums.toInt) {\n                sum += (i + j)\n            }\n            list = (sum / nums.toFloat) :: list\n        }\n        return list\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfj6gj7o3.scala:12:20 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            list = (sum / nums.toFloat) :: list\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Found:    Double\n\u001b[31m   |\u001b[0m                    Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfj6gj7o3.scala:17:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfj6gj7o3.scala:18:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var list = List[Float]()\n        for (i <- 1 to nums) {\n            var tuple = (i, i)\n            list = list :+ (tuple._1 + tuple._2) / 2\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp13e5pbnu.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp13e5pbnu.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp13e5pbnu.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var sum : Long = 0\n        var count : Long = 0\n        var result : List[Float] = List()\n        for (i <- 1 to nums) {\n            var tuple = (i, i + 1)\n            sum += tuple._1\n            sum += tuple._2\n            count += 2\n        }\n        result = List(sum.toFloat / count)\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuo885h4u.scala:9:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuo885h4u.scala:19:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuo885h4u.scala:20:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val numsList = nums.toString.toList.map(_.asDigit)\n        val numsList2 = numsList.map(x => pow(x, 5).toLong)\n        val sum = numsList2.sum\n        if (sum == nums) {\n            println(nums)\n            return List(nums)\n        }\n        return List()\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp75tajaup.scala:16:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp75tajaup.scala:17:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp75tajaup.scala:18:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val numsList = nums.toString.toList.map(_.toString.toInt)\n        val numsTuple = numsList.grouped(3).toList\n        val numsTupleTuple = numsTuple.grouped(2).toList\n        val numsTupleTupleList = numsTupleTuple.map(x => x.map(y => y.sum))\n        val numsTupleTupleListAverage = numsTupleTupleList.map(x => x.map(y => y.toFloat / 3))\n        numsTupleTupleListAverage.flatten\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo0yg2kb6.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo0yg2kb6.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo0yg2kb6.scala:16:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val numsList = nums.toString.map(_.asDigit).toList\n        val numsTuple = numsList.grouped(2).toList\n        val numsTupleFloat = numsTuple.map(x => x.map(_.toFloat))\n        val numsTupleFloatAvg = numsTupleFloat.map(x => x.sum / x.size)\n        numsTupleFloatAvg\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp95p868ei.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp95p868ei.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp95p868ei.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var result = List[Float]()\n        for (i <- 0 until nums) {\n            var sum = 0.0\n            for (j <- 0 until nums) {\n                sum += pow(i, j)\n            }\n            result = result :+ (sum / nums)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplknbjij4.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplknbjij4.scala:9:30 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- \u001b[31m0\u001b[0m until nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                              ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                              Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                              Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplknbjij4.scala:12:32 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            result = result :+ (sum / nums)\n\u001b[31m\u001b[31m   |\u001b[0m                                ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                Found:    Double\n\u001b[31m   |\u001b[0m                                Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplknbjij4.scala:17:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Lon",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val list = ListBuffer[Float]()\n        for (i <- 0 until nums) {\n            val num = scala.util.Random.nextInt(nums)\n            list += num.toFloat\n        }\n        list.toList\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8em62rmy.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8em62rmy.scala:8:48 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mnum\u001b[0m = scala.util.Random.nextInt(nums)\n\u001b[31m\u001b[31m  |\u001b[0m                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                                                Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8em62rmy.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8em62rmy.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var sum = 0\n        var count = 0\n        var result = List[Float]()\n        for (i <- 1 to nums) {\n            sum += i\n            count += 1\n            if (count == 10) {\n                result = (sum / 10).toFloat :: result\n                sum = 0\n                count = 0\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpb34aikf0.scala:9:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpb34aikf0.scala:21:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpb34aikf0.scala:22:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val nums2 = nums.toString.map(_.asDigit).toList\n        val nums3 = nums2.map(x => List.fill(x)(x))\n        val nums4 = nums3.flatten\n        val nums5 = nums4.grouped(2).toList\n        val nums6 = nums5.map(x => (x(0), x(1)))\n        val nums7 = nums6.map(x => (x._1 + x._2) / 2.0f)\n        nums7\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124054,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpddidmct9.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpddidmct9.scala:16:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpddidmct9.scala:17:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val numsList = nums.toString.toList.map(_.toString.toInt)\n        val numsListTuple = numsList.grouped(3).toList\n        val numsListTupleFloat = numsListTuple.map(_.map(_.toFloat))\n        val numsListTupleFloatAvg = numsListTupleFloat.map(_.sum / _.length)\n        numsListTupleFloatAvg\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124053,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E086] Syntax Error: /tmp/tmpxd6_xtdw.scala:9:59 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnumsListTupleFloatAvg\u001b[0m = numsListTupleFloat.map(_.sum / _.length)\n\u001b[31m\u001b[31m  |\u001b[0m                                                           ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                   Wrong number of parameters, expected: 1\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxd6_xtdw.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxd6_xtdw.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var result = List[Float]()\n        for (i <- 0 until nums.toInt) {\n            var sum = 0.0\n            for (j <- 0 until nums.toInt) {\n                sum += pow(i, j)\n            }\n            result = (sum / nums.toFloat) :: result\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666123945,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6bopve3u.scala:12:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            result = (sum / nums.toFloat) :: result\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    Double\n\u001b[31m   |\u001b[0m                      Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6bopve3u.scala:17:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6bopve3u.scala:18:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val list = ListBuffer[Float]()\n        for (i <- 0 until nums.toInt) {\n            val num = scala.util.Random.nextInt(100)\n            list += num\n        }\n        list.toList\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124054,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpef9nqqv3.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpef9nqqv3.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpef9nqqv3.scala:16:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val tuples = List((1,2),(3,4),(5,6))\n        val result = tuples.map(x => (x._1 + x._2).toFloat / 2)\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124053,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1uu0fn48.scala:11:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1uu0fn48.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1uu0fn48.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var list = List[Float]()\n        for (i <- 0 until nums.toInt) {\n            var num = scala.util.Random.nextInt(nums.toInt)\n            list = list :+ num.toFloat\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124053,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8e7q5d81.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8e7q5d81.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8e7q5d81.scala:16:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var result : List[Float] = List()\n        for (i <- 0 until nums.toInt) {\n            var sum : Float = 0\n            var count : Int = 0\n            for (j <- 0 until nums.toInt) {\n                sum += (i + j)\n                count += 1\n            }\n            result = (sum / count) :: result\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124054,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpt16nzoqp.scala:19:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpt16nzoqp.scala:20:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpt16nzoqp.scala:21:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val nums2 = nums.toString.map(_.toString.toInt).toList\n        val nums3 = nums2.grouped(2).toList\n        val nums4 = nums3.map(x => (x(0) + x(1)) / 2.0f)\n        nums4\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124054,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwxwu4013.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwxwu4013.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwxwu4013.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var list = List[Float]()\n        for (i <- 1 to nums) {\n            var sum = 0\n            for (j <- 1 to i) {\n                sum += j\n            }\n            list = list :+ (sum.toFloat / i)\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666123960,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvme10p6_.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvme10p6_.scala:17:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvme10p6_.scala:18:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var result = List[Float]()\n        for (i <- 1 to nums) {\n            var sum = 0.0\n            for (j <- 1 to i) {\n                sum += j\n            }\n            result = (sum / i) :: result\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpu65omtk5.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpu65omtk5.scala:12:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            result = (sum / i) :: result\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    Double\n\u001b[31m   |\u001b[0m                      Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpu65omtk5.scala:17:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpu65omtk5.scala:18:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val numsList = nums.toString.map(_.asDigit).toList\n        val numsList2 = numsList.grouped(2).toList\n        val numsList3 = numsList2.map(x => x.sum.toFloat / x.length)\n        numsList3\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124054,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyo22lre1.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyo22lre1.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyo22lre1.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var list = List[Float]()\n        for (i <- 1 to nums.toInt) {\n            var sum = 0.0\n            for (j <- 1 to i) {\n                sum += j\n            }\n            list = (sum / i) :: list\n        }\n        return list.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124053,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6o7fwjgd.scala:12:20 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            list = (sum / i) :: list\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Found:    Double\n\u001b[31m   |\u001b[0m                    Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6o7fwjgd.scala:17:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6o7fwjgd.scala:18:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val numsList = nums.toString.map(_.asDigit).toList\n        val numsTuple = numsList.grouped(2).toList\n        val numsTupleFloat = numsTuple.map(x => x.map(_.toFloat))\n        val numsTupleFloatAvg = numsTupleFloat.map(x => x.sum / x.size)\n        numsTupleFloatAvg\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp95p868ei.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp95p868ei.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp95p868ei.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var list = List[Float]()\n        for (i <- 0 until nums.toInt) {\n            var sum = 0.0\n            for (j <- 0 until nums.toInt) {\n                sum += pow(i, j).toFloat\n            }\n            list = (sum / nums.toFloat) :: list\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124054,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp00e41sop.scala:12:20 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            list = (sum / nums.toFloat) :: list\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Found:    Double\n\u001b[31m   |\u001b[0m                    Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp00e41sop.scala:17:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp00e41sop.scala:18:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var list = List[Float]()\n        for (i <- 1 to nums) {\n            var sum = 0\n            for (j <- 1 to i) {\n                sum += j\n            }\n            list = (sum.toFloat / i.toFloat) :: list\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124054,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptm8y_3z4.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptm8y_3z4.scala:17:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptm8y_3z4.scala:18:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val numsList = nums.toString.toList.map(_.asDigit)\n        val numsList2 = numsList.map(x => pow(x, numsList.length).toLong)\n        val numsList3 = numsList2.map(x => x.toString.toList.map(_.asDigit))\n        val numsList4 = numsList3.map(x => x.sum)\n        val numsList5 = numsList4.map(x => x.toFloat / numsList.length)\n        numsList5\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124053,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7wx2lxwv.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7wx2lxwv.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7wx2lxwv.scala:16:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val tuples = List((1,2,3), (4,5,6), (7,8,9))\n        val result = for (tuple <- tuples) yield {\n            tuple._1 + tuple._2 + tuple._3\n        }\n        result.map(x => x.toFloat / 3).toList\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124054,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpymce6jw_.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpymce6jw_.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpymce6jw_.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var list : List[Float] = List()\n        for (i <- 1 to nums.toInt) {\n            var sum : Long = 0\n            for (j <- 1 to nums.toInt) {\n                sum += i * j\n            }\n            list = (sum.toFloat / nums.toFloat) :: list\n        }\n        list.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124054,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpl2jsgllw.scala:17:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpl2jsgllw.scala:18:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpl2jsgllw.scala:19:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val numList = nums.toString.toList.map(_.toString.toInt)\n        val numTuple = numList.sliding(2, 2).toList\n        numTuple.map(x => (x(0) + x(1)) / 2.0f).toList\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124054,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4dlca4va.scala:11:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4dlca4va.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4dlca4va.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val list = ListBuffer[Float]()\n        for (i <- 1 to nums) {\n            val tuple = (i, i + 1, i + 2)\n            val sum = tuple._1 + tuple._2 + tuple._3\n            list += sum / 3\n        }\n        list.toList\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1665510643,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvvasnzp8.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvvasnzp8.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvvasnzp8.scala:16:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val list = ListBuffer[Float]()\n        for (i <- 1 to nums) {\n            val tuple = (i, i + 1)\n            val avg = (tuple._1 + tuple._2) / 2.0f\n            list += avg\n        }\n        list.toList\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666123976,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqahc5ly4.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqahc5ly4.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqahc5ly4.scala:16:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val numsList = nums.toString.map(_.asDigit).toList\n        val numsTuple = numsList.grouped(2).toList\n        numsTuple.map(x => x.sum.toFloat / x.length).toList\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124037,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2fu84cca.scala:11:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2fu84cca.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2fu84cca.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var list = List[Float]()\n        for (i <- 1 to nums) {\n            var sum = 0.0\n            for (j <- 1 to nums) {\n                sum += i * j\n            }\n            list = (sum / nums) :: list\n        }\n        list.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124054,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd0k_u19z.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd0k_u19z.scala:9:27 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                           ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                           Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                           Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd0k_u19z.scala:12:20 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            list = (sum / nums) :: list\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Found:    Double\n\u001b[31m   |\u001b[0m                    Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd0k_u19z.scala:17:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var sum = 0\n        for (i <- 1 to nums) {\n            sum += i\n        }\n        val avg = sum / nums\n        List(avg.toFloat)\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124054,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpm2zelj83.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpm2zelj83.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpm2zelj83.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var list = List[Float]()\n        for (i <- 1 to nums.toInt) {\n            var sum = 0\n            for (j <- 1 to i) {\n                sum += j\n            }\n            list = (sum.toFloat / i) :: list\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124054,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpahd7alal.scala:17:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpahd7alal.scala:18:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpahd7alal.scala:19:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var list = List[Float]()\n        for (i <- 1 to nums) {\n            var tuple = (i, i + 1, i + 2)\n            var sum = tuple._1 + tuple._2 + tuple._3\n            list = list :+ sum / 3\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124054,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5748m645.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5748m645.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5748m645.scala:16:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val numsList = nums.toString.map(_.asDigit).toList\n        val numsTuple = numsList.zipWithIndex\n        val numsTupleGrouped = numsTuple.groupBy(_._2 % 3)\n        val numsTupleGroupedValues = numsTupleGrouped.values.toList\n        val numsTupleGroupedValuesSum = numsTupleGroupedValues.map(_.map(_._1).sum)\n        val numsTupleGroupedValuesSumFloat = numsTupleGroupedValuesSum.map(_.toFloat)\n        val numsTupleGroupedValuesSumFloatAverage = numsTupleGroupedValuesSumFloat.map(_ / 3)\n        numsTupleGroupedValuesSumFloatAverage\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124054,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppmqe08e2.scala:16:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppmqe08e2.scala:17:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppmqe08e2.scala:18:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var result = List[Float]()\n        for (i <- 0 until nums.toInt) {\n            var sum = 0.0\n            for (j <- 0 until nums.toInt) {\n                sum += (i + j)\n            }\n            result = result :+ (sum / nums.toFloat)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124053,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpn868a3_z.scala:12:32 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            result = result :+ (sum / nums.toFloat)\n\u001b[31m\u001b[31m   |\u001b[0m                                ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                Found:    Double\n\u001b[31m   |\u001b[0m                                Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpn868a3_z.scala:17:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpn868a3_z.scala:18:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m lon",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val numsList = nums.toString.toList.map(_.toString.toInt)\n        val numsTuple = numsList.grouped(3).toList\n        val numsTuple2 = numsTuple.map(x => (x(0), x(1), x(2)))\n        val numsTuple3 = numsTuple2.map(x => (x._1 + x._2 + x._3) / 3.0f)\n        numsTuple3\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1665510644,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4zdgvysd.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4zdgvysd.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4zdgvysd.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var result = List[Float]()\n        for (i <- 0 until nums.toInt) {\n            var sum = 0.0\n            for (j <- 0 until nums.toInt) {\n                sum += (i * nums.toInt + j)\n            }\n            result = result :+ (sum / nums.toInt)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124053,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6x7ocwc6.scala:12:32 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            result = result :+ (sum / nums.toInt)\n\u001b[31m\u001b[31m   |\u001b[0m                                ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                Found:    Double\n\u001b[31m   |\u001b[0m                                Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6x7ocwc6.scala:17:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6x7ocwc6.scala:18:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val numsList = nums.toString.toList.map(_.toString.toInt)\n        val numsTuple = numsList.grouped(3).toList\n        val numsTuple2 = numsTuple.map(x => (x(0), x(1), x(2)))\n        val numsTuple3 = numsTuple2.map(x => (x._1 + x._2 + x._3) / 3.0f)\n        numsTuple3\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1665510644,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4zdgvysd.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4zdgvysd.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4zdgvysd.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val tuple = (1L to nums).toList.map(x => (x, x * x, x * x * x))\n        tuple.map(x => (x._1 + x._2 + x._3) / 3.0f).toList\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124054,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6v50cvvd.scala:10:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6v50cvvd.scala:11:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6v50cvvd.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val tuples = List((1,2), (3,4), (5,6))\n        val result = tuples.map(x => (x._1 + x._2) / 2.0f)\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124037,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuu3r5cb3.scala:11:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuu3r5cb3.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuu3r5cb3.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var list = List[Float]()\n        for (i <- 0 to nums.toInt - 1) {\n            var sum = 0.0\n            for (j <- 0 to nums.toInt - 1) {\n                sum += scala.util.Random.nextInt(100)\n            }\n            list = (sum / nums).toFloat :: list\n        }\n        return list\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124069,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnp0j0n_4.scala:17:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnp0j0n_4.scala:18:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnp0j0n_4.scala:19:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val numsList = nums.toString.map(_.asDigit).toList\n        val numsTuple = numsList.grouped(2).toList\n        val numsTupleFloat = numsTuple.map(x => x.map(_.toFloat))\n        val numsTupleFloatAvg = numsTupleFloat.map(x => x.sum / x.length)\n        numsTupleFloatAvg\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666123962,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_0d41i8.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_0d41i8.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_0d41i8.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val numsList = nums.toString.toList.map(_.toString.toInt)\n        val numsTuple = numsList.grouped(3).toList\n        val numsTupleTuple = numsTuple.grouped(2).toList\n        val numsTupleTupleList = numsTupleTuple.map(x => x.map(y => y.sum).sum)\n        val numsTupleTupleListFloat = numsTupleTupleList.map(x => x.toFloat)\n        val numsTupleTupleListFloatDiv = numsTupleTupleListFloat.map(x => x / 2)\n        numsTupleTupleListFloatDiv\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124069,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpr9jp95y3.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpr9jp95y3.scala:16:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpr9jp95y3.scala:17:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var list = List[Float]()\n        for (i <- 1 to nums.toInt) {\n            var sum = 0\n            var count = 0\n            for (j <- 1 to i) {\n                if (i % j == 0) {\n                    sum += j\n                    count += 1\n                }\n            }\n            list = list :+ (sum.toFloat / count)\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124069,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpq4hqmdgb.scala:21:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpq4hqmdgb.scala:22:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpq4hqmdgb.scala:23:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val l = List(1,2,3,4,5,6,7,8,9,10)\n        val t = l.grouped(nums.toInt).toList\n        val t2 = t.map(x => x.sum.toFloat / x.length)\n        t2\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124069,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0aagk2ff.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0aagk2ff.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0aagk2ff.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val numsList = nums.toString.map(_.asDigit).toList\n        val numsList2 = numsList.sliding(2).toList\n        val numsList3 = numsList2.map(x => x.sum)\n        val numsList4 = numsList3.map(x => x.toFloat)\n        val numsList5 = numsList4.map(x => x / 2)\n        numsList5\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124070,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_24j0s8n.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_24j0s8n.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_24j0s8n.scala:16:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val tuples = List((1,2,3),(4,5,6),(7,8,9))\n        val result = tuples.map(x => x._1 + x._2 + x._3).map(x => x / 3.0f)\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124068,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2z6fzq0w.scala:11:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2z6fzq0w.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2z6fzq0w.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val tuples = List((1, 2), (3, 4), (5, 6))\n        val result = tuples.map(x => (x._1 + x._2).toFloat / 2)\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124069,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpddpgm8eo.scala:11:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpddpgm8eo.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpddpgm8eo.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var sum = 0.0\n        var count = 0\n        for (i <- 1 to nums) {\n            if (i % 3 == 0 || i % 5 == 0) {\n                sum += i\n                count += 1\n            }\n        }\n        List(sum / count)\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1665510644,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp640fsybp.scala:8:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp640fsybp.scala:14:13 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        List(sum / count)\n\u001b[31m\u001b[31m   |\u001b[0m             ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m             Found:    Double\n\u001b[31m   |\u001b[0m             Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp640fsybp.scala:17:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp640fsybp.scala:18:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.to",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val tuples = List((1, 2), (3, 4), (5, 6))\n        val list = tuples.map(x => (x._1 + x._2) / 2.0f)\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124070,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnxkdpryh.scala:11:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnxkdpryh.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnxkdpryh.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var lst = List[Float]()\n        var i = 0\n        while (i < nums) {\n            var j = 0\n            var sum = 0\n            while (j < nums) {\n                sum += (i + j)\n                j += 1\n            }\n            lst = lst :+ (sum.toFloat / nums)\n            i += 1\n        }\n        return lst\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124069,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpu6u9mb6k.scala:21:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpu6u9mb6k.scala:22:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpu6u9mb6k.scala:23:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val list = ListBuffer[Float]()\n        for (i <- 1 to nums) {\n            val num = scala.util.Random.nextInt(nums)\n            val den = scala.util.Random.nextInt(nums)\n            list += num.toFloat / den.toFloat\n        }\n        list.toList\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124070,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp05hmpnkf.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp05hmpnkf.scala:8:48 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mnum\u001b[0m = scala.util.Random.nextInt(nums)\n\u001b[31m\u001b[31m  |\u001b[0m                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                                                Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp05hmpnkf.scala:9:48 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mden\u001b[0m = scala.util.Random.nextInt(nums)\n\u001b[31m\u001b[31m  |\u001b[0m                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                                                Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp05hmpnkf.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val list = ListBuffer[Float]()\n        for (i <- 1 to nums) {\n            val num = scala.util.Random.nextInt(nums).toFloat\n            list += num\n        }\n        list.toList\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666123945,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdpu1g5v4.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdpu1g5v4.scala:8:48 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mnum\u001b[0m = scala.util.Random.nextInt(nums).toFloat\n\u001b[31m\u001b[31m  |\u001b[0m                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                                                Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdpu1g5v4.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdpu1g5v4.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val numsList = nums.toString.toList.map(x => x.toString.toInt)\n        val numsTuple = numsList.zipWithIndex\n        val numsTupleGrouped = numsTuple.groupBy(x => x._2 % 3)\n        val numsTupleGroupedValues = numsTupleGrouped.values.toList\n        val numsTupleGroupedValuesSum = numsTupleGroupedValues.map(x => x.map(y => y._1).sum)\n        val numsTupleGroupedValuesSumAverage = numsTupleGroupedValuesSum.map(x => x.toFloat / 3)\n        numsTupleGroupedValuesSumAverage\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124070,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwumbqkf_.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwumbqkf_.scala:16:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwumbqkf_.scala:17:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var list : List[Float] = List()\n        for (i <- 1 to nums.toInt) {\n            var sum : Long = 0\n            for (j <- 1 to nums.toInt) {\n                sum += j\n            }\n            list = list :+ (sum.toFloat / nums.toFloat)\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124069,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp73trh2xf.scala:17:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp73trh2xf.scala:18:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp73trh2xf.scala:19:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val tuples = List((1,2), (3,4), (5,6))\n        val averages = tuples.map(t => (t._1 + t._2).toFloat / 2)\n        return averages\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124070,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2metbiyv.scala:11:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2metbiyv.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2metbiyv.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val tuples = List((1,2,3), (4,5,6), (7,8,9))\n        val result = ListBuffer[Float]()\n        for (tuple <- tuples) {\n            var sum = 0\n            for (num <- tuple) {\n                sum += num\n            }\n            result += sum.toFloat / tuple.size\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124070,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7wfpmplc.scala:10:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m            \u001b[33mfor\u001b[0m (num <- tuple) {\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        value foreach is not a member of (Int, Int, Int)\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7wfpmplc.scala:18:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7wfpmplc.scala:19:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7wfpmplc.scala:20:24 --------------------\u001b[0m\u001b[0m\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val numsList = nums.toString.toList.map(_.toString.toInt)\n        val numsListTuple = numsList.grouped(3).toList\n        val numsListTupleFloat = numsListTuple.map(x => x.map(_.toFloat))\n        val numsListTupleFloatAverage = numsListTupleFloat.map(x => x.sum / x.length)\n        numsListTupleFloatAverage\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124069,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzz4r3wqi.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzz4r3wqi.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzz4r3wqi.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var result = List[Float]()\n        for (i <- 0 until nums.toInt) {\n            var sum = 0\n            for (j <- 0 until nums.toInt) {\n                sum += i * j\n            }\n            result = (sum.toFloat / nums.toFloat) :: result\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124069,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzsd4nunj.scala:17:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzsd4nunj.scala:18:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzsd4nunj.scala:19:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val lst = ListBuffer[Float]()\n        for (i <- 1 to nums) {\n            val num = scala.io.StdIn.readLine.split(\" \").map(_.toFloat)\n            lst += num.sum / num.length\n        }\n        lst.toList\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666123945,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1rh50soc.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1rh50soc.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1rh50soc.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val numsList = nums.toString.toList.map(_.toString.toInt)\n        val numsTuple = numsList.grouped(3).toList\n        val numsTupleTuple = numsTuple.grouped(2).toList\n        numsTupleTuple.map(x => x.flatten.sum.toFloat / x.flatten.length).toList\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124069,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqxsdzlap.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqxsdzlap.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqxsdzlap.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var list = List[Float]()\n        for (i <- 1 to nums) {\n            var sum = 0.0\n            for (j <- 1 to nums) {\n                sum += (i * j)\n            }\n            list = (sum / nums) :: list\n        }\n        return list\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124070,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3qzhl23a.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3qzhl23a.scala:9:27 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                           ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                           Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                           Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3qzhl23a.scala:12:20 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            list = (sum / nums) :: list\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Found:    Double\n\u001b[31m   |\u001b[0m                    Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3qzhl23a.scala:17:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var result = List[Float]()\n        for (i <- 1 to nums) {\n            var temp = List[Float]()\n            for (j <- 1 to nums) {\n                temp = temp :+ (i + j).toFloat\n            }\n            result = result :+ temp.sum / nums\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124070,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpm24uu79q.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpm24uu79q.scala:9:27 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                           ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                           Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                           Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpm24uu79q.scala:17:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpm24uu79q.scala:18:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((Li",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val numsList = nums.toString.toList.map(_.toString.toInt)\n        val numsTuple = numsList.grouped(2).toList\n        val numsTuple2 = numsTuple.map(x => (x(0), x(1)))\n        val numsTuple3 = numsTuple2.map(x => (x._1 + x._2) / 2.0f)\n        numsTuple3\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124009,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfdya3ebq.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfdya3ebq.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfdya3ebq.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val sum = nums.toString.map(_.asDigit).sum\n        val len = nums.toString.length\n        val avg = sum.toFloat / len\n        List(avg)\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124070,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6p5wcl5l.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6p5wcl5l.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6p5wcl5l.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var list = List[Float]()\n        for (i <- 1 to nums) {\n            var tuple = (i, i + 1, i + 2)\n            var sum = tuple._1 + tuple._2 + tuple._3\n            var avg = sum / 3\n            list = list :+ avg\n        }\n        return list\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124070,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpn6xylla_.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpn6xylla_.scala:16:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpn6xylla_.scala:17:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var result = List[Float]()\n        for (i <- 0 until nums) {\n            var sum = 0.0\n            for (j <- 0 until nums) {\n                sum += pow(i, j)\n            }\n            result = (sum / nums) :: result\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124071,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgrq2x822.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgrq2x822.scala:9:30 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- \u001b[31m0\u001b[0m until nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                              ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                              Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                              Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgrq2x822.scala:12:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            result = (sum / nums) :: result\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    Double\n\u001b[31m   |\u001b[0m                      Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgrq2x822.scala:17:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mR",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val numsList = nums.toString.split(\"\").map(_.toInt).toList\n        val numsListTuple = numsList.grouped(3).toList\n        val numsListTupleAverage = numsListTuple.map(x => x.sum.toFloat / x.length)\n        numsListTupleAverage\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124071,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5ivsmqpd.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5ivsmqpd.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5ivsmqpd.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var result = List[Float]()\n        var sum = 0.0\n        var count = 0\n        var num = nums\n        while (num > 0) {\n            sum += num % 10\n            count += 1\n            num /= 10\n        }\n        result = (sum / count) :: result\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124084,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2m_d85fr.scala:15:18 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        result = (sum / count) :: result\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Found:    Double\n\u001b[31m   |\u001b[0m                  Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2m_d85fr.scala:19:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2m_d85fr.scala:20:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[3",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val numsList = nums.toString.toList.map(x => x.toString.toInt)\n        val numsTuple = numsList.grouped(2).toList\n        val numsTupleFloat = numsTuple.map(x => x.map(y => y.toFloat))\n        val numsTupleFloatAvg = numsTupleFloat.map(x => x.sum / x.length)\n        numsTupleFloatAvg\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf98lwka2.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf98lwka2.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf98lwka2.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val numsList = nums.toString.toList.map(_.toString.toInt)\n        val numsListSize = numsList.size\n        val numsListSum = numsList.sum\n        val numsListAverage = numsListSum.toFloat / numsListSize\n        List(numsListAverage)\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124084,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9v339z2j.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9v339z2j.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9v339z2j.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var result = List[Float]()\n        for (i <- 1 to nums) {\n            var sum = 0.0\n            for (j <- 1 to nums) {\n                sum += j / i\n            }\n            result = result :+ (sum / nums)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124085,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvo78_d4z.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvo78_d4z.scala:9:27 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                           ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                           Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                           Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvo78_d4z.scala:12:32 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            result = result :+ (sum / nums)\n\u001b[31m\u001b[31m   |\u001b[0m                                ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                Found:    Double\n\u001b[31m   |\u001b[0m                                Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvo78_d4z.scala:17:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var sum = 0\n        var count = 0\n        for (i <- 1 to nums) {\n            if (i % 3 == 0 || i % 5 == 0) {\n                sum += i\n                count += 1\n            }\n        }\n        List(sum.toFloat / count)\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprusb_pm6.scala:8:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprusb_pm6.scala:17:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprusb_pm6.scala:18:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val tuples = nums.toString.map(x => x.asDigit).grouped(2).toList.map(x => (x(0), x(1)))\n        tuples.map(x => (x._1 + x._2) / 2.0f).toList\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124085,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8gu7etet.scala:10:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8gu7etet.scala:11:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8gu7etet.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var list = List[Float]()\n        for (i <- 1 to nums) {\n            var sum = 0\n            for (j <- 1 to i) {\n                sum += j\n            }\n            list = (sum.toFloat / i.toFloat) :: list\n        }\n        list.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666123992,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkqotc418.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkqotc418.scala:17:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkqotc418.scala:18:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var list : List[Float] = List()\n        for (i <- 0 until nums.toInt) {\n            var sum : Long = 0\n            for (j <- 0 until nums.toInt) {\n                sum += (i + j)\n            }\n            list = list :+ (sum.toFloat / nums.toFloat)\n        }\n        return list\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124085,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpve7wx7vt.scala:17:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpve7wx7vt.scala:18:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpve7wx7vt.scala:19:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var result = List[Float]()\n        for (i <- 1 to nums) {\n            var sum = 0\n            for (j <- 1 to i) {\n                sum += j\n            }\n            result = (sum.toFloat / i.toFloat) :: result\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666123975,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx6fvyc26.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx6fvyc26.scala:17:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx6fvyc26.scala:18:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var result = List[Float]()\n        var sum = 0\n        for (i <- 0 until nums.toInt) {\n            var num = scala.io.StdIn.readLine.split(\" \").map(_.toInt)\n            for (j <- 0 until num.length) {\n                sum += num(j)\n            }\n            result = result :+ (sum.toFloat / num.length)\n            sum = 0\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124086,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyoqw8ovv.scala:19:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyoqw8ovv.scala:20:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyoqw8ovv.scala:21:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val list = ListBuffer[Float]()\n        for (i <- 1 to nums) {\n            val tuple = (i, i + 1)\n            list += (tuple._1 + tuple._2) / 2.0f\n        }\n        list.toList\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666123945,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpb3bwj7ck.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpb3bwj7ck.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpb3bwj7ck.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var result = List[Float]()\n        for (i <- 0 to nums.toString.length - 1) {\n            var sum = 0\n            for (j <- 0 to nums.toString.length - 1) {\n                sum += nums.toString.charAt(j).toString.toInt\n            }\n            result = (sum.toFloat / nums.toString.length) :: result\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124085,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpac2lhu3m.scala:17:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpac2lhu3m.scala:18:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpac2lhu3m.scala:19:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var list = List[Float]()\n        for (i <- 0 to nums.toString.length - 1) {\n            var sum = 0\n            for (j <- 0 to nums.toString.length - 1) {\n                sum += nums.toString.charAt(j).toString.toInt\n            }\n            list = (sum.toFloat / nums.toString.length) :: list\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124084,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7xl6glt9.scala:17:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7xl6glt9.scala:18:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7xl6glt9.scala:19:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var sum = 0.0\n        var count = 0\n        for (i <- 1 to nums) {\n            sum += i\n            count += 1\n        }\n        List(sum / count)\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1665510643,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0a8h8hf5.scala:8:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0a8h8hf5.scala:12:13 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        List(sum / count)\n\u001b[31m\u001b[31m   |\u001b[0m             ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m             Found:    Double\n\u001b[31m   |\u001b[0m             Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0a8h8hf5.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0a8h8hf5.scala:16:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.to",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var lst = List[Float]()\n        for (i <- 1 to nums) {\n            var sum = 0.0\n            for (j <- 1 to i) {\n                sum += j\n            }\n            lst = lst :+ (sum / i)\n        }\n        lst\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpk1zwwzsy.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpk1zwwzsy.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            lst = lst :+ (sum / i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    Double\n\u001b[31m   |\u001b[0m                          Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpk1zwwzsy.scala:17:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpk1zwwzsy.scala:18:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var result = List[Float]()\n        for (i <- 0 until nums) {\n            var sum = 0.0\n            for (j <- 0 until nums) {\n                sum += pow(i, j)\n            }\n            result = result :+ (sum / nums)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124086,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9g73sr_j.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9g73sr_j.scala:9:30 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- \u001b[31m0\u001b[0m until nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                              ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                              Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                              Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9g73sr_j.scala:12:32 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            result = result :+ (sum / nums)\n\u001b[31m\u001b[31m   |\u001b[0m                                ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                Found:    Double\n\u001b[31m   |\u001b[0m                                Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9g73sr_j.scala:17:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Lon",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val tuples = List((1,2),(3,4),(5,6))\n        val result = tuples.map(x => (x._1 + x._2).toFloat / 2)\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124053,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1uu0fn48.scala:11:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1uu0fn48.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1uu0fn48.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val numsList = nums.toString.map(_.asDigit).toList\n        val numsList2 = numsList.map(x => List(x, x, x))\n        numsList2.map(x => x.sum.toFloat / x.length).toList\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124085,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdsa061i0.scala:11:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdsa061i0.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdsa061i0.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var result = List[Float]()\n        for (i <- 0 to nums.toString.length - 1) {\n            var sum = 0\n            for (j <- 0 to nums.toString.length - 1) {\n                sum += nums.toString.charAt(j).asDigit\n            }\n            result = result :+ (sum.toFloat / nums.toString.length)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124084,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpn50mnt5j.scala:17:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpn50mnt5j.scala:18:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpn50mnt5j.scala:19:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val numsList = nums.toString.split(\"\").toList.map(x => x.toInt)\n        val numsList2 = numsList.map(x => x.toFloat)\n        val numsList3 = numsList2.map(x => x / numsList2.length)\n        numsList3\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124085,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3dc92mt6.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3dc92mt6.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3dc92mt6.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var result = List[Float]()\n        for (i <- 1 to nums) {\n            var sum = 0\n            for (j <- 1 to i) {\n                sum += j\n            }\n            result = result :+ (sum.toFloat / i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124085,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7ikq3x7a.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7ikq3x7a.scala:17:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7ikq3x7a.scala:18:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var result = List[Float]()\n        for (i <- 1 to nums) {\n            var sum = 0\n            for (j <- 1 to i) {\n                sum += j\n            }\n            result = (sum.toFloat / i) :: result\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124084,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmper3bmde9.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmper3bmde9.scala:17:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmper3bmde9.scala:18:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val numsList = nums.toString.toList\n        val numsListInt = numsList.map(_.toString.toInt)\n        val numsListIntTuple = numsListInt.grouped(3).toList\n        val numsListIntTupleFloat = numsListIntTuple.map(x => x.map(_.toFloat))\n        val numsListIntTupleFloatAvg = numsListIntTupleFloat.map(x => x.sum / x.length)\n        numsListIntTupleFloatAvg\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124085,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd7o8f9qh.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd7o8f9qh.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd7o8f9qh.scala:16:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var result = List[Float]()\n        for (i <- 1 to nums) {\n            var sum = 0.0\n            for (j <- 1 to i) {\n                sum += j\n            }\n            result = result :+ (sum / i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1665510643,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf7j7spyp.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf7j7spyp.scala:12:32 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            result = result :+ (sum / i)\n\u001b[31m\u001b[31m   |\u001b[0m                                ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                Found:    Double\n\u001b[31m   |\u001b[0m                                Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf7j7spyp.scala:17:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf7j7spyp.scala:18:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val numsList = nums.toString.toList.map(_.toString.toInt)\n        val numsTuple = numsList.grouped(3).toList\n        val numsTuple2 = numsTuple.map(x => (x(0), x(1), x(2)))\n        val numsTuple3 = numsTuple2.map(x => (x._1 + x._2 + x._3) / 3.0f)\n        numsTuple3\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1665510644,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4zdgvysd.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4zdgvysd.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4zdgvysd.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val numsList = nums.toString.toList.map(_.toString.toInt)\n        val numsTuple = numsList.grouped(3).toList\n        val numsTuple2 = numsTuple.map(x => (x(0), x(1), x(2)))\n        val numsTuple3 = numsTuple2.map(x => (x._1 + x._2 + x._3) / 3.0f)\n        numsTuple3\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1665510644,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4zdgvysd.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4zdgvysd.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4zdgvysd.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val numsList = nums.toString.toList.map(_.asDigit)\n        val numsListSize = numsList.size\n        val numsListSum = numsList.sum\n        val numsListAverage = numsListSum.toFloat / numsListSize\n        val numsListAverageList = List(numsListAverage)\n        numsListAverageList\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124085,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpudd6v3wf.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpudd6v3wf.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpudd6v3wf.scala:16:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val tuples = List((1,2), (3,4), (5,6))\n        val result = tuples.map(x => (x._1 + x._2).toFloat / 2)\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666123961,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzdratbjr.scala:11:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzdratbjr.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzdratbjr.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var lst = List[Float]()\n        for (i <- 1 to nums) {\n            var sum = 0.0\n            for (j <- 1 to nums) {\n                sum += (i * j)\n            }\n            lst = (sum / nums) :: lst\n        }\n        lst\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124086,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcpowf3nf.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcpowf3nf.scala:9:27 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                           ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                           Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                           Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcpowf3nf.scala:12:19 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            lst = (sum / nums) :: lst\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   Found:    Double\n\u001b[31m   |\u001b[0m                   Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcpowf3nf.scala:17:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val l = List(1,2,3,4,5,6,7,8,9,10)\n        val l2 = List(1,2,3,4,5,6,7,8,9,10)\n        val l3 = List(1,2,3,4,5,6,7,8,9,10)\n        val l4 = List(1,2,3,4,5,6,7,8,9,10)\n        val l5 = List(1,2,3,4,5,6,7,8,9,10)\n        val l6 = List(1,2,3,4,5,6,7,8,9,10)\n        val l7 = List(1,2,3,4,5,6,7,8,9,10)\n        val l8 = List(1,2,3,4,5,6,7,8,9,10)\n        val l9 = List(1,2,3,4,5,6,7,8,9,10)\n        val l10 = List(1,2,3,4,5,6,7,8,9,10)\n        val l11 = List(1,2,3,4,5,6,7,8,9,10)\n        val l12 = List(1,2,3,4,5,6,7,8,9,10)\n        val l13 = List(1,2,3,4,5,6,7,8,9,10)\n        val l14 = List(1,2,3,4,5,6,7,8,9,10)\n        val l15 = List(1,2,3,4,5,6,7,8,9,10)\n        val l16 = List(1,2,3,4,5,6,7,8,9,10)\n        val l17 = List(1,2,3,4,5,6,7,8,9,10)\n        val l18 = List(1,2,3,4,5,6,7,8,9,10)\n        val l19 = List(1\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666123978,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmps37asl4i.scala:25:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps37asl4i.scala:25:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Float]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps37asl4i.scala:27:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps37asl4i.scala:28:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val list = ListBuffer[Float]()\n        for (i <- 1 to nums) {\n            val tuple = (i, i + 1, i + 2)\n            val sum = tuple._1 + tuple._2 + tuple._3\n            list += sum / 3\n        }\n        list.toList\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1665510643,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvvasnzp8.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvvasnzp8.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvvasnzp8.scala:16:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val numsList = nums.toString.toList.map(_.toString.toInt)\n        val numsTuple = numsList.grouped(3).toList\n        val numsTupleTuple = numsTuple.grouped(2).toList\n        val numsTupleTupleList = numsTupleTuple.map(x => x.flatten)\n        val numsTupleTupleListAverage = numsTupleTupleList.map(x => x.sum.toFloat / x.length)\n        numsTupleTupleListAverage\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124085,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptt42y6sd.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptt42y6sd.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptt42y6sd.scala:16:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var list = List[Float]()\n        for (i <- 1 to nums) {\n            var sum = 0\n            for (j <- 1 to nums) {\n                sum += i * j\n            }\n            list = (sum.toFloat / nums) :: list\n        }\n        list.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124008,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsgop8xc3.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsgop8xc3.scala:9:27 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                           ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                           Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                           Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsgop8xc3.scala:17:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsgop8xc3.scala:18:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((Li",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val numsList = nums.toString.toList.map(_.asDigit)\n        val numsList2 = numsList.map(x => pow(x, numsList.length).toLong)\n        val sum = numsList2.sum\n        val numsList3 = sum.toString.toList.map(_.asDigit)\n        val numsList4 = numsList3.map(x => pow(x, numsList3.length).toLong)\n        if (numsList4.sum == nums) true else false\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124086,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0isvcax9.scala:11:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (numsList4.sum == nums) \u001b[31mtrue\u001b[0m \u001b[33melse\u001b[0m \u001b[31mfalse\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (\u001b[31mtrue\u001b[0m : Boolean)\n\u001b[31m   |\u001b[0m                                   Required: List[Float]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0isvcax9.scala:11:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mif\u001b[0m (numsList4.sum == nums) \u001b[31mtrue\u001b[0m \u001b[33melse\u001b[0m \u001b[31mfalse\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (\u001b[31mfalse\u001b[0m : Boolean)\n\u001b[31m   |\u001b[0m                                             Required: List[Float]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0isvcax9.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0isvcax9.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val tuples = List((1,2,3),(4,5,6),(7,8,9))\n        val sum = tuples.map(x => x._1 + x._2 + x._3).sum\n        val average = sum / tuples.length\n        val result = tuples.map(x => (x._1 + x._2 + x._3) / average)\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124086,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmyhxdkda.scala:10:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        result\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    (result : List[Int])\n\u001b[31m   |\u001b[0m        Required: List[Float]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmyhxdkda.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmyhxdkda.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tm",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var list = List[Float]()\n        for (i <- 1 to nums) {\n            var sum = 0\n            for (j <- 1 to i) {\n                sum += j\n            }\n            list = (sum.toFloat / i.toFloat) :: list\n        }\n        list.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666123992,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkqotc418.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkqotc418.scala:17:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkqotc418.scala:18:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var result = List[Float]()\n        for (i <- 1 to nums) {\n            val tuple = (i, i + 1)\n            result = result :+ (tuple._1 + tuple._2) / 2.0f\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124087,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgkwvoat0.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgkwvoat0.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgkwvoat0.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var result = List[Float]()\n        for (i <- 0 until nums.toInt) {\n            var sum = 0.0\n            for (j <- 0 until nums.toInt) {\n                sum += (i + j)\n            }\n            result = (sum / nums.toFloat) :: result\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124025,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpypeq2p2q.scala:12:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            result = (sum / nums.toFloat) :: result\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    Double\n\u001b[31m   |\u001b[0m                      Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpypeq2p2q.scala:17:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpypeq2p2q.scala:18:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var result = List[Float]()\n        for (i <- 0 to nums.toString.length - 1) {\n            var sum = 0\n            for (j <- 0 to nums.toString.length - 1) {\n                sum += nums.toString.charAt(j).asDigit\n            }\n            result = result :+ (sum / nums.toString.length.toFloat)\n            nums /= 10\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124087,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp6x9m8mcv.scala:13:17 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m            nums /= \u001b[31m10\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value /= is not a member of Long - did you mean nums.!=?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6x9m8mcv.scala:18:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6x9m8mcv.scala:19:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6x9m8mcv.scala:20:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val list = List.range(1, nums + 1)\n        val tuple = (list, list.reverse)\n        val tupleList = List(tuple)\n        tupleList.map(x => x._1.sum.toFloat / x._1.length)\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124088,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmp09v8fymg.scala:6:42 ------------------------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mlist\u001b[0m = List.range(\u001b[31m1\u001b[0m, nums + \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m  |\u001b[0m                                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  No implicit Ordering defined for AnyVal.\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp09v8fymg.scala:9:32 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        tupleList.map(\u001b[36mx\u001b[0m => x._1.sum.toFloat / x._1.length)\n\u001b[31m\u001b[31m  |\u001b[0m                           ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0mvalue sum is not a member of Nothing, but could be made available as an extension method.\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0mOne of the following imports might fix the problem:\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m  import Option.option2Iterable\n\u001b[31m  |\u001b[0m  import collection.LazyZip2.lazyZip2ToIterable\n\u001b[31m  |\u001b[0m  import collection.LazyZip3.lazyZip3ToIterable\n\u001b[31m  |\u001b[0m  import collection.LazyZip4.lazyZip4ToIterable\n\u001b[31m  |\u001b[0m  import collection.convert.ImplicitConversions.list asScalaBuffer\n\u001b[31m  |\u001b[0m  import collection.convert.ImplicitConversions.properties AsScalaMap\n\u001b[31m  |\u001b[0m  import collection.convert.ImplicitConversions.enumeration AsScalaIterator\n\u001b[31m  |\u001b[0m  import collection.convert.ImplicitConversions.iterator asScala\n\u001b[31m  |\u001b[0m  import collection.convert.ImplicitConversions.map AsScalaConcurrentMap\n\u001b[31m  |\u001b[0m  import collection.convert.ImplicitConversions.set asScala\n\u001b[31m  |\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp09v8fymg.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val numsList = nums.toString.toList.map(_.asDigit)\n        val numsList2 = numsList.map(x => pow(x, numsList.length).toLong)\n        val numsList3 = numsList2.sum\n        val numsList4 = numsList3.toString.toList.map(_.asDigit)\n        val numsList5 = numsList4.map(x => pow(x, numsList4.length).toLong)\n        val numsList6 = numsList5.sum\n        val numsList7 = numsList6.toString.toList.map(_.asDigit)\n        val numsList8 = numsList7.map(x => pow(x, numsList7.length).toLong)\n        val numsList9 = numsList8.sum\n        val numsList10 = numsList9.toString.toList.map(_.asDigit)\n        val numsList11 = numsList10.map(x => pow(x, numsList10.length).toLong)\n        val numsList12 = numsList11.sum\n        val numsList13 = numsList12.toString.toList.map(_.asDigit)\n        val numsList14 = numsList13.map(x => pow(x, numsList13.length).toLong)\n        val numsList15 = numsList14.sum\n        val numsList16 = numsList15.toString.toList.map(_.asDigit)\n        val numsList17 = numsList16.map(x => pow(x, numsList16.length).toLong)\n        val numsList18 = numsList17.sum\n        val numsList19 = numsList18.toString.toList.map(_.asDigit)\n        val numsList20 = numsList19.map(x => pow(x, numsList19.length).toLong)\n        val numsList21 = numsList20.sum\n        val numsList22 = numsList21.toString.toList.map\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124100,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6rkbuw0e.scala:28:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Float]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6rkbuw0e.scala:30:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6rkbuw0e.scala:31:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6rkbuw0e.scala:32:24 -------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var lst = List[Float]()\n        for (i <- 0 to nums.toString.length - 1) {\n            var sum = 0\n            for (j <- 0 to nums.toString.length - 1) {\n                sum += nums.toString.charAt(j).asDigit\n            }\n            lst = (sum / nums.toString.length).toFloat :: lst\n        }\n        lst\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124100,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpww4x5vhe.scala:17:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpww4x5vhe.scala:18:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpww4x5vhe.scala:19:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var lst = List[Float]()\n        for (i <- 1 to nums.toInt) {\n            lst = lst :+ (i.toFloat / nums.toFloat)\n        }\n        lst\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124099,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprw42xrx6.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprw42xrx6.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprw42xrx6.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val numsList = nums.toString.map(_.asDigit).toList\n        val numsTuple = numsList.grouped(2).toList\n        numsTuple.map(x => x.sum.toFloat / x.length).toList\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124037,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2fu84cca.scala:11:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2fu84cca.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2fu84cca.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val list = ListBuffer[Float]()\n        for (i <- 1 to nums) {\n            val rand = new scala.util.Random\n            val num = rand.nextInt(100)\n            val den = rand.nextInt(100)\n            val avg = num.toFloat / den.toFloat\n            list += avg\n        }\n        list.toList\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124099,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6k4wdx6j.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6k4wdx6j.scala:17:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6k4wdx6j.scala:18:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var lst = List[Float]()\n        for (i <- 0 until nums.toInt) {\n            var sum = 0.0\n            for (j <- 0 until nums.toInt) {\n                sum += scala.util.Random.nextInt(nums.toInt)\n            }\n            lst = lst :+ (sum / nums.toInt)\n        }\n        lst\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124101,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgnfhk5da.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            lst = lst :+ (sum / nums.toInt)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    Double\n\u001b[31m   |\u001b[0m                          Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgnfhk5da.scala:17:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgnfhk5da.scala:18:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available wh",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val numsList = nums.toString.map(_.asDigit).toList\n        val numsTuple = numsList.grouped(2).toList\n        val numsTupleFloat = numsTuple.map(x => x.map(_.toFloat))\n        val numsTupleFloatAvg = numsTupleFloat.map(x => x.sum / x.length)\n        numsTupleFloatAvg\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666123962,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_0d41i8.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_0d41i8.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_0d41i8.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var list = List[Float]()\n        for (i <- 0 until nums) {\n            var sum = 0.0\n            for (j <- 0 until nums) {\n                sum += pow(i, j)\n            }\n            list = list :+ (sum / nums)\n        }\n        return list\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124101,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbenex5ej.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbenex5ej.scala:9:30 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- \u001b[31m0\u001b[0m until nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                              ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                              Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                              Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbenex5ej.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            list = list :+ (sum / nums)\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    Double\n\u001b[31m   |\u001b[0m                            Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbenex5ej.scala:17:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val list = ListBuffer[Float]()\n        for (i <- 1 to nums) {\n            val tuple = (i, i + 1, i + 2)\n            val sum = tuple._1 + tuple._2 + tuple._3\n            list += sum / 3\n        }\n        list.toList\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1665510643,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvvasnzp8.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvvasnzp8.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvvasnzp8.scala:16:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val numsList = nums.toString.map(_.asDigit).toList\n        val numsTuple = numsList.grouped(2).toList\n        val numsTupleFloat = numsTuple.map(x => x.map(_.toFloat))\n        numsTupleFloat.map(x => x.sum / x.length).toList\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124102,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphk6eqtn2.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphk6eqtn2.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphk6eqtn2.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var list = List[Float]()\n        for (i <- 1 to nums) {\n            list = list :+ i.toFloat\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124099,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9mc5ov4r.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9mc5ov4r.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9mc5ov4r.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val numsList = nums.toString.map(_.asDigit).toList\n        val numsTuple = numsList.grouped(2).toList\n        numsTuple.map(x => x.sum.toFloat / x.length).toList\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124037,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2fu84cca.scala:11:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2fu84cca.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2fu84cca.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val list = ListBuffer[Float]()\n        for (i <- 1 to nums) {\n            val num = i.toFloat\n            list += num / nums\n        }\n        list.toList\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124102,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqnvqr88s.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqnvqr88s.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqnvqr88s.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val numsList = nums.toString.toList.map(_.toString.toInt)\n        val numsListTuple = numsList.grouped(3).toList\n        val numsListTupleFloat = numsListTuple.map(x => x.map(_.toFloat))\n        val numsListTupleFloatAvg = numsListTupleFloat.map(x => x.sum / x.length)\n        numsListTupleFloatAvg\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124101,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp252wnh14.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp252wnh14.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp252wnh14.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val numsList = nums.toString.toList.map(_.asDigit)\n        val numsList2 = numsList.map(x => x * x)\n        val numsList3 = numsList2.map(x => x * x)\n        val numsList4 = numsList3.map(x => x * x)\n        val numsList5 = numsList4.map(x => x * x)\n        val numsList6 = numsList5.map(x => x * x)\n        val numsList7 = numsList6.map(x => x * x)\n        val numsList8 = numsList7.map(x => x * x)\n        val numsList9 = numsList8.map(x => x * x)\n        val numsList10 = numsList9.map(x => x * x)\n        val numsList11 = numsList10.map(x => x * x)\n        val numsList12 = numsList11.map(x => x * x)\n        val numsList13 = numsList12.map(x => x * x)\n        val numsList14 = numsList13.map(x => x * x)\n        val numsList15 = numsList14.map(x => x * x)\n        val numsList16 = numsList15.map(x => x * x)\n        val numsList17 = numsList16.map(x => x * x)\n        val numsList18 = numsList17.map(x => x * x)\n        val numsList19 = numsList18.map(x => x * x)\n        val numsList20 = numsList19.map(x => x * x)\n        val numsList21 = numsList20.map(x => x * x)\n        val numsList22 = numsList21.map(x => x * x)\n        val numsList23 = numsList22.map(x => x * x)\n        val numsList24 = numsList23.map(x => x * x)\n        val numsList25\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124102,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpp6t5i_9m.scala:31:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpp6t5i_9m.scala:31:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Float]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpp6t5i_9m.scala:33:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpp6t5i_9m.scala:34:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var result = List[Float]()\n        for (i <- 1 to nums) {\n            var sum = 0.0\n            for (j <- 1 to i) {\n                sum += j\n            }\n            result = (sum / i) :: result\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1665510657,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpu65omtk5.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpu65omtk5.scala:12:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            result = (sum / i) :: result\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    Double\n\u001b[31m   |\u001b[0m                      Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpu65omtk5.scala:17:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpu65omtk5.scala:18:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var result = List[Float]()\n        for (i <- 1 to nums) {\n            var sum = 0\n            for (j <- 1 to i) {\n                sum += j\n            }\n            result = result :+ (sum.toFloat / i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124085,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7ikq3x7a.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7ikq3x7a.scala:17:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7ikq3x7a.scala:18:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val numsList = nums.toString.toList.map(x => x.toString.toInt)\n        val numsTuple = numsList.zipWithIndex\n        val numsTupleGrouped = numsTuple.groupBy(_._2)\n        val numsTupleGroupedList = numsTupleGrouped.toList\n        val numsTupleGroupedListSorted = numsTupleGroupedList.sortBy(_._1)\n        val numsTupleGroupedListSortedMap = numsTupleGroupedListSorted.map(x => x._2)\n        val numsTupleGroupedListSortedMapFlat = numsTupleGroupedListSortedMap.flatten\n        val numsTupleGroupedListSortedMapFlatMap = numsTupleGroupedListSortedMapFlat.map(x => x._1)\n        val numsTupleGroupedListSortedMapFlatMapGrouped = numsTupleGroupedListSortedMapFlatMap.grouped(3)\n        val numsTupleGroupedListSortedMapFlatMapGroupedList = numsTupleGroupedListSortedMapFlatMapGrouped.toList\n        val numsTupleGroupedListSortedMapFlatMapGroupedListMap = numsTupleGroupedListSortedMapFlatMapGroupedList.map(x => x.sum)\n        val numsTupleGroupedListSortedMapFlatMapGroupedListMapAverage = numsTupleGroupedListSortedMapFlatMapGroupedListMap.map(x => x.toFloat / 3)\n        numsTupleGroupedListSortedMapFlatMapGroupedListMapAverage\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124099,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpokq3a8ll.scala:21:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpokq3a8ll.scala:22:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpokq3a8ll.scala:23:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var list = List[Float]()\n        for (i <- 1 to nums) {\n            var sum = 0.0\n            for (j <- 1 to i) {\n                sum += j\n            }\n            list = (sum / i) :: list\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666123978,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjhx7c7aq.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjhx7c7aq.scala:12:20 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            list = (sum / i) :: list\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Found:    Double\n\u001b[31m   |\u001b[0m                    Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjhx7c7aq.scala:17:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjhx7c7aq.scala:18:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val tuples = List((1, 2), (3, 4), (5, 6))\n        tuples.map(x => (x._1 + x._2) / 2.0f).toList\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124037,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8waiex9m.scala:10:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8waiex9m.scala:11:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8waiex9m.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var list = List[Float]()\n        for (i <- 1 to nums) {\n            var sum = 0.0\n            for (j <- 1 to nums) {\n                sum += pow(i, j)\n            }\n            list = list :+ (sum / nums)\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124102,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp14nx2gdv.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp14nx2gdv.scala:9:27 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                           ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                           Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                           Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp14nx2gdv.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            list = list :+ (sum / nums)\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    Double\n\u001b[31m   |\u001b[0m                            Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp14nx2gdv.scala:17:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val numsList = nums.toString.toList\n        val numsListInt = numsList.map(_.toString.toInt)\n        val numsListIntTuple = numsListInt.grouped(2).toList\n        val numsListIntTupleFloat = numsListIntTuple.map(x => x.map(_.toFloat))\n        val numsListIntTupleFloatAvg = numsListIntTupleFloat.map(x => x.sum / x.length)\n        numsListIntTupleFloatAvg\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124101,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps9dg_ptm.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps9dg_ptm.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps9dg_ptm.scala:16:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var numList = List[Float]()\n        for (i <- 1 to nums.toInt) {\n            var sum = 0\n            for (j <- 1 to i) {\n                sum += j\n            }\n            numList = numList :+ (sum.toFloat / i)\n        }\n        numList\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124102,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4uzmmnmt.scala:17:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4uzmmnmt.scala:18:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4uzmmnmt.scala:19:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var result = List[Float]()\n        for (i <- 1 to nums) {\n            var sum = 0\n            for (j <- 1 to i) {\n                sum += j\n            }\n            result = (sum.toFloat / i.toFloat) :: result\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666123975,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx6fvyc26.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx6fvyc26.scala:17:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx6fvyc26.scala:18:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val numsList = nums.toString.toList.map(_.toString.toInt)\n        val numsListTuple = numsList.grouped(2).toList\n        val numsListTupleFloat = numsListTuple.map(x => x.map(_.toFloat))\n        val numsListTupleFloatAvg = numsListTupleFloat.map(x => x.sum / x.length)\n        numsListTupleFloatAvg\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124102,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvnjs2138.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvnjs2138.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvnjs2138.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var result = List[Float]()\n        for (i <- 0 until nums.toInt) {\n            var sum = 0.0\n            for (j <- 0 until nums.toInt) {\n                sum += (i + j)\n            }\n            result = result :+ (sum / nums.toFloat)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124053,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpn868a3_z.scala:12:32 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            result = result :+ (sum / nums.toFloat)\n\u001b[31m\u001b[31m   |\u001b[0m                                ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                Found:    Double\n\u001b[31m   |\u001b[0m                                Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpn868a3_z.scala:17:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpn868a3_z.scala:18:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m lon",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var result = List[Float]()\n        for (i <- 1 to nums) {\n            var sum = 0\n            for (j <- 1 to nums) {\n                sum += i * j\n            }\n            result = (sum.toFloat / nums) :: result\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124026,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp35vpaffw.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp35vpaffw.scala:9:27 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                           ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                           Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                           Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp35vpaffw.scala:17:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp35vpaffw.scala:18:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((Li",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val nums2 = nums.toString.split(\"\").map(_.toInt).toList\n        val nums3 = nums2.map(x => x * x)\n        val nums4 = nums3.map(x => x.toString.split(\"\").map(_.toInt).toList).flatten\n        val nums5 = nums4.map(x => x * x)\n        val nums6 = nums5.map(x => x.toString.split(\"\").map(_.toInt).toList).flatten\n        val nums7 = nums6.map(x => x * x)\n        val nums8 = nums7.map(x => x.toString.split(\"\").map(_.toInt).toList).flatten\n        val nums9 = nums8.map(x => x * x)\n        val nums10 = nums9.map(x => x.toString.split(\"\").map(_.toInt).toList).flatten\n        val nums11 = nums10.map(x => x * x)\n        val nums12 = nums11.map(x => x.toString.split(\"\").map(_.toInt).toList).flatten\n        val nums13 = nums12.map(x => x * x)\n        val nums14 = nums13.map(x => x.toString.split(\"\").map(_.toInt).toList).flatten\n        val nums15 = nums14.map(x => x * x)\n        val nums16 = nums15.map(x => x.toString.split(\"\").map(_.toInt).toList).flatten\n        val nums17 = nums16.map(x => x * x)\n        val nums18 = nums17.map(x => x.toString.split(\"\").map(_.toInt).toList).flatten\n        val nums19 = nums18.map(x => x * x)\n        val nums20 = nums19.map(x => x.toString.split(\"\").map(_.toInt).toList).flatten\n        val nums21 = nums20.\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124103,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp91w0esgi.scala:26:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp91w0esgi.scala:26:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Float]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp91w0esgi.scala:28:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp91w0esgi.scala:29:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long)",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val list = ListBuffer[Float]()\n        for (i <- 1 to nums) {\n            val num = scala.util.Random.nextInt(nums.toInt)\n            list += num\n        }\n        list.toList\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124102,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnh7dnwoz.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnh7dnwoz.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnh7dnwoz.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var result = List[Float]()\n        for (i <- 0 to nums.toString.length - 1) {\n            result = result :+ nums.toString.charAt(i).asDigit.toFloat\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124103,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpeqsj9m8v.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpeqsj9m8v.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpeqsj9m8v.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var list = List[Float]()\n        for (i <- 1 to nums) {\n            var tuple = (i, i + 1, i + 2)\n            var sum = 0.0\n            for (j <- tuple) {\n                sum += j\n            }\n            list = list :+ (sum / 3)\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124103,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp76u0kk0a.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp76u0kk0a.scala:10:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- tuple) {\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      value foreach is not a member of (Int, Int, Int)\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp76u0kk0a.scala:13:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m            list = list :+ (sum / \u001b[31m3\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    Double\n\u001b[31m   |\u001b[0m                            Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp76u0kk0a.scala:18:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Erro",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var result : List[Float] = List()\n        for (i <- 0 until nums.toInt) {\n            var sum : Float = 0\n            for (j <- 0 until nums.toInt) {\n                sum += scala.util.Random.nextInt(nums.toInt)\n            }\n            result = result :+ (sum / nums)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124103,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4h5q0_h8.scala:17:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4h5q0_h8.scala:18:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4h5q0_h8.scala:19:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val tuples = List((1, 2), (3, 4), (5, 6))\n        val result = for (tuple <- tuples) yield (tuple._1 + tuple._2) / 2.0f\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124103,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpp_mk6n8x.scala:11:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpp_mk6n8x.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpp_mk6n8x.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val numsList = nums.toString.toList.map(_.toString.toInt)\n        val numsListLength = numsList.length\n        val numsListSum = numsList.sum\n        val numsListAverage = numsListSum.toFloat / numsListLength\n        val numsListAverageList = List(numsListAverage)\n        numsListAverageList\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124010,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmww8lnad.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmww8lnad.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmww8lnad.scala:16:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val list = ListBuffer[Float]()\n        for (i <- 1 to nums) {\n            val num = scala.util.Random.nextInt(100)\n            list += num\n        }\n        list.toList\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666123961,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_ykfcndo.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_ykfcndo.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_ykfcndo.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val tuples = List((1,2),(3,4),(5,6))\n        val result = tuples.map(x => (x._1 + x._2).toFloat / 2)\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124053,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1uu0fn48.scala:11:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1uu0fn48.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1uu0fn48.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val numsList = nums.toString.split(\"\").map(_.toInt).toList\n        val numsList2 = numsList.map(x => List.fill(x)(x))\n        val numsList3 = numsList2.map(x => x.sum.toFloat / x.length)\n        numsList3\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124104,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4qsttqj1.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4qsttqj1.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4qsttqj1.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val numsList = nums.toString.toList.map(_.toString.toInt)\n        val numsList2 = numsList.combinations(2).toList\n        val numsList3 = numsList2.map(x => x.reduce(_ * _))\n        val numsList4 = numsList3.map(x => x.toFloat)\n        val numsList5 = numsList4.map(x => x / 2)\n        numsList5\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124113,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8jfx9r0u.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8jfx9r0u.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8jfx9r0u.scala:16:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val numsList = nums.toString.map(_.asDigit).toList\n        val sum = numsList.sum\n        val len = numsList.length\n        val avg = sum.toFloat / len\n        List(avg)\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124114,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpeygt0wr5.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpeygt0wr5.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpeygt0wr5.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val numsList = nums.toString.map(_.asDigit).toList\n        val numsTuple = numsList.grouped(2).toList\n        val numsTupleFloat = numsTuple.map(x => x.map(_.toFloat))\n        numsTupleFloat.map(x => x.sum / x.length)\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124116,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpn8ketv_k.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpn8ketv_k.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpn8ketv_k.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val list = ListBuffer[Float]()\n        for (i <- 1 to nums) {\n            val tuple = (i, i + 1)\n            list += (tuple._1 + tuple._2) / 2.0f\n        }\n        list.toList\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666123945,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpb3bwj7ck.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpb3bwj7ck.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpb3bwj7ck.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val tuples = List((1,2),(3,4),(5,6),(7,8),(9,10))\n        val result = tuples.map(x => (x._1 + x._2).toFloat / 2)\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124114,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf5lh_e8m.scala:11:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf5lh_e8m.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf5lh_e8m.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val tuples = List((1,2), (2,3), (3,4), (4,5))\n        val result = tuples.map(x => (x._1 + x._2) / 2.0f)\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124117,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptlp6s440.scala:11:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptlp6s440.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptlp6s440.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var sum = 0.0\n        var count = 0.0\n        for (i <- 1 to nums) {\n            sum += i\n            count += 1\n        }\n        List(sum / count)\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1665510644,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_sjh_e_j.scala:8:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_sjh_e_j.scala:12:13 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        List(sum / count)\n\u001b[31m\u001b[31m   |\u001b[0m             ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m             Found:    Double\n\u001b[31m   |\u001b[0m             Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_sjh_e_j.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_sjh_e_j.scala:16:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.to",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val list = nums.toString.split(\"\").map(_.toInt).toList\n        val sum = list.foldLeft(0)(_ + _)\n        val avg = sum.toFloat / list.length\n        List(avg)\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124116,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwxg7_o7a.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwxg7_o7a.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwxg7_o7a.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val numsList = nums.toString.toList.map(_.toString.toInt)\n        val numsTuple = numsList.grouped(2).toList\n        val numsTupleFloat = numsTuple.map(x => x.map(_.toFloat))\n        val numsTupleFloatAvg = numsTupleFloat.map(x => x.sum / x.length)\n        numsTupleFloatAvg\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124117,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzqem7l0_.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzqem7l0_.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzqem7l0_.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var list = List[Float]()\n        for (i <- 1 to nums) {\n            var sum = 0.0\n            for (j <- 1 to nums) {\n                sum += (i * j)\n            }\n            list = list :+ (sum / nums)\n        }\n        return list\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124117,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy0sr1glo.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy0sr1glo.scala:9:27 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                           ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                           Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                           Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy0sr1glo.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            list = list :+ (sum / nums)\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    Double\n\u001b[31m   |\u001b[0m                            Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy0sr1glo.scala:17:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var result = List[Float]()\n        for (i <- 0 to nums.toString.length - 1) {\n            result = result :+ nums.toString.charAt(i).toString.toFloat\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666123945,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy68ixz0w.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy68ixz0w.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy68ixz0w.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val list = ListBuffer[Float]()\n        for (i <- 0 to nums.toInt - 1) {\n            val num = scala.util.Random.nextInt(100)\n            list += num.toFloat\n        }\n        list.toList\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124116,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfqgog2x_.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfqgog2x_.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfqgog2x_.scala:16:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var result = List[Float]()\n        for (i <- 1 to nums) {\n            var sum = 0\n            for (j <- 1 to i) {\n                sum += j\n            }\n            result = result :+ (sum.toFloat / i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124085,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7ikq3x7a.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7ikq3x7a.scala:17:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7ikq3x7a.scala:18:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var result = List[Float]()\n        for (i <- 0 until nums.toInt) {\n            var sum = 0\n            for (j <- 0 until nums.toInt) {\n                sum += i * j\n            }\n            result = (sum.toFloat / nums.toFloat) :: result\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124069,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzsd4nunj.scala:17:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzsd4nunj.scala:18:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzsd4nunj.scala:19:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val numsList = nums.toString.toList.map(_.toString.toInt)\n        val numsListTuple = numsList.sliding(2, 2).toList\n        val numsListTupleAverage = numsListTuple.map(x => (x(0) + x(1)) / 2.0f)\n        numsListTupleAverage\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124117,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptbi0lwe5.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptbi0lwe5.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptbi0lwe5.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val numsList = nums.toString.toList.map(x => x.toString.toInt)\n        val numsTuple = numsList.zipWithIndex\n        val numsTupleList = numsTuple.groupBy(x => x._2 % 3)\n        val numsTupleList2 = numsTupleList.map(x => x._2.map(y => y._1))\n        val numsTupleList3 = numsTupleList2.map(x => x.sum)\n        val numsTupleList4 = numsTupleList3.map(x => x.toFloat / 3)\n        numsTupleList4.toList\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124118,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmporqt725o.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmporqt725o.scala:16:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmporqt725o.scala:17:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val numsList = nums.toString.split(\"\").toList.map(x => x.toInt)\n        val numsTuple = numsList.grouped(3).toList\n        val numsTupleFloat = numsTuple.map(x => x.map(y => y.toFloat))\n        val numsTupleFloatAvg = numsTupleFloat.map(x => x.sum / x.length)\n        numsTupleFloatAvg\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124117,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8h632_ii.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8h632_ii.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8h632_ii.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var sum = 0.0\n        var count = 0\n        for (i <- 1 to nums) {\n            if (i % 3 == 0 || i % 5 == 0) {\n                sum += i\n                count += 1\n            }\n        }\n        List(sum.toFloat / count)\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666123994,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0qjm816w.scala:8:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0qjm816w.scala:17:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0qjm816w.scala:18:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val list = ListBuffer[Float]()\n        for (i <- 0 until nums.toInt) {\n            val tuple = (i, i + 1)\n            list += (tuple._1 + tuple._2) / 2.0f\n        }\n        list.toList\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124117,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpn9x8dv18.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpn9x8dv18.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpn9x8dv18.scala:16:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val list = ListBuffer[Float]()\n        for (i <- 0 to nums.toString.length - 1) {\n            val num = nums.toString.charAt(i).toString.toInt\n            list += num.toFloat\n        }\n        list.toList\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124118,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo4c1ooy3.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo4c1ooy3.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo4c1ooy3.scala:16:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var result = List[Float]()\n        for (i <- 0 to nums.toString.length - 1) {\n            result = result :+ nums.toString.charAt(i).toString.toInt.toFloat\n        }\n        result.map(x => x / nums.toString.length)\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124118,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpljkgeyzz.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpljkgeyzz.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpljkgeyzz.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var result = List[Float]()\n        for (i <- 1 to nums) {\n            var sum = 0.0\n            for (j <- 1 to i) {\n                sum += 1.0 / j\n            }\n            result = result :+ sum.toFloat\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124118,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpi8mx8so_.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpi8mx8so_.scala:17:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpi8mx8so_.scala:18:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val numsList = nums.toString.map(_.asDigit).toList\n        val numsListTuple = numsList.grouped(2).toList\n        val numsListTupleAverage = numsListTuple.map(x => x.sum.toFloat / x.length)\n        numsListTupleAverage\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124118,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp33wh0z0i.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp33wh0z0i.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp33wh0z0i.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val nums2 = nums.toString.split(\"\").map(x => x.toInt).toList\n        val nums3 = nums2.combinations(2).toList\n        val nums4 = nums3.map(x => x.reduceLeft(_ * _))\n        val nums5 = nums4.map(x => x.toFloat)\n        val nums6 = nums5.map(x => x / 2)\n        nums6\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124118,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuwsgg9co.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuwsgg9co.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuwsgg9co.scala:16:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val tuples = List((1,2),(3,4),(5,6),(7,8),(9,10))\n        val result = tuples.map(x => (x._1 + x._2).toFloat / 2)\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124114,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf5lh_e8m.scala:11:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf5lh_e8m.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf5lh_e8m.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val list = ListBuffer[Float]()\n        for (i <- 1 to nums) {\n            val tuple = (i, i + 1)\n            list += (tuple._1 + tuple._2) / 2.0f\n        }\n        list.toList\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666123945,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpb3bwj7ck.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpb3bwj7ck.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpb3bwj7ck.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val tuples = List((1,2,3),(4,5,6),(7,8,9))\n        tuples.map(t => t._1 + t._2 + t._3).map(t => t / 3.0f).toList\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124118,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzaqc0kdu.scala:10:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzaqc0kdu.scala:11:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzaqc0kdu.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val tuples = List((1,2), (3,4), (5,6))\n        val result = tuples.map(x => (x._1 + x._2) / 2.0f)\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124037,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuu3r5cb3.scala:11:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuu3r5cb3.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuu3r5cb3.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val numsList = nums.toString.toList.map(_.asDigit)\n        val numsTuple = numsList.sliding(2, 2).toList\n        numsTuple.map(x => (x(0) + x(1)) / 2.0f).toList\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124119,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptmml0w6p.scala:11:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptmml0w6p.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptmml0w6p.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val numsList = nums.toString.toList.map(_.toString.toInt)\n        val numsTuple = numsList.grouped(2).toList\n        numsTuple.map(x => x.sum.toFloat / x.length).toList\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124119,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8obh69_a.scala:11:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8obh69_a.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8obh69_a.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var list = List[Float]()\n        for (i <- 0 until nums.toInt) {\n            var sum = 0.0\n            for (j <- 0 until nums.toInt) {\n                sum += Random.nextInt(nums.toInt)\n            }\n            list = (sum / nums.toInt) :: list\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124119,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmphz2ygqzo.scala:10:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                sum += Random.nextInt(nums.toInt)\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Double - did you mean Double.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphz2ygqzo.scala:10:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                sum += Random.nextInt(nums.toInt)\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Not found: Random\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphz2ygqzo.scala:12:20 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            list = (sum / nums.toInt) :: list\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Found:    Double\n\u001b[31m   |\u001b[0m                    Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphz2ygqzo.scala:17:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphz2ygqzo.scala:18:24 --------------------\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val numsList = nums.toString.split(\"\").map(_.toInt).toList\n        val numsList2 = numsList.map(x => List.fill(x)(x))\n        val numsList3 = numsList2.flatten\n        val numsList4 = numsList3.grouped(2).toList\n        val numsList5 = numsList4.map(x => (x(0), x(1)))\n        val numsList6 = numsList5.map(x => (x._1 + x._2) / 2.0f)\n        numsList6\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124120,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6q0fyjsv.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6q0fyjsv.scala:16:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6q0fyjsv.scala:17:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val tuples = List((1,2,3),(4,5,6),(7,8,9))\n        val result = tuples.map(t => t._1 + t._2 + t._3)\n        result.map(t => t.toFloat / 3)\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124123,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwit0yvcg.scala:11:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwit0yvcg.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwit0yvcg.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val numsList = nums.toString.map(_.asDigit).toList\n        val numsTuple = numsList.grouped(2).toList\n        val numsTupleFloat = numsTuple.map(x => (x(0).toFloat + x(1).toFloat) / 2)\n        numsTupleFloat\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1665510656,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptz_a4o_s.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptz_a4o_s.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptz_a4o_s.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val list = ListBuffer[Float]()\n        for (i <- 0 to nums.toInt - 1) {\n            val tuple = (i, i + 1)\n            list += (tuple._1 + tuple._2) / 2.0f\n        }\n        list.toList\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124123,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpebdcvuh_.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpebdcvuh_.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpebdcvuh_.scala:16:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var lst = List[Float]()\n        for (i <- 1 to nums) {\n            var sum = 0.0\n            for (j <- 1 to nums) {\n                sum += pow(i, j)\n            }\n            lst = lst :+ (sum / nums)\n        }\n        return lst\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124123,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0rvsb3q.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0rvsb3q.scala:9:27 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                           ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                           Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                           Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0rvsb3q.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            lst = lst :+ (sum / nums)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    Double\n\u001b[31m   |\u001b[0m                          Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc0rvsb3q.scala:17:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val list = ListBuffer[Float]()\n        for (i <- 0 until nums) {\n            val num = (random * 100).toInt\n            list += num\n        }\n        list.toList\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124123,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpou6rcf9w.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpou6rcf9w.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpou6rcf9w.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when co",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val numsList = nums.toString.map(_.asDigit).toList\n        val numsTuple = numsList.grouped(2).toList\n        val numsTupleFloat = numsTuple.map(x => x.map(_.toFloat))\n        val numsTupleFloatAvg = numsTupleFloat.map(x => x.sum / x.length)\n        numsTupleFloatAvg\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666123962,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_0d41i8.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_0d41i8.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_0d41i8.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val list = ListBuffer[Float]()\n        for (i <- 1 to nums) {\n            val num = scala.io.StdIn.readLine.split(\" \").map(_.toFloat)\n            list += num.sum / num.length\n        }\n        list.toList\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124038,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpruaqvl7m.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpruaqvl7m.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpruaqvl7m.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val list = List(nums)\n        val tuple = Tuple1(list)\n        val tupleOfTuples = Tuple1(tuple)\n        val sum = tupleOfTuples._1._1.sum\n        val size = tupleOfTuples._1._1.size\n        val average = sum.toFloat / size\n        List(average)\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124123,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdru0vkjf.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdru0vkjf.scala:16:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdru0vkjf.scala:17:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var result = List[Float]()\n        for (i <- 0 until nums.toInt) {\n            var sum = 0.0\n            for (j <- 0 until nums.toInt) {\n                sum += (i + j)\n            }\n            result = (sum / nums.toInt) :: result\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124123,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp76oapnqk.scala:12:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            result = (sum / nums.toInt) :: result\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    Double\n\u001b[31m   |\u001b[0m                      Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp76oapnqk.scala:17:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp76oapnqk.scala:18:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when com",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val tuples = List((1,2,3),(4,5,6),(7,8,9))\n        tuples.map(x => x._1 + x._2 + x._3).map(x => x.toFloat / 3).toList\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124123,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkfnpvymb.scala:10:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkfnpvymb.scala:11:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkfnpvymb.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}