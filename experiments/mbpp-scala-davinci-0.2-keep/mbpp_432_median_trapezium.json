{
  "name": "mbpp_432_median_trapezium",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the median length of a trapezium.\n    def medianTrapezium(base1 : Long, base2 : Long, height : Long) : Float = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_432_median_trapezium.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(medianTrapezium((15l), (25l), (35l)) == 20l);\n    assert(medianTrapezium((10l), (20l), (30l)) == 15l);\n    assert(medianTrapezium((6l), (9l), (4l)) == (7.5f));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val median = (base1 + base2) / 2\n        val medianLength = sqrt(pow(median, 2) + pow(height, 2))\n        medianLength.toFloat",
    "        val median = sqrt(pow(base1 - base2, 2) + pow(height, 2))\n        median.toFloat",
    "        val median = (base1 + base2) / 2\n        val result = median * height\n        return result.toFloat",
    "        val median = (base1 + base2) / 2\n        val area = median * height\n        val medianLength = sqrt(area)\n        medianLength.toFloat",
    "        val median = (base1 + base2) / 2\n        return (median * height).toFloat",
    "        val median = (base1 + base2) / 2\n        val area = median * height\n        sqrt(area).toFloat",
    "        val median = (base1 + base2) / 2\n        val length = sqrt(pow(median, 2) + pow(height, 2))\n        length.toFloat",
    "        val median1 = sqrt(pow(base1, 2) + pow(height, 2))\n        val median2 = sqrt(pow(base2, 2) + pow(height, 2))\n        return (median1 + median2) / 2",
    "        val median = (base1 + base2) / 2\n        val length = sqrt(median * median + height * height)\n        length.toFloat",
    "        val median = sqrt(pow(base1 - base2, 2) + pow(height, 2))\n        median.toFloat",
    "        val median = (base1 + base2) / 2\n        val length = sqrt(median * median + height * height)\n        length.toFloat",
    "        val median = (base1 + base2) / 2.0f\n        val length = sqrt(median * median + height * height).toFloat\n        length",
    "        val median = (base1 + base2) / 2\n        val length = sqrt(pow(height, 2) + pow(median, 2))\n        length.toFloat",
    "        val median = (base1 + base2) / 2\n        val length = sqrt(pow(height, 2) + pow(median, 2))\n        length.toFloat",
    "        val median = (base1 + base2) / 2.0f\n        return median * height",
    "        val median = (base1 + base2) / 2\n        val area = median * height\n        sqrt(area).toFloat",
    "        val median = (base1 + base2) / 2\n        val length = sqrt(pow(median, 2) + pow(height, 2))\n        length.toFloat",
    "        val s = (base1 + base2 + 2 * sqrt(base1 * base2)) / 2\n        val area = height * s\n        val median = 2 * sqrt(s * (s - base1) * (s - base2) * (s - height)) / base1\n        median.toFloat",
    "        val median = (base1 + base2) / 2\n        val length = sqrt(pow(median, 2) + pow(height, 2))\n        length.toFloat",
    "        val median = (base1 + base2) / 2.0f\n        val length = sqrt(pow(height, 2) + pow(median, 2)).toFloat\n        length"
  ]
}