{
  "name": "mbpp_293_otherside_rightangle",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the third side of a right angled triangle.\n    def othersideRightangle(w : Long, h : Long) : Float = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_293_otherside_rightangle.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(othersideRightangle((7l), (8l)) == (10.63014581273465f));\n    assert(othersideRightangle((3l), (4l)) == 5l);\n    assert(othersideRightangle((7l), (15l)) == (16.55294535724685f));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        sqrt(w*w + h*h).toFloat",
    "        sqrt(pow(w, 2) + pow(h, 2)).toFloat",
    "        sqrt(w*w + h*h).toFloat",
    "        sqrt(w * w + h * h).toFloat",
    "        sqrt(w*w + h*h).toFloat",
    "        sqrt(pow(w, 2) + pow(h, 2)).toFloat",
    "        sqrt(pow(w, 2) + pow(h, 2)).toFloat",
    "        sqrt(w * w + h * h).toFloat",
    "        sqrt(pow(w, 2) + pow(h, 2)).toFloat",
    "        sqrt(w*w + h*h).toFloat",
    "        sqrt(w*w + h*h).toFloat",
    "        sqrt(pow(w, 2) + pow(h, 2)).toFloat",
    "        sqrt(pow(w, 2) + pow(h, 2)).toFloat",
    "        sqrt(w*w + h*h).toFloat",
    "        sqrt(w * w + h * h).toFloat",
    "        sqrt(w * w + h * h).toFloat",
    "        sqrt(w*w + h*h).toFloat",
    "        sqrt(w * w + h * h).toFloat",
    "        sqrt(w*w + h*h).toFloat",
    "        sqrt(pow(w, 2) + pow(h, 2)).toFloat"
  ]
}