{
  "name": "mbpp_100_next_smallest_palindrome",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    def nextSmallestPalindrome(num : Long) : Long = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_100_next_smallest_palindrome.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(nextSmallestPalindrome((99l)) == (101l));\n    assert(nextSmallestPalindrome((1221l)) == (1331l));\n    assert(nextSmallestPalindrome((120l)) == (121l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val s = num.toString\n        val n = s.length\n        val half = n / 2\n        val left = s.substring(0, half)\n        val right = s.substring(half + n % 2, n)\n        val leftRev = left.reverse\n        if (leftRev < right) {\n            val leftInc = (left.toLong + 1).toString\n            val leftIncRev = leftInc.reverse\n            val leftIncRevLen = leftIncRev.length\n            val rightLen = right.length\n            val rightInc = if (leftIncRevLen > rightLen) leftIncRev.substring(0, rightLen) else leftIncRev\n            val leftIncRevLen2 = leftIncRev.length\n            val rightLen2 = right.length\n            val rightInc2 = if (leftIncRevLen2 > rightLen2) leftIncRev.substring(0, rightLen2) else leftIncRev\n            (leftInc + rightInc2).toLong\n        } else {\n            (left + leftRev).toLong\n        }",
    "        val str = num.toString\n        val len = str.length\n        val half = len / 2\n        val firstHalf = str.substring(0, half)\n        val secondHalf = str.substring(half + (len % 2), len)\n        val firstHalfRev = firstHalf.reverse\n        val secondHalfRev = secondHalf.reverse\n        if (firstHalfRev == secondHalf) {\n            val firstHalfInc = (BigInt(firstHalf) + 1).toString\n            val firstHalfIncLen = firstHalfInc.length\n            val firstHalfIncRev = firstHalfInc.reverse\n            val secondHalfInc = if (firstHalfIncLen == half) firstHalfIncRev else firstHalfIncRev.substring(0, half)\n            val secondHalfIncLen = secondHalfInc.length\n            val secondHalfIncRev = secondHalfInc.reverse\n            val firstHalfIncRevLen = firstHalfIncRev.length\n            val firstHalfIncRevRev = firstHalfIncRev.reverse\n            val firstHalfIncRevRevLen = firstHalfIncRevRev.length\n            val firstHalfIncRevRevRev = if (firstHalfIncRevLen == half) firstHalfIncRevRev else firstHalfIncRevRev.substring(0, half)\n            val firstHalfIncRevRevRevLen = firstHalfIncRevRevRev.length\n            val firstHalfIncRevRevRevRev = firstHalfIncRevRevRev.reverse\n            val firstHalfIncRevRevRevRevLen = firstHalfIncRevRevRevRev.length\n            val firstHalfIncRevRevRevRevRev = if (firstHalfIncRevRevRevLen == half) firstHalfIncRevRevRevRev else firstHalfIncRevRevRevRev.substring(0, half)\n            val firstHalfIncRevRevRevRevRevLen = firstHalfIncRevRevRevRevRev.length\n            val firstHalfIncRevRevRevRevRevRev = firstHalfIncRevRevRevRevRev.reverse\n            val firstHalfIncRevRevRevRevRevRevLen = firstHalfIncRevRevRevRevRevRev.length\n            val firstHalfIncRevRevRevRevRevRevRev = if (firstHalfIncRevRevRevRevRevLen == half) firstHalfIncRevRevRevRevRevRev else firstHalfIncRevRevRevRevRevRev.substring(",
    "        val s = num.toString\n        val n = s.length\n        val half = n / 2\n        val left = s.substring(0, half)\n        val right = s.substring(half + n % 2)\n        val leftRev = left.reverse\n        val rightRev = right.reverse\n        val leftRevNum = leftRev.toLong\n        val rightRevNum = rightRev.toLong\n        val leftNum = left.toLong\n        val rightNum = right.toLong\n        if (leftRevNum > rightNum) {\n            val leftNum = left.toLong\n            val leftRevNum = leftRev.toLong\n            val leftRevNumPlusOne = leftRevNum + 1\n            val leftRevNumPlusOneStr = leftRevNumPlusOne.toString\n            val leftRevNumPlusOneStrRev = leftRevNumPlusOneStr.reverse\n            val leftRevNumPlusOneStrRevNum = leftRevNumPlusOneStrRev.toLong\n            val leftRevNumPlusOneStrRevNumStr = leftRevNumPlusOneStrRevNum.toString\n            val leftRevNumPlusOneStrRevNumStrLen = leftRevNumPlusOneStrRevNumStr.length\n            val leftRevNumPlusOneStrRevNumStrLenHalf = leftRevNumPlusOneStrRevNumStrLen / 2\n            val leftRevNumPlusOneStrRevNumStrLenHalfStr = leftRevNumPlusOneStrRevNumStr.substring(0, leftRevNumPlusOneStrRevNumStrLenHalf)\n            val leftRevNumPlusOneStrRevNumStrLenHalfStrNum = leftRevNumPlusOneStrRevNumStrLenHalfStr.toLong\n            val leftRevNumPlusOneStrRevNumStrLenHalfStrNumStr = leftRevNumPlusOneStrRevNumStrLenHalfStrNum.toString\n            val leftRevNumPlusOneStrRevNumStrLenHalfStrNumStrLen = leftRevNumPlusOneStrRevNumStrLenHalfStrNumStr.length\n            val leftRevNumPlusOneStrRevNumStrLenHalfStrNumStrLenHalf = leftRevNumPlusOneStrRevNumStrLenHalfStrNumStrLen / 2\n            val leftRevNumPlusOneStrRevNumStrLenHalfStrNumStrLenHalfStr = leftRevNumPlusOneStrRevNumStrLen",
    "        var n = num.toString\n        var i = 0\n        while (i < n.length / 2 && n(i) == n(n.length - 1 - i)) i += 1\n        if (i == n.length / 2) {\n            if (n.length % 2 == 0) {\n                var j = n.length / 2 - 1\n                while (j >= 0 && n(j) == '9') {\n                    n = n.substring(0, j) + \"0\" + n.substring(j + 1)\n                    j -= 1\n                }\n                if (j == -1) n = \"1\" + n\n                else n = n.substring(0, j) + (n(j).asDigit + 1).toString + n.substring(j + 1)\n            } else {\n                var j = n.length / 2\n                while (j >= 0 && n(j) == '9') {\n                    n = n.substring(0, j) + \"0\" + n.substring(j + 1)\n                    j -= 1\n                }\n                if (j == -1) n = \"1\" + n\n                else n = n.substring(0, j) + (n(j).asDigit + 1).toString + n.substring(j + 1)\n            }\n        } else {\n            var j = n.length / 2\n            if (n.length % 2 == 0) j -= 1\n            while (j >= 0 && n(j) == '9') {\n                n = n.substring(0, j) + \"0\" + n.substring(j + 1)\n                j -= 1\n            }\n            if (j == -1) n = \"1\" + n\n            else n = n.substring(0, j) + (n(j).asDigit + 1).toString + n.substring(j + 1)\n        }\n        var m = n.substring(0, n.length / 2)\n        if (n.length % 2 == 1) m += n(n.length / 2)\n        n = m + m.reverse\n        n.toLong",
    "        val s = num.toString\n        val n = s.length\n        val half = n / 2\n        val left = s.substring(0, half)\n        val right = s.substring(half + n % 2)\n        val leftNum = left.toLong\n        val rightNum = right.toLong\n        val leftNumRev = left.reverse.toLong\n        val rightNumRev = right.reverse.toLong\n        if (rightNumRev < leftNum) {\n            val nextLeft = (leftNum + 1).toString\n            val nextLeftRev = nextLeft.reverse\n            val nextLeftRevLen = nextLeftRev.length\n            val nextLeftLen = nextLeft.length\n            val nextLeftRevHalf = nextLeftRevLen / 2\n            val nextLeftHalf = nextLeftLen / 2\n            val nextLeftRevFirstHalf = nextLeftRev.substring(0, nextLeftRevHalf)\n            val nextLeftRevSecondHalf = nextLeftRev.substring(nextLeftRevHalf + nextLeftRevLen % 2)\n            val nextLeftFirstHalf = nextLeft.substring(0, nextLeftHalf)\n            val nextLeftSecondHalf = nextLeft.substring(nextLeftHalf + nextLeftLen % 2)\n            if (nextLeftRevFirstHalf == nextLeftFirstHalf) {\n                (nextLeft + nextLeftRevSecondHalf).toLong\n            } else {\n                (nextLeft + nextLeftSecondHalf).toLong\n            }\n        } else {\n            (left + leftNumRev).toLong\n        }",
    "        val str = num.toString\n        val len = str.length\n        val half = len / 2\n        val (left, right) = str.splitAt(half)\n        val leftRev = left.reverse\n        val rightRev = right.reverse\n        val leftNum = left.toLong\n        val rightNum = right.toLong\n        val leftRevNum = leftRev.toLong\n        val rightRevNum = rightRev.toLong\n        val mid = if (len % 2 == 0) \"\" else str(half).toString\n        val midNum = mid.toLong\n        val midRev = mid.reverse\n        val midRevNum = midRev.toLong\n        if (leftRevNum > rightNum) {\n            val leftNum = left.toLong\n            val leftRevNum = leftRev.toLong\n            val midNum = mid.toLong\n            val midRevNum = midRev.toLong\n            val leftNum1 = if (midNum > 0) leftNum + 1 else leftNum\n            val leftRevNum1 = if (midRevNum > 0) leftRevNum + 1 else leftRevNum\n            val left1 = leftNum1.toString\n            val leftRev1 = leftRevNum1.toString\n            val mid1 = midNum.toString\n            val midRev1 = midRevNum.toString\n            val left1Rev = left1.reverse\n            val leftRev1Rev = leftRev1.reverse\n            val mid1Rev = mid1.reverse\n            val midRev1Rev = midRev1.reverse\n            val left1RevNum = left1Rev.toLong\n            val leftRev1RevNum = leftRev1Rev.toLong\n            val mid1RevNum = mid1Rev.toLong\n            val midRev1RevNum = midRev1Rev.toLong\n            val left1RevNum1 = if (mid1RevNum > 0) left1RevNum + 1 else left1RevNum\n            val leftRev1RevNum1 = if (midRev1RevNum > 0) leftRev1RevNum + 1 else leftRev1RevNum\n            val left1Rev1 = left1RevNum1.toString\n            val leftRev1Rev1 = leftRev1RevNum1.toString\n",
    "        var n = num\n        while(true) {\n            n += 1\n            if(isPalindrome(n)) return n\n        }\n        return -1",
    "        val digits = num.toString.toList.map(_.toString.toInt)\n        val len = digits.length\n        if (len == 1) return num + 1\n        val half = len / 2\n        val left = digits.slice(0, half)\n        val right = digits.slice(len - half, len)\n        val leftRev = left.reverse\n        val leftRevStr = leftRev.mkString\n        val rightStr = right.mkString\n        if (leftRevStr > rightStr) {\n            val leftStr = left.mkString\n            val leftStrInt = leftStr.toInt\n            val leftStrIntNext = leftStrInt + 1\n            val leftStrIntNextStr = leftStrIntNext.toString\n            val leftStrIntNextStrLen = leftStrIntNextStr.length\n            if (leftStrIntNextStrLen > half) {\n                val leftStrIntNextStrLenHalf = leftStrIntNextStrLen / 2\n                val leftStrIntNextStrLeft = leftStrIntNextStr.slice(0, leftStrIntNextStrLenHalf)\n                val leftStrIntNextStrRight = leftStrIntNextStr.slice(leftStrIntNextStrLen - leftStrIntNextStrLenHalf, leftStrIntNextStrLen)\n                val leftStrIntNextStrLeftRev = leftStrIntNextStrLeft.reverse\n                val leftStrIntNextStrLeftRevStr = leftStrIntNextStrLeftRev.mkString\n                val leftStrIntNextStrRightStr = leftStrIntNextStrRight.mkString\n                if (leftStrIntNextStrLeftRevStr > leftStrIntNextStrRightStr) {\n                    val leftStrIntNextStrLeftStr = leftStrIntNextStrLeft.mkString\n                    val leftStrIntNextStrLeftStrInt = leftStrIntNextStrLeftStr.toInt\n                    val leftStrIntNextStrLeftStrIntNext = leftStrIntNextStrLeftStrInt + 1\n                    val leftStrIntNextStrLeftStrIntNextStr = leftStrIntNextStrLeftStrIntNext.toString\n                    val leftStrIntNextStrLeftStrIntNextStrLen = leftStrIntNextStrLeftStrIntNextStr.length\n                    if (leftStrIntNextStrLeftStrIntNextStrLen > leftStrIntNextStr",
    "        val digits = num.toString.toList.map(_.asDigit)\n        val n = digits.length\n        var i = 0\n        while (i < n / 2) {\n            if (digits(i) < digits(n - 1 - i)) return num - pow(10, n - 1 - i).toLong + 1\n            else if (digits(i) > digits(n - 1 - i)) return num + pow(10, n - 1 - i).toLong\n            i += 1\n        }\n        num",
    "        var n = num\n        while (true) {\n            n += 1\n            if (isPalindrome(n)) return n\n        }\n        return -1",
    "        val s = num.toString\n        val n = s.length\n        val half = n / 2\n        val left = s.substring(0, half)\n        val right = s.substring(half + n % 2, n)\n        val leftInt = left.toInt\n        val rightInt = right.toInt\n        if (leftInt == rightInt) {\n            val nextLeft = (leftInt + 1).toString\n            val nextRight = nextLeft.reverse\n            val next = nextLeft + nextRight\n            if (n % 2 == 1) next.substring(0, half + 1) + next.substring(half, half + 1) + next.substring(half + 1, n) else next\n        } else if (leftInt > rightInt) {\n            val nextLeft = left\n            val nextRight = nextLeft.reverse\n            val next = nextLeft + nextRight\n            if (n % 2 == 1) next.substring(0, half + 1) + next.substring(half, half + 1) + next.substring(half + 1, n) else next\n        } else {\n            val nextLeft = (leftInt + 1).toString\n            val nextRight = nextLeft.reverse\n            val next = nextLeft + nextRight\n            if (n % 2 == 1) next.substring(0, half + 1) + next.substring(half, half + 1) + next.substring(half + 1, n) else next\n        }",
    "        var n = num\n        while (true) {\n            n += 1\n            if (isPalindrome(n)) return n\n        }\n        return -1",
    "        var n = num\n        while(true) {\n            n += 1\n            if(isPalindrome(n)) return n\n        }\n        return -1",
    "        val s = num.toString\n        val n = s.length\n        val half = n / 2\n        val left = s.substring(0, half)\n        val right = s.substring(half + n % 2, n)\n        val leftRev = left.reverse\n        val leftNum = left.toLong\n        val leftRevNum = leftRev.toLong\n        val rightNum = right.toLong\n        if (leftNum == leftRevNum && rightNum == 0) {\n            val leftNumInc = leftNum + 1\n            val leftNumIncStr = leftNumInc.toString\n            val leftNumIncStrRev = leftNumIncStr.reverse\n            val leftNumIncStrRevStr = leftNumIncStr + leftNumIncStrRev\n            if (n % 2 == 1) leftNumIncStrRevStr.substring(0, n - 1).toLong else leftNumIncStrRevStr.toLong\n        } else if (leftNum == leftRevNum) {\n            val leftNumStr = leftNum.toString\n            val leftNumStrRev = leftNumStr.reverse\n            val leftNumStrRevStr = leftNumStr + leftNumStrRev\n            if (n % 2 == 1) leftNumStrRevStr.substring(0, n - 1).toLong else leftNumStrRevStr.toLong\n        } else {\n            val leftNumStr = leftNum.toString\n            val leftNumStrRev = leftNumStr.reverse\n            val leftNumStrRevStr = leftNumStr + leftNumStrRev\n            if (n % 2 == 1) leftNumStrRevStr.substring(0, n - 1).toLong else leftNumStrRevStr.toLong\n        }",
    "        var n = num\n        while(true) {\n            n = n - 1\n            if(isPalindrome(n)) return n\n        }\n        return -1",
    "        var n = num\n        var digits = new ArrayBuffer[Int]()\n        while (n > 0) {\n            digits += (n % 10).toInt\n            n /= 10\n        }\n        var i = 0\n        var j = digits.length - 1\n        while (i <= j) {\n            if (digits(i) < digits(j)) {\n                digits(j) = digits(i)\n                i += 1\n                j -= 1\n            }\n            else if (digits(i) > digits(j)) {\n                digits(j) = digits(i)\n                i += 1\n                j -= 1\n                var k = j\n                while (k >= 0 && digits(k) == 9) {\n                    digits(k) = 0\n                    k -= 1\n                }\n                if (k < 0) {\n                    digits.insert(0, 1)\n                    digits(1) = 0\n                }\n                else digits(k) += 1\n            }\n            else {\n                i += 1\n                j -= 1\n            }\n        }\n        var result = 0L\n        for (i <- 0 until digits.length) result = result * 10 + digits(i)\n        result",
    "        var n = num\n        while(true) {\n            n += 1\n            if(isPalindrome(n)) return n\n        }\n        return -1",
    "        val numStr = num.toString\n        val len = numStr.length\n        val halfLen = len / 2\n        val halfNumStr = numStr.substring(0, halfLen)\n        val halfNum = halfNumStr.toLong\n        val halfNumRev = halfNumStr.reverse.toLong\n        val halfNumRevStr = halfNumRev.toString\n        val halfNumRevLen = halfNumRevStr.length\n        val halfNumRevStrPadded = halfNumRevStr.padTo(halfLen, '0')\n        val halfNumRevPadded = halfNumRevStrPadded.toLong\n        val halfNumRevPaddedStr = halfNumRevPadded.toString\n        val halfNumRevPaddedLen = halfNumRevPaddedStr.length\n        val halfNumRevPaddedStrPadded = halfNumRevPaddedStr.padTo(halfLen, '0')\n        val halfNumRevPaddedPadded = halfNumRevPaddedStrPadded.toLong\n        val halfNumRevPaddedPaddedStr = halfNumRevPaddedPadded.toString\n        val halfNumRevPaddedPaddedLen = halfNumRevPaddedPaddedStr.length\n        val halfNumRevPaddedPaddedStrPadded = halfNumRevPaddedPaddedStr.padTo(halfLen, '0')\n        val halfNumRevPaddedPaddedPadded = halfNumRevPaddedPaddedStrPadded.toLong\n        val halfNumRevPaddedPaddedPaddedStr = halfNumRevPaddedPaddedPadded.toString\n        val halfNumRevPaddedPaddedPaddedLen = halfNumRevPaddedPaddedPaddedStr.length\n        val halfNumRevPaddedPaddedPaddedStrPadded = halfNumRevPaddedPaddedPaddedStr.padTo(halfLen, '0')\n        val halfNumRevPaddedPaddedPaddedPadded = halfNumRevPaddedPaddedPaddedStrPadded.toLong\n        val halfNumRevPaddedPaddedPaddedPaddedStr = halfNumRevPaddedPaddedPaddedPadded.toString\n        val halfNumRevPaddedPaddedPaddedPaddedLen = halfNumRevPaddedPaddedPaddedPaddedStr.length\n        val",
    "        def isPalindrome(num : Long) : Boolean = {\n            val str = num.toString\n            str == str.reverse\n        }\n        def nextSmallestPalindrome(num : Long, i : Int) : Long = {\n            if (i == 10) -1\n            else {\n                val next = num + pow(10, i).toLong\n                if (isPalindrome(next)) next\n                else nextSmallestPalindrome(num, i + 1)\n            }\n        }\n        nextSmallestPalindrome(num, 1)",
    "        val str = num.toString\n        val len = str.length\n        val halfLen = len / 2\n        val halfStr = str.substring(0, halfLen)\n        val halfStrRev = halfStr.reverse\n        val halfStrRevInt = halfStrRev.toInt\n        val halfStrInt = halfStr.toInt\n        val halfStrRevIntPlusOne = halfStrRevInt + 1\n        val halfStrRevIntPlusOneStr = halfStrRevIntPlusOne.toString\n        val halfStrRevIntPlusOneStrLen = halfStrRevIntPlusOneStr.length\n        val halfStrRevIntPlusOneStrRev = halfStrRevIntPlusOneStr.reverse\n        val halfStrRevIntPlusOneStrRevInt = halfStrRevIntPlusOneStrRev.toInt\n        val halfStrRevIntPlusOneStrRevIntPlusOne = halfStrRevIntPlusOneStrRevInt + 1\n        val halfStrRevIntPlusOneStrRevIntPlusOneStr = halfStrRevIntPlusOneStrRevIntPlusOne.toString\n        val halfStrRevIntPlusOneStrRevIntPlusOneStrLen = halfStrRevIntPlusOneStrRevIntPlusOneStr.length\n        val halfStrRevIntPlusOneStrRevIntPlusOneStrRev = halfStrRevIntPlusOneStrRevIntPlusOneStr.reverse\n        val halfStrRevIntPlusOneStrRevIntPlusOneStrRevInt = halfStrRevIntPlusOneStrRevIntPlusOneStrRev.toInt\n        val halfStrRevIntPlusOneStrRevIntPlusOneStrRevIntPlusOne = halfStrRevIntPlusOneStrRevIntPlusOneStrRevInt + 1\n        val halfStrRevIntPlusOneStrRevIntPlusOneStrRevIntPlusOneStr = halfStrRevIntPlusOneStrRevIntPlusOneStrRevIntPlusOne.toString\n        val halfStrRevIntPlusOneStrRevIntPlusOneStrRevIntPlusOneStrLen = halfStrRevIntPlusOneStrRevIntPlusOneStrRevIntPlusOneStr.length\n        val halfStrRevIntPlusOneStrRevIntPlusOneStrRevIntPlusOneStrRev = halfStrRevIntPlusOneStrRevIntPlusOneStrRevIntPlusOneStr.reverse\n        val halfStrRevIntPlusOneStrRevIntPlusOneStrRevIntPlusOneStrRev"
  ]
}