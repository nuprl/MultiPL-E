{
  "name": "mbpp_100_next_smallest_palindrome",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    def nextSmallestPalindrome(num : Long) : Long = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_100_next_smallest_palindrome.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(nextSmallestPalindrome((99l)) == (101l));\n    assert(nextSmallestPalindrome((1221l)) == (1331l));\n    assert(nextSmallestPalindrome((120l)) == (121l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val s = num.toString\n        val n = s.length\n        val half = n / 2\n        val left = s.substring(0, half)\n        val right = s.substring(half + n % 2, n)\n        val leftRev = left.reverse\n        if (leftRev < right) {\n            val leftInc = (left.toLong + 1).toString\n            val leftIncRev = leftInc.reverse\n            val leftIncRevLen = leftIncRev.length\n            val rightLen = right.length\n            val rightInc = if (leftIncRevLen > rightLen) leftIncRev.substring(0, rightLen) else leftIncRev\n            val leftIncRevLen2 = leftIncRev.length\n            val rightLen2 = right.length\n            val rightInc2 = if (leftIncRevLen2 > rightLen2) leftIncRev.substring(0, rightLen2) else leftIncRev\n            (leftInc + rightInc2).toLong\n        } else {\n            (left + leftRev).toLong\n        }",
    "        val str = num.toString\n        val len = str.length\n        val half = len / 2\n        val firstHalf = str.substring(0, half)\n        val secondHalf = str.substring(half + (len % 2), len)\n        val firstHalfRev = firstHalf.reverse\n        val secondHalfRev = secondHalf.reverse\n        if (firstHalfRev == secondHalf) {\n            val firstHalfInc = (BigInt(firstHalf) + 1).toString\n            val firstHalfIncLen = firstHalfInc.length\n            val firstHalfIncRev = firstHalfInc.reverse\n            val secondHalfInc = if (firstHalfIncLen == half) firstHalfIncRev else firstHalfIncRev.substring(0, half)\n            val secondHalfIncLen = secondHalfInc.length\n            val secondHalfIncRev = secondHalfInc.reverse\n            val firstHalfIncRevLen = firstHalfIncRev.length\n            val firstHalfIncRevRev = firstHalfIncRev.reverse\n            val firstHalfIncRevRevLen = firstHalfIncRevRev.length\n            val firstHalfIncRevRevRev = if (firstHalfIncRevLen == half) firstHalfIncRevRev else firstHalfIncRevRev.substring(0, half)\n            val firstHalfIncRevRevRevLen = firstHalfIncRevRevRev.length\n            val firstHalfIncRevRevRevRev = firstHalfIncRevRevRev.reverse\n            val firstHalfIncRevRevRevRevLen = firstHalfIncRevRevRevRev.length\n            val firstHalfIncRevRevRevRevRev = if (firstHalfIncRevRevRevLen == half) firstHalfIncRevRevRevRev else firstHalfIncRevRevRevRev.substring(0, half)\n            val firstHalfIncRevRevRevRevRevLen = firstHalfIncRevRevRevRevRev.length\n            val firstHalfIncRevRevRevRevRevRev = firstHalfIncRevRevRevRevRev.reverse\n            val firstHalfIncRevRevRevRevRevRevLen = firstHalfIncRevRevRevRevRevRev.length\n            val firstHalfIncRevRevRevRevRevRevRev = if (firstHalfIncRevRevRevRevRevLen == half) firstHalfIncRevRevRevRevRevRev else firstHalfIncRevRevRevRevRevRev.substring(",
    "        val s = num.toString\n        val n = s.length\n        val half = n / 2\n        val left = s.substring(0, half)\n        val right = s.substring(half + n % 2)\n        val leftRev = left.reverse\n        val rightRev = right.reverse\n        val leftRevNum = leftRev.toLong\n        val rightRevNum = rightRev.toLong\n        val leftNum = left.toLong\n        val rightNum = right.toLong\n        if (leftRevNum > rightNum) {\n            val leftNum = left.toLong\n            val leftRevNum = leftRev.toLong\n            val leftRevNumPlusOne = leftRevNum + 1\n            val leftRevNumPlusOneStr = leftRevNumPlusOne.toString\n            val leftRevNumPlusOneStrRev = leftRevNumPlusOneStr.reverse\n            val leftRevNumPlusOneStrRevNum = leftRevNumPlusOneStrRev.toLong\n            val leftRevNumPlusOneStrRevNumStr = leftRevNumPlusOneStrRevNum.toString\n            val leftRevNumPlusOneStrRevNumStrLen = leftRevNumPlusOneStrRevNumStr.length\n            val leftRevNumPlusOneStrRevNumStrLenHalf = leftRevNumPlusOneStrRevNumStrLen / 2\n            val leftRevNumPlusOneStrRevNumStrLenHalfStr = leftRevNumPlusOneStrRevNumStr.substring(0, leftRevNumPlusOneStrRevNumStrLenHalf)\n            val leftRevNumPlusOneStrRevNumStrLenHalfStrNum = leftRevNumPlusOneStrRevNumStrLenHalfStr.toLong\n            val leftRevNumPlusOneStrRevNumStrLenHalfStrNumStr = leftRevNumPlusOneStrRevNumStrLenHalfStrNum.toString\n            val leftRevNumPlusOneStrRevNumStrLenHalfStrNumStrLen = leftRevNumPlusOneStrRevNumStrLenHalfStrNumStr.length\n            val leftRevNumPlusOneStrRevNumStrLenHalfStrNumStrLenHalf = leftRevNumPlusOneStrRevNumStrLenHalfStrNumStrLen / 2\n            val leftRevNumPlusOneStrRevNumStrLenHalfStrNumStrLenHalfStr = leftRevNumPlusOneStrRevNumStrLen",
    "        var n = num.toString\n        var i = 0\n        while (i < n.length / 2 && n(i) == n(n.length - 1 - i)) i += 1\n        if (i == n.length / 2) {\n            if (n.length % 2 == 0) {\n                var j = n.length / 2 - 1\n                while (j >= 0 && n(j) == '9') {\n                    n = n.substring(0, j) + \"0\" + n.substring(j + 1)\n                    j -= 1\n                }\n                if (j == -1) n = \"1\" + n\n                else n = n.substring(0, j) + (n(j).asDigit + 1).toString + n.substring(j + 1)\n            } else {\n                var j = n.length / 2\n                while (j >= 0 && n(j) == '9') {\n                    n = n.substring(0, j) + \"0\" + n.substring(j + 1)\n                    j -= 1\n                }\n                if (j == -1) n = \"1\" + n\n                else n = n.substring(0, j) + (n(j).asDigit + 1).toString + n.substring(j + 1)\n            }\n        } else {\n            var j = n.length / 2\n            if (n.length % 2 == 0) j -= 1\n            while (j >= 0 && n(j) == '9') {\n                n = n.substring(0, j) + \"0\" + n.substring(j + 1)\n                j -= 1\n            }\n            if (j == -1) n = \"1\" + n\n            else n = n.substring(0, j) + (n(j).asDigit + 1).toString + n.substring(j + 1)\n        }\n        var m = n.substring(0, n.length / 2)\n        if (n.length % 2 == 1) m += n(n.length / 2)\n        n = m + m.reverse\n        n.toLong",
    "        val s = num.toString\n        val n = s.length\n        val half = n / 2\n        val left = s.substring(0, half)\n        val right = s.substring(half + n % 2)\n        val leftNum = left.toLong\n        val rightNum = right.toLong\n        val leftNumRev = left.reverse.toLong\n        val rightNumRev = right.reverse.toLong\n        if (rightNumRev < leftNum) {\n            val nextLeft = (leftNum + 1).toString\n            val nextLeftRev = nextLeft.reverse\n            val nextLeftRevLen = nextLeftRev.length\n            val nextLeftLen = nextLeft.length\n            val nextLeftRevHalf = nextLeftRevLen / 2\n            val nextLeftHalf = nextLeftLen / 2\n            val nextLeftRevFirstHalf = nextLeftRev.substring(0, nextLeftRevHalf)\n            val nextLeftRevSecondHalf = nextLeftRev.substring(nextLeftRevHalf + nextLeftRevLen % 2)\n            val nextLeftFirstHalf = nextLeft.substring(0, nextLeftHalf)\n            val nextLeftSecondHalf = nextLeft.substring(nextLeftHalf + nextLeftLen % 2)\n            if (nextLeftRevFirstHalf == nextLeftFirstHalf) {\n                (nextLeft + nextLeftRevSecondHalf).toLong\n            } else {\n                (nextLeft + nextLeftSecondHalf).toLong\n            }\n        } else {\n            (left + leftNumRev).toLong\n        }",
    "        val str = num.toString\n        val len = str.length\n        val half = len / 2\n        val (left, right) = str.splitAt(half)\n        val leftRev = left.reverse\n        val rightRev = right.reverse\n        val leftNum = left.toLong\n        val rightNum = right.toLong\n        val leftRevNum = leftRev.toLong\n        val rightRevNum = rightRev.toLong\n        val mid = if (len % 2 == 0) \"\" else str(half).toString\n        val midNum = mid.toLong\n        val midRev = mid.reverse\n        val midRevNum = midRev.toLong\n        if (leftRevNum > rightNum) {\n            val leftNum = left.toLong\n            val leftRevNum = leftRev.toLong\n            val midNum = mid.toLong\n            val midRevNum = midRev.toLong\n            val leftNum1 = if (midNum > 0) leftNum + 1 else leftNum\n            val leftRevNum1 = if (midRevNum > 0) leftRevNum + 1 else leftRevNum\n            val left1 = leftNum1.toString\n            val leftRev1 = leftRevNum1.toString\n            val mid1 = midNum.toString\n            val midRev1 = midRevNum.toString\n            val left1Rev = left1.reverse\n            val leftRev1Rev = leftRev1.reverse\n            val mid1Rev = mid1.reverse\n            val midRev1Rev = midRev1.reverse\n            val left1RevNum = left1Rev.toLong\n            val leftRev1RevNum = leftRev1Rev.toLong\n            val mid1RevNum = mid1Rev.toLong\n            val midRev1RevNum = midRev1Rev.toLong\n            val left1RevNum1 = if (mid1RevNum > 0) left1RevNum + 1 else left1RevNum\n            val leftRev1RevNum1 = if (midRev1RevNum > 0) leftRev1RevNum + 1 else leftRev1RevNum\n            val left1Rev1 = left1RevNum1.toString\n            val leftRev1Rev1 = leftRev1RevNum1.toString\n",
    "        var n = num\n        while(true) {\n            n += 1\n            if(isPalindrome(n)) return n\n        }\n        return -1",
    "        val digits = num.toString.toList.map(_.toString.toInt)\n        val len = digits.length\n        if (len == 1) return num + 1\n        val half = len / 2\n        val left = digits.slice(0, half)\n        val right = digits.slice(len - half, len)\n        val leftRev = left.reverse\n        val leftRevStr = leftRev.mkString\n        val rightStr = right.mkString\n        if (leftRevStr > rightStr) {\n            val leftStr = left.mkString\n            val leftStrInt = leftStr.toInt\n            val leftStrIntNext = leftStrInt + 1\n            val leftStrIntNextStr = leftStrIntNext.toString\n            val leftStrIntNextStrLen = leftStrIntNextStr.length\n            if (leftStrIntNextStrLen > half) {\n                val leftStrIntNextStrLenHalf = leftStrIntNextStrLen / 2\n                val leftStrIntNextStrLeft = leftStrIntNextStr.slice(0, leftStrIntNextStrLenHalf)\n                val leftStrIntNextStrRight = leftStrIntNextStr.slice(leftStrIntNextStrLen - leftStrIntNextStrLenHalf, leftStrIntNextStrLen)\n                val leftStrIntNextStrLeftRev = leftStrIntNextStrLeft.reverse\n                val leftStrIntNextStrLeftRevStr = leftStrIntNextStrLeftRev.mkString\n                val leftStrIntNextStrRightStr = leftStrIntNextStrRight.mkString\n                if (leftStrIntNextStrLeftRevStr > leftStrIntNextStrRightStr) {\n                    val leftStrIntNextStrLeftStr = leftStrIntNextStrLeft.mkString\n                    val leftStrIntNextStrLeftStrInt = leftStrIntNextStrLeftStr.toInt\n                    val leftStrIntNextStrLeftStrIntNext = leftStrIntNextStrLeftStrInt + 1\n                    val leftStrIntNextStrLeftStrIntNextStr = leftStrIntNextStrLeftStrIntNext.toString\n                    val leftStrIntNextStrLeftStrIntNextStrLen = leftStrIntNextStrLeftStrIntNextStr.length\n                    if (leftStrIntNextStrLeftStrIntNextStrLen > leftStrIntNextStr",
    "        val digits = num.toString.toList.map(_.asDigit)\n        val n = digits.length\n        var i = 0\n        while (i < n / 2) {\n            if (digits(i) < digits(n - 1 - i)) return num - pow(10, n - 1 - i).toLong + 1\n            else if (digits(i) > digits(n - 1 - i)) return num + pow(10, n - 1 - i).toLong\n            i += 1\n        }\n        num",
    "        var n = num\n        while (true) {\n            n += 1\n            if (isPalindrome(n)) return n\n        }\n        return -1",
    "        val s = num.toString\n        val n = s.length\n        val half = n / 2\n        val left = s.substring(0, half)\n        val right = s.substring(half + n % 2, n)\n        val leftInt = left.toInt\n        val rightInt = right.toInt\n        if (leftInt == rightInt) {\n            val nextLeft = (leftInt + 1).toString\n            val nextRight = nextLeft.reverse\n            val next = nextLeft + nextRight\n            if (n % 2 == 1) next.substring(0, half + 1) + next.substring(half, half + 1) + next.substring(half + 1, n) else next\n        } else if (leftInt > rightInt) {\n            val nextLeft = left\n            val nextRight = nextLeft.reverse\n            val next = nextLeft + nextRight\n            if (n % 2 == 1) next.substring(0, half + 1) + next.substring(half, half + 1) + next.substring(half + 1, n) else next\n        } else {\n            val nextLeft = (leftInt + 1).toString\n            val nextRight = nextLeft.reverse\n            val next = nextLeft + nextRight\n            if (n % 2 == 1) next.substring(0, half + 1) + next.substring(half, half + 1) + next.substring(half + 1, n) else next\n        }",
    "        var n = num\n        while (true) {\n            n += 1\n            if (isPalindrome(n)) return n\n        }\n        return -1",
    "        var n = num\n        while(true) {\n            n += 1\n            if(isPalindrome(n)) return n\n        }\n        return -1",
    "        val s = num.toString\n        val n = s.length\n        val half = n / 2\n        val left = s.substring(0, half)\n        val right = s.substring(half + n % 2, n)\n        val leftRev = left.reverse\n        val leftNum = left.toLong\n        val leftRevNum = leftRev.toLong\n        val rightNum = right.toLong\n        if (leftNum == leftRevNum && rightNum == 0) {\n            val leftNumInc = leftNum + 1\n            val leftNumIncStr = leftNumInc.toString\n            val leftNumIncStrRev = leftNumIncStr.reverse\n            val leftNumIncStrRevStr = leftNumIncStr + leftNumIncStrRev\n            if (n % 2 == 1) leftNumIncStrRevStr.substring(0, n - 1).toLong else leftNumIncStrRevStr.toLong\n        } else if (leftNum == leftRevNum) {\n            val leftNumStr = leftNum.toString\n            val leftNumStrRev = leftNumStr.reverse\n            val leftNumStrRevStr = leftNumStr + leftNumStrRev\n            if (n % 2 == 1) leftNumStrRevStr.substring(0, n - 1).toLong else leftNumStrRevStr.toLong\n        } else {\n            val leftNumStr = leftNum.toString\n            val leftNumStrRev = leftNumStr.reverse\n            val leftNumStrRevStr = leftNumStr + leftNumStrRev\n            if (n % 2 == 1) leftNumStrRevStr.substring(0, n - 1).toLong else leftNumStrRevStr.toLong\n        }",
    "        var n = num\n        while(true) {\n            n = n - 1\n            if(isPalindrome(n)) return n\n        }\n        return -1",
    "        var n = num\n        var digits = new ArrayBuffer[Int]()\n        while (n > 0) {\n            digits += (n % 10).toInt\n            n /= 10\n        }\n        var i = 0\n        var j = digits.length - 1\n        while (i <= j) {\n            if (digits(i) < digits(j)) {\n                digits(j) = digits(i)\n                i += 1\n                j -= 1\n            }\n            else if (digits(i) > digits(j)) {\n                digits(j) = digits(i)\n                i += 1\n                j -= 1\n                var k = j\n                while (k >= 0 && digits(k) == 9) {\n                    digits(k) = 0\n                    k -= 1\n                }\n                if (k < 0) {\n                    digits.insert(0, 1)\n                    digits(1) = 0\n                }\n                else digits(k) += 1\n            }\n            else {\n                i += 1\n                j -= 1\n            }\n        }\n        var result = 0L\n        for (i <- 0 until digits.length) result = result * 10 + digits(i)\n        result",
    "        var n = num\n        while(true) {\n            n += 1\n            if(isPalindrome(n)) return n\n        }\n        return -1",
    "        val numStr = num.toString\n        val len = numStr.length\n        val halfLen = len / 2\n        val halfNumStr = numStr.substring(0, halfLen)\n        val halfNum = halfNumStr.toLong\n        val halfNumRev = halfNumStr.reverse.toLong\n        val halfNumRevStr = halfNumRev.toString\n        val halfNumRevLen = halfNumRevStr.length\n        val halfNumRevStrPadded = halfNumRevStr.padTo(halfLen, '0')\n        val halfNumRevPadded = halfNumRevStrPadded.toLong\n        val halfNumRevPaddedStr = halfNumRevPadded.toString\n        val halfNumRevPaddedLen = halfNumRevPaddedStr.length\n        val halfNumRevPaddedStrPadded = halfNumRevPaddedStr.padTo(halfLen, '0')\n        val halfNumRevPaddedPadded = halfNumRevPaddedStrPadded.toLong\n        val halfNumRevPaddedPaddedStr = halfNumRevPaddedPadded.toString\n        val halfNumRevPaddedPaddedLen = halfNumRevPaddedPaddedStr.length\n        val halfNumRevPaddedPaddedStrPadded = halfNumRevPaddedPaddedStr.padTo(halfLen, '0')\n        val halfNumRevPaddedPaddedPadded = halfNumRevPaddedPaddedStrPadded.toLong\n        val halfNumRevPaddedPaddedPaddedStr = halfNumRevPaddedPaddedPadded.toString\n        val halfNumRevPaddedPaddedPaddedLen = halfNumRevPaddedPaddedPaddedStr.length\n        val halfNumRevPaddedPaddedPaddedStrPadded = halfNumRevPaddedPaddedPaddedStr.padTo(halfLen, '0')\n        val halfNumRevPaddedPaddedPaddedPadded = halfNumRevPaddedPaddedPaddedStrPadded.toLong\n        val halfNumRevPaddedPaddedPaddedPaddedStr = halfNumRevPaddedPaddedPaddedPadded.toString\n        val halfNumRevPaddedPaddedPaddedPaddedLen = halfNumRevPaddedPaddedPaddedPaddedStr.length\n        val",
    "        def isPalindrome(num : Long) : Boolean = {\n            val str = num.toString\n            str == str.reverse\n        }\n        def nextSmallestPalindrome(num : Long, i : Int) : Long = {\n            if (i == 10) -1\n            else {\n                val next = num + pow(10, i).toLong\n                if (isPalindrome(next)) next\n                else nextSmallestPalindrome(num, i + 1)\n            }\n        }\n        nextSmallestPalindrome(num, 1)",
    "        val str = num.toString\n        val len = str.length\n        val halfLen = len / 2\n        val halfStr = str.substring(0, halfLen)\n        val halfStrRev = halfStr.reverse\n        val halfStrRevInt = halfStrRev.toInt\n        val halfStrInt = halfStr.toInt\n        val halfStrRevIntPlusOne = halfStrRevInt + 1\n        val halfStrRevIntPlusOneStr = halfStrRevIntPlusOne.toString\n        val halfStrRevIntPlusOneStrLen = halfStrRevIntPlusOneStr.length\n        val halfStrRevIntPlusOneStrRev = halfStrRevIntPlusOneStr.reverse\n        val halfStrRevIntPlusOneStrRevInt = halfStrRevIntPlusOneStrRev.toInt\n        val halfStrRevIntPlusOneStrRevIntPlusOne = halfStrRevIntPlusOneStrRevInt + 1\n        val halfStrRevIntPlusOneStrRevIntPlusOneStr = halfStrRevIntPlusOneStrRevIntPlusOne.toString\n        val halfStrRevIntPlusOneStrRevIntPlusOneStrLen = halfStrRevIntPlusOneStrRevIntPlusOneStr.length\n        val halfStrRevIntPlusOneStrRevIntPlusOneStrRev = halfStrRevIntPlusOneStrRevIntPlusOneStr.reverse\n        val halfStrRevIntPlusOneStrRevIntPlusOneStrRevInt = halfStrRevIntPlusOneStrRevIntPlusOneStrRev.toInt\n        val halfStrRevIntPlusOneStrRevIntPlusOneStrRevIntPlusOne = halfStrRevIntPlusOneStrRevIntPlusOneStrRevInt + 1\n        val halfStrRevIntPlusOneStrRevIntPlusOneStrRevIntPlusOneStr = halfStrRevIntPlusOneStrRevIntPlusOneStrRevIntPlusOne.toString\n        val halfStrRevIntPlusOneStrRevIntPlusOneStrRevIntPlusOneStrLen = halfStrRevIntPlusOneStrRevIntPlusOneStrRevIntPlusOneStr.length\n        val halfStrRevIntPlusOneStrRevIntPlusOneStrRevIntPlusOneStrRev = halfStrRevIntPlusOneStrRevIntPlusOneStrRevIntPlusOneStr.reverse\n        val halfStrRevIntPlusOneStrRevIntPlusOneStrRevIntPlusOneStrRev",
    "        val str = num.toString\n        val len = str.length\n        val half = len / 2\n        val left = str.substring(0, half)\n        val right = str.substring(len - half)\n        val leftRev = left.reverse\n        val leftRevNum = leftRev.toLong\n        val leftNum = left.toLong\n        if (leftRevNum < leftNum) {\n            val leftRevNumPlusOne = leftRevNum + 1\n            val leftRevNumPlusOneStr = leftRevNumPlusOne.toString\n            val leftRevNumPlusOneStrRev = leftRevNumPlusOneStr.reverse\n            val leftRevNumPlusOneStrRevNum = leftRevNumPlusOneStrRev.toLong\n            val leftRevNumPlusOneStrRevNumPlusOne = leftRevNumPlusOneStrRevNum + 1\n            val leftRevNumPlusOneStrRevNumPlusOneStr = leftRevNumPlusOneStrRevNumPlusOne.toString\n            val leftRevNumPlusOneStrRevNumPlusOneStrRev = leftRevNumPlusOneStrRevNumPlusOneStr.reverse\n            val leftRevNumPlusOneStrRevNumPlusOneStrRevNum = leftRevNumPlusOneStrRevNumPlusOneStrRev.toLong\n            val leftRevNumPlusOneStrRevNumPlusOneStrRevNumPlusOne = leftRevNumPlusOneStrRevNumPlusOneStrRevNum + 1\n            val leftRevNumPlusOneStrRevNumPlusOneStrRevNumPlusOneStr = leftRevNumPlusOneStrRevNumPlusOneStrRevNumPlusOne.toString\n            val leftRevNumPlusOneStrRevNumPlusOneStrRevNumPlusOneStrRev = leftRevNumPlusOneStrRevNumPlusOneStrRevNumPlusOneStr.reverse\n            val leftRevNumPlusOneStrRevNumPlusOneStrRevNumPlusOneStrRevNum = leftRevNumPlusOneStrRevNumPlusOneStrRevNumPlusOneStrRev.toLong\n            val leftRevNumPlusOneStrRevNumPlusOneStrRevNumPlusOneStrRevNumPlusOne = leftRevNumPlusOneStrRevNumPlusOneStrRevNumPlusOneStrRevNum + 1\n            val leftRevNumPlusOneStrRevNumPlusOneStrRevNumPlusOneStrRevNumPlusOneStr = leftRevNumPlusOneStrRevNum",
    "        var n = num\n        while(!isPalindrome(n)) {\n            n += 1\n        }\n        n",
    "        val str = num.toString\n        val len = str.length\n        val half = len / 2\n        val left = str.substring(0, half)\n        val right = str.substring(half + len % 2, len)\n        val leftRev = left.reverse\n        if (leftRev > right) {\n            val leftInc = (left.toLong + 1).toString\n            val leftIncRev = leftInc.reverse\n            val leftIncRevLen = leftIncRev.length\n            val leftIncRevHalf = leftIncRevLen / 2\n            val leftIncRevLeft = leftIncRev.substring(0, leftIncRevHalf)\n            val leftIncRevRight = leftIncRev.substring(leftIncRevHalf + leftIncRevLen % 2, leftIncRevLen)\n            if (leftIncRevLeft > leftIncRevRight) {\n                val leftIncRevLeftInc = (leftIncRevLeft.toLong + 1).toString\n                val leftIncRevLeftIncRev = leftIncRevLeftInc.reverse\n                val leftIncRevLeftIncRevLen = leftIncRevLeftIncRev.length\n                val leftIncRevLeftIncRevHalf = leftIncRevLeftIncRevLen / 2\n                val leftIncRevLeftIncRevLeft = leftIncRevLeftIncRev.substring(0, leftIncRevLeftIncRevHalf)\n                val leftIncRevLeftIncRevRight = leftIncRevLeftIncRev.substring(leftIncRevLeftIncRevHalf + leftIncRevLeftIncRevLen % 2, leftIncRevLeftIncRevLen)\n                if (leftIncRevLeftIncRevLeft > leftIncRevLeftIncRevRight) {\n                    val leftIncRevLeftIncRevLeftInc = (leftIncRevLeftIncRevLeft.toLong + 1).toString\n                    val leftIncRevLeftIncRevLeftIncRev = leftIncRevLeftIncRevLeftInc.reverse\n                    val leftIncRevLeftIncRevLeftIncRevLen = leftIncRevLeftIncRevLeftIncRev.length\n                    val leftIncRevLeftIncRevLeftIncRevHalf = leftIncRevLeftIncRevLeftIncRevLen / 2\n                    val leftIncRevLeftIncRevLeftIncRevLeft = leftIncRevLeftIncRevLeftIncRev.substring(0, leftIncRevLeftInc",
    "        def isPalindrome(num : Long) : Boolean = {\n            val str = num.toString\n            str == str.reverse\n        }\n        def nextPalindrome(num : Long) : Long = {\n            if (isPalindrome(num)) num\n            else nextPalindrome(num + 1)\n        }\n        nextPalindrome(num + 1)",
    "        def isPalindrome(num : Long) : Boolean = {\n            val str = num.toString\n            str == str.reverse\n        }\n        def nextPalindrome(num : Long) : Long = {\n            if (isPalindrome(num)) num\n            else nextPalindrome(num + 1)\n        }\n        nextPalindrome(num + 1)",
    "        val str = num.toString\n        val len = str.length\n        val half = len / 2\n        val left = str.substring(0, half)\n        val right = str.substring(len - half, len)\n        val leftRev = left.reverse\n        val leftNum = left.toLong\n        val leftRevNum = leftRev.toLong\n        if (leftNum == leftRevNum) {\n            if (len % 2 == 0) {\n                val leftNumPlusOne = leftNum + 1\n                val leftNumPlusOneStr = leftNumPlusOne.toString\n                val leftNumPlusOneStrRev = leftNumPlusOneStr.reverse\n                val leftNumPlusOneStrRevNum = leftNumPlusOneStrRev.toLong\n                if (leftNumPlusOneStrRevNum < leftNumPlusOne) {\n                    val leftNumPlusOneStrRevNumStr = leftNumPlusOneStrRevNum.toString\n                    val leftNumPlusOneStrRevNumStrLen = leftNumPlusOneStrRevNumStr.length\n                    val leftNumPlusOneStrRevNumStrLenDiff = leftNumPlusOneStrRevNumStrLen - leftNumPlusOneStrRevNumStrLen\n                    val leftNumPlusOneStrRevNumStrLenDiffStr = \"1\" * leftNumPlusOneStrRevNumStrLenDiff\n                    val leftNumPlusOneStrRevNumStrLenDiffStrNum = leftNumPlusOneStrRevNumStrLenDiffStr.toLong\n                    val leftNumPlusOneStrRevNumStrLenDiffStrNumPlusOne = leftNumPlusOneStrRevNumStrLenDiffStrNum + 1\n                    val leftNumPlusOneStrRevNumStrLenDiffStrNumPlusOneStr = leftNumPlusOneStrRevNumStrLenDiffStrNumPlusOne.toString\n                    val leftNumPlusOneStrRevNumStrLenDiffStrNumPlusOneStrLen = leftNumPlusOneStrRevNumStrLenDiffStrNumPlusOneStr.length\n                    val leftNumPlusOneStrRevNumStrLenDiffStrNumPlusOneStrLenDiff = leftNumPlusOneStrRevNumStrLenDiffStrNumPlusOneStrLen - leftNumPlusOneStrRevNumStrLenDiffStrNumPlusOneStrLen\n                    val leftNumPlusOneStrRevNumStrLenDiffStrNumPlusOneStrLenDiffStr = \"1",
    "        var n = num\n        while (!isPalindrome(n)) n -= 1\n        n",
    "        var n = num\n        var digits = new ArrayBuffer[Int]()\n        while (n > 0) {\n            digits += (n % 10).toInt\n            n /= 10\n        }\n        var i = 0\n        while (i < digits.length / 2) {\n            if (digits(i) != digits(digits.length - 1 - i)) {\n                if (digits(i) > digits(digits.length - 1 - i)) {\n                    digits(digits.length - 1 - i) = digits(i)\n                } else {\n                    digits(i) = digits(digits.length - 1 - i)\n                }\n            }\n            i += 1\n        }\n        var result = 0L\n        for (i <- 0 until digits.length) {\n            result = result * 10 + digits(i)\n        }\n        result",
    "        val str = num.toString\n        val len = str.length\n        val half = len / 2\n        val left = str.substring(0, half)\n        val right = str.substring(half + len % 2, len)\n        val leftRev = left.reverse\n        if (right < leftRev) {\n            val newLeft = (left.toLong + 1).toString\n            val newLeftRev = newLeft.reverse\n            val newRight = newLeftRev.substring(0, right.length)\n            (newLeft + newRight).toLong\n        } else {\n            val newRight = leftRev\n            (left + newRight).toLong\n        }",
    "        def isPalindrome(num : Long) : Boolean = {\n            val str = num.toString\n            val len = str.length\n            for (i <- 0 until len / 2) {\n                if (str(i) != str(len - 1 - i)) return false\n            }\n            return true\n        }\n        var n = num\n        while (!isPalindrome(n)) n -= 1\n        return n",
    "        var n = num\n        var digits = new ArrayBuffer[Int]()\n        while (n > 0) {\n            digits += (n % 10).toInt\n            n /= 10\n        }\n        var i = 0\n        var j = digits.length - 1\n        while (i < j) {\n            if (digits(i) < digits(j)) {\n                digits(j) = digits(i)\n                i += 1\n                j -= 1\n            } else if (digits(i) > digits(j)) {\n                digits(j) = digits(i)\n                i += 1\n                j -= 1\n                var carry = 1\n                var k = j + 1\n                while (carry > 0) {\n                    if (digits(k) == 9) {\n                        digits(k) = 0\n                        k -= 1\n                    } else {\n                        digits(k) += 1\n                        carry = 0\n                    }\n                }\n            } else {\n                i += 1\n                j -= 1\n            }\n        }\n        var result = 0L\n        for (i <- 0 until digits.length) {\n            result = result * 10 + digits(i)\n        }\n        result",
    "        def isPalindrome(num : Long) : Boolean = {\n            val str = num.toString\n            str == str.reverse\n        }\n        def nextPalindrome(num : Long) : Long = {\n            if (isPalindrome(num)) num\n            else nextPalindrome(num + 1)\n        }\n        nextPalindrome(num + 1)",
    "        val digits = num.toString.toList.map(_.asDigit)\n        val len = digits.length\n        val half = len / 2\n        val left = digits.take(half)\n        val right = digits.drop(half + (len % 2)).reverse\n        val leftPalindrome = left ++ left.reverse.drop(len % 2)\n        val rightPalindrome = right ++ right.reverse\n        val palindrome = leftPalindrome ++ rightPalindrome\n        val palindromeNum = palindrome.foldLeft(0L)((acc, x) => acc * 10 + x)\n        if (palindromeNum > num) palindromeNum else nextSmallestPalindrome(num + 1)",
    "        var n = num\n        var digits = new ArrayBuffer[Int]\n        while (n > 0) {\n            digits += (n % 10).toInt\n            n /= 10\n        }\n        var i = 0\n        while (i < digits.length / 2) {\n            if (digits(i) != digits(digits.length - 1 - i)) {\n                if (digits(i) > digits(digits.length - 1 - i)) {\n                    digits(digits.length - 1 - i) = digits(i)\n                } else {\n                    digits(i) = digits(digits.length - 1 - i)\n                }\n            }\n            i += 1\n        }\n        var result = 0L\n        for (i <- 0 until digits.length) result = result * 10 + digits(i)\n        result",
    "        var n = num\n        var digits = new ArrayBuffer[Int]()\n        while (n > 0) {\n            digits += (n % 10).toInt\n            n /= 10\n        }\n        var i = digits.length - 1\n        while (i >= 0 && digits(i) == 0) {\n            digits(i) = 9\n            i -= 1\n        }\n        if (i >= 0) digits(i) -= 1\n        var j = digits.length - 1\n        while (i >= 0) {\n            digits(j) = digits(i)\n            i -= 1\n            j -= 1\n        }\n        var result = 0L\n        for (i <- 0 until digits.length) result = result * 10 + digits(i)\n        result",
    "        val s = num.toString\n        val n = s.length\n        val half = n / 2\n        val left = s.substring(0, half)\n        val right = s.substring(half + n % 2, n)\n        val leftInt = left.toInt\n        val rightInt = right.toInt\n        val leftRev = left.reverse\n        val rightRev = right.reverse\n        if (leftRev > right) {\n            val result = left + leftRev.substring(n % 2, n)\n            return result.toLong\n        }\n        else {\n            val nextLeft = (leftInt + 1).toString\n            val nextLeftRev = nextLeft.reverse\n            val result = nextLeft + nextLeftRev.substring(n % 2, n)\n            return result.toLong\n        }",
    "        val str = num.toString\n        val len = str.length\n        val half = len / 2\n        val left = str.substring(0, half)\n        val right = str.substring(half + len % 2, len)\n        val leftRev = left.reverse\n        val leftInt = left.toInt\n        val rightInt = right.toInt\n        if (leftInt > rightInt) {\n            val leftRevInt = leftRev.toInt\n            val leftRevStr = leftRevInt.toString\n            val leftRevStrLen = leftRevStr.length\n            val leftRevStrLenDiff = half - leftRevStrLen\n            val leftRevStrPadded = \"0\" * leftRevStrLenDiff + leftRevStr\n            val leftRevStrPaddedInt = leftRevStrPadded.toInt\n            val leftRevStrPaddedIntStr = leftRevStrPaddedInt.toString\n            val leftRevStrPaddedIntStrLen = leftRevStrPaddedIntStr.length\n            val leftRevStrPaddedIntStrLenDiff = half - leftRevStrPaddedIntStrLen\n            val leftRevStrPaddedIntStrPadded = \"0\" * leftRevStrPaddedIntStrLenDiff + leftRevStrPaddedIntStr\n            val leftRevStrPaddedIntStrPaddedRev = leftRevStrPaddedIntStrPadded.reverse\n            val leftRevStrPaddedIntStrPaddedRevInt = leftRevStrPaddedIntStrPaddedRev.toInt\n            val leftRevStrPaddedIntStrPaddedRevIntStr = leftRevStrPaddedIntStrPaddedRevInt.toString\n            val leftRevStrPaddedIntStrPaddedRevIntStrLen = leftRevStrPaddedIntStrPaddedRevIntStr.length\n            val leftRevStrPaddedIntStrPaddedRevIntStrLenDiff = half - leftRevStrPaddedIntStrPaddedRevIntStrLen\n            val leftRevStrPaddedIntStrPaddedRevIntStrPadded = \"0\" * leftRevStrPaddedIntStrPaddedRevIntStrLenDiff + leftRevStrPaddedIntStrPaddedRevIntStr\n            val leftRevStrPaddedIntStrPaddedRevIntStrPaddedRev = leftRevStrPaddedIntStrPadded",
    "        val s = num.toString\n        val n = s.length\n        val half = n / 2\n        val left = s.substring(0, half)\n        val right = s.substring(half + (if (n % 2 == 0) 0 else 1), n)\n        val leftReverse = left.reverse\n        if (leftReverse > right) {\n            val leftNum = left.toLong\n            val leftNumNext = leftNum + 1\n            val leftNumNextStr = leftNumNext.toString\n            val leftNumNextStrReverse = leftNumNextStr.reverse\n            val leftNumNextStrReversePadded = leftNumNextStrReverse.padTo(half, '0')\n            val leftNumNextStrPadded = leftNumNextStr.padTo(half, '0')\n            val leftNumNextStrReversePaddedLong = leftNumNextStrReversePadded.toLong\n            val leftNumNextStrPaddedLong = leftNumNextStrPadded.toLong\n            if (leftNumNextStrReversePaddedLong > leftNumNextStrPaddedLong) leftNumNextStrPaddedLong else leftNumNextStrReversePaddedLong\n        } else {\n            val leftNum = left.toLong\n            val leftNumStr = leftNum.toString\n            val leftNumStrReverse = leftNumStr.reverse\n            val leftNumStrReversePadded = leftNumStrReverse.padTo(half, '0')\n            val leftNumStrPadded = leftNumStr.padTo(half, '0')\n            val leftNumStrReversePaddedLong = leftNumStrReversePadded.toLong\n            val leftNumStrPaddedLong = leftNumStrPadded.toLong\n            if (leftNumStrReversePaddedLong > leftNumStrPaddedLong) leftNumStrPaddedLong else leftNumStrReversePaddedLong\n        }",
    "        var n = num\n        var i = 0\n        var j = 0\n        var k = 0\n        var l = 0\n        var m = 0\n        var nn = 0\n        var nn2 = 0\n        var nn3 = 0\n        var nn4 = 0\n        var nn5 = 0\n        var nn6 = 0\n        var nn7 = 0\n        var nn8 = 0\n        var nn9 = 0\n        var nn10 = 0\n        var nn11 = 0\n        var nn12 = 0\n        var nn13 = 0\n        var nn14 = 0\n        var nn15 = 0\n        var nn16 = 0\n        var nn17 = 0\n        var nn18 = 0\n        var nn19 = 0\n        var nn20 = 0\n        var nn21 = 0\n        var nn22 = 0\n        var nn23 = 0\n        var nn24 = 0\n        var nn25 = 0\n        var nn26 = 0\n        var nn27 = 0\n        var nn28 = 0\n        var nn29 = 0\n        var nn30 = 0\n        var nn31 = 0\n        var nn32 = 0\n        var nn33 = 0\n        var nn34 = 0\n        var nn35 = 0\n        var nn36 = 0\n        var nn37 = 0\n        var nn38 = 0\n        var nn39 = 0\n        var nn40 = 0\n        var nn41 = 0\n        var nn42 = 0\n        var nn43 = 0\n        var nn44 = 0\n        var nn45 = 0\n        var nn46 = 0\n        var nn47 = 0\n        var nn48 = 0\n        var nn49 = 0\n        var nn50 = 0\n        var nn51 = 0\n        var nn52 = 0\n        var nn53 = 0\n        var nn54 = 0\n        var nn55 = 0\n        var nn56 = 0\n        var nn57 = 0\n        var nn58 = 0\n        var nn59 = 0\n        var nn",
    "        var n = num\n        while(!isPalindrome(n)) n -= 1\n        n",
    "        var n = num\n        while (true) {\n            n += 1\n            if (isPalindrome(n)) return n\n        }\n        return -1",
    "        val digits = num.toString.map(_.asDigit).toArray\n        val n = digits.length\n        var i = 0\n        while (i < n / 2 && digits(i) == digits(n - 1 - i)) i += 1\n        if (i == n / 2) {\n            if (n % 2 == 1) {\n                if (digits(n / 2) == 9) {\n                    var j = n / 2 - 1\n                    while (j >= 0 && digits(j) == 9) {\n                        digits(j) = 0\n                        j -= 1\n                    }\n                    if (j == -1) {\n                        digits(0) = 1\n                        digits(n - 1) = 1\n                        return digits.mkString.toLong\n                    }\n                    digits(j) += 1\n                    digits(n - 1 - j) += 1\n                } else {\n                    digits(n / 2) += 1\n                }\n            } else {\n                var j = n / 2 - 1\n                while (j >= 0 && digits(j) == 9) {\n                    digits(j) = 0\n                    j -= 1\n                }\n                if (j == -1) {\n                    digits(0) = 1\n                    digits(n - 1) = 1\n                    return digits.mkString.toLong\n                }\n                digits(j) += 1\n                digits(n - 1 - j) += 1\n            }\n        } else {\n            if (digits(i) > digits(n - 1 - i)) {\n                var j = n / 2 - 1\n                while (j >= i) {\n                    digits(j) = digits(n - 1 - j)\n                    j -= 1\n                }\n            } else {\n                var j = n / 2 - 1\n                while (j >= i) {\n                    digits(n - 1 - j) = digits(j)\n                    j -= 1\n                }\n            }\n        }\n        digits.mkString.toLong",
    "        def isPalindrome(num : Long) : Boolean = {\n            val str = num.toString\n            str == str.reverse\n        }\n        var i = num - 1\n        while (i > 0) {\n            if (isPalindrome(i)) return i\n            i -= 1\n        }\n        0",
    "        val s = num.toString\n        val n = s.length\n        val half = n / 2\n        val left = s.substring(0, half)\n        val right = s.substring(half + n % 2)\n        val leftRev = left.reverse\n        val leftNum = left.toLong\n        val leftRevNum = leftRev.toLong\n        if (leftNum == leftRevNum) {\n            val nextLeft = (leftNum + 1).toString\n            val nextLeftRev = nextLeft.reverse\n            val nextLeftRevNum = nextLeftRev.toLong\n            val nextLeftNum = nextLeft.toLong\n            if (nextLeftNum == nextLeftRevNum) {\n                val nextLeftNumStr = nextLeftNum.toString\n                val nextLeftRevNumStr = nextLeftRevNum.toString\n                val nextLeftNumStrLen = nextLeftNumStr.length\n                val nextLeftRevNumStrLen = nextLeftRevNumStr.length\n                val nextLeftNumStrLenDiff = nextLeftNumStrLen - nextLeftRevNumStrLen\n                val nextLeftRevNumStrLenDiff = nextLeftRevNumStrLen - nextLeftNumStrLen\n                if (nextLeftNumStrLenDiff == 0) {\n                    val nextLeftNumStrRev = nextLeftNumStr.reverse\n                    val nextLeftNumStrRevNum = nextLeftNumStrRev.toLong\n                    val nextLeftNumStrNum = nextLeftNumStr.toLong\n                    if (nextLeftNumStrNum == nextLeftNumStrRevNum) {\n                        nextLeftNumStrNum\n                    } else {\n                        nextLeftNumStrRevNum\n                    }\n                } else if (nextLeftNumStrLenDiff > 0) {\n                    val nextLeftNumStrRev = nextLeftNumStr.reverse\n                    val nextLeftNumStrRevNum = nextLeftNumStrRev.toLong\n                    val nextLeftNumStrNum = nextLeftNumStr.toLong\n                    if (nextLeftNumStrNum == nextLeftNumStrRevNum) {\n                        nextLeftNumStrNum\n                    } else {\n                        nextLeftNumStrRevNum\n                    }\n                } else {\n                    val nextLeftRevNumStrRev = nextLeftRevNumStr.reverse\n                    val nextLeftRevNumStrRevNum",
    "        val s = num.toString\n        val n = s.length\n        val half = n / 2\n        val left = s.substring(0, half)\n        val right = s.substring(half + n % 2, n)\n        val leftRev = left.reverse\n        if (leftRev > right) {\n            val leftInc = (left.toLong + 1).toString\n            val leftIncRev = leftInc.reverse\n            val leftIncRevLen = leftIncRev.length\n            val leftIncRevPadded = leftIncRev + \"0\" * (half - leftIncRevLen)\n            val leftIncRevPaddedLen = leftIncRevPadded.length\n            val leftIncRevPaddedHalf = leftIncRevPadded.substring(0, leftIncRevPaddedLen / 2)\n            val rightInc = leftIncRevPadded.substring(leftIncRevPaddedLen / 2, leftIncRevPaddedLen)\n            val leftIncRevPaddedHalfRev = leftIncRevPaddedHalf.reverse\n            if (leftIncRevPaddedHalfRev > rightInc) {\n                val leftIncRevPaddedHalfRevInc = (leftIncRevPaddedHalf.toLong + 1).toString\n                val leftIncRevPaddedHalfRevIncRev = leftIncRevPaddedHalfRevInc.reverse\n                val leftIncRevPaddedHalfRevIncRevLen = leftIncRevPaddedHalfRevIncRev.length\n                val leftIncRevPaddedHalfRevIncRevPadded = leftIncRevPaddedHalfRevIncRev + \"0\" * (half - leftIncRevPaddedHalfRevIncRevLen)\n                val leftIncRevPaddedHalfRevIncRevPaddedLen = leftIncRevPaddedHalfRevIncRevPadded.length\n                val leftIncRevPaddedHalfRevIncRevPaddedHalf = leftIncRevPaddedHalfRevIncRevPadded.substring(0, leftIncRevPaddedHalfRevIncRevPaddedLen / 2)\n                val rightIncRev = leftIncRevPaddedHalfRevIncRevPadded.substring(leftIncRevPaddedHalfRevIncRevPaddedLen / 2, leftIncRevPaddedHalfRevIncRevPaddedLen)\n                val leftIncRevPaddedHalfRevIncRevP",
    "        val s = num.toString\n        val n = s.length\n        val half = n / 2\n        val left = s.substring(0, half)\n        val right = s.substring(half + n % 2, n)\n        val leftRev = left.reverse\n        if (leftRev > right) {\n            val leftInc = (left.toLong + 1).toString\n            val leftIncRev = leftInc.reverse\n            val leftIncRevLen = leftIncRev.length\n            val leftIncRevPadded = leftIncRev + \"0\" * (half - leftIncRevLen)\n            val leftIncPadded = leftInc + \"0\" * (half - leftInc.length)\n            val newRight = if (leftIncRevPadded > right) leftIncRevPadded else leftIncPadded\n            (leftInc + newRight).toLong\n        } else {\n            val leftRevPadded = leftRev + \"0\" * (half - leftRev.length)\n            (left + leftRevPadded).toLong\n        }",
    "        var n = num\n        var i = 0\n        while (n > 0) {\n            i += 1\n            n /= 10\n        }\n        var j = i / 2\n        var k = i - j\n        var l = pow(10, j).toLong\n        var m = pow(10, k).toLong\n        var a = num / l\n        var b = num % l\n        var c = a / m\n        var d = a % m\n        var e = b / m\n        var f = b % m\n        var g = (c + d) * m + f\n        var h = (c + d) * m + e\n        if (g < h) return g\n        else return h",
    "        var n = num\n        while (true) {\n            n += 1\n            if (isPalindrome(n)) return n\n        }\n        return -1",
    "        var n = num\n        var digits = new ArrayBuffer[Int]()\n        while (n > 0) {\n            digits += (n % 10).toInt\n            n /= 10\n        }\n        var i = 0\n        var j = digits.length - 1\n        while (i < j) {\n            if (digits(i) < digits(j)) {\n                digits(j) = digits(i)\n                i += 1\n                j -= 1\n            } else if (digits(i) > digits(j)) {\n                digits(j) = digits(i)\n                var k = j - 1\n                while (k >= 0 && digits(k) == 9) {\n                    digits(k) = 0\n                    k -= 1\n                }\n                if (k < 0) {\n                    digits.insert(0, 1)\n                } else {\n                    digits(k) += 1\n                }\n                i += 1\n                j -= 1\n            } else {\n                i += 1\n                j -= 1\n            }\n        }\n        var result = 0L\n        for (i <- 0 until digits.length) {\n            result = result * 10 + digits(i)\n        }\n        result",
    "        var n = num\n        var digits = new ArrayBuffer[Int]()\n        while (n > 0) {\n            digits += (n % 10).toInt\n            n /= 10\n        }\n        var i = 0\n        while (i < digits.length / 2) {\n            if (digits(i) != digits(digits.length - 1 - i)) {\n                if (digits(i) > digits(digits.length - 1 - i)) {\n                    digits(digits.length - 1 - i) = digits(i)\n                } else {\n                    digits(i) = digits(digits.length - 1 - i)\n                    var j = i + 1\n                    while (j < digits.length / 2) {\n                        digits(j) = digits(digits.length - 1 - j)\n                        j += 1\n                    }\n                }\n                return digits.reverse.foldLeft(0L)((x, y) => x * 10 + y)\n            }\n            i += 1\n        }\n        digits.reverse.foldLeft(0L)((x, y) => x * 10 + y)",
    "        def isPalindrome(num : Long) : Boolean = {\n            val str = num.toString\n            str == str.reverse\n        }\n        def nextPalindrome(num : Long) : Long = {\n            if (isPalindrome(num)) num\n            else nextPalindrome(num + 1)\n        }\n        nextPalindrome(num + 1)",
    "        val digits = num.toString.toList.map(_.toString.toInt)\n        val len = digits.length\n        val mid = len / 2\n        val left = digits.slice(0, mid)\n        val right = digits.slice(mid + len % 2, len)\n        val leftReverse = left.reverse\n        val leftReverseStr = leftReverse.mkString\n        val rightStr = right.mkString\n        if (leftReverseStr > rightStr) {\n            val leftStr = left.mkString\n            val newNum = leftStr + leftReverseStr\n            newNum.toLong\n        } else {\n            val leftStr = left.mkString\n            val leftNum = leftStr.toLong\n            val newLeftNum = leftNum + 1\n            val newLeftStr = newLeftNum.toString\n            val newLeft = newLeftStr.toList.map(_.toString.toInt)\n            val newLeftReverse = newLeft.reverse\n            val newLeftStr2 = newLeft.mkString\n            val newLeftReverseStr = newLeftReverse.mkString\n            val newNum = newLeftStr2 + newLeftReverseStr\n            newNum.toLong\n        }",
    "        var n = num\n        var digits = new ArrayBuffer[Int]()\n        while (n > 0) {\n            digits += (n % 10).toInt\n            n /= 10\n        }\n        var i = 0\n        var j = digits.length - 1\n        while (i < j) {\n            if (digits(i) < digits(j)) {\n                digits(j) = digits(i)\n            }\n            else if (digits(i) > digits(j)) {\n                digits(j) = digits(i)\n                var k = j - 1\n                while (k >= 0 && digits(k) == 9) {\n                    digits(k) = 0\n                    k -= 1\n                }\n                if (k < 0) {\n                    digits.insert(0, 1)\n                }\n                else {\n                    digits(k) += 1\n                }\n            }\n            i += 1\n            j -= 1\n        }\n        var result = 0L\n        for (i <- 0 until digits.length) {\n            result = result * 10 + digits(i)\n        }\n        result",
    "        val str = num.toString\n        val len = str.length\n        var i = 0\n        while (i < len / 2 && str(i) == str(len - 1 - i)) i += 1\n        if (i == len / 2) {\n            if (len % 2 == 1) {\n                val mid = str(len / 2).toInt - '0'\n                if (mid == 9) {\n                    val newStr = str.substring(0, len / 2) + \"0\" + str.substring(len / 2 + 1)\n                    nextSmallestPalindrome(newStr.toLong)\n                } else {\n                    val newStr = str.substring(0, len / 2) + (mid + 1).toString + str.substring(len / 2 + 1)\n                    newStr.toLong\n                }\n            } else {\n                val left = str.substring(0, len / 2).toLong\n                val right = str.substring(len / 2).toLong\n                if (left == right) {\n                    val newStr = (left + 1).toString + (left + 1).toString\n                    newStr.toLong\n                } else {\n                    val newStr = left.toString + left.toString.reverse\n                    newStr.toLong\n                }\n            }\n        } else {\n            val newStr = str.substring(0, i) + str.substring(i, len - i).reverse + str.substring(len - i)\n            newStr.toLong\n        }",
    "        var n = num\n        var digits = List[Int]()\n        while (n > 0) {\n            digits = (n % 10).toInt :: digits\n            n /= 10\n        }\n        var i = 0\n        while (i < digits.length / 2) {\n            if (digits(i) < digits(digits.length - 1 - i)) {\n                digits(digits.length - 1 - i) = digits(i)\n            }\n            else if (digits(i) > digits(digits.length - 1 - i)) {\n                digits(digits.length - 1 - i) = digits(i)\n                var j = digits.length - 2 - i\n                while (j >= 0 && digits(j) == 9) {\n                    digits(j) = 0\n                    j -= 1\n                }\n                if (j >= 0) digits(j) += 1\n                else digits = 1 :: digits\n            }\n            i += 1\n        }\n        var result = 0L\n        for (digit <- digits) {\n            result = result * 10 + digit\n        }\n        result",
    "        var n = num\n        while (true) {\n            n += 1\n            if (isPalindrome(n)) return n\n        }\n        return -1",
    "        var n = num.toString\n        var i = 0\n        var j = n.length - 1\n        while (i < j) {\n            if (n(i) < n(j)) {\n                n = n.substring(0, j) + n(i) + n.substring(j + 1)\n            }\n            i += 1\n            j -= 1\n        }\n        n.toLong",
    "        val s = num.toString\n        val l = s.length\n        if (l == 1) return num\n        val mid = l / 2\n        val left = s.substring(0, mid)\n        val right = s.substring(mid + (l % 2), l)\n        val leftRev = left.reverse\n        val leftInt = left.toLong\n        val leftRevInt = leftRev.toLong\n        val rightInt = right.toLong\n        if (leftRevInt > rightInt) {\n            val leftInt = left.toLong\n            val leftRevInt = leftRev.toLong\n            val rightInt = right.toLong\n            val leftIntInc = leftInt + 1\n            val leftRevInc = leftIntInc.toString.reverse\n            val leftRevIncInt = leftRevInc.toLong\n            val nextPalindrome = leftIntInc.toString + leftRevInc\n            nextPalindrome.toLong\n        } else {\n            val leftInt = left.toLong\n            val leftRevInt = leftRev.toLong\n            val rightInt = right.toLong\n            val nextPalindrome = left.toString + leftRev\n            nextPalindrome.toLong\n        }",
    "        var n = num\n        var digits = new ArrayBuffer[Int]()\n        while (n > 0) {\n            digits += (n % 10).toInt\n            n /= 10\n        }\n        var i = 0\n        var j = digits.length - 1\n        while (i < j) {\n            if (digits(i) != digits(j)) {\n                if (digits(i) > digits(j)) digits(j) = digits(i)\n                else digits(i) = digits(j)\n            }\n            i += 1\n            j -= 1\n        }\n        var result = 0L\n        for (i <- 0 until digits.length) result = result * 10 + digits(i)\n        result",
    "        var n = num\n        var digits = new ArrayBuffer[Int]()\n        while (n > 0) {\n            digits += (n % 10).toInt\n            n /= 10\n        }\n        var i = 0\n        while (i < digits.length / 2) {\n            if (digits(i) != digits(digits.length - 1 - i)) {\n                if (digits(i) > digits(digits.length - 1 - i)) {\n                    digits(digits.length - 1 - i) = digits(i)\n                } else {\n                    digits(i) = digits(digits.length - 1 - i)\n                }\n            }\n            i += 1\n        }\n        var result = 0L\n        for (i <- 0 until digits.length) {\n            result = result * 10 + digits(i)\n        }\n        result",
    "        val s = num.toString\n        val n = s.length\n        val half = n / 2\n        val left = s.substring(0, half)\n        val right = s.substring(half + (if (n % 2 == 0) 0 else 1), n)\n        val leftRev = left.reverse\n        if (leftRev > right) {\n            val leftInc = (left.toLong + 1).toString\n            val leftIncRev = leftInc.reverse\n            val leftIncRevLen = leftIncRev.length\n            val leftIncRevLenDiff = leftIncRevLen - leftInc.length\n            val leftIncRevPadded = \"0\" * leftIncRevLenDiff + leftIncRev\n            val leftIncRevPaddedLen = leftIncRevPadded.length\n            val leftIncRevPaddedHalf = leftIncRevPaddedLen / 2\n            val leftIncRevPaddedLeft = leftIncRevPadded.substring(0, leftIncRevPaddedHalf)\n            val leftIncRevPaddedRight = leftIncRevPadded.substring(leftIncRevPaddedHalf + (if (leftIncRevPaddedLen % 2 == 0) 0 else 1), leftIncRevPaddedLen)\n            leftInc + leftIncRevPaddedRight.reverse\n        } else {\n            left + leftRev.reverse\n        }",
    "        def isPalindrome(num : Long) : Boolean = {\n            val s = num.toString\n            s == s.reverse\n        }\n        def nextPalindrome(num : Long) : Long = {\n            if (isPalindrome(num)) num\n            else nextPalindrome(num + 1)\n        }\n        nextPalindrome(num + 1)",
    "        val digits = num.toString.toList.map(_.asDigit)\n        val len = digits.length\n        val half = len / 2\n        val left = digits.take(half)\n        val right = digits.drop(len - half).reverse\n        val (leftNext, rightNext) = if (left == right) {\n            val (leftNext, carry) = left.foldRight((List[Int](), 0))((d, acc) => {\n                val (list, carry) = acc\n                val (next, carryNext) = if (d + carry == 10) (0, 1) else (d + carry, 0)\n                (next :: list, carryNext)\n            })\n            if (carry == 1) (1 :: leftNext, 1 :: leftNext)\n            else (leftNext, leftNext.reverse)\n        } else {\n            val (leftNext, carry) = left.foldRight((List[Int](), 1))((d, acc) => {\n                val (list, carry) = acc\n                val (next, carryNext) = if (d + carry == 10) (0, 1) else (d + carry, 0)\n                (next :: list, carryNext)\n            })\n            if (carry == 1) (1 :: leftNext, 1 :: leftNext)\n            else (leftNext, leftNext.reverse)\n        }\n        val next = leftNext ++ rightNext\n        next.foldLeft(0L)((acc, d) => acc * 10 + d)",
    "        def isPalindrome(num : Long) : Boolean = {\n            val str = num.toString\n            str == str.reverse\n        }\n        def nextPalindrome(num : Long) : Long = {\n            if (isPalindrome(num)) num\n            else nextPalindrome(num + 1)\n        }\n        nextPalindrome(num + 1)",
    "        val digits = num.toString.toList.map(_.asDigit)\n        val n = digits.length\n        val half = n / 2\n        val left = digits.take(half)\n        val right = digits.takeRight(half)\n        val leftRev = left.reverse\n        if (left == leftRev) {\n            val leftInc = left.map(_ + 1)\n            if (leftInc.head == 10) {\n                val leftInc2 = 1 :: leftInc.tail\n                val leftInc2Rev = leftInc2.reverse\n                val leftInc2Rev2 = if (n % 2 == 0) leftInc2Rev else leftInc2Rev.tail\n                (leftInc2 ::: leftInc2Rev2).mkString.toLong\n            } else {\n                val leftIncRev = leftInc.reverse\n                val leftIncRev2 = if (n % 2 == 0) leftIncRev else leftIncRev.tail\n                (leftInc ::: leftIncRev2).mkString.toLong\n            }\n        } else {\n            val leftRev2 = if (n % 2 == 0) leftRev else leftRev.tail\n            (left ::: leftRev2).mkString.toLong\n        }",
    "        def isPalindrome(num : Long) : Boolean = {\n            val str = num.toString\n            str == str.reverse\n        }\n        def nextPalindrome(num : Long) : Long = {\n            val str = num.toString\n            val len = str.length\n            val half = len / 2\n            val left = str.substring(0, half)\n            val right = str.substring(half + len % 2, len)\n            val leftRev = left.reverse\n            val leftInt = left.toInt\n            val leftRevInt = leftRev.toInt\n            if (leftRevInt > right.toInt) {\n                val nextLeft = (leftInt + 1).toString\n                val nextLeftRev = nextLeft.reverse\n                val nextLeftLen = nextLeft.length\n                val nextLeftRevLen = nextLeftRev.length\n                val nextLeftRevDiff = nextLeftLen - nextLeftRevLen\n                val nextLeftRevStr = if (nextLeftRevDiff > 0) \"0\" * nextLeftRevDiff + nextLeftRev else nextLeftRev\n                val nextLeftStr = if (len % 2 == 0) nextLeft + nextLeftRevStr else nextLeft + \"0\" + nextLeftRevStr\n                nextLeftStr.toLong\n            } else {\n                val nextLeftStr = if (len % 2 == 0) left + leftRev else left + \"0\" + leftRev\n                nextLeftStr.toLong\n            }\n        }\n        if (isPalindrome(num)) num else nextPalindrome(num)",
    "        var n = num\n        var isPalindrome = false\n        while (!isPalindrome) {\n            n += 1\n            isPalindrome = n.toString == n.toString.reverse\n        }\n        n",
    "        val digits = num.toString.toList.map(_.asDigit)\n        val n = digits.length\n        val (left, right) = digits.splitAt(n / 2)\n        val leftRev = left.reverse\n        val leftRevStr = leftRev.mkString\n        val rightStr = right.mkString\n        val leftStr = left.mkString\n        val leftRevInt = leftRevStr.toInt\n        val rightInt = rightStr.toInt\n        val leftInt = leftStr.toInt\n        val leftRevPlusOne = leftRevInt + 1\n        val leftRevPlusOneStr = leftRevPlusOne.toString\n        val leftRevPlusOneStrRev = leftRevPlusOneStr.reverse\n        val leftRevPlusOneStrRevInt = leftRevPlusOneStrRev.toInt\n        val leftRevPlusOneStrInt = leftRevPlusOneStr.toInt\n        val leftRevPlusOneStrRevPlusOne = leftRevPlusOneStrRevInt + 1\n        val leftRevPlusOneStrRevPlusOneStr = leftRevPlusOneStrRevPlusOne.toString\n        val leftRevPlusOneStrRevPlusOneStrRev = leftRevPlusOneStrRevPlusOneStr.reverse\n        val leftRevPlusOneStrRevPlusOneStrRevInt = leftRevPlusOneStrRevPlusOneStrRev.toInt\n        val leftRevPlusOneStrRevPlusOneStrInt = leftRevPlusOneStrRevPlusOneStr.toInt\n        val leftRevPlusOneStrRevPlusOneStrRevPlusOne = leftRevPlusOneStrRevPlusOneStrRevInt + 1\n        val leftRevPlusOneStrRevPlusOneStrRevPlusOneStr = leftRevPlusOneStrRevPlusOneStrRevPlusOne.toString\n        val leftRevPlusOneStrRevPlusOneStrRevPlusOneStrRev = leftRevPlusOneStrRevPlusOneStrRevPlusOneStr.reverse\n        val leftRevPlusOneStrRevPlusOneStrRevPlusOneStrRevInt = leftRevPlusOneStrRevPlusOneStrRevPlusOneStrRev.toInt\n        val leftRevPlusOneStrRevPlusOneStrRevPlusOneStrInt = leftRevPlusOneStrRevPlusOneStrRevPlusOneStr.toInt\n        val leftRevPlusOneStrRevPlusOneStrRevPlusOneStrRevPlus",
    "        def isPalindrome(num : Long) : Boolean = {\n            val str = num.toString\n            str == str.reverse\n        }\n        def nextPalindrome(num : Long) : Long = {\n            if (isPalindrome(num)) num\n            else nextPalindrome(num + 1)\n        }\n        nextPalindrome(num + 1)",
    "        var n = num\n        while (true) {\n            n += 1\n            if (isPalindrome(n)) return n\n        }\n        return -1",
    "        val str = num.toString\n        val len = str.length\n        val half = len / 2\n        val left = str.substring(0, half)\n        val right = str.substring(half + len % 2, len)\n        val leftRev = left.reverse\n        if (right < leftRev) return (left + leftRev.reverse).toLong\n        else {\n            val nextLeft = (left.toLong + 1).toString\n            val nextLeftRev = nextLeft.reverse\n            if (nextLeft.length > left.length) return (nextLeft + nextLeftRev.substring(1)).toLong\n            else return (nextLeft + nextLeftRev).toLong\n        }",
    "        val digits = num.toString.toList.map(_.toString.toInt)\n        val n = digits.length\n        val half = n / 2\n        val left = digits.take(half)\n        val right = digits.takeRight(half).reverse\n        val leftPalindrome = left ++ left.reverse\n        val rightPalindrome = right ++ right.reverse\n        val leftPalindromeNum = leftPalindrome.foldLeft(0)((acc, x) => acc * 10 + x)\n        val rightPalindromeNum = rightPalindrome.foldLeft(0)((acc, x) => acc * 10 + x)\n        if (leftPalindromeNum < rightPalindromeNum) leftPalindromeNum\n        else if (leftPalindromeNum > rightPalindromeNum) rightPalindromeNum\n        else if (n % 2 == 0) leftPalindromeNum\n        else {\n            val leftPalindromeNum2 = (left.map(_ + 1).map(_ % 10) ++ left.reverse).foldLeft(0)((acc, x) => acc * 10 + x)\n            val rightPalindromeNum2 = (right.map(_ + 1).map(_ % 10) ++ right.reverse).foldLeft(0)((acc, x) => acc * 10 + x)\n            if (leftPalindromeNum2 < rightPalindromeNum2) leftPalindromeNum2\n            else rightPalindromeNum2\n        }",
    "        val s = num.toString\n        val n = s.length\n        val half = n / 2\n        val (left, right) = s.splitAt(half)\n        val leftReverse = left.reverse\n        val newRight = if (leftReverse > right) leftReverse else leftReverse.updated(half - 1, (leftReverse(half - 1) + 1).toChar)\n        val newNum = left + newRight\n        if (newNum.length > n) newNum.substring(1).toLong else newNum.toLong",
    "        def isPalindrome(num : Long) : Boolean = {\n            val str = num.toString\n            str == str.reverse\n        }\n        def nextPalindrome(num : Long) : Long = {\n            val str = num.toString\n            val len = str.length\n            val half = len / 2\n            val left = str.substring(0, half)\n            val right = str.substring(half + len % 2, len)\n            val leftRev = left.reverse\n            val leftInt = left.toInt\n            val leftRevInt = leftRev.toInt\n            if (leftRevInt < leftInt) {\n                val newLeft = (leftInt + 1).toString\n                val newRight = newLeft.reverse\n                (newLeft + newRight.substring(len % 2, len)).toLong\n            } else {\n                val newLeft = leftRev\n                val newRight = newLeft.reverse\n                (newLeft + newRight.substring(len % 2, len)).toLong\n            }\n        }\n        if (isPalindrome(num)) num else nextPalindrome(num)",
    "        var n = num\n        var digits = new ArrayBuffer[Int]()\n        while (n > 0) {\n            digits += (n % 10).toInt\n            n /= 10\n        }\n        var i = 0\n        while (i < digits.length / 2) {\n            if (digits(i) > digits(digits.length - 1 - i)) {\n                digits(digits.length - 1 - i) = digits(i)\n            }\n            i += 1\n        }\n        var result = 0L\n        for (i <- 0 until digits.length) result = result * 10 + digits(i)\n        result",
    "        var s = num.toString\n        var i = 0\n        while (i < s.length / 2) {\n            if (s(i) < s(s.length - 1 - i)) {\n                s = s.substring(0, s.length - 1 - i) + s(i) + s.substring(s.length - i)\n                i += 1\n            } else if (s(i) > s(s.length - 1 - i)) {\n                s = s.substring(0, s.length - 1 - i) + (s(i) - 1).toChar + s.substring(s.length - i)\n                i += 1\n            } else i += 1\n        }\n        s.toLong",
    "        def isPalindrome(num : Long) : Boolean = {\n            val s = num.toString\n            s == s.reverse\n        }\n        def nextSmallestPalindrome(num : Long, digits : Int) : Long = {\n            if (digits == 1) {\n                if (num == 9) return 11\n                else return num + 1\n            }\n            val base = pow(10, digits - 1).toLong\n            val half = num / base\n            val halfDigits = digits / 2\n            val halfBase = pow(10, halfDigits - 1).toLong\n            val halfRemainder = num % halfBase\n            val halfRemainderDigits = halfRemainder.toString.length\n            val halfRemainderBase = pow(10, halfRemainderDigits - 1).toLong\n            val halfRemainderNext = halfRemainder + 1\n            if (halfRemainderNext == halfBase) {\n                val halfNext = half + 1\n                val halfNextDigits = halfNext.toString.length\n                val halfNextBase = pow(10, halfNextDigits - 1).toLong\n                val halfNextRemainder = halfNext % halfNextBase\n                val halfNextRemainderDigits = halfNextRemainder.toString.length\n                val halfNextRemainderBase = pow(10, halfNextRemainderDigits - 1).toLong\n                val halfNextRemainderNext = halfNextRemainder + 1\n                if (halfNextRemainderNext == halfNextBase) {\n                    val halfNextNext = halfNext + 1\n                    val halfNextNextDigits = halfNextNext.toString.length\n                    val halfNextNextBase = pow(10, halfNextNextDigits - 1).toLong\n                    val halfNextNextRemainder = halfNextNext % halfNextNextBase\n                    val halfNextNextRemainderDigits = halfNextNextRemainder.toString.length\n                    val halfNextNextRemainderBase = pow(10, halfNextNextRemainderDigits - 1).toLong\n                    val halfNextNextRemainderNext = halfNextNextRemainder + 1\n                    if (halfNextNextRemainderNext == half",
    "        val str = num.toString\n        val len = str.length\n        val half = len / 2\n        val left = str.substring(0, half)\n        val right = str.substring(half + len % 2)\n        val leftRev = left.reverse\n        val leftRevNum = leftRev.toLong\n        val rightNum = right.toLong\n        if (leftRevNum < rightNum) {\n            val leftNum = left.toLong\n            val leftNumPlusOne = leftNum + 1\n            val leftNumPlusOneStr = leftNumPlusOne.toString\n            val leftNumPlusOneStrRev = leftNumPlusOneStr.reverse\n            val leftNumPlusOneStrRevNum = leftNumPlusOneStrRev.toLong\n            val leftNumPlusOneStrRevNumStr = leftNumPlusOneStrRevNum.toString\n            val leftNumPlusOneStrRevNumStrLen = leftNumPlusOneStrRevNumStr.length\n            val leftNumPlusOneStrRevNumStrLenDiff = half - leftNumPlusOneStrRevNumStrLen\n            val leftNumPlusOneStrRevNumStrLenDiffStr = \"0\" * leftNumPlusOneStrRevNumStrLenDiff\n            val leftNumPlusOneStrRevNumStrLenDiffStrNum = leftNumPlusOneStrRevNumStrLenDiffStr.toLong\n            val leftNumPlusOneStrRevNumStrLenDiffStrNumStr = leftNumPlusOneStrRevNumStrLenDiffStrNum.toString\n            val leftNumPlusOneStrRevNumStrLenDiffStrNumStrRev = leftNumPlusOneStrRevNumStrLenDiffStrNumStr.reverse\n            val leftNumPlusOneStrRevNumStrLenDiffStrNumStrRevNum = leftNumPlusOneStrRevNumStrLenDiffStrNumStrRev.toLong\n            val leftNumPlusOneStrRevNumStrLenDiffStrNumStrRevNumStr = leftNumPlusOneStrRevNumStrLenDiffStrNumStrRevNum.toString\n            val leftNumPlusOneStrRevNumStrLenDiffStrNumStrRevNumStrLen = leftNumPlusOneStrRevNumStrLenDiffStrNumStrRevNumStr.length\n            val leftNumPlusOneStrRevNumStrLenDiffStrNumStrRevNumStrLenDiff = half - leftNumPlusOneStrRevNumStr",
    "        var n = num.toString\n        var i = 0\n        while (i < n.length / 2 && n(i) == n(n.length - 1 - i)) i += 1\n        if (i == n.length / 2) {\n            if (n.length % 2 == 1) {\n                if (n(i) == '9') {\n                    n = n.substring(0, i) + \"0\" + n.substring(i + 1)\n                    i -= 1\n                } else {\n                    n = n.substring(0, i) + (n(i).asDigit + 1).toString + n.substring(i + 1)\n                }\n            } else {\n                if (n(i) == '9') {\n                    n = n.substring(0, i) + \"00\" + n.substring(i + 2)\n                    i -= 1\n                } else {\n                    n = n.substring(0, i) + (n(i).asDigit + 1).toString + (n(i).asDigit + 1).toString + n.substring(i + 2)\n                }\n            }\n            while (i >= 0 && n(i) == '0') {\n                n = n.substring(0, i) + \"9\" + n.substring(i + 1)\n                i -= 1\n            }\n            if (i == -1) n = \"1\" + n\n            else n = n.substring(0, i) + (n(i).asDigit - 1).toString + n.substring(i + 1)\n        }\n        n.toLong",
    "        val str = num.toString\n        val len = str.length\n        val half = len / 2\n        val left = str.substring(0, half)\n        val right = str.substring(half + len % 2)\n        val leftInt = left.toInt\n        val rightInt = right.toInt\n        if (leftInt < rightInt) {\n            val leftStr = (leftInt + 1).toString\n            val rightStr = leftStr.reverse\n            (leftStr + rightStr).toLong\n        } else {\n            val leftStr = leftInt.toString\n            val rightStr = leftStr.reverse\n            if (leftStr == rightStr) {\n                val leftStr = (leftInt + 1).toString\n                val rightStr = leftStr.reverse\n                (leftStr + rightStr).toLong\n            } else {\n                (leftStr + rightStr).toLong\n            }\n        }",
    "        val str = num.toString\n        val len = str.length\n        val half = len / 2\n        val left = str.substring(0, half)\n        val right = str.substring(half + len % 2, len)\n        val leftRev = left.reverse\n        if (leftRev > right) {\n            val leftNum = left.toLong\n            val leftNumNext = leftNum + 1\n            val leftNumNextStr = leftNumNext.toString\n            val leftNumNextStrRev = leftNumNextStr.reverse\n            val leftNumNextStrRevLen = leftNumNextStrRev.length\n            val leftNumNextStrRevLenDiff = leftNumNextStr.length - leftNumNextStrRevLen\n            val leftNumNextStrRevLenDiffStr = \"0\" * leftNumNextStrRevLenDiff\n            val leftNumNextStrRevLenDiffStrRev = leftNumNextStrRevLenDiffStr.reverse\n            val leftNumNextStrRevLenDiffStrRevLen = leftNumNextStrRevLenDiffStrRev.length\n            val leftNumNextStrRevLenDiffStrRevLenDiff = leftNumNextStrRevLenDiffStr.length - leftNumNextStrRevLenDiffStrRevLen\n            val leftNumNextStrRevLenDiffStrRevLenDiffStr = \"0\" * leftNumNextStrRevLenDiffStrRevLenDiff\n            val leftNumNextStrRevLenDiffStrRevLenDiffStrRev = leftNumNextStrRevLenDiffStrRevLenDiffStr.reverse\n            val leftNumNextStrRevLenDiffStrRevLenDiffStrRevLen = leftNumNextStrRevLenDiffStrRevLenDiffStrRev.length\n            val leftNumNextStrRevLenDiffStrRevLenDiffStrRevLenDiff = leftNumNextStrRevLenDiffStrRevLenDiffStr.length - leftNumNextStrRevLenDiffStrRevLenDiffStrRevLen\n            val leftNumNextStrRevLenDiffStrRevLenDiffStrRevLenDiffStr = \"0\" * leftNumNextStrRevLenDiffStrRevLenDiffStrRevLenDiff\n            val leftNumNextStrRevLenDiffStrRevLenDiffStrRevLenDiffStrRev = leftNumNextStrRevLenDiffStrRevLenDiffStrRevLenDiffStr.reverse\n            val leftNumNextStrRevLenDiffStrRevLenDiffStrRevLen",
    "        val digits = num.toString.toList.map(_.asDigit)\n        val n = digits.length\n        val half = n / 2\n        val left = digits.take(half)\n        val right = digits.drop(half + n % 2).reverse\n        if (left == right) {\n            val nextLeft = left.reverse.scanLeft(1)((carry, digit) => if (digit + carry == 10) 0 else digit + carry).drop(1).reverse\n            if (nextLeft.length < half) {\n                val nextRight = nextLeft.reverse\n                val nextDigits = nextLeft ++ List(0) ++ nextRight\n                nextDigits.foldLeft(0L)((num, digit) => num * 10 + digit)\n            } else {\n                val nextRight = nextLeft.drop(1).reverse\n                val nextDigits = nextLeft ++ nextRight\n                nextDigits.foldLeft(0L)((num, digit) => num * 10 + digit)\n            }\n        } else {\n            val nextLeft = left.reverse.scanLeft(0)((carry, digit) => if (digit + carry == 10) 0 else digit + carry).drop(1).reverse\n            val nextRight = nextLeft.reverse\n            val nextDigits = nextLeft ++ List(0) ++ nextRight\n            nextDigits.foldLeft(0L)((num, digit) => num * 10 + digit)\n        }",
    "        val str = num.toString\n        val len = str.length\n        val half = len / 2\n        val halfStr = str.substring(0, half)\n        val halfNum = halfStr.toLong\n        val halfStrRev = halfStr.reverse\n        val halfNumRev = halfStrRev.toLong\n        val halfNumNext = halfNum + 1\n        val halfStrNext = halfNumNext.toString\n        val halfStrNextRev = halfStrNext.reverse\n        val halfNumNextRev = halfStrNextRev.toLong\n        val halfNumNextNext = halfNumNext + 1\n        val halfStrNextNext = halfNumNextNext.toString\n        val halfStrNextNextRev = halfStrNextNext.reverse\n        val halfNumNextNextRev = halfStrNextNextRev.toLong\n        val halfNumNextNextNext = halfNumNextNext + 1\n        val halfStrNextNextNext = halfNumNextNextNext.toString\n        val halfStrNextNextNextRev = halfStrNextNextNext.reverse\n        val halfNumNextNextNextRev = halfStrNextNextNextRev.toLong\n        val halfNumNextNextNextNext = halfNumNextNextNext + 1\n        val halfStrNextNextNextNext = halfNumNextNextNextNext.toString\n        val halfStrNextNextNextNextRev = halfStrNextNextNextNext.reverse\n        val halfNumNextNextNextNextRev = halfStrNextNextNextNextRev.toLong\n        val halfNumNextNextNextNextNext = halfNumNextNextNextNext + 1\n        val halfStrNextNextNextNextNext = halfNumNextNextNextNextNext.toString\n        val halfStrNextNextNextNextNextRev = halfStrNextNextNextNextNext.reverse\n        val halfNumNextNextNextNextNextRev = halfStrNextNextNextNextNextRev.toLong\n        val halfNumNextNextNextNextNextNext = halfNumNextNextNextNextNext + 1\n        val halfStrNextNextNextNextNextNext = halfNumNextNextNextNextNextNext.toString\n        val halfStrNextNextNextNextNextNextRev = halfStrNextNextNextNextNextNext.reverse\n        val halfNumNextNextNextNextNextNextRev = halfStrNextNextNextNextNextNextRev.toLong\n        val halfNum",
    "        val str = num.toString\n        val len = str.length\n        val half = len / 2\n        val isOdd = len % 2 == 1\n        val left = str.substring(0, half)\n        val right = str.substring(if (isOdd) half + 1 else half)\n        val leftRev = left.reverse\n        if (leftRev > right) {\n            val leftInc = (left.toLong + 1).toString\n            val leftIncRev = leftInc.reverse\n            val leftIncRevLen = leftIncRev.length\n            val leftIncRevLenDiff = leftIncRevLen - leftInc.length\n            val leftIncRevLenDiff2 = if (leftIncRevLenDiff == 0) 0 else leftIncRevLenDiff - 1\n            val leftIncRevLenDiff3 = if (leftIncRevLenDiff2 == 0) 0 else leftIncRevLenDiff2 - 1\n            val leftIncRevLenDiff4 = if (leftIncRevLenDiff3 == 0) 0 else leftIncRevLenDiff3 - 1\n            val leftIncRevLenDiff5 = if (leftIncRevLenDiff4 == 0) 0 else leftIncRevLenDiff4 - 1\n            val leftIncRevLenDiff6 = if (leftIncRevLenDiff5 == 0) 0 else leftIncRevLenDiff5 - 1\n            val leftIncRevLenDiff7 = if (leftIncRevLenDiff6 == 0) 0 else leftIncRevLenDiff6 - 1\n            val leftIncRevLenDiff8 = if (leftIncRevLenDiff7 == 0) 0 else leftIncRevLenDiff7 - 1\n            val leftIncRevLenDiff9 = if (leftIncRevLenDiff8 == 0) 0 else leftIncRevLenDiff8 - 1\n            val leftIncRevLenDiff10 = if (leftIncRevLenDiff9 == 0) 0 else leftIncRevLenDiff9 - 1\n            val leftIncRevLenDiff11 = if (leftIncRevLenDiff10 == 0) 0 else leftIncRevLenDiff10 - 1\n            val leftIncRevLenDiff12 = if (leftIncRevLenDiff11 == 0) 0 else leftIncRevLenDiff11 - 1\n            val leftIncRevLenDiff13 = if (leftIncRevLenDiff12 == 0) 0 else",
    "        var n = num\n        while(true) {\n            n += 1\n            if(isPalindrome(n)) return n\n        }\n        return -1",
    "        val s = num.toString\n        val n = s.length\n        val half = n / 2\n        val halfs = s.substring(0, half)\n        val halfr = halfs.reverse\n        val halfi = halfs.toInt\n        val halfir = halfr.toInt\n        val halfirp = halfir + 1\n        val halfirpr = halfirp.toString.reverse\n        val halfirprl = halfirpr.length\n        val halfirprs = if (halfirprl < half) \"0\" * (half - halfirprl) + halfirpr else halfirpr\n        val halfirprsr = halfirprs.reverse\n        val halfirprsrl = halfirprsr.length\n        val halfirprsrlr = halfirprsr.reverse\n        val halfirprsrlrl = halfirprsrlr.length\n        val halfirprsrlrlr = if (halfirprsrlrl < half) \"0\" * (half - halfirprsrlrl) + halfirprsrlr else halfirprsrlr\n        val halfirprsrlrlrr = halfirprsrlrlr.reverse\n        val halfirprsrlrlrrl = halfirprsrlrlrr.length\n        val halfirprsrlrlrrlr = if (halfirprsrlrlrrl < half) \"0\" * (half - halfirprsrlrlrrl) + halfirprsrlrlrr else halfirprsrlrlrr\n        val halfirprsrlrlrrlrr = halfirprsrlrlrrlr.reverse\n        val halfirprsrlrlrrlrrl = halfirprsrlrlrrlrr.length\n        val halfirprsrlrlrrlrrlr = if (halfirprsrlrlrrlrrl < half) \"0\" * (half - halfirprsrlrlrrlrrl) + halfirprsrlrlrrlrr else halfirprsrlrlrrlrr\n        val halfirprsrlrlrrlrrlrr = halfirprsrlrlrrlrrlr.reverse\n        val halfirprsrlrlrrlrrlrrl = halfirprsrlrlrrlr",
    "        val str = num.toString\n        val len = str.length\n        val half = len / 2\n        val left = str.substring(0, half)\n        val right = str.substring(half + len % 2, len)\n        val leftRev = left.reverse\n        if (leftRev > right) {\n            val leftNum = left.toLong\n            val nextLeft = (leftNum + 1).toString\n            val nextLeftRev = nextLeft.reverse\n            val nextLeftLen = nextLeft.length\n            val nextRight = nextLeftRev.substring(nextLeftLen - half, nextLeftLen)\n            nextLeft + nextRight\n        } else {\n            val leftNum = left.toLong\n            val nextLeft = leftNum.toString\n            val nextLeftRev = nextLeft.reverse\n            val nextLeftLen = nextLeft.length\n            val nextRight = nextLeftRev.substring(nextLeftLen - half, nextLeftLen)\n            nextLeft + nextRight\n        }",
    "        def isPalindrome(num : Long) : Boolean = {\n            val s = num.toString\n            s == s.reverse\n        }\n        def nextPalindrome(num : Long) : Long = {\n            var n = num\n            while (!isPalindrome(n)) n += 1\n            n\n        }\n        nextPalindrome(num + 1)",
    "        val digits = num.toString.toList.map(_.toString.toInt)\n        val n = digits.length\n        val half = n / 2\n        val left = digits.take(half)\n        val right = digits.takeRight(half)\n        val leftReverse = left.reverse\n        val rightReverse = right.reverse\n        if (left == rightReverse) {\n            val leftIncremented = left.map(_ + 1).map(_ % 10)\n            val rightIncremented = leftIncremented.reverse\n            val newDigits = leftIncremented ++ rightIncremented\n            if (n % 2 == 1) {\n                val center = (digits(half) + 1) % 10\n                val newDigitsWithCenter = newDigits.take(half) ++ List(center) ++ newDigits.takeRight(half)\n                newDigitsWithCenter.mkString.toLong\n            } else newDigits.mkString.toLong\n        } else {\n            val newDigits = left ++ rightReverse\n            if (n % 2 == 1) {\n                val center = digits(half)\n                val newDigitsWithCenter = newDigits.take(half) ++ List(center) ++ newDigits.takeRight(half)\n                newDigitsWithCenter.mkString.toLong\n            } else newDigits.mkString.toLong\n        }",
    "        val s = num.toString\n        val n = s.length\n        val half = n / 2\n        val left = s.substring(0, half)\n        val right = s.substring(half + (n % 2), n)\n        val leftRev = left.reverse\n        val leftNum = left.toLong\n        val leftRevNum = leftRev.toLong\n        val rightNum = right.toLong\n        if (leftNum < leftRevNum) {\n            val newLeft = (leftNum + 1).toString\n            val newLeftRev = newLeft.reverse\n            val newLeftRevNum = newLeftRev.toLong\n            val newRight = if (newLeftRevNum < rightNum) right else newLeftRev\n            (newLeft + newRight).toLong\n        } else {\n            val newLeft = left\n            val newLeftRev = newLeft.reverse\n            val newLeftRevNum = newLeftRev.toLong\n            val newRight = if (newLeftRevNum < rightNum) right else newLeftRev\n            (newLeft + newRight).toLong\n        }",
    "        val s = num.toString\n        val n = s.length\n        if (n == 1) return num + 1\n        val half = n / 2\n        val left = s.substring(0, half)\n        val right = s.substring(half + (if (n % 2 == 0) 0 else 1))\n        val leftNum = left.toLong\n        val rightNum = right.toLong\n        if (leftNum == rightNum) {\n            val nextLeft = (leftNum + 1).toString\n            val nextRight = nextLeft.reverse\n            if (n % 2 == 0) nextLeft + nextRight else nextLeft.substring(0, half) + s(half) + nextRight\n        } else if (leftNum > rightNum) {\n            val nextLeft = leftNum.toString\n            val nextRight = nextLeft.reverse\n            if (n % 2 == 0) nextLeft + nextRight else nextLeft.substring(0, half) + s(half) + nextRight\n        } else {\n            val nextLeft = leftNum.toString\n            val nextRight = nextLeft.reverse\n            if (n % 2 == 0) nextLeft + nextRight else nextLeft.substring(0, half) + s(half) + nextRight\n        }",
    "        val digits = num.toString.toList.map(_.asDigit)\n        var i = 0\n        while (i < digits.length / 2) {\n            if (digits(i) < digits(digits.length - 1 - i)) {\n                digits(digits.length - 1 - i) = digits(i)\n            }\n            else if (digits(i) > digits(digits.length - 1 - i)) {\n                digits(digits.length - 1 - i) = digits(i)\n                var j = digits.length - 2 - i\n                while (j >= 0 && digits(j) == 9) {\n                    digits(j) = 0\n                    j -= 1\n                }\n                if (j >= 0) digits(j) += 1\n                else digits.insert(0, 1)\n            }\n            i += 1\n        }\n        digits.mkString.toLong",
    "        var n = num\n        var i = 0\n        while(true) {\n            if(isPalindrome(n)) return n\n            n = num - i\n            i += 1\n        }\n        return -1",
    "        def isPalindrome(num : Long) : Boolean = {\n            val s = num.toString\n            s == s.reverse\n        }\n        def nextPalindrome(num : Long) : Long = {\n            val s = num.toString\n            val n = s.length\n            val half = n / 2\n            val left = s.substring(0, half)\n            val right = s.substring(half + n % 2, n)\n            val nextLeft = (BigInt(left) + 1).toString\n            val nextRight = nextLeft.reverse\n            val next = nextLeft + nextRight\n            if (next.length > n) next.substring(1, n + 1).toLong else next.toLong\n        }\n        if (isPalindrome(num)) num else nextPalindrome(num)",
    "        val digits = num.toString.toList.map(_.asDigit)\n        val n = digits.length\n        val half = n / 2\n        val left = digits.slice(0, half)\n        val right = digits.slice(half + n % 2, n).reverse\n        val (left1, right1) = if (left < right) (left, right) else (left.updated(half - 1, left(half - 1) + 1), right)\n        val palindrome = (left1 ++ right1.reverse).mkString.toLong\n        if (palindrome < num) nextSmallestPalindrome(palindrome + 1) else palindrome",
    "        var n = num.toString.length\n        var x = pow(10, n - 1).toLong\n        var y = pow(10, n).toLong\n        var z = pow(10, n - 2).toLong\n        var a = num / x\n        var b = num % x\n        var c = (a + 1) * x\n        var d = (a - 1) * x\n        var e = (a + 1) * z\n        var f = (a - 1) * z\n        var g = a * z\n        if (b == 0) return c\n        if (b == g) return d\n        if (b > g) return c\n        if (b < g) return d\n        return -1",
    "        var n = num\n        var isPalindrome = false\n        while (!isPalindrome) {\n            n += 1\n            isPalindrome = true\n            val s = n.toString\n            for (i <- 0 until s.length / 2) {\n                if (s(i) != s(s.length - 1 - i)) {\n                    isPalindrome = false\n                    break\n                }\n            }\n        }\n        n",
    "        var n = num\n        var i = 0\n        while (i < n.toString.length) {\n            if (n.toString.charAt(i) != '9') {\n                i = n.toString.length\n            }\n            else {\n                i += 1\n            }\n        }\n        if (i == n.toString.length) {\n            return (pow(10, n.toString.length).toLong + 1)\n        }\n        var m = n.toString.length / 2\n        var l = n.toString.substring(0, m).toLong\n        var r = n.toString.substring(m + n.toString.length % 2, n.toString.length).toLong\n        var l1 = l\n        var r1 = r\n        var l2 = l\n        var r2 = r\n        while (l1 == l2 && r1 == r2) {\n            l1 = l1 + 1\n            r1 = r1 - 1\n            l2 = l2 - 1\n            r2 = r2 + 1\n        }\n        if (l1 == l2) {\n            return (l1 * pow(10, n.toString.length - m).toLong + r1)\n        }\n        else if (r1 == r2) {\n            return (l2 * pow(10, n.toString.length - m).toLong + r2)\n        }\n        else if (l1 - l2 > r1 - r2) {\n            return (l1 * pow(10, n.toString.length - m).toLong + r1)\n        }\n        else {\n            return (l2 * pow(10, n.toString.length - m).toLong + r2)\n        }",
    "        def isPalindrome(num : Long) : Boolean = {\n            val str = num.toString\n            str == str.reverse\n        }\n        def nextPalindrome(num : Long) : Long = {\n            var n = num\n            while (!isPalindrome(n)) n += 1\n            n\n        }\n        nextPalindrome(num + 1)",
    "        val s = num.toString\n        val n = s.length\n        val half = n / 2\n        val firstHalf = s.substring(0, half)\n        val secondHalf = s.substring(half + n % 2, n)\n        val firstHalfRev = firstHalf.reverse\n        val secondHalfRev = secondHalf.reverse\n        val firstHalfRevNum = firstHalfRev.toLong\n        val secondHalfRevNum = secondHalfRev.toLong\n        val firstHalfNum = firstHalf.toLong\n        val secondHalfNum = secondHalf.toLong\n        if (firstHalfRevNum < secondHalfNum) {\n            val firstHalfNumPlusOne = firstHalfNum + 1\n            val firstHalfPlusOne = firstHalfNumPlusOne.toString\n            val firstHalfPlusOneRev = firstHalfPlusOne.reverse\n            val firstHalfPlusOneRevNum = firstHalfPlusOneRev.toLong\n            val firstHalfPlusOneRevNumStr = firstHalfPlusOneRevNum.toString\n            val firstHalfPlusOneRevNumStrLen = firstHalfPlusOneRevNumStr.length\n            val firstHalfPlusOneRevNumStrLenDiff = half - firstHalfPlusOneRevNumStrLen\n            val firstHalfPlusOneRevNumStrLenDiffStr = \"0\" * firstHalfPlusOneRevNumStrLenDiff\n            val firstHalfPlusOneRevNumStrLenDiffStrNum = firstHalfPlusOneRevNumStrLenDiffStr.toLong\n            val firstHalfPlusOneRevNumStrLenDiffStrNumPlusOne = firstHalfPlusOneRevNumStrLenDiffStrNum + 1\n            val firstHalfPlusOneRevNumStrLenDiffStrNumPlusOneStr = firstHalfPlusOneRevNumStrLenDiffStrNumPlusOne.toString\n            val firstHalfPlusOneRevNumStrLenDiffStrNumPlusOneStrLen = firstHalfPlusOneRevNumStrLenDiffStrNumPlusOneStr.length\n            val firstHalfPlusOneRevNumStrLenDiffStrNumPlusOneStrLenDiff = half - firstHalfPlusOneRevNumStrLenDiffStrNumPlusOneStrLen\n            val firstHalfPlusOneRevNumStrLenDiffStrNumPlusOneStrLenDiffStr = \"0\" * firstHalfPlusOneRevNumStrLenDiffStrNumPlusOneStrLenDiff\n            val firstHalfPlus",
    "        val digits = num.toString.toList.map(_.asDigit)\n        val n = digits.length\n        val half = n / 2\n        val left = digits.take(half)\n        val right = digits.takeRight(half)\n        val leftRev = left.reverse\n        if (left == leftRev && right == leftRev) {\n            val (leftInc, carry) = increment(left)\n            if (carry == 0) {\n                val leftRevInc = leftInc.reverse\n                val newNum = leftInc ++ leftRevInc\n                if (n % 2 == 1) newNum.init.mkString.toLong\n                else newNum.mkString.toLong\n            }\n            else {\n                val leftRevInc = leftInc.reverse\n                val newNum = leftInc ++ leftRevInc\n                if (n % 2 == 1) newNum.init.mkString.toLong\n                else newNum.mkString.toLong\n            }\n        }\n        else {\n            val leftRev = left.reverse\n            val newNum = left ++ leftRev\n            if (n % 2 == 1) newNum.init.mkString.toLong\n            else newNum.mkString.toLong\n        }",
    "        def isPalindrome(num : Long) : Boolean = {\n            val str = num.toString\n            str == str.reverse\n        }\n        def nextPalindrome(num : Long) : Long = {\n            val str = num.toString\n            val len = str.length\n            val mid = len / 2\n            val left = str.substring(0, mid)\n            val right = str.substring(mid + len % 2, len)\n            val leftRev = left.reverse\n            if (leftRev > right) {\n                val leftInc = (left.toLong + 1).toString\n                val leftIncRev = leftInc.reverse\n                val midStr = if (len % 2 == 1) leftInc.substring(0, 1) else \"\"\n                (leftInc + midStr + leftIncRev).toLong\n            } else {\n                val midStr = if (len % 2 == 1) left.substring(0, 1) else \"\"\n                (left + midStr + leftRev).toLong\n            }\n        }\n        if (isPalindrome(num)) num\n        else nextPalindrome(num)",
    "        var n = num\n        var digits = new ArrayBuffer[Int]\n        while (n > 0) {\n            digits += (n % 10).toInt\n            n /= 10\n        }\n        var i = 0\n        var j = digits.length - 1\n        while (i < j) {\n            if (digits(i) < digits(j)) {\n                digits(j) = digits(i)\n            } else if (digits(i) > digits(j)) {\n                digits(j) = digits(i)\n                var k = j - 1\n                while (k >= 0 && digits(k) == 9) {\n                    digits(k) = 0\n                    k -= 1\n                }\n                if (k < 0) {\n                    digits.insert(0, 1)\n                } else {\n                    digits(k) += 1\n                }\n            }\n            i += 1\n            j -= 1\n        }\n        var result = 0L\n        for (i <- 0 until digits.length) {\n            result = result * 10 + digits(i)\n        }\n        result",
    "        def isPalindrome(num : Long) : Boolean = {\n            val s = num.toString\n            s == s.reverse\n        }\n        def nextPalindrome(num : Long) : Long = {\n            if (isPalindrome(num)) num\n            else nextPalindrome(num - 1)\n        }\n        nextPalindrome(num - 1)",
    "        def isPalindrome(num : Long) : Boolean = {\n            val str = num.toString\n            str == str.reverse\n        }\n        def nextPalindrome(num : Long) : Long = {\n            var n = num + 1\n            while (!isPalindrome(n)) n += 1\n            n\n        }\n        nextPalindrome(num)",
    "        val s = num.toString\n        val n = s.length\n        val half = n / 2\n        val left = s.substring(0, half)\n        val right = s.substring(half + n % 2, n)\n        val leftRev = left.reverse\n        if (leftRev > right) {\n            val leftRevInt = leftRev.toInt\n            val leftRevIntInc = leftRevInt + 1\n            val leftRevInc = leftRevIntInc.toString\n            val leftRevIncRev = leftRevInc.reverse\n            val leftRevIncRevLen = leftRevIncRev.length\n            val leftRevIncRevLenDiff = leftRevInc.length - leftRevIncRevLen\n            val leftRevIncRevPadded = leftRevIncRev + \"0\" * leftRevIncRevLenDiff\n            val leftRevIncRevPaddedInt = leftRevIncRevPadded.toInt\n            val leftRevIncRevPaddedIntStr = leftRevIncRevPaddedInt.toString\n            val leftRevIncRevPaddedIntStrLen = leftRevIncRevPaddedIntStr.length\n            val leftRevIncRevPaddedIntStrLenDiff = leftRevIncRevPaddedIntStrLen - leftRevIncRevPadded.length\n            val leftRevIncRevPaddedIntStrPadded = \"0\" * leftRevIncRevPaddedIntStrLenDiff + leftRevIncRevPaddedIntStr\n            val leftRevIncRevPaddedIntStrPaddedLen = leftRevIncRevPaddedIntStrPadded.length\n            val leftRevIncRevPaddedIntStrPaddedLenHalf = leftRevIncRevPaddedIntStrPaddedLen / 2\n            val leftRevIncRevPaddedIntStrPaddedLeft = leftRevIncRevPaddedIntStrPadded.substring(0, leftRevIncRevPaddedIntStrPaddedLenHalf)\n            val leftRevIncRevPaddedIntStrPaddedRight = leftRevIncRevPaddedIntStrPadded.substring(leftRevIncRevPaddedIntStrPaddedLenHalf + leftRevIncRevPaddedIntStrPaddedLen % 2, leftRevIncRevPaddedIntStrPaddedLen)\n            val leftRevIncRevPaddedIntStrPaddedRightRev = leftRevIncRevP",
    "        def isPalindrome(num : Long) : Boolean = {\n            val str = num.toString\n            str == str.reverse\n        }\n        var i = num\n        while (!isPalindrome(i)) i -= 1\n        i",
    "        def isPalindrome(num : Long) : Boolean = {\n            val str = num.toString\n            str == str.reverse\n        }\n        def nextSmallestPalindrome(num : Long, digits : Int) : Long = {\n            if (digits == 1) {\n                if (num == 9) return 11\n                else return num + 2\n            }\n            val div = pow(10, digits / 2).toLong\n            val left = num / div\n            val right = num % div\n            if (left == pow(10, digits / 2).toLong - 1) {\n                val newNum = (left - 1) * div + right\n                nextSmallestPalindrome(newNum, digits - 1)\n            } else {\n                val newNum = left * div + right\n                if (isPalindrome(newNum)) newNum\n                else {\n                    val newLeft = left + 1\n                    val newRight = pow(10, digits / 2).toLong - 1\n                    newLeft * div + newRight\n                }\n            }\n        }\n        val digits = num.toString.length\n        nextSmallestPalindrome(num, digits)",
    "        var n = num\n        while (true) {\n            n += 1\n            if (isPalindrome(n)) return n\n        }\n        return -1",
    "        var n = num\n        var digits = new ArrayBuffer[Int]()\n        while (n > 0) {\n            digits.append((n % 10).toInt)\n            n /= 10\n        }\n        var i = 0\n        while (i < digits.length / 2) {\n            if (digits(i) < digits(digits.length - 1 - i)) {\n                digits(digits.length - 1 - i) = digits(i)\n            }\n            else if (digits(i) > digits(digits.length - 1 - i)) {\n                digits(digits.length - 1 - i) = digits(i)\n                var j = digits.length - 2 - i\n                while (j >= 0 && digits(j) == 9) {\n                    digits(j) = 0\n                    j -= 1\n                }\n                if (j < 0) {\n                    digits.insert(0, 1)\n                }\n                else {\n                    digits(j) += 1\n                }\n            }\n            i += 1\n        }\n        var result = 0L\n        for (i <- 0 until digits.length) {\n            result = result * 10 + digits(i)\n        }\n        result",
    "        def isPalindrome(num : Long) : Boolean = {\n            val s = num.toString\n            s == s.reverse\n        }\n        def nextPalindrome(num : Long) : Long = {\n            val s = num.toString\n            val n = s.length\n            val half = n / 2\n            val left = s.substring(0, half)\n            val right = s.substring(half + n % 2)\n            val leftNum = left.toLong\n            val rightNum = right.toLong\n            val leftRev = left.reverse\n            val rightRev = right.reverse\n            val leftRevNum = leftRev.toLong\n            val rightRevNum = rightRev.toLong\n            if (leftNum < rightNum) {\n                val nextLeft = (leftNum + 1).toString\n                val nextLeftRev = nextLeft.reverse\n                val nextLeftRevNum = nextLeftRev.toLong\n                val nextRight = nextLeftRev.substring(0, right.length)\n                val nextRightNum = nextRight.toLong\n                if (nextLeftRevNum > rightRevNum) {\n                    nextLeft + nextRight\n                } else {\n                    nextLeft + nextRightRev\n                }\n            } else {\n                val nextLeft = left\n                val nextLeftRev = nextLeft.reverse\n                val nextLeftRevNum = nextLeftRev.toLong\n                val nextRight = nextLeftRev.substring(0, right.length)\n                val nextRightNum = nextRight.toLong\n                if (nextLeftRevNum > rightRevNum) {\n                    nextLeft + nextRight\n                } else {\n                    nextLeft + nextRightRev\n                }\n            }\n        }\n        def nextPalindrome(num : Long, n : Int) : Long = {\n            val s = num.toString\n            val half = n / 2\n            val left = s.substring(0, half)\n            val right = s.substring(half + n % 2)\n            val leftNum = left.toLong\n            val rightNum = right.toLong\n            val leftRev = left.reverse\n            val rightRev = right.reverse\n            val leftRevNum = leftRev.",
    "        val digits = num.toString.map(_.asDigit)\n        val len = digits.length\n        val half = len / 2\n        val left = digits.slice(0, half)\n        val right = digits.slice(half + len % 2, len)\n        val (left2, right2) = if (left.mkString.toLong < right.reverse.mkString.toLong) (left, left.reverse) else (left.reverse.map(_ + 1).dropWhile(_ == 10).map(_ % 10), left.reverse.map(_ + 1).dropWhile(_ == 10).map(_ % 10))\n        (left2 ++ (if (len % 2 == 1) digits(half) +: right2 else right2)).mkString.toLong",
    "        val digits = num.toString.toList.map(_.toString.toInt)\n        val half = digits.length / 2\n        val left = digits.take(half)\n        val right = digits.takeRight(half)\n        val leftRev = left.reverse\n        val leftRevStr = leftRev.mkString\n        val rightStr = right.mkString\n        if (leftRevStr < rightStr) {\n            val leftStr = left.mkString\n            val leftStrInt = leftStr.toInt\n            val leftStrIntPlusOne = (leftStrInt + 1).toString\n            val leftStrIntPlusOneStr = leftStrIntPlusOne.mkString\n            val leftStrIntPlusOneStrRev = leftStrIntPlusOneStr.reverse\n            val leftStrIntPlusOneStrRevStr = leftStrIntPlusOneStrRev.mkString\n            val leftStrIntPlusOneStrRevStrInt = leftStrIntPlusOneStrRevStr.toInt\n            val leftStrIntPlusOneStrRevStrIntStr = leftStrIntPlusOneStrRevStrInt.toString\n            val leftStrIntPlusOneStrRevStrIntStrStr = leftStrIntPlusOneStrRevStrIntStr.mkString\n            val leftStrIntPlusOneStrRevStrIntStrStrInt = leftStrIntPlusOneStrRevStrIntStrStr.toInt\n            leftStrIntPlusOneStrRevStrIntStrStrInt\n        } else {\n            val leftStr = left.mkString\n            val leftStrInt = leftStr.toInt\n            val leftStrIntStr = leftStrInt.toString\n            val leftStrIntStrStr = leftStrIntStr.mkString\n            val leftStrIntStrStrInt = leftStrIntStrStr.toInt\n            leftStrIntStrStrInt\n        }",
    "        val str = num.toString\n        val len = str.length\n        val half = len / 2\n        val left = str.substring(0, half)\n        val right = str.substring(half + len % 2, len)\n        val leftRev = left.reverse\n        if (leftRev == right) {\n            val leftInc = (left.toLong + 1).toString\n            val leftIncRev = leftInc.reverse\n            val leftIncLen = leftInc.length\n            val leftIncHalf = leftIncLen / 2\n            val leftIncLeft = leftInc.substring(0, leftIncHalf)\n            val leftIncRight = leftInc.substring(leftIncHalf + leftIncLen % 2, leftIncLen)\n            if (leftIncLeft == leftIncRight) leftInc.toLong\n            else leftIncLeft + leftIncRight.reverse\n        }\n        else left + leftRev",
    "        def isPalindrome(num : Long) : Boolean = {\n            val s = num.toString\n            s == s.reverse\n        }\n        def nextPalindrome(num : Long) : Long = {\n            if (isPalindrome(num)) num\n            else nextPalindrome(num + 1)\n        }\n        nextPalindrome(num + 1)",
    "        def isPalindrome(num : Long) : Boolean = {\n            val str = num.toString\n            str == str.reverse\n        }\n        var i = num - 1\n        while (i > 0) {\n            if (isPalindrome(i)) return i\n            i -= 1\n        }\n        -1",
    "        val str = num.toString\n        val len = str.length\n        val half = len / 2\n        val left = str.substring(0, half)\n        val right = str.substring(half + len % 2, len)\n        val leftRev = left.reverse\n        if (leftRev > right) {\n            val nextLeft = (left.toLong + 1).toString\n            val nextLeftRev = nextLeft.reverse\n            val nextLeftLen = nextLeft.length\n            val nextRight = if (nextLeftLen > half) nextLeftRev.substring(0, half) else nextLeftRev\n            val nextNum = nextLeft + nextRight\n            nextNum.toLong\n        } else {\n            val nextNum = left + leftRev\n            nextNum.toLong\n        }",
    "        var n = num\n        var digits = new ArrayBuffer[Int]()\n        while (n > 0) {\n            digits += (n % 10).toInt\n            n /= 10\n        }\n        var i = 0\n        while (i < digits.length / 2) {\n            if (digits(i) < digits(digits.length - 1 - i)) {\n                digits(digits.length - 1 - i) = digits(i)\n            }\n            else if (digits(i) > digits(digits.length - 1 - i)) {\n                digits(digits.length - 1 - i) = digits(i)\n                var j = digits.length - 2 - i\n                while (j >= 0 && digits(j) == 9) {\n                    digits(j) = 0\n                    j -= 1\n                }\n                if (j < 0) {\n                    digits.insert(0, 1)\n                }\n                else {\n                    digits(j) += 1\n                }\n            }\n            i += 1\n        }\n        var result = 0L\n        for (i <- 0 until digits.length) {\n            result = result * 10 + digits(i)\n        }\n        result",
    "        var n = num\n        var digits = new ArrayBuffer[Int]\n        while (n > 0) {\n            digits += (n % 10).toInt\n            n /= 10\n        }\n        var i = 0\n        var j = digits.length - 1\n        while (i < j) {\n            if (digits(i) != digits(j)) {\n                if (digits(i) < digits(j)) digits(i) = digits(j)\n                else digits(j) = digits(i)\n            }\n            i += 1\n            j -= 1\n        }\n        var result = 0L\n        for (i <- 0 until digits.length) result = result * 10 + digits(i)\n        result",
    "        var n = num\n        while (!isPalindrome(n)) n -= 1\n        n",
    "        var n = num\n        while (true) {\n            n += 1\n            if (isPalindrome(n)) return n\n        }\n        return -1",
    "        var n = num\n        var isPalindrome = false\n        while (!isPalindrome) {\n            n += 1\n            isPalindrome = isPalindrome(n)\n        }\n        n",
    "        var n = num\n        var i = 0\n        while (n > 0) {\n            i += 1\n            n /= 10\n        }\n        var j = 0\n        while (j < i / 2) {\n            if (num / pow(10, j).toLong % 10 != num / pow(10, i - j - 1).toLong % 10) return -1\n            j += 1\n        }\n        var result = num\n        var k = 0\n        while (k < i / 2) {\n            result += pow(10, k).toLong * (num / pow(10, i - k - 1).toLong % 10)\n            result += pow(10, i - k - 1).toLong * (num / pow(10, k).toLong % 10)\n            k += 1\n        }\n        if (i % 2 == 1) result += pow(10, i / 2).toLong * (num / pow(10, i / 2).toLong % 10)\n        result",
    "        def isPalindrome(num : Long) : Boolean = {\n            val str = num.toString\n            str == str.reverse\n        }\n        def nextSmallestPalindrome(num : Long, i : Int) : Long = {\n            if (i == 0) num\n            else {\n                val str = num.toString\n                val len = str.length\n                val half = len / 2\n                val left = str.substring(0, half)\n                val right = str.substring(half + len % 2, len)\n                val leftInt = left.toInt\n                val rightInt = right.toInt\n                if (leftInt < rightInt) {\n                    val leftStr = leftInt.toString\n                    val rightStr = leftStr.reverse\n                    val newStr = leftStr + rightStr\n                    if (len % 2 == 1) newStr + leftStr(half)\n                    else newStr\n                }\n                else {\n                    val leftStr = (leftInt + 1).toString\n                    val rightStr = leftStr.reverse\n                    val newStr = leftStr + rightStr\n                    if (len % 2 == 1) newStr + leftStr(half)\n                    else newStr\n                }\n            }\n        }\n        if (isPalindrome(num)) num\n        else nextSmallestPalindrome(num, 1)",
    "        var n = num\n        var isPalindrome = false\n        while (!isPalindrome) {\n            n += 1\n            isPalindrome = isPalindrome(n)\n        }\n        n",
    "        var n = num\n        var i = 0\n        while (n > 0) {\n            i += 1\n            n /= 10\n        }\n        var j = i / 2\n        var k = if (i % 2 == 0) j else j + 1\n        var l = pow(10, j).toLong\n        var m = pow(10, k).toLong\n        var n1 = num / m\n        var n2 = num % m\n        var n3 = n2 / l\n        var n4 = n2 % l\n        var n5 = n4 / 10\n        var n6 = n4 % 10\n        var n7 = n3 / 10\n        var n8 = n3 % 10\n        var n9 = n1 / 10\n        var n10 = n1 % 10\n        var n11 = n10 / 10\n        var n12 = n10 % 10\n        var n13 = n9 / 10\n        var n14 = n9 % 10\n        var n15 = n13 / 10\n        var n16 = n13 % 10\n        var n17 = n15 / 10\n        var n18 = n15 % 10\n        var n19 = n17 / 10\n        var n20 = n17 % 10\n        var n21 = n19 / 10\n        var n22 = n19 % 10\n        var n23 = n21 / 10\n        var n24 = n21 % 10\n        var n25 = n23 / 10\n        var n26 = n23 % 10\n        var n27 = n25 / 10\n        var n28 = n25 % 10\n        var n29 = n27 / 10\n        var n30 = n27 % 10\n        var n31 = n29 / 10\n        var n32 = n29 % 10\n        var n33 = n31 / 10\n        var n34 = n31 % 10\n        var n35 = n33 / 10\n        var n36 = n33 % 10\n        var n37 = n35 / 10\n        var n38 = n35 % 10\n        var n39 = n37 / 10\n        var n40 = n37 % 10\n        var n41 = n39 / 10\n        var n42 = n39 % 10\n        var n43 = n",
    "        val str = num.toString\n        val len = str.length\n        val half = len / 2\n        val left = str.substring(0, half)\n        val right = str.substring(half + len % 2, len)\n        val leftRev = left.reverse\n        if (leftRev > right) {\n            val newLeft = (left.toLong + 1).toString\n            val newLeftRev = newLeft.reverse\n            val newRight = if (newLeftRev.length > right.length) newLeftRev.substring(0, right.length) else newLeftRev\n            (newLeft + newRight).toLong\n        } else {\n            val newLeft = left\n            val newLeftRev = newLeft.reverse\n            val newRight = if (newLeftRev.length > right.length) newLeftRev.substring(0, right.length) else newLeftRev\n            (newLeft + newRight).toLong\n        }",
    "        def isPalindrome(num : Long) : Boolean = {\n            val str = num.toString\n            str == str.reverse\n        }\n        def nextPalindrome(num : Long) : Long = {\n            if (isPalindrome(num)) num\n            else nextPalindrome(num - 1)\n        }\n        nextPalindrome(num - 1)",
    "        val str = num.toString\n        val len = str.length\n        val mid = len / 2\n        val left = str.substring(0, mid)\n        val right = str.substring(mid + len % 2, len)\n        val leftRev = left.reverse\n        if (right < leftRev) {\n            val newLeft = (left.toLong + 1).toString\n            val newRight = newLeft.reverse\n            val newLen = newLeft.length\n            val newMid = newLen / 2\n            val newLeft1 = newLeft.substring(0, newMid)\n            val newRight1 = newLeft.substring(newMid + newLen % 2, newLen)\n            (newLeft1 + newRight1).toLong\n        } else {\n            (left + leftRev).toLong\n        }",
    "        if (num < 0) return -1\n        if (num < 10) return num\n        var digits = num.toString.map(_.toString.toInt).toList\n        var i = digits.length / 2 - 1\n        var j = if (digits.length % 2 == 0) i + 1 else i + 2\n        while (i >= 0 && digits(i) == digits(j)) {\n            i -= 1\n            j += 1\n        }\n        if (i < 0 || digits(i) < digits(j)) {\n            i = digits.length / 2 - 1\n            var carry = 1\n            if (digits.length % 2 == 1) {\n                digits(i + 1) += 1\n                carry = digits(i + 1) / 10\n                digits(i + 1) %= 10\n            }\n            while (i >= 0) {\n                digits(i) += carry\n                carry = digits(i) / 10\n                digits(i) %= 10\n                digits(j) = digits(i)\n                i -= 1\n                j += 1\n            }\n        }\n        else {\n            while (i >= 0) {\n                digits(j) = digits(i)\n                i -= 1\n                j += 1\n            }\n        }\n        digits.mkString.toLong",
    "        def isPalindrome(num : Long) : Boolean = {\n            val str = num.toString\n            str == str.reverse\n        }\n        var n = num\n        while (!isPalindrome(n)) n -= 1\n        n",
    "        var n = num\n        var digits = new ArrayBuffer[Int]()\n        while (n > 0) {\n            digits += (n % 10).toInt\n            n /= 10\n        }\n        var i = 0\n        while (i < digits.length / 2) {\n            if (digits(i) != digits(digits.length - 1 - i)) {\n                if (digits(i) > digits(digits.length - 1 - i)) digits(digits.length - 1 - i) = digits(i)\n                else digits(i) = digits(digits.length - 1 - i)\n            }\n            i += 1\n        }\n        var result = 0L\n        for (i <- 0 until digits.length) result = result * 10 + digits(i)\n        result",
    "        val s = num.toString\n        val n = s.length\n        val half = n / 2\n        val left = s.substring(0, half)\n        val right = s.substring(n - half, n)\n        val leftNum = left.toLong\n        val rightNum = right.toLong\n        if (leftNum == rightNum) {\n            val nextLeft = (leftNum + 1).toString\n            val nextRight = nextLeft.substring(0, half)\n            val nextLeftNum = nextLeft.toLong\n            val nextRightNum = nextRight.toLong\n            if (nextLeftNum == nextRightNum) {\n                val nextNextLeft = (nextLeftNum + 1).toString\n                val nextNextRight = nextNextLeft.substring(0, half)\n                val nextNextLeftNum = nextNextLeft.toLong\n                val nextNextRightNum = nextNextRight.toLong\n                if (nextNextLeftNum == nextNextRightNum) {\n                    val nextNextNextLeft = (nextNextLeftNum + 1).toString\n                    val nextNextNextRight = nextNextNextLeft.substring(0, half)\n                    val nextNextNextLeftNum = nextNextNextLeft.toLong\n                    val nextNextNextRightNum = nextNextNextRight.toLong\n                    if (nextNextNextLeftNum == nextNextNextRightNum) {\n                        val nextNextNextNextLeft = (nextNextNextLeftNum + 1).toString\n                        val nextNextNextNextRight = nextNextNextNextLeft.substring(0, half)\n                        val nextNextNextNextLeftNum = nextNextNextNextLeft.toLong\n                        val nextNextNextNextRightNum = nextNextNextNextRight.toLong\n                        if (nextNextNextNextLeftNum == nextNextNextNextRightNum) {\n                            val nextNextNextNextNextLeft = (nextNextNextNextLeftNum + 1).toString\n                            val nextNextNextNextNextRight = nextNextNextNextNextLeft.substring(0, half)\n                            val nextNextNextNextNextLeftNum = nextNextNextNextNextLeft.toLong\n                            val nextNextNextNextNextRightNum = nextNextNextNextNextRight.toLong\n                            if (nextNextNext",
    "        var n = num\n        while (true) {\n            n += 1\n            if (isPalindrome(n)) return n\n        }\n        return -1",
    "        def isPalindrome(num : Long) : Boolean = {\n            var n = num\n            var rev = 0L\n            while (n > 0) {\n                rev = rev * 10 + n % 10\n                n /= 10\n            }\n            rev == num\n        }\n        var n = num\n        while (!isPalindrome(n)) n -= 1\n        n",
    "        val s = num.toString\n        val n = s.length\n        val half = n / 2\n        val (left, right) = s.splitAt(half)\n        val leftRev = left.reverse\n        val leftNum = left.toLong\n        val leftRevNum = leftRev.toLong\n        if (leftNum == leftRevNum) {\n            val leftNumPlusOne = leftNum + 1\n            val leftNumPlusOneStr = leftNumPlusOne.toString\n            val leftNumPlusOneStrRev = leftNumPlusOneStr.reverse\n            val leftNumPlusOneStrRevNum = leftNumPlusOneStrRev.toLong\n            if (leftNumPlusOneStr.length > left.length) {\n                val leftNumPlusOneStrRevNumStr = leftNumPlusOneStrRevNum.toString\n                val leftNumPlusOneStrRevNumStrRev = leftNumPlusOneStrRevNumStr.reverse\n                val leftNumPlusOneStrRevNumStrRevNum = leftNumPlusOneStrRevNumStrRev.toLong\n                if (leftNumPlusOneStrRevNumStrRevNum > num) leftNumPlusOneStrRevNumStrRevNum else {\n                    val leftNumPlusOneStrRevNumStrRevNumStr = leftNumPlusOneStrRevNumStrRevNum.toString\n                    val leftNumPlusOneStrRevNumStrRevNumStrRev = leftNumPlusOneStrRevNumStrRevNumStr.reverse\n                    val leftNumPlusOneStrRevNumStrRevNumStrRevNum = leftNumPlusOneStrRevNumStrRevNumStrRev.toLong\n                    leftNumPlusOneStrRevNumStrRevNumStrRevNum\n                }\n            } else {\n                val leftNumPlusOneStrRevNumStr = leftNumPlusOneStrRevNum.toString\n                val leftNumPlusOneStrRevNumStrRev = leftNumPlusOneStrRevNumStr.reverse\n                val leftNumPlusOneStrRevNumStrRevNum = leftNumPlusOneStrRevNumStrRev.toLong\n                if (leftNumPlusOneStrRevNumStrRevNum > num) leftNumPlusOneStrRevNumStrRevNum else {\n                    val leftNumPlusOneStrRevNumStrRevNumStr = leftNumPlusOneStrRevNumStrRevNum.toString\n                    val leftNumPlus",
    "        var n = num\n        var digits = new ArrayBuffer[Int]()\n        while (n > 0) {\n            digits += (n % 10).toInt\n            n /= 10\n        }\n        var i = 0\n        while (i < digits.length / 2) {\n            if (digits(i) < digits(digits.length - 1 - i)) {\n                digits(digits.length - 1 - i) = digits(i)\n            }\n            else if (digits(i) > digits(digits.length - 1 - i)) {\n                digits(digits.length - 1 - i) = digits(i)\n                var j = digits.length - 2 - i\n                while (j >= 0 && digits(j) == 9) {\n                    digits(j) = 0\n                    j -= 1\n                }\n                if (j < 0) {\n                    digits.insert(0, 1)\n                }\n                else {\n                    digits(j) += 1\n                }\n            }\n            i += 1\n        }\n        var result = 0L\n        for (i <- 0 until digits.length) {\n            result = result * 10 + digits(i)\n        }\n        result",
    "        def isPalindrome(num : Long) : Boolean = {\n            val str = num.toString\n            for (i <- 0 until str.length / 2) {\n                if (str(i) != str(str.length - 1 - i)) return false\n            }\n            return true\n        }\n        var i = num\n        while (true) {\n            i += 1\n            if (isPalindrome(i)) return i\n        }\n        return -1",
    "        val str = num.toString\n        val len = str.length\n        val half = len / 2\n        val (left, right) = str.splitAt(half)\n        val leftRev = left.reverse\n        val leftNum = left.toLong\n        val leftRevNum = leftRev.toLong\n        val rightNum = right.toLong\n        if (leftNum == leftRevNum) {\n            val nextLeft = (leftNum + 1).toString\n            val nextLeftRev = nextLeft.reverse\n            val nextLeftNum = nextLeft.toLong\n            val nextLeftRevNum = nextLeftRev.toLong\n            if (nextLeftNum == nextLeftRevNum) {\n                val nextRight = (rightNum + 1).toString\n                val nextRightNum = nextRight.toLong\n                val nextRightRev = nextRight.reverse\n                val nextRightRevNum = nextRightRev.toLong\n                if (nextRightNum == nextRightRevNum) {\n                    val nextNum = nextLeftNum + nextRightNum\n                    nextNum\n                } else {\n                    val nextNum = nextLeftNum + nextRightRevNum\n                    nextNum\n                }\n            } else {\n                val nextNum = nextLeftNum + nextLeftRevNum\n                nextNum\n            }\n        } else {\n            val nextNum = leftNum + leftRevNum\n            nextNum\n        }",
    "        def isPalindrome(num : Long) : Boolean = {\n            val str = num.toString\n            str == str.reverse\n        }\n        def nextPalindrome(num : Long) : Long = {\n            if (isPalindrome(num)) num\n            else nextPalindrome(num + 1)\n        }\n        nextPalindrome(num + 1)",
    "        var n = num\n        while (true) {\n            n += 1\n            if (isPalindrome(n)) return n\n        }\n        return -1",
    "        def isPalindrome(num : Long) : Boolean = {\n            val str = num.toString\n            str == str.reverse\n        }\n        var i = num\n        while (!isPalindrome(i)) i -= 1\n        i",
    "        var n = num\n        var digits = new ArrayBuffer[Int]()\n        while (n > 0) {\n            digits += (n % 10).toInt\n            n /= 10\n        }\n        var i = 0\n        while (i < digits.length / 2) {\n            if (digits(i) < digits(digits.length - 1 - i)) {\n                var j = digits.length - 1 - i\n                while (j > 0 && digits(j) == 0) {\n                    digits(j) = 9\n                    j -= 1\n                }\n                digits(j) -= 1\n                var k = j + 1\n                while (k < digits.length - 1 - j) {\n                    digits(k) = 9\n                    k += 1\n                }\n            }\n            digits(digits.length - 1 - i) = digits(i)\n            i += 1\n        }\n        var result = 0L\n        for (i <- 0 until digits.length) {\n            result = result * 10 + digits(i)\n        }\n        result",
    "        def isPalindrome(num : Long) : Boolean = {\n            val s = num.toString\n            s == s.reverse\n        }\n        def nextPalindrome(num : Long) : Long = {\n            if (isPalindrome(num)) num\n            else nextPalindrome(num - 1)\n        }\n        nextPalindrome(num - 1)",
    "        val digits = num.toString.toList.map(_.asDigit)\n        val n = digits.length\n        val half = n / 2\n        val left = digits.slice(0, half)\n        val right = digits.slice(half + n % 2, n)\n        val leftRev = left.reverse\n        val leftRevStr = leftRev.mkString\n        val leftStr = left.mkString\n        val rightStr = right.mkString\n        val leftRevNum = leftRevStr.toLong\n        val leftNum = leftStr.toLong\n        val rightNum = rightStr.toLong\n        if (leftRevNum >= rightNum) {\n            val newLeft = (leftNum + 1).toString.toList.map(_.asDigit)\n            val newLeftStr = newLeft.mkString\n            val newLeftRevStr = newLeft.reverse.mkString\n            val newLeftNum = newLeftStr.toLong\n            val newLeftRevNum = newLeftRevStr.toLong\n            val newNum = newLeftNum * pow(10, half).toLong + newLeftRevNum * pow(10, half + n % 2).toLong\n            newNum\n        } else {\n            val newNum = leftNum * pow(10, half).toLong + leftRevNum * pow(10, half + n % 2).toLong\n            newNum\n        }",
    "        def isPalindrome(num : Long) : Boolean = {\n            val str = num.toString\n            str == str.reverse\n        }\n        def nextPalindrome(num : Long) : Long = {\n            var n = num + 1\n            while (!isPalindrome(n)) n += 1\n            n\n        }\n        nextPalindrome(num)",
    "        def isPalindrome(num : Long) : Boolean = {\n            val str = num.toString\n            str == str.reverse\n        }\n        def nextPalindrome(num : Long) : Long = {\n            if (isPalindrome(num)) num\n            else nextPalindrome(num + 1)\n        }\n        nextPalindrome(num + 1)",
    "        val s = num.toString\n        val half = s.length / 2\n        val left = s.substring(0, half)\n        val right = s.substring(half + s.length % 2)\n        val nextLeft = (left.toLong + 1).toString\n        val nextRight = nextLeft.reverse\n        val nextPalindrome = nextLeft + nextRight\n        nextPalindrome.toLong",
    "        var n = num.toString\n        var i = 0\n        while (i < n.length / 2 && n(i) == n(n.length - 1 - i)) i += 1\n        if (i == n.length / 2) {\n            if (n.length % 2 == 0) {\n                if (n(i - 1) == '9') {\n                    var j = i - 2\n                    while (j >= 0 && n(j) == '9') {\n                        n = n.substring(0, j) + \"0\" + n.substring(j + 1)\n                        j -= 1\n                    }\n                    if (j == -1) n = \"1\" + n\n                    else n = n.substring(0, j) + ((n(j).asDigit + 1).toString) + n.substring(j + 1)\n                } else n = n.substring(0, i - 1) + ((n(i - 1).asDigit + 1).toString) + n.substring(i)\n            } else {\n                if (n(i) == '9') {\n                    var j = i - 1\n                    while (j >= 0 && n(j) == '9') {\n                        n = n.substring(0, j) + \"0\" + n.substring(j + 1)\n                        j -= 1\n                    }\n                    if (j == -1) n = \"1\" + n\n                    else n = n.substring(0, j) + ((n(j).asDigit + 1).toString) + n.substring(j + 1)\n                } else n = n.substring(0, i) + ((n(i).asDigit + 1).toString) + n.substring(i + 1)\n            }\n        } else {\n            if (n.length % 2 == 0) {\n                if (n(i) > n(n.length - 1 - i)) n = n.substring(0, n.length - 1 - i) + n(i) + n.substring(i + 1)\n                else n = n.substring(0, i) + n(n.length - 1 - i",
    "        def isPalindrome(num : Long) : Boolean = {\n            val str = num.toString\n            str == str.reverse\n        }\n        def nextSmallestPalindrome(num : Long, i : Int) : Long = {\n            if (i == 0) num\n            else {\n                val str = num.toString\n                val newStr = str.substring(0, i) + str.substring(i + 1)\n                val newNum = newStr.toLong\n                if (isPalindrome(newNum)) newNum\n                else nextSmallestPalindrome(newNum, i - 1)\n            }\n        }\n        if (isPalindrome(num)) num\n        else nextSmallestPalindrome(num, num.toString.length - 1)",
    "        var n = num\n        var i = 0\n        while (n > 0) {\n            i += 1\n            n /= 10\n        }\n        var j = i / 2\n        var k = i - j\n        var l = 0\n        var m = 0\n        var n1 = num\n        var n2 = num\n        var n3 = num\n        var n4 = num\n        var n5 = num\n        var n6 = num\n        var n7 = num\n        var n8 = num\n        var n9 = num\n        var n10 = num\n        var n11 = num\n        var n12 = num\n        var n13 = num\n        var n14 = num\n        var n15 = num\n        var n16 = num\n        var n17 = num\n        var n18 = num\n        var n19 = num\n        var n20 = num\n        var n21 = num\n        var n22 = num\n        var n23 = num\n        var n24 = num\n        var n25 = num\n        var n26 = num\n        var n27 = num\n        var n28 = num\n        var n29 = num\n        var n30 = num\n        var n31 = num\n        var n32 = num\n        var n33 = num\n        var n34 = num\n        var n35 = num\n        var n36 = num\n        var n37 = num\n        var n38 = num\n        var n39 = num\n        var n40 = num\n        var n41 = num\n        var n42 = num\n        var n43 = num\n        var n44 = num\n        var n45 = num\n        var n46 = num\n        var n47 = num\n        var n48 = num\n        var n49 = num\n        var n50 = num\n        var n51 = num\n        var n52 = num\n        var n53 = num\n        var n54 = num\n        var n55 = num\n        var n56 = num\n        var n57 = num\n        var n58 = num\n        var n59 = num\n        var n60 = num\n        var n61 = num\n        var n62 = num\n        var n63 = num\n        var n64 = num\n",
    "        var n = num\n        while(true) {\n            n += 1\n            if(isPalindrome(n)) return n\n        }\n        return -1",
    "        val s = num.toString\n        val n = s.length\n        val half = n / 2\n        val left = s.substring(0, half)\n        val right = s.substring(half + (if (n % 2 == 0) 0 else 1), n)\n        val leftRev = left.reverse\n        val leftInt = left.toInt\n        val leftRevInt = leftRev.toInt\n        val rightInt = right.toInt\n        val leftRevIntPlusOne = (leftRevInt + 1).toString\n        val leftRevIntPlusOneLength = leftRevIntPlusOne.length\n        val leftRevIntPlusOneRev = leftRevIntPlusOne.reverse\n        val leftRevIntPlusOneRevLength = leftRevIntPlusOneRev.length\n        val leftRevIntPlusOneRevInt = leftRevIntPlusOneRev.toInt\n        if (leftRevIntPlusOneRevLength > leftRevIntPlusOneLength) {\n            val leftRevIntPlusOneRevInt = leftRevIntPlusOneRev.toInt\n            val leftRevIntPlusOneRevIntStr = leftRevIntPlusOneRevInt.toString\n            val leftRevIntPlusOneRevIntStrLength = leftRevIntPlusOneRevIntStr.length\n            val leftRevIntPlusOneRevIntStrRev = leftRevIntPlusOneRevIntStr.reverse\n            val leftRevIntPlusOneRevIntStrRevInt = leftRevIntPlusOneRevIntStrRev.toInt\n            val leftRevIntPlusOneRevIntStrRevIntStr = leftRevIntPlusOneRevIntStrRevInt.toString\n            val leftRevIntPlusOneRevIntStrRevIntStrLength = leftRevIntPlusOneRevIntStrRevIntStr.length\n            val leftRevIntPlusOneRevIntStrRevIntStrRev = leftRevIntPlusOneRevIntStrRevIntStr.reverse\n            val leftRevIntPlusOneRevIntStrRevIntStrRevInt = leftRevIntPlusOneRevIntStrRevIntStrRev.toInt\n            val leftRevIntPlusOneRevIntStrRevIntStrRevIntStr = leftRevIntPlusOneRevIntStrRevIntStrRevInt.toString\n            val leftRevIntPlusOneRevIntStrRevIntStrRevIntStrLength = leftRevIntPlusOneRevIntStrRev",
    "        var n = num\n        while (true) {\n            n += 1\n            if (isPalindrome(n)) return n\n        }\n        return -1",
    "        def isPalindrome(num : Long) : Boolean = {\n            val str = num.toString\n            str == str.reverse\n        }\n        var n = num\n        while (!isPalindrome(n)) n -= 1\n        n",
    "        var n = num\n        var i = 0\n        while(n > 0) {\n            i += 1\n            n /= 10\n        }\n        var j = 0\n        var k = i - 1\n        var a = Array.fill[Int](i)(0)\n        n = num\n        while(n > 0) {\n            a(k) = (n % 10).toInt\n            n /= 10\n            j += 1\n            k -= 1\n        }\n        var l = 0\n        var r = i - 1\n        while(l <= r) {\n            if (a(l) < a(r)) {\n                a(r) = a(l)\n                l += 1\n                r -= 1\n            }\n            else if (a(l) > a(r)) {\n                a(r) = a(l)\n                var carry = 1\n                var p = r - 1\n                while(p >= 0 && carry > 0) {\n                    a(p) += carry\n                    carry = a(p) / 10\n                    a(p) %= 10\n                    p -= 1\n                }\n                l += 1\n                r -= 1\n            }\n            else {\n                l += 1\n                r -= 1\n            }\n        }\n        var result = 0L\n        for (i <- 0 until a.length) {\n            result = result * 10 + a(i)\n        }\n        result",
    "        val s = num.toString\n        val len = s.length\n        val half = len / 2\n        val left = s.substring(0, half)\n        val right = s.substring(half + len % 2, len)\n        val leftRev = left.reverse\n        if (leftRev > right) {\n            val newLeft = (left.toLong + 1).toString\n            val newRight = newLeft.reverse\n            val newLeftLen = newLeft.length\n            val newRightLen = newRight.length\n            val newHalf = newLeftLen + newRightLen\n            val newLeftPad = \"0\" * (half - newLeftLen)\n            val newRightPad = \"0\" * (half - newRightLen)\n            (newLeftPad + newLeft + newRightPad + newRight).toLong\n        } else {\n            val newLeft = left\n            val newRight = newLeft.reverse\n            val newLeftLen = newLeft.length\n            val newRightLen = newRight.length\n            val newHalf = newLeftLen + newRightLen\n            val newLeftPad = \"0\" * (half - newLeftLen)\n            val newRightPad = \"0\" * (half - newRightLen)\n            (newLeftPad + newLeft + newRightPad + newRight).toLong\n        }",
    "        val digits = num.toString.toList.map(_.asDigit)\n        val (left, right) = digits.splitAt(digits.length / 2)\n        val leftReverse = left.reverse\n        val nextPalindrome = if (left == leftReverse) {\n            val nextLeft = (left.reverse.mkString.toLong + 1).toString.toList.map(_.asDigit)\n            val nextRight = if (digits.length % 2 == 0) nextLeft else nextLeft.tail\n            nextLeft ++ nextRight.reverse\n        } else {\n            val nextLeft = (left.reverse.mkString.toLong + 1).toString.toList.map(_.asDigit)\n            val nextRight = if (digits.length % 2 == 0) nextLeft else nextLeft.tail\n            nextLeft ++ nextRight.reverse\n        }\n        nextPalindrome.mkString.toLong",
    "        def isPalindrome(num : Long) : Boolean = {\n            val str = num.toString\n            str == str.reverse\n        }\n        def nextPalindrome(num : Long) : Long = {\n            if (isPalindrome(num)) num\n            else nextPalindrome(num + 1)\n        }\n        nextPalindrome(num + 1)",
    "        val s = num.toString\n        val n = s.length\n        val half = n / 2\n        val left = s.substring(0, half)\n        val right = s.substring(half + n % 2, n)\n        val leftRev = left.reverse\n        if (left == leftRev && right == leftRev) {\n            val leftInc = (BigInt(left) + 1).toString\n            val leftIncRev = leftInc.reverse\n            val leftIncRevLen = leftIncRev.length\n            val leftIncLen = leftInc.length\n            val leftIncRevPadded = leftIncRev.padTo(half, '0')\n            val leftIncPadded = leftInc.padTo(half + n % 2, '0')\n            val leftIncRevPaddedStr = leftIncRevPadded.substring(leftIncRevLen - half, leftIncRevLen)\n            val leftIncPaddedStr = leftIncPadded.substring(leftIncLen - half - n % 2, leftIncLen - n % 2)\n            val result = leftIncRevPaddedStr + leftIncPaddedStr\n            result.toLong\n        } else {\n            val leftRevStr = leftRev.substring(0, half)\n            val leftStr = left.substring(0, half)\n            val leftRevStrLen = leftRevStr.length\n            val leftStrLen = leftStr.length\n            val leftRevPadded = leftRevStr.padTo(half, '0')\n            val leftPadded = leftStr.padTo(half + n % 2, '0')\n            val leftRevPaddedStr = leftRevPadded.substring(leftRevStrLen - half, leftRevStrLen)\n            val leftPaddedStr = leftPadded.substring(leftStrLen - half - n % 2, leftStrLen - n % 2)\n            val result = leftRevPaddedStr + leftPaddedStr\n            result.toLong\n        }",
    "        val s = num.toString\n        val n = s.length\n        val half = n / 2\n        val left = s.substring(0, half)\n        val right = s.substring(half + (if (n % 2 == 0) 0 else 1), n)\n        val leftReverse = left.reverse\n        if (leftReverse > right) {\n            val leftNum = left.toLong\n            val leftNumPlusOne = leftNum + 1\n            val leftNumPlusOneStr = leftNumPlusOne.toString\n            val leftNumPlusOneStrReverse = leftNumPlusOneStr.reverse\n            val leftNumPlusOneStrReverseLen = leftNumPlusOneStrReverse.length\n            val leftNumPlusOneStrReverseLenDiff = leftNumPlusOneStr.length - leftNumPlusOneStrReverseLen\n            val leftNumPlusOneStrReversePadded = \"0\" * leftNumPlusOneStrReverseLenDiff + leftNumPlusOneStrReverse\n            val leftNumPlusOneStrReversePaddedLen = leftNumPlusOneStrReversePadded.length\n            val leftNumPlusOneStrReversePaddedLenHalf = leftNumPlusOneStrReversePaddedLen / 2\n            val leftNumPlusOneStrReversePaddedLeft = leftNumPlusOneStrReversePadded.substring(0, leftNumPlusOneStrReversePaddedLenHalf)\n            val leftNumPlusOneStrReversePaddedRight = leftNumPlusOneStrReversePadded.substring(leftNumPlusOneStrReversePaddedLenHalf, leftNumPlusOneStrReversePaddedLen)\n            val leftNumPlusOneStrReversePaddedRightLen = leftNumPlusOneStrReversePaddedRight.length\n            val leftNumPlusOneStrReversePaddedRightLenDiff = leftNumPlusOneStrReversePaddedLeft.length - leftNumPlusOneStrReversePaddedRightLen\n            val leftNumPlusOneStrReversePaddedRightPadded = \"0\" * leftNumPlusOneStrReversePaddedRightLenDiff + leftNumPlusOneStrReversePaddedRight\n            val",
    "        def isPalindrome(num : Long) : Boolean = {\n            val str = num.toString\n            str == str.reverse\n        }\n        def nextPalindrome(num : Long) : Long = {\n            var n = num + 1\n            while (!isPalindrome(n)) n += 1\n            n\n        }\n        nextPalindrome(num)",
    "        def isPalindrome(num : Long) : Boolean = {\n            val str = num.toString\n            str == str.reverse\n        }\n        def nextPalindrome(num : Long) : Long = {\n            if (isPalindrome(num)) num\n            else nextPalindrome(num + 1)\n        }\n        nextPalindrome(num + 1)",
    "        var i = num + 1\n        while(!isPalindrome(i)) i += 1\n        return i",
    "        def isPalindrome(num : Long) : Boolean = {\n            val str = num.toString\n            str == str.reverse\n        }\n        var i = num - 1\n        while (i > 0) {\n            if (isPalindrome(i)) return i\n            i -= 1\n        }\n        -1",
    "        var n = num\n        var length = n.toString.length\n        var isOdd = length % 2 == 1\n        var halfLength = length / 2\n        var half = n / pow(10, halfLength).toLong\n        var halfReverse = half.toString.reverse.toLong\n        var halfReversePadded = halfReverse * pow(10, halfLength).toLong\n        if (isOdd) halfReversePadded += halfReverse / 10 * pow(10, halfLength + 1).toLong\n        if (halfReversePadded >= n) return halfReversePadded\n        var halfPlusOne = half + 1\n        var halfPlusOneReverse = halfPlusOne.toString.reverse.toLong\n        var halfPlusOneReversePadded = halfPlusOneReverse * pow(10, halfLength).toLong\n        if (isOdd) halfPlusOneReversePadded += halfPlusOneReverse / 10 * pow(10, halfLength + 1).toLong\n        halfPlusOneReversePadded",
    "        var n = num\n        var digits = new ArrayBuffer[Int]()\n        while (n > 0) {\n            digits += (n % 10).toInt\n            n /= 10\n        }\n        var i = 0\n        while (i < digits.length / 2) {\n            if (digits(i) < digits(digits.length - 1 - i)) {\n                digits(digits.length - 1 - i) = digits(i)\n            } else if (digits(i) > digits(digits.length - 1 - i)) {\n                digits(digits.length - 1 - i) = digits(i)\n                var j = digits.length - 2 - i\n                while (j >= 0 && digits(j) == 9) {\n                    digits(j) = 0\n                    j -= 1\n                }\n                if (j < 0) {\n                    digits.insert(0, 1)\n                } else {\n                    digits(j) += 1\n                }\n            }\n            i += 1\n        }\n        var result = 0L\n        for (i <- 0 until digits.length) {\n            result = result * 10 + digits(i)\n        }\n        result",
    "        val str = num.toString\n        val len = str.length\n        val mid = len / 2\n        val left = str.substring(0, mid)\n        val right = str.substring(mid + len % 2, len)\n        val leftRev = left.reverse\n        if (leftRev == right) {\n            val leftNum = left.toLong\n            val leftNumPlusOne = leftNum + 1\n            val leftNumPlusOneStr = leftNumPlusOne.toString\n            val leftNumPlusOneStrRev = leftNumPlusOneStr.reverse\n            val leftNumPlusOneStrLen = leftNumPlusOneStr.length\n            val leftNumPlusOneStrRevLen = leftNumPlusOneStrRev.length\n            val leftNumPlusOneStrRevLenDiff = leftNumPlusOneStrLen - leftNumPlusOneStrRevLen\n            val leftNumPlusOneStrRevLenDiffAbs = abs(leftNumPlusOneStrRevLenDiff)\n            val leftNumPlusOneStrRevLenDiffAbsStr = leftNumPlusOneStrRevLenDiffAbs.toString\n            val leftNumPlusOneStrRevLenDiffAbsStrRev = leftNumPlusOneStrRevLenDiffAbsStr.reverse\n            val leftNumPlusOneStrRevLenDiffAbsStrRevLen = leftNumPlusOneStrRevLenDiffAbsStrRev.length\n            val leftNumPlusOneStrRevLenDiffAbsStrRevLenDiff = leftNumPlusOneStrRevLenDiffAbsStrRevLen - leftNumPlusOneStrRevLenDiffAbsStrRevLen\n            val leftNumPlusOneStrRevLenDiffAbsStrRevLenDiffAbs = abs(leftNumPlusOneStrRevLenDiffAbsStrRevLenDiff)\n            val leftNumPlusOneStrRevLenDiffAbsStrRevLenDiffAbsStr = leftNumPlusOneStrRevLenDiffAbsStrRevLenDiffAbs.toString\n            val leftNumPlusOneStrRevLenDiffAbsStrRevLenDiffAbsStrRev = leftNumPlusOneStrRevLenDiffAbsStrRevLenDiffAbsStr.reverse\n            val leftNumPlusOneStrRevLenDiffAbsStrRevLenDiffAbsStrRevLen = leftNumPlusOneStrRevLenDiffAbsStrRevLenDiffAbsStrRev.length\n            val leftNumPlusOneStrRevLenDiffAbsStrRevLenDiffAbsStrRevLenDiff = leftNumPlus",
    "        var n = num\n        var d = 1\n        while (n / d >= 10) d *= 10\n        while (true) {\n            var m = n / d\n            var r = n % d\n            if (m == 9) {\n                n = n + 2 * d\n                d *= 10\n            } else {\n                n = n + d\n                if (n / d == m) return n\n                n = n - 2 * d\n                d *= 10\n            }\n        }\n        return -1",
    "        val str = num.toString\n        val len = str.length\n        val half = len / 2\n        val left = str.substring(0, half)\n        val right = str.substring(half + len % 2, len)\n        val leftRev = left.reverse\n        if (leftRev > right) {\n            val leftInc = (left.toLong + 1).toString\n            val leftIncRev = leftInc.reverse\n            val leftIncRevLen = leftIncRev.length\n            val leftIncRevHalf = leftIncRevLen / 2\n            val leftIncRevLeft = leftIncRev.substring(0, leftIncRevHalf)\n            val leftIncRevRight = leftIncRev.substring(leftIncRevHalf + leftIncRevLen % 2, leftIncRevLen)\n            if (leftIncRevLeft == leftIncRevRight) {\n                leftInc.toLong * pow(10, len - leftInc.length).toLong + leftIncRevLeft.toLong\n            } else {\n                leftInc.toLong * pow(10, len - leftInc.length).toLong + leftIncRevLeft.toLong * pow(10, len - leftIncRevLeft.length - leftIncRevRight.length).toLong + leftIncRevRight.toLong\n            }\n        } else {\n            val leftRevLen = leftRev.length\n            val leftRevHalf = leftRevLen / 2\n            val leftRevLeft = leftRev.substring(0, leftRevHalf)\n            val leftRevRight = leftRev.substring(leftRevHalf + leftRevLen % 2, leftRevLen)\n            if (leftRevLeft == leftRevRight) {\n                leftRev.toLong * pow(10, len - leftRev.length).toLong + leftRevLeft.toLong\n            } else {\n                leftRev.toLong * pow(10, len - leftRev.length).toLong + leftRevLeft.toLong * pow(10, len - leftRevLeft.length - leftRevRight.length).toLong + leftRevRight.toLong\n            }\n        }",
    "        def isPalindrome(num : Long) : Boolean = {\n            val s = num.toString\n            s == s.reverse\n        }\n        def nextPalindrome(num : Long) : Long = {\n            val s = num.toString\n            val n = s.length\n            val mid = n / 2\n            val left = s.substring(0, mid)\n            val right = s.substring(mid + (if (n % 2 == 0) 0 else 1))\n            val leftRev = left.reverse\n            val leftNum = left.toLong\n            val leftRevNum = leftRev.toLong\n            val rightNum = right.toLong\n            if (leftNum < leftRevNum) {\n                val newLeft = (leftNum + 1).toString\n                val newLeftRev = newLeft.reverse\n                val newLeftRevNum = newLeftRev.toLong\n                val newRight = if (newLeftRevNum > rightNum) newLeftRev else right\n                newLeft + newRight\n            } else {\n                val newLeft = (leftNum + 1).toString\n                val newLeftRev = newLeft.reverse\n                val newLeftRevNum = newLeftRev.toLong\n                val newRight = if (newLeftRevNum > rightNum) newLeftRev else right\n                newLeft + newRight\n            }\n        }\n        var result = num\n        while (!isPalindrome(result)) result = nextPalindrome(result)\n        result",
    "        var n = num\n        var digits = new ArrayBuffer[Int]()\n        while (n > 0) {\n            digits += (n % 10).toInt\n            n /= 10\n        }\n        var i = 0\n        while (i < digits.length / 2) {\n            if (digits(i) < digits(digits.length - 1 - i)) {\n                digits(digits.length - 1 - i) = digits(i)\n            } else if (digits(i) > digits(digits.length - 1 - i)) {\n                digits(digits.length - 1 - i) = digits(i)\n                var j = digits.length - 2 - i\n                while (j >= 0 && digits(j) == 9) {\n                    digits(j) = 0\n                    j -= 1\n                }\n                if (j < 0) {\n                    digits.insert(0, 1)\n                } else {\n                    digits(j) += 1\n                }\n            }\n            i += 1\n        }\n        var result = 0L\n        for (i <- 0 until digits.length) {\n            result = result * 10 + digits(i)\n        }\n        result",
    "        val digits = num.toString.toList.map(_.asDigit)\n        val len = digits.length\n        var i = 0\n        while (i < len / 2) {\n            if (digits(i) > digits(len - 1 - i)) {\n                var j = len - 1 - i\n                while (j >= 0 && digits(j) == 9) {\n                    digits(j) = 0\n                    j -= 1\n                }\n                if (j < 0) {\n                    digits(0) = 1\n                    for (k <- 1 until len) digits(k) = 0\n                    return (1L :: digits).mkString.toLong\n                }\n                else {\n                    digits(j) += 1\n                    for (k <- j + 1 until len - j) digits(k) = 0\n                }\n            }\n            else if (digits(i) < digits(len - 1 - i)) {\n                var j = len - 1 - i\n                while (j >= 0 && digits(j) == 0) {\n                    digits(j) = 9\n                    j -= 1\n                }\n                if (j < 0) {\n                    digits(0) = 1\n                    for (k <- 1 until len) digits(k) = 0\n                    return (1L :: digits).mkString.toLong\n                }\n                else {\n                    digits(j) -= 1\n                    for (k <- j + 1 until len - j) digits(k) = 9\n                }\n            }\n            i += 1\n        }\n        digits.mkString.toLong",
    "        var n = num\n        while (true) {\n            n += 1\n            if (isPalindrome(n)) return n\n        }\n        return -1",
    "        var n = num\n        while(true) {\n            n += 1\n            if(isPalindrome(n)) return n\n        }\n        return -1",
    "        def isPalindrome(num : Long) : Boolean = {\n            val str = num.toString\n            str == str.reverse\n        }\n        def nextPalindrome(num : Long) : Long = {\n            val str = num.toString\n            val len = str.length\n            val half = len / 2\n            val left = str.substring(0, half)\n            val right = str.substring(half + len % 2, len)\n            val leftNum = left.toLong\n            val rightNum = right.toLong\n            if (leftNum == rightNum) {\n                val nextLeft = (leftNum + 1).toString\n                val nextRight = nextLeft.reverse\n                val nextStr = nextLeft + nextRight.substring(nextRight.length - len % 2, nextRight.length)\n                nextStr.toLong\n            } else {\n                val nextLeft = leftNum.toString\n                val nextRight = nextLeft.reverse\n                val nextStr = nextLeft + nextRight.substring(nextRight.length - len % 2, nextRight.length)\n                nextStr.toLong\n            }\n        }\n        if (isPalindrome(num)) nextPalindrome(num) else nextPalindrome(num + 1)",
    "        val s = num.toString\n        val n = s.length\n        val half = n / 2\n        val left = s.substring(0, half)\n        val right = s.substring(half + (if (n % 2 == 0) 0 else 1), n)\n        val leftReverse = left.reverse\n        val leftReverseInt = leftReverse.toInt\n        val leftInt = left.toInt\n        val rightInt = right.toInt\n        if (leftReverseInt < rightInt) {\n            val leftIntPlusOne = (leftInt + 1).toString\n            val leftPlusOne = leftIntPlusOne.substring(0, half)\n            val leftPlusOneReverse = leftPlusOne.reverse\n            val result = leftPlusOne + leftPlusOneReverse\n            if (n % 2 == 1) result + leftPlusOneIntPlusOne(0) else result\n        } else {\n            val result = left + leftReverse\n            if (n % 2 == 1) result + leftInt(0) else result\n        }",
    "        var n = num\n        var isPalindrome = false\n        while (!isPalindrome) {\n            n += 1\n            isPalindrome = isPalindrome(n)\n        }\n        n",
    "        var n = num\n        var digits = new ArrayBuffer[Int]()\n        while (n > 0) {\n            digits += (n % 10).toInt\n            n /= 10\n        }\n        var i = 0\n        var j = digits.length - 1\n        while (i < j) {\n            if (digits(i) < digits(j)) {\n                digits(j) = digits(i)\n                i += 1\n                j -= 1\n            } else if (digits(i) > digits(j)) {\n                digits(j) = digits(i)\n                i += 1\n                j -= 1\n                var k = j\n                while (k >= 0 && digits(k) == 9) {\n                    digits(k) = 0\n                    k -= 1\n                }\n                if (k >= 0) digits(k) += 1\n                else digits.insert(0, 1)\n            } else {\n                i += 1\n                j -= 1\n            }\n        }\n        var result = 0L\n        for (i <- 0 until digits.length) result = result * 10 + digits(i)\n        result",
    "        def isPalindrome(num : Long) : Boolean = {\n            val s = num.toString\n            s == s.reverse\n        }\n        def nextSmallestPalindrome(num : Long, i : Int) : Long = {\n            if (i == 0) num\n            else if (isPalindrome(num)) num\n            else {\n                val s = num.toString\n                val s2 = s.substring(0, i) + s.substring(i + 1)\n                val n = s2.toLong\n                val n2 = n - 1\n                nextSmallestPalindrome(n2, i - 1)\n            }\n        }\n        nextSmallestPalindrome(num, num.toString.length - 1)",
    "        val s = num.toString\n        val n = s.length\n        val mid = n / 2\n        val left = s.substring(0, mid)\n        val right = s.substring(mid + (n % 2), n)\n        val leftRev = left.reverse\n        val leftNum = left.toLong\n        val leftRevNum = leftRev.toLong\n        val rightNum = right.toLong\n        if (leftNum == leftRevNum) {\n            if (rightNum == 0) {\n                val leftNumPlusOne = leftNum + 1\n                val leftNumPlusOneStr = leftNumPlusOne.toString\n                val leftNumPlusOneStrRev = leftNumPlusOneStr.reverse\n                val leftNumPlusOneStrRevStr = leftNumPlusOneStr + leftNumPlusOneStrRev\n                if (n % 2 == 1) leftNumPlusOneStrRevStr.substring(0, mid + 1) + leftNumPlusOneStrRevStr.substring(mid + 1, n) else leftNumPlusOneStrRevStr.toLong\n            } else {\n                val leftNumStr = leftNum.toString\n                val leftNumStrRev = leftNumStr.reverse\n                val leftNumStrRevStr = leftNumStr + leftNumStrRev\n                if (n % 2 == 1) leftNumStrRevStr.substring(0, mid + 1) + leftNumStrRevStr.substring(mid + 1, n) else leftNumStrRevStr.toLong\n            }\n        } else {\n            if (leftNum > leftRevNum) {\n                val leftNumStr = leftNum.toString\n                val leftNumStrRev = leftNumStr.reverse\n                val leftNumStrRevStr = leftNumStr + leftNumStrRev\n                if (n % 2 == 1) leftNumStrRevStr.substring(0, mid + 1) + leftNumStrRevStr.substring(mid + 1, n) else leftNumStrRevStr.toLong\n            } else {\n                val leftRevNumStr = leftRevNum.toString\n                val leftRevNumStrRev = leftRevNumStr.reverse\n                val leftRevNumStrRevStr = leftRevNumStr + leftRevNumStrRev\n                if (",
    "        def isPalindrome(num : Long) : Boolean = {\n            val str = num.toString\n            str == str.reverse\n        }\n        def nextPalindrome(num : Long) : Long = {\n            if (isPalindrome(num)) num\n            else nextPalindrome(num + 1)\n        }\n        nextPalindrome(num + 1)",
    "        var n = num\n        var digits = new ArrayBuffer[Int]()\n        while (n > 0) {\n            digits += (n % 10).toInt\n            n /= 10\n        }\n        var i = digits.length - 1\n        while (i >= 0) {\n            if (digits(i) != 0) {\n                digits(i) -= 1\n                break\n            }\n            else {\n                digits(i) = 9\n                i -= 1\n            }\n        }\n        var j = 0\n        while (j < digits.length / 2) {\n            digits(digits.length - 1 - j) = digits(j)\n            j += 1\n        }\n        var result = 0L\n        for (i <- 0 until digits.length) {\n            result = result * 10 + digits(i)\n        }\n        result",
    "        val s = num.toString\n        val n = s.length\n        val half = n / 2\n        val left = s.substring(0, half)\n        val right = s.substring(half + n % 2)\n        val leftNum = left.toLong\n        val rightNum = right.toLong\n        val leftNumRev = left.reverse.toLong\n        val rightNumRev = right.reverse.toLong\n        if (leftNumRev < rightNum) {\n            val nextLeft = (leftNum + 1).toString\n            val nextLeftRev = nextLeft.reverse\n            val nextLeftRevLen = nextLeftRev.length\n            val nextLeftLen = nextLeft.length\n            val nextLeftRevPadded = nextLeftRev.padTo(nextLeftLen, '0')\n            val nextLeftPadded = nextLeft.padTo(nextLeftRevLen, '0')\n            val nextLeftRevPaddedNum = nextLeftRevPadded.toLong\n            val nextLeftPaddedNum = nextLeftPadded.toLong\n            if (nextLeftRevPaddedNum < nextLeftPaddedNum) nextLeftRevPaddedNum else nextLeftPaddedNum\n        } else {\n            val nextLeft = leftNum.toString\n            val nextLeftRev = nextLeft.reverse\n            val nextLeftRevLen = nextLeftRev.length\n            val nextLeftLen = nextLeft.length\n            val nextLeftRevPadded = nextLeftRev.padTo(nextLeftLen, '0')\n            val nextLeftPadded = nextLeft.padTo(nextLeftRevLen, '0')\n            val nextLeftRevPaddedNum = nextLeftRevPadded.toLong\n            val nextLeftPaddedNum = nextLeftPadded.toLong\n            if (nextLeftRevPaddedNum < nextLeftPaddedNum) nextLeftRevPaddedNum else nextLeftPaddedNum\n        }",
    "        val s = num.toString\n        val len = s.length\n        val half = len / 2\n        val left = s.substring(0, half)\n        val right = s.substring(half + len % 2, len)\n        val next = (left.toLong + 1).toString\n        val nextLen = next.length\n        val nextHalf = nextLen / 2\n        val nextLeft = next.substring(0, nextHalf)\n        val nextRight = next.substring(nextHalf + nextLen % 2, nextLen)\n        val nextPalindrome = nextLeft + nextRight.reverse\n        nextPalindrome.toLong",
    "        def isPalindrome(num : Long) : Boolean = {\n            val str = num.toString\n            str == str.reverse\n        }\n        var i = num\n        while (!isPalindrome(i)) i -= 1\n        i",
    "        val s = num.toString\n        val n = s.length\n        val half = n / 2\n        val (left, right) = s.splitAt(half)\n        val (left1, right1) = (left.toLong, right.reverse.toLong)\n        if (left1 < right1) {\n            val (left2, right2) = (left1 + 1, right1)\n            (left2.toString + right2.toString.reverse).toLong\n        } else {\n            val (left2, right2) = (left1, right1)\n            (left2.toString + right2.toString.reverse).toLong\n        }",
    "        val s = num.toString\n        val n = s.length\n        val half = n / 2\n        val left = s.substring(0, half)\n        val right = s.substring(half + n % 2, n)\n        val leftRev = left.reverse\n        if (leftRev > right) {\n            val leftInc = (left.toLong + 1).toString\n            val leftIncRev = leftInc.reverse\n            val leftIncRevPadded = leftIncRev.padTo(half, '0')\n            val leftIncPadded = leftInc.padTo(half, '0')\n            val rightPadded = right.padTo(half, '0')\n            if (leftIncPadded > rightPadded) {\n                val leftIncRevPaddedStr = leftIncRevPadded.mkString\n                val leftIncPaddedStr = leftIncPadded.mkString\n                (leftIncRevPaddedStr + leftIncPaddedStr).toLong\n            } else {\n                val rightPaddedStr = rightPadded.mkString\n                (leftIncRevPaddedStr + rightPaddedStr).toLong\n            }\n        } else {\n            val leftRevPadded = leftRev.padTo(half, '0')\n            val leftPadded = left.padTo(half, '0')\n            val rightPadded = right.padTo(half, '0')\n            if (leftPadded > rightPadded) {\n                val leftRevPaddedStr = leftRevPadded.mkString\n                val leftPaddedStr = leftPadded.mkString\n                (leftRevPaddedStr + leftPaddedStr).toLong\n            } else {\n                val rightPaddedStr = rightPadded.mkString\n                (leftRevPaddedStr + rightPaddedStr).toLong\n            }\n        }",
    "        val s = num.toString\n        val n = s.length\n        val half = n / 2\n        val left = s.substring(0, half)\n        val right = s.substring(half + (n % 2), n)\n        val leftRev = left.reverse\n        val leftRevNum = leftRev.toLong\n        val leftNum = left.toLong\n        val rightNum = right.toLong\n        if (leftRevNum >= rightNum) {\n            val leftInc = leftNum + 1\n            val leftIncStr = leftInc.toString\n            val leftIncRev = leftIncStr.reverse\n            val leftIncRevStr = leftIncRev.substring(0, half)\n            val leftIncRevNum = leftIncRevStr.toLong\n            val leftIncStrNum = leftIncStr.toLong\n            if (leftIncRevNum >= leftIncStrNum) {\n                val leftIncRevNumStr = leftIncRevNum.toString\n                val leftIncStrNumStr = leftIncStrNum.toString\n                val leftIncRevNumStrLen = leftIncRevNumStr.length\n                val leftIncStrNumStrLen = leftIncStrNumStr.length\n                val leftIncRevNumStrLenDiff = half - leftIncRevNumStrLen\n                val leftIncStrNumStrLenDiff = half - leftIncStrNumStrLen\n                val leftIncRevNumStrPadded = \"0\" * leftIncRevNumStrLenDiff + leftIncRevNumStr\n                val leftIncStrNumStrPadded = \"0\" * leftIncStrNumStrLenDiff + leftIncStrNumStr\n                val leftIncRevNumStrPaddedNum = leftIncRevNumStrPadded.toLong\n                val leftIncStrNumStrPaddedNum = leftIncStrNumStrPadded.toLong\n                leftIncRevNumStrPaddedNum + leftIncStrNumStrPaddedNum\n            } else {\n                val leftIncStrNumStr = leftIncStrNum.toString\n                val leftIncStrNumStrLen = leftIncStrNumStr.length\n                val leftIncStrNumStrLenDiff = half - leftIncStrNumStrLen\n                val leftIncStrNumStrPadded = \"0\" * leftIncStrNumStrLenDiff + left",
    "        var n = num\n        var digits = new ArrayBuffer[Int]()\n        while (n > 0) {\n            digits += (n % 10).toInt\n            n /= 10\n        }\n        var i = 0\n        var j = digits.length - 1\n        while (i < j) {\n            if (digits(i) < digits(j)) {\n                digits(j) = digits(i)\n                i += 1\n                j -= 1\n            } else if (digits(i) > digits(j)) {\n                digits(j) = digits(i)\n                i += 1\n                j -= 1\n                var k = j\n                while (k >= 0 && digits(k) == 9) {\n                    digits(k) = 0\n                    k -= 1\n                }\n                if (k < 0) {\n                    digits.insert(0, 1)\n                } else {\n                    digits(k) += 1\n                }\n            } else {\n                i += 1\n                j -= 1\n            }\n        }\n        var result = 0L\n        for (i <- 0 until digits.length) {\n            result = result * 10 + digits(i)\n        }\n        result",
    "        val s = num.toString\n        val n = s.length\n        val half = n / 2\n        val left = s.substring(0, half)\n        val right = s.substring(n - half, n)\n        if (left == right) {\n            val next = (left.toLong + 1).toString\n            if (next.length > half) {\n                val nextLeft = next.substring(0, half)\n                val nextRight = next.substring(next.length - half, next.length)\n                return (nextLeft + nextRight.reverse).toLong\n            } else {\n                return (left + next + right.reverse).toLong\n            }\n        } else {\n            val next = (left.toLong + 1).toString\n            if (next.length > half) {\n                val nextLeft = next.substring(0, half)\n                val nextRight = next.substring(next.length - half, next.length)\n                return (nextLeft + nextRight.reverse).toLong\n            } else {\n                return (left + next + right.reverse).toLong\n            }\n        }",
    "        val digits = num.toString.toList.map(_.asDigit)\n        val n = digits.length\n        val half = n / 2\n        val left = digits.slice(0, half)\n        val right = digits.slice(half + n % 2, n)\n        val leftRev = left.reverse\n        if (left == right) {\n            val leftInc = left.reverse.scanLeft(0)((x, y) => if (x == 0) y + 1 else y).reverse\n            val leftIncRev = leftInc.reverse\n            val leftIncRevTail = leftIncRev.tail\n            val leftIncRevTailRev = leftIncRevTail.reverse\n            val leftIncRevTailRevTail = leftIncRevTailRev.tail\n            val leftIncRevTailRevTailRev = leftIncRevTailRevTail.reverse\n            val leftIncRevTailRevTailRevTail = leftIncRevTailRevTailRev.tail\n            val leftIncRevTailRevTailRevTailRev = leftIncRevTailRevTailRevTail.reverse\n            val leftIncRevTailRevTailRevTailRevTail = leftIncRevTailRevTailRevTailRev.tail\n            val leftIncRevTailRevTailRevTailRevTailRev = leftIncRevTailRevTailRevTailRevTail.reverse\n            val leftIncRevTailRevTailRevTailRevTailRevTail = leftIncRevTailRevTailRevTailRevTailRev.tail\n            val leftIncRevTailRevTailRevTailRevTailRevTailRev = leftIncRevTailRevTailRevTailRevTailRevTail.reverse\n            val leftIncRevTailRevTailRevTailRevTailRevTailRevTail = leftIncRevTailRevTailRevTailRevTailRevTailRev.tail\n            val leftIncRevTailRevTailRevTailRevTailRevTailRevTailRev = leftIncRevTailRevTailRevTailRevTailRevTailRevTail.reverse\n            val leftIncRevTailRevTailRevTailRevTail",
    "        val s = num.toString\n        val n = s.length\n        val half = n / 2\n        val left = s.substring(0, half)\n        val right = if (n % 2 == 0) s.substring(half) else s.substring(half + 1)\n        val leftRev = left.reverse\n        val leftRevInt = leftRev.toInt\n        val rightInt = right.toInt\n        if (leftRevInt < rightInt) {\n            val leftInt = left.toInt\n            val leftNext = (leftInt + 1).toString\n            val leftNextRev = leftNext.reverse\n            val leftNextRevInt = leftNextRev.toInt\n            val leftNextRevIntStr = leftNextRevInt.toString\n            val leftNextRevIntStrPadded = leftNextRevIntStr.padTo(half, '0')\n            val leftNextRevIntStrPaddedLong = leftNextRevIntStrPadded.toLong\n            val leftNextRevIntStrPaddedLongPow = pow(10, half).toLong\n            val leftNextRevIntStrPaddedLongPowMul = leftNextRevIntStrPaddedLong * leftNextRevIntStrPaddedLongPow\n            val leftNextRevIntStrPaddedLongPowMulPlus = leftNextRevIntStrPaddedLongPowMul + leftNextRevIntStrPaddedLong\n            if (n % 2 == 0) leftNextRevIntStrPaddedLongPowMulPlus else leftNextRevIntStrPaddedLongPowMulPlus * 10 + leftNextRevIntStrPaddedLong\n        } else {\n            val leftRevIntStr = leftRevInt.toString\n            val leftRevIntStrPadded = leftRevIntStr.padTo(half, '0')\n            val leftRevIntStrPaddedLong = leftRevIntStrPadded.toLong\n            val leftRevIntStrPaddedLongPow = pow(10, half).toLong\n            val leftRevIntStrPaddedLongPowMul = leftRevIntStrPaddedLong * leftRevIntStrPaddedLongPow\n            val leftRevIntStrPaddedLongPowMulPlus = leftRevIntStrPaddedLongPowMul + leftRev",
    "        def isPalindrome(num : Long) : Boolean = {\n            val str = num.toString\n            str == str.reverse\n        }\n        def nextSmallestPalindrome(num : Long, i : Int) : Long = {\n            if (i > num) {\n                val str = i.toString\n                val half = str.length / 2\n                val left = str.substring(0, half)\n                val right = str.substring(half + str.length % 2, str.length).reverse\n                val newNum = (left + right).toLong\n                if (newNum == i) nextSmallestPalindrome(num, i + 1) else newNum\n            } else {\n                val str = num.toString\n                val half = str.length / 2\n                val left = str.substring(0, half)\n                val right = str.substring(half + str.length % 2, str.length).reverse\n                val newNum = (left + right).toLong\n                if (newNum == num) nextSmallestPalindrome(num, i + 1) else newNum\n            }\n        }\n        nextSmallestPalindrome(num, 1)",
    "        var n = num\n        while (true) {\n            n += 1\n            if (isPalindrome(n)) return n\n        }\n        return -1",
    "        var n = num\n        while (true) {\n            n += 1\n            if (isPalindrome(n)) return n\n        }\n        return -1",
    "        var n = num\n        while (true) {\n            n += 1\n            if (isPalindrome(n)) return n\n        }\n        return -1",
    "        val str = num.toString\n        val len = str.length\n        val half = len / 2\n        val left = str.substring(0, half)\n        val right = str.substring(half + len % 2, len)\n        val leftRev = left.reverse\n        if (leftRev > right) {\n            val leftRevLong = leftRev.toLong\n            return (leftRevLong * pow(10, len - half).toLong + leftRevLong / pow(10, half).toLong)\n        }\n        else {\n            val leftLong = left.toLong\n            val leftRevLong = (leftLong + 1).toString.reverse.toLong\n            return (leftRevLong * pow(10, len - half).toLong + leftRevLong / pow(10, half).toLong)\n        }",
    "        val s = num.toString\n        val n = s.length\n        val half = n / 2\n        val left = s.substring(0, half)\n        val right = s.substring(half + (if (n % 2 == 0) 0 else 1), n)\n        val leftRev = left.reverse\n        if (leftRev > right) {\n            val leftInc = (BigInt(left) + 1).toString\n            val leftIncRev = leftInc.reverse\n            val leftIncRevPadded = leftIncRev.padTo(half, '0')\n            val leftIncPadded = leftInc.padTo(half, '0')\n            val leftIncRevPaddedLong = leftIncRevPadded.toLong\n            val leftIncPaddedLong = leftIncPadded.toLong\n            if (n % 2 == 0) leftIncPaddedLong * pow(10, half).toLong + leftIncRevPaddedLong\n            else leftIncPaddedLong * pow(10, half + 1).toLong + leftIncRevPaddedLong * 10 + leftIncPaddedLong\n        } else {\n            val leftRevPadded = leftRev.padTo(half, '0')\n            val leftPadded = left.padTo(half, '0')\n            val leftRevPaddedLong = leftRevPadded.toLong\n            val leftPaddedLong = leftPadded.toLong\n            if (n % 2 == 0) leftPaddedLong * pow(10, half).toLong + leftRevPaddedLong\n            else leftPaddedLong * pow(10, half + 1).toLong + leftRevPaddedLong * 10 + leftPaddedLong\n        }",
    "        def isPalindrome(num : Long) : Boolean = {\n            val str = num.toString\n            str == str.reverse\n        }\n        def nextPalindrome(num : Long) : Long = {\n            val str = num.toString\n            val len = str.length\n            val half = len / 2\n            val left = str.substring(0, half)\n            val right = str.substring(half + len % 2, len)\n            val leftNum = left.toLong\n            val rightNum = right.toLong\n            if (leftNum == rightNum) {\n                val nextLeft = (leftNum + 1).toString\n                val nextRight = nextLeft.reverse\n                val nextStr = nextLeft + nextRight.substring(nextRight.length - len % 2, nextRight.length)\n                nextStr.toLong\n            } else if (leftNum < rightNum) {\n                val nextLeft = leftNum.toString\n                val nextRight = nextLeft.reverse\n                val nextStr = nextLeft + nextRight.substring(nextRight.length - len % 2, nextRight.length)\n                nextStr.toLong\n            } else {\n                val nextLeft = (leftNum + 1).toString\n                val nextRight = nextLeft.reverse\n                val nextStr = nextLeft + nextRight.substring(nextRight.length - len % 2, nextRight.length)\n                nextStr.toLong\n            }\n        }\n        if (isPalindrome(num)) num else nextPalindrome(num)"
  ]
}