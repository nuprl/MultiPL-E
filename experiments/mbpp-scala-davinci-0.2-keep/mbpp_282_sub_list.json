{
  "name": "mbpp_282_sub_list",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_282_sub_list.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var result = List[Long]()\n        for (i <- 0 until nums1.length) {\n            result = result :+ (nums1(i) - nums2(i))\n        }\n        return result",
    "        nums1.zip(nums2).map(x => x._1 - x._2)",
    "        var result = List[Long]()\n        for (i <- 0 until nums1.length) {\n            result = result :+ (nums1(i) - nums2(i))\n        }\n        result",
    "        var result = List[Long]()\n        for (i <- 0 until nums1.length) {\n            result = result :+ (nums1(i) - nums2(i))\n        }\n        result",
    "        var result = List[Long]()\n        for (i <- 0 until nums1.length) {\n            result = result :+ (nums1(i) - nums2(i))\n        }\n        result",
    "        nums1.zip(nums2).map(x => x._1 - x._2)",
    "        var result = List[Long]()\n        for (i <- 0 until nums1.length) {\n            result = result :+ (nums1(i) - nums2(i))\n        }\n        result",
    "        var result = List[Long]()\n        for (i <- 0 until nums1.length) result = result :+ (nums1(i) - nums2(i))\n        result",
    "        if (nums1.length != nums2.length) throw new IllegalArgumentException\n        nums1.zip(nums2).map(x => x._1 - x._2)",
    "        nums1.zip(nums2).map(x => x._1 - x._2)",
    "        if (nums1.length != nums2.length) throw new IllegalArgumentException(\"Lists must be of equal length\")\n        val result = new ListBuffer[Long]\n        for (i <- 0 until nums1.length) result += (nums1(i) - nums2(i))\n        result.toList",
    "        nums1.zip(nums2).map(x => x._1 - x._2)",
    "        var result = List[Long]()\n        for (i <- 0 until nums1.length) {\n            result = result :+ (nums1(i) - nums2(i))\n        }\n        result",
    "        nums1.zip(nums2).map(x => x._1 - x._2)",
    "        nums1.zip(nums2).map(x => x._1 - x._2)",
    "        var result = List[Long]()\n        for (i <- 0 until nums1.length) {\n            result = result :+ (nums1(i) - nums2(i))\n        }\n        return result",
    "        val nums = nums1.zip(nums2)\n        nums.map(x => x._1 - x._2)",
    "        var result = List[Long]()\n        for (i <- 0 until nums1.length) result = result :+ (nums1(i) - nums2(i))\n        result",
    "        if (nums1.length != nums2.length) throw new IllegalArgumentException\n        nums1.zip(nums2).map(x => x._1 - x._2)",
    "        nums1.zip(nums2).map(x => x._1 - x._2)"
  ]
}