{
  "name": "mbpp_282_sub_list",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_282_sub_list.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var result = List[Long]()\n        for (i <- 0 until nums1.length) {\n            result = result :+ (nums1(i) - nums2(i))\n        }\n        return result",
    "        nums1.zip(nums2).map(x => x._1 - x._2)",
    "        var result = List[Long]()\n        for (i <- 0 until nums1.length) {\n            result = result :+ (nums1(i) - nums2(i))\n        }\n        result",
    "        var result = List[Long]()\n        for (i <- 0 until nums1.length) {\n            result = result :+ (nums1(i) - nums2(i))\n        }\n        result",
    "        var result = List[Long]()\n        for (i <- 0 until nums1.length) {\n            result = result :+ (nums1(i) - nums2(i))\n        }\n        result",
    "        nums1.zip(nums2).map(x => x._1 - x._2)",
    "        var result = List[Long]()\n        for (i <- 0 until nums1.length) {\n            result = result :+ (nums1(i) - nums2(i))\n        }\n        result",
    "        var result = List[Long]()\n        for (i <- 0 until nums1.length) result = result :+ (nums1(i) - nums2(i))\n        result",
    "        if (nums1.length != nums2.length) throw new IllegalArgumentException\n        nums1.zip(nums2).map(x => x._1 - x._2)",
    "        nums1.zip(nums2).map(x => x._1 - x._2)",
    "        if (nums1.length != nums2.length) throw new IllegalArgumentException(\"Lists must be of equal length\")\n        val result = new ListBuffer[Long]\n        for (i <- 0 until nums1.length) result += (nums1(i) - nums2(i))\n        result.toList",
    "        nums1.zip(nums2).map(x => x._1 - x._2)",
    "        var result = List[Long]()\n        for (i <- 0 until nums1.length) {\n            result = result :+ (nums1(i) - nums2(i))\n        }\n        result",
    "        nums1.zip(nums2).map(x => x._1 - x._2)",
    "        nums1.zip(nums2).map(x => x._1 - x._2)",
    "        var result = List[Long]()\n        for (i <- 0 until nums1.length) {\n            result = result :+ (nums1(i) - nums2(i))\n        }\n        return result",
    "        val nums = nums1.zip(nums2)\n        nums.map(x => x._1 - x._2)",
    "        var result = List[Long]()\n        for (i <- 0 until nums1.length) result = result :+ (nums1(i) - nums2(i))\n        result",
    "        if (nums1.length != nums2.length) throw new IllegalArgumentException\n        nums1.zip(nums2).map(x => x._1 - x._2)",
    "        nums1.zip(nums2).map(x => x._1 - x._2)",
    "        if (nums1.length != nums2.length) throw new IllegalArgumentException\n        nums1.zip(nums2).map(pair => pair._1 - pair._2)",
    "        nums1.zip(nums2).map(x => x._1 - x._2)",
    "        nums1.zip(nums2).map(x => x._1 - x._2)",
    "        nums1.zip(nums2).map(x => x._1 - x._2)",
    "        if (nums1.length != nums2.length) throw new IllegalArgumentException\n        var result = List[Long]()\n        for (i <- 0 until nums1.length) result = result :+ (nums1(i) - nums2(i))\n        result",
    "        if (nums1.length != nums2.length) throw new IllegalArgumentException\n        nums1.zip(nums2).map(x => x._1 - x._2)",
    "        nums1.zip(nums2).map(x => x._1 - x._2)",
    "        if (nums1.length != nums2.length) throw new IllegalArgumentException\n        nums1.zip(nums2).map(x => x._1 - x._2)",
    "        nums1.zip(nums2).map(x => x._1 - x._2)",
    "        nums1.zip(nums2).map(x => x._1 - x._2)",
    "        if (nums1.length != nums2.length) {\n            throw new IllegalArgumentException(\"nums1 and nums2 must have the same length\")\n        }\n        nums1.zip(nums2).map(x => x._1 - x._2)",
    "        var result = List[Long]()\n        for (i <- 0 until nums1.length) {\n            result = result :+ (nums1(i) - nums2(i))\n        }\n        result",
    "        nums1.zip(nums2).map(x => x._1 - x._2)",
    "        nums1.zip(nums2).map(x => x._1 - x._2)",
    "        if (nums1.isEmpty || nums2.isEmpty) return List()\n        (nums1.head - nums2.head) :: subList(nums1.tail, nums2.tail)",
    "        if (nums1.length != nums2.length) throw new IllegalArgumentException\n        nums1.zip(nums2).map(x => x._1 - x._2)",
    "        var result = List[Long]()\n        for (i <- 0 until nums1.length) {\n            result = result :+ (nums1(i) - nums2(i))\n        }\n        result",
    "        if (nums1.length != nums2.length) throw new IllegalArgumentException\n        nums1.zip(nums2).map(x => x._1 - x._2)",
    "        nums1.zip(nums2).map(x => x._1 - x._2)",
    "        nums1.zip(nums2).map(x => x._1 - x._2)",
    "        nums1.zip(nums2).map(x => x._1 - x._2)",
    "        nums1.zip(nums2).map(x => x._1 - x._2)",
    "        if (nums1.length != nums2.length) throw new IllegalArgumentException\n        nums1.zip(nums2).map(x => x._1 - x._2)",
    "        nums1.zip(nums2).map(x => x._1 - x._2)",
    "        if (nums1.length != nums2.length) {\n            throw new IllegalArgumentException(\"The two lists must have the same length.\")\n        }\n        var result = List[Long]()\n        for (i <- 0 until nums1.length) {\n            result = result :+ (nums1(i) - nums2(i))\n        }\n        result",
    "        nums1.zip(nums2).map(x => x._1 - x._2)",
    "        nums1.zip(nums2).map(t => t._1 - t._2)",
    "        if (nums1.length != nums2.length) {\n            throw new IllegalArgumentException(\"nums1 and nums2 must have the same length\")\n        }\n        val result = new ListBuffer[Long]\n        for (i <- 0 until nums1.length) {\n            result += (nums1(i) - nums2(i))\n        }\n        result.toList",
    "        nums1.zip(nums2).map(x => x._1 - x._2)",
    "        nums1.zip(nums2).map(x => x._1 - x._2)",
    "        var result = List[Long]()\n        for (i <- 0 until nums1.length) result = result :+ (nums1(i) - nums2(i))\n        result",
    "        if (nums1.length != nums2.length) throw new Exception(\"Lists must be of equal length\")\n        nums1.zip(nums2).map(x => x._1 - x._2)",
    "        nums1.zip(nums2).map(x => x._1 - x._2)",
    "        nums1.zip(nums2).map(x => x._1 - x._2)",
    "        if (nums1.length != nums2.length) {\n            println(\"Error: lists are not of equal length\")\n            return Nil\n        }\n        var result = List[Long]()\n        for (i <- 0 until nums1.length) {\n            result = result :+ (nums1(i) - nums2(i))\n        }\n        return result",
    "        var result = List[Long]()\n        for (i <- 0 until nums1.length) {\n            result = result :+ (nums1(i) - nums2(i))\n        }\n        result",
    "        if (nums1.length != nums2.length) throw new IllegalArgumentException\n        nums1.zip(nums2).map(x => x._1 - x._2)",
    "        if (nums1.length != nums2.length) throw new IllegalArgumentException(\"Lists must be of equal length\")\n        nums1.zip(nums2).map(x => x._1 - x._2)",
    "        nums1.zip(nums2).map(x => x._1 - x._2)",
    "        if (nums1.length != nums2.length) throw new Exception(\"Lists must be of equal length\")\n        nums1.zip(nums2).map(x => x._1 - x._2)",
    "        nums1.zip(nums2).map(x => x._1 - x._2)",
    "        var result = new ListBuffer[Long]\n        for (i <- 0 until nums1.length) {\n            result += (nums1(i) - nums2(i))\n        }\n        return result.toList",
    "        nums1.zip(nums2).map(x => x._1 - x._2)",
    "        if (nums1.length != nums2.length) throw new Exception(\"Lists must be of equal length\")\n        nums1.zip(nums2).map(x => x._1 - x._2)",
    "        if (nums1.length != nums2.length) {\n            println(\"Error: Lists must be of equal length\")\n            return List()\n        }\n        var result = ListBuffer[Long]()\n        for (i <- 0 until nums1.length) {\n            result += nums1(i) - nums2(i)\n        }\n        return result.toList",
    "        if (nums1.length != nums2.length) throw new Exception(\"Lists must be the same length\")\n        nums1.zip(nums2).map(x => x._1 - x._2)",
    "        nums1.zip(nums2).map(x => x._1 - x._2)",
    "        if (nums1.length != nums2.length) throw new IllegalArgumentException\n        nums1.zip(nums2).map(x => x._1 - x._2)",
    "        if (nums1.length != nums2.length) throw new IllegalArgumentException\n        nums1.zip(nums2).map(x => x._1 - x._2)",
    "        nums1.zip(nums2).map(x => x._1 - x._2)",
    "        nums1.zip(nums2).map(x => x._1 - x._2)",
    "        var result = List[Long]()\n        for (i <- 0 until nums1.length) {\n            result = result :+ (nums1(i) - nums2(i))\n        }\n        result",
    "        if (nums1.length != nums2.length) throw new IllegalArgumentException\n        nums1.zip(nums2).map(x => x._1 - x._2)",
    "        if (nums1.length != nums2.length) throw new Exception(\"Lists must be of equal length\")\n        nums1.zip(nums2).map(x => x._1 - x._2)",
    "        if (nums1.length != nums2.length) throw new IllegalArgumentException\n        nums1.zip(nums2).map(x => x._1 - x._2)",
    "        if (nums1.length != nums2.length) {\n            throw new IllegalArgumentException(\"nums1 and nums2 must have the same length\")\n        }\n        nums1.zip(nums2).map(x => x._1 - x._2)",
    "        if (nums1.length != nums2.length) throw new IllegalArgumentException\n        nums1.zip(nums2).map(x => x._1 - x._2)",
    "        if (nums1.length != nums2.length) throw new IllegalArgumentException\n        nums1.zip(nums2).map(x => x._1 - x._2)",
    "        var result = List[Long]()\n        for (i <- 0 until nums1.length) {\n            result = result :+ (nums1(i) - nums2(i))\n        }\n        result",
    "        var result = List[Long]()\n        for (i <- 0 until nums1.length) {\n            result = result :+ (nums1(i) - nums2(i))\n        }\n        return result",
    "        nums1.zip(nums2).map(x => x._1 - x._2)",
    "        nums1.zip(nums2).map(x => x._1 - x._2)",
    "        nums1.zip(nums2).map(x => x._1 - x._2)",
    "        if (nums1.length != nums2.length) throw new IllegalArgumentException\n        nums1.zip(nums2).map(x => x._1 - x._2)",
    "        (nums1, nums2).zipped.map(_ - _)",
    "        nums1.zip(nums2).map(x => x._1 - x._2)",
    "        if (nums1.isEmpty || nums2.isEmpty) return List()\n        (nums1.head - nums2.head) :: subList(nums1.tail, nums2.tail)",
    "        var result = List[Long]()\n        for (i <- 0 until nums1.length) {\n            result = result :+ (nums1(i) - nums2(i))\n        }\n        return result",
    "        nums1.zip(nums2).map(x => x._1 - x._2)",
    "        nums1.zip(nums2).map(x => x._1 - x._2)",
    "        nums1.zip(nums2).map(x => x._1 - x._2)",
    "        var result = List[Long]()\n        for (i <- 0 until nums1.length) {\n            result = result :+ (nums1(i) - nums2(i))\n        }\n        result",
    "        var result = List[Long]()\n        for (i <- 0 until nums1.length) {\n            result = result :+ (nums1(i) - nums2(i))\n        }\n        result",
    "        var result = List[Long]()\n        for (i <- 0 until nums1.length) {\n            result = result :+ (nums1(i) - nums2(i))\n        }\n        return result",
    "        nums1.zip(nums2).map(x => x._1 - x._2)",
    "        nums1.zip(nums2).map(x => x._1 - x._2)",
    "        nums1.zip(nums2).map(x => x._1 - x._2)",
    "        var result = List[Long]()\n        for (i <- 0 until nums1.length) {\n            result = result :+ (nums1(i) - nums2(i))\n        }\n        return result",
    "        if (nums1.length != nums2.length) throw new IllegalArgumentException(\"Lists must be of equal length\")\n        nums1.zip(nums2).map(x => x._1 - x._2)",
    "        var result = List[Long]()\n        for (i <- 0 until nums1.length) {\n            result = result :+ (nums1(i) - nums2(i))\n        }\n        result",
    "        nums1.zip(nums2).map(x => x._1 - x._2)",
    "        nums1.zip(nums2).map(x => x._1 - x._2)",
    "        nums1.zip(nums2).map(x => x._1 - x._2)",
    "        nums1.zip(nums2).map(x => x._1 - x._2)",
    "        nums1.zip(nums2).map(x => x._1 - x._2)",
    "        if (nums1.length != nums2.length) throw new IllegalArgumentException\n        nums1.zip(nums2).map(x => x._1 - x._2)",
    "        nums1.zip(nums2).map(x => x._1 - x._2)",
    "        var result = List[Long]()\n        for (i <- 0 until nums1.length) {\n            result = result :+ (nums1(i) - nums2(i))\n        }\n        result",
    "        if (nums1.length != nums2.length) throw new Exception(\"Lists must be of same length\")\n        nums1.zip(nums2).map(x => x._1 - x._2)",
    "        if (nums1.length != nums2.length) throw new IllegalArgumentException\n        nums1.zip(nums2).map(x => x._1 - x._2)",
    "        nums1.zip(nums2).map(x => x._1 - x._2)",
    "        if (nums1.length != nums2.length) throw new IllegalArgumentException\n        (nums1 zip nums2).map(x => x._1 - x._2)",
    "        if (nums1.length != nums2.length) throw new Exception(\"Lists must be of equal length\")\n        nums1.zip(nums2).map(x => x._1 - x._2)",
    "        nums1.zip(nums2).map(x => x._1 - x._2)",
    "        nums1.zip(nums2).map(t => t._1 - t._2)",
    "        nums1.zip(nums2).map(x => x._1 - x._2)",
    "        nums1.zip(nums2).map(x => x._1 - x._2)",
    "        if (nums1.length != nums2.length) throw new IllegalArgumentException\n        nums1.zip(nums2).map(x => x._1 - x._2)",
    "        if (nums1.length != nums2.length) throw new IllegalArgumentException\n        nums1.zip(nums2).map(x => x._1 - x._2)",
    "        var result = List[Long]()\n        for (i <- 0 until nums1.length) {\n            result = result :+ (nums1(i) - nums2(i))\n        }\n        return result",
    "        var result = List[Long]()\n        for (i <- 0 until nums1.length) {\n            result = result :+ (nums1(i) - nums2(i))\n        }\n        result",
    "        nums1.zip(nums2).map(x => x._1 - x._2)",
    "        var result = List[Long]()\n        for (i <- 0 until nums1.length) {\n            result = result :+ (nums1(i) - nums2(i))\n        }\n        return result",
    "        var result = List[Long]()\n        for (i <- 0 until nums1.length) {\n            result = result :+ (nums1(i) - nums2(i))\n        }\n        return result",
    "        if (nums1.length != nums2.length) throw new IllegalArgumentException\n        nums1.zip(nums2).map(x => x._1 - x._2)",
    "        nums1.zip(nums2).map(x => x._1 - x._2)",
    "        val n = min(nums1.length, nums2.length)\n        val nums = new ListBuffer[Long]\n        for (i <- 0 until n) {\n            nums += nums1(i) - nums2(i)\n        }\n        nums.toList",
    "        nums1.zip(nums2).map(x => x._1 - x._2)",
    "        nums1.zip(nums2).map(x => x._1 - x._2)",
    "        var result = List[Long]()\n        for (i <- 0 until nums1.length) {\n            result = result :+ (nums1(i) - nums2(i))\n        }\n        return result",
    "        var result = List[Long]()\n        for (i <- 0 until nums1.length) {\n            result = result :+ (nums1(i) - nums2(i))\n        }\n        result",
    "        val n = min(nums1.length, nums2.length)\n        val nums = new ListBuffer[Long]\n        for (i <- 0 until n) nums += (nums1(i) - nums2(i))\n        nums.toList",
    "        nums1.zip(nums2).map(x => x._1 - x._2)",
    "        nums1.zip(nums2).map(x => x._1 - x._2)",
    "        nums1.zip(nums2).map(x => x._1 - x._2)",
    "        nums1.zip(nums2).map(x => x._1 - x._2)",
    "        nums1.zip(nums2).map(x => x._1 - x._2)",
    "        nums1.zip(nums2).map(x => x._1 - x._2)",
    "        if (nums1.length != nums2.length) throw new IllegalArgumentException\n        nums1.zip(nums2).map(x => x._1 - x._2)",
    "        if (nums1.length != nums2.length) throw new IllegalArgumentException(\"nums1.length != nums2.length\")\n        nums1.zip(nums2).map(x => x._1 - x._2)",
    "        var result = List[Long]()\n        for (i <- 0 until nums1.length) {\n            result = result :+ (nums1(i) - nums2(i))\n        }\n        return result",
    "        nums1.zip(nums2).map(x => x._1 - x._2)",
    "        var result = List[Long]()\n        for (i <- 0 until nums1.length) {\n            result = result :+ (nums1(i) - nums2(i))\n        }\n        return result",
    "        if (nums1.length != nums2.length) throw new IllegalArgumentException\n        nums1.zip(nums2).map(x => x._1 - x._2)",
    "        nums1.zip(nums2).map(t => t._1 - t._2)",
    "        (nums1, nums2).zipped.map(_ - _)",
    "        var result = List[Long]()\n        for (i <- 0 until nums1.length) {\n            result = result :+ (nums1(i) - nums2(i))\n        }\n        result",
    "        var result = List[Long]()\n        for (i <- 0 until nums1.length) {\n            result = result :+ (nums1(i) - nums2(i))\n        }\n        return result",
    "        nums1.zip(nums2).map(x => x._1 - x._2)",
    "        if (nums1.length != nums2.length) throw new Exception(\"Lists must be of equal length\")\n        (nums1, nums2).zipped.map(_ - _)",
    "        if (nums1.length != nums2.length) throw new IllegalArgumentException\n        nums1.zip(nums2).map(x => x._1 - x._2)",
    "        var result = List[Long]()\n        for (i <- 0 until nums1.length) {\n            result = result :+ (nums1(i) - nums2(i))\n        }\n        result",
    "        nums1.zip(nums2).map(x => x._1 - x._2)",
    "        nums1.zip(nums2).map(x => x._1 - x._2)",
    "        if (nums1.length != nums2.length) throw new IllegalArgumentException\n        nums1.zip(nums2).map(x => x._1 - x._2)",
    "        var result = List[Long]()\n        for (i <- 0 until nums1.length) {\n            result = result :+ (nums1(i) - nums2(i))\n        }\n        result",
    "        var result = List[Long]()\n        for (i <- 0 until nums1.length) {\n            result = result :+ (nums1(i) - nums2(i))\n        }\n        return result",
    "        nums1.zip(nums2).map(x => x._1 - x._2)",
    "        nums1.zip(nums2).map(x => x._1 - x._2)",
    "        (nums1, nums2).zipped.map(_ - _)",
    "        var result = List[Long]()\n        for (i <- 0 until nums1.length) {\n            result = result :+ (nums1(i) - nums2(i))\n        }\n        return result",
    "        if (nums1.length != nums2.length) throw new Exception(\"Lengths of lists must be equal\")\n        nums1.zip(nums2).map(x => x._1 - x._2)",
    "        nums1.zip(nums2).map(x => x._1 - x._2)",
    "        var result = List[Long]()\n        for (i <- 0 until nums1.length) {\n            result = result :+ (nums1(i) - nums2(i))\n        }\n        result",
    "        nums1.zip(nums2).map(x => x._1 - x._2)",
    "        nums1.zip(nums2).map(x => x._1 - x._2)",
    "        var result = List[Long]()\n        for (i <- 0 until nums1.length) {\n            result = result :+ (nums1(i) - nums2(i))\n        }\n        return result",
    "        nums1.zip(nums2).map(x => x._1 - x._2)",
    "        nums1.zip(nums2).map(x => x._1 - x._2)",
    "        nums1.zip(nums2).map(x => x._1 - x._2)",
    "        nums1.zip(nums2).map(x => x._1 - x._2)",
    "        if (nums1.length != nums2.length) throw new IllegalArgumentException(\"Lists must be of equal length\")\n        nums1.zip(nums2).map(x => x._1 - x._2)",
    "        if (nums1.length != nums2.length) throw new IllegalArgumentException\n        nums1.zip(nums2).map(x => x._1 - x._2)",
    "        nums1.zip(nums2).map(x => x._1 - x._2)",
    "        var result = List[Long]()\n        for (i <- 0 until nums1.length) {\n            result = result :+ (nums1(i) - nums2(i))\n        }\n        return result",
    "        if (nums1.length != nums2.length) throw new IllegalArgumentException\n        nums1.zip(nums2).map(x => x._1 - x._2)",
    "        nums1.zip(nums2).map(x => x._1 - x._2)",
    "        (nums1, nums2).zipped.map(_ - _)",
    "        if (nums1.length != nums2.length) throw new IllegalArgumentException\n        nums1.zip(nums2).map(x => x._1 - x._2)",
    "        if (nums1.length != nums2.length) throw new Exception(\"Lists must be of equal length\")\n        val result = new ListBuffer[Long]\n        for (i <- 0 until nums1.length) result += (nums1(i) - nums2(i))\n        result.toList",
    "        var result = List[Long]()\n        for (i <- 0 until nums1.length) result = result :+ (nums1(i) - nums2(i))\n        result",
    "        if (nums1.length != nums2.length) throw new IllegalArgumentException(\"Lists must be of equal length\")\n        nums1.zip(nums2).map(x => x._1 - x._2)",
    "        if (nums1.length != nums2.length) {\n            throw new IllegalArgumentException(\"nums1 and nums2 must be of the same length\")\n        }\n        nums1.zip(nums2).map(x => x._1 - x._2)",
    "        var result = new ListBuffer[Long]\n        for (i <- 0 until nums1.length) {\n            result += nums1(i) - nums2(i)\n        }\n        result.toList",
    "        nums1.zip(nums2).map(x => x._1 - x._2)",
    "        nums1.zip(nums2).map(x => x._1 - x._2)",
    "        nums1.zip(nums2).map(x => x._1 - x._2)",
    "        var result = List[Long]()\n        for (i <- 0 until nums1.length) {\n            result = result :+ (nums1(i) - nums2(i))\n        }\n        return result",
    "        if (nums1.length != nums2.length) {\n            throw new IllegalArgumentException(\"nums1 and nums2 must have the same length\")\n        }\n        var result = new ListBuffer[Long]\n        for (i <- 0 until nums1.length) {\n            result += nums1(i) - nums2(i)\n        }\n        result.toList",
    "        nums1.zip(nums2).map(x => x._1 - x._2)",
    "        if (nums1.length != nums2.length) throw new IllegalArgumentException(\"Lists must be of equal length\")\n        nums1.zip(nums2).map(x => x._1 - x._2)",
    "        if (nums1.length != nums2.length) throw new IllegalArgumentException(\"Lists must be of equal length\")\n        nums1.zip(nums2).map(x => x._1 - x._2)",
    "        var result = List[Long]()\n        for (i <- 0 until nums1.length) {\n            result = result :+ (nums1(i) - nums2(i))\n        }\n        return result",
    "        var result = List[Long]()\n        for (i <- 0 until nums1.length) {\n            result = result :+ (nums1(i) - nums2(i))\n        }\n        return result",
    "        if (nums1.length != nums2.length) throw new IllegalArgumentException\n        nums1.zip(nums2).map(x => x._1 - x._2)",
    "        nums1.zip(nums2).map(x => x._1 - x._2)",
    "        nums1.zip(nums2).map(x => x._1 - x._2)",
    "        nums1.zip(nums2).map(x => x._1 - x._2)",
    "        nums1.zip(nums2).map(x => x._1 - x._2)",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 until nums1.length) {\n            result += (nums1(i) - nums2(i))\n        }\n        result.toList"
  ]
}