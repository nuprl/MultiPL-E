{
  "name": "mbpp_299_max_aggregate",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_299_max_aggregate.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val data = stdata.map(x => x match {\n            case Left(x) => Left(x)\n            case Right(x) => Right(x)\n        })\n        val lefts = data.filter(x => x match {\n            case Left(x) => true\n            case Right(x) => false\n        })\n        val rights = data.filter(x => x match {\n            case Left(x) => false\n            case Right(x) => true\n        })\n        if (lefts.length > 0) {\n            return lefts.head\n        }\n        else {\n            return Right(rights.map(x => x match {\n                case Right(x) => x\n            }).max)\n        }",
    "        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)",
    "        val l = stdata.filter(_.isRight).map(_.right.get)\n        if (l.isEmpty) Left(\"No numeric data\")\n        else Right(l.max)",
    "        val data = stdata.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        })\n        val lefts = data.filter(x => x match {\n            case Left(s) => true\n            case Right(l) => false\n        })\n        if (lefts.length > 0) {\n            lefts(0)\n        } else {\n            val rights = data.filter(x => x match {\n                case Left(s) => false\n                case Right(l) => true\n            })\n            Right(rights.map(x => x match {\n                case Left(s) => 0\n                case Right(l) => l\n            }).reduceLeft(_ + _))\n        }",
    "        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)",
    "        val data = stdata.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        })\n        val l = data.filter(x => x match {\n            case Left(s) => false\n            case Right(l) => true\n        })\n        val s = data.filter(x => x match {\n            case Left(s) => true\n            case Right(l) => false\n        })\n        if (l.length == 0) {\n            Left(\"No data\")\n        } else if (s.length == 0) {\n            Right(l.map(x => x match {\n                case Left(s) => 0\n                case Right(l) => l\n            }).max)\n        } else {\n            Left(\"Mixed data\")\n        }",
    "        val (lefts, rights) = stdata.partition(_.isLeft)\n        if (lefts.isEmpty) {\n            val max = rights.map(_.right.get).max\n            Right(max)\n        } else {\n            Left(lefts.map(_.left.get).mkString(\",\"))\n        }",
    "        val (strs, longs) = stdata.partition(_.isLeft)\n        if (strs.isEmpty) Right(longs.map(_.right.get).max)\n        else Left(strs.map(_.left.get).mkString(\",\"))",
    "        val data = stdata.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        })\n        val lefts = data.filter(x => x match {\n            case Left(s) => true\n            case Right(l) => false\n        })\n        if (lefts.size > 0) {\n            return lefts.head\n        }\n        val rights = data.filter(x => x match {\n            case Left(s) => false\n            case Right(l) => true\n        })\n        if (rights.size == 0) {\n            return Left(\"No data\")\n        }\n        val sum = rights.map(x => x match {\n            case Left(s) => 0\n            case Right(l) => l\n        }).sum\n        val max = rights.map(x => x match {\n            case Left(s) => 0\n            case Right(l) => l\n        }).max\n        val min = rights.map(x => x match {\n            case Left(s) => 0\n            case Right(l) => l\n        }).min\n        val avg = sum / rights.size\n        val maxAggregate = max + min + avg\n        return Right(maxAggregate)",
    "        val (strs, lngs) = stdata.partition(_.isLeft)\n        if (strs.isEmpty) Right(lngs.map(_.right.get).max)\n        else Left(strs.map(_.left.get).mkString(\",\"))",
    "        val (strs, longs) = stdata.partition(_.isLeft)\n        if (strs.isEmpty) {\n            Right(longs.map(_.right.get).max)\n        } else {\n            Left(strs.map(_.left.get).mkString(\",\"))\n        }",
    "        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.size == 0) Left(\"No data\")\n        else Right(data.max)",
    "        val data = stdata.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        })\n        val lefts = data.filter(x => x match {\n            case Left(s) => true\n            case Right(l) => false\n        })\n        if (lefts.length > 0) {\n            return lefts(0)\n        }\n        val rights = data.filter(x => x match {\n            case Left(s) => false\n            case Right(l) => true\n        })\n        if (rights.length == 0) {\n            return Left(\"No data\")\n        }\n        val max = rights.map(x => x match {\n            case Left(s) => 0\n            case Right(l) => l\n        }).max\n        return Right(max)",
    "        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)",
    "        val data = stdata.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        })\n        val lefts = data.filter(x => x.isLeft)\n        if (lefts.size > 0) {\n            return lefts.head\n        }\n        val rights = data.filter(x => x.isRight)\n        val rights2 = rights.map(x => x match {\n            case Left(s) => 0\n            case Right(l) => l\n        })\n        val max = rights2.max\n        return Right(max)",
    "        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)",
    "        var max = 0L\n        var max_index = 0\n        var max_index_count = 0\n        var max_index_sum = 0L\n        var index = 0\n        var count = 0\n        var sum = 0L\n        for (e <- stdata) {\n            e match {\n                case Left(s) => {\n                    if (count > max_index_count) {\n                        max_index_count = count\n                        max_index_sum = sum\n                        max_index = index\n                    }\n                    count = 0\n                    sum = 0L\n                    index += 1\n                }\n                case Right(l) => {\n                    count += 1\n                    sum += l\n                }\n            }\n        }\n        if (count > max_index_count) {\n            max_index_count = count\n            max_index_sum = sum\n            max_index = index\n        }\n        if (max_index_count == 0) Left(\"No data\")\n        else Right(max_index_sum)",
    "        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)",
    "        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\") else Right(data.max)",
    "        val (strs, nums) = stdata.partition(_.isLeft)\n        if (strs.length > 0) Left(strs.map(_.left.get).mkString(\",\"))\n        else Right(nums.map(_.right.get).sum)",
    "        var max = 0L\n        var error = \"\"\n        for (i <- stdata) {\n            i match {\n                case Left(s) => error = s\n                case Right(l) => max = max + l\n            }\n        }\n        if (error != \"\") Left(error) else Right(max)",
    "        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)",
    "        val l = stdata.filter(_.isRight).map(_.right.get)\n        if (l.size == 0) Left(\"No data\")\n        else Right(l.max)",
    "        val data = stdata.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        })\n        if (data.contains(Left(\"error\"))) Left(\"error\")\n        else Right(data.map(x => x match {\n            case Left(s) => 0\n            case Right(l) => l\n        }).max)",
    "        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)",
    "        val (strs, nums) = stdata.partition(_.isLeft)\n        if (strs.isEmpty) Right(nums.map(_.right.get).max)\n        else Left(strs.map(_.left.get).mkString(\",\"))",
    "        val data = stdata.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(i) => Right(i)\n        })\n        val lefts = data.filter(x => x match {\n            case Left(s) => true\n            case Right(i) => false\n        })\n        val rights = data.filter(x => x match {\n            case Left(s) => false\n            case Right(i) => true\n        })\n        if (lefts.length > 0) {\n            return lefts(0)\n        }\n        return Right(rights.map(x => x match {\n            case Left(s) => 0\n            case Right(i) => i\n        }).max)",
    "        val l = stdata.filter(_.isRight).map(_.right.get)\n        if (l.isEmpty) Left(\"No data\") else Right(l.max)",
    "        val (strs, nums) = stdata.partition(_.isLeft)\n        if (strs.isEmpty) {\n            Right(nums.map(_.right.get).max)\n        } else {\n            Left(strs.map(_.left.get).mkString(\",\"))\n        }",
    "        val l = stdata.filter(_.isRight).map(_.right.get)\n        if (l.isEmpty) Left(\"No data\") else Right(l.max)",
    "        val l = stdata.filter(_.isRight).map(_.right.get)\n        if (l.isEmpty) Left(\"No data\")\n        else Right(l.max)",
    "        val (left, right) = stdata.partition(_.isLeft)\n        if (left.isEmpty) {\n            val max = right.map(_.right.get).max\n            Right(max)\n        } else {\n            Left(left.map(_.left.get).mkString(\"\\n\"))\n        }",
    "        val (strs, nums) = stdata.partition(_.isLeft)\n        if (strs.isEmpty) Right(nums.map(_.right.get).max)\n        else Left(strs.map(_.left.get).mkString(\",\"))",
    "        val data = stdata.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        })\n        val lefts = data.filter(x => x match {\n            case Left(s) => true\n            case Right(l) => false\n        })\n        val rights = data.filter(x => x match {\n            case Left(s) => false\n            case Right(l) => true\n        })\n        if (lefts.length > 0) {\n            Left(lefts.map(x => x match {\n                case Left(s) => s\n            }).mkString(\",\"))\n        } else {\n            Right(rights.map(x => x match {\n                case Right(l) => l\n            }).max)\n        }",
    "        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)",
    "        val stdata_map = stdata.map(x => x match {\n            case Left(s) => (s, 0)\n            case Right(l) => (l.toString, l)\n        })\n        val stdata_map_group = stdata_map.groupBy(_._1)\n        val stdata_map_group_max = stdata_map_group.map(x => (x._1, x._2.map(_._2).max))\n        val stdata_map_group_max_list = stdata_map_group_max.toList\n        val stdata_map_group_max_list_sort = stdata_map_group_max_list.sortBy(_._2)\n        val stdata_map_group_max_list_sort_reverse = stdata_map_group_max_list_sort.reverse\n        val stdata_map_group_max_list_sort_reverse_head = stdata_map_group_max_list_sort_reverse.head\n        val stdata_map_group_max_list_sort_reverse_head_key = stdata_map_group_max_list_sort_reverse_head._1\n        val stdata_map_group_max_list_sort_reverse_head_value = stdata_map_group_max_list_sort_reverse_head._2\n        if (stdata_map_group_max_list_sort_reverse_head_key.forall(_.isDigit)) Right(stdata_map_group_max_list_sort_reverse_head_value)\n        else Left(stdata_map_group_max_list_sort_reverse_head_key)",
    "        val (lefts, rights) = stdata.partition(_.isLeft)\n        if (lefts.isEmpty) {\n            Right(rights.map(_.right.get).max)\n        } else {\n            Left(lefts.map(_.left.get).mkString(\",\"))\n        }",
    "        val data = stdata.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        })\n        val sum = data.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        }).filter(x => x match {\n            case Left(s) => false\n            case Right(l) => true\n        }).map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        }).foldLeft(0L)((a, b) => a + b.right.get)\n        val count = data.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        }).filter(x => x match {\n            case Left(s) => false\n            case Right(l) => true\n        }).map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        }).foldLeft(0)((a, b) => a + 1)\n        val avg = sum / count\n        val max = data.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        }).filter(x => x match {\n            case Left(s) => false\n            case Right(l) => true\n        }).map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        }).foldLeft(0L)((a, b) => max(a, b.right.get))\n        if (count == 0) Left(\"No data\") else Right(max)",
    "        var max = 0L\n        for (i <- stdata) {\n            i match {\n                case Left(s) => return Left(s)\n                case Right(l) => if (l > max) max = l\n            }\n        }\n        Right(max)",
    "        val l = stdata.filter(_.isRight).map(_.right.get)\n        if (l.isEmpty) Left(\"No data\") else Right(l.max)",
    "        val l = stdata.filter(_.isRight).map(_.right.get)\n        if (l.isEmpty) Left(\"No data\")\n        else Right(l.max)",
    "        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) {\n            Left(\"No data\")\n        } else {\n            Right(data.max)\n        }",
    "        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)",
    "        val longs = stdata.filter(_.isRight).map(_.right.get)\n        if (longs.isEmpty) Left(\"No longs\")\n        else Right(longs.max)",
    "        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)",
    "        if (stdata.isEmpty) Left(\"Empty list\")\n        else if (stdata.forall(_.isLeft)) Left(\"All elements are strings\")\n        else if (stdata.forall(_.isRight)) Right(stdata.map(_.right.get).max)\n        else Left(\"List contains both strings and numbers\")",
    "        val l = stdata.filter(_.isRight).map(_.right.get)\n        if (l.isEmpty) Left(\"No data\")\n        else Right(l.max)",
    "        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)",
    "        val data = stdata.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        })\n        val lefts = data.filter(x => x match {\n            case Left(s) => true\n            case Right(l) => false\n        })\n        if (lefts.length > 0) {\n            return lefts.head\n        }\n        val rights = data.filter(x => x match {\n            case Left(s) => false\n            case Right(l) => true\n        })\n        if (rights.length == 0) {\n            return Left(\"No data\")\n        }\n        val max = rights.map(x => x match {\n            case Left(s) => 0\n            case Right(l) => l\n        }).max\n        return Right(max)",
    "        val l = stdata.filter(_.isRight).map(_.right.get).sorted\n        if (l.isEmpty) Left(\"No data\")\n        else Right(l.last)",
    "        var max = 0L\n        var maxStr = \"\"\n        for (e <- stdata) {\n            e match {\n                case Left(str) => {\n                    if (str.length > maxStr.length) {\n                        maxStr = str\n                        max = str.length\n                    }\n                }\n                case Right(num) => {\n                    if (num > max) {\n                        max = num\n                        maxStr = \"\"\n                    }\n                }\n            }\n        }\n        if (maxStr == \"\") Right(max) else Left(maxStr)",
    "        val (lefts, rights) = stdata.partition(_.isLeft)\n        if (lefts.isEmpty) {\n            val max = rights.map(_.right.get).max\n            Right(max)\n        } else {\n            Left(lefts.map(_.left.get).mkString(\",\"))\n        }",
    "        val l = stdata.filter(_.isRight).map(_.right.get)\n        if (l.isEmpty) Left(\"No numeric data\")\n        else Right(l.max)",
    "        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)",
    "        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)",
    "        val max = stdata.foldLeft(0L)((a, b) => {\n            b match {\n                case Left(s) => a\n                case Right(n) => max(a, n)\n            }\n        })\n        if (max == 0L) Left(\"No data\") else Right(max)",
    "        val (l, r) = stdata.partition(_.isLeft)\n        if (l.isEmpty) Right(r.map(_.right.get).max)\n        else Left(l.map(_.left.get).mkString(\"\\n\"))",
    "        val l = stdata.filter(_.isRight).map(_.right.get)\n        if (l.isEmpty) Left(\"No data\")\n        else Right(l.max)",
    "        val lst = stdata.filter(_.isRight).map(_.right.get)\n        if (lst.isEmpty) Left(\"No data\")\n        else Right(lst.max)",
    "        val data = stdata.filter(x => x.isRight).map(x => x.right.get)\n        if (data.length == 0) Left(\"No data\")\n        else Right(data.max)",
    "        val data = stdata.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        })\n        val lefts = data.filter(x => x match {\n            case Left(s) => true\n            case Right(l) => false\n        })\n        if (lefts.length > 0) {\n            Left(lefts.head.left.get)\n        } else {\n            Right(data.map(x => x match {\n                case Left(s) => 0\n                case Right(l) => l\n            }).max)\n        }",
    "        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)",
    "        var maxAggregate = 0L\n        var maxAggregateString = \"\"\n        var maxAggregateStringLength = 0\n        var maxAggregateStringLengthCount = 0\n        var maxAggregateStringLengthCountMax = 0\n        var maxAggregateStringLengthCountMaxString = \"\"\n        var maxAggregateStringLengthCountMaxStringLength = 0\n        var maxAggregateStringLengthCountMaxStringLengthCount = 0\n        var maxAggregateStringLengthCountMaxStringLengthCountMax = 0\n        var maxAggregateStringLengthCountMaxStringLengthCountMaxString = \"\"\n        var maxAggregateStringLengthCountMaxStringLengthCountMaxStringLength = 0\n        var maxAggregateStringLengthCountMaxStringLengthCountMaxStringLengthCount = 0\n        var maxAggregateStringLengthCountMaxStringLengthCountMaxStringLengthCountMax = 0\n        var maxAggregateStringLengthCountMaxStringLengthCountMaxStringLengthCountMaxString = \"\"\n        var maxAggregateStringLengthCountMaxStringLengthCountMaxStringLengthCountMaxStringLength = 0\n        var maxAggregateStringLengthCountMaxStringLengthCountMaxStringLengthCountMaxStringLengthCount = 0\n        var maxAggregateStringLengthCountMaxStringLengthCountMaxStringLengthCountMaxStringLengthCountMax = 0\n        var maxAggregateStringLengthCountMaxStringLengthCountMaxStringLengthCountMaxStringLengthCountMaxString = \"\"\n        var maxAggregateStringLengthCountMaxStringLengthCountMaxStringLengthCountMaxStringLengthCountMaxStringLength = 0\n        var maxAggregateStringLengthCountMaxStringLengthCountMaxStringLengthCountMaxStringLengthCountMaxStringLengthCount = 0\n        var maxAggregateStringLengthCountMaxStringLengthCountMaxStringLengthCountMaxStringLengthCountMaxStringLengthCountMax = 0\n        var maxAggregateStringLengthCountMaxStringLengthCountMaxStringLengthCountMaxStringLengthCountMaxStringLengthCountMaxString = \"\"\n        var maxAggregateStringLengthCountMaxStringLengthCountMaxStringLengthCountMaxStringLengthCountMaxStringLengthCountMaxStringLength = 0\n        var maxAggregateStringLengthCountMaxStringLengthCountMaxStringLengthCountMaxStringLengthCountMaxStringLengthCountMaxStringLengthCount = 0\n        var maxAggregateStringLengthCountMaxStringLengthCountMaxStringLengthCountMaxStringLengthCountMaxStringLengthCountMaxStringLengthCountMax = 0\n        var maxAggregateStringLengthCountMaxString",
    "        val lst = stdata.filter(x => x.isRight).map(x => x.right.get)\n        if (lst.isEmpty) Left(\"No data\")\n        else Right(lst.max)",
    "        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)",
    "        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)",
    "        val (str, num) = stdata.partition(_.isLeft)\n        if (str.isEmpty) Right(num.map(_.right.get).max)\n        else Left(\"Error: String found\")",
    "        val (strs, nums) = stdata.partition(_.isLeft)\n        if (strs.length > 0) Left(\"Error\")\n        else Right(nums.map(_.right.get).max)",
    "        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)",
    "        val (strs, nums) = stdata.partition(_.isLeft)\n        if (strs.length > 0) Left(\"error\")\n        else Right(nums.map(_.right.get).max)",
    "        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)",
    "        val l = stdata.filter(_.isRight).map(_.right.get)\n        if (l.isEmpty) Left(\"No data\")\n        else Right(l.max)",
    "        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)",
    "        val (l, r) = stdata.partition(_.isLeft)\n        if (l.isEmpty) {\n            val max = r.map(_.right.get).max\n            Right(max)\n        } else {\n            Left(l.map(_.left.get).mkString(\",\"))\n        }",
    "        val (lefts, rights) = stdata.partition(_.isLeft)\n        if (lefts.isEmpty) {\n            val max = rights.map(_.right.get).max\n            Right(max)\n        } else {\n            Left(lefts.map(_.left.get).mkString(\"\\n\"))\n        }",
    "        val lst = stdata.filter(_.isRight).map(_.right.get)\n        if (lst.isEmpty) Left(\"No data\")\n        else Right(lst.max)",
    "        val data = stdata.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        })\n        val lefts = data.filter(x => x.isLeft)\n        if (lefts.length > 0) {\n            return lefts(0)\n        }\n        val rights = data.filter(x => x.isRight)\n        val longs = rights.map(x => x match {\n            case Right(l) => l\n        })\n        val max = longs.max\n        return Right(max)",
    "        val (strs, nums) = stdata.partition(_.isLeft)\n        if (strs.isEmpty) {\n            Right(nums.map(_.right.get).max)\n        } else {\n            Left(strs.map(_.left.get).max)\n        }",
    "        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)",
    "        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)",
    "        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)",
    "        val (strs, nums) = stdata.partition(_.isLeft)\n        if (strs.isEmpty) {\n            Right(nums.map(_.right.get).max)\n        } else {\n            Left(strs.map(_.left.get).mkString(\" \"))\n        }",
    "        val l = stdata.filter(_.isRight).map(_.right.get)\n        if (l.isEmpty) Left(\"No numeric data\")\n        else Right(l.max)",
    "        val l = stdata.filter(_.isRight).map(_.right.get)\n        if (l.isEmpty) Left(\"Empty list\")\n        else Right(l.max)",
    "        val data = stdata.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        })\n        val lefts = data.filter(x => x match {\n            case Left(s) => true\n            case Right(l) => false\n        })\n        if (lefts.length > 0) {\n            return lefts(0)\n        }\n        val rights = data.filter(x => x match {\n            case Left(s) => false\n            case Right(l) => true\n        })\n        if (rights.length == 0) {\n            return Left(\"No data\")\n        }\n        val max = rights.map(x => x match {\n            case Left(s) => 0\n            case Right(l) => l\n        }).max\n        return Right(max)",
    "        val data = stdata.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        })\n        val lefts = data.filter(x => x match {\n            case Left(s) => true\n            case Right(l) => false\n        })\n        if (lefts.length > 0) {\n            return lefts(0)\n        }\n        val rights = data.filter(x => x match {\n            case Left(s) => false\n            case Right(l) => true\n        })\n        val rights2 = rights.map(x => x match {\n            case Left(s) => 0\n            case Right(l) => l\n        })\n        val max = rights2.max\n        return Right(max)",
    "        val data = stdata.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        })\n        val lefts = data.filter(x => x match {\n            case Left(s) => true\n            case Right(l) => false\n        })\n        if (lefts.size > 0) {\n            return lefts.head\n        }\n        Right(data.map(x => x match {\n            case Left(s) => 0\n            case Right(l) => l\n        }).max)",
    "        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)",
    "        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)",
    "        val data : List[Long] = stdata.map(x => x match {\n            case Left(s) => 0\n            case Right(l) => l\n        })\n        val max = data.max\n        if (max == 0) Left(\"No data\") else Right(max)",
    "        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.length == 0) Left(\"No data\")\n        else Right(data.max)",
    "        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)",
    "        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.size == 0) Left(\"No data\")\n        else Right(data.max)",
    "        val max = stdata.foldLeft(0L)((a, b) => {\n            b match {\n                case Left(x) => a\n                case Right(x) => max(a, x)\n            }\n        })\n        Right(max)",
    "        val (str, num) = stdata.partition(_.isLeft)\n        if (str.length > 0) Left(str.head.left.get)\n        else Right(num.map(_.right.get).max)",
    "        val l = stdata.filter(_.isRight).map(_.right.get)\n        if (l.isEmpty) Left(\"No data\")\n        else Right(l.max)",
    "        var max = 0L\n        var max_str = \"\"\n        for (i <- stdata) {\n            i match {\n                case Left(str) => {\n                    max_str = str\n                }\n                case Right(num) => {\n                    max = max + num\n                }\n            }\n        }\n        if (max_str == \"\") {\n            Right(max)\n        } else {\n            Left(max_str)\n        }",
    "        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)",
    "        var max = 0L\n        var maxString = \"\"\n        var maxStringCount = 0\n        var maxLongCount = 0\n        for (i <- stdata) {\n            i match {\n                case Left(s) => {\n                    maxStringCount += 1\n                    maxString = s\n                }\n                case Right(l) => {\n                    maxLongCount += 1\n                    max = max + l\n                }\n            }\n        }\n        if (maxStringCount > maxLongCount) Left(maxString) else Right(max)",
    "        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.length == 0) Left(\"No data\")\n        else Right(data.max)",
    "        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)",
    "        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty)\n            Left(\"No data\")\n        else\n            Right(data.max)",
    "        val data = stdata.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        })\n        val lefts = data.filter(x => x.isLeft)\n        if (lefts.length > 0) {\n            Left(lefts.map(x => x match {\n                case Left(s) => s\n            }).mkString(\"\\n\"))\n        } else {\n            val rights = data.filter(x => x.isRight)\n            val max = rights.map(x => x match {\n                case Right(l) => l\n            }).max\n            Right(max)\n        }",
    "        val (str, num) = stdata.partition(_.isLeft)\n        if (str.length > 0) Left(str.head.left.get)\n        else Right(num.map(_.right.get).max)",
    "        val (l, r) = stdata.partition(_.isLeft)\n        if (l.isEmpty) {\n            val max = r.map(_.right.get).max\n            Right(max)\n        } else {\n            Left(l.map(_.left.get).mkString(\",\"))\n        }",
    "        val (strs, nums) = stdata.partition(_.isLeft)\n        if (strs.isEmpty) Right(nums.map(_.right.get).max)\n        else Left(strs.map(_.left.get).mkString(\",\"))",
    "        if (stdata.isEmpty) Left(\"Empty list\")\n        else {\n            val (lefts, rights) = stdata.partition(_.isLeft)\n            if (lefts.isEmpty) Right(rights.map(_.right.get).max)\n            else Left(lefts.map(_.left.get).mkString(\"\\n\"))\n        }",
    "        val sdata = stdata.filter(_.isRight).map(_.right.get)\n        if (sdata.length == 0) Left(\"No data\")\n        else Right(sdata.max)",
    "        val data = stdata.map(x => x.right.getOrElse(0L))\n        val max = data.max\n        val min = data.min\n        val sum = data.sum\n        val avg = sum / data.length\n        val result = max + min + sum + avg\n        Right(result)",
    "        val (str, num) = stdata.partition(_.isLeft)\n        if (str.isEmpty) {\n            val max = num.map(_.right.get).max\n            Right(max)\n        } else {\n            Left(\"Error\")\n        }",
    "        val (str, num) = stdata.partition(_.isLeft)\n        if (str.isEmpty) Right(num.map(_.right.get).max)\n        else Left(\"Error: String found\")",
    "        val data = stdata.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        })\n        val lefts = data.filter(x => x match {\n            case Left(s) => true\n            case Right(l) => false\n        })\n        if (lefts.length > 0) {\n            return lefts(0)\n        }\n        val rights = data.filter(x => x match {\n            case Left(s) => false\n            case Right(l) => true\n        })\n        val max = rights.map(x => x match {\n            case Left(s) => 0\n            case Right(l) => l\n        }).max\n        return Right(max)",
    "        var max = 0L\n        for (i <- stdata) {\n            if (i.isRight) {\n                val v = i.right.get\n                if (v > max) max = v\n            }\n        }\n        return Right(max)",
    "        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)",
    "        val data = stdata.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        })\n        val lefts = data.filter(x => x match {\n            case Left(s) => true\n            case Right(l) => false\n        })\n        if (lefts.size > 0) {\n            return lefts(0)\n        }\n        val rights = data.filter(x => x match {\n            case Left(s) => false\n            case Right(l) => true\n        })\n        if (rights.size == 0) {\n            return Left(\"No data\")\n        }\n        val max = rights.map(x => x match {\n            case Left(s) => 0\n            case Right(l) => l\n        }).max\n        return Right(max)",
    "        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)",
    "        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)",
    "        val data = stdata.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        })\n        val lefts = data.filter(x => x match {\n            case Left(s) => true\n            case Right(l) => false\n        })\n        val rights = data.filter(x => x match {\n            case Left(s) => false\n            case Right(l) => true\n        })\n        if (lefts.length > 0) {\n            return lefts(0)\n        }\n        if (rights.length == 0) {\n            return Left(\"Empty list\")\n        }\n        val max = rights.maxBy(x => x match {\n            case Left(s) => 0\n            case Right(l) => l\n        })\n        return max",
    "        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)",
    "        val l = stdata.filter(x => x.isRight).map(x => x.right.get)\n        if (l.isEmpty) Left(\"No data\")\n        else Right(l.max)",
    "        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) {\n            Left(\"No data\")\n        } else {\n            Right(data.max)\n        }",
    "        val (strs, longs) = stdata.partition(_.isLeft)\n        if (strs.isEmpty) {\n            Right(longs.map(_.right.get).max)\n        } else {\n            Left(\"No Longs\")\n        }",
    "        val data = stdata.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        })\n        val lefts = data.filter(x => x match {\n            case Left(s) => true\n            case Right(l) => false\n        })\n        if (lefts.length > 0) {\n            return lefts(0)\n        }\n        val rights = data.filter(x => x match {\n            case Left(s) => false\n            case Right(l) => true\n        })\n        if (rights.length == 0) {\n            return Left(\"No data\")\n        }\n        return Right(rights.map(x => x match {\n            case Left(s) => 0\n            case Right(l) => l\n        }).max)",
    "        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)",
    "        val sdata = stdata.filter(_.isRight).map(_.right.get)\n        if (sdata.isEmpty) Left(\"No data\")\n        else Right(sdata.max)",
    "        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)",
    "        var max = 0L\n        for (elem <- stdata) {\n            elem match {\n                case Left(s) => return Left(s)\n                case Right(l) => max = max max l\n            }\n        }\n        return Right(max)",
    "        val l = stdata.filter(_.isRight).map(_.right.get).sorted\n        if (l.length == 0) Left(\"No data\")\n        else Right(l.last)",
    "        val data = stdata.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        })\n        val lefts = data.filter(x => x match {\n            case Left(s) => true\n            case Right(l) => false\n        })\n        if (lefts.length > 0) {\n            return lefts(0)\n        }\n        val rights = data.filter(x => x match {\n            case Left(s) => false\n            case Right(l) => true\n        })\n        if (rights.length == 0) {\n            return Left(\"No data\")\n        }\n        val max = rights.map(x => x match {\n            case Left(s) => 0\n            case Right(l) => l\n        }).max\n        return Right(max)",
    "        val (str, num) = stdata.partition(_.isLeft)\n        if (str.isEmpty) {\n            Right(num.map(_.right.get).max)\n        } else {\n            Left(str.map(_.left.get).mkString(\" \"))\n        }",
    "        val longList = stdata.filter(_.isRight).map(_.right.get)\n        if (longList.isEmpty) Left(\"No longs\")\n        else Right(longList.max)",
    "        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)",
    "        val (str, num) = stdata.partition(_.isLeft)\n        if (str.isEmpty) Right(num.map(_.right.get).max)\n        else Left(\"Error: String found in list\")",
    "        var max = 0L\n        var maxString = \"\"\n        for (elem <- stdata) {\n            elem match {\n                case Left(str) => maxString = str\n                case Right(num) => max = max + num\n            }\n        }\n        if (maxString == \"\") {\n            Right(max)\n        } else {\n            Left(maxString)\n        }",
    "        val (lefts, rights) = stdata.partition(_.isLeft)\n        if (lefts.nonEmpty) Left(lefts.map(_.left.get).mkString(\",\"))\n        else Right(rights.map(_.right.get).max)",
    "        val stdata_ = stdata.filter(_.isRight)\n        if (stdata_.length == 0) {\n            Left(\"No data\")\n        } else {\n            val stdata__ = stdata_.map(_.right.get)\n            val max = stdata__.max\n            val min = stdata__.min\n            Right(max - min)\n        }",
    "        val data = stdata.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        })\n        val lefts = data.filter(x => x match {\n            case Left(s) => true\n            case Right(l) => false\n        })\n        val rights = data.filter(x => x match {\n            case Left(s) => false\n            case Right(l) => true\n        })\n        if (lefts.length > 0) {\n            Left(lefts.head.left.get)\n        } else {\n            Right(rights.map(x => x.right.get).max)\n        }",
    "        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)",
    "        val longs = stdata.filter(_.isRight).map(_.right.get)\n        if (longs.isEmpty) Left(\"No longs found\") else Right(longs.max)",
    "        val l = stdata.filter(_.isRight).map(_.right.get)\n        if (l.isEmpty) Left(\"No data\")\n        else Right(l.max)",
    "        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)",
    "        val (strs, nums) = stdata.partition(_.isLeft)\n        if (strs.length > 0) Left(\"Error: List contains strings\")\n        else Right(nums.map(_.right.get).max)",
    "        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No numeric data\")\n        else Right(data.max)",
    "        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)",
    "        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)",
    "        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)",
    "        val max = stdata.filter(_.isRight).map(_.right.get).max\n        val min = stdata.filter(_.isRight).map(_.right.get).min\n        if (max > 0 && min > 0) Right(max - min)\n        else Left(\"No data\")",
    "        val data = stdata.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        })\n        val lefts = data.filter(x => x match {\n            case Left(s) => true\n            case Right(l) => false\n        })\n        if (lefts.length != 0) {\n            return lefts(0)\n        }\n        val rights = data.filter(x => x match {\n            case Left(s) => false\n            case Right(l) => true\n        })\n        if (rights.length == 0) {\n            return Left(\"No data\")\n        }\n        val max = rights.map(x => x match {\n            case Left(s) => 0\n            case Right(l) => l\n        }).max\n        return Right(max)",
    "        val data = stdata.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        })\n        val lefts = data.filter(x => x match {\n            case Left(s) => true\n            case Right(l) => false\n        })\n        if (lefts.length > 0) return lefts(0)\n        val rights = data.filter(x => x match {\n            case Left(s) => false\n            case Right(l) => true\n        })\n        if (rights.length == 0) return Left(\"No Data\")\n        return Right(rights.map(x => x match {\n            case Left(s) => 0\n            case Right(l) => l\n        }).max)",
    "        val l = stdata.filter(_.isRight).map(_.right.get)\n        if (l.size == 0) Left(\"No data\")\n        else Right(l.max)",
    "        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)",
    "        val l = stdata.filter(_.isRight).map(_.right.get)\n        if (l.isEmpty) Left(\"No data\")\n        else Right(l.max)",
    "        val data = stdata.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        })\n        val lefts = data.filter(x => x match {\n            case Left(s) => true\n            case Right(l) => false\n        })\n        val rights = data.filter(x => x match {\n            case Left(s) => false\n            case Right(l) => true\n        })\n        if (lefts.length > 0) {\n            return lefts.head\n        }\n        return Right(rights.map(x => x match {\n            case Left(s) => 0\n            case Right(l) => l\n        }).max)",
    "        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)",
    "        val (str, num) = stdata.partition(_.isLeft)\n        if (str.isEmpty) {\n            Right(num.map(_.right.get).max)\n        } else {\n            Left(str.map(_.left.get).mkString(\",\"))\n        }",
    "        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)",
    "        val data = stdata.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        })\n        val lefts = data.filter(x => x match {\n            case Left(s) => true\n            case Right(l) => false\n        })\n        if (lefts.length > 0) {\n            return lefts.head\n        }\n        val rights = data.filter(x => x match {\n            case Left(s) => false\n            case Right(l) => true\n        })\n        val rightsum = rights.map(x => x match {\n            case Left(s) => 0\n            case Right(l) => l\n        }).sum\n        return Right(rightsum)",
    "        val (strs, nums) = stdata.partition(_.isLeft)\n        if (strs.isEmpty) Right(nums.map(_.right.get).sum)\n        else Left(strs.map(_.left.get).mkString(\",\"))",
    "        var max = 0L\n        for (i <- stdata) {\n            i match {\n                case Left(s) => return Left(s)\n                case Right(l) => if (l > max) max = l\n            }\n        }\n        Right(max)",
    "        val l = stdata.filter(_.isRight).map(_.right.get)\n        if (l.isEmpty) Left(\"No data\")\n        else Right(l.max)",
    "        val data = stdata.map(x => x match {\n            case Left(s) => (s, 0)\n            case Right(l) => (l.toString, l)\n        })\n        val max = data.map(x => x._2).max\n        val maxdata = data.filter(x => x._2 == max)\n        if (maxdata.length == 1) Right(maxdata(0)._2)\n        else Left(maxdata.map(x => x._1).mkString(\",\"))",
    "        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)",
    "        val data = stdata.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        })\n        val lefts = data.filter(x => x match {\n            case Left(s) => true\n            case Right(l) => false\n        })\n        if (lefts.length > 0) {\n            return lefts(0)\n        }\n        val rights = data.filter(x => x match {\n            case Left(s) => false\n            case Right(l) => true\n        })\n        val rights2 = rights.map(x => x match {\n            case Left(s) => 0\n            case Right(l) => l\n        })\n        val sum = rights2.foldLeft(0L)((x, y) => x + y)\n        return Right(sum)",
    "        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.length == 0) Left(\"No data\")\n        else Right(data.max)",
    "        val data = stdata.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        })\n        val lefts = data.filter(x => x.isLeft)\n        if (lefts.length > 0) {\n            return lefts.head\n        }\n        val rights = data.filter(x => x.isRight)\n        if (rights.length == 0) {\n            return Left(\"No data\")\n        }\n        return Right(rights.map(x => x.right.get).max)",
    "        val data = stdata.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        })\n        val l = data.filter(x => x match {\n            case Left(s) => false\n            case Right(l) => true\n        })\n        if (l.isEmpty) {\n            Left(\"No data\")\n        } else {\n            Right(l.map(x => x match {\n                case Left(s) => 0\n                case Right(l) => l\n            }).max)\n        }",
    "        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)",
    "        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.length == 0) Left(\"No data\")\n        else Right(data.max)",
    "        val (lefts, rights) = stdata.partition(_.isLeft)\n        if (lefts.isEmpty) {\n            val max = rights.map(_.right.get).max\n            Right(max)\n        } else {\n            Left(lefts.map(_.left.get).mkString(\",\"))\n        }",
    "        val (strs, nums) = stdata.partition(_.isLeft)\n        if (strs.isEmpty) Right(nums.map(_.right.get).max)\n        else Left(strs.map(_.left.get).mkString(\", \"))",
    "        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.length == 0) Left(\"No data\")\n        else Right(data.max)",
    "        val data = stdata.map(x => x match {\n            case Right(y) => y\n            case Left(y) => 0\n        })\n        val max = data.max\n        val min = data.min\n        val sum = data.sum\n        val avg = sum / data.length\n        val agg = max + min + sum + avg\n        if (agg > Int.MaxValue) Left(\"Aggregate is too large\")\n        else Right(agg)",
    "        val data = stdata.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        })\n        val lefts = data.filter(x => x match {\n            case Left(s) => true\n            case Right(l) => false\n        })\n        if (lefts.length > 0) {\n            return lefts(0)\n        }\n        val rights = data.filter(x => x match {\n            case Left(s) => false\n            case Right(l) => true\n        })\n        val max = rights.map(x => x match {\n            case Left(s) => 0\n            case Right(l) => l\n        }).max\n        return Right(max)",
    "        val (strings, longs) = stdata.partition(_.isLeft)\n        if (strings.isEmpty) {\n            Right(longs.map(_.right.get).sum)\n        } else {\n            Left(strings.map(_.left.get).mkString(\",\"))\n        }",
    "        val data = stdata.map(x => x.right.getOrElse(0L))\n        val max = data.max\n        val min = data.min\n        val sum = data.sum\n        val count = data.length\n        val avg = sum / count\n        val diff = max - min\n        val maxAgg = List(max, min, sum, count, avg, diff).max\n        Right(maxAgg)",
    "        val (str, num) = stdata.partition(_.isLeft)\n        if (str.length > 0) Left(str.map(_.left.get).mkString(\",\"))\n        else Right(num.map(_.right.get).max)",
    "        var max = 0L\n        var max_string = \"\"\n        for (i <- stdata) {\n            i match {\n                case Left(s) => {\n                    if (s.length > max_string.length) max_string = s\n                }\n                case Right(n) => {\n                    if (n > max) max = n\n                }\n            }\n        }\n        if (max_string.length > 0) Left(max_string) else Right(max)",
    "        val sum = stdata.foldLeft(0L)((acc, x) => x match {\n            case Left(s) => acc\n            case Right(l) => acc + l\n        })\n        val count = stdata.foldLeft(0L)((acc, x) => x match {\n            case Left(s) => acc\n            case Right(l) => acc + 1\n        })\n        if (count == 0) Left(\"No data\")\n        else Right(sum / count)",
    "        val data = stdata.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        })\n        val sum = data.foldLeft(0L)((x, y) => y match {\n            case Left(s) => x\n            case Right(l) => x + l\n        })\n        val count = data.foldLeft(0L)((x, y) => y match {\n            case Left(s) => x\n            case Right(l) => x + 1\n        })\n        if (count == 0) Left(\"No data\")\n        else Right(sum / count)",
    "        val data = stdata.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        })\n        val max = data.foldLeft(Long.MinValue)((x, y) => y match {\n            case Left(s) => x\n            case Right(l) => max(x, l)\n        })\n        if (max == Long.MinValue) Left(\"No data\")\n        else Right(max)",
    "        val (str, num) = stdata.partition(_.isLeft)\n        if (str.size > 0) Left(str.map(_.left.get).mkString(\",\"))\n        else Right(num.map(_.right.get).max)",
    "        val data = stdata.map(x => x match {\n            case Left(x) => Left(x)\n            case Right(x) => Right(x)\n        })\n        val sum = data.filter(_.isRight).map(_.right.get).sum\n        val count = data.filter(_.isRight).length\n        if (count == 0) Left(\"No data\")\n        else Right(sum / count)",
    "        val l = stdata.filter(_.isRight).map(_.right.get)\n        if (l.isEmpty) Left(\"No data\")\n        else Right(l.max)",
    "        val (strs, nums) = stdata.partition(_.isLeft)\n        if (strs.isEmpty) {\n            Right(nums.map(_.right.get).sum)\n        } else {\n            Left(strs.map(_.left.get).mkString(\" \"))\n        }",
    "        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)",
    "        val (strs, nums) = stdata.partition(_.isLeft)\n        if (strs.isEmpty) {\n            Right(nums.map(_.right.get).max)\n        } else {\n            Left(strs.map(_.left.get).mkString(\",\"))\n        }",
    "        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)",
    "        val (str, num) = stdata.partition(_.isLeft)\n        if (str.isEmpty) Right(num.map(_.right.get).max)\n        else Left(\"Error: String found\")",
    "        val stdata_right = stdata.filter(_.isRight)\n        if (stdata_right.isEmpty) Left(\"No data\")\n        else Right(stdata_right.map(_.right.get).max)",
    "        val data = stdata.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        })\n        val lefts = data.filter(x => x match {\n            case Left(s) => true\n            case Right(l) => false\n        })\n        val rights = data.filter(x => x match {\n            case Left(s) => false\n            case Right(l) => true\n        })\n        if (lefts.length > 0) {\n            return lefts.head\n        }\n        if (rights.length == 0) {\n            return Left(\"No data\")\n        }\n        val max = rights.map(x => x match {\n            case Left(s) => 0\n            case Right(l) => l\n        }).max\n        return Right(max)",
    "        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)",
    "        val data = stdata.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        })\n        val max = data.filter(x => x match {\n            case Left(s) => false\n            case Right(l) => true\n        }).map(x => x match {\n            case Left(s) => 0\n            case Right(l) => l\n        }).max\n        val maxIndex = data.indexOf(Right(max))\n        data(maxIndex)",
    "        val (strs, nums) = stdata.partition(_.isLeft)\n        if (strs.isEmpty) {\n            Right(nums.map(_.right.get).max)\n        } else {\n            Left(strs.map(_.left.get).mkString(\",\"))\n        }",
    "        val data = stdata.map(x => x match {\n            case Left(s) => (s, 0)\n            case Right(l) => (l.toString, l)\n        })\n        val max = data.maxBy(_._2)\n        if (max._2 == 0) Left(max._1) else Right(max._2)",
    "        val (strs, nums) = stdata.partition(_.isLeft)\n        if (strs.isEmpty) Right(nums.map(_.right.get).sum)\n        else Left(strs.map(_.left.get).mkString(\",\"))",
    "        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)",
    "        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)",
    "        val l = stdata.filter(_.isRight).map(_.right.get)\n        if (l.isEmpty) Left(\"No data\") else Right(l.max)",
    "        val (strs, longs) = stdata.partition(_.isLeft)\n        if (strs.isEmpty) Right(longs.map(_.right.get).max)\n        else Left(\"No Longs\")",
    "        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)"
  ]
}