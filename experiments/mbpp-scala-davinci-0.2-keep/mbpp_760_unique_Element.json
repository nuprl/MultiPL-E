{
  "name": "mbpp_760_unique_Element",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether a list of numbers contains only one distinct element or not.\n    def uniqueElement(arr : List[Long]) : Boolean = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_760_unique_Element.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(uniqueElement((List[Long](1l.toLong, 1l.toLong, 1l.toLong))) == (true));\n    assert(uniqueElement((List[Long](1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong))) == (false));\n    assert(uniqueElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val set = HashSet[Long]()\n        for (i <- arr) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        true",
    "        val set = new HashSet[Long]\n        for (i <- arr) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        true",
    "        val set = arr.toSet\n        set.size == 1",
    "        var map = new HashMap[Long, Int]\n        for (i <- arr) {\n            if (map.contains(i)) map(i) += 1\n            else map += (i -> 1)\n        }\n        map.size == 1",
    "        val set = new HashSet[Long]\n        for (i <- arr) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        true",
    "        var map = Map[Long, Int]()\n        for (i <- arr) {\n            if (map.contains(i)) map(i) += 1\n            else map(i) = 1\n        }\n        map.size == 1",
    "        if (arr.length == 1) return true\n        else {\n            val set = new HashSet[Long]\n            for (i <- arr) {\n                if (set.contains(i)) return false\n                else set += i\n            }\n            return true\n        }",
    "        val s = arr.toSet\n        s.size == 1",
    "        val set = new HashSet[Long]\n        for (i <- arr) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        true",
    "        val set = new HashSet[Long]\n        for (i <- arr) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        true",
    "        var map = Map[Long, Int]()\n        for (i <- arr) {\n            if (map.contains(i)) map(i) += 1\n            else map(i) = 1\n        }\n        map.size == 1",
    "        val set = new HashSet[Long]\n        for (i <- arr) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        true",
    "        val set = HashSet[Long]()\n        for (i <- arr) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        true",
    "        if (arr.length == 0) return false\n        var set = Set[Long]()\n        for (i <- 0 until arr.length) {\n            if (set.contains(arr(i))) return false\n            set += arr(i)\n        }\n        return true",
    "        val set = new HashSet[Long]\n        for (i <- arr) {\n            if (set.contains(i)) return false\n            set.add(i)\n        }\n        return true",
    "        val set = new HashSet[Long]\n        for (i <- arr) {\n            if (set.contains(i)) return false\n            set += i\n        }\n        true",
    "        if (arr.length == 0) return false\n        var map = Map[Long, Int]()\n        for (i <- 0 until arr.length) {\n            if (map.contains(arr(i))) map(arr(i)) += 1\n            else map(arr(i)) = 1\n        }\n        for (i <- map) if (i._2 > 1) return false\n        return true",
    "        val set = arr.toSet\n        set.size == 1",
    "        val set = arr.toSet\n        set.size == 1",
    "        var map = Map[Long, Int]()\n        for (i <- arr) {\n            if (map.contains(i)) map(i) += 1\n            else map += (i -> 1)\n        }\n        for (i <- map) {\n            if (i._2 > 1) return false\n        }\n        return true"
  ]
}