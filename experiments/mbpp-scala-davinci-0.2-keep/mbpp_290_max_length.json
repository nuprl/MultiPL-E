{
  "name": "mbpp_290_max_length",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_290_max_length.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val max = list1.map(x => x.length).max\n        val maxList = list1.filter(x => x.length == max)\n        if (maxList.length > 1) Right(maxList.flatten)\n        else Left(maxList.flatten.sum)",
    "        if (list1.isEmpty) Left(0)\n        else {\n            val max = list1.map(_.length).max\n            val maxList = list1.filter(_.length == max)\n            if (maxList.length == 1) Right(maxList.head)\n            else Left(max)\n        }",
    "        val maxLength = list1.map(x => x.length).max\n        val maxLengthList = list1.filter(x => x.length == maxLength)\n        if (maxLengthList.length == 1) Left(maxLength)\n        else Right(maxLengthList.flatten)",
    "        if (list1.length == 0) Left(0)\n        else {\n            val max = list1.maxBy(_.length)\n            Right(max)\n        }",
    "        val max = list1.map(x => x.length).max\n        val maxList = list1.filter(x => x.length == max)\n        if (maxList.length == 1) Left(max) else Right(maxList.flatten)",
    "        val max = list1.map(list2 => list2.length).max\n        val list3 = list1.filter(list2 => list2.length == max)\n        if (list3.length == 1) Left(list3.head.sum) else Right(list3.flatten)",
    "        if (list1.isEmpty) {\n            Left(0)\n        } else {\n            val max = list1.maxBy(_.length)\n            Right(max)\n        }",
    "        if (list1.isEmpty) Left(0)\n        else {\n            val max = list1.map(_.length).max\n            val list2 = list1.filter(_.length == max)\n            if (list2.length == 1) Right(list2.head)\n            else Left(max)\n        }",
    "        var max = 0\n        var maxList : List[Long] = List()\n        for (list <- list1) {\n            if (list.length > max) {\n                max = list.length\n                maxList = list\n            }\n        }\n        if (max == 0) Left(0) else Right(maxList)",
    "        if (list1.isEmpty) Left(0)\n        else {\n            val max = list1.map(_.length).max\n            Right(list1.filter(_.length == max).head)\n        }",
    "        val max = list1.map(_.length).max\n        val list2 = list1.filter(_.length == max)\n        if (list2.length == 1) Left(max) else Right(list2.flatten)",
    "        val max = list1.map(x => x.length).max\n        val maxList = list1.filter(x => x.length == max)\n        if (maxList.length == 1) Left(max) else Right(maxList.flatten)",
    "        val max = list1.map(x => x.length).max\n        val maxList = list1.filter(x => x.length == max)\n        if (maxList.length == 1) Left(max) else Right(maxList.flatten)",
    "        val max = list1.map(x => x.length).max\n        val maxList = list1.filter(x => x.length == max)\n        if (maxList.length > 1) Right(maxList.flatten)\n        else Left(maxList.flatten.sum)",
    "        if (list1.isEmpty) Left(0)\n        else {\n            val max = list1.map(_.length).max\n            val maxList = list1.filter(_.length == max)\n            if (maxList.length == 1) Right(maxList(0))\n            else Left(max)\n        }",
    "        val max = list1.map(x => x.length).max\n        val maxList = list1.filter(x => x.length == max)\n        if (maxList.length == 1) Left(max) else Right(maxList.flatten)",
    "        if (list1.isEmpty) Left(0)\n        else {\n            val max = list1.map(_.length).max\n            Right(list1.filter(_.length == max).head)\n        }",
    "        if (list1.length == 0) Left(0)\n        else {\n            val max = list1.maxBy(_.length)\n            Right(max)\n        }",
    "        val max = list1.map(x => x.length).max\n        val maxList = list1.filter(x => x.length == max)\n        if (maxList.length == 1) Left(max)\n        else Right(maxList.flatten)",
    "        val list2 = list1.filter(x => x.length == list1.map(x => x.length).max)\n        if (list2.length == 1) Left(list2.head.length) else Right(list2.head)",
    "        var max = 0\n        var maxList : List[Long] = List()\n        for (list <- list1) {\n            if (list.length > max) {\n                max = list.length\n                maxList = list\n            }\n        }\n        if (max == 0) Left(0) else Right(maxList)",
    "        var max = 0\n        var maxList : List[Long] = List()\n        for (list <- list1) {\n            if (list.length > max) {\n                max = list.length\n                maxList = list\n            }\n        }\n        if (max == 0) Left(0) else Right(maxList)",
    "        if (list1.isEmpty) Left(0)\n        else {\n            val max = list1.map(x => x.length).max\n            val result = list1.filter(x => x.length == max)\n            if (result.length == 1) Right(result.head)\n            else Left(max)\n        }",
    "        if (list1.isEmpty) Left(0)\n        else {\n            val max = list1.map(x => x.length).max\n            Right(list1.filter(x => x.length == max).head)\n        }",
    "        var max : Long = 0\n        var maxList : List[Long] = List()\n        for (list <- list1) {\n            if (list.length > max) {\n                max = list.length\n                maxList = list\n            }\n        }\n        if (max == 0) Left(0) else Right(maxList)",
    "        val max = list1.map(x => x.length).max\n        val maxList = list1.filter(x => x.length == max)\n        if (maxList.length == 1) Left(max) else Right(maxList.flatten)",
    "        if (list1.isEmpty) Left(0)\n        else {\n            val max = list1.maxBy(_.length)\n            Right(max)\n        }",
    "        val list2 = list1.filter(x => x.length == list1.map(y => y.length).max)\n        if (list2.length == 1) Left(list2.head.length)\n        else Right(list2.head)",
    "        val max = list1.maxBy(_.length)\n        if (max.length == 0) Left(0)\n        else Right(max)",
    "        if (list1.isEmpty) Left(0)\n        else {\n            val max = list1.maxBy(_.length)\n            Right(max)\n        }",
    "        val list2 = list1.filter(x => x.length > 0)\n        if (list2.length == 0) Left(0)\n        else Right(list2.maxBy(x => x.length))",
    "        val list2 = list1.filter(x => x.length > 0)\n        if (list2.length == 0) Left(0)\n        else Right(list2.maxBy(x => x.length))",
    "        val max = list1.map(x => x.length).max\n        val maxList = list1.filter(x => x.length == max)\n        if (maxList.length == 1) {\n            Right(maxList.head)\n        } else {\n            Left(max.toLong)\n        }",
    "        val max = list1.map(x => x.length).max\n        val maxList = list1.filter(x => x.length == max)\n        if (maxList.length == 1) Left(max)\n        else Right(maxList.flatten)",
    "        if (list1.isEmpty) Left(0)\n        else {\n            val max = list1.maxBy(_.length)\n            Right(max)\n        }",
    "        var max = 0\n        var maxList : List[Long] = List()\n        for (list <- list1) {\n            if (list.length > max) {\n                max = list.length\n                maxList = list\n            }\n        }\n        if (max == 0) Left(0) else Right(maxList)",
    "        if (list1.isEmpty) Left(0)\n        else {\n            val max = list1.map(_.length).max\n            val maxList = list1.filter(_.length == max)\n            if (maxList.length == 1) Right(maxList.head)\n            else Left(max)\n        }",
    "        if (list1.isEmpty) Left(0)\n        else {\n            val max = list1.map(x => x.length).max\n            Right(list1.filter(x => x.length == max).head)\n        }",
    "        if (list1.isEmpty) Left(0)\n        else {\n            val max = list1.map(_.length).max\n            val maxList = list1.filter(_.length == max)\n            if (maxList.length == 1) Right(maxList(0))\n            else Left(max)\n        }",
    "        val max = list1.map(x => x.length).max\n        val list2 = list1.filter(x => x.length == max)\n        if (list2.length == 1) Left(list2.head.length)\n        else Right(list2.head)",
    "        val max = list1.maxBy(_.length)\n        if (max.length == 0) Left(0) else Right(max)",
    "        val max = list1.map(_.length).max\n        val maxList = list1.filter(_.length == max)\n        if (maxList.length == 1) Left(max)\n        else Right(maxList.flatten)",
    "        if (list1.isEmpty) Left(0)\n        else {\n            val max = list1.map(_.length).max\n            val maxList = list1.filter(_.length == max)\n            if (maxList.length == 1) Right(maxList.head)\n            else Left(max)\n        }",
    "        if (list1.isEmpty) Left(0)\n        else {\n            val max = list1.map(_.length).max\n            val maxList = list1.filter(_.length == max)\n            if (maxList.length == 1) Right(maxList(0))\n            else Left(max)\n        }",
    "        val max = list1.map(_.length).max\n        val maxList = list1.filter(_.length == max)\n        if (maxList.length == 1) Left(max)\n        else Right(maxList.flatten)",
    "        val list2 = list1.filter(x => x.length == list1.map(x => x.length).max)\n        if (list2.length == 1) Left(list2.head.length)\n        else Right(list2.flatten)",
    "        val list2 = list1.sortWith((a, b) => a.length > b.length)\n        if (list2.length == 0) Left(0)\n        else if (list2.length == 1) Right(list2(0))\n        else if (list2(0).length == list2(1).length) Right(list2(0))\n        else Right(list2(0))",
    "        val max = list1.map(x => x.length).max\n        val maxList = list1.filter(x => x.length == max)\n        if (maxList.length == 1) Left(max) else Right(maxList.head)",
    "        var max = 0\n        var maxList : List[Long] = List()\n        for (list <- list1) {\n            if (list.length > max) {\n                max = list.length\n                maxList = list\n            }\n        }\n        if (max == 0) Left(0) else Right(maxList)",
    "        var max = 0\n        var maxList : List[Long] = List()\n        for (list <- list1) {\n            if (list.length > max) {\n                max = list.length\n                maxList = list\n            }\n        }\n        if (max == 0) Left(0) else Right(maxList)",
    "        if (list1.length == 0) Left(0)\n        else {\n            var max = list1(0)\n            for (i <- 1 until list1.length) {\n                if (list1(i).length > max.length) max = list1(i)\n            }\n            Right(max)\n        }",
    "        var max = 0\n        var maxList : List[Long] = Nil\n        for (list <- list1) {\n            if (list.length > max) {\n                max = list.length\n                maxList = list\n            }\n        }\n        if (max == 0) Left(0) else Right(maxList)",
    "        if (list1.isEmpty) Left(0)\n        else {\n            val max = list1.map(_.length).max\n            val maxList = list1.filter(_.length == max)\n            if (maxList.length == 1) Right(maxList(0))\n            else Left(max)\n        }",
    "        if (list1.isEmpty) Left(0)\n        else {\n            val max = list1.map(_.length).max\n            val maxList = list1.filter(_.length == max)\n            if (maxList.length == 1) Right(maxList(0))\n            else Left(max)\n        }",
    "        if (list1.isEmpty) Left(0)\n        else {\n            val max = list1.map(_.length).max\n            val maxList = list1.filter(_.length == max)\n            if (maxList.length == 1) Right(maxList(0))\n            else Left(max)\n        }",
    "        val maxLength = list1.map(x => x.length).max\n        val maxList = list1.filter(x => x.length == maxLength)\n        if (maxList.length == 1) Right(maxList.head)\n        else Left(maxLength)",
    "        val max = list1.map(_.length).max\n        val maxList = list1.filter(_.length == max)\n        if (maxList.length == 1) Left(max) else Right(maxList.flatten)",
    "        if (list1.isEmpty) Left(0)\n        else {\n            val max = list1.map(_.length).max\n            val maxList = list1.filter(_.length == max)\n            if (maxList.length == 1) Right(maxList(0))\n            else Left(max)\n        }",
    "        if (list1.length == 0) Left(0)\n        else {\n            var max = 0\n            var maxList : List[Long] = List()\n            for (list <- list1) {\n                if (list.length > max) {\n                    max = list.length\n                    maxList = list\n                }\n            }\n            Right(maxList)\n        }",
    "        val max = list1.map(x => x.length).max\n        val maxList = list1.filter(x => x.length == max)\n        if (maxList.length == 1) Right(maxList.head)\n        else Left(max.toLong)",
    "        val max = list1.map(x => x.length).max\n        val result = list1.filter(x => x.length == max)\n        if (result.length == 1) Left(max)\n        else Right(result.flatten)",
    "        val max = list1.map(x => x.length).max\n        val maxList = list1.filter(x => x.length == max)\n        if (maxList.length == 1) Left(max) else Right(maxList.flatten)",
    "        val max = list1.map(_.length).max\n        val list2 = list1.filter(_.length == max)\n        if (list2.length == 1) Left(list2.head.length)\n        else Right(list2.flatten)",
    "        var max = 0\n        var maxList : List[Long] = List()\n        for (list <- list1) {\n            if (list.length > max) {\n                max = list.length\n                maxList = list\n            }\n        }\n        if (max == 0) Left(0) else Right(maxList)",
    "        val list2 = list1.filter(x => x.length > 0)\n        if (list2.length == 0) Left(0)\n        else {\n            val list3 = list2.sortBy(x => x.length)\n            val list4 = list3.filter(x => x.length == list3(list3.length - 1).length)\n            Right(list4.flatten)\n        }",
    "        val max = list1.maxBy(_.length)\n        if (max.length == 0) Left(0) else Right(max)",
    "        val list2 = list1.filter(x => x.length == list1.map(y => y.length).max)\n        if (list2.length == 1) Left(list2.head.length)\n        else Right(list2.flatten)",
    "        if (list1.isEmpty) Left(0)\n        else {\n            val max = list1.map(_.length).max\n            val maxList = list1.filter(_.length == max)\n            if (maxList.length == 1) Right(maxList.head)\n            else Left(max)\n        }",
    "        if (list1.isEmpty) Left(0)\n        else {\n            val max = list1.maxBy(_.length)\n            Right(max)\n        }",
    "        if (list1.isEmpty) Left(0)\n        else {\n            val max = list1.map(_.length).max\n            val maxList = list1.filter(_.length == max)\n            if (maxList.length == 1) Right(maxList.head)\n            else Left(max)\n        }",
    "        val max = list1.map(x => x.length).max\n        val list2 = list1.filter(x => x.length == max)\n        if (list2.length == 1) Left(max)\n        else Right(list2.flatten)",
    "        if (list1.isEmpty) Left(0)\n        else {\n            val max = list1.map(_.length).max\n            val maxList = list1.filter(_.length == max)\n            if (maxList.length == 1) Right(maxList.head)\n            else Left(max)\n        }",
    "        val max = list1.map(x => x.length).max\n        val maxList = list1.filter(x => x.length == max)\n        if (maxList.length == 1) Left(max) else Right(maxList.flatten)",
    "        val list2 = list1.filter(x => x.length > 0)\n        if (list2.length == 0) Left(0)\n        else Right(list2.maxBy(x => x.length))",
    "        if (list1.isEmpty) Left(0)\n        else {\n            val max = list1.map(_.length).max\n            val maxList = list1.filter(_.length == max)\n            if (maxList.length == 1) Right(maxList(0))\n            else Left(max)\n        }",
    "        val max = list1.maxBy(_.length)\n        if (max.length == 0) Left(0)\n        else Right(max)",
    "        if (list1.isEmpty) {\n            Left(0)\n        } else {\n            val max = list1.map(x => x.length).max\n            val maxList = list1.filter(x => x.length == max)\n            Right(maxList.head)\n        }",
    "        val max = list1.foldLeft(0)((acc, list) => max(acc, list.length))\n        val maxList = list1.filter(list => list.length == max)\n        if (maxList.length == 1) Left(max)\n        else Right(maxList.flatten)",
    "        var max = 0\n        var maxList : List[Long] = List()\n        for (list <- list1) {\n            if (list.length > max) {\n                max = list.length\n                maxList = list\n            }\n        }\n        if (max == 0) Left(0)\n        else Right(maxList)",
    "        val maxLength = list1.map(x => x.length).max\n        val maxList = list1.filter(x => x.length == maxLength)\n        if (maxList.length == 1) Left(maxLength) else Right(maxList.flatten)",
    "        val max = list1.map(_.length).max\n        val list2 = list1.filter(_.length == max)\n        if (list2.length == 1) Left(max)\n        else Right(list2.flatten)",
    "        if (list1.isEmpty) Left(0)\n        else {\n            val max = list1.map(_.length).max\n            val maxList = list1.filter(_.length == max)\n            if (maxList.length == 1) Right(maxList.head)\n            else Left(max)\n        }",
    "        if (list1.isEmpty) Left(0)\n        else {\n            val max = list1.map(_.length).max\n            val list2 = list1.filter(_.length == max)\n            if (list2.length == 1) Right(list2.head)\n            else Left(max)\n        }",
    "        val maxLength = list1.map(_.length).max\n        val maxLengthList = list1.filter(_.length == maxLength)\n        if (maxLengthList.length == 1) Left(maxLength) else Right(maxLengthList.flatten)",
    "        var max = 0\n        var maxList : List[Long] = List()\n        for (list <- list1) {\n            if (list.length > max) {\n                max = list.length\n                maxList = list\n            }\n        }\n        if (max == 0) Left(0) else Right(maxList)",
    "        val max = list1.map(_.length).max\n        val result = list1.filter(_.length == max)\n        if (result.length == 1) Left(result.head.length) else Right(result.flatten)",
    "        if (list1.isEmpty) Left(0)\n        else {\n            val max = list1.maxBy(_.length)\n            Right(max)\n        }",
    "        val max = list1.map(x => x.length).max\n        val maxList = list1.filter(x => x.length == max)\n        if (maxList.length == 1) {\n            Left(max)\n        } else {\n            Right(maxList.flatten)\n        }",
    "        var maxLength = 0\n        var maxList : List[Long] = List()\n        for (list <- list1) {\n            if (list.length > maxLength) {\n                maxLength = list.length\n                maxList = list\n            }\n        }\n        if (maxLength == 0) {\n            Left(0)\n        }\n        else {\n            Right(maxList)\n        }",
    "        val max = list1.map(x => x.length).max\n        val maxList = list1.filter(x => x.length == max)\n        if (maxList.length == 1) Left(max)\n        else Right(maxList.flatten)",
    "        var max : Long = 0\n        var maxList : List[Long] = List()\n        for (list <- list1) {\n            if (list.length > max) {\n                max = list.length\n                maxList = list\n            }\n        }\n        if (max == 0) Left(max) else Right(maxList)",
    "        if (list1.isEmpty) Left(0)\n        else {\n            val max = list1.map(_.length).max\n            Right(list1.filter(_.length == max).head)\n        }",
    "        if (list1.isEmpty) Left(0)\n        else {\n            val max = list1.maxBy(_.length)\n            Right(max)\n        }",
    "        if (list1.isEmpty) Left(0)\n        else {\n            val max = list1.maxBy(_.length)\n            Right(max)\n        }",
    "        var max = 0\n        var maxList : List[Long] = List()\n        for (list <- list1) {\n            if (list.length > max) {\n                max = list.length\n                maxList = list\n            }\n        }\n        if (max == 0) Left(0) else Right(maxList)",
    "        if (list1.isEmpty) Left(0)\n        else {\n            val max = list1.map(_.length).max\n            val maxList = list1.filter(_.length == max)\n            if (maxList.length == 1) Right(maxList(0))\n            else Left(max)\n        }",
    "        var max = 0\n        var maxList : List[Long] = List()\n        for (list <- list1) {\n            if (list.length > max) {\n                max = list.length\n                maxList = list\n            }\n        }\n        if (max == 0) Left(0) else Right(maxList)",
    "        val list2 = list1.map(x => (x.length, x))\n        val list3 = list2.sortBy(x => x._1)\n        val list4 = list3.filter(x => x._1 == list3.last._1)\n        val list5 = list4.map(x => x._2)\n        if (list5.length == 1) Left(list5.head.length) else Right(list5.head)",
    "        if (list1.isEmpty) Left(0)\n        else {\n            val max = list1.map(x => x.length).max\n            val list2 = list1.filter(x => x.length == max)\n            Right(list2.flatten)\n        }",
    "        val max = list1.map(x => x.length).max\n        val maxList = list1.filter(x => x.length == max)\n        if (maxList.length == 1) Left(max) else Right(maxList.flatten)",
    "        val list2 = list1.filter(x => x.length == list1.map(y => y.length).max)\n        if (list2.length == 1) Left(list2.head.length) else Right(list2.flatten)",
    "        val list2 = list1.filter(x => x.length == list1.map(y => y.length).max)\n        if (list2.length == 1) Left(list2.head.length)\n        else Right(list2.flatten)",
    "        if (list1.isEmpty) Left(0)\n        else {\n            val max = list1.map(x => x.length).max\n            val maxList = list1.filter(x => x.length == max)\n            if (maxList.length == 1) Right(maxList(0))\n            else Left(maxList.length)\n        }",
    "        if (list1.isEmpty) Left(0)\n        else {\n            val max = list1.map(x => x.length).max\n            val maxList = list1.filter(x => x.length == max)\n            if (maxList.length == 1) Right(maxList(0))\n            else Left(max)\n        }",
    "        if (list1.isEmpty) Left(0)\n        else {\n            val max = list1.maxBy(_.length)\n            Right(max)\n        }",
    "        var max = 0\n        var maxList : List[Long] = List()\n        for (list <- list1) {\n            if (list.length > max) {\n                max = list.length\n                maxList = list\n            }\n        }\n        if (max == 0) Left(0) else Right(maxList)",
    "        if (list1.isEmpty) Left(0)\n        else {\n            val max = list1.map(x => x.length).max\n            val maxList = list1.filter(x => x.length == max)\n            if (maxList.length == 1) Right(maxList(0))\n            else Left(maxList.length)\n        }",
    "        val max = list1.map(x => x.length).max\n        val maxList = list1.filter(x => x.length == max)\n        if (maxList.length == 1) {\n            Left(max)\n        } else {\n            Right(maxList.flatten)\n        }",
    "        var max = 0\n        var maxList = List[Long]()\n        for (list <- list1) {\n            if (list.length > max) {\n                max = list.length\n                maxList = list\n            }\n        }\n        if (max == 0) Left(0) else Right(maxList)",
    "        if (list1.isEmpty) Left(0)\n        else {\n            val max = list1.map(_.length).max\n            val maxList = list1.filter(_.length == max)\n            if (maxList.length == 1) Right(maxList(0))\n            else Left(max)\n        }",
    "        if (list1.isEmpty) Left(0)\n        else {\n            val max = list1.map(x => x.length).max\n            Right(list1.filter(x => x.length == max).head)\n        }",
    "        val max = list1.map(x => x.length).max\n        val list2 = list1.filter(x => x.length == max)\n        if (list2.length == 1) Left(list2(0).length) else Right(list2(0))",
    "        if (list1.isEmpty) Left(0)\n        else {\n            val max = list1.map(_.length).max\n            Right(list1.filter(_.length == max).head)\n        }",
    "        var max = 0\n        var maxList : List[Long] = List()\n        for (list <- list1) {\n            if (list.length > max) {\n                max = list.length\n                maxList = list\n            }\n        }\n        if (max == 0) Left(0) else Right(maxList)",
    "        if (list1.isEmpty) {\n            Left(0)\n        } else {\n            val max = list1.map(_.length).max\n            val maxList = list1.filter(_.length == max)\n            if (maxList.length == 1) {\n                Right(maxList(0))\n            } else {\n                Left(max)\n            }\n        }",
    "        val list2 = list1.map(x => x.length)\n        val max = list2.max\n        val index = list2.indexOf(max)\n        if (index == -1) Left(0)\n        else Right(list1(index))",
    "        if (list1.length == 0) {\n            Left(0)\n        } else {\n            val max = list1.map(x => x.length).max\n            val maxList = list1.filter(x => x.length == max)\n            Right(maxList.flatten)\n        }",
    "        var max = 0\n        var maxList : List[Long] = List()\n        for (list <- list1) {\n            if (list.length > max) {\n                max = list.length\n                maxList = list\n            }\n        }\n        if (max == 0) Left(0) else Right(maxList)",
    "        if (list1.isEmpty) Left(0)\n        else {\n            val max = list1.map(_.length).max\n            val maxList = list1.filter(_.length == max)\n            if (maxList.length == 1) Right(maxList(0))\n            else Left(maxList.length)\n        }",
    "        val maxLength = list1.map(_.length).max\n        val maxList = list1.filter(_.length == maxLength)\n        if (maxList.length == 1) Left(maxLength) else Right(maxList.head)",
    "        if (list1.isEmpty) Left(0)\n        else {\n            val max = list1.map(_.length).max\n            val maxList = list1.filter(_.length == max)\n            if (maxList.length == 1) Right(maxList(0))\n            else Left(max)\n        }",
    "        if (list1.isEmpty) Left(0)\n        else {\n            val max = list1.map(_.length).max\n            val maxList = list1.filter(_.length == max)\n            if (maxList.length == 1) Right(maxList(0))\n            else Left(max)\n        }",
    "        val max = list1.map(x => x.length).max\n        val list2 = list1.filter(x => x.length == max)\n        if (list2.length == 1) {\n            Left(max)\n        } else {\n            Right(list2.flatten)\n        }",
    "        val max = list1.map(_.length).max\n        val list2 = list1.filter(_.length == max)\n        if (list2.length == 1) Left(max)\n        else Right(list2.flatten)",
    "        val max = list1.map(x => x.length).max\n        val list2 = list1.filter(x => x.length == max)\n        if (list2.length == 1) Left(list2(0).sum) else Right(list2.flatten)",
    "        val max = list1.map(_.length).max\n        val list2 = list1.filter(_.length == max)\n        if (list2.length == 1) Left(max) else Right(list2.flatten)",
    "        val list2 = list1.filter(x => x.length == list1.map(x => x.length).max)\n        if (list2.length == 1) Left(list2.head.length)\n        else Right(list2.flatten)",
    "        var max = 0\n        var maxList : List[Long] = List()\n        for (list <- list1) {\n            if (list.length > max) {\n                max = list.length\n                maxList = list\n            }\n        }\n        if (max == 0) Left(0)\n        else Right(maxList)",
    "        val max = list1.map(x => x.length).max\n        val maxList = list1.filter(x => x.length == max)\n        if (maxList.length == 1) {\n            Right(maxList.head)\n        } else {\n            Left(max.toLong)\n        }",
    "        if (list1.isEmpty) Left(0)\n        else {\n            var max = list1(0).length\n            var maxList = list1(0)\n            for (i <- 1 until list1.length) {\n                if (list1(i).length > max) {\n                    max = list1(i).length\n                    maxList = list1(i)\n                }\n            }\n            Right(maxList)\n        }",
    "        if (list1.isEmpty) Left(0)\n        else {\n            val max = list1.map(_.length).max\n            val result = list1.filter(_.length == max)\n            if (result.length == 1) Right(result.head)\n            else Left(max)\n        }",
    "        val maxLength = list1.map(_.length).max\n        val maxList = list1.filter(_.length == maxLength)\n        if (maxList.length == 1) Left(maxLength) else Right(maxList.flatten)",
    "        val max = list1.map(_.length).max\n        val result = list1.filter(_.length == max)\n        if (result.length == 1) Left(max) else Right(result.flatten)",
    "        if (list1.isEmpty) Left(0)\n        else {\n            val max = list1.map(_.length).max\n            val maxList = list1.filter(_.length == max)\n            if (maxList.length == 1) Right(maxList(0))\n            else Left(max)\n        }",
    "        val max = list1.map(x => x.length).max\n        val result = list1.filter(x => x.length == max)\n        if (result.length == 1) Left(result.head.length) else Right(result.flatten)",
    "        if (list1.isEmpty) Left(0)\n        else {\n            val max = list1.map(x => x.length).max\n            val maxList = list1.filter(x => x.length == max)\n            if (maxList.length == 1) Right(maxList(0))\n            else Left(max)\n        }",
    "        val max = list1.maxBy(_.length)\n        if (max.length == 0) Left(0)\n        else Right(max)",
    "        if (list1.isEmpty) Left(0)\n        else {\n            val max = list1.map(_.length).max\n            val maxList = list1.filter(_.length == max)\n            if (maxList.length == 1) Right(maxList.head)\n            else Left(max)\n        }",
    "        if (list1.isEmpty) Left(0)\n        else {\n            val max = list1.map(x => x.length).max\n            val maxList = list1.filter(x => x.length == max)\n            if (maxList.length == 1) Right(maxList.head)\n            else Left(max)\n        }",
    "        val max = list1.map(x => x.length).max\n        val maxList = list1.filter(x => x.length == max)\n        if (maxList.length == 1) Left(max)\n        else Right(maxList.flatten)",
    "        var max = 0\n        var maxList : List[Long] = List()\n        for (list <- list1) {\n            if (list.length > max) {\n                max = list.length\n                maxList = list\n            }\n        }\n        if (max == 0) Left(0) else Right(maxList)",
    "        if (list1.length == 0) Left(0)\n        else {\n            val max = list1.maxBy(_.length)\n            Right(max)\n        }",
    "        if (list1.isEmpty) Left(0)\n        else {\n            val max = list1.map(_.length).max\n            val maxList = list1.filter(_.length == max)\n            if (maxList.length == 1) Right(maxList.head)\n            else Left(maxList.length)\n        }",
    "        val max = list1.map(x => x.length).max\n        val maxList = list1.filter(x => x.length == max)\n        if (maxList.length == 1) Left(max) else Right(maxList.flatten)",
    "        if (list1.isEmpty) Left(0)\n        else {\n            val max = list1.maxBy(_.length)\n            Right(max)\n        }",
    "        val max = list1.map(x => x.length).max\n        val maxList = list1.filter(x => x.length == max)\n        if (maxList.length == 1) Left(max) else Right(maxList.flatten)",
    "        val max = list1.map(x => x.length).max\n        val maxList = list1.filter(x => x.length == max)\n        if (maxList.length == 1) {\n            Right(maxList(0))\n        } else {\n            Left(max)\n        }",
    "        val max = list1.map(_.length).max\n        val maxList = list1.filter(_.length == max)\n        if (maxList.length == 1) Left(max)\n        else Right(maxList.flatten)",
    "        val max = list1.map(_.length).max\n        val maxList = list1.filter(_.length == max)\n        if (maxList.length == 1) Left(max) else Right(maxList.flatten)",
    "        if (list1.isEmpty) Left(0)\n        else {\n            val max = list1.map(_.length).max\n            val maxList = list1.filter(_.length == max)\n            if (maxList.length == 1) Right(maxList(0))\n            else Left(max)\n        }",
    "        var max = 0\n        var maxList : List[Long] = Nil\n        for (list <- list1) {\n            if (list.length > max) {\n                max = list.length\n                maxList = list\n            }\n        }\n        if (max == 0) Left(0) else Right(maxList)",
    "        if (list1.length == 0) {\n            Left(0)\n        } else {\n            val max = list1.map(_.length).max\n            val maxList = list1.filter(_.length == max)\n            Right(maxList.head)\n        }",
    "        val max = list1.map(_.length).max\n        val list2 = list1.filter(_.length == max)\n        if (list2.length == 1) Left(max) else Right(list2.flatten)",
    "        val max = list1.map(list2 => list2.length).max\n        val maxLists = list1.filter(list2 => list2.length == max)\n        if (maxLists.length == 1) Left(max) else Right(maxLists.flatten)",
    "        var max = 0\n        var maxList : List[Long] = List()\n        for (list <- list1) {\n            if (list.length > max) {\n                max = list.length\n                maxList = list\n            }\n        }\n        if (max == 0) Left(0) else Right(maxList)",
    "        val max = list1.map(x => x.length).max\n        val maxList = list1.filter(x => x.length == max)\n        if (maxList.length == 1) Left(max) else Right(maxList.flatten)",
    "        if (list1.isEmpty) {\n            Left(0)\n        } else {\n            val max = list1.map(x => x.length).max\n            Right(list1.filter(x => x.length == max).head)\n        }",
    "        val list2 = list1.filter(x => x.length > 0)\n        if (list2.length == 0) {\n            Left(0)\n        } else {\n            val max = list2.maxBy(x => x.length)\n            Right(max)\n        }",
    "        val max = list1.map(x => x.length).max\n        val maxList = list1.filter(x => x.length == max)\n        if (maxList.length == 1) Left(max)\n        else Right(maxList.flatten)",
    "        if (list1.isEmpty) Left(0)\n        else {\n            val max = list1.maxBy(_.length)\n            Right(max)\n        }",
    "        val max = list1.map(_.length).max\n        val maxList = list1.filter(_.length == max)\n        if (maxList.length == 1) Left(max) else Right(maxList.flatten)",
    "        if (list1.isEmpty) Left(0)\n        else {\n            val max = list1.maxBy(_.length)\n            Right(max)\n        }",
    "        if (list1.isEmpty) Left(0)\n        else {\n            val max = list1.map(_.length).max\n            val maxList = list1.filter(_.length == max)\n            if (maxList.length == 1) Right(maxList.head)\n            else Left(max)\n        }",
    "        if (list1.length == 0) Left(0)\n        else {\n            var max = list1(0).length\n            var maxList = list1(0)\n            for (i <- 1 until list1.length) {\n                if (list1(i).length > max) {\n                    max = list1(i).length\n                    maxList = list1(i)\n                }\n            }\n            Right(maxList)\n        }",
    "        val max = list1.map(_.length).max\n        val maxList = list1.filter(_.length == max)\n        if (maxList.length == 1) Left(max) else Right(maxList.flatten)",
    "        val max = list1.map(x => x.length).max\n        val list2 = list1.filter(x => x.length == max)\n        if (list2.length == 1) Left(list2(0).length) else Right(list2(0))",
    "        val max = list1.map(x => x.length).max\n        val result = list1.filter(x => x.length == max)\n        if (result.length == 1) Left(result(0).length)\n        else Right(result.flatten)",
    "        val max = list1.map(x => x.length).max\n        val list2 = list1.filter(x => x.length == max)\n        if (list2.length == 1) Left(list2(0).length)\n        else Right(list2.flatten)",
    "        if (list1.isEmpty) Left(0)\n        else {\n            val max = list1.map(_.length).max\n            val maxList = list1.filter(_.length == max)\n            if (maxList.length == 1) Right(maxList.head)\n            else Left(maxList.length)\n        }",
    "        if (list1.isEmpty)\n            Left(0)\n        else {\n            val max = list1.maxBy(_.length)\n            Right(max)\n        }",
    "        if (list1.isEmpty) Left(0)\n        else {\n            val max = list1.maxBy(_.length)\n            Right(max)\n        }",
    "        if (list1.isEmpty) Left(0)\n        else {\n            val max = list1.map(x => x.length).max\n            val maxList = list1.filter(x => x.length == max)\n            Right(maxList.flatten)\n        }",
    "        val max = list1.map(x => x.length).max\n        val maxList = list1.filter(x => x.length == max)\n        if (maxList.length == 1) Left(max) else Right(maxList.flatten)",
    "        val max = list1.map(x => x.length).max\n        if (max == 0) Left(0)\n        else Right(list1.filter(x => x.length == max).head)",
    "        val max = list1.map(_.length).max\n        if (max == 0) Left(0)\n        else Right(list1.filter(_.length == max).head)",
    "        if (list1.isEmpty) Left(0)\n        else {\n            val max = list1.map(_.length).max\n            val maxList = list1.filter(_.length == max)\n            if (maxList.length == 1) Right(maxList.head)\n            else Left(maxList.length)\n        }",
    "        if (list1.isEmpty) Left(0)\n        else {\n            val max = list1.map(_.length).max\n            Right(list1.filter(_.length == max).head)\n        }",
    "        if (list1.isEmpty) Left(0)\n        else {\n            val max = list1.map(_.length).max\n            val maxList = list1.filter(_.length == max)\n            if (maxList.length == 1) Right(maxList(0))\n            else Left(max)\n        }",
    "        val max = list1.foldLeft(0)((x, y) => max(x, y.length))\n        if (max == 0) Left(0)\n        else Right(list1.filter(_.length == max).head)",
    "        var max = 0\n        var maxList : List[Long] = List()\n        for (list <- list1) {\n            if (list.length > max) {\n                max = list.length\n                maxList = list\n            }\n        }\n        if (max == 0) Left(0) else Right(maxList)",
    "        if (list1.isEmpty) Left(0)\n        else {\n            val max = list1.map(_.length).max\n            val maxList = list1.filter(_.length == max)\n            if (maxList.length == 1) Right(maxList(0))\n            else Left(max)\n        }",
    "        val max = list1.map(_.length).max\n        val maxList = list1.filter(_.length == max)\n        if (maxList.length == 1) Left(max) else Right(maxList.flatten)",
    "        if (list1.length == 0) {\n            Left(0)\n        } else {\n            var max = 0\n            var maxList : List[Long] = List()\n            for (list <- list1) {\n                if (list.length > max) {\n                    max = list.length\n                    maxList = list\n                }\n            }\n            Right(maxList)\n        }",
    "        if (list1.isEmpty) Left(0)\n        else {\n            val max = list1.map(_.length).max\n            val maxList = list1.filter(_.length == max)\n            if (maxList.length == 1) Right(maxList(0))\n            else Left(max)\n        }",
    "        if (list1.isEmpty) Left(0)\n        else {\n            val max = list1.map(x => x.length).max\n            val maxList = list1.filter(x => x.length == max)\n            if (maxList.length == 1) Right(maxList(0))\n            else Left(max)\n        }",
    "        val max = list1.map(x => x.length).max\n        val maxList = list1.filter(x => x.length == max)\n        if (maxList.length == 1) Left(max)\n        else Right(maxList.flatten)",
    "        if (list1.isEmpty) Left(0)\n        else {\n            val max = list1.map(_.length).max\n            Right(list1.filter(_.length == max).head)\n        }",
    "        if (list1.isEmpty) Left(0)\n        else {\n            val max = list1.map(x => x.length).max\n            val list2 = list1.filter(x => x.length == max)\n            if (list2.length == 1) Right(list2.head)\n            else Left(max)\n        }",
    "        var max = 0\n        var maxList : List[Long] = Nil\n        for (list <- list1) {\n            if (list.length > max) {\n                max = list.length\n                maxList = list\n            }\n        }\n        if (max == 0) Left(0)\n        else Right(maxList)",
    "        val max = list1.map(x => x.length).max\n        val maxList = list1.filter(x => x.length == max)\n        if (maxList.length > 1) Right(maxList.flatten)\n        else Left(maxList.head.head)",
    "        if (list1.isEmpty) Left(0)\n        else {\n            val max = list1.map(_.length).max\n            val maxList = list1.filter(_.length == max)\n            if (maxList.length == 1) Right(maxList.head)\n            else Left(max)\n        }",
    "        val max = list1.map(x => x.length).max\n        val maxList = list1.filter(x => x.length == max)\n        if (maxList.length == 1) Left(max)\n        else Right(maxList.flatten)",
    "        val max = list1.map(x => x.length).max\n        val maxList = list1.filter(x => x.length == max)\n        if (maxList.length == 1) Left(max) else Right(maxList.flatten)",
    "        val max = list1.map(x => x.length).max\n        val maxList = list1.filter(x => x.length == max)\n        if (maxList.length == 1) Left(max) else Right(maxList.flatten)",
    "        if (list1.isEmpty) Left(0)\n        else {\n            val max = list1.map(_.length).max\n            val maxList = list1.filter(_.length == max)\n            if (maxList.length == 1) Right(maxList.head)\n            else Left(max)\n        }",
    "        if (list1.isEmpty) Left(0)\n        else {\n            val max = list1.maxBy(_.length)\n            Right(max)\n        }",
    "        var max = 0\n        var maxList : List[Long] = List()\n        for (list <- list1) {\n            if (list.length > max) {\n                max = list.length\n                maxList = list\n            }\n        }\n        if (max == 0) Left(0) else Right(maxList)",
    "        if (list1.isEmpty) Left(0)\n        else {\n            val max = list1.map(_.length).max\n            val maxList = list1.filter(_.length == max)\n            if (maxList.length == 1) Right(maxList.head)\n            else Left(max)\n        }",
    "        val max = list1.map(_.length).max\n        val list2 = list1.filter(_.length == max)\n        if (list2.length == 1) Left(max)\n        else Right(list2.flatten)",
    "        val max = list1.map(x => x.length).max\n        val list2 = list1.filter(x => x.length == max)\n        if (list2.length == 1) Left(max) else Right(list2.flatten)"
  ]
}