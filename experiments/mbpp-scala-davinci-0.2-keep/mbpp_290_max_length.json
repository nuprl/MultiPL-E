{
  "name": "mbpp_290_max_length",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list of maximum length in a list of lists.\n    def maxLength(list1 : List[List[Long]]) : Either[Long, List[Long]] = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_290_max_length.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(maxLength((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](1l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong)))).equals((4l, List[Long](10l.toLong, 12l.toLong, 14l.toLong, 15l.toLong))));\n    assert(maxLength((List[List[Long]](List[Long](5l.toLong), List[Long](15l.toLong, 20l.toLong, 25l.toLong)))).equals((3l, List[Long](15l.toLong, 20l.toLong, 25l.toLong))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val max = list1.map(x => x.length).max\n        val maxList = list1.filter(x => x.length == max)\n        if (maxList.length > 1) Right(maxList.flatten)\n        else Left(maxList.flatten.sum)",
    "        if (list1.isEmpty) Left(0)\n        else {\n            val max = list1.map(_.length).max\n            val maxList = list1.filter(_.length == max)\n            if (maxList.length == 1) Right(maxList.head)\n            else Left(max)\n        }",
    "        val maxLength = list1.map(x => x.length).max\n        val maxLengthList = list1.filter(x => x.length == maxLength)\n        if (maxLengthList.length == 1) Left(maxLength)\n        else Right(maxLengthList.flatten)",
    "        if (list1.length == 0) Left(0)\n        else {\n            val max = list1.maxBy(_.length)\n            Right(max)\n        }",
    "        val max = list1.map(x => x.length).max\n        val maxList = list1.filter(x => x.length == max)\n        if (maxList.length == 1) Left(max) else Right(maxList.flatten)",
    "        val max = list1.map(list2 => list2.length).max\n        val list3 = list1.filter(list2 => list2.length == max)\n        if (list3.length == 1) Left(list3.head.sum) else Right(list3.flatten)",
    "        if (list1.isEmpty) {\n            Left(0)\n        } else {\n            val max = list1.maxBy(_.length)\n            Right(max)\n        }",
    "        if (list1.isEmpty) Left(0)\n        else {\n            val max = list1.map(_.length).max\n            val list2 = list1.filter(_.length == max)\n            if (list2.length == 1) Right(list2.head)\n            else Left(max)\n        }",
    "        var max = 0\n        var maxList : List[Long] = List()\n        for (list <- list1) {\n            if (list.length > max) {\n                max = list.length\n                maxList = list\n            }\n        }\n        if (max == 0) Left(0) else Right(maxList)",
    "        if (list1.isEmpty) Left(0)\n        else {\n            val max = list1.map(_.length).max\n            Right(list1.filter(_.length == max).head)\n        }",
    "        val max = list1.map(_.length).max\n        val list2 = list1.filter(_.length == max)\n        if (list2.length == 1) Left(max) else Right(list2.flatten)",
    "        val max = list1.map(x => x.length).max\n        val maxList = list1.filter(x => x.length == max)\n        if (maxList.length == 1) Left(max) else Right(maxList.flatten)",
    "        val max = list1.map(x => x.length).max\n        val maxList = list1.filter(x => x.length == max)\n        if (maxList.length == 1) Left(max) else Right(maxList.flatten)",
    "        val max = list1.map(x => x.length).max\n        val maxList = list1.filter(x => x.length == max)\n        if (maxList.length > 1) Right(maxList.flatten)\n        else Left(maxList.flatten.sum)",
    "        if (list1.isEmpty) Left(0)\n        else {\n            val max = list1.map(_.length).max\n            val maxList = list1.filter(_.length == max)\n            if (maxList.length == 1) Right(maxList(0))\n            else Left(max)\n        }",
    "        val max = list1.map(x => x.length).max\n        val maxList = list1.filter(x => x.length == max)\n        if (maxList.length == 1) Left(max) else Right(maxList.flatten)",
    "        if (list1.isEmpty) Left(0)\n        else {\n            val max = list1.map(_.length).max\n            Right(list1.filter(_.length == max).head)\n        }",
    "        if (list1.length == 0) Left(0)\n        else {\n            val max = list1.maxBy(_.length)\n            Right(max)\n        }",
    "        val max = list1.map(x => x.length).max\n        val maxList = list1.filter(x => x.length == max)\n        if (maxList.length == 1) Left(max)\n        else Right(maxList.flatten)",
    "        val list2 = list1.filter(x => x.length == list1.map(x => x.length).max)\n        if (list2.length == 1) Left(list2.head.length) else Right(list2.head)"
  ]
}