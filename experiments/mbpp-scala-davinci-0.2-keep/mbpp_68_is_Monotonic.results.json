{
  "name": "mbpp_68_is_Monotonic",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_68_is_Monotonic.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var inc = true\n        var dec = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) inc = false\n            if (A(i) > A(i - 1)) dec = false\n        }\n        return inc || dec\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        return increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        return increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var isIncreasing = true\n        var isDecreasing = true\n        for (i <- 1 until A.size) {\n            if (A(i) < A(i - 1)) isIncreasing = false\n            if (A(i) > A(i - 1)) isDecreasing = false\n        }\n        return isIncreasing || isDecreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        return increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        return increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        val n = A.length\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until n) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        return increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i - 1) > A(i)) increasing = false\n            if (A(i - 1) < A(i)) decreasing = false\n        }\n        return increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        return increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        return increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var isIncreasing = true\n        var isDecreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) isIncreasing = false\n            if (A(i) > A(i - 1)) isDecreasing = false\n        }\n        isIncreasing || isDecreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        return increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        return increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        return increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        return increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var isIncreasing = true\n        var isDecreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) isIncreasing = false\n            if (A(i) > A(i - 1)) isDecreasing = false\n        }\n        return isIncreasing || isDecreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122913,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        return increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        return increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 0 until A.length - 1) {\n            if (A(i) > A(i + 1)) increasing = false\n            if (A(i) < A(i + 1)) decreasing = false\n        }\n        return increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122913,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        return increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var isIncreasing = true\n        var isDecreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) isIncreasing = false\n            if (A(i) > A(i - 1)) isDecreasing = false\n        }\n        return isIncreasing || isDecreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122913,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        return increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        return increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        return increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        return increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        return increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        return increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        return increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var isIncreasing = true\n        var isDecreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) isIncreasing = false\n            if (A(i) > A(i - 1)) isDecreasing = false\n        }\n        return isIncreasing || isDecreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122913,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        return increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        return increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        return increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        return increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        return increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        return increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        return increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        return increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        return increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        return increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        return increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i - 1) > A(i)) increasing = false\n            if (A(i - 1) < A(i)) decreasing = false\n        }\n        return increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        return increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        return increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        return increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 0 until A.length - 1) {\n            if (A(i) < A(i + 1)) decreasing = false\n            if (A(i) > A(i + 1)) increasing = false\n        }\n        return increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122913,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        return increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        val n = A.length\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until n) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        return increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122913,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        return increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        if (A.length == 1) return true\n        var i = 1\n        var increasing = true\n        var decreasing = true\n        while (i < A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n            i += 1\n        }\n        return increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122912,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        return increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        return increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        if (A.length <= 2) return true\n        var i = 1\n        var increasing = true\n        var decreasing = true\n        while (i < A.length) {\n            if (A(i) > A(i - 1)) decreasing = false\n            if (A(i) < A(i - 1)) increasing = false\n            i += 1\n        }\n        return increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122912,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        return increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        return increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        return increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        val n = A.length\n        var i = 0\n        var j = n - 1\n        while (i < n - 1 && A(i) <= A(i + 1)) i += 1\n        while (j > 0 && A(j - 1) <= A(j)) j -= 1\n        if (i == n - 1 || j == 0) return true\n        if (i == j) return false\n        val increasing = A(i) < A(j)\n        if (increasing) {\n            while (i < j) {\n                if (A(i) > A(i + 1)) return false\n                i += 1\n            }\n        } else {\n            while (i < j) {\n                if (A(i) < A(i + 1)) return false\n                i += 1\n            }\n        }\n        true\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122912,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp35ecchfi.scala:30)\n\tat Problem.main(tmp35ecchfi.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        return increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        val n = A.length\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until n) {\n            if (A(i - 1) > A(i)) increasing = false\n            if (A(i - 1) < A(i)) decreasing = false\n        }\n        increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122912,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        return increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        return increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        return increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        return increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        return increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        return increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        return increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        return increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i - 1) > A(i)) increasing = false\n            if (A(i - 1) < A(i)) decreasing = false\n        }\n        return increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        if (A.length == 0) return false\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        return increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122912,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        return increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        return increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        return increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var isIncreasing = true\n        var isDecreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) isIncreasing = false\n            if (A(i) > A(i - 1)) isDecreasing = false\n        }\n        isIncreasing || isDecreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        return increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        return increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        return increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 0 until A.length - 1) {\n            if (A(i) > A(i + 1)) increasing = false\n            if (A(i) < A(i + 1)) decreasing = false\n        }\n        return increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122913,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        return increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i-1)) increasing = false\n            if (A(i) > A(i-1)) decreasing = false\n        }\n        return increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122913,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        return increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 0 until A.length - 1) {\n            if (A(i) > A(i + 1)) increasing = false\n            if (A(i) < A(i + 1)) decreasing = false\n        }\n        return increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122913,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        return increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        return increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        return increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        return increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        return increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        return increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        return increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        return increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        return increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var isIncreasing = true\n        var isDecreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) isIncreasing = false\n            if (A(i) > A(i - 1)) isDecreasing = false\n        }\n        return isIncreasing || isDecreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122913,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        return increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        return increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var isIncreasing = true\n        var isDecreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) isIncreasing = false\n            if (A(i) > A(i - 1)) isDecreasing = false\n        }\n        return isIncreasing || isDecreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122913,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var isIncreasing = true\n        var isDecreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) isIncreasing = false\n            if (A(i) > A(i - 1)) isDecreasing = false\n        }\n        return isIncreasing || isDecreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122913,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var inc = true\n        var dec = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) inc = false\n            if (A(i) > A(i - 1)) dec = false\n        }\n        return inc || dec\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        return increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var decreasing = true\n        var increasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) decreasing = false\n            if (A(i) > A(i - 1)) increasing = false\n        }\n        return decreasing || increasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122913,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 0 until A.length - 1) {\n            if (A(i) > A(i + 1)) increasing = false\n            if (A(i) < A(i + 1)) decreasing = false\n        }\n        increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122912,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        return increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        val n = A.length\n        var isIncreasing = true\n        var isDecreasing = true\n        for (i <- 1 until n) {\n            if (A(i) < A(i - 1)) isIncreasing = false\n            if (A(i) > A(i - 1)) isDecreasing = false\n        }\n        isIncreasing || isDecreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122912,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        if (A.length == 0) return true\n        var isIncreasing = true\n        var isDecreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) > A(i - 1)) isDecreasing = false\n            if (A(i) < A(i - 1)) isIncreasing = false\n        }\n        return isIncreasing || isDecreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122913,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 0 until A.length - 1) {\n            if (A(i) > A(i + 1)) increasing = false\n            if (A(i) < A(i + 1)) decreasing = false\n        }\n        return increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122913,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        return increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        return increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var isIncreasing = true\n        var isDecreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) isIncreasing = false\n            if (A(i) > A(i - 1)) isDecreasing = false\n        }\n        return isIncreasing || isDecreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122913,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        val n = A.length\n        var isIncreasing = true\n        var isDecreasing = true\n        for (i <- 1 until n) {\n            if (A(i - 1) > A(i)) isIncreasing = false\n            if (A(i - 1) < A(i)) isDecreasing = false\n        }\n        return isIncreasing || isDecreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122912,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        return increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        return increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        return increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        return increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        return increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        return increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i - 1) > A(i)) increasing = false\n            if (A(i - 1) < A(i)) decreasing = false\n        }\n        return increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        val n = A.length\n        var i = 0\n        var increasing = true\n        var decreasing = true\n        while (i < n - 1) {\n            if (A(i) > A(i + 1)) increasing = false\n            if (A(i) < A(i + 1)) decreasing = false\n            i += 1\n        }\n        return increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122912,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i - 1) > A(i)) increasing = false\n            if (A(i - 1) < A(i)) decreasing = false\n        }\n        return increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var isIncreasing = true\n        var isDecreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) isIncreasing = false\n            if (A(i) > A(i - 1)) isDecreasing = false\n        }\n        return isIncreasing || isDecreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122913,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        return increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        return increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        if (A.length == 1) return true\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        return increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122912,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var isIncreasing = true\n        var isDecreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) isIncreasing = false\n            if (A(i) > A(i - 1)) isDecreasing = false\n        }\n        return isIncreasing || isDecreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122913,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        return increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        return increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        val n = A.length\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until n) {\n            if (A(i - 1) > A(i)) increasing = false\n            if (A(i - 1) < A(i)) decreasing = false\n        }\n        increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122912,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 0 until A.length - 1) {\n            if (A(i) > A(i + 1)) increasing = false\n            if (A(i) < A(i + 1)) decreasing = false\n        }\n        increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122912,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        if (A.length == 1) return true\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        return increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122912,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 0 until A.length - 1) {\n            if (A(i) > A(i + 1)) increasing = false\n            if (A(i) < A(i + 1)) decreasing = false\n        }\n        return increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122913,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        return increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        if (A.length == 1) return true\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        return increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122912,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        val n = A.length\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until n) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        return increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122913,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        return increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        return increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        return increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        return increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        if (A.length < 3) return true\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        return increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666122912,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var isIncreasing = true\n        var isDecreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) isIncreasing = false\n            if (A(i) > A(i - 1)) isDecreasing = false\n        }\n        isIncreasing || isDecreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        return increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        return increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given array is monotonic or not.\n    def isMonotonic(A : List[Long]) : Boolean = {\n        var increasing = true\n        var decreasing = true\n        for (i <- 1 until A.length) {\n            if (A(i) < A(i - 1)) increasing = false\n            if (A(i) > A(i - 1)) decreasing = false\n        }\n        increasing || decreasing\n    }\n    def main(args: Array[String]) = {\n    assert(isMonotonic((List[Long](6l.toLong, 5l.toLong, 4l.toLong, 4l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (true));\n    assert(isMonotonic((List[Long](1l.toLong, 3l.toLong, 2l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510059,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}