{
  "name": "mbpp_399_bitwise_xor",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_399_bitwise_xor.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        return test_tup1 ^ test_tup2\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1665510335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:22 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                      Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                        Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                                        Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        return test_tup1 ^ test_tup2\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1665510335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:22 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                      Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                        Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                                        Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var result : Long = 0\n        for (i <- 0 to 63) {\n            if (test_tup1 % 2 != test_tup2 % 2) {\n                result += pow(2, i).toLong\n            }\n            test_tup1 /= 2\n            test_tup2 /= 2\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1665510340,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp5kc1_pzo.scala:11:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m            test_tup1 /= \u001b[31m2\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           value /= is not a member of Long - did you mean test_tup1.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp5kc1_pzo.scala:12:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            test_tup2 /= \u001b[31m2\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           value /= is not a member of Long - did you mean test_tup2.!=?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5kc1_pzo.scala:17:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5kc1_pzo.scala:17:41 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5kc1_pzo.scala:18:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        return test_tup1 ^ test_tup2\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1665510335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:22 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                      Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                        Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                                        Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        return test_tup1 ^ test_tup2\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1665510335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:22 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                      Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                        Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                                        Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var result : Long = 0\n        var i : Int = 0\n        while (i < 64) {\n            if (((test_tup1 >> i) & 1) != ((test_tup2 >> i) & 1)) {\n                result |= (1 << i)\n            }\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1665510340,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcufq8qjg.scala:17:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcufq8qjg.scala:17:41 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcufq8qjg.scala:18:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcufq8qjg.scala:18:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        return test_tup1 ^ test_tup2\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1665510335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:22 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                      Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                        Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                                        Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var result = 0L\n        for (i <- 0 to 63) {\n            if (test_tup1 % 2 != test_tup2 % 2) result += pow(2, i).toLong\n            test_tup1 /= 2\n            test_tup2 /= 2\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1665510340,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp5ph71q88.scala:9:22 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            test_tup1 /= \u001b[31m2\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m            ^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m            value /= is not a member of Long - did you mean test_tup1.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp5ph71q88.scala:10:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m            test_tup2 /= \u001b[31m2\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           value /= is not a member of Long - did you mean test_tup2.!=?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5ph71q88.scala:15:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5ph71q88.scala:15:41 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5ph71q88.scala:16:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        return test_tup1 ^ test_tup2\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1665510335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:22 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                      Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                        Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                                        Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        test_tup1 ^ test_tup2\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1665510335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdu_3p_ai.scala:9:22 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                      Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdu_3p_ai.scala:9:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                        Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                                        Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdu_3p_ai.scala:10:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdu_3p_ai.scala:10:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var result : Long = 0\n        var i : Int = 0\n        while (i < 64) {\n            var bit1 : Long = (test_tup1 >> i) & 1\n            var bit2 : Long = (test_tup2 >> i) & 1\n            if (bit1 != bit2) {\n                result = result | (1 << i)\n            }\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1665510340,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp23ybu8mx.scala:19:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp23ybu8mx.scala:19:41 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp23ybu8mx.scala:20:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp23ybu8mx.scala:20:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        return test_tup1 ^ test_tup2\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1665510335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:22 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                      Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                        Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                                        Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        return test_tup1 ^ test_tup2\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1665510335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:22 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                      Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                        Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                                        Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var result : Long = 0\n        for (i <- 0 to 63) {\n            var bit1 : Long = (test_tup1 >> i) & 1\n            var bit2 : Long = (test_tup2 >> i) & 1\n            if (bit1 != bit2) result |= (1 << i)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1665510340,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpngkpwbyg.scala:15:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpngkpwbyg.scala:15:41 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpngkpwbyg.scala:16:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpngkpwbyg.scala:16:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        return test_tup1 ^ test_tup2\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1665510335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:22 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                      Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                        Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                                        Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        return test_tup1 ^ test_tup2\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1665510335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:22 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                      Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                        Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                                        Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        return test_tup1 ^ test_tup2\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1665510335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:22 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                      Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                        Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                                        Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        return test_tup1 ^ test_tup2\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1665510335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:22 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                      Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                        Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                                        Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var result : Long = 0\n        for (i <- 0 to 63) {\n            val bit1 = (test_tup1 >> i) & 1\n            val bit2 = (test_tup2 >> i) & 1\n            if (bit1 != bit2) result = result | (1 << i)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1665510340,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7fgsbcs.scala:15:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7fgsbcs.scala:15:41 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7fgsbcs.scala:16:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo7fgsbcs.scala:16:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        return test_tup1 ^ test_tup2\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1665510335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:22 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                      Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                        Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                                        Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        return test_tup1 ^ test_tup2\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1665510335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:22 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                      Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                        Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                                        Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var result : Long = 0\n        var i = 0\n        while (i < 64) {\n            if (((test_tup1 >> i) & 1) != ((test_tup2 >> i) & 1)) {\n                result = result | (1 << i)\n            }\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1666123694,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpt6qj1t09.scala:17:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpt6qj1t09.scala:17:41 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpt6qj1t09.scala:18:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpt6qj1t09.scala:18:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        return test_tup1 ^ test_tup2\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1665510335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:22 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                      Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                        Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                                        Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        test_tup1 ^ test_tup2\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1665510335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdu_3p_ai.scala:9:22 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                      Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdu_3p_ai.scala:9:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                        Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                                        Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdu_3p_ai.scala:10:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdu_3p_ai.scala:10:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var result : Long = 0\n        for (i <- 0 to 63) {\n            val bit1 = (test_tup1 >> i) & 1\n            val bit2 = (test_tup2 >> i) & 1\n            if (bit1 != bit2) {\n                result = result | (1 << i)\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1666123692,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuuf2fb2k.scala:17:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuuf2fb2k.scala:17:41 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuuf2fb2k.scala:18:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuuf2fb2k.scala:18:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        test_tup1 ^ test_tup2\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1665510335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdu_3p_ai.scala:9:22 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                      Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdu_3p_ai.scala:9:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                        Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                                        Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdu_3p_ai.scala:10:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdu_3p_ai.scala:10:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        return test_tup1 ^ test_tup2\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1665510335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:22 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                      Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                        Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                                        Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        test_tup1 ^ test_tup2\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1665510335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdu_3p_ai.scala:9:22 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                      Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdu_3p_ai.scala:9:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                        Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                                        Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdu_3p_ai.scala:10:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdu_3p_ai.scala:10:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        return test_tup1 ^ test_tup2\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1665510335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:22 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                      Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                        Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                                        Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        test_tup1 ^ test_tup2\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1665510335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdu_3p_ai.scala:9:22 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                      Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdu_3p_ai.scala:9:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                        Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                                        Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdu_3p_ai.scala:10:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdu_3p_ai.scala:10:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        test_tup1 ^ test_tup2\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1665510335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdu_3p_ai.scala:9:22 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                      Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdu_3p_ai.scala:9:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                        Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                                        Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdu_3p_ai.scala:10:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdu_3p_ai.scala:10:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        return test_tup1 ^ test_tup2\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1665510335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:22 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                      Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                        Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                                        Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        return test_tup1 ^ test_tup2\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1665510335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:22 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                      Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                        Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                                        Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        return test_tup1 ^ test_tup2\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1665510335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:22 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                      Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                        Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                                        Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        return test_tup1 ^ test_tup2\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1665510335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:22 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                      Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                        Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                                        Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        test_tup1 ^ test_tup2\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1665510335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdu_3p_ai.scala:9:22 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                      Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdu_3p_ai.scala:9:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                        Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                                        Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdu_3p_ai.scala:10:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdu_3p_ai.scala:10:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        return test_tup1 ^ test_tup2\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1665510335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:22 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                      Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                        Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                                        Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var xor_result : Long = 0\n        var i : Long = 1\n        while (i <= test_tup1 || i <= test_tup2) {\n            if ((test_tup1 & i) != (test_tup2 & i)) {\n                xor_result = xor_result | i\n            }\n            i = i << 1\n        }\n        return xor_result\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1666123695,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmepl2n4c.scala:17:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmepl2n4c.scala:17:41 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmepl2n4c.scala:18:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmepl2n4c.scala:18:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var result : Long = 0\n        var i : Int = 0\n        while (i < 64) {\n            if ((test_tup1 & (1 << i)) != (test_tup2 & (1 << i))) result |= (1 << i)\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1666123694,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4rvjm514.scala:15:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4rvjm514.scala:15:41 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4rvjm514.scala:16:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4rvjm514.scala:16:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var result : Long = 0\n        var tup1 : Long = test_tup1\n        var tup2 : Long = test_tup2\n        var i : Int = 0\n        while (i < 64) {\n            if ((tup1 & 1) != (tup2 & 1)) {\n                result = result | (1 << i)\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1666123693,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzk6ushyr.scala:21:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzk6ushyr.scala:21:41 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzk6ushyr.scala:22:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzk6ushyr.scala:22:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        return test_tup1 ^ test_tup2\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1665510335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:22 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                      Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                        Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                                        Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        return test_tup1 ^ test_tup2\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1665510335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:22 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                      Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                        Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                                        Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        return test_tup1 ^ test_tup2\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1665510335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:22 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                      Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                        Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                                        Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        return test_tup1 ^ test_tup2\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1665510335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:22 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                      Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                        Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                                        Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var result : Long = 0\n        for (i <- 0 to 63) {\n            if (((test_tup1 >> i) & 1) != ((test_tup2 >> i) & 1)) result += (1 << i)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1666123677,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6rpjg7jb.scala:13:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6rpjg7jb.scala:13:41 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6rpjg7jb.scala:14:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6rpjg7jb.scala:14:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        // Write your code here\n        return test_tup1 ^ test_tup2\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1666123660,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsvy_z_op.scala:10:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsvy_z_op.scala:10:41 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsvy_z_op.scala:11:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsvy_z_op.scala:11:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        return test_tup1 ^ test_tup2\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1665510335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:22 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                      Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                        Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                                        Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        return test_tup1 ^ test_tup2\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1665510335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:22 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                      Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                        Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                                        Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var result : Long = 0\n        var tup1 : Long = test_tup1\n        var tup2 : Long = test_tup2\n        var i : Int = 0\n        while (i < 64) {\n            var bit1 : Long = tup1 & 1\n            var bit2 : Long = tup2 & 1\n            if (bit1 != bit2) {\n                result = result | (1 << i)\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1666123693,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp20vsrf5w.scala:23:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp20vsrf5w.scala:23:41 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp20vsrf5w.scala:24:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp20vsrf5w.scala:24:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        test_tup1 ^ test_tup2\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1665510335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdu_3p_ai.scala:9:22 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                      Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdu_3p_ai.scala:9:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                        Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                                        Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdu_3p_ai.scala:10:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdu_3p_ai.scala:10:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        test_tup1 ^ test_tup2\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1665510335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdu_3p_ai.scala:9:22 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                      Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdu_3p_ai.scala:9:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                        Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                                        Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdu_3p_ai.scala:10:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdu_3p_ai.scala:10:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        return test_tup1 ^ test_tup2\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1665510335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:22 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                      Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                        Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                                        Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        return test_tup1 ^ test_tup2\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1665510335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:22 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                      Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                        Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                                        Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var xor_result = 0\n        for (i <- 0 to 63) {\n            val bit1 = (test_tup1 >> i) & 1\n            val bit2 = (test_tup2 >> i) & 1\n            if (bit1 != bit2) {\n                xor_result = xor_result | (1 << i)\n            }\n        }\n        return xor_result\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1666123694,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgp4shshu.scala:17:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgp4shshu.scala:17:41 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgp4shshu.scala:18:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgp4shshu.scala:18:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var result : Long = 0\n        var i : Int = 0\n        while (i < 64) {\n            if ((test_tup1 & (1 << i)) != (test_tup2 & (1 << i))) {\n                result |= (1 << i)\n            }\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1666123676,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpi7jb8y7z.scala:17:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpi7jb8y7z.scala:17:41 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpi7jb8y7z.scala:18:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpi7jb8y7z.scala:18:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var result : Long = 0\n        var tup1 : Long = test_tup1\n        var tup2 : Long = test_tup2\n        var i : Int = 0\n        while (i < 64) {\n            if (tup1 % 2 != tup2 % 2) {\n                result += pow(2, i).toLong\n            }\n            tup1 /= 2\n            tup2 /= 2\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1666123695,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp25d2_qhd.scala:21:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp25d2_qhd.scala:21:41 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp25d2_qhd.scala:22:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp25d2_qhd.scala:22:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        return test_tup1 ^ test_tup2\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1665510335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:22 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                      Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                        Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                                        Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        test_tup1 ^ test_tup2\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1665510335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdu_3p_ai.scala:9:22 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                      Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdu_3p_ai.scala:9:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                        Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                                        Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdu_3p_ai.scala:10:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdu_3p_ai.scala:10:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var result : Long = 0\n        var tup1 : Long = test_tup1\n        var tup2 : Long = test_tup2\n        var i : Int = 0\n        while (i < 64) {\n            if (((tup1 & 1) == 1) && ((tup2 & 1) == 1)) {\n                result = result << 1\n            } else if (((tup1 & 1) == 1) || ((tup2 & 1) == 1)) {\n                result = (result << 1) + 1\n            } else {\n                result = result << 1\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1666123692,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4i8s0qgx.scala:25:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4i8s0qgx.scala:25:41 --------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4i8s0qgx.scala:26:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4i8s0qgx.scala:26:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        test_tup1 ^ test_tup2\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1665510335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdu_3p_ai.scala:9:22 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                      Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdu_3p_ai.scala:9:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                        Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                                        Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdu_3p_ai.scala:10:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdu_3p_ai.scala:10:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        return test_tup1 ^ test_tup2\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1665510335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:22 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                      Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                        Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                                        Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        return test_tup1 ^ test_tup2\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1665510335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:22 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                      Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                        Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                                        Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var result : Long = 0\n        for (i <- 0 to 63) {\n            val bit1 : Long = (test_tup1 >> i) & 1\n            val bit2 : Long = (test_tup2 >> i) & 1\n            if (bit1 != bit2) result = result | (1 << i)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1666123660,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpm0xi75aj.scala:15:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpm0xi75aj.scala:15:41 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpm0xi75aj.scala:16:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpm0xi75aj.scala:16:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        return test_tup1 ^ test_tup2\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1665510335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:22 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                      Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                        Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                                        Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var result : Long = 0\n        for (i <- 0 to 63) {\n            if ((test_tup1 & (1 << i)) != (test_tup2 & (1 << i))) result |= (1 << i)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1666123694,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdmy8d2qe.scala:13:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdmy8d2qe.scala:13:41 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdmy8d2qe.scala:14:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdmy8d2qe.scala:14:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        return test_tup1 ^ test_tup2\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1665510335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:22 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                      Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                        Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                                        Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        return test_tup1 ^ test_tup2\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1665510335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:22 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                      Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                        Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                                        Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var result : Long = 0\n        for (i <- 0 to 63) {\n            val bit1 : Long = (test_tup1 >> i) & 1\n            val bit2 : Long = (test_tup2 >> i) & 1\n            if (bit1 != bit2) {\n                result = result | (1 << i)\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1666123694,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgy8w9zga.scala:17:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgy8w9zga.scala:17:41 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgy8w9zga.scala:18:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgy8w9zga.scala:18:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var result : Long = 0\n        var i : Int = 0\n        while (i < 64) {\n            if ((test_tup1 & (1 << i)) != (test_tup2 & (1 << i))) {\n                result |= (1 << i)\n            }\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1666123676,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpi7jb8y7z.scala:17:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpi7jb8y7z.scala:17:41 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpi7jb8y7z.scala:18:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpi7jb8y7z.scala:18:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        return test_tup1 ^ test_tup2\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1665510335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:22 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                      Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                        Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                                        Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var result : Long = 0\n        var tup1 : Long = test_tup1\n        var tup2 : Long = test_tup2\n        var i : Int = 0\n        while (i < 64) {\n            if (tup1 % 2 != tup2 % 2) {\n                result += pow(2, i).toLong\n            }\n            tup1 /= 2\n            tup2 /= 2\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1666123695,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp25d2_qhd.scala:21:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp25d2_qhd.scala:21:41 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp25d2_qhd.scala:22:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp25d2_qhd.scala:22:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        test_tup1 ^ test_tup2\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1665510335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdu_3p_ai.scala:9:22 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                      Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdu_3p_ai.scala:9:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                        Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                                        Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdu_3p_ai.scala:10:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdu_3p_ai.scala:10:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        return test_tup1 ^ test_tup2\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1665510335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:22 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                      Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                        Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                                        Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        return test_tup1 ^ test_tup2\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1665510335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:22 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                      Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                        Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                                        Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        return test_tup1 ^ test_tup2\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1665510335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:22 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                      Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                        Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                                        Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        return test_tup1 ^ test_tup2\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1665510335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:22 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                      Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                        Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                                        Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        // Write your code here\n        test_tup1 ^ test_tup2\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1666123694,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgr8su579.scala:10:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgr8su579.scala:10:41 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgr8su579.scala:11:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgr8su579.scala:11:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var result = 0L\n        for (i <- 0 to 63) {\n            val bit1 = (test_tup1 >> i) & 1\n            val bit2 = (test_tup2 >> i) & 1\n            if (bit1 != bit2) result += (1L << i)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1666123677,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc656jql9.scala:15:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc656jql9.scala:15:41 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc656jql9.scala:16:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc656jql9.scala:16:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var xor_result : Long = 0\n        var tup1 : Long = test_tup1\n        var tup2 : Long = test_tup2\n        for (i <- 0 to 63) {\n            var bit1 : Long = tup1 & 1\n            var bit2 : Long = tup2 & 1\n            if (bit1 != bit2) {\n                xor_result = xor_result | (1 << i)\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n        }\n        return xor_result\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1666123693,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_p5p3hbj.scala:21:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_p5p3hbj.scala:21:41 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_p5p3hbj.scala:22:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_p5p3hbj.scala:22:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        return test_tup1 ^ test_tup2\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1665510335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:22 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                      Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                        Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                                        Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var result : Long = 0\n        var tup1 : Long = test_tup1\n        var tup2 : Long = test_tup2\n        for (i <- 0 to 63) {\n            if ((tup1 & 1) != (tup2 & 1)) {\n                result = result | (1 << i)\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1666123694,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1cnp4g_g.scala:19:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1cnp4g_g.scala:19:41 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1cnp4g_g.scala:20:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1cnp4g_g.scala:20:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var result : Long = 0\n        for (i <- 0 to 63) {\n            if ((test_tup1 & (1L << i)) != (test_tup2 & (1L << i))) result |= (1L << i)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1666123694,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptnqw97ak.scala:13:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptnqw97ak.scala:13:41 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptnqw97ak.scala:14:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptnqw97ak.scala:14:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var result = test_tup1 ^ test_tup2\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1665510335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpftto_shq.scala:10:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpftto_shq.scala:10:41 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpftto_shq.scala:11:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpftto_shq.scala:11:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var result : Long = 0\n        var i : Long = 1\n        while (i <= test_tup1) {\n            if ((test_tup1 & i) != (test_tup2 & i)) {\n                result = result | i\n            }\n            i = i << 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1666123694,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj4mtkjr8.scala:17:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj4mtkjr8.scala:17:41 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj4mtkjr8.scala:18:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj4mtkjr8.scala:18:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        val test_tup1_bin = test_tup1.toBinaryString\n        val test_tup2_bin = test_tup2.toBinaryString\n        val test_tup1_bin_len = test_tup1_bin.length\n        val test_tup2_bin_len = test_tup2_bin.length\n        val max_len = max(test_tup1_bin_len, test_tup2_bin_len)\n        val min_len = min(test_tup1_bin_len, test_tup2_bin_len)\n        val test_tup1_bin_str = test_tup1_bin.reverse\n        val test_tup2_bin_str = test_tup2_bin.reverse\n        var result_str = \"\"\n        for (i <- 0 until min_len) {\n            if (test_tup1_bin_str(i) == test_tup2_bin_str(i)) result_str += \"0\"\n            else result_str += \"1\"\n        }\n        if (test_tup1_bin_len > test_tup2_bin_len) {\n            for (i <- min_len until max_len) result_str += test_tup1_bin_str(i)\n        } else if (test_tup1_bin_len < test_tup2_bin_len) {\n            for (i <- min_len until max_len) result_str += test_tup2_bin_str(i)\n        }\n        result_str.reverse.toLong\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1666123694,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxneczy9o.scala:27:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxneczy9o.scala:27:41 --------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxneczy9o.scala:28:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxneczy9o.scala:28:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        return test_tup1 ^ test_tup2\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1665510335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:22 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                      Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                        Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                                        Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        return test_tup1 ^ test_tup2\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1665510335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:22 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                      Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                        Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                                        Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        test_tup1 ^ test_tup2\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1665510335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdu_3p_ai.scala:9:22 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                      Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdu_3p_ai.scala:9:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                        Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                                        Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdu_3p_ai.scala:10:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdu_3p_ai.scala:10:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        return test_tup1 ^ test_tup2\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1665510335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:22 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                      Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                        Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                                        Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (i < 64) {\n            if (tup1 % 2 == tup2 % 2) {\n                result = result * 2\n            } else {\n                result = result * 2 + 1\n            }\n            tup1 = tup1 / 2\n            tup2 = tup2 / 2\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1666123677,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpq5mp10bm.scala:23:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpq5mp10bm.scala:23:41 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpq5mp10bm.scala:24:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpq5mp10bm.scala:24:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        return test_tup1 ^ test_tup2\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1665510335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:22 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                      Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                        Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                                        Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        return test_tup1 ^ test_tup2\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1665510335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:22 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                      Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                        Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                                        Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var result : Long = 0\n        var i : Int = 0\n        while (i < 64) {\n            if (((test_tup1 >> i) & 1) != ((test_tup2 >> i) & 1)) {\n                result |= (1 << i)\n            }\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1665510340,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcufq8qjg.scala:17:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcufq8qjg.scala:17:41 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcufq8qjg.scala:18:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcufq8qjg.scala:18:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var result : Long = 0\n        var i : Int = 0\n        while (i < 64) {\n            if ((test_tup1 & (1 << i)) != (test_tup2 & (1 << i))) {\n                result = result | (1 << i)\n            }\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1666123694,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpp7pudfp_.scala:17:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpp7pudfp_.scala:17:41 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpp7pudfp_.scala:18:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpp7pudfp_.scala:18:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        return test_tup1 ^ test_tup2\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1665510335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:22 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                      Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                        Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                                        Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        return test_tup1 ^ test_tup2\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1665510335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:22 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                      Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                        Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                                        Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        return test_tup1 ^ test_tup2\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1665510335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:22 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                      Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                        Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                                        Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        return test_tup1 ^ test_tup2\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1665510335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:22 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                      Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                        Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                                        Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        return test_tup1 ^ test_tup2\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1665510335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:22 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                      Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                        Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                                        Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var result : Long = 0\n        for (i <- 0 to 63) {\n            if ((test_tup1 & (1 << i)) != (test_tup2 & (1 << i))) result |= (1 << i)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1666123694,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdmy8d2qe.scala:13:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdmy8d2qe.scala:13:41 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdmy8d2qe.scala:14:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdmy8d2qe.scala:14:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        return test_tup1 ^ test_tup2\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1665510335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:22 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                      Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                        Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                                        Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        test_tup1 ^ test_tup2\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1665510335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdu_3p_ai.scala:9:22 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                      Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdu_3p_ai.scala:9:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                        Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                                        Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdu_3p_ai.scala:10:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdu_3p_ai.scala:10:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        return test_tup1 ^ test_tup2\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1665510335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:22 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                      Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                        Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                                        Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        return test_tup1 ^ test_tup2\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1665510335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:22 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                      Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                        Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                                        Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var result : Long = 0\n        var i : Long = 0\n        while (i < 64) {\n            if (((test_tup1 >> i) & 1) != ((test_tup2 >> i) & 1)) {\n                result = result | (1 << i)\n            }\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1666123675,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmponh4d5ia.scala:17:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmponh4d5ia.scala:17:41 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmponh4d5ia.scala:18:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmponh4d5ia.scala:18:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var result = test_tup1 ^ test_tup2\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1665510335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpftto_shq.scala:10:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpftto_shq.scala:10:41 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpftto_shq.scala:11:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpftto_shq.scala:11:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        return test_tup1 ^ test_tup2\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1665510335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:22 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                      Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                        Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                                        Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        return test_tup1 ^ test_tup2\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1665510335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:22 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                      Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                        Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                                        Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var result : Long = 0\n        for (i <- 0 to 63) {\n            if (test_tup1 % 2 != test_tup2 % 2) {\n                result += pow(2, i).toLong\n            }\n            test_tup1 /= 2\n            test_tup2 /= 2\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1665510340,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp5kc1_pzo.scala:11:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m            test_tup1 /= \u001b[31m2\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           value /= is not a member of Long - did you mean test_tup1.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp5kc1_pzo.scala:12:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            test_tup2 /= \u001b[31m2\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           value /= is not a member of Long - did you mean test_tup2.!=?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5kc1_pzo.scala:17:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5kc1_pzo.scala:17:41 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5kc1_pzo.scala:18:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        return test_tup1 ^ test_tup2\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1665510335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:22 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                      Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                        Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                                        Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        return test_tup1 ^ test_tup2\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1665510335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:22 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                      Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                        Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                                        Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        return test_tup1 ^ test_tup2\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1665510335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:22 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                      Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                        Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                                        Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        return test_tup1 ^ test_tup2\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1665510335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:22 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                      Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                        Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                                        Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        test_tup1 ^ test_tup2\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1665510335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdu_3p_ai.scala:9:22 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                      Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdu_3p_ai.scala:9:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                        Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                                        Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdu_3p_ai.scala:10:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdu_3p_ai.scala:10:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        return test_tup1 ^ test_tup2\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1665510335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:22 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                      Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                        Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                                        Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        test_tup1 ^ test_tup2\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1665510335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdu_3p_ai.scala:9:22 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                      Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdu_3p_ai.scala:9:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                        Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                                        Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdu_3p_ai.scala:10:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdu_3p_ai.scala:10:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var xor_result : Long = 0\n        var tup1 : Long = test_tup1\n        var tup2 : Long = test_tup2\n        for (i <- 0 to 63) {\n            if ((tup1 & 1) != (tup2 & 1)) xor_result += pow(2, i).toLong\n            tup1 >>= 1\n            tup2 >>= 1\n        }\n        return xor_result\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1666123693,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpase4urdd.scala:17:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpase4urdd.scala:17:41 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpase4urdd.scala:18:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpase4urdd.scala:18:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        return test_tup1 ^ test_tup2\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1665510335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:22 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                      Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                        Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                                        Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        return test_tup1 ^ test_tup2\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1665510335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:22 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                      Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                        Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                                        Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        return test_tup1 ^ test_tup2\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1665510335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:22 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                      Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                        Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                                        Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        return test_tup1 ^ test_tup2;\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1666123694,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmkzk7jht.scala:9:22 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                      Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmkzk7jht.scala:9:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                        Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                                        Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmkzk7jht.scala:10:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmkzk7jht.scala:10:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var xor_result : Long = 0\n        var tup1 : Long = test_tup1\n        var tup2 : Long = test_tup2\n        for (i <- 0 to 63) {\n            if (tup1 % 2 != tup2 % 2) {\n                xor_result += pow(2, i).toLong\n            }\n            tup1 /= 2\n            tup2 /= 2\n        }\n        return xor_result\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1666123695,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdmj39oll.scala:19:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdmj39oll.scala:19:41 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdmj39oll.scala:20:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdmj39oll.scala:20:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        return test_tup1 ^ test_tup2\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1665510335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:22 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                      Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                        Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                                        Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        test_tup1 ^ test_tup2\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1665510335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdu_3p_ai.scala:9:22 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                      Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdu_3p_ai.scala:9:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                        Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                                        Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdu_3p_ai.scala:10:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdu_3p_ai.scala:10:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var result : Long = 0\n        for (i <- 0 to 63) {\n            if ((test_tup1 & (1L << i)) != (test_tup2 & (1L << i))) {\n                result |= (1L << i)\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1666123693,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyb6mh5_k.scala:15:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyb6mh5_k.scala:15:41 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyb6mh5_k.scala:16:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyb6mh5_k.scala:16:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        test_tup1 ^ test_tup2\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1665510335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdu_3p_ai.scala:9:22 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                      Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdu_3p_ai.scala:9:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                        Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                                        Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdu_3p_ai.scala:10:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdu_3p_ai.scala:10:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var result : Long = 0\n        var tup1 : Long = test_tup1\n        var tup2 : Long = test_tup2\n        var i : Int = 0\n        while (i < 64) {\n            if (tup1 % 2 != tup2 % 2) {\n                result += pow(2, i).toLong\n            }\n            tup1 /= 2\n            tup2 /= 2\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1666123695,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp25d2_qhd.scala:21:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp25d2_qhd.scala:21:41 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp25d2_qhd.scala:22:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp25d2_qhd.scala:22:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        return test_tup1 ^ test_tup2\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1665510335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:22 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                      Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                        Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                                        Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        return test_tup1 ^ test_tup2\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1665510335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:22 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                      Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                        Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                                        Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var result : Long = 0\n        var i : Int = 0\n        while (i < 64) {\n            if ((test_tup1 & (1 << i)) != (test_tup2 & (1 << i))) {\n                result |= (1 << i)\n            }\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1666123676,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpi7jb8y7z.scala:17:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpi7jb8y7z.scala:17:41 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpi7jb8y7z.scala:18:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpi7jb8y7z.scala:18:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        return test_tup1 ^ test_tup2\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1665510335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:22 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                      Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                        Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                                        Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        return test_tup1 ^ test_tup2\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1665510335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:22 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                      Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                        Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                                        Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        return test_tup1 ^ test_tup2\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1665510335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:22 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                      Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                        Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                                        Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var test_tup1_bin = test_tup1.toBinaryString\n        var test_tup2_bin = test_tup2.toBinaryString\n        var test_tup1_bin_len = test_tup1_bin.length\n        var test_tup2_bin_len = test_tup2_bin.length\n        var max_len = max(test_tup1_bin_len, test_tup2_bin_len)\n        var min_len = min(test_tup1_bin_len, test_tup2_bin_len)\n        var diff = max_len - min_len\n        var result = \"\"\n        if (test_tup1_bin_len > test_tup2_bin_len) {\n            for (i <- 0 until diff) {\n                result += \"0\"\n            }\n            result += test_tup2_bin\n            test_tup2_bin = result\n        } else if (test_tup1_bin_len < test_tup2_bin_len) {\n            for (i <- 0 until diff) {\n                result += \"0\"\n            }\n            result += test_tup1_bin\n            test_tup1_bin = result\n        }\n        var result_bin = \"\"\n        for (i <- 0 until max_len) {\n            if (test_tup1_bin(i) == test_tup2_bin(i)) {\n                result_bin += \"0\"\n            } else {\n                result_bin += \"1\"\n            }\n        }\n        var result_dec = BigInt(result_bin, 2).toLong\n        return result_dec\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1666123695,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzbndaula.scala:39:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzbndaula.scala:39:41 --------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzbndaula.scala:40:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzbndaula.scala:40:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        val tup1 = test_tup1.toBinaryString.toList.map(_.toString.toInt)\n        val tup2 = test_tup2.toBinaryString.toList.map(_.toString.toInt)\n        val tup1_len = tup1.length\n        val tup2_len = tup2.length\n        val max_len = max(tup1_len, tup2_len)\n        val min_len = min(tup1_len, tup2_len)\n        val tup1_padded = tup1.padTo(max_len, 0)\n        val tup2_padded = tup2.padTo(max_len, 0)\n        val xor_list = (tup1_padded zip tup2_padded).map(x => x._1 ^ x._2)\n        val xor_list_str = xor_list.map(_.toString).reduce(_ + _)\n        val xor_list_int = BigInt(xor_list_str, 2)\n        xor_list_int.toLong\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1666123700,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvuqmq2do.scala:20:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvuqmq2do.scala:20:41 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvuqmq2do.scala:21:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvuqmq2do.scala:21:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var result : Long = 0\n        for (i <- 0 to 63) {\n            if (((test_tup1 >> i) & 1) != ((test_tup2 >> i) & 1)) {\n                result = result | (1 << i)\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1666123700,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0lefhugb.scala:15:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0lefhugb.scala:15:41 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0lefhugb.scala:16:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0lefhugb.scala:16:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        test_tup1 ^ test_tup2\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1665510335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdu_3p_ai.scala:9:22 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                      Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdu_3p_ai.scala:9:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                        Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                                        Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdu_3p_ai.scala:10:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdu_3p_ai.scala:10:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        test_tup1 ^ test_tup2\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1665510335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdu_3p_ai.scala:9:22 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                      Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdu_3p_ai.scala:9:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                        Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                                        Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdu_3p_ai.scala:10:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdu_3p_ai.scala:10:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        return test_tup1 ^ test_tup2\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1665510335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:22 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                      Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                        Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                                        Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        // Write your code here\n        return test_tup1 ^ test_tup2\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1666123660,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsvy_z_op.scala:10:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsvy_z_op.scala:10:41 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsvy_z_op.scala:11:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsvy_z_op.scala:11:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        return test_tup1 ^ test_tup2\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1665510335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:22 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                      Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                        Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                                        Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        return test_tup1 ^ test_tup2\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1665510335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:22 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                      Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                        Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                                        Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        return test_tup1 ^ test_tup2\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1665510335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:22 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                      Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                        Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                                        Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        return test_tup1 ^ test_tup2\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1665510335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:22 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                      Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                        Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                                        Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        return test_tup1 ^ test_tup2\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1665510335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:22 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                      Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                        Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                                        Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        test_tup1 ^ test_tup2\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1665510335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdu_3p_ai.scala:9:22 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                      Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdu_3p_ai.scala:9:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                        Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                                        Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdu_3p_ai.scala:10:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdu_3p_ai.scala:10:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        return test_tup1 ^ test_tup2\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1665510335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:22 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                      Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                        Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                                        Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        return test_tup1 ^ test_tup2\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1665510335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:22 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                      Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                        Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                                        Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var result : Long = 0\n        for (i <- 0 to 63) {\n            if (test_tup1 % 2 != test_tup2 % 2) {\n                result += pow(2, i).toLong\n            }\n            test_tup1 /= 2\n            test_tup2 /= 2\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1665510340,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp5kc1_pzo.scala:11:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m            test_tup1 /= \u001b[31m2\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           value /= is not a member of Long - did you mean test_tup1.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp5kc1_pzo.scala:12:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            test_tup2 /= \u001b[31m2\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           value /= is not a member of Long - did you mean test_tup2.!=?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5kc1_pzo.scala:17:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5kc1_pzo.scala:17:41 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5kc1_pzo.scala:18:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var result = 0L\n        for (i <- 0 to 63) {\n            val bit1 = (test_tup1 >> i) & 1\n            val bit2 = (test_tup2 >> i) & 1\n            if (bit1 != bit2) result |= (1L << i)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1666123700,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7mo9ziav.scala:15:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7mo9ziav.scala:15:41 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7mo9ziav.scala:16:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7mo9ziav.scala:16:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        return test_tup1 ^ test_tup2\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1665510335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:22 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                      Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                        Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                                        Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var result = test_tup1 ^ test_tup2\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1665510335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpftto_shq.scala:10:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpftto_shq.scala:10:41 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpftto_shq.scala:11:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpftto_shq.scala:11:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var result : Long = 0\n        var i : Long = 1\n        while (i <= test_tup1 || i <= test_tup2) {\n            if ((test_tup1 & i) != (test_tup2 & i)) {\n                result = result | i\n            }\n            i = i << 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1666123700,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwoobwm4q.scala:17:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwoobwm4q.scala:17:41 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwoobwm4q.scala:18:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwoobwm4q.scala:18:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var result : Long = 0\n        for (i <- 0 to 63) {\n            if (((test_tup1 >> i) & 1) != ((test_tup2 >> i) & 1)) {\n                result = result | (1 << i)\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1666123700,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0lefhugb.scala:15:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0lefhugb.scala:15:41 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0lefhugb.scala:16:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0lefhugb.scala:16:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        return test_tup1 ^ test_tup2\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1665510335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:22 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                      Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                        Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                                        Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var result = test_tup1 ^ test_tup2\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1665510335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpftto_shq.scala:10:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpftto_shq.scala:10:41 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpftto_shq.scala:11:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpftto_shq.scala:11:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        for (i <- 0 to 63) {\n            if (tup1 % 2 != tup2 % 2) result += pow(2, i).toLong\n            tup1 /= 2\n            tup2 /= 2\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1666123677,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc6gqyjj7.scala:17:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc6gqyjj7.scala:17:41 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc6gqyjj7.scala:18:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc6gqyjj7.scala:18:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        // Write your code here\n        return test_tup1 ^ test_tup2\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1666123660,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsvy_z_op.scala:10:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsvy_z_op.scala:10:41 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsvy_z_op.scala:11:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsvy_z_op.scala:11:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        return test_tup1 ^ test_tup2\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1665510335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:22 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                      Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                        Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                                        Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        return (test_tup1 ^ test_tup2)\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1666123660,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp93_o11_1.scala:9:22 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                      Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp93_o11_1.scala:9:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                        Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                                        Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp93_o11_1.scala:10:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp93_o11_1.scala:10:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var result : Long = 0\n        for (i <- 0 to 63) {\n            if (test_tup1.toBinaryString.charAt(i) != test_tup2.toBinaryString.charAt(i)) {\n                result += pow(2, i).toLong\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1666123677,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgz3k6fz9.scala:15:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgz3k6fz9.scala:15:41 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgz3k6fz9.scala:16:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgz3k6fz9.scala:16:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        return test_tup1 ^ test_tup2\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1665510335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:22 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                      Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                        Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                                        Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        return test_tup1 ^ test_tup2\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1665510335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:22 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                      Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                        Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                                        Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        return test_tup1 ^ test_tup2\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1665510335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:22 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                      Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                        Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                                        Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var result = 0L\n        for (i <- 0 to 63) {\n            val bit1 = (test_tup1 >> i) & 1\n            val bit2 = (test_tup2 >> i) & 1\n            if (bit1 != bit2) result += (1L << i)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1666123677,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc656jql9.scala:15:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc656jql9.scala:15:41 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc656jql9.scala:16:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc656jql9.scala:16:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        return test_tup1 ^ test_tup2\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1665510335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:22 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                      Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                        Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                                        Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        return test_tup1 ^ test_tup2\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1665510335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:22 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                      Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                        Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                                        Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var result : Long = 0\n        for (i <- 0 to 63) {\n            val bit1 = (test_tup1 >> i) & 1\n            val bit2 = (test_tup2 >> i) & 1\n            if (bit1 != bit2) result += (1 << i)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1666123700,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpya_789g1.scala:15:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpya_789g1.scala:15:41 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpya_789g1.scala:16:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpya_789g1.scala:16:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        return test_tup1 ^ test_tup2\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1665510335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:22 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                      Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                        Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                                        Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        return test_tup1 ^ test_tup2\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1665510335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:22 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                      Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                        Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                                        Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        return test_tup1 ^ test_tup2\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1665510335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:22 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                      Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                        Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                                        Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        return test_tup1 ^ test_tup2\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1665510335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:22 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                      Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                        Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                                        Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        for (i <- 0 to 63) {\n            if (tup1 % 2 != tup2 % 2) {\n                result += pow(2, i).toLong\n            }\n            tup1 /= 2\n            tup2 /= 2\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1666123700,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpa5w9oh4z.scala:19:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpa5w9oh4z.scala:19:41 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpa5w9oh4z.scala:20:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpa5w9oh4z.scala:20:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        test_tup1 ^ test_tup2\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1665510335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdu_3p_ai.scala:9:22 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                      Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdu_3p_ai.scala:9:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                        Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                                        Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdu_3p_ai.scala:10:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdu_3p_ai.scala:10:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        val test_tup1_bin = test_tup1.toBinaryString\n        val test_tup2_bin = test_tup2.toBinaryString\n        val test_tup1_bin_len = test_tup1_bin.length\n        val test_tup2_bin_len = test_tup2_bin.length\n        val max_len = max(test_tup1_bin_len, test_tup2_bin_len)\n        val test_tup1_bin_pad = test_tup1_bin.reverse.padTo(max_len, '0').reverse\n        val test_tup2_bin_pad = test_tup2_bin.reverse.padTo(max_len, '0').reverse\n        val test_tup1_bin_pad_arr = test_tup1_bin_pad.toCharArray\n        val test_tup2_bin_pad_arr = test_tup2_bin_pad.toCharArray\n        val result_arr = new Array[Char](max_len)\n        for (i <- 0 until max_len) {\n            if (test_tup1_bin_pad_arr(i) == test_tup2_bin_pad_arr(i)) result_arr(i) = '0'\n            else result_arr(i) = '1'\n        }\n        val result_str = result_arr.mkString\n        val result = result_str.toLong\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1666123700,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkx7d3w61.scala:25:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkx7d3w61.scala:25:41 --------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkx7d3w61.scala:26:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkx7d3w61.scala:26:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        return test_tup1 ^ test_tup2\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1665510335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:22 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                      Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                        Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                                        Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        return test_tup1 ^ test_tup2\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1665510335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:22 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                      Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                        Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                                        Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        return test_tup1 ^ test_tup2\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1665510335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:22 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                      Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                        Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                                        Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var result = test_tup1 ^ test_tup2\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1665510335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpftto_shq.scala:10:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpftto_shq.scala:10:41 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpftto_shq.scala:11:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpftto_shq.scala:11:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        return test_tup1 ^ test_tup2\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1665510335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:22 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                      Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                        Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                                        Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var xor_result = test_tup1 ^ test_tup2\n        return xor_result\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1665510335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6e0u8rll.scala:10:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6e0u8rll.scala:10:41 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6e0u8rll.scala:11:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6e0u8rll.scala:11:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var result = test_tup1 ^ test_tup2\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1665510335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpftto_shq.scala:10:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpftto_shq.scala:10:41 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpftto_shq.scala:11:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpftto_shq.scala:11:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        return test_tup1 ^ test_tup2\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1665510335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:22 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                      Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                        Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                                        Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        return test_tup1 ^ test_tup2\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1665510335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:22 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                      Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                        Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                                        Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        // Write your code here\n        return test_tup1 ^ test_tup2\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1666123660,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsvy_z_op.scala:10:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsvy_z_op.scala:10:41 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsvy_z_op.scala:11:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsvy_z_op.scala:11:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var result = test_tup1 ^ test_tup2\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1665510335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpftto_shq.scala:10:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpftto_shq.scala:10:41 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpftto_shq.scala:11:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpftto_shq.scala:11:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        return (test_tup1 ^ test_tup2)\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1666123660,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp93_o11_1.scala:9:22 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                      Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp93_o11_1.scala:9:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                        Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                                        Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp93_o11_1.scala:10:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp93_o11_1.scala:10:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var result : Long = 0\n        var tup1 : Long = test_tup1\n        var tup2 : Long = test_tup2\n        var i : Int = 0\n        while (i < 64) {\n            if ((tup1 & 1) != (tup2 & 1)) {\n                result = result | (1 << i)\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1666123693,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzk6ushyr.scala:21:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzk6ushyr.scala:21:41 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzk6ushyr.scala:22:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzk6ushyr.scala:22:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        return test_tup1 ^ test_tup2\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1665510335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:22 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                      Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                        Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                                        Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        test_tup1 ^ test_tup2\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1665510335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdu_3p_ai.scala:9:22 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                      Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdu_3p_ai.scala:9:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                        Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                                        Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdu_3p_ai.scala:10:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdu_3p_ai.scala:10:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        return test_tup1 ^ test_tup2\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1665510335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:22 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                      Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                        Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                                        Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var result : Long = 0\n        for (i <- 0 to 63) {\n            if (test_tup1 % 2 != test_tup2 % 2) {\n                result += pow(2, i).toLong\n            }\n            test_tup1 /= 2\n            test_tup2 /= 2\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1665510340,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp5kc1_pzo.scala:11:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m            test_tup1 /= \u001b[31m2\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           value /= is not a member of Long - did you mean test_tup1.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp5kc1_pzo.scala:12:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            test_tup2 /= \u001b[31m2\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           value /= is not a member of Long - did you mean test_tup2.!=?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5kc1_pzo.scala:17:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5kc1_pzo.scala:17:41 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5kc1_pzo.scala:18:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        val test_tup1_bin = test_tup1.toBinaryString\n        val test_tup2_bin = test_tup2.toBinaryString\n        val test_tup1_bin_len = test_tup1_bin.length\n        val test_tup2_bin_len = test_tup2_bin.length\n        val test_tup1_bin_rev = test_tup1_bin.reverse\n        val test_tup2_bin_rev = test_tup2_bin.reverse\n        val test_tup1_bin_rev_len = test_tup1_bin_rev.length\n        val test_tup2_bin_rev_len = test_tup2_bin_rev.length\n        var test_tup1_bin_rev_len_diff = 0\n        var test_tup2_bin_rev_len_diff = 0\n        var test_tup1_bin_rev_len_diff_str = \"\"\n        var test_tup2_bin_rev_len_diff_str = \"\"\n        var test_tup1_bin_rev_len_diff_str_rev = \"\"\n        var test_tup2_bin_rev_len_diff_str_rev = \"\"\n        var test_tup1_bin_rev_len_diff_str_rev_len = 0\n        var test_tup2_bin_rev_len_diff_str_rev_len = 0\n        var test_tup1_bin_rev_len_diff_str_rev_len_diff = 0\n        var test_tup2_bin_rev_len_diff_str_rev_len_diff = 0\n        var test_tup1_bin_rev_len_diff_str_rev_len_diff_str = \"\"\n        var test_tup2_bin_rev_len_diff_str_rev_len_diff_str = \"\"\n        var test_tup1_bin_rev_len_diff_str_rev_len_diff_str_rev = \"\"\n        var test_tup2_bin_rev_len_diff_str_rev_len_diff\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1666123700,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpdii4xceu.scala:28:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdii4xceu.scala:28:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdii4xceu.scala:30:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdii4xceu.scala:30:41 --------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdii4xceu.scala:31:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        return test_tup1 ^ test_tup2\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1665510335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:22 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                      Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                        Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                                        Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        return test_tup1 ^ test_tup2\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1665510335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:22 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                      Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                        Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                                        Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        return (test_tup1 ^ test_tup2)\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1666123660,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp93_o11_1.scala:9:22 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                      Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp93_o11_1.scala:9:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                        Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                                        Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp93_o11_1.scala:10:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp93_o11_1.scala:10:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var result = test_tup1 ^ test_tup2\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1665510335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpftto_shq.scala:10:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpftto_shq.scala:10:41 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpftto_shq.scala:11:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpftto_shq.scala:11:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        return test_tup1 ^ test_tup2\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1665510335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:22 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                      Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                        Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                                        Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        test_tup1 ^ test_tup2\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1665510335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdu_3p_ai.scala:9:22 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                      Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdu_3p_ai.scala:9:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                        Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                                        Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdu_3p_ai.scala:10:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdu_3p_ai.scala:10:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    def bitwiseXor(test_tup1 : Long, test_tup2 : Long) : Long = {\n        return test_tup1 ^ test_tup2\n    }\n    def main(args: Array[String]) = {\n    assert(bitwiseXor((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (15l, 6l, 5l, 10l));\n    assert(bitwiseXor((11l, 5l, 7l, 10l), (6l, 3l, 4l, 4l)) == (13l, 6l, 3l, 14l));\n    assert(bitwiseXor((12l, 6l, 8l, 11l), (7l, 4l, 5l, 6l)) == (11l, 2l, 13l, 13l));\n    }\n\n}\n",
      "timestamp": 1665510335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:22 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                      Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:9:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(bitwiseXor((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m15l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                        Found:    (Long, Long, Long, Long)\n\u001b[31m  |\u001b[0m                                        Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m14l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfk0vycb6.scala:10:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(bitwiseXor((\u001b[31m11l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m4l\u001b[0m)) == (\u001b[31m13l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}