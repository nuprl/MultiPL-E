{
  "name": "mbpp_640_remove_parenthesis",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove the parenthesis and what is inbetween them from a string.\n    def removeParenthesis(items : List[String]) : String = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_640_remove_parenthesis.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(removeParenthesis((List[String](\"python (chrome)\"))).equals((\"python\")));\n    assert(removeParenthesis((List[String](\"string(.abc)\"))).equals((\"string\")));\n    assert(removeParenthesis((List[String](\"alpha(num)\"))).equals((\"alpha\")));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var result = \"\"\n        for (item <- items) {\n            if (item != \"(\" && item != \")\") {\n                result += item\n            }\n        }\n        return result",
    "        val result = new StringBuilder\n        var inParenthesis = false\n        for (item <- items) {\n            if (item == \"(\") {\n                inParenthesis = true\n            } else if (item == \")\") {\n                inParenthesis = false\n            } else if (!inParenthesis) {\n                result.append(item)\n            }\n        }\n        result.toString",
    "        val regex = \"\\\\([^\\\\(\\\\)]*\\\\)\".r\n        var result = regex.replaceAllIn(items.mkString, \"\")\n        return result",
    "        var result = \"\"\n        for (i <- 0 until items.length) {\n            if (items(i) == \"(\") {\n                while (items(i) != \")\") {\n                    i += 1\n                }\n            } else {\n                result += items(i)\n            }\n        }\n        return result",
    "        var result = \"\"\n        var inParenthesis = false\n        for (item <- items) {\n            if (item == \"(\") inParenthesis = true\n            else if (item == \")\") inParenthesis = false\n            else if (!inParenthesis) result += item\n        }\n        result",
    "        var result = \"\"\n        var inParenthesis = false\n        for (item <- items) {\n            if (item == \"(\") {\n                inParenthesis = true\n            } else if (item == \")\") {\n                inParenthesis = false\n            } else if (!inParenthesis) {\n                result += item\n            }\n        }\n        return result",
    "        items.filter(x => x != \"(\" && x != \")\").mkString(\" \")",
    "        var result = \"\"\n        for (item <- items) {\n            if (item != \"(\" && item != \")\") {\n                result += item\n            }\n        }\n        return result",
    "        val sb = new StringBuilder\n        for (item <- items) {\n            if (item.startsWith(\"(\") && item.endsWith(\")\")) {\n                sb.append(item.substring(1, item.length - 1))\n            } else {\n                sb.append(item)\n            }\n        }\n        sb.toString",
    "        var result = \"\"\n        for (item <- items) {\n            if (item.contains(\"(\") || item.contains(\")\")) {\n                result += item.replaceAll(\"[()]\", \"\")\n            } else {\n                result += item\n            }\n        }\n        return result",
    "        var result = \"\"\n        for (item <- items) {\n            if (item.length == 1) {\n                result += item\n            } else {\n                if (item.charAt(0) == '(' && item.charAt(item.length - 1) == ')') {\n                    result += item.substring(1, item.length - 1)\n                } else {\n                    result += item\n                }\n            }\n        }\n        return result",
    "        var result = \"\"\n        for (item <- items) {\n            if (item.contains(\"(\")) {\n                result += item.substring(0, item.indexOf(\"(\"))\n            } else {\n                result += item\n            }\n        }\n        return result",
    "        def removeParenthesisHelper(items : List[String], result : String) : String = {\n            if (items.isEmpty) result\n            else if (items.head == \"(\") {\n                val index = items.indexOf(\")\")\n                removeParenthesisHelper(items.drop(index + 1), result)\n            }\n            else removeParenthesisHelper(items.tail, result + items.head)\n        }\n        removeParenthesisHelper(items, \"\")",
    "        items.filter(x => x != \"(\" && x != \")\").mkString",
    "        var result = \"\"\n        for (item <- items) {\n            if (item != \"(\") {\n                if (item != \")\") {\n                    result += item\n                }\n            }\n        }\n        return result",
    "        var result = \"\"\n        for (item <- items) {\n            if (item != \"(\" && item != \")\") {\n                result += item\n            }\n        }\n        return result",
    "        items.mkString(\" \").replaceAll(\"\\\\(.*?\\\\)\",\"\")",
    "        var result = \"\"\n        for (item <- items) {\n            if (item != \"(\") {\n                result += item\n            }\n        }\n        return result",
    "        var result = \"\"\n        for (item <- items) {\n            if (item != \"(\" && item != \")\") {\n                result += item\n            }\n        }\n        return result",
    "        var result = \"\"\n        for (i <- 0 until items.length) {\n            if (items(i) != \"(\") {\n                result += items(i)\n            }\n            else {\n                while (items(i) != \")\") {\n                    i += 1\n                }\n            }\n        }\n        return result"
  ]
}