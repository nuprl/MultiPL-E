{
  "name": "mbpp_640_remove_parenthesis",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove the parenthesis and what is inbetween them from a string.\n    def removeParenthesis(items : List[String]) : String = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_640_remove_parenthesis.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(removeParenthesis((List[String](\"python (chrome)\"))).equals((\"python\")));\n    assert(removeParenthesis((List[String](\"string(.abc)\"))).equals((\"string\")));\n    assert(removeParenthesis((List[String](\"alpha(num)\"))).equals((\"alpha\")));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var result = \"\"\n        for (item <- items) {\n            if (item != \"(\" && item != \")\") {\n                result += item\n            }\n        }\n        return result",
    "        val result = new StringBuilder\n        var inParenthesis = false\n        for (item <- items) {\n            if (item == \"(\") {\n                inParenthesis = true\n            } else if (item == \")\") {\n                inParenthesis = false\n            } else if (!inParenthesis) {\n                result.append(item)\n            }\n        }\n        result.toString",
    "        val regex = \"\\\\([^\\\\(\\\\)]*\\\\)\".r\n        var result = regex.replaceAllIn(items.mkString, \"\")\n        return result",
    "        var result = \"\"\n        for (i <- 0 until items.length) {\n            if (items(i) == \"(\") {\n                while (items(i) != \")\") {\n                    i += 1\n                }\n            } else {\n                result += items(i)\n            }\n        }\n        return result",
    "        var result = \"\"\n        var inParenthesis = false\n        for (item <- items) {\n            if (item == \"(\") inParenthesis = true\n            else if (item == \")\") inParenthesis = false\n            else if (!inParenthesis) result += item\n        }\n        result",
    "        var result = \"\"\n        var inParenthesis = false\n        for (item <- items) {\n            if (item == \"(\") {\n                inParenthesis = true\n            } else if (item == \")\") {\n                inParenthesis = false\n            } else if (!inParenthesis) {\n                result += item\n            }\n        }\n        return result",
    "        items.filter(x => x != \"(\" && x != \")\").mkString(\" \")",
    "        var result = \"\"\n        for (item <- items) {\n            if (item != \"(\" && item != \")\") {\n                result += item\n            }\n        }\n        return result",
    "        val sb = new StringBuilder\n        for (item <- items) {\n            if (item.startsWith(\"(\") && item.endsWith(\")\")) {\n                sb.append(item.substring(1, item.length - 1))\n            } else {\n                sb.append(item)\n            }\n        }\n        sb.toString",
    "        var result = \"\"\n        for (item <- items) {\n            if (item.contains(\"(\") || item.contains(\")\")) {\n                result += item.replaceAll(\"[()]\", \"\")\n            } else {\n                result += item\n            }\n        }\n        return result",
    "        var result = \"\"\n        for (item <- items) {\n            if (item.length == 1) {\n                result += item\n            } else {\n                if (item.charAt(0) == '(' && item.charAt(item.length - 1) == ')') {\n                    result += item.substring(1, item.length - 1)\n                } else {\n                    result += item\n                }\n            }\n        }\n        return result",
    "        var result = \"\"\n        for (item <- items) {\n            if (item.contains(\"(\")) {\n                result += item.substring(0, item.indexOf(\"(\"))\n            } else {\n                result += item\n            }\n        }\n        return result",
    "        def removeParenthesisHelper(items : List[String], result : String) : String = {\n            if (items.isEmpty) result\n            else if (items.head == \"(\") {\n                val index = items.indexOf(\")\")\n                removeParenthesisHelper(items.drop(index + 1), result)\n            }\n            else removeParenthesisHelper(items.tail, result + items.head)\n        }\n        removeParenthesisHelper(items, \"\")",
    "        items.filter(x => x != \"(\" && x != \")\").mkString",
    "        var result = \"\"\n        for (item <- items) {\n            if (item != \"(\") {\n                if (item != \")\") {\n                    result += item\n                }\n            }\n        }\n        return result",
    "        var result = \"\"\n        for (item <- items) {\n            if (item != \"(\" && item != \")\") {\n                result += item\n            }\n        }\n        return result",
    "        items.mkString(\" \").replaceAll(\"\\\\(.*?\\\\)\",\"\")",
    "        var result = \"\"\n        for (item <- items) {\n            if (item != \"(\") {\n                result += item\n            }\n        }\n        return result",
    "        var result = \"\"\n        for (item <- items) {\n            if (item != \"(\" && item != \")\") {\n                result += item\n            }\n        }\n        return result",
    "        var result = \"\"\n        for (i <- 0 until items.length) {\n            if (items(i) != \"(\") {\n                result += items(i)\n            }\n            else {\n                while (items(i) != \")\") {\n                    i += 1\n                }\n            }\n        }\n        return result",
    "        var result = \"\"\n        for (item <- items) {\n            if (item.contains(\"(\")) {\n                result += item.substring(0, item.indexOf(\"(\"))\n            } else {\n                result += item\n            }\n        }\n        return result",
    "        var result = \"\"\n        for (item <- items) {\n            if (item.length > 0 && item(0) != '(' && item(item.length - 1) != ')') {\n                result += item\n            }\n        }\n        return result",
    "        var result = \"\"\n        for (item <- items) {\n            if (item != \"(\" && item != \")\") {\n                result += item\n            }\n        }\n        return result",
    "        var result = \"\"\n        for (item <- items) {\n            if (item != \"(\") {\n                if (item != \")\") {\n                    result += item\n                }\n            }\n        }\n        return result",
    "        val sb = new StringBuilder\n        items.foreach(x => {\n            if (x != \"(\" && x != \")\") sb.append(x)\n        })\n        sb.toString",
    "        var result = \"\"\n        for (item <- items) {\n            if (item != \"(\") {\n                if (item != \")\") {\n                    result += item\n                }\n            }\n        }\n        return result",
    "        var result = \"\"\n        for (item <- items) {\n            if (item.length == 1) {\n                result += item\n            }\n        }\n        return result",
    "        val sb = new StringBuilder\n        for (item <- items) {\n            if (item.length == 1) {\n                sb.append(item)\n            }\n        }\n        sb.toString",
    "        var result = \"\"\n        for (item <- items) {\n            if (item.length > 0 && item(0) != '(' && item(item.length - 1) != ')') {\n                result += item\n            }\n        }\n        return result",
    "        val sb = new StringBuilder\n        for (item <- items) {\n            if (item.length == 1) {\n                sb.append(item)\n            } else if (item.length > 1) {\n                if (item.charAt(0) != '(' && item.charAt(item.length - 1) != ')') {\n                    sb.append(item)\n                } else if (item.charAt(0) == '(' && item.charAt(item.length - 1) == ')') {\n                    sb.append(item.substring(1, item.length - 1))\n                } else if (item.charAt(0) == '(') {\n                    sb.append(item.substring(1, item.length))\n                } else if (item.charAt(item.length - 1) == ')') {\n                    sb.append(item.substring(0, item.length - 1))\n                }\n            }\n        }\n        sb.toString",
    "        var result = \"\"\n        for (item <- items) {\n            if (item != \"(\" && item != \")\") {\n                result += item\n            }\n        }\n        return result",
    "        var result = \"\"\n        for (item <- items) {\n            if (item == \"(\") {\n                var count = 1\n                while (count > 0) {\n                    item = items.tail.head\n                    if (item == \"(\") count += 1\n                    else if (item == \")\") count -= 1\n                }\n            } else result += item\n        }\n        result",
    "        var result = \"\"\n        for (item <- items) {\n            if (item != \"(\") {\n                if (item != \")\") {\n                    result += item\n                }\n            }\n        }\n        return result",
    "        var result = \"\"\n        for (item <- items) {\n            if (item.contains(\"(\")) {\n                result += item.substring(0, item.indexOf(\"(\"))\n            } else {\n                result += item\n            }\n        }\n        return result",
    "        var result = \"\"\n        for (item <- items) {\n            if (item != \"(\" && item != \")\") {\n                result += item\n            }\n        }\n        return result",
    "        var result = \"\"\n        for (i <- 0 until items.length) {\n            if (items(i) == \"(\") {\n                while (items(i) != \")\") {\n                    i += 1\n                }\n            }\n            else {\n                result += items(i)\n            }\n        }\n        return result",
    "        var result = \"\"\n        for (item <- items) {\n            if (item.contains(\"(\")) {\n                result += item.substring(0, item.indexOf(\"(\"))\n            } else {\n                result += item\n            }\n        }\n        return result",
    "        items.filter(x => x != \"(\" && x != \")\").mkString(\" \")",
    "        var result = \"\"\n        for (item <- items) {\n            if (item.length == 1) {\n                result += item\n            }\n        }\n        return result",
    "        var result = \"\"\n        for (item <- items) {\n            if (item.contains(\"(\")) {\n                result += item.substring(0, item.indexOf(\"(\"))\n            } else {\n                result += item\n            }\n        }\n        return result",
    "        var result = \"\"\n        for (item <- items) {\n            if (item != \"(\") {\n                if (item != \")\") {\n                    result += item\n                }\n            }\n        }\n        return result",
    "        var result = \"\"\n        for (item <- items) {\n            if (item != \"(\") {\n                if (item != \")\") {\n                    result += item\n                }\n            }\n        }\n        return result",
    "        var result = \"\"\n        for (i <- 0 until items.length) {\n            if (items(i) != \"(\") {\n                result += items(i)\n            } else {\n                while (items(i) != \")\") {\n                    i += 1\n                }\n            }\n        }\n        return result",
    "        var result = \"\"\n        for (item <- items) {\n            if (item != \"(\") {\n                if (item != \")\") {\n                    result += item\n                }\n            }\n        }\n        return result",
    "        var result = \"\"\n        for (item <- items) {\n            if (item != \"(\" && item != \")\") {\n                result += item\n            }\n        }\n        return result",
    "        var result = \"\"\n        for (item <- items) {\n            if (item.contains(\"(\")) {\n                result += item.substring(0, item.indexOf(\"(\"))\n            } else {\n                result += item\n            }\n        }\n        return result",
    "        var result = \"\"\n        for (item <- items) {\n            if (item != \"(\" && item != \")\") {\n                result += item\n            }\n        }\n        return result",
    "        var result = \"\"\n        for (item <- items) {\n            if (item != \"(\") {\n                if (item != \")\") {\n                    result += item\n                }\n            }\n        }\n        return result",
    "        items.filter(x => x != \"(\" && x != \")\").mkString(\" \")",
    "        var result = \"\"\n        for (item <- items) {\n            if (item.length > 0 && item.charAt(0) != '(' && item.charAt(item.length - 1) != ')') {\n                result += item\n            }\n        }\n        result",
    "        var result = \"\"\n        for (item <- items) {\n            if (item != \"(\" && item != \")\") {\n                result += item\n            }\n        }\n        return result",
    "        var result = \"\"\n        for (item <- items) {\n            if (item != \"(\") {\n                result += item\n            }\n        }\n        return result",
    "        items.filter(x => x != \"(\" && x != \")\").mkString(\" \")",
    "        var result = \"\"\n        for (item <- items) {\n            if (item != \"(\" && item != \")\") {\n                result += item\n            }\n        }\n        return result",
    "        var result = \"\"\n        for (item <- items) {\n            if (item != \"(\" && item != \")\") {\n                result += item\n            }\n        }\n        return result",
    "        var result = \"\"\n        for (item <- items) {\n            if (item == \"(\") {\n                var temp = \"\"\n                while (item != \")\") {\n                    item = items.tail.head\n                }\n            } else {\n                result += item\n            }\n        }\n        return result",
    "        var str = \"\"\n        for (item <- items) {\n            if (item == \"(\") {\n                str = str.substring(0, str.length - 1)\n            } else if (item == \")\") {\n                str = str.substring(0, str.length - 1)\n            } else {\n                str += item\n            }\n        }\n        str",
    "        var result = \"\"\n        for (item <- items) {\n            if (item != \"(\" && item != \")\") {\n                result += item\n            }\n        }\n        return result",
    "        var result = \"\"\n        for (item <- items) {\n            if (item != \"(\") {\n                if (item != \")\") {\n                    result += item\n                }\n            }\n        }\n        return result",
    "        var result = \"\"\n        for (item <- items) {\n            if (item != \"(\" && item != \")\") {\n                result += item\n            }\n        }\n        return result",
    "        var result = \"\"\n        for (item <- items) {\n            if (item != \"(\" && item != \")\") {\n                result += item\n            }\n        }\n        return result",
    "        var result = \"\"\n        for (item <- items) {\n            if (item.startsWith(\"(\") && item.endsWith(\")\")) {\n                result += item.substring(1, item.length - 1)\n            } else {\n                result += item\n            }\n        }\n        return result",
    "        val sb = new StringBuilder\n        for (item <- items) {\n            if (item.startsWith(\"(\") && item.endsWith(\")\")) {\n                sb.append(item.substring(1, item.length - 1))\n            } else {\n                sb.append(item)\n            }\n        }\n        sb.toString",
    "        var result = \"\"\n        for (item <- items) {\n            if (item == \"(\") {\n                result = result + \" \"\n            } else if (item == \")\") {\n                result = result + \" \"\n            } else {\n                result = result + item\n            }\n        }\n        return result",
    "        var result = \"\"\n        for (item <- items) {\n            if (item.length > 0) {\n                if (item(0) != '(') {\n                    result += item\n                }\n            }\n        }\n        return result",
    "        var result = \"\"\n        for (item <- items) {\n            if (item != \"(\") {\n                if (item != \")\") {\n                    result += item\n                }\n            }\n        }\n        return result",
    "        var result = \"\"\n        for (item <- items) {\n            if (item != \"(\") {\n                result += item\n            }\n        }\n        return result",
    "        items.mkString",
    "        var result = \"\"\n        for (i <- 0 until items.length) {\n            if (items(i) == \"(\") {\n                var j = i + 1\n                while (items(j) != \")\") {\n                    j += 1\n                }\n                i = j\n            } else {\n                result += items(i)\n            }\n        }\n        return result",
    "        var result = \"\"\n        for (item <- items) {\n            if (item != \"(\" && item != \")\") {\n                result += item\n            }\n        }\n        return result",
    "        var result = \"\"\n        for (item <- items) {\n            if (item.contains(\"(\")) {\n                result += item.substring(0, item.indexOf(\"(\"))\n            } else {\n                result += item\n            }\n        }\n        return result",
    "        def removeParenthesisHelper(items : List[String], acc : String) : String = {\n            if (items.isEmpty) return acc\n            if (items.head == \"(\") {\n                var i = 1\n                var count = 1\n                while (count != 0) {\n                    if (items(i) == \"(\") count += 1\n                    if (items(i) == \")\") count -= 1\n                    i += 1\n                }\n                removeParenthesisHelper(items.drop(i), acc)\n            }\n            else removeParenthesisHelper(items.tail, acc + items.head)\n        }\n        removeParenthesisHelper(items, \"\")",
    "        var result = \"\"\n        for (i <- items) {\n            if (i != \"(\") {\n                result += i\n            }\n        }\n        return result",
    "        var result = \"\"\n        var inParenthesis = false\n        for (item <- items) {\n            if (item == \"(\") {\n                inParenthesis = true\n            } else if (item == \")\") {\n                inParenthesis = false\n            } else if (!inParenthesis) {\n                result += item\n            }\n        }\n        return result",
    "        items match {\n            case Nil => \"\"\n            case x :: xs => if (x.contains(\"(\")) removeParenthesis(xs) else x + removeParenthesis(xs)\n        }",
    "        var result = \"\"\n        for (item <- items) {\n            if (item != \"(\") {\n                if (item != \")\") {\n                    result += item\n                }\n            }\n        }\n        return result",
    "        var result = \"\"\n        for (item <- items) {\n            if (item.length > 0) {\n                if (item(0) != '(' && item(item.length - 1) != ')') {\n                    result += item\n                }\n            }\n        }\n        return result",
    "        var result = \"\"\n        for (item <- items) {\n            if (item != \"(\" && item != \")\") {\n                result += item\n            }\n        }\n        return result",
    "        var result = \"\"\n        for (item <- items) {\n            if (item != \"(\") {\n                if (item != \")\") {\n                    result += item\n                }\n            }\n        }\n        return result",
    "        var result = \"\"\n        for (item <- items) {\n            if (item.contains(\"(\")) {\n                val index = item.indexOf(\"(\")\n                result += item.substring(0, index)\n            } else {\n                result += item\n            }\n        }\n        result",
    "        var result = \"\"\n        for (item <- items) {\n            if (item == \"(\") {\n                var temp = \"\"\n                while (items(items.indexOf(item) + 1) != \")\") {\n                    temp += items(items.indexOf(item) + 1)\n                    items.remove(items.indexOf(item) + 1)\n                }\n                items.remove(items.indexOf(item) + 1)\n                items.remove(items.indexOf(item))\n                result += temp\n            }\n            else result += item\n        }\n        result",
    "        var result = \"\"\n        for (item <- items) {\n            if (item.contains(\"(\") || item.contains(\")\")) {\n                result += item.replaceAll(\"[()]\", \"\")\n            } else {\n                result += item\n            }\n        }\n        return result",
    "        items.mkString",
    "        var result = \"\"\n        for (item <- items) {\n            if (item != \"(\" && item != \")\") {\n                result += item\n            }\n        }\n        return result",
    "        var result = \"\"\n        for (item <- items) {\n            if (item.charAt(0) != '(' && item.charAt(item.length - 1) != ')') {\n                result += item\n            }\n        }\n        return result",
    "        var result = \"\"\n        for (i <- items) {\n            if (i != \"(\") {\n                if (i != \")\") {\n                    result += i\n                }\n            }\n        }\n        return result",
    "        val sb = new StringBuilder\n        items.foreach(item => {\n            if (item.contains(\"(\")) {\n                val index = item.indexOf(\"(\")\n                sb.append(item.substring(0, index))\n            } else {\n                sb.append(item)\n            }\n        })\n        sb.toString",
    "        var result = \"\"\n        for (item <- items) {\n            if (item != \"(\" && item != \")\") {\n                result += item\n            }\n        }\n        return result",
    "        var result = \"\"\n        for (item <- items) {\n            if (item != \"(\" && item != \")\") {\n                result += item\n            }\n        }\n        return result",
    "        var result = \"\"\n        for (item <- items) {\n            if (item != \"(\" && item != \")\") result += item\n        }\n        result",
    "        var result = \"\"\n        for (i <- 0 until items.length) {\n            if (items(i) != \"(\") {\n                result += items(i)\n            }\n            else {\n                var j = i + 1\n                while (items(j) != \")\") {\n                    j += 1\n                }\n                i = j\n            }\n        }\n        return result",
    "        var result : String = \"\"\n        for (item <- items) {\n            if (item != \"(\" && item != \")\") {\n                result += item\n            }\n        }\n        return result",
    "        var result = \"\"\n        for (item <- items) {\n            if (item.length == 1) {\n                result += item\n            }\n        }\n        return result",
    "        var result = \"\"\n        for (item <- items) {\n            if (item != \"(\" && item != \")\") {\n                result += item\n            }\n        }\n        return result",
    "        var result = \"\"\n        for (item <- items) {\n            if (item != \"(\") {\n                if (item != \")\") {\n                    result += item\n                }\n            }\n        }\n        return result",
    "        val sb = new StringBuilder\n        for (item <- items) {\n            if (item.contains(\"(\")) {\n                sb.append(item.substring(0, item.indexOf(\"(\")))\n            } else {\n                sb.append(item)\n            }\n        }\n        sb.toString",
    "        var result = \"\"\n        for (item <- items) {\n            if (item != \"(\" && item != \")\") result += item\n        }\n        result",
    "        var result = \"\"\n        for (i <- 0 until items.length) {\n            if (items(i) == \"(\") {\n                while (items(i) != \")\") {\n                    i += 1\n                }\n            }\n            else {\n                result += items(i)\n            }\n        }\n        return result",
    "        items.filter(x => x != \"(\" && x != \")\").mkString",
    "        var result = \"\"\n        for (item <- items) {\n            if (item.contains(\"(\") || item.contains(\")\")) {\n                result += \"\"\n            } else {\n                result += item\n            }\n        }\n        return result",
    "        val sb = new StringBuilder\n        for (item <- items) {\n            if (item.startsWith(\"(\") && item.endsWith(\")\")) {\n                sb.append(item.substring(1, item.length - 1))\n            } else {\n                sb.append(item)\n            }\n        }\n        sb.toString",
    "        val sb = new StringBuilder\n        items.foreach(item => {\n            if (item.contains(\"(\")) {\n                val index = item.indexOf(\"(\")\n                sb.append(item.substring(0, index))\n            } else sb.append(item)\n        })\n        sb.toString",
    "        var result = \"\"\n        for (item <- items) {\n            if (item != \"(\") {\n                if (item != \")\") {\n                    result += item\n                }\n            }\n        }\n        return result",
    "        var result = \"\"\n        for (item <- items) {\n            if (item.length == 1) {\n                result += item\n            }\n        }\n        return result",
    "        var result = \"\"\n        for (i <- items) {\n            if (i != \"(\") {\n                if (i != \")\") {\n                    result += i\n                }\n            }\n        }\n        return result",
    "        var result = \"\"\n        for (i <- 0 until items.length) {\n            if (items(i) != \"(\") {\n                result += items(i)\n            } else {\n                while (items(i) != \")\") {\n                    i += 1\n                }\n            }\n        }\n        return result",
    "        var result = \"\"\n        for (item <- items) {\n            if (item != \"(\" && item != \")\") result += item\n        }\n        result",
    "        var result = \"\"\n        for (i <- items) {\n            if (i != \"(\" && i != \")\") {\n                result += i\n            }\n        }\n        return result",
    "        var result = \"\"\n        for (i <- items) {\n            if (i != \"(\" && i != \")\") {\n                result += i\n            }\n        }\n        return result",
    "        var result = \"\"\n        for (i <- items) {\n            if (i != \"(\" && i != \")\") {\n                result += i\n            }\n        }\n        return result",
    "        var result = \"\"\n        for (i <- 0 until items.length) {\n            if (items(i) != \"(\") {\n                result += items(i)\n            }\n        }\n        return result",
    "        var result = \"\"\n        for (i <- 0 until items.length) {\n            if (items(i) != \"(\") {\n                result += items(i)\n            } else {\n                while (items(i) != \")\") {\n                    i += 1\n                }\n            }\n        }\n        return result",
    "        var result = \"\"\n        for (item <- items) {\n            if (item != \"(\") {\n                if (item != \")\") {\n                    result += item\n                }\n            }\n        }\n        return result",
    "        var result = \"\"\n        for (item <- items) {\n            if (item.length() > 0 && item(0) != '(' && item(item.length() - 1) != ')') {\n                result += item + \" \"\n            }\n        }\n        return result.trim()",
    "        var result = \"\"\n        for (item <- items) {\n            if (item != \"(\" && item != \")\") {\n                result += item\n            }\n        }\n        return result",
    "        var result = \"\"\n        for (item <- items) {\n            if (item != \"(\") {\n                if (item != \")\") {\n                    result += item\n                }\n            }\n        }\n        return result",
    "        var result = \"\"\n        var inParenthesis = false\n        for (i <- items) {\n            if (i == \"(\") {\n                inParenthesis = true\n            } else if (i == \")\") {\n                inParenthesis = false\n            } else if (!inParenthesis) {\n                result += i\n            }\n        }\n        return result",
    "        var result = \"\"\n        for (item <- items) {\n            if (item == \"(\") {\n                var count = 1\n                while (count > 0) {\n                    item = items.tail.head\n                    if (item == \"(\") count += 1\n                    if (item == \")\") count -= 1\n                }\n            } else {\n                result += item\n            }\n        }\n        result",
    "        var result = \"\"\n        for (item <- items) {\n            if (item != \"(\" && item != \")\") {\n                result += item\n            }\n        }\n        return result",
    "        items.filter(x => x != \"(\" && x != \")\").mkString",
    "        var result = \"\"\n        for (i <- items) {\n            if (i != \"(\" && i != \")\") {\n                result += i\n            }\n        }\n        return result",
    "        var result = \"\"\n        for (item <- items) {\n            if (item.contains(\"(\") || item.contains(\")\")) {\n                result += \"\"\n            } else {\n                result += item\n            }\n        }\n        return result",
    "        items.filter(x => x != \"(\" && x != \")\").mkString",
    "        var result = \"\"\n        for (item <- items) {\n            if (item != \"(\") {\n                if (item != \")\") {\n                    result += item\n                }\n            }\n        }\n        return result",
    "        var result = \"\"\n        for (item <- items) {\n            if (item.contains(\"(\")) {\n                result += item.substring(0, item.indexOf(\"(\"))\n            } else {\n                result += item\n            }\n        }\n        return result",
    "        val sb = new StringBuilder\n        for (item <- items) {\n            if (item.length == 1) sb.append(item)\n            else if (item.length > 1 && item(0) != '(' && item(item.length - 1) != ')') sb.append(item)\n        }\n        sb.toString",
    "        var result = \"\"\n        for (item <- items) {\n            if (item == \"(\") {\n                var temp = \"\"\n                while (item != \")\") {\n                    temp += item\n                    item = items.tail.head\n                }\n                result += temp\n            } else {\n                result += item\n            }\n        }\n        result",
    "        var result = \"\"\n        items.foreach(item => {\n            if (item.contains(\"(\") || item.contains(\")\")) {\n                result += item.replaceAll(\"\\\\(.*?\\\\)\", \"\")\n            } else {\n                result += item\n            }\n        })\n        result",
    "        var result = \"\"\n        for (item <- items) {\n            if (item != \"(\") {\n                if (item != \")\") {\n                    result += item\n                }\n            }\n        }\n        return result",
    "        var result = \"\"\n        for (item <- items) {\n            if (item != \"(\") {\n                if (item != \")\") {\n                    result += item\n                }\n            }\n        }\n        return result",
    "        var result = \"\"\n        for (item <- items) {\n            if (item.contains(\"(\")) {\n                result += item.substring(0, item.indexOf(\"(\"))\n            } else {\n                result += item\n            }\n        }\n        return result",
    "        var result = \"\"\n        for (item <- items) {\n            if (item != \"(\" && item != \")\") {\n                result += item\n            }\n        }\n        return result",
    "        val sb = new StringBuilder\n        items.foreach(item => {\n            if (item.contains(\"(\")) {\n                val index = item.indexOf(\"(\")\n                sb.append(item.substring(0, index))\n            } else {\n                sb.append(item)\n            }\n        })\n        sb.toString",
    "        var result = \"\"\n        for (item <- items) {\n            if (item != \"(\" && item != \")\") {\n                result += item\n            }\n        }\n        return result",
    "        var result = \"\"\n        for (item <- items) {\n            if (item.contains(\"(\") || item.contains(\")\")) {\n                result += item.replaceAll(\"[()]\", \"\")\n            } else {\n                result += item\n            }\n        }\n        return result",
    "        items.filter(x => x != \"(\" && x != \")\").mkString(\" \")",
    "        var result = \"\"\n        for (i <- items) {\n            if (i != \"(\" && i != \")\") {\n                result += i\n            }\n        }\n        return result",
    "        items.mkString(\" \").replaceAll(\"\\\\(.*?\\\\)\", \"\")",
    "        var result = \"\"\n        for (item <- items) {\n            if (item != \"(\") {\n                result += item\n            }\n        }\n        return result",
    "        var result = \"\"\n        for (i <- 0 until items.length) {\n            if (items(i) != \"(\") result += items(i)\n            else {\n                var j = i + 1\n                while (items(j) != \")\") j += 1\n                i = j\n            }\n        }\n        result",
    "        items.filter(item => item != \"(\" && item != \")\").mkString(\" \")",
    "        var result = \"\"\n        for (item <- items) {\n            if (item != \"(\" && item != \")\") {\n                result += item\n            }\n        }\n        return result",
    "        val sb = new StringBuilder\n        for (item <- items) {\n            if (item.length > 0 && item(0) != '(') sb.append(item)\n        }\n        sb.toString",
    "        var result = \"\"\n        for (item <- items) {\n            if (item != \"(\") {\n                if (item != \")\") {\n                    result += item\n                }\n            }\n        }\n        return result",
    "        var result = \"\"\n        for (item <- items) {\n            if (item != \"(\" && item != \")\") {\n                result += item\n            }\n        }\n        return result",
    "        var result = \"\"\n        for (item <- items) {\n            if (item != \"(\" && item != \")\") {\n                result += item\n            }\n        }\n        return result",
    "        var result = \"\"\n        for (item <- items) {\n            if (item != \"(\") {\n                if (item != \")\") {\n                    result += item\n                }\n            }\n        }\n        return result",
    "        var result = \"\"\n        for (item <- items) {\n            if (item != \"(\" && item != \")\") {\n                result += item\n            }\n        }\n        return result",
    "        var result = \"\"\n        for (item <- items) {\n            if (item.contains(\"(\")) {\n                result += item.substring(0, item.indexOf(\"(\"))\n            } else {\n                result += item\n            }\n        }\n        return result",
    "        var result = \"\"\n        var inParenthesis = false\n        for (item <- items) {\n            if (item == \"(\") {\n                inParenthesis = true\n            } else if (item == \")\") {\n                inParenthesis = false\n            } else if (!inParenthesis) {\n                result += item\n            }\n        }\n        return result",
    "        var result = \"\"\n        for (i <- items) {\n            if (i != \"(\") {\n                if (i != \")\") {\n                    result += i\n                }\n            }\n        }\n        return result",
    "        var ret = \"\"\n        for (item <- items) {\n            if (item.length > 0 && item(0) != '(' && item(item.length - 1) != ')') {\n                ret += item\n            }\n        }\n        ret",
    "        var result = \"\"\n        for (item <- items) {\n            if (item != \"(\") {\n                if (item != \")\") {\n                    result += item\n                }\n            }\n        }\n        return result",
    "        var result = \"\"\n        for (item <- items) {\n            if (item.contains(\"(\")) {\n                result += item.substring(0, item.indexOf(\"(\"))\n            } else {\n                result += item\n            }\n        }\n        return result",
    "        var result = \"\"\n        for (item <- items) {\n            if (item != \"(\" && item != \")\") {\n                result += item\n            }\n        }\n        return result",
    "        var result = \"\"\n        for (item <- items) {\n            if (item.contains(\"(\")) {\n                result += item.substring(0, item.indexOf(\"(\"))\n            } else {\n                result += item\n            }\n        }\n        return result",
    "        items.filter(x => x != \"(\" && x != \")\").mkString(\" \")",
    "        var result = \"\"\n        var inParenthesis = false\n        for (i <- items) {\n            if (i == \"(\") {\n                inParenthesis = true\n            } else if (i == \")\") {\n                inParenthesis = false\n            } else if (!inParenthesis) {\n                result += i\n            }\n        }\n        result",
    "        var result = \"\"\n        for (item <- items) {\n            if (item != \"(\" && item != \")\") {\n                result += item\n            }\n        }\n        return result",
    "        var result = \"\"\n        for (item <- items) {\n            if (item != \"(\") {\n                if (item != \")\") {\n                    result += item\n                }\n            }\n        }\n        return result",
    "        var result = \"\"\n        for (item <- items) {\n            if (item != \"(\") {\n                if (item != \")\") {\n                    result += item\n                }\n            }\n        }\n        return result",
    "        var result = \"\"\n        for (item <- items) {\n            if (item != \"(\") {\n                result += item\n            }\n        }\n        return result",
    "        var result = \"\"\n        for (item <- items) {\n            if (item != \"(\" && item != \")\") {\n                result += item\n            }\n        }\n        return result",
    "        var result = \"\"\n        for (item <- items) {\n            if (item.contains(\"(\")) {\n                result += item.substring(0, item.indexOf(\"(\"))\n            } else {\n                result += item\n            }\n        }\n        return result",
    "        var result = \"\"\n        for (item <- items) {\n            if (item != \"(\" && item != \")\") result += item\n        }\n        result",
    "        var result = \"\"\n        for (item <- items) {\n            if (item == \"(\") {\n                while (items(items.indexOf(item) + 1) != \")\") {\n                    items.remove(items.indexOf(item) + 1)\n                }\n                items.remove(items.indexOf(item))\n                items.remove(items.indexOf(\")\"))\n            }\n        }\n        for (item <- items) {\n            result += item\n        }\n        return result",
    "        var result = \"\"\n        for (item <- items) {\n            if (item.contains(\"(\")) {\n                result += item.substring(0, item.indexOf(\"(\"))\n            } else {\n                result += item\n            }\n        }\n        return result",
    "        var result = \"\"\n        for (item <- items) {\n            if (item.contains(\"(\")) {\n                result += item.substring(0, item.indexOf(\"(\"))\n            } else {\n                result += item\n            }\n        }\n        return result",
    "        var result = \"\"\n        for (item <- items) {\n            if (item.contains('(')) {\n                result += item.substring(0, item.indexOf('('))\n            } else {\n                result += item\n            }\n        }\n        return result",
    "        val regex = \"\\\\(.*?\\\\)\".r\n        val result = regex.replaceAllIn(items.mkString(\" \"), \"\")\n        result",
    "        val sb = new StringBuilder\n        for (i <- items) {\n            if (i != \"(\" && i != \")\") sb.append(i)\n        }\n        sb.toString",
    "        var result = \"\"\n        for (i <- items) {\n            if (i != \"(\" && i != \")\") {\n                result += i\n            }\n        }\n        return result",
    "        var result = \"\"\n        for (item <- items) {\n            if (item == \"(\") {\n                var temp = \"\"\n                while (items(items.indexOf(item) + 1) != \")\") {\n                    temp += items(items.indexOf(item) + 1)\n                    items.remove(items.indexOf(item) + 1)\n                }\n                items.remove(items.indexOf(item) + 1)\n                items.remove(items.indexOf(item))\n                result += temp\n            } else {\n                result += item\n            }\n        }\n        result",
    "        var result = \"\"\n        for (item <- items) {\n            if (item != \"(\" && item != \")\") {\n                result += item\n            }\n        }\n        return result",
    "        var result = \"\"\n        for (item <- items) {\n            if (item.contains(\"(\")) {\n                result += item.substring(0, item.indexOf(\"(\"))\n            } else {\n                result += item\n            }\n        }\n        return result",
    "        var result = \"\"\n        for (item <- items) {\n            if (item.contains(\"(\")) {\n                result += item.substring(0, item.indexOf(\"(\"))\n            } else {\n                result += item\n            }\n        }\n        return result",
    "        val sb = new StringBuilder\n        for (item <- items) {\n            if (item.length > 0 && item(0) != '(' && item(item.length - 1) != ')') {\n                sb.append(item)\n            }\n        }\n        sb.toString",
    "        items.filter(x => x != \"(\" && x != \")\").mkString",
    "        var result = \"\"\n        for (item <- items) {\n            if (item != \"(\" && item != \")\") {\n                result += item\n            }\n        }\n        return result",
    "        var result = \"\"\n        for (item <- items) {\n            if (item.startsWith(\"(\") && item.endsWith(\")\")) {\n                result += item.substring(1, item.length - 1)\n            } else {\n                result += item\n            }\n        }\n        return result",
    "        val sb = new StringBuilder\n        var inParenthesis = false\n        for (item <- items) {\n            if (item == \"(\") {\n                inParenthesis = true\n            } else if (item == \")\") {\n                inParenthesis = false\n            } else if (!inParenthesis) {\n                sb.append(item)\n            }\n        }\n        sb.toString",
    "        var result = \"\"\n        for (i <- items) {\n            if (i != \"(\" && i != \")\") {\n                result += i\n            }\n        }\n        return result",
    "        var result = \"\"\n        for (item <- items) {\n            if (item != \"(\" && item != \")\") {\n                result += item\n            }\n        }\n        return result",
    "        var result = \"\"\n        for (item <- items) {\n            if (item != \"(\") {\n                if (item != \")\") {\n                    result += item\n                }\n            }\n        }\n        return result",
    "        var result = \"\"\n        for (item <- items) {\n            if (item.contains(\"(\")) {\n                result += item.substring(0, item.indexOf(\"(\"))\n            } else {\n                result += item\n            }\n        }\n        return result",
    "        var result = \"\"\n        var inParenthesis = false\n        for (item <- items) {\n            if (item == \"(\") inParenthesis = true\n            else if (item == \")\") inParenthesis = false\n            else if (!inParenthesis) result += item\n        }\n        result",
    "        var result = \"\"\n        for (item <- items) {\n            if (item != \"(\" && item != \")\") {\n                result += item\n            }\n        }\n        return result",
    "        var result = \"\"\n        for (item <- items) {\n            if (item.contains(\"(\") && item.contains(\")\")) {\n                result += item.substring(0, item.indexOf(\"(\"))\n                result += item.substring(item.indexOf(\")\") + 1, item.length)\n            } else {\n                result += item\n            }\n        }\n        return result",
    "        var result = \"\"\n        for (item <- items) {\n            if (item.contains(\"(\")) {\n                result += item.substring(0, item.indexOf(\"(\"))\n            } else {\n                result += item\n            }\n        }\n        return result",
    "        var result = \"\"\n        for (item <- items) {\n            if (item != \"(\" && item != \")\") {\n                result += item\n            }\n        }\n        return result",
    "        var result = \"\"\n        for (item <- items) {\n            if (item != \"(\" && item != \")\") {\n                result += item\n            }\n        }\n        return result",
    "        var result = \"\"\n        for (item <- items) {\n            if (item != \"(\" && item != \")\") {\n                result += item\n            }\n        }\n        return result",
    "        var result = \"\"\n        for (item <- items) {\n            if (item != \"(\" && item != \")\") {\n                result += item\n            }\n        }\n        return result",
    "        var result = \"\"\n        for (item <- items) {\n            if (item != \"(\") {\n                if (item != \")\") {\n                    result += item\n                }\n            }\n        }\n        return result",
    "        var result = \"\"\n        for (item <- items) {\n            if (item == \"(\" || item == \")\") {\n                result += \"\"\n            } else {\n                result += item\n            }\n        }\n        return result",
    "        var s = \"\"\n        for (i <- items) {\n            if (i != \"(\" && i != \")\") {\n                s += i\n            }\n        }\n        s",
    "        var result = \"\"\n        for (item <- items) {\n            if (item.contains(\"(\") || item.contains(\")\")) {\n                result += \"\"\n            } else {\n                result += item\n            }\n        }\n        return result",
    "        var result = \"\"\n        var inParen = false\n        for (item <- items) {\n            if (item == \"(\") {\n                inParen = true\n            } else if (item == \")\") {\n                inParen = false\n            } else if (!inParen) {\n                result += item\n            }\n        }\n        return result",
    "        var result = \"\"\n        for (i <- 0 until items.length) {\n            if (items(i) == \"(\") {\n                var j = i + 1\n                while (items(j) != \")\") {\n                    j += 1\n                }\n                i = j\n            } else {\n                result += items(i)\n            }\n        }\n        return result",
    "        var result = \"\"\n        for (item <- items) {\n            if (item.contains(\"(\")) {\n                result += item.substring(0, item.indexOf(\"(\"))\n            } else {\n                result += item\n            }\n        }\n        return result"
  ]
}