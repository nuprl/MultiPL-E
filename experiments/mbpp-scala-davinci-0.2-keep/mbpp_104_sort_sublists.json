{
  "name": "mbpp_104_sort_sublists",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(input_list : List[String]) : List[List[String]] = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_104_sort_sublists.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[String](\" red \", \"green\"), List[String](\"blue \", \" black\"), List[String](\" orange\", \"brown\")))).equals((List[List[String]](List[String](\" red \", \"green\"), List[String](\" black\", \"blue \"), List[String](\" orange\", \"brown\")))));\n    assert(sortSublists((List[String](\"zilver\", \"gold\"), List[String](\"magnesium\", \"aluminium\"), List[String](\"steel\", \"bronze\")))).equals((List[List[String]](List[String](\"gold\", \"zilver\"), List[String](\"aluminium\", \"magnesium\"), List[String](\"bronze\", \"steel\")))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        input_list.map(x => x.split(\" \").toList.sortWith(_.length < _.length)).toList",
    "        input_list.map(x => x.split(\" \").toList.sorted)",
    "        input_list.map(x => x.split(\" \").toList.sorted)",
    "        input_list.map(x => x.split(\" \").toList.sorted)",
    "        input_list.map(x => x.split(\" \").toList.sortWith(_ < _)).toList",
    "        input_list.map(x => x.split(\" \").toList.sortWith(_ < _)).toList",
    "        input_list.map(x => x.split(\" \").toList.sorted)",
    "        input_list.map(x => x.split(\" \").toList.sortWith(_ < _))",
    "        val list_of_lists : List[List[String]] = input_list.map(x => List(x))\n        list_of_lists.map(x => x.sortWith(_ < _))",
    "        input_list.map(x => x.split(\" \").toList).map(x => x.sortWith(_ < _))",
    "        input_list.map(x => x.split(\" \").toList.sorted)",
    "        input_list.map(x => x.split(\" \").toList.sorted)",
    "        var output_list : List[List[String]] = List()\n        for (i <- 0 to input_list.length - 1) {\n            output_list = output_list :+ input_list(i).split(\" \").toList.sorted\n        }\n        return output_list",
    "        input_list.map(x => x.split(\" \").toList.sortWith(_ < _)).toList",
    "        input_list.map(x => x.split(\" \").toList.sorted)",
    "        input_list.map(x => x.split(\" \").toList.sortWith(_ < _)).toList",
    "        input_list.map(x => x.split(\" \").toList.sortWith(_ < _)).toList",
    "        input_list.map(x => x.split(\" \").toList.sorted)",
    "        input_list.map(x => x.split(\" \").toList.sorted)",
    "        input_list.map(x => x.split(\" \").toList.sortWith(_ < _)).toList",
    "        input_list.map(x => x.split(\" \").toList.sortWith(_ < _)).toList",
    "        input_list.map(x => x.split(\" \").toList.sortWith(_ < _)).toList",
    "        input_list.map(x => x.split(\" \").toList.sorted)",
    "        input_list.map(x => x.split(\" \").toList.sorted)",
    "        input_list.map(x => x.split(\" \").toList.sorted)",
    "        val list_of_lists = input_list.map(x => x.split(\" \").toList)\n        list_of_lists.map(x => x.sortWith(_ < _))",
    "        input_list.map(x => x.split(\" \").toList.sorted)",
    "        input_list.map(x => x.split(\" \").toList.sorted)",
    "        input_list.map(x => x.split(\" \").toList.sorted)",
    "        input_list.map(x => x.split(\" \").toList.sorted)",
    "        val list_of_lists = input_list.map(x => x.split(\" \").toList)\n        list_of_lists.map(x => x.sortWith(_ < _))",
    "        input_list.map(x => x.split(\" \").toList.sorted)",
    "        input_list.map(x => x.split(\" \").toList).map(x => x.sortWith(_ < _))",
    "        val list_of_lists = input_list.map(x => x.split(\" \").toList)\n        list_of_lists.map(x => x.sortWith(_ < _))",
    "        input_list.map(x => x.split(\" \").toList.sorted)",
    "        val sorted_list = input_list.sortWith(_ < _)\n        val sorted_list_of_lists = List(sorted_list)\n        return sorted_list_of_lists",
    "        input_list.map(x => x.split(\" \").toList.sorted)",
    "        val sublists = new ListBuffer[List[String]]\n        var current_sublist = new ListBuffer[String]\n        for (i <- 0 until input_list.length) {\n            if (input_list(i) == \"|\") {\n                sublists += current_sublist.toList\n                current_sublist = new ListBuffer[String]\n            } else {\n                current_sublist += input_list(i)\n            }\n        }\n        sublists += current_sublist.toList\n        sublists.toList.map(x => x.sorted)",
    "        input_list.map(x => x.split(\" \").toList.sortWith(_ < _))",
    "        input_list.map(x => x.split(\" \").toList.sorted)",
    "        val result = new ListBuffer[List[String]]\n        for (sublist <- input_list) {\n            result += sublist.sorted\n        }\n        result.toList",
    "        input_list.map(x => x.split(\" \").toList).map(x => x.sortWith(_ < _))",
    "        input_list.map(x => x.split(\" \").toList.sorted)",
    "        val list_of_lists = new ListBuffer[List[String]]()\n        for (i <- 0 until input_list.length) {\n            val sublist = new ListBuffer[String]()\n            for (j <- i until input_list.length) {\n                sublist += input_list(j)\n            }\n            list_of_lists += sublist.toList\n        }\n        list_of_lists.toList.map(x => x.sorted)",
    "        input_list.map(x => x.split(\" \").toList.sortWith(_ < _))",
    "        input_list.map(x => x.split(\" \").toList.sortWith(_ < _)).toList",
    "        input_list.map(x => x.split(\" \").toList.sorted)",
    "        input_list.map(x => x.split(\" \").toList.sortWith(_ < _)).toList",
    "        input_list.map(x => x.split(\" \").toList).map(x => x.sortWith(_ < _))",
    "        input_list.map(x => x.split(\" \").toList.sortWith(_ < _)).toList",
    "        input_list.map(x => x.split(\" \").toList.sorted)",
    "        input_list.map(x => x.split(\" \").toList.sortWith(_ < _)).toList",
    "        input_list.map(x => x.split(\" \").toList.sorted)",
    "        input_list.map(x => x.split(\" \").toList.sortWith(_ < _)).toList",
    "        input_list.map(x => x.split(\" \").toList.sorted)",
    "        input_list.map(x => x.split(\" \").toList).map(x => x.sortWith(_ < _))",
    "        input_list.map(x => x.split(\" \").toList.sortWith(_ < _)).toList",
    "        input_list.map(x => x.split(\" \").toList.sorted)",
    "        input_list.map(x => x.split(\" \").toList.sortWith(_ < _)).toList",
    "        input_list.map(x => x.split(\" \").toList.sorted)",
    "        input_list.map(x => x.split(\" \").toList.sortWith(_ < _)).toList",
    "        input_list.map(x => x.split(\" \").toList.sorted)",
    "        input_list.map(x => x.split(\" \").toList.sortWith(_ < _)).toList",
    "        input_list.map(x => x.split(\" \").toList.sortWith((x, y) => x.compareTo(y) < 0)).toList",
    "        input_list.map(x => x.split(\" \").toList.sorted)",
    "        input_list.map(x => x.split(\" \").toList.sortWith(_ < _)).toList",
    "        input_list.map(x => x.split(\" \").toList.sortWith(_ < _))",
    "        val list_of_lists = input_list.map(x => x.split(\" \").toList)\n        list_of_lists.map(x => x.sorted)",
    "        input_list.map(x => x.split(\" \").toList.sortWith(_ < _))",
    "        val sorted_list = input_list.map(x => x.sorted)\n        sorted_list",
    "        input_list.map(x => x.sorted)",
    "        val result = new ListBuffer[List[String]]()\n        for (i <- 0 to input_list.length - 1) {\n            val sublist = input_list(i).split(\" \").toList\n            result += sublist.sortWith(_ < _)\n        }\n        result.toList",
    "        input_list.map(x => x.split(\" \").toList.sorted)",
    "        input_list.map(x => x.split(\" \").toList.sortWith(_ < _)).toList",
    "        input_list.map(x => x.split(\" \").toList.sorted)",
    "        var result = List[List[String]]()\n        for (i <- 0 until input_list.length) {\n            var sublist = List[String]()\n            for (j <- i until input_list.length) {\n                if (input_list(j) == \"\") {\n                    result = result :+ sublist\n                    sublist = List[String]()\n                } else {\n                    sublist = sublist :+ input_list(j)\n                }\n            }\n        }\n        return result",
    "        input_list.map(x => x.split(\" \").toList.sortWith(_ < _))",
    "        input_list.map(x => x.split(\" \").toList.sortWith(_ < _)).toList",
    "        input_list.map(x => x.split(\" \").toList.sorted)",
    "        input_list.map(x => x.split(\" \").toList.sortWith(_ < _))",
    "        input_list.map(x => x.split(\" \").toList.sortWith(_ < _)).toList",
    "        input_list.map(x => x.split(\" \").toList.sorted).toList",
    "        val list_of_lists = input_list.map(x => x.split(\" \").toList)\n        list_of_lists.map(x => x.sortWith(_ < _))",
    "        var result = List[List[String]]()\n        for (i <- 0 until input_list.length) {\n            result = result :+ input_list.slice(i, input_list.length).sorted\n        }\n        return result",
    "        val list_of_lists = input_list.grouped(3).toList\n        val sorted_list = list_of_lists.map(x => x.sorted)\n        sorted_list",
    "        val list_of_lists = input_list.grouped(3).toList\n        val sorted_list_of_lists = list_of_lists.map(x => x.sorted)\n        return sorted_list_of_lists",
    "        val length = input_list.length\n        val result = new Array[List[String]](length)\n        for (i <- 0 until length) {\n            result(i) = input_list(i).split(\" \").toList.sorted\n        }\n        result.toList",
    "        val list_of_lists = input_list.groupBy(x => x.length).values.toList\n        list_of_lists.map(x => x.sorted)",
    "        input_list.groupBy(x => x.length).values.toList.map(x => x.sorted)",
    "        input_list.map(x => x.split(\" \").toList.sortWith(_ < _)).toList",
    "        input_list.map(x => x.split(\" \").toList.sortWith(_ < _)).toList",
    "        val list_of_lists = input_list.map(x => x.split(\" \").toList)\n        list_of_lists.map(x => x.sortWith(_ < _))",
    "        input_list.map(x => x.split(\" \").toList.sortWith(_ < _)).toList",
    "        input_list.map(x => x.split(\" \").toList.sortWith(_ < _))",
    "        val sorted_list = input_list.sortWith((x, y) => x.length < y.length)\n        val result = new ListBuffer[List[String]]\n        var current_list = new ListBuffer[String]\n        var current_length = sorted_list(0).length\n        for (i <- 0 until sorted_list.length) {\n            if (sorted_list(i).length == current_length) {\n                current_list += sorted_list(i)\n            } else {\n                result += current_list.toList\n                current_list = new ListBuffer[String]\n                current_list += sorted_list(i)\n                current_length = sorted_list(i).length\n            }\n        }\n        result += current_list.toList\n        result.toList",
    "        input_list.map(x => x.split(\" \").toList.sortWith(_ < _))",
    "        input_list.map(x => x.split(\" \").toList.sortWith((x, y) => x.length < y.length)).toList",
    "        input_list.map(x => x.split(\" \").toList.sorted)",
    "        input_list.map(x => x.split(\" \").toList.sortWith(_ < _)).toList",
    "        input_list.map(x => x.split(\" \").toList.sortWith(_ < _))",
    "        input_list.map(x => x.split(\" \").toList.sortWith(_ < _)).toList",
    "        input_list.map(x => x.split(\" \").toList.sortWith(_ < _)).toList",
    "        input_list.map(x => x.split(\" \").toList.sorted)",
    "        val list_of_lists = new ListBuffer[List[String]]\n        for (i <- 0 until input_list.length) {\n            list_of_lists += input_list.slice(i, input_list.length)\n        }\n        list_of_lists.toList.map(x => x.sorted)",
    "        input_list.map(x => x.split(\" \").toList.sortWith(_ < _))",
    "        input_list.map(x => x.split(\" \").toList.sorted)",
    "        val sorted_list = input_list.map(x => x.sorted)\n        sorted_list",
    "        input_list.map(x => x.split(\" \").toList.sortWith(_ < _)).toList",
    "        input_list.map(x => x.split(\" \").toList.sorted)",
    "        input_list.map(x => x.split(\" \").toList.sortWith(_ < _)).toList",
    "        val result = new ListBuffer[List[String]]\n        for (i <- 0 until input_list.length) {\n            val sublist = new ListBuffer[String]\n            for (j <- 0 until input_list.length) {\n                if (input_list(j).length == i + 1) sublist += input_list(j)\n            }\n            result += sublist.toList.sorted\n        }\n        result.toList",
    "        input_list.map(x => x.split(\" \").toList.sortWith(_ < _)).toList",
    "        input_list.map(x => x.split(\" \").toList.sorted)",
    "        input_list.map(x => x.split(\" \").toList.sorted)",
    "        input_list.map(x => x.split(\" \").toList.sorted)",
    "        input_list.map(x => x.split(\" \").toList.sorted)",
    "        input_list.map(x => x.split(\" \").toList.sortWith(_ < _)).toList",
    "        val sorted_list = input_list.sortWith((a, b) => a < b)\n        val result = ListBuffer[List[String]]()\n        result += sorted_list\n        result.toList",
    "        input_list.map(x => x.split(\" \").toList.sorted)",
    "        input_list.map(x => x.split(\" \").toList.sortWith(_ < _)).toList",
    "        val sorted_list = input_list.sortWith(_ < _)\n        val result = ListBuffer[List[String]]()\n        result += sorted_list\n        result.toList",
    "        val sorted_list = input_list.sortWith((x, y) => x < y)\n        return List(sorted_list)",
    "        input_list.map(x => x.split(\" \").toList.sortWith(_ < _)).toList",
    "        input_list.map(x => x.split(\" \").toList.sorted)",
    "        input_list.map(x => x.split(\" \").toList).map(x => x.sortWith(_ < _))",
    "        input_list.map(x => x.split(\" \").toList.sortWith(_ < _)).toList",
    "        input_list.map(x => x.split(\" \").toList.sortWith(_ < _)).toList",
    "        val list_of_lists = input_list.map(x => x.split(\" \").toList)\n        list_of_lists.map(x => x.sortWith(_ < _))",
    "        val list_of_lists = input_list.map(x => x.split(\" \").toList)\n        list_of_lists.map(x => x.sorted)",
    "        input_list.map(x => x.split(\" \").toList.sorted)",
    "        input_list.map(x => x.split(\" \").toList.sorted)",
    "        var result = List[List[String]]()\n        for (sublist <- input_list) {\n            result = result :+ sublist.sorted\n        }\n        return result",
    "        input_list.map(x => x.split(\" \").toList).map(x => x.sortWith(_ < _))",
    "        var result : List[List[String]] = List()\n        for (sublist <- input_list) {\n            result = result :+ sublist.split(\" \").toList.sorted\n        }\n        return result",
    "        input_list.map(x => x.split(\" \").toList.sorted).toList",
    "        input_list.map(x => x.split(\" \").toList.sortWith(_ < _))",
    "        input_list.map(x => x.split(\" \").toList).map(x => x.sortWith(_ < _))",
    "        var result = List[List[String]]()\n        for (sublist <- input_list) {\n            result = result :+ sublist.sorted\n        }\n        return result",
    "        input_list.map(x => x.split(\" \").toList.sortWith(_ < _)).toList",
    "        input_list.map(x => x.split(\" \").toList.sorted)",
    "        val result = new ListBuffer[List[String]]\n        for (sublist <- input_list) {\n            result += sublist.sorted\n        }\n        result.toList",
    "        input_list.groupBy(x => x.length).values.toList.map(x => x.sorted)",
    "        input_list.map(x => x.split(\" \").toList.sorted)",
    "        input_list.map(x => x.split(\" \").toList.sortWith(_ < _)).toList",
    "        val list_of_lists = input_list.map(x => x.split(\" \").toList)\n        list_of_lists.map(x => x.sorted)",
    "        input_list.map(x => x.split(\" \").toList.sorted)",
    "        input_list.map(x => x.split(\" \").toList).map(x => x.sortWith(_ < _))",
    "        input_list.map(x => x.split(\" \").toList.sortWith(_ < _)).toList",
    "        val list_of_lists = input_list.map(x => x.split(\" \").toList)\n        list_of_lists.map(x => x.sorted)",
    "        input_list.map(x => x.split(\" \").toList.sorted)",
    "        input_list.map(x => x.split(\" \").toList.sorted)",
    "        input_list.map(x => x.split(\" \").toList.sorted)",
    "        input_list.map(x => x.split(\" \").toList).map(x => x.sortWith(_ < _))",
    "        input_list.map(x => x.split(\" \").toList.sorted)",
    "        input_list.map(x => x.split(\" \").toList.sorted)",
    "        input_list.map(x => x.split(\" \").toList.sortWith(_ < _)).toList",
    "        input_list.map(x => x.split(\" \").toList.sorted)",
    "        input_list.map(x => x.split(\" \").toList.sorted)",
    "        input_list.map(x => x.split(\" \").toList).map(x => x.sortWith(_ < _))",
    "        input_list.map(x => x.split(\" \").toList.sorted)",
    "        input_list.map(x => x.split(\" \").toList.sorted)",
    "        input_list.map(x => x.split(\" \").toList.sorted)",
    "        input_list.map(x => x.split(\" \").toList.sorted)",
    "        input_list.map(x => x.split(\" \").toList.sorted)",
    "        input_list.map(x => x.split(\" \").toList.sortWith(_ < _)).toList",
    "        input_list.map(x => x.split(\" \").toList.sorted)",
    "        input_list.map(x => x.split(\" \").toList.sortWith(_ < _)).toList",
    "        input_list.map(x => x.split(\" \").toList.sortWith(_ < _)).toList",
    "        input_list.map(x => x.split(\" \").toList).map(x => x.sortWith(_ < _))",
    "        val sorted_list = input_list.sortWith((x, y) => x < y)\n        val result_list = List(sorted_list)\n        return result_list",
    "        input_list.map(x => x.split(\" \").toList.sortWith(_ < _))",
    "        val list_of_lists = input_list.map(x => x.split(\" \").toList)\n        list_of_lists.map(x => x.sorted)",
    "        var output_list : List[List[String]] = List()\n        for (i <- 0 until input_list.length) {\n            var sublist : List[String] = List()\n            for (j <- i until input_list.length) {\n                sublist = input_list(j) :: sublist\n            }\n            output_list = sublist.sorted :: output_list\n        }\n        return output_list",
    "        input_list.map(x => x.split(\" \").toList.sorted)",
    "        input_list.map(x => x.split(\" \").toList.sorted)",
    "        val sorted_list = input_list.sortWith(_ < _)\n        List(sorted_list)",
    "        input_list.map(x => x.split(\" \").toList.sorted)",
    "        val result = new ListBuffer[List[String]]()\n        for (sublist <- input_list) {\n            val sorted_sublist = sublist.sorted\n            result += sorted_sublist\n        }\n        result.toList",
    "        input_list.map(x => x.split(\" \").toList.sorted)",
    "        val sorted_list = input_list.sortWith(_ < _)\n        val result = ListBuffer[List[String]]()\n        var current_list = ListBuffer[String]()\n        for (i <- 0 until sorted_list.length) {\n            if (i == sorted_list.length - 1) {\n                current_list += sorted_list(i)\n                result += current_list.toList\n            } else {\n                if (sorted_list(i).length == sorted_list(i + 1).length) {\n                    current_list += sorted_list(i)\n                } else {\n                    current_list += sorted_list(i)\n                    result += current_list.toList\n                    current_list = ListBuffer[String]()\n                }\n            }\n        }\n        result.toList",
    "        input_list.map(x => x.split(\" \").toList.sortWith((x, y) => x.compareTo(y) < 0))",
    "        val sorted_list = input_list.sorted\n        val result = ListBuffer[List[String]]()\n        var i = 0\n        while (i < sorted_list.length) {\n            val sublist = ListBuffer[String]()\n            sublist += sorted_list(i)\n            var j = i + 1\n            while (j < sorted_list.length && sorted_list(j).length == sorted_list(i).length) {\n                sublist += sorted_list(j)\n                j += 1\n            }\n            result += sublist.toList\n            i = j\n        }\n        result.toList",
    "        val list_of_lists = input_list.grouped(3).toList\n        list_of_lists.map(x => x.sorted)",
    "        input_list.map(x => x.split(\" \").toList.sorted)",
    "        input_list.map(x => x.split(\" \").toList.sorted)",
    "        input_list.map(x => x.split(\" \").toList.sortWith(_ < _)).toList",
    "        val list_of_lists = input_list.groupBy(_.length).values.toList\n        list_of_lists.map(_.sorted)",
    "        input_list.map(x => x.split(\" \").toList.sortWith(_ < _))",
    "        input_list.map(x => x.split(\" \").toList.sorted)",
    "        input_list.map(x => x.split(\" \").toList).map(x => x.sortWith(_ < _))",
    "        input_list.map(x => x.split(\" \").toList.sorted)",
    "        input_list.map(x => x.split(\" \").toList.sorted)",
    "        input_list.map(x => x.split(\" \").toList.sorted)",
    "        val list_of_lists = input_list.map(x => x.split(\" \").toList)\n        list_of_lists.map(x => x.sorted)",
    "        input_list.map(x => x.split(\" \").toList.sortWith(_ < _)).toList",
    "        input_list.groupBy(s => s.length).toList.map(t => t._2.sorted)",
    "        input_list.map(x => x.split(\" \").toList.sorted)",
    "        val list_of_lists = input_list.grouped(3).toList\n        list_of_lists.map(x => x.sorted)",
    "        val list_of_lists = input_list.map(x => x.split(\" \").toList)\n        list_of_lists.map(x => x.sortWith(_ < _))",
    "        input_list.map(x => x.split(\" \").toList.sortWith(_ < _))"
  ]
}