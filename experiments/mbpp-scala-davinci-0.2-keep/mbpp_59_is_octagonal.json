{
  "name": "mbpp_59_is_octagonal",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the nth octagonal number.\n    def isOctagonal(n : Long) : Long = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_59_is_octagonal.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(isOctagonal((5l)) == (65l));\n    assert(isOctagonal((10l)) == (280l));\n    assert(isOctagonal((15l)) == (645l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val a = (sqrt(24 * n + 1) + 1) / 6\n        if (a == a.toInt) a.toInt else -1",
    "        val x = (sqrt(24 * n + 1) + 1) / 6\n        if (x == x.toInt) x.toInt else -1",
    "        val a = (sqrt(1 + 24 * n) + 1) / 6\n        if (a == a.toInt) n else 0",
    "        val x = (sqrt(1 + 24 * n) + 1) / 6\n        if (x == x.toInt) n else -1",
    "        val x = (sqrt(24 * n + 1) + 1) / 6\n        if (x == x.toInt) n else 0",
    "        val x = (sqrt(24 * n + 1) + 1) / 6\n        if (x == x.toInt) x.toInt else -1",
    "        val x = (sqrt(24 * n + 1) + 1) / 6\n        if (x == x.toInt) x.toInt else -1",
    "        val r = (sqrt(24 * n + 1) + 1) / 6\n        if (r == r.toInt) n else 0",
    "        val x = (sqrt(1 + 24 * n) + 1) / 6\n        if (x == x.toInt) x.toLong else -1",
    "        val x = (sqrt(1 + 24 * n) + 1) / 6\n        if (x == x.toInt) x.toInt else -1",
    "        val x = (sqrt(1 + 24 * n) + 1) / 6\n        if (x == x.toInt) x.toInt else -1",
    "        val a = (sqrt(24 * n + 1) + 1) / 6\n        if (a == a.toInt) n else 0",
    "        val x = (sqrt(1 + 24 * n) + 1) / 6\n        if (x == x.toInt) x.toInt else -1",
    "        val d = (sqrt(24 * n + 1) + 1) / 6\n        if (d == d.toInt) n else 0",
    "        val d = (sqrt(24 * n + 1) + 1) / 6\n        if (d == d.toInt) n else 0",
    "        val x = (sqrt(1 + 24 * n) + 1) / 6\n        if (x == x.toInt) return x.toInt\n        else return 0",
    "        val a = (sqrt(24 * n + 1) + 1) / 6\n        if (a == a.toInt) n else -1",
    "        val x = (sqrt(1 + 24 * n) + 1) / 6\n        if (x == x.toInt) x.toInt else -1",
    "        val x = (sqrt(24 * n + 1) + 1) / 6\n        if (x == x.toInt) n else 0",
    "        val x = (sqrt(24 * n + 1) + 1) / 6\n        if (x == x.toInt) x.toInt else -1",
    "        val a = (sqrt(1 + 24 * n) + 1) / 6\n        if (a == a.toInt) a.toInt else -1",
    "        val m = (sqrt(24 * n + 1) + 1) / 6\n        if (m == m.toInt) n else 0",
    "        val x = (sqrt(24 * n + 1) + 1) / 6\n        if (x == x.toInt) x.toInt else -1",
    "        val a = (sqrt(24 * n + 1) + 1) / 6\n        if (a == a.toInt) a.toInt else -1",
    "        val m = (sqrt(24 * n + 1) + 1) / 6\n        if (m == m.toInt) m.toLong else -1",
    "        val x = (sqrt(24 * n + 1) + 1) / 6\n        if (x == x.toInt) x.toInt else -1",
    "        val a = (sqrt(24 * n + 1) + 1) / 6\n        if (a == a.toInt) a.toLong else 0",
    "        val x = (sqrt(1 + 24 * n) + 1) / 6\n        if (x == x.toInt) x.toInt else -1",
    "        val x = (sqrt(24 * n + 1) + 1) / 6\n        if (x == x.toInt) x.toInt else -1",
    "        val d = (sqrt(24 * n + 1) + 1) / 6\n        if (d == d.toInt) n else 0",
    "        val a = (sqrt(24 * n + 1) + 1) / 6\n        if (a == a.toInt) n else -1",
    "        val r = (sqrt(24 * n + 1) + 1) / 6\n        if (r == r.toInt) r.toInt else 0",
    "        val x = (sqrt(24 * n + 1) + 1) / 6\n        if (x == x.toInt) n else 0",
    "        val x = (sqrt(24 * n + 1) + 1) / 6\n        if (x == x.toInt) return x.toInt\n        return -1",
    "        val m = (sqrt(24 * n + 1) + 1) / 6\n        if (m == m.toInt)\n            n\n        else\n            0",
    "        val x = (sqrt(24 * n + 1) + 1) / 6\n        if (x == x.toInt) {\n            x.toInt\n        } else {\n            -1\n        }",
    "        val x = (sqrt(24 * n + 1) + 1) / 6\n        if (x == x.toInt) n else 0",
    "        val x = (sqrt(1 + 24 * n) + 1) / 6\n        if (x == x.toInt) x.toInt else -1",
    "        val x = (sqrt(1 + 24 * n) + 1) / 6\n        if (x == x.toInt) n else -1",
    "        val x = (sqrt(24 * n + 1) + 1) / 6\n        if (x == x.toInt) n else -1",
    "        val x = (sqrt(1 + 24 * n) + 1) / 6\n        if (x == x.toInt) x.toInt else -1",
    "        val a = (sqrt(24 * n + 1) + 1) / 6\n        if (a == a.toInt) a.toLong else 0",
    "        val a = (sqrt(24 * n + 1) + 1) / 6\n        if (a == a.toInt) a.toInt else -1",
    "        val x = (sqrt(8 * n + 1) + 1) / 4\n        if (x == x.toInt) n else 0",
    "        val x = (sqrt(24 * n + 1) + 1) / 6\n        if (x == x.toInt) x.toInt else -1",
    "        val m = (sqrt(24 * n + 1) + 1) / 6\n        if (m == m.toInt) n else 0",
    "        val a = (sqrt(24 * n + 1) + 1) / 6\n        if (a == a.toInt) a.toInt else -1",
    "        var x = (sqrt(24 * n + 1) + 1) / 6\n        if (x == x.toInt) x.toInt else -1",
    "        val x = (sqrt(24 * n + 1) + 1) / 6\n        if (x == x.toInt) x.toInt else -1",
    "        val nn = (sqrt(24 * n + 1) + 1) / 6\n        if (nn == nn.toInt) n else -1",
    "        val a = (sqrt(24 * n + 1) + 1) / 6\n        if (a == a.toInt) a.toInt else -1",
    "        val m = (sqrt(8 * n + 1) + 1) / 4\n        if (m == m.toInt) n else 0",
    "        val x = (sqrt(24 * n + 1) + 1) / 6\n        if (x == x.toInt) x.toInt else -1",
    "        val x = (sqrt(24 * n + 1) + 1) / 6\n        if (x == x.toInt) x.toInt else -1",
    "        val a = (sqrt(24 * n + 1) + 1) / 6\n        if (a == a.toInt) a.toInt else -1",
    "        val x = (sqrt(24 * n + 1) + 1) / 6\n        if (x == x.toInt) x.toInt else -1",
    "        val a = (sqrt(24 * n + 1) + 1) / 6\n        if (a == a.toInt) n else -1",
    "        val x = (sqrt(1 + 24 * n) + 1) / 6\n        if (x == x.toInt) x.toInt else -1",
    "        val x = (sqrt(24 * n + 1) + 1) / 6\n        if (x == x.toInt) x.toInt else -1",
    "        val x = (sqrt(24 * n + 1) + 1) / 6\n        if (x == x.toInt) x.toInt else -1",
    "        val x = (sqrt(24 * n + 1) + 1) / 6\n        if (x == x.toInt) n else 0",
    "        val r = (sqrt(1 + 24 * n) + 1) / 6\n        if (r == r.toInt) n else 0",
    "        val m = (sqrt(1 + 24 * n) + 1) / 6\n        if (m == m.toInt) n else 0",
    "        val r = (sqrt(1 + 24 * n) + 1) / 6\n        if (r % 1 == 0) r else -1",
    "        val a = (sqrt(24 * n + 1) + 1) / 6\n        if (a == a.toInt) n else -1",
    "        val n1 = (sqrt(1 + 24 * n) + 1) / 6\n        if (n1 == n1.toInt) n1.toInt else -1",
    "        val x = (sqrt(1 + 24 * n) + 1) / 6\n        if (x == x.toInt) x.toLong else -1",
    "        val d = (sqrt(24 * n + 1) + 1) / 6\n        if (d == d.toInt) n else 0",
    "        val x = (sqrt(24 * n + 1) + 1) / 6\n        if (x == x.toInt) n else 0",
    "        val a = (sqrt(1 + 24 * n) + 1) / 6\n        if (a == a.toInt) a.toInt else -1",
    "        val x = (sqrt(1 + 24 * n) + 1) / 6\n        if (x == x.toInt) x.toInt else -1",
    "        val root = (sqrt(1 + 24 * n) + 1) / 6\n        if (root == root.toLong) root.toLong else -1",
    "        val a = (sqrt(1 + 24 * n) + 1) / 6\n        if (a == a.toInt) n else 0",
    "        val a = (sqrt(1 + 24 * n) + 1) / 6\n        if (a == a.toInt) a.toInt else -1",
    "        val x = (sqrt(24 * n + 1) + 1) / 6\n        if (x == x.toInt) n else -1",
    "        val a = (sqrt(24 * n + 1) + 1) / 6\n        if (a == a.toInt) a.toInt else 0",
    "        val x = (sqrt(24 * n + 1) + 1) / 6\n        if (x == x.toInt) n else 0",
    "        val a = (sqrt(24 * n + 1) + 1) / 6\n        if (a == a.toInt) n else 0",
    "        val a = (sqrt(24 * n + 1) + 1) / 6\n        if (a == a.toLong) n else -1",
    "        val x = (sqrt(24 * n + 1) + 1) / 6\n        if (x == x.toInt) x.toInt else -1",
    "        val x = (sqrt(1 + 24 * n) + 1) / 6\n        if (x == x.toInt) x.toInt else -1",
    "        val a = (sqrt(1 + 24 * n) + 1) / 6\n        if (a == a.toInt) a.toInt else -1",
    "        val x = (sqrt(1 + 24 * n) + 1) / 6\n        if (x == x.toInt) x.toLong else -1",
    "        val a = (sqrt(1 + 24 * n) + 1) / 6\n        if (a == a.toInt) a.toInt else -1",
    "        val x = (sqrt(24 * n + 1) + 1) / 6\n        if (x == x.toInt) x.toInt else -1",
    "        val x = (sqrt(1 + 24 * n) + 1) / 6\n        if (x == x.toInt) x.toInt else -1",
    "        val a = (sqrt(24 * n + 1) + 1) / 6\n        if (a == a.toInt) n else -1",
    "        val x = (sqrt(24 * n + 1) + 1) / 6\n        if (x == x.toInt) n else -1",
    "        val x = (sqrt(1 + 24 * n) + 1) / 6\n        if (x == x.toInt) x.toInt else -1",
    "        val m = (sqrt(1 + 24 * n) + 1) / 6\n        if (m == m.toInt) m.toInt else -1",
    "        val x = (sqrt(24 * n + 1) + 1) / 6\n        if (x == x.toInt) n else 0",
    "        val a = (sqrt(1 + 24 * n) + 1) / 6\n        if (a == a.toInt) a.toInt else -1",
    "        val a = (sqrt(24 * n + 1) + 1) / 6\n        if (a == a.toInt) a.toInt else 0",
    "        val r = (sqrt(24 * n + 1) + 1) / 6\n        if (r == r.toInt) r.toInt else -1",
    "        val a = (sqrt(1 + 24 * n) + 1) / 6\n        if (a == a.toInt) a.toInt else -1",
    "        val a = (sqrt(24 * n + 1) + 1) / 6\n        if (a == a.toInt) n else 0",
    "        val m = (sqrt(24 * n + 1) + 1) / 6\n        if (m == floor(m)) m else -1",
    "        val x = (sqrt(24 * n + 1) + 1) / 6\n        if (x == x.toInt) n else 0",
    "        val x = (sqrt(1 + 24 * n) + 1) / 6\n        if (x == x.toInt) x.toInt else -1",
    "        val x = (sqrt(24 * n + 1) + 1) / 6\n        if (x == x.toInt) x.toInt else -1",
    "        val x = (sqrt(24 * n + 1) + 1) / 6\n        if (x == x.toInt) x.toInt else -1",
    "        val m = (sqrt(24 * n + 1) + 1) / 6\n        if (m == m.toInt) {\n            m.toInt\n        } else {\n            0\n        }",
    "        val s = sqrt(1 + 24 * n)\n        if (s.toLong * s.toLong == 1 + 24 * n && (s + 1) % 6 == 0) return (s + 1) / 6\n        return 0",
    "        val x = (sqrt(1 + 24 * n) + 1) / 6\n        if (x == x.toInt) x.toInt else -1",
    "        val a = (sqrt(24 * n + 1) + 1) / 6\n        if (a == a.toInt) n else 0",
    "        val m = (sqrt(24 * n + 1) + 1) / 6\n        if (m == m.toInt) m.toInt else -1",
    "        val x = (sqrt(1 + 24 * n) + 1) / 6\n        if (x == x.toInt) x.toInt else -1",
    "        val a = (sqrt(24 * n + 1) + 1) / 6\n        if (a == a.toInt) a.toInt else -1",
    "        val x = (sqrt(1 + 24 * n) + 1) / 6\n        if (x == x.toInt) x.toInt else -1",
    "        val a = (sqrt(24 * n + 1) + 1) / 6\n        if (a == a.toInt) n else 0",
    "        val a = (sqrt(24 * n + 1) + 1) / 6\n        if (a == a.toLong) a.toLong else -1",
    "        val x = (sqrt(24 * n + 1) + 1) / 6\n        if (x == x.toInt) n else 0",
    "        val m = (sqrt(24 * n + 1) + 1) / 6\n        if (m == m.toInt) m.toInt else -1",
    "        val nn = (sqrt(24 * n + 1) + 1) / 6\n        if (nn == nn.toInt) n else -1",
    "        val x = (sqrt(24 * n + 1) + 1) / 6\n        if (x == x.toInt) n else 0",
    "        val a = (sqrt(24 * n + 1) + 1) / 6\n        if (a == a.toInt) n else 0",
    "        val x = (sqrt(24 * n + 1) + 1) / 6\n        if (x == x.toInt) n else 0",
    "        val x = (sqrt(24 * n + 1) + 1) / 6\n        if (x == x.toInt) x.toInt else -1",
    "        val a = (sqrt(24 * n + 1) + 1) / 6\n        if (a == a.toInt) a.toInt else -1",
    "        val a = (sqrt(24 * n + 1) + 1) / 6\n        if (a == a.toInt) n else 0",
    "        val x = (sqrt(1 + 24 * n) + 1) / 6\n        if (x == x.toInt) x.toInt else -1",
    "        val m = (sqrt(24 * n + 1) + 1) / 6\n        if (m == m.toInt) m.toLong else -1",
    "        val nn = (sqrt(24 * n + 1) + 1) / 6\n        if (nn == nn.toInt) n else -1",
    "        val x = (sqrt(8 * n + 1) + 1) / 4\n        if (x == x.toInt) x.toInt else 0",
    "        val x = (sqrt(24 * n + 1) + 1) / 6\n        if (x == x.toInt) x.toInt else -1",
    "        val x = (sqrt(24 * n + 1) + 1) / 6\n        if (x == x.toInt) n else 0",
    "        val x = (sqrt(24 * n + 1) + 1) / 6\n        if (x == x.toInt) x.toInt else -1",
    "        val x = (sqrt(1 + 24 * n) + 1) / 6\n        if (x == x.toInt) n else 0",
    "        val x = (sqrt(24 * n + 1) + 1) / 6\n        if (x == x.toInt) x.toInt else -1",
    "        val a = (sqrt(24 * n + 1) + 1) / 6\n        if (a == a.toInt) a.toInt else -1",
    "        val m = (sqrt(24 * n + 1) + 1) / 6\n        if (m == m.toInt) n else 0",
    "        val x = (sqrt(24 * n + 1) + 1) / 6\n        if (x.isValidInt) n else -1",
    "        val x = (sqrt(1 + 24 * n) + 1) / 6\n        if (x == x.toInt) x.toInt else -1",
    "        val x = (sqrt(1 + 24 * n) + 1) / 6\n        if (x == x.toInt) x.toInt else -1",
    "        val a = (sqrt(24 * n + 1) + 1) / 6\n        if (a == a.toInt) a.toLong else 0",
    "        val m = (sqrt(1 + 24 * n) + 1) / 6\n        if (m == m.toInt) m.toInt else -1",
    "        val x = (sqrt(24 * n + 1) + 1) / 6\n        if (x == x.toInt) x.toInt else -1",
    "        val root = (sqrt(1 + 24 * n) + 1) / 6\n        if (root == root.toInt) root.toInt else -1",
    "        val x = (sqrt(24 * n + 1) + 1) / 6\n        if (x == x.toInt) x.toInt else -1",
    "        val a = (sqrt(1 + 24 * n) + 1) / 6\n        if (a == a.toInt) a.toInt else -1",
    "        val x = (sqrt(1 + 24 * n) + 1) / 6\n        if (x == x.toLong) n else -1",
    "        val nn = (sqrt(24 * n + 1) + 1) / 6\n        if (nn == nn.toInt) n else 0",
    "        val x = (sqrt(24 * n + 1) + 1) / 6\n        if (x == x.toInt) n else -1",
    "        val x = (sqrt(24 * n + 1) + 1) / 6\n        if (x == x.toInt) x.toInt else -1",
    "        val x = (sqrt(1 + 24 * n) + 1) / 6\n        if (x == x.toInt) x.toInt else -1",
    "        val x = (sqrt(24 * n + 1) + 1) / 6\n        if (x == x.toInt) x.toInt else -1",
    "        val x = (sqrt(24 * n + 1) + 1) / 6\n        if (x == x.toInt) n else 0",
    "        val x = (sqrt(24 * n + 1) + 1) / 6\n        if (x == x.toInt) x.toInt else -1",
    "        val x = (sqrt(1 + 24 * n) + 1) / 6\n        if (x == x.toInt) n else 0",
    "        val a = (sqrt(24 * n + 1) + 1) / 6\n        if (a == a.toInt) a.toInt else -1",
    "        val x = (sqrt(24 * n + 1) + 1) / 6\n        if (x == x.toInt) x.toInt else -1",
    "        val d = (sqrt(24 * n + 1) + 1) / 6\n        if (d == d.toInt) n else -1",
    "        val x = (sqrt(24 * n + 1) + 1) / 6\n        if (x == x.toInt) x.toInt else -1",
    "        val d = (sqrt(1 + 24 * n) + 1) / 6\n        if (d == d.toInt) n else 0",
    "        val a = (sqrt(24 * n + 1) + 1) / 6\n        if (a == a.toInt) n else 0",
    "        val m = (sqrt(1 + 24 * n) + 1) / 6\n        if (m == m.toInt) m.toInt else -1",
    "        val x = (sqrt(8 * n + 1) + 1) / 4\n        if (x == x.toInt) x.toInt else -1",
    "        val x = (sqrt(1 + 24 * n) + 1) / 6\n        if (x == x.toInt) n else 0",
    "        val x = (sqrt(1 + 24 * n) + 1) / 6\n        if (x == x.toInt) n else 0",
    "        val x = (sqrt(1 + 24 * n) + 1) / 6\n        if (x == x.toInt) x.toInt else -1",
    "        val d = (sqrt(1 + 24 * n) + 1) / 6\n        if (d == d.toLong) n else 0",
    "        val x = (sqrt(1 + 24 * n) + 1) / 6\n        if (x == x.toInt) x.toInt else -1",
    "        val m = (sqrt(24 * n + 1) + 1) / 6\n        if (m == m.toInt) m.toInt else -1",
    "        val x = (sqrt(24 * n + 1) + 1) / 6\n        if (x == x.toInt) return x.toInt\n        return 0",
    "        val x = (sqrt(1 + 24 * n) + 1) / 6\n        if (x == x.toInt) x.toInt else -1",
    "        val x = (sqrt(24 * n + 1) + 1) / 6\n        if (x == x.toInt) x.toInt else -1",
    "        val a = (sqrt(24 * n + 1) + 1) / 6\n        if (a == a.toInt) n else -1",
    "        val d = (sqrt(24 * n + 1) + 1) / 6\n        if (d == d.toInt) n else 0",
    "        val x = (sqrt(1 + 24 * n) + 1) / 6\n        if (x == x.toLong) x.toLong else -1",
    "        val x = (sqrt(24 * n + 1) + 1) / 6\n        if (x == x.toInt) x.toLong else -1",
    "        val x = (sqrt(24 * n + 1) + 1) / 6\n        if (x == x.toInt) x.toInt else -1",
    "        val x = (sqrt(1 + 24 * n) + 1) / 6\n        if (x == x.toInt) n else 0",
    "        val x = (sqrt(8 * n + 1) + 1) / 4\n        if (x == x.toInt) n else 0",
    "        val a = (sqrt(24 * n + 1) + 1) / 6\n        if (a == a.toInt) n else 0",
    "        val x = (sqrt(24 * n + 1) + 1) / 6\n        if (x == x.toInt) n else -1",
    "        val x = (sqrt(1 + 24 * n) + 1) / 6\n        if (x == x.toInt) n else 0",
    "        val x = (sqrt(24 * n + 1) + 1) / 6\n        if (x == x.toInt) n else 0",
    "        val x = (sqrt(1 + 24 * n) + 1) / 6\n        if (x == x.toInt) x.toInt else -1",
    "        val a = (sqrt(24 * n + 1) + 1) / 6\n        if (a == a.toInt) a.toInt else 0",
    "        val a = (sqrt(24 * n + 1) + 1) / 6\n        if (a == a.toInt) a.toLong else 0",
    "        val x = (sqrt(1 + 24 * n) + 1) / 6\n        if (x == x.toInt) x.toInt else -1",
    "        val r = (sqrt(1 + 24 * n) + 1) / 6\n        if (r.isValidInt) r.toLong else -1",
    "        val x = (sqrt(24 * n + 1) + 1) / 6\n        if (x == x.toInt) n else 0",
    "        val a = (sqrt(1 + 24 * n) + 1) / 6\n        if (a == a.toInt) a.toInt else -1",
    "        val x = (sqrt(1 + 24 * n) + 1) / 6\n        if (x == x.toInt) x.toInt else -1",
    "        val x = (sqrt(1 + 24 * n) + 1) / 6\n        if (x == x.toInt) n else 0",
    "        val a = (sqrt(1 + 24 * n) + 1) / 6\n        if (a == a.toInt) a.toInt else -1",
    "        val x = (sqrt(1 + 24 * n) + 1) / 6\n        if (x == x.toInt) x.toInt else -1",
    "        val x = (sqrt(24 * n + 1) + 1) / 6\n        if (x == x.toInt) x.toInt else -1",
    "        val m = (sqrt(8 * n + 1) + 1) / 4\n        if (m == m.toInt) n else 0",
    "        val x = (sqrt(24 * n + 1) + 1) / 6\n        if (x == x.toInt) x.toInt else -1",
    "        val x = (sqrt(24 * n + 1) + 1) / 6\n        if (x == x.toInt) x.toInt else -1",
    "        val x = (sqrt(24 * n + 1) + 1) / 6\n        if (x == x.toInt) n else 0",
    "        val x = (sqrt(24 * n + 1) + 1) / 6\n        if (x == x.toInt) x.toInt else -1",
    "        val x = (sqrt(24 * n + 1) + 1) / 6\n        if (x == x.toInt) x.toInt else -1",
    "        val x = (sqrt(24 * n + 1) + 1) / 6\n        if (x == x.toInt) x.toInt else 0",
    "        val x = (sqrt(24 * n + 1) + 1) / 6\n        if (x == x.toInt) x.toInt else -1",
    "        val x = (sqrt(24 * n + 1) + 1) / 6\n        if (x == x.toInt) n else 0",
    "        val m = (sqrt(24 * n + 1) + 1) / 6\n        if (m == m.toInt) m.toInt else 0",
    "        val x = (sqrt(24 * n + 1) + 1) / 6\n        if (x == x.toInt) n else -1"
  ]
}