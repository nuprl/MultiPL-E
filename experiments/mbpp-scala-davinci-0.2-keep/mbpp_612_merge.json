{
  "name": "mbpp_612_merge",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    def merge(lst : Any) : Any = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_612_merge.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(merge((Any(List[String](\"x\", \"y\"), List[String](\"a\", \"b\"), List[String](\"m\", \"n\")))).equals((Any(List[String](\"x\", \"a\", \"m\"), List[String](\"y\", \"b\", \"n\")))));\n    assert(merge((Any(List[Long](1l.toLong, 2l.toLong), List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong)))).equals((Any(List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong), List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong)))));\n    assert(merge((Any(List[String](\"x\", \"y\", \"z\"), List[String](\"a\", \"b\", \"c\"), List[String](\"m\", \"n\", \"o\")))).equals((Any(List[String](\"x\", \"a\", \"m\"), List[String](\"y\", \"b\", \"n\"), List[String](\"z\", \"c\", \"o\")))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val lst2 = lst.asInstanceOf[List[List[Int]]]\n        val lst3 = ListBuffer[Int]()\n        val lst4 = ListBuffer[Int]()\n        for (i <- 0 until lst2.length) {\n            lst3 += lst2(i)(0)\n            lst4 += lst2(i)(1)\n        }\n        return List(lst3.toList, lst4.toList)",
    "        lst match {\n            case lst : List[List[Any]] => {\n                val first = new ListBuffer[Any]\n                val second = new ListBuffer[Any]\n                for (i <- 0 until lst.length) {\n                    first += lst(i)(0)\n                    second += lst(i)(1)\n                }\n                List(first.toList, second.toList)\n            }\n            case _ => lst\n        }",
    "        val lst1 = lst.asInstanceOf[List[List[Any]]]\n        val lst2 = lst1.map(x => x.head)\n        val lst3 = lst1.map(x => x.tail.head)\n        List(lst2, lst3)",
    "        var lst1 = List[Any]()\n        var lst2 = List[Any]()\n        for (i <- lst.asInstanceOf[List[List[Any]]]) {\n            lst1 = lst1 :+ i(0)\n            lst2 = lst2 :+ i(1)\n        }\n        return List(lst1, lst2)",
    "        lst match {\n            case Nil => Nil\n            case (x :: xs) => {\n                val (a, b) = x\n                (a :: merge(xs).asInstanceOf[List[Any]]).asInstanceOf[Any] -> (b :: merge(xs).asInstanceOf[List[Any]]).asInstanceOf[Any]\n            }\n        }",
    "        val lst1 = lst.asInstanceOf[List[List[Int]]]\n        val lst2 = lst1.map(x => x(0))\n        val lst3 = lst1.map(x => x(1))\n        List(lst2, lst3)",
    "        val lst1 = lst.asInstanceOf[List[List[Int]]]\n        val lst2 = ListBuffer[Int]()\n        val lst3 = ListBuffer[Int]()\n        for (i <- 0 until lst1.length) {\n            lst2 += lst1(i)(0)\n            lst3 += lst1(i)(1)\n        }\n        List(lst2.toList, lst3.toList)",
    "        lst match {\n            case lst : List[List[Any]] => {\n                val lst1 = new ListBuffer[Any]()\n                val lst2 = new ListBuffer[Any]()\n                for (i <- lst) {\n                    lst1 += i(0)\n                    lst2 += i(1)\n                }\n                List(lst1.toList, lst2.toList)\n            }\n            case _ => lst\n        }",
    "        val lst1 = lst.asInstanceOf[List[List[Any]]]\n        val lst2 = lst1.map(x => x(0))\n        val lst3 = lst1.map(x => x(1))\n        List(lst2, lst3)",
    "        val lst1 = lst.asInstanceOf[List[List[Int]]]\n        val lst2 = lst1.map(x => x(0))\n        val lst3 = lst1.map(x => x(1))\n        List(lst2, lst3)",
    "        val lst1 = lst.asInstanceOf[List[List[Int]]]\n        val lst2 = lst1.map(x => x(0))\n        val lst3 = lst1.map(x => x(1))\n        List(lst2, lst3)",
    "        val lst1 = lst.asInstanceOf[List[List[Any]]]\n        val lst2 = lst1.map(x => x(0))\n        val lst3 = lst1.map(x => x(1))\n        List(lst2, lst3)",
    "        var lst1 = List[Any]()\n        var lst2 = List[Any]()\n        for (i <- lst.asInstanceOf[List[List[Any]]]) {\n            lst1 = lst1 :+ i(0)\n            lst2 = lst2 :+ i(1)\n        }\n        List(lst1, lst2)",
    "        lst match {\n            case Nil => Nil\n            case (x :: xs) => {\n                val (a, b) = x\n                merge(xs) match {\n                    case (c :: cs, d :: ds) => ((a :: c) :: (b :: d) :: Nil)\n                    case _ => (a :: Nil) :: (b :: Nil) :: Nil\n                }\n            }\n        }",
    "        lst match {\n            case Nil => Nil\n            case (x : List[Any]) :: xs => {\n                val (x1, x2) = (x.head, x.tail.head)\n                val (l1, l2) = merge(xs) match {\n                    case (l1 : List[Any], l2 : List[Any]) => (l1, l2)\n                }\n                (x1 :: l1, x2 :: l2)\n            }\n        }",
    "        var lst1 = ListBuffer[Any]()\n        var lst2 = ListBuffer[Any]()\n        for (i <- lst.asInstanceOf[List[List[Any]]]) {\n            lst1 += i(0)\n            lst2 += i(1)\n        }\n        List(lst1.toList, lst2.toList)",
    "        val lst2 = lst.asInstanceOf[List[List[Any]]]\n        val lst3 = lst2.map(x => x(0))\n        val lst4 = lst2.map(x => x(1))\n        List(lst3, lst4)",
    "        val lst1 = lst.asInstanceOf[List[List[Int]]]\n        val lst2 = lst1.map(x => x(0))\n        val lst3 = lst1.map(x => x(1))\n        List(lst2, lst3)",
    "        val lst1 = lst.asInstanceOf[List[List[Any]]]\n        val lst2 = lst1.map(x => x(0))\n        val lst3 = lst1.map(x => x(1))\n        List(lst2, lst3)",
    "        val lst1 = lst.asInstanceOf[List[List[Any]]]\n        val lst2 = lst1.map(x => x.head)\n        val lst3 = lst1.map(x => x.tail.head)\n        List(lst2, lst3)",
    "        var lst1 = List[Any]()\n        var lst2 = List[Any]()\n        for (i <- lst.asInstanceOf[List[List[Any]]]) {\n            lst1 = lst1 :+ i(0)\n            lst2 = lst2 :+ i(1)\n        }\n        return List(lst1, lst2)",
    "        lst match {\n            case lst : List[List[Any]] => {\n                var lst1 = List[Any]()\n                var lst2 = List[Any]()\n                for (i <- lst) {\n                    lst1 = lst1 :+ i(0)\n                    lst2 = lst2 :+ i(1)\n                }\n                List(lst1, lst2)\n            }\n            case _ => lst\n        }",
    "        lst match {\n            case l : List[List[Any]] => {\n                val l1 = new ListBuffer[Any]\n                val l2 = new ListBuffer[Any]\n                for (i <- l) {\n                    l1 += i(0)\n                    l2 += i(1)\n                }\n                List(l1.toList, l2.toList)\n            }\n            case _ => lst\n        }",
    "        lst match {\n            case lst : List[List[Any]] => {\n                var first : List[Any] = List()\n                var second : List[Any] = List()\n                for (i <- 0 until lst.length) {\n                    first = first :+ lst(i)(0)\n                    second = second :+ lst(i)(1)\n                }\n                List(first, second)\n            }\n            case _ => \"Invalid input\"\n        }",
    "        lst match {\n            case l : List[List[Any]] => {\n                var l1 = List[Any]()\n                var l2 = List[Any]()\n                for (i <- l) {\n                    l1 = l1 :+ i(0)\n                    l2 = l2 :+ i(1)\n                }\n                List(l1, l2)\n            }\n            case _ => lst\n        }",
    "        lst match {\n            case Nil => Nil\n            case (x : List[Any]) :: xs => merge(xs) match {\n                case (y : List[Any]) :: ys => (x(0) :: y(0) :: Nil) :: (x(1) :: y(1) :: Nil) :: ys\n            }\n        }",
    "        lst match {\n            case lst : List[List[Any]] => {\n                var lst1 = List[Any]()\n                var lst2 = List[Any]()\n                for (i <- 0 until lst.length) {\n                    lst1 = lst1 :+ lst(i)(0)\n                    lst2 = lst2 :+ lst(i)(1)\n                }\n                List(lst1, lst2)\n            }\n            case _ => lst\n        }",
    "        val lst1 = lst.asInstanceOf[List[List[Int]]]\n        val lst2 = lst1.map(x => x(0))\n        val lst3 = lst1.map(x => x(1))\n        List(lst2, lst3)",
    "        lst match {\n            case l : List[List[Any]] => {\n                val l1 = new ListBuffer[Any]\n                val l2 = new ListBuffer[Any]\n                for (i <- 0 until l.length) {\n                    l1 += l(i)(0)\n                    l2 += l(i)(1)\n                }\n                List(l1.toList, l2.toList)\n            }\n            case _ => lst\n        }",
    "        lst match {\n            case l : List[List[Any]] => {\n                var l1 : List[Any] = List()\n                var l2 : List[Any] = List()\n                for (i <- l) {\n                    l1 = l1 :+ i(0)\n                    l2 = l2 :+ i(1)\n                }\n                List(l1, l2)\n            }\n            case _ => lst\n        }",
    "        val lst1 = lst.asInstanceOf[List[List[Any]]]\n        val lst2 = lst1.map(x => x.head)\n        val lst3 = lst1.map(x => x.tail.head)\n        List(lst2, lst3)",
    "        lst match {\n            case lst : List[List[Any]] => {\n                val lst1 = new ListBuffer[Any]\n                val lst2 = new ListBuffer[Any]\n                for (sublst <- lst) {\n                    lst1 += sublst(0)\n                    lst2 += sublst(1)\n                }\n                List(lst1.toList, lst2.toList)\n            }\n            case _ => lst\n        }",
    "        val lst1 = lst.asInstanceOf[List[List[Any]]]\n        val lst2 = ListBuffer[Any]()\n        val lst3 = ListBuffer[Any]()\n        for (i <- 0 until lst1.length) {\n            lst2 += lst1(i)(0)\n            lst3 += lst1(i)(1)\n        }\n        List(lst2.toList, lst3.toList)",
    "        val lst1 = ListBuffer[Any]()\n        val lst2 = ListBuffer[Any]()\n        for (i <- lst.asInstanceOf[List[List[Any]]]) {\n            lst1 += i(0)\n            lst2 += i(1)\n        }\n        List(lst1.toList, lst2.toList)",
    "        lst match {\n            case lst : List[List[Any]] => {\n                var lst1 : List[Any] = List()\n                var lst2 : List[Any] = List()\n                for (i <- lst) {\n                    lst1 = lst1 :+ i(0)\n                    lst2 = lst2 :+ i(1)\n                }\n                List(lst1, lst2)\n            }\n            case _ => \"Invalid Input\"\n        }",
    "        lst match {\n            case Nil => Nil\n            case (x : Int, y : Int) :: xs => (x :: merge(xs).asInstanceOf[List[Int]], y :: merge(xs).asInstanceOf[List[Int]])\n            case _ => Nil\n        }",
    "        lst match {\n            case Nil => Nil\n            case x :: xs => x match {\n                case (a, b) => merge(xs) match {\n                    case (l1, l2) => (a :: l1, b :: l2)\n                }\n            }\n        }",
    "        val lst1 = new ListBuffer[Any]\n        val lst2 = new ListBuffer[Any]\n        for (i <- lst.asInstanceOf[List[List[Any]]]) {\n            lst1 += i(0)\n            lst2 += i(1)\n        }\n        List(lst1.toList, lst2.toList)",
    "        val lst1 = lst.asInstanceOf[List[List[Any]]]\n        val lst2 = lst1.map(x => x(0))\n        val lst3 = lst1.map(x => x(1))\n        List(lst2, lst3)",
    "        var first : List[Any] = List()\n        var second : List[Any] = List()\n        for (i <- 0 until lst.asInstanceOf[List[List[Any]]].length) {\n            first = first :+ lst.asInstanceOf[List[List[Any]]](i)(0)\n            second = second :+ lst.asInstanceOf[List[List[Any]]](i)(1)\n        }\n        List(first, second)",
    "        val lst2 = lst.asInstanceOf[List[List[Int]]]\n        val lst3 = lst2.map(x => x(0))\n        val lst4 = lst2.map(x => x(1))\n        List(lst3, lst4)",
    "        val lst1 = lst.asInstanceOf[List[List[Any]]]\n        val lst2 = lst1.map(x => x(0))\n        val lst3 = lst1.map(x => x(1))\n        List(lst2, lst3)",
    "        val lst1 = lst.asInstanceOf[List[List[Int]]]\n        val lst2 = lst1.map(x => x(0))\n        val lst3 = lst1.map(x => x(1))\n        List(lst2, lst3)",
    "        lst match {\n            case Nil => Nil\n            case (x : List[Any]) :: xs => merge(xs) match {\n                case (y : List[Any]) :: ys => (x(0) :: y(0) :: Nil) :: (x(1) :: y(1) :: Nil) :: Nil\n                case _ => Nil\n            }\n            case _ => Nil\n        }",
    "        val lst1 = lst.asInstanceOf[List[List[Any]]]\n        val lst2 = lst1.map(x => x(0)).toList\n        val lst3 = lst1.map(x => x(1)).toList\n        List(lst2, lst3)",
    "        val lst1 = lst.asInstanceOf[List[List[Any]]]\n        val lst2 = lst1.map(x => x(0))\n        val lst3 = lst1.map(x => x(1))\n        List(lst2, lst3)",
    "        lst match {\n            case lst : List[List[Any]] => {\n                var lst1 = List[Any]()\n                var lst2 = List[Any]()\n                for (i <- lst) {\n                    lst1 = lst1 :+ i(0)\n                    lst2 = lst2 :+ i(1)\n                }\n                List(lst1, lst2)\n            }\n            case _ => lst\n        }",
    "        var lst1 = List[Any]()\n        var lst2 = List[Any]()\n        for (i <- 0 until lst.asInstanceOf[List[List[Any]]].length) {\n            lst1 = lst1 :+ lst.asInstanceOf[List[List[Any]]](i)(0)\n            lst2 = lst2 :+ lst.asInstanceOf[List[List[Any]]](i)(1)\n        }\n        List(lst1, lst2)",
    "        lst match {\n            case lst : List[List[Any]] => {\n                val lst1 = new ListBuffer[Any]\n                val lst2 = new ListBuffer[Any]\n                for (i <- lst) {\n                    lst1 += i(0)\n                    lst2 += i(1)\n                }\n                List(lst1.toList, lst2.toList)\n            }\n            case _ => \"Invalid input\"\n        }",
    "        lst match {\n            case Nil => Nil\n            case (x :: xs) => {\n                val (a, b) = x\n                merge(xs) match {\n                    case (c, d) => (a :: c, b :: d)\n                }\n            }\n        }",
    "        lst match {\n            case lst : List[List[Any]] => {\n                var lst1 : List[Any] = List()\n                var lst2 : List[Any] = List()\n                for (i <- lst) {\n                    lst1 = lst1 :+ i(0)\n                    lst2 = lst2 :+ i(1)\n                }\n                List(lst1, lst2)\n            }\n            case _ => \"Invalid Input\"\n        }",
    "        lst match {\n            case lst : List[List[Any]] => {\n                val lst1 = new ListBuffer[Any]\n                val lst2 = new ListBuffer[Any]\n                for (i <- lst) {\n                    lst1 += i(0)\n                    lst2 += i(1)\n                }\n                List(lst1.toList, lst2.toList)\n            }\n            case _ => lst\n        }",
    "        lst match {\n            case lst : List[List[Any]] => {\n                val lst1 = ListBuffer[Any]()\n                val lst2 = ListBuffer[Any]()\n                for (i <- lst) {\n                    lst1 += i(0)\n                    lst2 += i(1)\n                }\n                List(lst1.toList, lst2.toList)\n            }\n            case _ => throw new Exception(\"Invalid input\")\n        }",
    "        val lst1 = lst.asInstanceOf[List[List[Int]]]\n        val lst2 = lst1.map(x => x(0))\n        val lst3 = lst1.map(x => x(1))\n        List(lst2, lst3)",
    "        val lst1 = lst.asInstanceOf[List[List[Int]]]\n        val lst2 = lst1.map(x => x(0))\n        val lst3 = lst1.map(x => x(1))\n        List(lst2, lst3)",
    "        val lst1 = lst.asInstanceOf[List[List[Any]]]\n        val lst2 = lst1.map(x => x(0))\n        val lst3 = lst1.map(x => x(1))\n        List(lst2, lst3)",
    "        lst match {\n            case lst : List[List[Any]] => {\n                val lst1 = new ListBuffer[Any]\n                val lst2 = new ListBuffer[Any]\n                for (i <- lst) {\n                    lst1 += i(0)\n                    lst2 += i(1)\n                }\n                List(lst1.toList, lst2.toList)\n            }\n            case _ => lst\n        }",
    "        val lst1 = lst.asInstanceOf[List[List[Any]]]\n        val lst2 = lst1.map(x => x.head)\n        val lst3 = lst1.map(x => x.tail.head)\n        List(lst2, lst3)",
    "        lst match {\n            case lst : List[List[Any]] => {\n                val lst1 = new ListBuffer[Any]()\n                val lst2 = new ListBuffer[Any]()\n                for (i <- 0 until lst.size) {\n                    lst1 += lst(i)(0)\n                    lst2 += lst(i)(1)\n                }\n                List(lst1.toList, lst2.toList)\n            }\n            case _ => lst\n        }",
    "        lst match {\n            case lst : List[List[Any]] => {\n                val lst1 = ListBuffer[Any]()\n                val lst2 = ListBuffer[Any]()\n                for (i <- 0 until lst.length) {\n                    lst1 += lst(i)(0)\n                    lst2 += lst(i)(1)\n                }\n                List(lst1.toList, lst2.toList)\n            }\n            case _ => lst\n        }",
    "        val lst1 = lst.asInstanceOf[List[List[Any]]]\n        val lst2 = ListBuffer[Any]()\n        val lst3 = ListBuffer[Any]()\n        for (i <- lst1) {\n            lst2 += i(0)\n            lst3 += i(1)\n        }\n        List(lst2.toList, lst3.toList)",
    "        val lst1 = lst.asInstanceOf[List[List[Int]]]\n        val lst2 = ListBuffer[Int]()\n        val lst3 = ListBuffer[Int]()\n        for (i <- lst1) {\n            lst2 += i(0)\n            lst3 += i(1)\n        }\n        List(lst2.toList, lst3.toList)",
    "        lst match {\n            case lst : List[List[Any]] => {\n                val lst1 = ListBuffer[Any]()\n                val lst2 = ListBuffer[Any]()\n                for (i <- lst) {\n                    lst1 += i(0)\n                    lst2 += i(1)\n                }\n                List(lst1.toList, lst2.toList)\n            }\n            case _ => \"Invalid input\"\n        }",
    "        var lst1 = List[Any]()\n        var lst2 = List[Any]()\n        for (i <- lst.asInstanceOf[List[List[Any]]]) {\n            lst1 = lst1 :+ i(0)\n            lst2 = lst2 :+ i(1)\n        }\n        List(lst1, lst2)",
    "        lst match {\n            case lst : List[List[Any]] => {\n                val lst1 = new ListBuffer[Any]\n                val lst2 = new ListBuffer[Any]\n                for (i <- lst) {\n                    lst1 += i(0)\n                    lst2 += i(1)\n                }\n                List(lst1.toList, lst2.toList)\n            }\n            case _ => lst\n        }",
    "        val lst1 = lst.asInstanceOf[List[List[Int]]]\n        val lst2 = lst1.map(x => x(0))\n        val lst3 = lst1.map(x => x(1))\n        List(lst2, lst3)",
    "        var lst1 = List[Any]()\n        var lst2 = List[Any]()\n        for (i <- lst.asInstanceOf[List[List[Any]]]) {\n            lst1 = lst1 :+ i(0)\n            lst2 = lst2 :+ i(1)\n        }\n        List(lst1, lst2)",
    "        var lst1 = List[Any]()\n        var lst2 = List[Any]()\n        for (i <- lst.asInstanceOf[List[List[Any]]]) {\n            lst1 = lst1 :+ i(0)\n            lst2 = lst2 :+ i(1)\n        }\n        List(lst1, lst2)",
    "        lst match {\n            case lst : List[List[Any]] => {\n                var lst1 : List[Any] = List()\n                var lst2 : List[Any] = List()\n                for (i <- lst) {\n                    lst1 = lst1 :+ i(0)\n                    lst2 = lst2 :+ i(1)\n                }\n                List(lst1, lst2)\n            }\n            case _ => lst\n        }",
    "        val lst2 = lst.asInstanceOf[List[List[Any]]]\n        val lst3 = lst2.map(x => x(0))\n        val lst4 = lst2.map(x => x(1))\n        List(lst3, lst4)",
    "        lst match {\n            case x : List[List[Any]] => {\n                val lst1 = new ListBuffer[Any]\n                val lst2 = new ListBuffer[Any]\n                for (i <- 0 until x.length) {\n                    lst1 += x(i)(0)\n                    lst2 += x(i)(1)\n                }\n                List(lst1.toList, lst2.toList)\n            }\n            case _ => Nil\n        }",
    "        val lst1 = ListBuffer[Any]()\n        val lst2 = ListBuffer[Any]()\n        for (i <- lst.asInstanceOf[List[List[Any]]]) {\n            lst1 += i(0)\n            lst2 += i(1)\n        }\n        List(lst1.toList, lst2.toList)",
    "        val lst1 = lst.asInstanceOf[List[List[Any]]]\n        val lst2 = lst1.map(x => x(0))\n        val lst3 = lst1.map(x => x(1))\n        List(lst2, lst3)",
    "        lst match {\n            case lst : List[List[Any]] => {\n                var lst1 : List[Any] = Nil\n                var lst2 : List[Any] = Nil\n                for (i <- 0 until lst.length) {\n                    lst1 = lst1 :+ lst(i)(0)\n                    lst2 = lst2 :+ lst(i)(1)\n                }\n                List(lst1, lst2)\n            }\n            case _ => Nil\n        }",
    "        val lst1 = lst.asInstanceOf[List[List[Int]]]\n        val lst2 = lst1.map(x => x(0))\n        val lst3 = lst1.map(x => x(1))\n        List(lst2, lst3)",
    "        val lst1 = lst.asInstanceOf[List[List[Int]]]\n        val lst2 = lst1.map(x => x(0))\n        val lst3 = lst1.map(x => x(1))\n        List(lst2, lst3)",
    "        lst match {\n            case lst : List[List[Any]] => {\n                val first = new ListBuffer[Any]\n                val second = new ListBuffer[Any]\n                for (sublist <- lst) {\n                    first += sublist(0)\n                    second += sublist(1)\n                }\n                List(first.toList, second.toList)\n            }\n            case _ => throw new Exception(\"Invalid input\")\n        }",
    "        lst match {\n            case lst : List[List[Any]] => {\n                val lst1 = ListBuffer[Any]()\n                val lst2 = ListBuffer[Any]()\n                for (i <- 0 until lst.length) {\n                    lst1 += lst(i)(0)\n                    lst2 += lst(i)(1)\n                }\n                List(lst1.toList, lst2.toList)\n            }\n            case _ => lst\n        }",
    "        val lst1 = lst.asInstanceOf[List[List[Int]]]\n        val lst2 = ListBuffer[Int]()\n        val lst3 = ListBuffer[Int]()\n        for (i <- 0 until lst1.length) {\n            lst2 += lst1(i)(0)\n            lst3 += lst1(i)(1)\n        }\n        List(lst2.toList, lst3.toList)",
    "        lst match {\n            case lst : List[List[Any]] => {\n                val l1 = lst.map(x => x(0))\n                val l2 = lst.map(x => x(1))\n                List(l1, l2)\n            }\n            case _ => lst\n        }",
    "        var lst1 : List[Any] = List()\n        var lst2 : List[Any] = List()\n        for (i <- lst.asInstanceOf[List[List[Any]]]) {\n            lst1 = lst1 :+ i(0)\n            lst2 = lst2 :+ i(1)\n        }\n        List(lst1, lst2)",
    "        var lst1 = List[Any]()\n        var lst2 = List[Any]()\n        for (i <- lst.asInstanceOf[List[List[Any]]]) {\n            lst1 = lst1 :+ i(0)\n            lst2 = lst2 :+ i(1)\n        }\n        List(lst1, lst2)",
    "        var lst1 = List[Any]()\n        var lst2 = List[Any]()\n        for (i <- 0 until lst.asInstanceOf[List[List[Any]]].length) {\n            lst1 = lst1 :+ lst.asInstanceOf[List[List[Any]]](i)(0)\n            lst2 = lst2 :+ lst.asInstanceOf[List[List[Any]]](i)(1)\n        }\n        return List(lst1, lst2)",
    "        var lst1 = List[Any]()\n        var lst2 = List[Any]()\n        for (i <- 0 until lst.asInstanceOf[List[List[Any]]].length) {\n            lst1 = lst1 :+ lst.asInstanceOf[List[List[Any]]](i)(0)\n            lst2 = lst2 :+ lst.asInstanceOf[List[List[Any]]](i)(1)\n        }\n        return List(lst1, lst2)",
    "        lst match {\n            case lst : List[List[Any]] => {\n                var lst1 = List[Any]()\n                var lst2 = List[Any]()\n                for (i <- lst) {\n                    lst1 = lst1 :+ i(0)\n                    lst2 = lst2 :+ i(1)\n                }\n                List(lst1, lst2)\n            }\n            case _ => \"Not a list of lists\"\n        }",
    "        lst match {\n            case lst : List[List[Any]] => {\n                var lst1 : List[Any] = List()\n                var lst2 : List[Any] = List()\n                for (i <- lst) {\n                    lst1 = lst1 :+ i(0)\n                    lst2 = lst2 :+ i(1)\n                }\n                List(lst1, lst2)\n            }\n            case _ => \"Invalid Input\"\n        }",
    "        lst match {\n            case l : List[List[Any]] => {\n                val l1 = new ListBuffer[Any]()\n                val l2 = new ListBuffer[Any]()\n                for (i <- l) {\n                    l1 += i(0)\n                    l2 += i(1)\n                }\n                List(l1.toList, l2.toList)\n            }\n            case _ => lst\n        }",
    "        val lst1 = lst.asInstanceOf[List[List[Any]]]\n        val lst2 = lst1.map(x => x(0))\n        val lst3 = lst1.map(x => x(1))\n        List(lst2, lst3)",
    "        lst match {\n            case Nil => Nil\n            case (x : Int, y : Int) :: xs => (x :: merge(xs).asInstanceOf[List[Int]], y :: merge(xs).asInstanceOf[List[Int]])\n            case _ => Nil\n        }",
    "        val lst2 = lst.asInstanceOf[List[List[Any]]]\n        val lst3 = lst2.map(x => x.asInstanceOf[List[Any]])\n        val lst4 = lst3.map(x => x(0))\n        val lst5 = lst3.map(x => x(1))\n        return List(lst4, lst5)",
    "        val lst1 = lst.asInstanceOf[List[List[Any]]]\n        val lst2 = lst1.map(x => x(0))\n        val lst3 = lst1.map(x => x(1))\n        List(lst2, lst3)",
    "        lst match {\n            case lst : List[List[Any]] => {\n                val lst1 = new ListBuffer[Any]()\n                val lst2 = new ListBuffer[Any]()\n                for (i <- 0 until lst.length) {\n                    lst1 += lst(i)(0)\n                    lst2 += lst(i)(1)\n                }\n                List(lst1.toList, lst2.toList)\n            }\n            case _ => lst\n        }",
    "        val lst1 = lst.asInstanceOf[List[List[Any]]]\n        val lst2 = lst1.map(_.head)\n        val lst3 = lst1.map(_.tail.head)\n        List(lst2, lst3)",
    "        val lst1 = lst.asInstanceOf[List[List[Any]]]\n        val lst2 = ListBuffer[Any]()\n        val lst3 = ListBuffer[Any]()\n        for (i <- lst1) {\n            lst2 += i(0)\n            lst3 += i(1)\n        }\n        List(lst2.toList, lst3.toList)",
    "        var lst1 = List[Any]()\n        var lst2 = List[Any]()\n        for (i <- lst.asInstanceOf[List[List[Any]]]) {\n            lst1 = lst1 :+ i(0)\n            lst2 = lst2 :+ i(1)\n        }\n        List(lst1, lst2)",
    "        lst match {\n            case lst : List[List[Any]] => {\n                var lst1 : List[Any] = List()\n                var lst2 : List[Any] = List()\n                for (i <- 0 until lst.length) {\n                    lst1 = lst1 :+ lst(i)(0)\n                    lst2 = lst2 :+ lst(i)(1)\n                }\n                List(lst1, lst2)\n            }\n            case _ => lst\n        }",
    "        var lst1 = List[Int]()\n        var lst2 = List[Int]()\n        for (i <- 0 to lst.asInstanceOf[List[List[Int]]].length - 1) {\n            lst1 = lst1 :+ lst.asInstanceOf[List[List[Int]]](i)(0)\n            lst2 = lst2 :+ lst.asInstanceOf[List[List[Int]]](i)(1)\n        }\n        return List(lst1, lst2)",
    "        lst match {\n            case lst : List[List[Any]] => {\n                val lst1 = new ListBuffer[Any]\n                val lst2 = new ListBuffer[Any]\n                lst.foreach(x => {\n                    lst1 += x(0)\n                    lst2 += x(1)\n                })\n                List(lst1.toList, lst2.toList)\n            }\n            case _ => \"Invalid input\"\n        }",
    "        lst match {\n            case lst : List[List[Int]] => {\n                var l1 = List[Int]()\n                var l2 = List[Int]()\n                for (i <- lst) {\n                    l1 = l1 :+ i(0)\n                    l2 = l2 :+ i(1)\n                }\n                List(l1, l2)\n            }\n            case _ => lst\n        }",
    "        val lst1 = lst.asInstanceOf[List[List[Int]]]\n        val lst2 = lst1.map(x => x(0))\n        val lst3 = lst1.map(x => x(1))\n        List(lst2, lst3)",
    "        lst match {\n            case lst : List[List[Any]] => {\n                val lst1 = new ListBuffer[Any]\n                val lst2 = new ListBuffer[Any]\n                for (i <- lst) {\n                    lst1 += i(0)\n                    lst2 += i(1)\n                }\n                List(lst1.toList, lst2.toList)\n            }\n            case _ => lst\n        }",
    "        lst match {\n            case lst : List[List[Any]] => {\n                var lst1 : List[Any] = List()\n                var lst2 : List[Any] = List()\n                for (i <- lst) {\n                    lst1 = lst1 :+ i(0)\n                    lst2 = lst2 :+ i(1)\n                }\n                List(lst1, lst2)\n            }\n            case _ => \"Invalid input\"\n        }",
    "        var lst1 = List[Any]()\n        var lst2 = List[Any]()\n        for (i <- lst.asInstanceOf[List[List[Any]]]) {\n            lst1 = lst1 :+ i(0)\n            lst2 = lst2 :+ i(1)\n        }\n        return List(lst1, lst2)",
    "        val lst1 = lst.asInstanceOf[List[List[Any]]]\n        val lst2 = lst1.map(x => x(0))\n        val lst3 = lst1.map(x => x(1))\n        List(lst2, lst3)",
    "        var lst1 = List[Any]()\n        var lst2 = List[Any]()\n        for (i <- 0 until lst.asInstanceOf[List[List[Any]]].length) {\n            lst1 = lst1 :+ lst.asInstanceOf[List[List[Any]]](i)(0)\n            lst2 = lst2 :+ lst.asInstanceOf[List[List[Any]]](i)(1)\n        }\n        List(lst1, lst2)",
    "        lst match {\n            case l : List[List[Any]] => {\n                val l1 = new ListBuffer[Any]\n                val l2 = new ListBuffer[Any]\n                for (i <- l) {\n                    l1 += i(0)\n                    l2 += i(1)\n                }\n                List(l1.toList, l2.toList)\n            }\n            case _ => lst\n        }",
    "        lst match {\n            case l : List[List[Any]] => {\n                var l1 = List[Any]()\n                var l2 = List[Any]()\n                for (i <- l) {\n                    l1 = l1 :+ i(0)\n                    l2 = l2 :+ i(1)\n                }\n                List(l1, l2)\n            }\n            case _ => throw new Exception(\"Invalid input\")\n        }",
    "        var lst1 = List[Any]()\n        var lst2 = List[Any]()\n        for (i <- 0 until lst.asInstanceOf[List[List[Any]]].length) {\n            lst1 = lst1 :+ lst.asInstanceOf[List[List[Any]]](i)(0)\n            lst2 = lst2 :+ lst.asInstanceOf[List[List[Any]]](i)(1)\n        }\n        return List(lst1, lst2)",
    "        lst match {\n            case lst : List[List[Any]] => {\n                val lst1 = new ListBuffer[Any]\n                val lst2 = new ListBuffer[Any]\n                for (i <- lst) {\n                    lst1 += i(0)\n                    lst2 += i(1)\n                }\n                List(lst1.toList, lst2.toList)\n            }\n            case _ => throw new Exception(\"Invalid input\")\n        }",
    "        var lst1 = List[Any]()\n        var lst2 = List[Any]()\n        for (i <- lst.asInstanceOf[List[List[Any]]]) {\n            lst1 = lst1 :+ i(0)\n            lst2 = lst2 :+ i(1)\n        }\n        return List(lst1, lst2)",
    "        lst match {\n            case lst : List[List[Any]] => {\n                var lst1 : List[Any] = List()\n                var lst2 : List[Any] = List()\n                for (i <- lst) {\n                    lst1 = lst1 :+ i(0)\n                    lst2 = lst2 :+ i(1)\n                }\n                List(lst1, lst2)\n            }\n            case _ => \"Invalid input\"\n        }",
    "        lst match {\n            case l : List[List[Any]] => {\n                var l1 : List[Any] = List()\n                var l2 : List[Any] = List()\n                for (i <- l) {\n                    l1 = l1 :+ i(0)\n                    l2 = l2 :+ i(1)\n                }\n                List(l1, l2)\n            }\n            case _ => \"Invalid input\"\n        }",
    "        val lst1 = lst.asInstanceOf[List[List[Int]]]\n        val lst2 = ListBuffer[Int]()\n        val lst3 = ListBuffer[Int]()\n        for (i <- lst1) {\n            lst2 += i(0)\n            lst3 += i(1)\n        }\n        List(lst2.toList, lst3.toList)",
    "        val lst1 = lst.asInstanceOf[List[List[Any]]]\n        val lst2 = lst1.map(x => x(0))\n        val lst3 = lst1.map(x => x(1))\n        List(lst2, lst3)",
    "        val lst1 = lst.asInstanceOf[List[List[Any]]]\n        val lst2 = lst1.map(x => x.head)\n        val lst3 = lst1.map(x => x.tail.head)\n        List(lst2, lst3)",
    "        lst match {\n            case Nil => Nil\n            case (x :: xs) => {\n                val (a, b) = x.asInstanceOf[(Int, Int)]\n                (a :: merge(xs).asInstanceOf[List[Int]]) :: (b :: merge(xs).asInstanceOf[List[Int]]) :: Nil\n            }\n        }",
    "        val lst1 = lst.asInstanceOf[List[List[Any]]]\n        val lst2 = ListBuffer[Any]()\n        val lst3 = ListBuffer[Any]()\n        for (i <- lst1) {\n            lst2 += i(0)\n            lst3 += i(1)\n        }\n        List(lst2.toList, lst3.toList)",
    "        lst match {\n            case lst : List[List[Any]] => {\n                val lst1 = new ListBuffer[Any]()\n                val lst2 = new ListBuffer[Any]()\n                for (i <- 0 until lst.length) {\n                    lst1 += lst(i)(0)\n                    lst2 += lst(i)(1)\n                }\n                List(lst1.toList, lst2.toList)\n            }\n            case _ => Nil\n        }",
    "        lst match {\n            case l : List[List[Any]] => {\n                val l1 = new ListBuffer[Any]\n                val l2 = new ListBuffer[Any]\n                for (i <- l) {\n                    l1 += i(0)\n                    l2 += i(1)\n                }\n                List(l1.toList, l2.toList)\n            }\n            case _ => lst\n        }",
    "        lst match {\n            case Nil => Nil\n            case (x :: xs) => {\n                val (first, second) = x.asInstanceOf[Tuple2[Any, Any]]\n                (first :: merge(xs).asInstanceOf[List[Any]], second :: merge(xs).asInstanceOf[List[Any]])\n            }\n        }",
    "        lst match {\n            case lst : List[List[Any]] => {\n                var lst1 = List[Any]()\n                var lst2 = List[Any]()\n                for (i <- lst) {\n                    lst1 = lst1 :+ i(0)\n                    lst2 = lst2 :+ i(1)\n                }\n                List(lst1, lst2)\n            }\n            case _ => \"Invalid Input\"\n        }",
    "        val lst1 = lst.asInstanceOf[List[List[Any]]]\n        val lst2 = lst1.map(x => x.head)\n        val lst3 = lst1.map(x => x.tail.head)\n        List(lst2, lst3)",
    "        lst match {\n            case lst : List[List[Int]] => {\n                var first : List[Int] = List()\n                var second : List[Int] = List()\n                for (i <- 0 until lst.length) {\n                    first = first :+ lst(i)(0)\n                    second = second :+ lst(i)(1)\n                }\n                List(first, second)\n            }\n            case _ => throw new Exception(\"Invalid input\")\n        }",
    "        lst match {\n            case lst : List[List[Any]] => {\n                var lst1 : List[Any] = List()\n                var lst2 : List[Any] = List()\n                for (i <- 0 until lst.length) {\n                    lst1 = lst1 :+ lst(i)(0)\n                    lst2 = lst2 :+ lst(i)(1)\n                }\n                List(lst1, lst2)\n            }\n            case _ => lst\n        }",
    "        var lst1 = new ListBuffer[Any]()\n        var lst2 = new ListBuffer[Any]()\n        for (i <- lst.asInstanceOf[List[List[Any]]]) {\n            lst1 += i(0)\n            lst2 += i(1)\n        }\n        return List(lst1.toList, lst2.toList)",
    "        var lst1 = List[Any]()\n        var lst2 = List[Any]()\n        for (i <- lst.asInstanceOf[List[List[Any]]]) {\n            lst1 = lst1 :+ i(0)\n            lst2 = lst2 :+ i(1)\n        }\n        List(lst1, lst2)",
    "        lst match {\n            case lst : List[List[Any]] => {\n                var lst1 = List[Any]()\n                var lst2 = List[Any]()\n                for (i <- 0 until lst.length) {\n                    lst1 = lst1 :+ lst(i)(0)\n                    lst2 = lst2 :+ lst(i)(1)\n                }\n                List(lst1, lst2)\n            }\n            case _ => \"Invalid input\"\n        }",
    "        var lst1 : List[Any] = List()\n        var lst2 : List[Any] = List()\n        for (i <- lst.asInstanceOf[List[List[Any]]]) {\n            lst1 = lst1 :+ i(0)\n            lst2 = lst2 :+ i(1)\n        }\n        List(lst1, lst2)",
    "        val lst1 = lst.asInstanceOf[List[List[Int]]]\n        val lst2 = lst1.map(x => x(0))\n        val lst3 = lst1.map(x => x(1))\n        List(lst2, lst3)",
    "        var first : List[Any] = List()\n        var second : List[Any] = List()\n        for (i <- 0 to lst.asInstanceOf[List[List[Any]]].length - 1) {\n            first = first :+ lst.asInstanceOf[List[List[Any]]](i)(0)\n            second = second :+ lst.asInstanceOf[List[List[Any]]](i)(1)\n        }\n        return List(first, second)",
    "        lst match {\n            case lst : List[List[Any]] => {\n                val lst1 = new ListBuffer[Any]()\n                val lst2 = new ListBuffer[Any]()\n                for (i <- lst) {\n                    lst1 += i(0)\n                    lst2 += i(1)\n                }\n                List(lst1.toList, lst2.toList)\n            }\n            case _ => throw new Exception(\"Invalid input\")\n        }",
    "        lst match {\n            case lst : List[List[Any]] => {\n                val lst1 = new ListBuffer[Any]\n                val lst2 = new ListBuffer[Any]\n                for (i <- lst) {\n                    lst1 += i(0)\n                    lst2 += i(1)\n                }\n                List(lst1.toList, lst2.toList)\n            }\n            case _ => lst\n        }",
    "        lst match {\n            case lst : List[List[Any]] => {\n                var lst1 = List[Any]()\n                var lst2 = List[Any]()\n                for (i <- lst) {\n                    lst1 = lst1 :+ i(0)\n                    lst2 = lst2 :+ i(1)\n                }\n                List(lst1, lst2)\n            }\n            case _ => \"Not a list of lists\"\n        }",
    "        val lst1 = lst.asInstanceOf[List[List[Any]]]\n        val lst2 = lst1.map(x => x.head)\n        val lst3 = lst1.map(x => x.tail.head)\n        List(lst2, lst3)",
    "        var lst1 = List[Any]()\n        var lst2 = List[Any]()\n        for (i <- 0 until lst.asInstanceOf[List[List[Any]]].length) {\n            lst1 = lst1 :+ lst.asInstanceOf[List[List[Any]]](i)(0)\n            lst2 = lst2 :+ lst.asInstanceOf[List[List[Any]]](i)(1)\n        }\n        List(lst1, lst2)",
    "        val lst1 = lst.asInstanceOf[List[List[Any]]]\n        val lst2 = ListBuffer[List[Any]]()\n        val lst3 = ListBuffer[List[Any]]()\n        for (i <- 0 until lst1.length) {\n            lst2 += List(lst1(i)(0))\n            lst3 += List(lst1(i)(1))\n        }\n        List(lst2.toList, lst3.toList)",
    "        val lst1 = lst.asInstanceOf[List[List[Any]]]\n        val lst2 = lst1.map(_.head)\n        val lst3 = lst1.map(_.tail.head)\n        List(lst2, lst3)",
    "        val lst1 = lst.asInstanceOf[List[List[Any]]]\n        val lst2 = ListBuffer[List[Any]]()\n        val lst3 = ListBuffer[Any]()\n        val lst4 = ListBuffer[Any]()\n        for (i <- 0 until lst1.length) {\n            lst3 += lst1(i)(0)\n            lst4 += lst1(i)(1)\n        }\n        lst2 += lst3.toList\n        lst2 += lst4.toList\n        return lst2.toList",
    "        val lst2 = lst.asInstanceOf[List[List[Any]]]\n        val lst3 = lst2.map(x => x.asInstanceOf[List[Any]])\n        val lst4 = lst3.map(x => x.map(y => y.asInstanceOf[Int]))\n        val lst5 = lst4.transpose\n        lst5",
    "        var lst1 = List[Any]()\n        var lst2 = List[Any]()\n        for (i <- 0 to lst.asInstanceOf[List[List[Any]]].length - 1) {\n            lst1 = lst1 :+ lst.asInstanceOf[List[List[Any]]](i)(0)\n            lst2 = lst2 :+ lst.asInstanceOf[List[List[Any]]](i)(1)\n        }\n        return List(lst1, lst2)",
    "        val lst1 = new ListBuffer[Any]\n        val lst2 = new ListBuffer[Any]\n        for (i <- 0 until lst.asInstanceOf[List[List[Any]]].length) {\n            lst1 += lst.asInstanceOf[List[List[Any]]](i)(0)\n            lst2 += lst.asInstanceOf[List[List[Any]]](i)(1)\n        }\n        List(lst1.toList, lst2.toList)",
    "        var lst1 = List[Int]()\n        var lst2 = List[Int]()\n        for (i <- lst.asInstanceOf[List[List[Int]]]) {\n            lst1 = lst1 :+ i(0)\n            lst2 = lst2 :+ i(1)\n        }\n        List(lst1, lst2)",
    "        val lst1 = lst.asInstanceOf[List[List[Int]]]\n        val lst2 = lst1.map(x => x(0))\n        val lst3 = lst1.map(x => x(1))\n        List(lst2, lst3)",
    "        lst match {\n            case Nil => Nil\n            case (x : List[Any]) :: xs => {\n                val (a, b) = x.splitAt(1)\n                (a.head :: merge(xs).asInstanceOf[List[Any]], b.head :: merge(xs).asInstanceOf[List[Any]])\n            }\n        }",
    "        val lst1 = lst.asInstanceOf[List[List[Any]]]\n        val lst2 = ListBuffer[Any]()\n        val lst3 = ListBuffer[Any]()\n        for (i <- 0 until lst1.length) {\n            lst2 += lst1(i)(0)\n            lst3 += lst1(i)(1)\n        }\n        List(lst2, lst3)",
    "        lst match {\n            case Nil => Nil\n            case (x : Int, y : Int) :: t => (x :: merge(t).asInstanceOf[List[Int]], y :: merge(t).asInstanceOf[List[Int]])\n            case (x : String, y : String) :: t => (x :: merge(t).asInstanceOf[List[String]], y :: merge(t).asInstanceOf[List[String]])\n            case (x : Double, y : Double) :: t => (x :: merge(t).asInstanceOf[List[Double]], y :: merge(t).asInstanceOf[List[Double]])\n            case (x : Char, y : Char) :: t => (x :: merge(t).asInstanceOf[List[Char]], y :: merge(t).asInstanceOf[List[Char]])\n            case (x : Boolean, y : Boolean) :: t => (x :: merge(t).asInstanceOf[List[Boolean]], y :: merge(t).asInstanceOf[List[Boolean]])\n            case (x : List[Any], y : List[Any]) :: t => (x ::: merge(t).asInstanceOf[List[List[Any]]], y ::: merge(t).asInstanceOf[List[List[Any]]])\n            case (x : Tuple2[Any, Any], y : Tuple2[Any, Any]) :: t => (x :: merge(t).asInstanceOf[List[Tuple2[Any, Any]]], y :: merge(t).asInstanceOf[List[Tuple2[Any, Any]]])\n            case (x : Tuple3[Any, Any, Any], y : Tuple3[Any, Any, Any]) :: t => (x :: merge(t).asInstanceOf[List[Tuple3[Any, Any, Any]]], y :: merge(t).asInstanceOf[List[Tuple3[Any, Any, Any]]])\n            case (x : Tuple4[Any, Any, Any, Any], y : Tuple4[Any, Any, Any, Any]) :: t => (x :: merge(t).asInstanceOf[List[Tuple4[Any, Any, Any, Any]]], y :: merge",
    "        var lst1 = List[Int]()\n        var lst2 = List[Int]()\n        for (i <- lst.asInstanceOf[List[List[Int]]]) {\n            lst1 = lst1 :+ i(0)\n            lst2 = lst2 :+ i(1)\n        }\n        List(lst1, lst2)",
    "        val lst1 = lst.asInstanceOf[List[List[Int]]]\n        val lst2 = ListBuffer[List[Int]]()\n        val lst3 = ListBuffer[List[Int]]()\n        for (i <- 0 to lst1.length - 1) {\n            lst2 += List(lst1(i)(0))\n            lst3 += List(lst1(i)(1))\n        }\n        List(lst2.toList, lst3.toList)",
    "        lst match {\n            case Nil => Nil\n            case (x :: xs) => {\n                val (a, b) = x\n                (a :: merge(xs).asInstanceOf[List[Any]]) :: (b :: merge(xs).asInstanceOf[List[Any]]) :: Nil\n            }\n        }",
    "        lst match {\n            case Nil => Nil\n            case (x : List[Any]) :: xs => {\n                val (first, second) = x.splitAt(1)\n                List(first, second) :: merge(xs)\n            }\n            case (x : Any) :: xs => List(List(x), List()) :: merge(xs)\n        }",
    "        lst match {\n            case l : List[List[Any]] => {\n                var l1 : List[Any] = List()\n                var l2 : List[Any] = List()\n                for (i <- l) {\n                    l1 = l1 :+ i(0)\n                    l2 = l2 :+ i(1)\n                }\n                List(l1, l2)\n            }\n            case _ => \"Invalid Input\"\n        }",
    "        lst match {\n            case Nil => Nil\n            case (x :: xs) => {\n                val (a, b) = x\n                val (as, bs) = merge(xs).asInstanceOf[Tuple2[List[Any], List[Any]]]\n                (a :: as, b :: bs)\n            }\n        }",
    "        val lst1 = lst.asInstanceOf[List[List[Any]]]\n        val lst2 = lst1.map(x => x(0))\n        val lst3 = lst1.map(x => x(1))\n        List(lst2, lst3)",
    "        lst match {\n            case l : List[List[Any]] => {\n                var l1 = List[Any]()\n                var l2 = List[Any]()\n                for (i <- 0 until l.length) {\n                    l1 = l1 :+ l(i)(0)\n                    l2 = l2 :+ l(i)(1)\n                }\n                List(l1, l2)\n            }\n            case _ => lst\n        }",
    "        lst match {\n            case lst : List[List[Any]] => {\n                var lst1 : List[Any] = List()\n                var lst2 : List[Any] = List()\n                for (i <- 0 to lst.length - 1) {\n                    lst1 = lst1 :+ lst(i)(0)\n                    lst2 = lst2 :+ lst(i)(1)\n                }\n                List(lst1, lst2)\n            }\n            case _ => \"Invalid input\"\n        }",
    "        lst match {\n            case lst : List[List[Any]] => {\n                val lst1 = new ListBuffer[Any]\n                val lst2 = new ListBuffer[Any]\n                for (i <- 0 until lst.length) {\n                    lst1 += lst(i)(0)\n                    lst2 += lst(i)(1)\n                }\n                List(lst1.toList, lst2.toList)\n            }\n            case _ => lst\n        }",
    "        lst match {\n            case lst : List[List[Any]] => {\n                val l1 = new ListBuffer[Any]\n                val l2 = new ListBuffer[Any]\n                for (i <- lst) {\n                    l1 += i(0)\n                    l2 += i(1)\n                }\n                List(l1.toList, l2.toList)\n            }\n            case _ => lst\n        }",
    "        var lst1 : List[Any] = List()\n        var lst2 : List[Any] = List()\n        for (i <- 0 until lst.asInstanceOf[List[List[Any]]].length) {\n            lst1 = lst1 :+ lst.asInstanceOf[List[List[Any]]](i)(0)\n            lst2 = lst2 :+ lst.asInstanceOf[List[List[Any]]](i)(1)\n        }\n        List(lst1, lst2)",
    "        lst match {\n            case lst : List[List[Any]] => {\n                val lst1 = new ListBuffer[Any]\n                val lst2 = new ListBuffer[Any]\n                for (i <- lst) {\n                    lst1 += i(0)\n                    lst2 += i(1)\n                }\n                List(lst1.toList, lst2.toList)\n            }\n            case _ => {\n                println(\"Not a list of lists\")\n                List()\n            }\n        }",
    "        lst match {\n            case lst : List[List[Any]] => {\n                var lst1 : List[Any] = List()\n                var lst2 : List[Any] = List()\n                for (i <- lst) {\n                    lst1 = lst1 :+ i(0)\n                    lst2 = lst2 :+ i(1)\n                }\n                List(lst1, lst2)\n            }\n            case _ => throw new Exception(\"Invalid Input\")\n        }",
    "        lst match {\n            case lst : List[List[Any]] => {\n                var lst1 : List[Any] = List()\n                var lst2 : List[Any] = List()\n                for (i <- lst) {\n                    lst1 = lst1 :+ i(0)\n                    lst2 = lst2 :+ i(1)\n                }\n                List(lst1, lst2)\n            }\n            case _ => lst\n        }",
    "        lst match {\n            case l : List[List[Any]] => {\n                val l1 = new ListBuffer[Any]()\n                val l2 = new ListBuffer[Any]()\n                for (i <- l) {\n                    l1 += i(0)\n                    l2 += i(1)\n                }\n                List(l1.toList, l2.toList)\n            }\n            case _ => throw new Exception(\"Invalid input\")\n        }",
    "        lst match {\n            case lst : List[List[Any]] => {\n                val lst1 = new ListBuffer[Any]\n                val lst2 = new ListBuffer[Any]\n                for (i <- lst) {\n                    lst1 += i(0)\n                    lst2 += i(1)\n                }\n                List(lst1.toList, lst2.toList)\n            }\n            case _ => lst\n        }",
    "        val lst1 = lst.asInstanceOf[List[List[Int]]]\n        val lst2 = lst1.map(x => x(0))\n        val lst3 = lst1.map(x => x(1))\n        List(lst2, lst3)",
    "        val lst1 = lst.asInstanceOf[List[List[Int]]]\n        val lst2 = lst1.map(x => x(0))\n        val lst3 = lst1.map(x => x(1))\n        List(lst2, lst3)",
    "        val lst2 = lst.asInstanceOf[List[List[Any]]]\n        val lst3 = lst2.map(x => x(0))\n        val lst4 = lst2.map(x => x(1))\n        List(lst3, lst4)",
    "        var lst1 = List[Int]()\n        var lst2 = List[Int]()\n        for (i <- 0 until lst.asInstanceOf[List[List[Int]]].length) {\n            lst1 = lst1 :+ lst.asInstanceOf[List[List[Int]]](i)(0)\n            lst2 = lst2 :+ lst.asInstanceOf[List[List[Int]]](i)(1)\n        }\n        return List(lst1, lst2)",
    "        lst match {\n            case lst : List[List[Any]] => {\n                val lst1 = new ListBuffer[Any]()\n                val lst2 = new ListBuffer[Any]()\n                for (i <- lst) {\n                    lst1 += i(0)\n                    lst2 += i(1)\n                }\n                List(lst1.toList, lst2.toList)\n            }\n            case _ => lst\n        }",
    "        val lst1 = lst.asInstanceOf[List[List[Any]]]\n        val lst2 = lst1.map(x => x(0))\n        val lst3 = lst1.map(x => x(1))\n        List(lst2, lst3)",
    "        val lst1 = lst.asInstanceOf[List[List[Any]]]\n        val lst2 = lst1.map(x => x(0))\n        val lst3 = lst1.map(x => x(1))\n        List(lst2, lst3)",
    "        var lst1 = List[Any]()\n        var lst2 = List[Any]()\n        for (i <- 0 until lst.asInstanceOf[List[List[Any]]].length) {\n            lst1 = lst1 :+ lst.asInstanceOf[List[List[Any]]](i)(0)\n            lst2 = lst2 :+ lst.asInstanceOf[List[List[Any]]](i)(1)\n        }\n        return List(lst1, lst2)",
    "        lst match {\n            case l : List[List[Any]] => {\n                val l1 = new ListBuffer[Any]()\n                val l2 = new ListBuffer[Any]()\n                for (i <- 0 until l.length) {\n                    l1 += l(i)(0)\n                    l2 += l(i)(1)\n                }\n                List(l1, l2)\n            }\n            case _ => lst\n        }",
    "        lst match {\n            case lst : List[List[Any]] => {\n                var lst1 = List[Any]()\n                var lst2 = List[Any]()\n                for (i <- lst) {\n                    lst1 = lst1 :+ i(0)\n                    lst2 = lst2 :+ i(1)\n                }\n                List(lst1, lst2)\n            }\n            case _ => lst\n        }",
    "        lst match {\n            case l : List[List[Any]] => {\n                var l1 : List[Any] = List()\n                var l2 : List[Any] = List()\n                for (i <- l) {\n                    l1 = l1 :+ i(0)\n                    l2 = l2 :+ i(1)\n                }\n                List(l1, l2)\n            }\n            case _ => \"Invalid input\"\n        }",
    "        val lst1 = lst.asInstanceOf[List[List[Any]]]\n        val lst2 = lst1.map(x => x(0))\n        val lst3 = lst1.map(x => x(1))\n        List(lst2, lst3)",
    "        var lst1 = List[Int]()\n        var lst2 = List[Int]()\n        for (i <- 0 until lst.asInstanceOf[List[List[Int]]].length) {\n            lst1 = lst1 :+ lst.asInstanceOf[List[List[Int]]](i)(0)\n            lst2 = lst2 :+ lst.asInstanceOf[List[List[Int]]](i)(1)\n        }\n        return List(lst1, lst2)",
    "        lst match {\n            case l : List[List[Any]] => {\n                var l1 : List[Any] = Nil\n                var l2 : List[Any] = Nil\n                for (i <- l) {\n                    l1 = l1 :+ i(0)\n                    l2 = l2 :+ i(1)\n                }\n                List(l1, l2)\n            }\n            case _ => Nil\n        }",
    "        val lst2 = lst.asInstanceOf[List[List[Any]]]\n        val lst3 = lst2.map(x => x(0))\n        val lst4 = lst2.map(x => x(1))\n        List(lst3, lst4)",
    "        lst match {\n            case lst : List[List[Any]] => {\n                val lst1 = new ListBuffer[Any]()\n                val lst2 = new ListBuffer[Any]()\n                for (i <- 0 until lst.length) {\n                    lst1 += lst(i)(0)\n                    lst2 += lst(i)(1)\n                }\n                List(lst1.toList, lst2.toList)\n            }\n            case _ => lst\n        }",
    "        lst match {\n            case lst : List[List[Any]] => {\n                var lst1 : List[Any] = List()\n                var lst2 : List[Any] = List()\n                for (i <- lst) {\n                    lst1 = lst1 :+ i(0)\n                    lst2 = lst2 :+ i(1)\n                }\n                List(lst1, lst2)\n            }\n            case _ => lst\n        }",
    "        val lst1 = lst.asInstanceOf[List[List[Int]]]\n        val lst2 = ListBuffer[Int]()\n        val lst3 = ListBuffer[Int]()\n        for (i <- lst1) {\n            lst2 += i(0)\n            lst3 += i(1)\n        }\n        List(lst2.toList, lst3.toList)",
    "        val lst1 = lst.asInstanceOf[List[List[Any]]]\n        val lst2 = ListBuffer[List[Any]]()\n        val lst3 = ListBuffer[List[Any]]()\n        for (i <- 0 until lst1.length) {\n            lst2 += List(lst1(i)(0))\n            lst3 += List(lst1(i)(1))\n        }\n        List(lst2.toList, lst3.toList)",
    "        val lst1 = lst.asInstanceOf[List[List[Any]]]\n        val lst2 = lst1.map(x => x(0))\n        val lst3 = lst1.map(x => x(1))\n        List(lst2, lst3)",
    "        val lst1 = lst.asInstanceOf[List[List[Any]]]\n        val lst2 = ListBuffer[Any]()\n        val lst3 = ListBuffer[Any]()\n        for (i <- lst1) {\n            lst2 += i(0)\n            lst3 += i(1)\n        }\n        return List(lst2.toList, lst3.toList)",
    "        val lst1 = lst.asInstanceOf[List[List[Int]]]\n        var lst2 = List[List[Int]]()\n        var lst3 = List[List[Int]]()\n        var lst4 = List[List[Int]]()\n        for (i <- 0 to lst1.length - 1) {\n            lst2 = lst2 :+ List(lst1(i)(0))\n            lst3 = lst3 :+ List(lst1(i)(1))\n        }\n        lst4 = lst4 :+ lst2\n        lst4 = lst4 :+ lst3\n        lst4",
    "        var lst1 = List[Int]()\n        var lst2 = List[Int]()\n        var lst3 = List[List[Int]]()\n        for (i <- 0 until lst.asInstanceOf[List[List[Int]]].length) {\n            lst1 = lst1 :+ lst.asInstanceOf[List[List[Int]]](i)(0)\n            lst2 = lst2 :+ lst.asInstanceOf[List[List[Int]]](i)(1)\n        }\n        lst3 = lst3 :+ lst1\n        lst3 = lst3 :+ lst2\n        return lst3",
    "        val lst1 = lst.asInstanceOf[List[List[Any]]]\n        val lst2 = ListBuffer[Any]()\n        val lst3 = ListBuffer[Any]()\n        for (i <- lst1) {\n            lst2 += i(0)\n            lst3 += i(1)\n        }\n        return List(lst2.toList, lst3.toList)",
    "        lst match {\n            case l : List[List[Any]] => {\n                val l1 = new ListBuffer[Any]()\n                val l2 = new ListBuffer[Any]()\n                for (i <- l) {\n                    l1 += i(0)\n                    l2 += i(1)\n                }\n                List(l1.toList, l2.toList)\n            }\n            case _ => lst\n        }",
    "        val lst1 = lst.asInstanceOf[List[List[Int]]]\n        val lst2 = ListBuffer[Int]()\n        val lst3 = ListBuffer[Int]()\n        for (i <- 0 until lst1.length) {\n            lst2 += lst1(i)(0)\n            lst3 += lst1(i)(1)\n        }\n        List(lst2.toList, lst3.toList)",
    "        val lst2 = lst.asInstanceOf[List[List[Int]]]\n        val lst3 = lst2.map(x => x(0))\n        val lst4 = lst2.map(x => x(1))\n        List(lst3, lst4)",
    "        lst match {\n            case Nil => Nil\n            case (x :: xs) => {\n                val (a, b) = x\n                merge(xs) match {\n                    case (c, d) => (a :: c, b :: d)\n                }\n            }\n        }",
    "        lst match {\n            case lst : List[List[Any]] => {\n                val first = ListBuffer[Any]()\n                val second = ListBuffer[Any]()\n                for (i <- 0 until lst.length) {\n                    first += lst(i)(0)\n                    second += lst(i)(1)\n                }\n                List(first.toList, second.toList)\n            }\n            case _ => lst\n        }",
    "        val lst1 = lst.asInstanceOf[List[List[Any]]]\n        val lst2 = ListBuffer[List[Any]]()\n        val lst3 = ListBuffer[Any]()\n        val lst4 = ListBuffer[Any]()\n        for (i <- 0 until lst1.length) {\n            lst3 += lst1(i)(0)\n            lst4 += lst1(i)(1)\n        }\n        lst2 += lst3.toList\n        lst2 += lst4.toList\n        lst2.toList",
    "        lst match {\n            case lst : List[List[Any]] => {\n                val lst1 = ListBuffer[Any]()\n                val lst2 = ListBuffer[Any]()\n                for (i <- 0 until lst.length) {\n                    lst1 += lst(i)(0)\n                    lst2 += lst(i)(1)\n                }\n                List(lst1.toList, lst2.toList)\n            }\n        }",
    "        lst match {\n            case lst : List[List[Any]] => {\n                var lst1 = List[Any]()\n                var lst2 = List[Any]()\n                for (i <- 0 until lst.length) {\n                    lst1 = lst1 :+ lst(i)(0)\n                    lst2 = lst2 :+ lst(i)(1)\n                }\n                List(lst1, lst2)\n            }\n            case _ => lst\n        }",
    "        var lst1 = List[Any]()\n        var lst2 = List[Any]()\n        for (i <- 0 until lst.asInstanceOf[List[List[Any]]].length) {\n            lst1 = lst1 :+ lst.asInstanceOf[List[List[Any]]](i)(0)\n            lst2 = lst2 :+ lst.asInstanceOf[List[List[Any]]](i)(1)\n        }\n        return List(lst1, lst2)",
    "        var lst1 = List[Any]()\n        var lst2 = List[Any]()\n        for (i <- 0 until lst.asInstanceOf[List[List[Any]]].length) {\n            lst1 = lst1 :+ lst.asInstanceOf[List[List[Any]]](i)(0)\n            lst2 = lst2 :+ lst.asInstanceOf[List[List[Any]]](i)(1)\n        }\n        return List(lst1, lst2)",
    "        val lst1 = lst.asInstanceOf[List[List[Int]]]\n        val lst2 = ListBuffer[Int]()\n        val lst3 = ListBuffer[Int]()\n        for (i <- lst1) {\n            lst2 += i(0)\n            lst3 += i(1)\n        }\n        List(lst2.toList, lst3.toList)",
    "        lst match {\n            case lst : List[List[Any]] => {\n                val lst1 = new ListBuffer[Any]()\n                val lst2 = new ListBuffer[Any]()\n                for (i <- lst) {\n                    lst1 += i(0)\n                    lst2 += i(1)\n                }\n                List(lst1.toList, lst2.toList)\n            }\n            case _ => lst\n        }",
    "        lst match {\n            case lst : List[List[Any]] => {\n                var lst1 = List[Any]()\n                var lst2 = List[Any]()\n                for (i <- 0 to lst.length - 1) {\n                    lst1 = lst1 :+ lst(i)(0)\n                    lst2 = lst2 :+ lst(i)(1)\n                }\n                List(lst1, lst2)\n            }\n            case _ => throw new Exception(\"Invalid input\")\n        }"
  ]
}