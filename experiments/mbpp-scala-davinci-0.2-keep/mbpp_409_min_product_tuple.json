{
  "name": "mbpp_409_min_product_tuple",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the minimum product from the pairs of tuples within a given list.\n    def minProductTuple(list1 : List[Long]) : Long = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_409_min_product_tuple.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(minProductTuple((List[Long]((2l, 7l), (2l, 6l), (1l, 8l), (4l, 9l)))) == (8l));\n    assert(minProductTuple((List[Long]((10l, 20l), (15l, 2l), (5l, 10l)))) == (30l));\n    assert(minProductTuple((List[Long]((11l, 44l), (10l, 15l), (20l, 5l), (12l, 9l)))) == (100l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val list2 = list1.sorted\n        val list3 = list2.tail.sorted\n        val list4 = list3.tail.sorted\n        val list5 = list4.tail.sorted\n        val list6 = list5.tail.sorted\n        val list7 = list6.tail.sorted\n        val list8 = list7.tail.sorted\n        val list9 = list8.tail.sorted\n        val list10 = list9.tail.sorted\n        val list11 = list10.tail.sorted\n        val list12 = list11.tail.sorted\n        val list13 = list12.tail.sorted\n        val list14 = list13.tail.sorted\n        val list15 = list14.tail.sorted\n        val list16 = list15.tail.sorted\n        val list17 = list16.tail.sorted\n        val list18 = list17.tail.sorted\n        val list19 = list18.tail.sorted\n        val list20 = list19.tail.sorted\n        val list21 = list20.tail.sorted\n        val list22 = list21.tail.sorted\n        val list23 = list22.tail.sorted\n        val list24 = list23.tail.sorted\n        val list25 = list24.tail.sorted\n        val list26 = list25.tail.sorted\n        val list27 = list26.tail.sorted\n        val list28 = list27.tail.sorted\n        val list29 = list28.tail.sorted\n        val list30 = list29.tail.sorted\n        val list31 = list30.tail.sorted\n        val list32 = list31.tail.sorted\n        val list33 = list32.tail.sorted\n        val list34 = list33.tail.sorted\n        val list35 = list34.tail.sorted\n        val list36 = list35.tail.sorted\n        val list37 = list36.tail.sorted\n        val list38 = list37.tail.sorted\n        val list39 = list38.tail.sorted\n        val list40 = list39.tail.sorted\n        val list41 = list",
    "        val list2 = list1.sorted\n        list2(0) * list2(1)",
    "        val list2 = list1.sorted\n        list2(0) * list2(1)",
    "        val list2 = list1.sorted\n        list2(0) * list2(1)",
    "        var min = Long.MaxValue\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = list1(i) * list1(j)\n                if (product < min) min = product\n            }\n        }\n        min",
    "        val list2 = list1.sorted\n        list2.head * list2.tail.head",
    "        val list2 = list1.sorted\n        val list3 = list2.zip(list2.tail)\n        list3.map(x => x._1 * x._2).min",
    "        var min = Long.MaxValue\n        for (i <- 0 until list1.length) {\n            for (j <- i + 1 until list1.length) {\n                min = min min (list1(i) * list1(j))\n            }\n        }\n        return min",
    "        val list2 = list1.sorted\n        val list3 = list2.zipWithIndex.filter(x => x._2 % 2 == 0)\n        list3.map(x => x._1 * list2(list2.indexOf(x._1) + 1)).min",
    "        var min = Long.MaxValue\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = list1(i) * list1(j)\n                if (product < min) min = product\n            }\n        }\n        min",
    "        var min = Long.MaxValue\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                val product = list1(i) * list1(j)\n                if (product < min) min = product\n            }\n        }\n        min",
    "        val list2 = list1.sorted\n        list2(0) * list2(1)",
    "        var min = Long.MaxValue\n        for (i <- 0 until list1.size - 1) {\n            for (j <- i + 1 until list1.size) {\n                min = min min (list1(i) * list1(j))\n            }\n        }\n        min",
    "        val list2 = list1.sorted\n        list2(0) * list2(1)",
    "        val list2 = list1.sorted\n        list2(0) * list2(1)",
    "        val list2 = list1.sorted\n        list2.head * list2(1)",
    "        val list2 = list1.sorted\n        list2(0) * list2(1)",
    "        val list2 = list1.sorted\n        list2.head * list2.tail.head",
    "        var min = Long.MaxValue\n        for (i <- 0 until list1.length - 1) {\n            for (j <- i + 1 until list1.length) {\n                min = min min (list1(i) * list1(j))\n            }\n        }\n        min",
    "        val list2 = list1.sorted\n        list2.zip(list2.tail).map(x => x._1 * x._2).min"
  ]
}