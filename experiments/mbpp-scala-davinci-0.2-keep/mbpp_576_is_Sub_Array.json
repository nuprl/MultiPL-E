{
  "name": "mbpp_576_is_Sub_Array",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether a list is sublist of another or not.\n    def isSubArray(A : List[Long], B : List[Long]) : Boolean = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_576_is_Sub_Array.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(isSubArray((List[Long](1l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)), (List[Long](1l.toLong, 2l.toLong))) == (false));\n    assert(isSubArray((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (true));\n    assert(isSubArray((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 2l.toLong)), (List[Long](2l.toLong, 2l.toLong, 0l.toLong))) == (false));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        if (A.length > B.length) return false\n        for (i <- 0 to B.length - A.length) {\n            if (A == B.slice(i, i + A.length)) return true\n        }\n        return false",
    "        if (A.length > B.length) return false\n        for (i <- 0 to B.length - A.length) {\n            if (A == B.slice(i, i + A.length)) return true\n        }\n        return false",
    "        var i = 0\n        var j = 0\n        while (i < A.length && j < B.length) {\n            if (A(i) == B(j)) {\n                i += 1\n                j += 1\n            } else {\n                i = i - j + 1\n                j = 0\n            }\n        }\n        if (j == B.length) true else false",
    "        if (A.length > B.length) return false\n        for (i <- 0 to B.length - A.length) {\n            var flag = true\n            for (j <- 0 to A.length - 1) {\n                if (A(j) != B(i + j)) {\n                    flag = false\n                    break\n                }\n            }\n            if (flag) return true\n        }\n        return false",
    "        var i = 0\n        var j = 0\n        while (i < A.length && j < B.length) {\n            if (A(i) == B(j)) {\n                i += 1\n                j += 1\n            }\n            else {\n                i = i - j + 1\n                j = 0\n            }\n        }\n        if (j == B.length) true else false",
    "        var i = 0\n        var j = 0\n        while (i < A.length && j < B.length) {\n            if (A(i) == B(j)) {\n                i += 1\n                j += 1\n            } else {\n                i = i - j + 1\n                j = 0\n            }\n        }\n        if (j == B.length) return true\n        return false",
    "        val n = A.length\n        val m = B.length\n        if (n > m) false\n        else {\n            val a = A.toArray\n            val b = B.toArray\n            var i = 0\n            var j = 0\n            while (i < n && j < m) {\n                if (a(i) == b(j)) {\n                    i += 1\n                    j += 1\n                }\n                else {\n                    i = 0\n                    j += 1\n                }\n            }\n            if (i == n) true\n            else false\n        }",
    "        var i = 0\n        var j = 0\n        while (i < A.length && j < B.length) {\n            if (A(i) == B(j)) {\n                i += 1\n                j += 1\n            } else {\n                i = i - j + 1\n                j = 0\n            }\n        }\n        if (j == B.length) true else false",
    "        var i = 0\n        var j = 0\n        while (i < A.length && j < B.length) {\n            if (A(i) == B(j)) {\n                i += 1\n                j += 1\n            } else {\n                i = i - j + 1\n                j = 0\n            }\n        }\n        if (j == B.length) true else false",
    "        if (A.length > B.length) false\n        else {\n            var i = 0\n            var j = 0\n            while (i < A.length && j < B.length) {\n                if (A(i) == B(j)) {\n                    i += 1\n                    j += 1\n                }\n                else {\n                    i = 0\n                    j += 1\n                }\n            }\n            if (i == A.length) true\n            else false\n        }",
    "        if (A.length == 0) return true\n        if (B.length == 0) return false\n        if (A.length > B.length) return false\n        var i = 0\n        var j = 0\n        while (i < A.length && j < B.length) {\n            if (A(i) == B(j)) {\n                i += 1\n                j += 1\n            } else {\n                j += 1\n            }\n        }\n        return i == A.length",
    "        if (A.length > B.length) false\n        else {\n            val m = A.length\n            val n = B.length\n            for (i <- 0 to n - m) {\n                var j = 0\n                while (j < m) {\n                    if (B(i + j) != A(j)) j = m\n                    else j += 1\n                }\n                if (j == m) return true\n            }\n            false\n        }",
    "        if (A.length > B.length) return false\n        for (i <- 0 to B.length - A.length) {\n            if (A == B.slice(i, i + A.length)) return true\n        }\n        false",
    "        if (A.length > B.length) return false\n        for (i <- 0 to B.length - A.length) {\n            if (A.zip(B.slice(i, i + A.length)).forall(x => x._1 == x._2)) return true\n        }\n        return false",
    "        if (A.length > B.length) return false\n        for (i <- 0 to B.length - A.length) {\n            if (A == B.slice(i, i + A.length)) return true\n        }\n        return false",
    "        val n = A.length\n        val m = B.length\n        var i = 0\n        var j = 0\n        while (i < n && j < m) {\n            if (A(i) == B(j)) {\n                i += 1\n                j += 1\n            } else {\n                i = i - j + 1\n                j = 0\n            }\n        }\n        if (j == m) true else false",
    "        if (A.length < B.length) return false\n        for (i <- 0 to A.length - B.length) {\n            var flag = true\n            for (j <- 0 to B.length - 1) {\n                if (A(i + j) != B(j)) {\n                    flag = false\n                    break\n                }\n            }\n            if (flag) return true\n        }\n        false",
    "        if (A.length > B.length) return false\n        for (i <- 0 to B.length - A.length) {\n            if (A == B.slice(i, i + A.length)) return true\n        }\n        return false",
    "        if (A.length > B.length) false\n        else {\n            var i = 0\n            var j = 0\n            while (i < A.length && j < B.length) {\n                if (A(i) == B(j)) {\n                    i += 1\n                    j += 1\n                }\n                else {\n                    i = 0\n                    j += 1\n                }\n            }\n            if (i == A.length) true\n            else false\n        }",
    "        for (i <- 0 until A.length - B.length + 1) {\n            var j = 0\n            while (j < B.length && A(i + j) == B(j)) j += 1\n            if (j == B.length) return true\n        }\n        return false"
  ]
}