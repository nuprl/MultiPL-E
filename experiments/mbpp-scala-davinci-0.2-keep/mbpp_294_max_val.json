{
  "name": "mbpp_294_max_val",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum value in a given heterogeneous list.\n    def maxVal(listval : List[Either[String, Long]]) : Long = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_294_max_val.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(maxVal((List[Either[String, Long]](\"Python\", 3l, 2l, 4l, 5l, \"version\"))) == (5l));\n    assert(maxVal((List[Either[String, Long]](\"Python\", 15l, 20l, 25l))) == (25l));\n    assert(maxVal((List[Either[String, Long]](\"Python\", 30l, 20l, 40l, 50l, \"version\"))) == (50l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        listval.map(x => x match {\n            case Left(x) => 0\n            case Right(x) => x\n        }).max",
    "        var max : Long = 0\n        for (i <- listval) {\n            i match {\n                case Left(x) => {\n                    if (x.toLong > max) max = x.toLong\n                }\n                case Right(x) => {\n                    if (x > max) max = x\n                }\n            }\n        }\n        max",
    "        listval.filter(x => x.isRight).map(x => x.right.get).max",
    "      var max : Long = 0\n      for (i <- listval) {\n        i match {\n          case Left(s) => {\n            val l = s.toLong\n            if (l > max) max = l\n          }\n          case Right(l) => {\n            if (l > max) max = l\n          }\n        }\n      }\n      max",
    "        if (listval.isEmpty) 0\n        else {\n            val max = listval.map(x => x match {\n                case Left(s) => 0\n                case Right(l) => l\n            }).max\n            max\n        }",
    "        listval.map(x => x match {\n            case Left(s) => 0\n            case Right(l) => l\n        }).max",
    "        var max : Long = 0\n        for (i <- listval) {\n            i match {\n                case Left(s) => {\n                    val l = s.toLong\n                    if (l > max) max = l\n                }\n                case Right(l) => {\n                    if (l > max) max = l\n                }\n            }\n        }\n        max",
    "        var max : Long = 0\n        for (i <- listval) {\n            i match {\n                case Left(s) => {\n                    if (max < s.length) max = s.length\n                }\n                case Right(l) => {\n                    if (max < l) max = l\n                }\n            }\n        }\n        return max",
    "        var max : Long = 0\n        listval.foreach(x => {\n            x match {\n                case Left(y) => {\n                    if (y.length > max) max = y.length\n                }\n                case Right(y) => {\n                    if (y > max) max = y\n                }\n            }\n        })\n        return max",
    "        var max : Long = 0\n        for (i <- listval) {\n            i match {\n                case Left(s) => {\n                    val num = s.toLong\n                    if (num > max) max = num\n                }\n                case Right(l) => {\n                    if (l > max) max = l\n                }\n            }\n        }\n        max",
    "        listval.map(x => x match {\n            case Left(s) => 0\n            case Right(l) => l\n        }).max",
    "        var max : Long = 0\n        for (i <- listval) {\n            i match {\n                case Left(s) => {\n                    if (s.toLong > max) max = s.toLong\n                }\n                case Right(l) => {\n                    if (l > max) max = l\n                }\n            }\n        }\n        return max",
    "        listval.map(x => x match {\n            case Left(x) => 0\n            case Right(x) => x\n        }).max",
    "        listval.foldLeft(0L)((acc, x) => x match {\n            case Left(s) => acc\n            case Right(l) => max(acc, l)\n        })",
    "        var max : Long = 0\n        for (i <- listval) {\n            i match {\n                case Left(s) => {\n                    val num = s.toLong\n                    if (num > max) max = num\n                }\n                case Right(l) => {\n                    if (l > max) max = l\n                }\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- listval) {\n            i match {\n                case Left(x) => {\n                    val num = x.toLong\n                    if (num > max) max = num\n                }\n                case Right(x) => {\n                    if (x > max) max = x\n                }\n            }\n        }\n        max",
    "        listval.map(x => x match {\n            case Left(x) => 0\n            case Right(x) => x\n        }).max",
    "        listval.map(x => x match {\n            case Left(x) => 0\n            case Right(x) => x\n        }).max",
    "        listval.map(x => x match {\n            case Left(s) => 0\n            case Right(l) => l\n        }).max",
    "        var max : Long = 0\n        for (elem <- listval) {\n            elem match {\n                case Left(str) => {\n                    val num = str.toLong\n                    if (num > max) max = num\n                }\n                case Right(num) => {\n                    if (num > max) max = num\n                }\n            }\n        }\n        max"
  ]
}