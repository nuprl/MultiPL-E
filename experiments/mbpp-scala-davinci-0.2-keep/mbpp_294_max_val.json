{
  "name": "mbpp_294_max_val",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum value in a given heterogeneous list.\n    def maxVal(listval : List[Either[String, Long]]) : Long = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_294_max_val.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(maxVal((List[Either[String, Long]](\"Python\", 3l, 2l, 4l, 5l, \"version\"))) == (5l));\n    assert(maxVal((List[Either[String, Long]](\"Python\", 15l, 20l, 25l))) == (25l));\n    assert(maxVal((List[Either[String, Long]](\"Python\", 30l, 20l, 40l, 50l, \"version\"))) == (50l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        listval.map(x => x match {\n            case Left(x) => 0\n            case Right(x) => x\n        }).max",
    "        var max : Long = 0\n        for (i <- listval) {\n            i match {\n                case Left(x) => {\n                    if (x.toLong > max) max = x.toLong\n                }\n                case Right(x) => {\n                    if (x > max) max = x\n                }\n            }\n        }\n        max",
    "        listval.filter(x => x.isRight).map(x => x.right.get).max",
    "      var max : Long = 0\n      for (i <- listval) {\n        i match {\n          case Left(s) => {\n            val l = s.toLong\n            if (l > max) max = l\n          }\n          case Right(l) => {\n            if (l > max) max = l\n          }\n        }\n      }\n      max",
    "        if (listval.isEmpty) 0\n        else {\n            val max = listval.map(x => x match {\n                case Left(s) => 0\n                case Right(l) => l\n            }).max\n            max\n        }",
    "        listval.map(x => x match {\n            case Left(s) => 0\n            case Right(l) => l\n        }).max",
    "        var max : Long = 0\n        for (i <- listval) {\n            i match {\n                case Left(s) => {\n                    val l = s.toLong\n                    if (l > max) max = l\n                }\n                case Right(l) => {\n                    if (l > max) max = l\n                }\n            }\n        }\n        max",
    "        var max : Long = 0\n        for (i <- listval) {\n            i match {\n                case Left(s) => {\n                    if (max < s.length) max = s.length\n                }\n                case Right(l) => {\n                    if (max < l) max = l\n                }\n            }\n        }\n        return max",
    "        var max : Long = 0\n        listval.foreach(x => {\n            x match {\n                case Left(y) => {\n                    if (y.length > max) max = y.length\n                }\n                case Right(y) => {\n                    if (y > max) max = y\n                }\n            }\n        })\n        return max",
    "        var max : Long = 0\n        for (i <- listval) {\n            i match {\n                case Left(s) => {\n                    val num = s.toLong\n                    if (num > max) max = num\n                }\n                case Right(l) => {\n                    if (l > max) max = l\n                }\n            }\n        }\n        max",
    "        listval.map(x => x match {\n            case Left(s) => 0\n            case Right(l) => l\n        }).max",
    "        var max : Long = 0\n        for (i <- listval) {\n            i match {\n                case Left(s) => {\n                    if (s.toLong > max) max = s.toLong\n                }\n                case Right(l) => {\n                    if (l > max) max = l\n                }\n            }\n        }\n        return max",
    "        listval.map(x => x match {\n            case Left(x) => 0\n            case Right(x) => x\n        }).max",
    "        listval.foldLeft(0L)((acc, x) => x match {\n            case Left(s) => acc\n            case Right(l) => max(acc, l)\n        })",
    "        var max : Long = 0\n        for (i <- listval) {\n            i match {\n                case Left(s) => {\n                    val num = s.toLong\n                    if (num > max) max = num\n                }\n                case Right(l) => {\n                    if (l > max) max = l\n                }\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- listval) {\n            i match {\n                case Left(x) => {\n                    val num = x.toLong\n                    if (num > max) max = num\n                }\n                case Right(x) => {\n                    if (x > max) max = x\n                }\n            }\n        }\n        max",
    "        listval.map(x => x match {\n            case Left(x) => 0\n            case Right(x) => x\n        }).max",
    "        listval.map(x => x match {\n            case Left(x) => 0\n            case Right(x) => x\n        }).max",
    "        listval.map(x => x match {\n            case Left(s) => 0\n            case Right(l) => l\n        }).max",
    "        var max : Long = 0\n        for (elem <- listval) {\n            elem match {\n                case Left(str) => {\n                    val num = str.toLong\n                    if (num > max) max = num\n                }\n                case Right(num) => {\n                    if (num > max) max = num\n                }\n            }\n        }\n        max",
    "        var max : Long = 0\n        for (i <- listval) {\n            i match {\n                case Left(x) => {\n                    println(\"String\")\n                }\n                case Right(x) => {\n                    if (x > max) max = x\n                }\n            }\n        }\n        max",
    "        var max : Long = 0\n        for (i <- listval) {\n            i match {\n                case Left(s) => {\n                    if (s.toLong > max) max = s.toLong\n                }\n                case Right(l) => {\n                    if (l > max) max = l\n                }\n            }\n        }\n        max",
    "        listval.map(x => x match {\n            case Left(s) => 0\n            case Right(l) => l\n        }).max",
    "        listval.map(x => x match {\n            case Left(s) => 0\n            case Right(l) => l\n        }).max",
    "        var max : Long = 0\n        for (i <- listval) {\n            i match {\n                case Left(s) => {\n                    if (s.length > max) max = s.length\n                }\n                case Right(l) => {\n                    if (l > max) max = l\n                }\n            }\n        }\n        return max",
    "        var max : Long = 0\n        for (i <- listval) {\n            i match {\n                case Left(s) => {\n                    if (s.length > max) max = s.length\n                }\n                case Right(l) => {\n                    if (l > max) max = l\n                }\n            }\n        }\n        max",
    "        var max : Long = 0\n        for (i <- listval) {\n            i match {\n                case Left(s) => println(\"String value found\")\n                case Right(l) => if (l > max) max = l\n            }\n        }\n        return max",
    "        listval.map(x => x match {\n            case Left(s) => 0\n            case Right(l) => l\n        }).max",
    "        val list = listval.filter(_.isRight).map(_.right.get)\n        list.max",
    "        listval.map(x => x match {\n            case Left(x) => 0\n            case Right(x) => x\n        }).max",
    "        var max : Long = 0\n        for (i <- listval) {\n            i match {\n                case Left(s) => {\n                    val n = s.toLong\n                    if (n > max) max = n\n                }\n                case Right(n) => {\n                    if (n > max) max = n\n                }\n            }\n        }\n        return max",
    "        var max = 0L\n        for (i <- listval) {\n            i match {\n                case Left(s) => {\n                    val num = s.toLong\n                    if (num > max) max = num\n                }\n                case Right(n) => {\n                    if (n > max) max = n\n                }\n            }\n        }\n        max",
    "        val list = listval.filter(_.isRight).map(_.right.get)\n        if (list.isEmpty) 0 else list.max",
    "        var max = 0L\n        for (i <- listval) {\n            i match {\n                case Left(s) => {\n                    val l = s.toLong\n                    if (l > max) max = l\n                }\n                case Right(l) => {\n                    if (l > max) max = l\n                }\n            }\n        }\n        max",
    "        listval.map(x => x match {\n            case Left(x) => 0\n            case Right(x) => x\n        }).max",
    "        var max : Long = 0\n        for (i <- listval) {\n            i match {\n                case Left(s) => {\n                    if (s.toLong > max) max = s.toLong\n                }\n                case Right(l) => {\n                    if (l > max) max = l\n                }\n            }\n        }\n        max",
    "        listval.map(x => x match {\n            case Left(x) => 0\n            case Right(x) => x\n        }).max",
    "        listval.map(x => x match {\n            case Left(s) => 0\n            case Right(l) => l\n        }).max",
    "        listval.map(x => x match {\n            case Left(s) => 0\n            case Right(l) => l\n        }).max",
    "        var max : Long = 0\n        for (i <- listval) {\n            i match {\n                case Left(x) => {\n                    if (x.toLong > max) max = x.toLong\n                }\n                case Right(x) => {\n                    if (x > max) max = x\n                }\n            }\n        }\n        return max",
    "        var max : Long = 0\n        for (i <- listval) {\n            i match {\n                case Left(s) => {\n                    if (s.length > max) max = s.length\n                }\n                case Right(l) => {\n                    if (l > max) max = l\n                }\n            }\n        }\n        return max",
    "        var max : Long = 0\n        listval.foreach(x => x match {\n            case Left(s) =>\n            case Right(l) => if (l > max) max = l\n        })\n        max",
    "        listval.map(x => x match {\n            case Left(x) => 0\n            case Right(x) => x\n        }).max",
    "        listval.map(x => x match {\n            case Left(x) => 0\n            case Right(x) => x\n        }).max",
    "        var max : Long = 0\n        for (i <- listval) {\n            i match {\n                case Left(s) => {\n                    if (s.toLong > max) max = s.toLong\n                }\n                case Right(l) => {\n                    if (l > max) max = l\n                }\n            }\n        }\n        max",
    "        var max : Long = 0\n        for (i <- listval) {\n            i match {\n                case Left(s) => {\n                    val n = s.toLong\n                    if (n > max) max = n\n                }\n                case Right(n) => {\n                    if (n > max) max = n\n                }\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- listval) {\n            i match {\n                case Left(s) => {\n                    if (s.length > max) max = s.length\n                }\n                case Right(l) => {\n                    if (l > max) max = l\n                }\n            }\n        }\n        return max",
    "        var max : Long = 0\n        for (i <- listval) {\n            i match {\n                case Left(s) => {\n                    if (max < s.length) max = s.length\n                }\n                case Right(l) => {\n                    if (max < l) max = l\n                }\n            }\n        }\n        return max",
    "        listval.map(x => x match {\n            case Left(s) => 0\n            case Right(l) => l\n        }).max",
    "        listval.filter(x => x.isRight).map(x => x.right.get).max",
    "        var max : Long = 0\n        for (i <- listval) {\n            i match {\n                case Left(s) => {\n                    val num = s.toLong\n                    if (num > max) max = num\n                }\n                case Right(l) => {\n                    if (l > max) max = l\n                }\n            }\n        }\n        return max",
    "        var max = 0L\n        for (i <- listval) {\n            i match {\n                case Left(s) => {\n                    val x = s.toLong\n                    if (x > max) max = x\n                }\n                case Right(l) => {\n                    if (l > max) max = l\n                }\n            }\n        }\n        max",
    "        listval.collect {\n            case Right(x) => x\n        }.max",
    "        var max = 0L\n        for (i <- listval) {\n            i match {\n                case Left(s) => {\n                    if (s.toLong > max) max = s.toLong\n                }\n                case Right(l) => {\n                    if (l > max) max = l\n                }\n            }\n        }\n        max",
    "        listval.map(x => x match {\n            case Left(x) => 0\n            case Right(x) => x\n        }).max",
    "        var max : Long = Long.MinValue\n        for (i <- listval) {\n            i match {\n                case Left(s) => max = max\n                case Right(l) => max = max(max, l)\n            }\n        }\n        return max",
    "        var max : Long = 0\n        for (i <- listval) {\n            i match {\n                case Left(s) => max = max\n                case Right(l) => max = max(max, l)\n            }\n        }\n        return max",
    "        var max = 0L\n        listval.foreach(x => {\n            x match {\n                case Left(s) => {\n                    if (s.length > max) max = s.length\n                }\n                case Right(l) => {\n                    if (l > max) max = l\n                }\n            }\n        })\n        max",
    "        var max : Long = 0\n        for (i <- 0 until listval.length) {\n            if (listval(i).isRight) {\n                if (listval(i).right.get > max) {\n                    max = listval(i).right.get\n                }\n            }\n        }\n        max",
    "        var max = Long.MinValue\n        for (i <- listval) {\n            i match {\n                case Left(s) => {\n                    val num = s.toLong\n                    if (num > max) max = num\n                }\n                case Right(l) => {\n                    if (l > max) max = l\n                }\n            }\n        }\n        max",
    "        var max : Long = 0\n        for (i <- listval) {\n            i match {\n                case Left(s) => {\n                    val num = s.toLong\n                    if (num > max) max = num\n                }\n                case Right(l) => {\n                    if (l > max) max = l\n                }\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- listval) {\n            i match {\n                case Left(s) => {\n                    val num = s.toLong\n                    if (num > max) max = num\n                }\n                case Right(l) => {\n                    if (l > max) max = l\n                }\n            }\n        }\n        max",
    "        listval.map(x => x match {\n            case Left(s) => 0\n            case Right(l) => l\n        }).max",
    "        var max : Long = 0\n        for (i <- listval) {\n            i match {\n                case Left(s) => max = max\n                case Right(l) => if (l > max) max = l\n            }\n        }\n        return max",
    "        listval.map(x => x match {\n            case Left(s) => 0\n            case Right(l) => l\n        }).max",
    "        listval.map(x => x match {\n            case Left(x) => 0\n            case Right(x) => x\n        }).max",
    "        var max : Long = 0\n        for (i <- listval) {\n            i match {\n                case Left(x) => {\n                    println(x)\n                }\n                case Right(x) => {\n                    if (x > max) max = x\n                }\n            }\n        }\n        max",
    "        listval.map(x => x match {\n            case Left(x) => 0\n            case Right(x) => x\n        }).max",
    "        listval.foldLeft(0L)((a, b) => b match {\n            case Left(x) => a\n            case Right(x) => max(a, x)\n        })",
    "        listval.map(x => x match {\n            case Left(x) => 0\n            case Right(x) => x\n        }).max",
    "        var max : Long = 0\n        for (i <- listval) {\n            i match {\n                case Left(s) => {\n                    if (s.length > max) max = s.length\n                }\n                case Right(l) => {\n                    if (l > max) max = l\n                }\n            }\n        }\n        max",
    "        var max : Long = 0\n        for (i <- listval) {\n            if (i.isRight) {\n                if (i.right.get > max) max = i.right.get\n            }\n        }\n        max",
    "        listval.map(x => x match {\n            case Left(x) => 0\n            case Right(x) => x\n        }).max",
    "        var max : Long = 0\n        for (i <- listval) {\n            i match {\n                case Left(s) => {\n                    if (s.toLong > max) max = s.toLong\n                }\n                case Right(l) => {\n                    if (l > max) max = l\n                }\n            }\n        }\n        max",
    "        var max : Long = 0\n        for(i <- listval) {\n            i match {\n                case Left(s) => {\n                    if(s.toLong > max) max = s.toLong\n                }\n                case Right(l) => {\n                    if(l > max) max = l\n                }\n            }\n        }\n        return max",
    "        listval.map(x => x match {\n            case Left(x) => 0\n            case Right(x) => x\n        }).max",
    "        var max = 0L\n        for (i <- listval) {\n            i match {\n                case Left(s) => {\n                    val l = s.toLong\n                    if (l > max) max = l\n                }\n                case Right(l) => {\n                    if (l > max) max = l\n                }\n            }\n        }\n        max",
    "        var max : Long = 0\n        for (i <- listval) {\n            if (i.isRight) {\n                if (i.right.get > max) max = i.right.get\n            }\n        }\n        return max",
    "        var max : Long = 0\n        for (i <- listval) {\n            i match {\n                case Left(s) => println(s)\n                case Right(l) => if (l > max) max = l\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- listval) {\n            i match {\n                case Left(s) => {\n                    val num = s.toLong\n                    if (num > max) max = num\n                }\n                case Right(num) => {\n                    if (num > max) max = num\n                }\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- listval) {\n            i match {\n                case Left(s) => {\n                    val v = s.toLong\n                    if (v > max) max = v\n                }\n                case Right(v) => {\n                    if (v > max) max = v\n                }\n            }\n        }\n        max",
    "        var max : Long = 0\n        for (elem <- listval) {\n            elem match {\n                case Left(str) => {\n                    val num = str.toLong\n                    if (num > max) max = num\n                }\n                case Right(num) => {\n                    if (num > max) max = num\n                }\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- listval) {\n            i match {\n                case Left(s) => {\n                    if (s.length > max) max = s.length\n                }\n                case Right(l) => {\n                    if (l > max) max = l\n                }\n            }\n        }\n        max",
    "        listval.filter(_.isRight).map(_.right.get).max",
    "        listval.map(x => x match {\n            case Left(s) => 0\n            case Right(l) => l\n        }).max",
    "        listval.map(x => x match {\n            case Left(s) => 0\n            case Right(l) => l\n        }).max",
    "        var max : Long = 0\n        for (i <- listval) {\n            i match {\n                case Left(s) => {\n                    val num = s.toLong\n                    if (num > max) max = num\n                }\n                case Right(l) => {\n                    if (l > max) max = l\n                }\n            }\n        }\n        max",
    "        var max : Long = 0\n        for (i <- listval) {\n            i match {\n                case Left(s) => {\n                    if (s.toLong > max) max = s.toLong\n                }\n                case Right(l) => {\n                    if (l > max) max = l\n                }\n            }\n        }\n        max",
    "        var max = 0L\n        listval.foreach(x => x match {\n            case Left(s) =>\n            case Right(l) => if (l > max) max = l\n        })\n        max",
    "        var max = 0L\n        for (i <- listval) {\n            i match {\n                case Left(s) => {\n                    val num = s.toLong\n                    if (num > max) max = num\n                }\n                case Right(l) => {\n                    if (l > max) max = l\n                }\n            }\n        }\n        max",
    "        listval.map(x => x match {\n            case Left(x) => 0\n            case Right(x) => x\n        }).max",
    "        var max : Long = 0\n        for (i <- listval) {\n            i match {\n                case Left(s) => {\n                    if (s.toLong > max) max = s.toLong\n                }\n                case Right(l) => {\n                    if (l > max) max = l\n                }\n            }\n        }\n        max",
    "        var max : Long = 0\n        for (i <- listval) {\n            i match {\n                case Left(s) => {\n                    if (s.toLong > max) max = s.toLong\n                }\n                case Right(l) => {\n                    if (l > max) max = l\n                }\n            }\n        }\n        return max",
    "        listval.map(x => x match {\n            case Left(s) => 0\n            case Right(l) => l\n        }).max",
    "        var maxVal = 0L\n        for (i <- listval) {\n            i match {\n                case Left(s) => {\n                    val num = s.toLong\n                    if (num > maxVal) maxVal = num\n                }\n                case Right(num) => {\n                    if (num > maxVal) maxVal = num\n                }\n            }\n        }\n        maxVal",
    "        listval.foldLeft(0L)((max, e) => e match {\n            case Left(s) => max\n            case Right(l) => max max l\n        })",
    "        var max : Long = 0\n        for (i <- listval) {\n            i match {\n                case Left(s) => {\n                    if (s.length > max) max = s.length\n                }\n                case Right(l) => {\n                    if (l > max) max = l\n                }\n            }\n        }\n        max",
    "        listval.foldLeft(0L)((x, y) => y match {\n            case Left(s) => x\n            case Right(l) => max(x, l)\n        })",
    "        listval.map(x => x match {\n            case Left(s) => s.toLong\n            case Right(l) => l\n        }).max",
    "        var max : Long = 0\n        for (i <- listval) {\n            i match {\n                case Left(x) => {\n                    if (x.toLong > max) max = x.toLong\n                }\n                case Right(x) => {\n                    if (x > max) max = x\n                }\n            }\n        }\n        return max",
    "        listval.filter(_.isRight).map(_.right.get).max",
    "        var max : Long = 0\n        listval.foreach(x => x match {\n            case Left(s) => {\n                val num = s.toLong\n                if (num > max) max = num\n            }\n            case Right(l) => {\n                if (l > max) max = l\n            }\n        })\n        max",
    "        listval.filter(_.isRight).map(_.right.get).max",
    "        var max : Long = 0\n        for (i <- listval) {\n            i match {\n                case Left(x) => {\n                    val v = x.toLong\n                    if (v > max) max = v\n                }\n                case Right(x) => {\n                    if (x > max) max = x\n                }\n            }\n        }\n        max",
    "        var max : Long = 0\n        for (i <- listval) {\n            i match {\n                case Left(s) => {\n                    val l = s.toLong\n                    if (l > max) max = l\n                }\n                case Right(l) => {\n                    if (l > max) max = l\n                }\n            }\n        }\n        max",
    "        var max : Long = 0\n        for (i <- listval) {\n            i match {\n                case Left(s) => max = max\n                case Right(l) => if (l > max) max = l\n            }\n        }\n        max",
    "        var max : Long = 0\n        for (i <- listval) {\n            i match {\n                case Left(x) => {\n                    if (max < x.length) max = x.length\n                }\n                case Right(x) => {\n                    if (max < x) max = x\n                }\n            }\n        }\n        return max",
    "        listval.map(x => x match {\n            case Left(x) => 0\n            case Right(x) => x\n        }).max",
    "        var maxval = Long.MinValue\n        for (i <- listval) {\n            i match {\n                case Left(s) => {\n                    val l = s.toLong\n                    if (l > maxval) maxval = l\n                }\n                case Right(l) => {\n                    if (l > maxval) maxval = l\n                }\n            }\n        }\n        maxval",
    "        listval.map(x => x match {\n            case Left(s) => 0\n            case Right(l) => l\n        }).max",
    "        var max : Long = 0\n        listval.foreach(x => {\n            x match {\n                case Left(s) => {\n                    if (max < s.toLong) max = s.toLong\n                }\n                case Right(l) => {\n                    if (max < l) max = l\n                }\n            }\n        })\n        max",
    "        var max : Long = 0\n        for (i <- listval) {\n            i match {\n                case Left(s) => {\n                    val num = s.toLong\n                    if (num > max) max = num\n                }\n                case Right(n) => {\n                    if (n > max) max = n\n                }\n            }\n        }\n        max",
    "        listval.map(x => x match {\n            case Left(x) => 0\n            case Right(x) => x\n        }).max",
    "        var max : Long = 0\n        for (i <- listval) {\n            i match {\n                case Left(s) => max = max\n                case Right(l) => if (l > max) max = l\n            }\n        }\n        return max",
    "        var max = Long.MinValue\n        for (i <- listval) {\n            i match {\n                case Left(s) => {\n                    val l = s.toLong\n                    if (l > max) max = l\n                }\n                case Right(l) => {\n                    if (l > max) max = l\n                }\n            }\n        }\n        max",
    "        listval.map(x => x match {\n            case Left(x) => 0\n            case Right(x) => x\n        }).max",
    "        listval.map(x => x match {\n            case Left(x) => 0\n            case Right(x) => x\n        }).max",
    "        listval.map(x => x match {\n            case Left(s) => 0\n            case Right(l) => l\n        }).max",
    "        var max : Long = 0\n        for (i <- listval) {\n            i match {\n                case Left(s) => {\n                    val num = s.toLong\n                    if (num > max) max = num\n                }\n                case Right(l) => {\n                    if (l > max) max = l\n                }\n            }\n        }\n        max",
    "        listval.map(x => x match {\n            case Left(s) => 0\n            case Right(l) => l\n        }).max",
    "        listval.filter(_.isRight).map(_.right.get).max",
    "        var max : Long = 0\n        for (i <- listval) {\n            i match {\n                case Left(s) => {\n                    if (s.toLong > max) {\n                        max = s.toLong\n                    }\n                }\n                case Right(l) => {\n                    if (l > max) {\n                        max = l\n                    }\n                }\n            }\n        }\n        max",
    "        listval.map(x => x match {\n            case Left(x) => 0\n            case Right(x) => x\n        }).max",
    "        var max : Long = 0\n        for (i <- listval) {\n            i match {\n                case Left(s) => {\n                    val num = s.toLong\n                    if (num > max) max = num\n                }\n                case Right(l) => {\n                    if (l > max) max = l\n                }\n            }\n        }\n        max",
    "        var max : Long = 0\n        for (i <- listval) {\n            i match {\n                case Left(s) => {\n                    val l = s.toLong\n                    if (l > max) max = l\n                }\n                case Right(l) => {\n                    if (l > max) max = l\n                }\n            }\n        }\n        max",
    "        var max : Long = 0\n        for (i <- listval) {\n            i match {\n                case Left(s) => {\n                    if (s.length > max) max = s.length\n                }\n                case Right(l) => {\n                    if (l > max) max = l\n                }\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- listval) {\n            i match {\n                case Left(s) => {\n                    val num = s.toLong\n                    if (num > max) max = num\n                }\n                case Right(num) => {\n                    if (num > max) max = num\n                }\n            }\n        }\n        max",
    "        val list = listval.filter(x => x.isRight)\n        list.map(x => x.right.get).max",
    "        listval.map(x => x match {\n            case Left(x) => 0\n            case Right(x) => x\n        }).max",
    "        var max : Long = 0\n        for (i <- listval) {\n            i match {\n                case Left(s) =>\n                case Right(l) => if (l > max) max = l\n            }\n        }\n        max",
    "        listval.map(x => x match {\n            case Left(s) => 0\n            case Right(l) => l\n        }).max",
    "        listval.map(x => x match {\n            case Left(x) => 0\n            case Right(x) => x\n        }).max",
    "        var max : Long = 0\n        for (i <- listval) {\n            i match {\n                case Left(x) => {\n                    val num = x.toLong\n                    if (num > max) max = num\n                }\n                case Right(x) => {\n                    if (x > max) max = x\n                }\n            }\n        }\n        return max",
    "        var max : Long = 0\n        for (i <- listval) {\n            i match {\n                case Left(x) => {\n                    max = max\n                }\n                case Right(x) => {\n                    if (x > max) max = x\n                }\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- listval) {\n            i match {\n                case Left(s) => {\n                    if (s.toLong > max) max = s.toLong\n                }\n                case Right(l) => {\n                    if (l > max) max = l\n                }\n            }\n        }\n        max",
    "        var max : Long = 0\n        for (i <- listval) {\n            i match {\n                case Left(s) => {\n                    val l = s.toLong\n                    if (l > max) max = l\n                }\n                case Right(l) => {\n                    if (l > max) max = l\n                }\n            }\n        }\n        max",
    "        val list = listval.filter(_.isRight).map(_.right.get)\n        list.max",
    "        var max : Long = 0\n        for (i <- listval) {\n            if (i.isRight) {\n                if (i.right.get > max) max = i.right.get\n            }\n        }\n        max",
    "        var max : Long = 0\n        for (i <- listval) {\n            i match {\n                case Left(s) => {\n                    if (s.length > max) max = s.length\n                }\n                case Right(l) => {\n                    if (l > max) max = l\n                }\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- listval) {\n            i match {\n                case Left(s) => {\n                    if (s.length > max) max = s.length\n                }\n                case Right(l) => {\n                    if (l > max) max = l\n                }\n            }\n        }\n        max",
    "        listval.map(x => x match {\n            case Left(x) => 0\n            case Right(x) => x\n        }).max",
    "        var max : Long = 0\n        for (i <- listval) {\n            if (i.isRight) {\n                if (i.right.get > max) {\n                    max = i.right.get\n                }\n            }\n        }\n        return max",
    "        listval.map(x => x match {\n            case Left(x) => 0\n            case Right(x) => x\n        }).max",
    "        var max : Long = 0\n        for (i <- listval) {\n            i match {\n                case Left(s) => {\n                    val num = s.toLong\n                    if (num > max) max = num\n                }\n                case Right(num) => {\n                    if (num > max) max = num\n                }\n            }\n        }\n        max",
    "        var max : Long = 0\n        for (i <- listval) {\n            i match {\n                case Left(s) => {\n                    if (s.toLong > max) max = s.toLong\n                }\n                case Right(l) => {\n                    if (l > max) max = l\n                }\n            }\n        }\n        max",
    "        var max : Long = 0\n        for (i <- listval) {\n            i match {\n                case Left(s) => {\n                    val num = s.toLong\n                    if (num > max) max = num\n                }\n                case Right(l) => {\n                    if (l > max) max = l\n                }\n            }\n        }\n        return max",
    "        var max = 0L\n        for (i <- listval) {\n            i match {\n                case Left(s) => {\n                    if (s.length > max) max = s.length\n                }\n                case Right(l) => {\n                    if (l > max) max = l\n                }\n            }\n        }\n        max",
    "        val list = listval.map(x => x match {\n            case Left(s) => 0\n            case Right(l) => l\n        })\n        list.max",
    "        var max : Long = 0\n        for (i <- listval) {\n            i match {\n                case Left(s) => {\n                    val l = s.toLong\n                    if (l > max) max = l\n                }\n                case Right(l) => {\n                    if (l > max) max = l\n                }\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- listval) {\n            i match {\n                case Left(s) => {\n                    if (s.toLong > max) max = s.toLong\n                }\n                case Right(l) => {\n                    if (l > max) max = l\n                }\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- listval) {\n            i match {\n                case Left(s) => {\n                    val num = s.toLong\n                    if (num > max) max = num\n                }\n                case Right(num) => if (num > max) max = num\n            }\n        }\n        max",
    "        listval.map(x => x match {\n            case Left(s) => 0\n            case Right(l) => l\n        }).max",
    "        var max : Long = 0\n        for (i <- listval) {\n            i match {\n                case Left(s) => {\n                    val num = s.toLong\n                    if (num > max) max = num\n                }\n                case Right(l) => {\n                    if (l > max) max = l\n                }\n            }\n        }\n        max",
    "        listval.map(x => x match {\n            case Left(s) => 0\n            case Right(l) => l\n        }).max",
    "        var max : Long = 0\n        for (value <- listval) {\n            value match {\n                case Left(x) => max = max\n                case Right(x) => max = max(max, x)\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- listval) {\n            i match {\n                case Left(s) => {\n                    val num = s.toLong\n                    if (num > max) max = num\n                }\n                case Right(n) => {\n                    if (n > max) max = n\n                }\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- listval) {\n            i match {\n                case Left(s) => {\n                    val num = s.toLong\n                    if (num > max) max = num\n                }\n                case Right(l) => {\n                    if (l > max) max = l\n                }\n            }\n        }\n        max",
    "        listval.map(x => x match {\n            case Left(x) => 0\n            case Right(x) => x\n        }).max",
    "        listval.foldLeft(0L)((x, y) => {\n            y match {\n                case Left(s) => x\n                case Right(l) => max(x, l)\n            }\n        })",
    "        listval.map(x => x match {\n            case Left(s) => 0\n            case Right(l) => l\n        }).max",
    "        var max : Long = 0\n        for (i <- listval) {\n            i match {\n                case Left(x) => {\n                    println(\"String: \" + x)\n                }\n                case Right(x) => {\n                    if (x > max) max = x\n                }\n            }\n        }\n        return max",
    "        var max : Long = 0\n        for (i <- listval) {\n            i match {\n                case Left(s) => {}\n                case Right(l) => {\n                    if (l > max) max = l\n                }\n            }\n        }\n        max",
    "        listval.map(x => x match {\n            case Left(s) => 0\n            case Right(l) => l\n        }).max",
    "        var max : Long = 0\n        for (i <- listval) {\n            i match {\n                case Left(s) => {\n                    val l = s.toLong\n                    if (l > max) max = l\n                }\n                case Right(l) => {\n                    if (l > max) max = l\n                }\n            }\n        }\n        return max",
    "        var max : Long = 0\n        for (i <- listval) {\n            i match {\n                case Left(s) => {\n                    if (s.length > max) max = s.length\n                }\n                case Right(l) => {\n                    if (l > max) max = l\n                }\n            }\n        }\n        return max",
    "        var max = 0L\n        for (i <- listval) {\n            i match {\n                case Left(s) => {\n                    if (s.length > max) max = s.length\n                }\n                case Right(l) => {\n                    if (l > max) max = l\n                }\n            }\n        }\n        max",
    "        listval.map(x => x match {\n            case Left(x) => 0\n            case Right(x) => x\n        }).max",
    "        var max = 0L\n        for (i <- listval) {\n            i match {\n                case Left(x) => {\n                    if (x.length > max) max = x.length\n                }\n                case Right(x) => {\n                    if (x > max) max = x\n                }\n            }\n        }\n        max",
    "        listval.map(x => x match {\n            case Left(x) => 0\n            case Right(x) => x\n        }).max",
    "        var max : Long = 0\n        for (i <- listval) {\n            i match {\n                case Left(s) => {\n                    val v = s.toLong\n                    if (v > max) max = v\n                }\n                case Right(v) => {\n                    if (v > max) max = v\n                }\n            }\n        }\n        max",
    "        listval.map(x => x match {\n            case Left(s) => 0\n            case Right(l) => l\n        }).max",
    "        var max : Long = 0\n        listval.foreach(x => {\n            if (x.isRight) {\n                if (x.right.get > max) max = x.right.get\n            }\n        })\n        max",
    "        listval.map(x => x match {\n            case Left(x) => 0\n            case Right(x) => x\n        }).max",
    "        var max = 0L\n        for (i <- listval) {\n            i match {\n                case Left(s) => {\n                    val num = s.toLong\n                    if (num > max) max = num\n                }\n                case Right(l) => {\n                    if (l > max) max = l\n                }\n            }\n        }\n        max",
    "        var max : Long = 0\n        for (i <- listval) {\n            i match {\n                case Left(s) => {\n                    val l : Long = s.toLong\n                    if (l > max) max = l\n                }\n                case Right(l) => {\n                    if (l > max) max = l\n                }\n            }\n        }\n        max",
    "        var max : Long = 0\n        for (i <- listval) {\n            i match {\n                case Left(s) => {\n                    val l = s.toLong\n                    if (l > max) max = l\n                }\n                case Right(l) => {\n                    if (l > max) max = l\n                }\n            }\n        }\n        return max",
    "        listval.map(x => x match {\n            case Left(x) => 0\n            case Right(x) => x\n        }).max",
    "        listval.map(x => x match {\n            case Left(s) => 0\n            case Right(l) => l\n        }).max",
    "        listval.map(x => x match {\n            case Left(x) => 0\n            case Right(x) => x\n        }).max",
    "        var max = 0L\n        for (i <- listval) {\n            i match {\n                case Left(s) => {\n                    if (s.length > max) max = s.length\n                }\n                case Right(l) => {\n                    if (l > max) max = l\n                }\n            }\n        }\n        max",
    "        var max : Long = 0\n        for (i <- listval) {\n            i match {\n                case Left(s) =>\n                case Right(l) => if (l > max) max = l\n            }\n        }\n        return max",
    "        listval.map(x => x match {\n            case Left(x) => 0\n            case Right(x) => x\n        }).max",
    "        listval.map(x => x match {\n            case Left(x) => 0\n            case Right(x) => x\n        }).max",
    "        listval.map(x => x match {\n            case Left(x) => 0\n            case Right(x) => x\n        }).max",
    "        val list = listval.filter(x => x.isRight).map(x => x.right.get)\n        list.max",
    "        listval.filter(_.isRight).map(_.right.get).max",
    "        listval.map(x => x match {\n            case Left(s) => 0\n            case Right(l) => l\n        }).max",
    "        listval.filter(_.isRight).map(_.right.get).max",
    "        listval.map(x => x match {\n            case Left(s) => 0\n            case Right(l) => l\n        }).max",
    "        var max : Long = 0\n        for (i <- listval) {\n            i match {\n                case Left(x) => {\n                    if (x.toLong > max) max = x.toLong\n                }\n                case Right(x) => {\n                    if (x > max) max = x\n                }\n            }\n        }\n        return max",
    "        listval.map(x => x match {\n            case Left(x) => 0\n            case Right(x) => x\n        }).max",
    "        var max = 0L\n        for (i <- listval) {\n            i match {\n                case Left(s) => {\n                    val num = s.toLong\n                    if (num > max) max = num\n                }\n                case Right(l) => {\n                    if (l > max) max = l\n                }\n            }\n        }\n        max",
    "        var max : Long = 0\n        for (i <- listval) {\n            i match {\n                case Left(s) => {\n                    if (s.toLong > max) max = s.toLong\n                }\n                case Right(l) => {\n                    if (l > max) max = l\n                }\n            }\n        }\n        return max",
    "        var max : Long = 0\n        for (i <- listval) {\n            i match {\n                case Left(s) => {\n                    val l = s.toLong\n                    if (l > max) max = l\n                }\n                case Right(l) => {\n                    if (l > max) max = l\n                }\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- listval) {\n            i match {\n                case Left(s) => {\n                    val num = s.toLong\n                    if (num > max) max = num\n                }\n                case Right(l) => {\n                    if (l > max) max = l\n                }\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- listval) {\n            i match {\n                case Left(s) => {\n                    val l = s.toLong\n                    if (l > max) max = l\n                }\n                case Right(l) => {\n                    if (l > max) max = l\n                }\n            }\n        }\n        max",
    "        listval.map(x => x match {\n            case Left(x) => 0\n            case Right(x) => x\n        }).max",
    "        listval.map(x => x match {\n            case Left(s) => 0\n            case Right(l) => l\n        }).max",
    "        var max = 0L\n        for (i <- listval) {\n            i match {\n                case Left(s) =>\n                case Right(l) => if (l > max) max = l\n            }\n        }\n        max",
    "        listval.filter(_.isRight).map(_.right.get).max"
  ]
}