{
  "name": "mbpp_6_differ_At_One_Bit_Pos",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_6_differ_At_One_Bit_Pos.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var diff = a ^ b\n        var count = 0\n        while (diff != 0) {\n            diff &= diff - 1\n            count += 1\n        }\n        return count == 1",
    "        val xor = a ^ b\n        val count = xor.toBinaryString.count(_ == '1')\n        count == 1",
    "        val c = a ^ b\n        c != 0 && (c & (c - 1)) == 0",
    "        var c = a ^ b\n        var count = 0\n        while (c != 0) {\n            c &= c - 1\n            count += 1\n        }\n        return count == 1",
    "        var c = a ^ b\n        var count = 0\n        while (c > 0) {\n            if ((c & 1) == 1) count += 1\n            c >>= 1\n        }\n        return count == 1",
    "        var diff = a ^ b\n        var count = 0\n        while (diff != 0) {\n            diff = diff & (diff - 1)\n            count += 1\n        }\n        return count == 1",
    "        var diff = a ^ b\n        var count = 0\n        while (diff > 0) {\n            if ((diff & 1) == 1) count += 1\n            diff >>= 1\n        }\n        return count == 1",
    "        val c = a ^ b\n        return c != 0 && (c & (c - 1)) == 0",
    "        var x = a ^ b\n        var count = 0\n        while (x != 0) {\n            x = x & (x - 1)\n            count += 1\n        }\n        return count == 1",
    "        var c = a ^ b\n        if (c == 0) return false\n        while (c % 2 == 0) c /= 2\n        if (c == 1) return true\n        return false",
    "        var c = a ^ b\n        var count = 0\n        while(c > 0) {\n            if((c & 1) == 1) count += 1\n            c = c >> 1\n        }\n        return count == 1",
    "        var c = a ^ b\n        var count = 0\n        while (c > 0) {\n            if ((c & 1) == 1) count += 1\n            c >>= 1\n        }\n        return count == 1",
    "        val c = a ^ b\n        (c & (c - 1)) == 0",
    "        val c = a ^ b\n        c != 0 && (c & (c - 1)) == 0",
    "        val c = a ^ b\n        var count = 0\n        while (c != 0) {\n            count += 1\n            c &= c - 1\n        }\n        return count == 1",
    "        var diff = 0\n        var c = a ^ b\n        while (c > 0) {\n            if ((c & 1) == 1) diff += 1\n            c >>= 1\n        }\n        return diff == 1",
    "        var c = a ^ b\n        var count = 0\n        while (c != 0) {\n            if ((c & 1) == 1) count += 1\n            c >>= 1\n        }\n        return count == 1",
    "        val c = a ^ b\n        return (c & (c - 1)) == 0",
    "        var c = a ^ b\n        var count = 0\n        while (c > 0) {\n            if ((c & 1) == 1) count += 1\n            c >>= 1\n        }\n        return count == 1",
    "        var c = a ^ b\n        var count = 0\n        while (c > 0) {\n            if ((c & 1) == 1) count += 1\n            c >>= 1\n        }\n        count == 1"
  ]
}