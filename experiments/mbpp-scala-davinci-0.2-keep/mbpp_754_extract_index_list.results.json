{
  "name": "mbpp_754_extract_index_list",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_754_extract_index_list.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val result = new ListBuffer[Long]\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result += l1(i)\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp26l8j5ei.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp26l8j5ei.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        var result = List[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpczdv_469.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpczdv_469.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = ListBuffer[Long]()\n        for (i <- 0 until min(l1.length, l2.length, l3.length)) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpnlpd0efi.scala:7:26 ------------------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until min(l1.length, l2.length, l3.length)) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^\u001b[0m\n\u001b[31m  |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mmin\u001b[0m in \u001b[33mpackage\u001b[0m \u001b[35mscala.math\u001b[0m with types\n\u001b[31m  |\u001b[0m (x: Double, y: Double): Double\n\u001b[31m  |\u001b[0m (x: Float, y: Float): Float\n\u001b[31m  |\u001b[0m (x: Long, y: Long): Long\n\u001b[31m  |\u001b[0m (x: Int, y: Int): Int\n\u001b[31m  |\u001b[0mmatch arguments ((l1.length : => Int), (l2.length : => Int), (l3.length : => Int))\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpnlpd0efi.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpnlpd0efi.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[3",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = new ListBuffer[Long]\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpe6aj4djr.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpe6aj4djr.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        var result = List[Long]()\n        for (i <- 0 until min(l1.length, l2.length, l3.length)) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmptzhpq9yb.scala:7:26 ------------------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until min(l1.length, l2.length, l3.length)) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^\u001b[0m\n\u001b[31m  |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mmin\u001b[0m in \u001b[33mpackage\u001b[0m \u001b[35mscala.math\u001b[0m with types\n\u001b[31m  |\u001b[0m (x: Double, y: Double): Double\n\u001b[31m  |\u001b[0m (x: Float, y: Float): Float\n\u001b[31m  |\u001b[0m (x: Long, y: Long): Long\n\u001b[31m  |\u001b[0m (x: Int, y: Int): Int\n\u001b[31m  |\u001b[0mmatch arguments ((l1.length : => Int), (l2.length : => Int), (l3.length : => Int))\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmptzhpq9yb.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmptzhpq9yb.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[3",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        var result = List[Long]()\n        var minLength = min(l1.length, min(l2.length, l3.length))\n        for (i <- 0 until minLength) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp88cv1ekz.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp88cv1ekz.scala:15:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = new ListBuffer[Long]\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmplbucyzbv.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmplbucyzbv.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        var l = ListBuffer[Long]()\n        for (i <- 0 to l1.length - 1) {\n            if (l2(i) == l3(i)) l += l1(i)\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpirwjtwrm.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpirwjtwrm.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = new ListBuffer[Long]\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpe6aj4djr.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpe6aj4djr.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = new ListBuffer[Long]\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpe6aj4djr.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpe6aj4djr.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = new ListBuffer[Long]\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmplbucyzbv.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmplbucyzbv.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val result = new ListBuffer[Long]\n        val minLength = min(l1.length, min(l2.length, l3.length))\n        for (i <- 0 until minLength) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result += l1(i)\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp90bhch90.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp90bhch90.scala:15:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        var result = List[Long]()\n        var minLength = min(l1.length, min(l2.length, l3.length))\n        for (i <- 0 until minLength) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_2e4gdal.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_2e4gdal.scala:15:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        var result = List[Long]()\n        for (i <- 0 to l1.length - 1) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpoys2aj_o.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpoys2aj_o.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgr2ht2tx.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgr2ht2tx.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = new ListBuffer[Long]\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpe6aj4djr.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpe6aj4djr.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l1(i) == l3(i)) l += l1(i)\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpclu8_gk5.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpclu8_gk5.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        var result : List[Long] = Nil\n        for (i <- 0 to l1.length - 1) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyvms6u1f.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyvms6u1f.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        var result = ListBuffer[Long]()\n        for (i <- 0 until min(l1.length, l2.length, l3.length)) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result += l1(i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpfnvgp72d.scala:7:26 ------------------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until min(l1.length, l2.length, l3.length)) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^\u001b[0m\n\u001b[31m  |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mmin\u001b[0m in \u001b[33mpackage\u001b[0m \u001b[35mscala.math\u001b[0m with types\n\u001b[31m  |\u001b[0m (x: Double, y: Double): Double\n\u001b[31m  |\u001b[0m (x: Float, y: Float): Float\n\u001b[31m  |\u001b[0m (x: Long, y: Long): Long\n\u001b[31m  |\u001b[0m (x: Int, y: Int): Int\n\u001b[31m  |\u001b[0mmatch arguments ((l1.length : => Int), (l2.length : => Int), (l3.length : => Int))\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfnvgp72d.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfnvgp72d.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[3",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        var l = List[Long]()\n        for (i <- 0 until min(l1.length, l2.length, l3.length)) {\n            if (l1(i) == l2(i) && l1(i) == l3(i)) l = l :+ l1(i)\n        }\n        return l\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpduvmwalj.scala:7:26 ------------------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until min(l1.length, l2.length, l3.length)) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^\u001b[0m\n\u001b[31m  |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mmin\u001b[0m in \u001b[33mpackage\u001b[0m \u001b[35mscala.math\u001b[0m with types\n\u001b[31m  |\u001b[0m (x: Double, y: Double): Double\n\u001b[31m  |\u001b[0m (x: Float, y: Float): Float\n\u001b[31m  |\u001b[0m (x: Long, y: Long): Long\n\u001b[31m  |\u001b[0m (x: Int, y: Int): Int\n\u001b[31m  |\u001b[0mmatch arguments ((l1.length : => Int), (l2.length : => Int), (l3.length : => Int))\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpduvmwalj.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpduvmwalj.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[3",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = l1.zip(l2).zip(l3).map(x => (x._1._1, x._1._2, x._2)).filter(x => x._1 == x._2 && x._2 == x._3).map(x => x._1)\n        if (l.isEmpty) \"No common elements\" else l\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123201,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyj_1qn1s.scala:10:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyj_1qn1s.scala:11:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l1Set = l1.toSet\n        val l2Set = l2.toSet\n        val l3Set = l3.toSet\n        val l1l2 = l1Set.intersect(l2Set)\n        val l1l2l3 = l1l2.intersect(l3Set)\n        val l1l2l3List = l1l2l3.toList\n        val l1l2l3ListSorted = l1l2l3List.sorted\n        val l1l2l3ListSortedIndex = l1l2l3ListSorted.map(l1.indexOf(_))\n        l1l2l3ListSortedIndex\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123201,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmppfrjeb25.scala:17:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmppfrjeb25.scala:18:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = new ListBuffer[Long]\n        for (i <- 0 until min(l1.length, l2.length, l3.length)) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123164,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpttgsd1w6.scala:7:26 ------------------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until min(l1.length, l2.length, l3.length)) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^\u001b[0m\n\u001b[31m  |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mmin\u001b[0m in \u001b[33mpackage\u001b[0m \u001b[35mscala.math\u001b[0m with types\n\u001b[31m  |\u001b[0m (x: Double, y: Double): Double\n\u001b[31m  |\u001b[0m (x: Float, y: Float): Float\n\u001b[31m  |\u001b[0m (x: Long, y: Long): Long\n\u001b[31m  |\u001b[0m (x: Int, y: Int): Int\n\u001b[31m  |\u001b[0mmatch arguments ((l1.length : => Int), (l2.length : => Int), (l3.length : => Int))\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpttgsd1w6.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpttgsd1w6.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[3",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = new ListBuffer[Long]\n        for (i <- 0 to l1.length - 1) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123187,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_00wlbop.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_00wlbop.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = l1.zip(l2).zip(l3).map(x => (x._1._1, x._1._2, x._2)).filter(x => x._1 == x._2 && x._2 == x._3).map(x => x._1)\n        if (l.length == 0) \"No common elements\" else l\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123201,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpre8fofv7.scala:10:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpre8fofv7.scala:11:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val result = new ListBuffer[Long]\n        for (i <- 0 until min(l1.length, l2.length, l3.length)) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result += l1(i)\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123201,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpqh45cfz5.scala:7:26 ------------------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until min(l1.length, l2.length, l3.length)) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^\u001b[0m\n\u001b[31m  |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mmin\u001b[0m in \u001b[33mpackage\u001b[0m \u001b[35mscala.math\u001b[0m with types\n\u001b[31m  |\u001b[0m (x: Double, y: Double): Double\n\u001b[31m  |\u001b[0m (x: Float, y: Float): Float\n\u001b[31m  |\u001b[0m (x: Long, y: Long): Long\n\u001b[31m  |\u001b[0m (x: Int, y: Int): Int\n\u001b[31m  |\u001b[0mmatch arguments ((l1.length : => Int), (l2.length : => Int), (l3.length : => Int))\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqh45cfz5.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqh45cfz5.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[3",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = new ListBuffer[Long]\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpe6aj4djr.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpe6aj4djr.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        var result = List[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpczdv_469.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpczdv_469.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = l1.zip(l2).zip(l3).map(x => (x._1._1, x._1._2, x._2)).filter(x => x._1 == x._2 && x._2 == x._3).map(x => x._1)\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123199,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpimnck8g7.scala:10:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpimnck8g7.scala:11:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = ListBuffer[Long]()\n        for (i <- 0 until min(l1.length, min(l2.length, l3.length))) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123201,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp4ogvkkxv.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp4ogvkkxv.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgr2ht2tx.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgr2ht2tx.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val minLength = min(l1.length, min(l2.length, l3.length))\n        val result = new ListBuffer[Long]\n        for (i <- 0 until minLength) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result += l1(i)\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123176,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp95smv4fc.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp95smv4fc.scala:15:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgr2ht2tx.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgr2ht2tx.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgr2ht2tx.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgr2ht2tx.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = new ListBuffer[Long]\n        for (i <- 0 until min(l1.length, l2.length, l3.length)) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123164,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpttgsd1w6.scala:7:26 ------------------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until min(l1.length, l2.length, l3.length)) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^\u001b[0m\n\u001b[31m  |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mmin\u001b[0m in \u001b[33mpackage\u001b[0m \u001b[35mscala.math\u001b[0m with types\n\u001b[31m  |\u001b[0m (x: Double, y: Double): Double\n\u001b[31m  |\u001b[0m (x: Float, y: Float): Float\n\u001b[31m  |\u001b[0m (x: Long, y: Long): Long\n\u001b[31m  |\u001b[0m (x: Int, y: Int): Int\n\u001b[31m  |\u001b[0mmatch arguments ((l1.length : => Int), (l2.length : => Int), (l3.length : => Int))\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpttgsd1w6.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpttgsd1w6.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[3",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = new ListBuffer[Long]\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmplbucyzbv.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmplbucyzbv.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        var result = List[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpczdv_469.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpczdv_469.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        var result = List[Long]()\n        for (i <- 0 to l1.length - 1) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpoys2aj_o.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpoys2aj_o.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = new ListBuffer[Long]\n        for (i <- 0 to l1.length - 1) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123187,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_00wlbop.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_00wlbop.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        var result = List[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpczdv_469.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpczdv_469.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = new ListBuffer[Long]\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l1(i) == l3(i)) l += l1(i)\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123201,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqm522j8f.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqm522j8f.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        var l = List[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l = l :+ l1(i)\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyfudr_zc.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyfudr_zc.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        var result = List[Long]()\n        var i = 0\n        while (i < l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n            i += 1\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123187,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp77a25am2.scala:15:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp77a25am2.scala:16:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = new ListBuffer[Long]()\n        for (i <- 0 to l1.length - 1) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123201,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpubvqan9r.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpubvqan9r.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val result = new ListBuffer[Long]\n        for (i <- 0 until min(l1.length, l2.length, l3.length)) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result += l1(i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123201,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpygbr6s4f.scala:7:26 ------------------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until min(l1.length, l2.length, l3.length)) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^\u001b[0m\n\u001b[31m  |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mmin\u001b[0m in \u001b[33mpackage\u001b[0m \u001b[35mscala.math\u001b[0m with types\n\u001b[31m  |\u001b[0m (x: Double, y: Double): Double\n\u001b[31m  |\u001b[0m (x: Float, y: Float): Float\n\u001b[31m  |\u001b[0m (x: Long, y: Long): Long\n\u001b[31m  |\u001b[0m (x: Int, y: Int): Int\n\u001b[31m  |\u001b[0mmatch arguments ((l1.length : => Int), (l2.length : => Int), (l3.length : => Int))\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpygbr6s4f.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpygbr6s4f.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[3",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val list = new ListBuffer[Long]\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) list += l1(i)\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123201,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_o02ajpd.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_o02ajpd.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val list = ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) list += l1(i)\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123201,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgryrcmpa.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgryrcmpa.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = new ListBuffer[Long]\n        for (i <- 0 until min(l1.length, l2.length, l3.length)) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123164,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpttgsd1w6.scala:7:26 ------------------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until min(l1.length, l2.length, l3.length)) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^\u001b[0m\n\u001b[31m  |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mmin\u001b[0m in \u001b[33mpackage\u001b[0m \u001b[35mscala.math\u001b[0m with types\n\u001b[31m  |\u001b[0m (x: Double, y: Double): Double\n\u001b[31m  |\u001b[0m (x: Float, y: Float): Float\n\u001b[31m  |\u001b[0m (x: Long, y: Long): Long\n\u001b[31m  |\u001b[0m (x: Int, y: Int): Int\n\u001b[31m  |\u001b[0mmatch arguments ((l1.length : => Int), (l2.length : => Int), (l3.length : => Int))\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpttgsd1w6.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpttgsd1w6.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[3",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = new ListBuffer[Long]\n        for (i <- 0 until min(l1.length, l2.length, l3.length)) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123164,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpttgsd1w6.scala:7:26 ------------------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until min(l1.length, l2.length, l3.length)) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^\u001b[0m\n\u001b[31m  |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mmin\u001b[0m in \u001b[33mpackage\u001b[0m \u001b[35mscala.math\u001b[0m with types\n\u001b[31m  |\u001b[0m (x: Double, y: Double): Double\n\u001b[31m  |\u001b[0m (x: Float, y: Float): Float\n\u001b[31m  |\u001b[0m (x: Long, y: Long): Long\n\u001b[31m  |\u001b[0m (x: Int, y: Int): Int\n\u001b[31m  |\u001b[0mmatch arguments ((l1.length : => Int), (l2.length : => Int), (l3.length : => Int))\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpttgsd1w6.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpttgsd1w6.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[3",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        var result = List[Long]()\n        for (i <- 0 to l1.length - 1) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpoys2aj_o.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpoys2aj_o.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        var result = List[Long]()\n        var index = 0\n        while (index < l1.length && index < l2.length && index < l3.length) {\n            if (l1(index) == l2(index) && l2(index) == l3(index)) {\n                result = result :+ l1(index)\n            }\n            index += 1\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123187,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpuzo3k6fb.scala:17:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpuzo3k6fb.scala:18:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        var result = List[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpczdv_469.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpczdv_469.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        var result = List[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpczdv_469.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpczdv_469.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l1Set = l1.toSet\n        val l2Set = l2.toSet\n        val l3Set = l3.toSet\n        val l1l2 = l1Set.intersect(l2Set)\n        val l1l2l3 = l1l2.intersect(l3Set)\n        l1l2l3.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpijogwreb.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpijogwreb.scala:15:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = l1.zip(l2).zip(l3).map(x => (x._1._1, x._1._2, x._2)).filter(x => x._1 == x._2 && x._2 == x._3)\n        if (l.length == 0) \"No common elements\"\n        else l.map(x => x._1)\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123200,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsq44ha7c.scala:11:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsq44ha7c.scala:12:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        var result = List[Long]()\n        for (i <- 0 to l1.length - 1) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpoys2aj_o.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpoys2aj_o.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        var result = new ListBuffer[Long]\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result += l1(i)\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123201,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbdo708nm.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbdo708nm.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        var result = List[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpczdv_469.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpczdv_469.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        var result = List[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpczdv_469.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpczdv_469.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = ListBuffer[Long]()\n        for (i <- 0 until min(l1.length, l2.length, l3.length)) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpm5_xvx_j.scala:7:26 ------------------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until min(l1.length, l2.length, l3.length)) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^\u001b[0m\n\u001b[31m  |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mmin\u001b[0m in \u001b[33mpackage\u001b[0m \u001b[35mscala.math\u001b[0m with types\n\u001b[31m  |\u001b[0m (x: Double, y: Double): Double\n\u001b[31m  |\u001b[0m (x: Float, y: Float): Float\n\u001b[31m  |\u001b[0m (x: Long, y: Long): Long\n\u001b[31m  |\u001b[0m (x: Int, y: Int): Int\n\u001b[31m  |\u001b[0mmatch arguments ((l1.length : => Int), (l2.length : => Int), (l3.length : => Int))\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpm5_xvx_j.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpm5_xvx_j.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[3",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = new ListBuffer[Long]\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpe6aj4djr.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpe6aj4djr.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = ListBuffer[Long]()\n        for (i <- 0 until min(l1.length, l2.length, l3.length)) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpnlpd0efi.scala:7:26 ------------------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until min(l1.length, l2.length, l3.length)) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^\u001b[0m\n\u001b[31m  |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mmin\u001b[0m in \u001b[33mpackage\u001b[0m \u001b[35mscala.math\u001b[0m with types\n\u001b[31m  |\u001b[0m (x: Double, y: Double): Double\n\u001b[31m  |\u001b[0m (x: Float, y: Float): Float\n\u001b[31m  |\u001b[0m (x: Long, y: Long): Long\n\u001b[31m  |\u001b[0m (x: Int, y: Int): Int\n\u001b[31m  |\u001b[0mmatch arguments ((l1.length : => Int), (l2.length : => Int), (l3.length : => Int))\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpnlpd0efi.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpnlpd0efi.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[3",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        var result = List[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpczdv_469.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpczdv_469.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        var result = List[Long]()\n        var minLength = min(l1.length, min(l2.length, l3.length))\n        for (i <- 0 until minLength) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_2e4gdal.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_2e4gdal.scala:15:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val result = new ListBuffer[Long]()\n        val minLength = min(min(l1.length, l2.length), l3.length)\n        for (i <- 0 until minLength) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result += l1(i)\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123201,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpi179z16v.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpi179z16v.scala:15:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        var result = new ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result += l1(i)\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123201,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpcirp_lj1.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpcirp_lj1.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val minLength = min(l1.length, min(l2.length, l3.length))\n        val result = new ListBuffer[Long]\n        for (i <- 0 until minLength) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result += l1(i)\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123176,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp95smv4fc.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp95smv4fc.scala:15:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = l1.zip(l2).zip(l3).filter(x => x._1._1 == x._1._2 && x._1._1 == x._2).map(x => x._1._1)\n        if (l.length == 0) \"No common elements\" else l\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123200,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpq0tlchwu.scala:10:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpq0tlchwu.scala:11:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val minLength = min(l1.length, min(l2.length, l3.length))\n        val l = new ListBuffer[Long]\n        for (i <- 0 until minLength) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123201,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp0agx8881.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp0agx8881.scala:15:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgr2ht2tx.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgr2ht2tx.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        var l = List[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l = l :+ l1(i)\n        }\n        return l\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123201,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpk4elc770.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpk4elc770.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        var result = List[Long]()\n        for (i <- 0 to l1.length - 1) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpoys2aj_o.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpoys2aj_o.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = l1.zip(l2).zip(l3).map(x => (x._1._1, x._1._2, x._2)).filter(x => x._1 == x._2 && x._2 == x._3).map(x => x._1)\n        if (l.isEmpty) \"No common elements\" else l\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123201,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyj_1qn1s.scala:10:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyj_1qn1s.scala:11:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = new ListBuffer[Long]()\n        for (i <- 0 to l1.length - 1) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123201,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpubvqan9r.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpubvqan9r.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgr2ht2tx.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgr2ht2tx.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        var result = List[Long]()\n        var index = 0\n        while (index < l1.length && index < l2.length && index < l3.length) {\n            if (l1(index) == l2(index) && l2(index) == l3(index)) result = result :+ l1(index)\n            index += 1\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123201,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdp0e5iy9.scala:15:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdp0e5iy9.scala:16:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        var result = List[Long]()\n        for (i <- 0 to l1.length - 1) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpoys2aj_o.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpoys2aj_o.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l1l2 = l1.zip(l2)\n        val l1l2l3 = l1l2.zip(l3)\n        val l1l2l3f = l1l2l3.filter(x => x._1._1 == x._1._2 && x._1._2 == x._2)\n        l1l2l3f.map(x => x._1._1)\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123200,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpj118ir15.scala:12:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpj118ir15.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val result = ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result += l1(i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123201,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprn00gekn.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprn00gekn.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        var result = List[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpczdv_469.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpczdv_469.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = new ListBuffer[Long]\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmplbucyzbv.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmplbucyzbv.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val result = new ListBuffer[Long]()\n        for (i <- 0 to l1.length - 1) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result += l1(i)\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123201,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpkynq7gyn.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpkynq7gyn.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        var result = List[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpczdv_469.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpczdv_469.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgr2ht2tx.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgr2ht2tx.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgr2ht2tx.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgr2ht2tx.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = ListBuffer[Long]()\n        for (i <- 0 until min(l1.length, l2.length, l3.length)) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpm5_xvx_j.scala:7:26 ------------------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until min(l1.length, l2.length, l3.length)) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^\u001b[0m\n\u001b[31m  |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mmin\u001b[0m in \u001b[33mpackage\u001b[0m \u001b[35mscala.math\u001b[0m with types\n\u001b[31m  |\u001b[0m (x: Double, y: Double): Double\n\u001b[31m  |\u001b[0m (x: Float, y: Float): Float\n\u001b[31m  |\u001b[0m (x: Long, y: Long): Long\n\u001b[31m  |\u001b[0m (x: Int, y: Int): Int\n\u001b[31m  |\u001b[0mmatch arguments ((l1.length : => Int), (l2.length : => Int), (l3.length : => Int))\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpm5_xvx_j.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpm5_xvx_j.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[3",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = ListBuffer[Long]()\n        for (i <- 0 until min(l1.length, l2.length, l3.length)) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpm5_xvx_j.scala:7:26 ------------------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until min(l1.length, l2.length, l3.length)) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^\u001b[0m\n\u001b[31m  |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mmin\u001b[0m in \u001b[33mpackage\u001b[0m \u001b[35mscala.math\u001b[0m with types\n\u001b[31m  |\u001b[0m (x: Double, y: Double): Double\n\u001b[31m  |\u001b[0m (x: Float, y: Float): Float\n\u001b[31m  |\u001b[0m (x: Long, y: Long): Long\n\u001b[31m  |\u001b[0m (x: Int, y: Int): Int\n\u001b[31m  |\u001b[0mmatch arguments ((l1.length : => Int), (l2.length : => Int), (l3.length : => Int))\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpm5_xvx_j.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpm5_xvx_j.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[3",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        var result = List[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpczdv_469.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpczdv_469.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        var l = ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123201,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpx57ggrt5.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpx57ggrt5.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        // return l1.zip(l2).zip(l3).map(x => x._1._1 == x._1._2 && x._1._1 == x._2)\n        // return l1.zip(l2).zip(l3).map(x => x._1._1 == x._1._2 && x._1._1 == x._2).filter(_ == true)\n        // return l1.zip(l2).zip(l3).map(x => x._1._1 == x._1._2 && x._1._1 == x._2).filter(_ == true).map(x => x._1._1)\n        // return l1.zip(l2).zip(l3).map(x => x._1._1 == x._1._2 && x._1._1 == x._2).filter(_ == true).map(x => x._1._1).map(x => x._2)\n        // return l1.zip(l2).zip(l3).map(x => x._1._1 == x._1._2 && x._1._1 == x._2).filter(_ == true).map(x => x._1._1).map(x => x._2).map(x => x._1)\n        // return l1.zip(l2).zip(l3).map(x => x._1._1 == x._1._2 && x._1._1 == x._2).filter(_ == true).map(x => x._1._1).map(x => x._2).map(x => x._1).map(x => x._1)\n        // return l1.zip(l2).zip(l3).map(x => x._1._1 == x._1._2 && x._1._1 == x._2).filter(_ == true).map(x => x._1._1).map(x => x._2).map(x => x._1).map(x => x._1).map(x => x._1)\n        // return l1.zip(l2).zip(l3).map(x => x._1._1 == x._1._2 && x._1._1 == x._2).filter(_ == true).map(x\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123212,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpf7k7j1ww.scala:16:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpf7k7j1ww.scala:17:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        var result = new ListBuffer[Long]()\n        for (i <- 0 to l1.length - 1) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result += l1(i)\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123213,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt4f3y4y6.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt4f3y4y6.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = new ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123163,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpoqtk161m.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpoqtk161m.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val minLength = min(min(l1.length, l2.length), l3.length)\n        val result = new ListBuffer[Long]()\n        for (i <- 0 until minLength) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) {\n                result += l1(i)\n            }\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123214,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpj0wk4tjb.scala:16:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpj0wk4tjb.scala:17:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgr2ht2tx.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgr2ht2tx.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        var l = ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123201,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpx57ggrt5.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpx57ggrt5.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l1Set = l1.toSet\n        val l2Set = l2.toSet\n        val l3Set = l3.toSet\n        val l1l2 = l1Set.intersect(l2Set)\n        val l1l2l3 = l1l2.intersect(l3Set)\n        val l1l2l3List = l1l2l3.toList\n        val l1l2l3ListSorted = l1l2l3List.sorted\n        l1l2l3ListSorted\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123214,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpky3j_s11.scala:16:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpky3j_s11.scala:17:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = new ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123163,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpoqtk161m.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpoqtk161m.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgr2ht2tx.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgr2ht2tx.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        var result = List[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpczdv_469.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpczdv_469.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = ListBuffer[Long]()\n        for (i <- 0 until min(l1.length, l2.length, l3.length)) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpnlpd0efi.scala:7:26 ------------------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until min(l1.length, l2.length, l3.length)) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^\u001b[0m\n\u001b[31m  |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mmin\u001b[0m in \u001b[33mpackage\u001b[0m \u001b[35mscala.math\u001b[0m with types\n\u001b[31m  |\u001b[0m (x: Double, y: Double): Double\n\u001b[31m  |\u001b[0m (x: Float, y: Float): Float\n\u001b[31m  |\u001b[0m (x: Long, y: Long): Long\n\u001b[31m  |\u001b[0m (x: Int, y: Int): Int\n\u001b[31m  |\u001b[0mmatch arguments ((l1.length : => Int), (l2.length : => Int), (l3.length : => Int))\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpnlpd0efi.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpnlpd0efi.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[3",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = ListBuffer[Long]()\n        val minLength = min(l1.length, min(l2.length, l3.length))\n        for (i <- 0 until minLength) {\n            if (l1(i) == l2(i) && l1(i) == l3(i)) l += l1(i)\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123214,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphtcu22ot.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphtcu22ot.scala:15:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        var result = ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result += l1(i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123214,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7hj4orpu.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7hj4orpu.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = ListBuffer[Long]()\n        for (i <- 0 until min(l1.length, l2.length, l3.length)) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpm5_xvx_j.scala:7:26 ------------------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until min(l1.length, l2.length, l3.length)) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^\u001b[0m\n\u001b[31m  |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mmin\u001b[0m in \u001b[33mpackage\u001b[0m \u001b[35mscala.math\u001b[0m with types\n\u001b[31m  |\u001b[0m (x: Double, y: Double): Double\n\u001b[31m  |\u001b[0m (x: Float, y: Float): Float\n\u001b[31m  |\u001b[0m (x: Long, y: Long): Long\n\u001b[31m  |\u001b[0m (x: Int, y: Int): Int\n\u001b[31m  |\u001b[0mmatch arguments ((l1.length : => Int), (l2.length : => Int), (l3.length : => Int))\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpm5_xvx_j.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpm5_xvx_j.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[3",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        if (l1.length != l2.length || l1.length != l3.length) {\n            return \"Lists are not of the same length\"\n        }\n        var result = List[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l1(i) == l3(i)) {\n                result = result :+ l1(i)\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123214,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp54xbx5cw.scala:18:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp54xbx5cw.scala:19:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        var result = List[Long]()\n        for (i <- 0 to l1.length - 1) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpoys2aj_o.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpoys2aj_o.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val minLength = min(l1.length, min(l2.length, l3.length))\n        val l = new ListBuffer[Long]\n        for (i <- 0 until minLength) {\n            if (l1(i) == l2(i) && l1(i) == l3(i)) l += l1(i)\n        }\n        return l.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123214,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpugad4m09.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpugad4m09.scala:15:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        var result = List[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpczdv_469.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpczdv_469.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        var result = List[Long]()\n        for (i <- 0 to l1.length - 1) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpoys2aj_o.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpoys2aj_o.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123176,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp4u421qsp.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp4u421qsp.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = new ListBuffer[Long]\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpe6aj4djr.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpe6aj4djr.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l1Set = l1.toSet\n        val l2Set = l2.toSet\n        val l3Set = l3.toSet\n        val l1l2 = l1Set.intersect(l2Set)\n        val l1l2l3 = l1l2.intersect(l3Set)\n        l1l2l3\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123162,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6efiaeig.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6efiaeig.scala:15:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val result = new ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l1(i) == l3(i)) result += l1(i)\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123214,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpvi2ubmp7.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpvi2ubmp7.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        var result = new ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result += l1(i)\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123201,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpcirp_lj1.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpcirp_lj1.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        var result = List[Long]()\n        for (i <- 0 to l1.length - 1) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpoys2aj_o.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpoys2aj_o.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        var result = List[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpczdv_469.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpczdv_469.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        var l = List[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l = l :+ l1(i)\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyfudr_zc.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyfudr_zc.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgr2ht2tx.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgr2ht2tx.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        var result = new ListBuffer[Long]()\n        for (i <- 0 until min(l1.length, l2.length, l3.length)) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) {\n                result += l1(i)\n            }\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123214,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpcurty2tl.scala:7:26 ------------------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until min(l1.length, l2.length, l3.length)) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^\u001b[0m\n\u001b[31m  |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mmin\u001b[0m in \u001b[33mpackage\u001b[0m \u001b[35mscala.math\u001b[0m with types\n\u001b[31m  |\u001b[0m (x: Double, y: Double): Double\n\u001b[31m  |\u001b[0m (x: Float, y: Float): Float\n\u001b[31m  |\u001b[0m (x: Long, y: Long): Long\n\u001b[31m  |\u001b[0m (x: Int, y: Int): Int\n\u001b[31m  |\u001b[0mmatch arguments ((l1.length : => Int), (l2.length : => Int), (l3.length : => Int))\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpcurty2tl.scala:15:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpcurty2tl.scala:16:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[3",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgr2ht2tx.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgr2ht2tx.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        var l : List[Long] = List()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l = l :+ l1(i)\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123215,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp57zdz7fa.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp57zdz7fa.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        var indexList = List[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) indexList = indexList :+ l1(i)\n        }\n        indexList\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123214,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp795bjfft.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp795bjfft.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = new ListBuffer[Long]\n        for (i <- 0 to l1.length - 1) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123187,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_00wlbop.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_00wlbop.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        var l = ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123163,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpxpwn6f1o.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpxpwn6f1o.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val result = ListBuffer[Long]()\n        val minLength = min(min(l1.length, l2.length), l3.length)\n        for (i <- 0 until minLength) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result += l1(i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123214,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp4adr40wp.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp4adr40wp.scala:15:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgr2ht2tx.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgr2ht2tx.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = new ListBuffer[Long]\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmplbucyzbv.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmplbucyzbv.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = new ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123163,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpq4sxafrk.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpq4sxafrk.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgr2ht2tx.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgr2ht2tx.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        var result = List[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpczdv_469.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpczdv_469.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = ListBuffer[Long]()\n        for (i <- 0 until min(l1.length, l2.length, l3.length)) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpm5_xvx_j.scala:7:26 ------------------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until min(l1.length, l2.length, l3.length)) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^\u001b[0m\n\u001b[31m  |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mmin\u001b[0m in \u001b[33mpackage\u001b[0m \u001b[35mscala.math\u001b[0m with types\n\u001b[31m  |\u001b[0m (x: Double, y: Double): Double\n\u001b[31m  |\u001b[0m (x: Float, y: Float): Float\n\u001b[31m  |\u001b[0m (x: Long, y: Long): Long\n\u001b[31m  |\u001b[0m (x: Int, y: Int): Int\n\u001b[31m  |\u001b[0mmatch arguments ((l1.length : => Int), (l2.length : => Int), (l3.length : => Int))\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpm5_xvx_j.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpm5_xvx_j.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[3",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = new ListBuffer[Long]\n        for (i <- 0 until min(l1.length, l2.length, l3.length)) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123164,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpttgsd1w6.scala:7:26 ------------------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until min(l1.length, l2.length, l3.length)) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^\u001b[0m\n\u001b[31m  |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mmin\u001b[0m in \u001b[33mpackage\u001b[0m \u001b[35mscala.math\u001b[0m with types\n\u001b[31m  |\u001b[0m (x: Double, y: Double): Double\n\u001b[31m  |\u001b[0m (x: Float, y: Float): Float\n\u001b[31m  |\u001b[0m (x: Long, y: Long): Long\n\u001b[31m  |\u001b[0m (x: Int, y: Int): Int\n\u001b[31m  |\u001b[0mmatch arguments ((l1.length : => Int), (l2.length : => Int), (l3.length : => Int))\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpttgsd1w6.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpttgsd1w6.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[3",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgr2ht2tx.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgr2ht2tx.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val result = new ListBuffer[Long]\n        for (i <- 0 to l1.length - 1) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result += l1(i)\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123214,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3l_nqlcc.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3l_nqlcc.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = new ListBuffer[Long]\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmplbucyzbv.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmplbucyzbv.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        var result = List[Long]()\n        for (i <- 0 to l1.length - 1) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpoys2aj_o.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpoys2aj_o.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123176,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp4u421qsp.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp4u421qsp.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        var result = List[Long]()\n        for (i <- 0 to min(l1.length, min(l2.length, l3.length)) - 1) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123214,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7_z8s_g1.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7_z8s_g1.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = new ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) {\n                l += l1(i)\n            }\n        }\n        l.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123214,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpwn6g5qa5.scala:15:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpwn6g5qa5.scala:16:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        var result = List[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpczdv_469.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpczdv_469.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgr2ht2tx.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgr2ht2tx.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = new ListBuffer[Long]\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpe6aj4djr.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpe6aj4djr.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = new ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123163,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpq4sxafrk.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpq4sxafrk.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val result = new ListBuffer[Long]\n        for (i <- 0 until min(l1.length, l2.length, l3.length)) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) {\n                result += l1(i)\n            }\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123215,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpnw0ytelc.scala:7:26 ------------------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until min(l1.length, l2.length, l3.length)) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^\u001b[0m\n\u001b[31m  |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mmin\u001b[0m in \u001b[33mpackage\u001b[0m \u001b[35mscala.math\u001b[0m with types\n\u001b[31m  |\u001b[0m (x: Double, y: Double): Double\n\u001b[31m  |\u001b[0m (x: Float, y: Float): Float\n\u001b[31m  |\u001b[0m (x: Long, y: Long): Long\n\u001b[31m  |\u001b[0m (x: Int, y: Int): Int\n\u001b[31m  |\u001b[0mmatch arguments ((l1.length : => Int), (l2.length : => Int), (l3.length : => Int))\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpnw0ytelc.scala:15:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpnw0ytelc.scala:16:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[3",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = new ListBuffer[Long]\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmplbucyzbv.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmplbucyzbv.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = ListBuffer[Long]()\n        for (i <- 0 until min(l1.length, l2.length, l3.length)) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpm5_xvx_j.scala:7:26 ------------------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until min(l1.length, l2.length, l3.length)) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^\u001b[0m\n\u001b[31m  |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mmin\u001b[0m in \u001b[33mpackage\u001b[0m \u001b[35mscala.math\u001b[0m with types\n\u001b[31m  |\u001b[0m (x: Double, y: Double): Double\n\u001b[31m  |\u001b[0m (x: Float, y: Float): Float\n\u001b[31m  |\u001b[0m (x: Long, y: Long): Long\n\u001b[31m  |\u001b[0m (x: Int, y: Int): Int\n\u001b[31m  |\u001b[0mmatch arguments ((l1.length : => Int), (l2.length : => Int), (l3.length : => Int))\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpm5_xvx_j.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpm5_xvx_j.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[3",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = new ListBuffer[Long]\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmplbucyzbv.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmplbucyzbv.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        var l = List[Long]()\n        for (i <- 0 until l1.length) {\n            if (l2(i) == l3(i)) l = l :+ l2(i)\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123214,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_az3wegv.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_az3wegv.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = new ListBuffer[Long]\n        for (i <- 0 to l1.length - 1) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdra29nvv.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdra29nvv.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        var result = List[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = l1(i) :: result\n        }\n        result.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123214,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmplln6lpyi.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmplln6lpyi.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val minLength = min(l1.length, min(l2.length, l3.length))\n        val result = new ArrayBuffer[Long]\n        for (i <- 0 until minLength) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result += l1(i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123214,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpj4j1kn5o.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpj4j1kn5o.scala:15:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgr2ht2tx.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgr2ht2tx.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val result = new ListBuffer[Long]\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result += l1(i)\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp26l8j5ei.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp26l8j5ei.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val minLength = min(l1.length, min(l2.length, l3.length))\n        val l = new ListBuffer[Long]\n        for (i <- 0 until minLength) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123201,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp0agx8881.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp0agx8881.scala:15:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        var result = List[Long]()\n        var i = 0\n        while (i < l1.length) {\n            if (l1(i) == l2(i) && l1(i) == l3(i)) result = result :+ l1(i)\n            i += 1\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123215,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpftvxmsdk.scala:15:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpftvxmsdk.scala:16:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val minLength = min(min(l1.length, l2.length), l3.length)\n        val l = new ListBuffer[Long]\n        for (i <- 0 until minLength) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123215,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2os9pdpd.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2os9pdpd.scala:15:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val result = new ListBuffer[Long]\n        for (i <- 0 until min(l1.length, l2.length, l3.length)) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result += l1(i)\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123201,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpqh45cfz5.scala:7:26 ------------------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until min(l1.length, l2.length, l3.length)) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^\u001b[0m\n\u001b[31m  |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mmin\u001b[0m in \u001b[33mpackage\u001b[0m \u001b[35mscala.math\u001b[0m with types\n\u001b[31m  |\u001b[0m (x: Double, y: Double): Double\n\u001b[31m  |\u001b[0m (x: Float, y: Float): Float\n\u001b[31m  |\u001b[0m (x: Long, y: Long): Long\n\u001b[31m  |\u001b[0m (x: Int, y: Int): Int\n\u001b[31m  |\u001b[0mmatch arguments ((l1.length : => Int), (l2.length : => Int), (l3.length : => Int))\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqh45cfz5.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqh45cfz5.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[3",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l1_length = l1.length\n        val l2_length = l2.length\n        val l3_length = l3.length\n        val min_length = min(min(l1_length, l2_length), l3_length)\n        val result = new ListBuffer[Long]\n        for (i <- 0 until min_length) {\n            if (l1(i) == l2(i) && l1(i) == l3(i)) result += l1(i)\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123214,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6p5p8hgn.scala:17:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6p5p8hgn.scala:18:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgr2ht2tx.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgr2ht2tx.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        var result = List[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpczdv_469.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpczdv_469.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = new ListBuffer[Long]\n        for (i <- 0 until min(l1.length, l2.length, l3.length)) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpeuev556v.scala:7:26 ------------------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until min(l1.length, l2.length, l3.length)) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^\u001b[0m\n\u001b[31m  |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mmin\u001b[0m in \u001b[33mpackage\u001b[0m \u001b[35mscala.math\u001b[0m with types\n\u001b[31m  |\u001b[0m (x: Double, y: Double): Double\n\u001b[31m  |\u001b[0m (x: Float, y: Float): Float\n\u001b[31m  |\u001b[0m (x: Long, y: Long): Long\n\u001b[31m  |\u001b[0m (x: Int, y: Int): Int\n\u001b[31m  |\u001b[0mmatch arguments ((l1.length : => Int), (l2.length : => Int), (l3.length : => Int))\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpeuev556v.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpeuev556v.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[3",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l1_set = l1.toSet\n        val l2_set = l2.toSet\n        val l3_set = l3.toSet\n        val l1_l2_intersection = l1_set.intersect(l2_set)\n        val l1_l2_l3_intersection = l1_l2_intersection.intersect(l3_set)\n        l1_l2_l3_intersection.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123218,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpv4i55m1z.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpv4i55m1z.scala:15:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        var l = List[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l = l :+ l1(i)\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyfudr_zc.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyfudr_zc.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        var result = List[Long]()\n        var minLength = min(l1.length, min(l2.length, l3.length))\n        for (i <- 0 until minLength) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp88cv1ekz.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp88cv1ekz.scala:15:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l1l2 = l1.zip(l2)\n        val l1l2l3 = l1l2.zip(l3)\n        val l1l2l3_filtered = l1l2l3.filter(x => x._1._1 == x._1._2 && x._1._1 == x._2)\n        l1l2l3_filtered.map(x => x._1._1)\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123162,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpter560on.scala:12:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpter560on.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = new ListBuffer[Long]\n        for (i <- 0 until min(l1.length, l2.length, l3.length)) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123164,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpttgsd1w6.scala:7:26 ------------------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until min(l1.length, l2.length, l3.length)) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^\u001b[0m\n\u001b[31m  |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mmin\u001b[0m in \u001b[33mpackage\u001b[0m \u001b[35mscala.math\u001b[0m with types\n\u001b[31m  |\u001b[0m (x: Double, y: Double): Double\n\u001b[31m  |\u001b[0m (x: Float, y: Float): Float\n\u001b[31m  |\u001b[0m (x: Long, y: Long): Long\n\u001b[31m  |\u001b[0m (x: Int, y: Int): Int\n\u001b[31m  |\u001b[0mmatch arguments ((l1.length : => Int), (l2.length : => Int), (l3.length : => Int))\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpttgsd1w6.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpttgsd1w6.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[3",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = ListBuffer[Long]()\n        for (i <- 0 to l1.length - 1) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyek9tgei.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyek9tgei.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgr2ht2tx.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgr2ht2tx.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        var result = List[Long]()\n        var index = 0\n        while (index < l1.length) {\n            if (l1(index) == l2(index) && l2(index) == l3(index)) {\n                result = result :+ l1(index)\n            }\n            index += 1\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123219,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqexkc93_.scala:17:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqexkc93_.scala:18:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        var result = List[Long]()\n        for (i <- 0 until min(l1.length, l2.length, l3.length)) {\n            if (l1(i) == l2(i) && l1(i) == l3(i)) result = result :+ l1(i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123220,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpdm616w4z.scala:7:26 ------------------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until min(l1.length, l2.length, l3.length)) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^\u001b[0m\n\u001b[31m  |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mmin\u001b[0m in \u001b[33mpackage\u001b[0m \u001b[35mscala.math\u001b[0m with types\n\u001b[31m  |\u001b[0m (x: Double, y: Double): Double\n\u001b[31m  |\u001b[0m (x: Float, y: Float): Float\n\u001b[31m  |\u001b[0m (x: Long, y: Long): Long\n\u001b[31m  |\u001b[0m (x: Int, y: Int): Int\n\u001b[31m  |\u001b[0mmatch arguments ((l1.length : => Int), (l2.length : => Int), (l3.length : => Int))\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdm616w4z.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdm616w4z.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[3",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val common = new ListBuffer[Long]()\n        for (i <- 0 until min(l1.length, l2.length, l3.length)) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) common += l1(i)\n        }\n        common.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123220,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmp_x3jvkw1.scala:7:26 ------------------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until min(l1.length, l2.length, l3.length)) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^\u001b[0m\n\u001b[31m  |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mmin\u001b[0m in \u001b[33mpackage\u001b[0m \u001b[35mscala.math\u001b[0m with types\n\u001b[31m  |\u001b[0m (x: Double, y: Double): Double\n\u001b[31m  |\u001b[0m (x: Float, y: Float): Float\n\u001b[31m  |\u001b[0m (x: Long, y: Long): Long\n\u001b[31m  |\u001b[0m (x: Int, y: Int): Int\n\u001b[31m  |\u001b[0mmatch arguments ((l1.length : => Int), (l2.length : => Int), (l3.length : => Int))\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_x3jvkw1.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_x3jvkw1.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[3",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = l1.zip(l2).zip(l3).filter(x => x._1._1 == x._1._2 && x._1._1 == x._2).map(x => x._1._1)\n        if (l.isEmpty) \"No common elements\" else l\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123187,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3tdofqvj.scala:10:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3tdofqvj.scala:11:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = new ListBuffer[Long]\n        val minLength = min(l1.length, min(l2.length, l3.length))\n        for (i <- 0 until minLength) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123176,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmps55bzwjm.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmps55bzwjm.scala:15:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        var result = List[Long]()\n        for (i <- 0 to l1.length - 1) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpoys2aj_o.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpoys2aj_o.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = ListBuffer[Long]()\n        for (i <- 0 to l1.length - 1) {\n            if (l1(i) == l2(i) && l1(i) == l3(i)) l += l1(i)\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123162,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2ax7nqx5.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2ax7nqx5.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l1_l2 = l1.zip(l2)\n        val l1_l2_l3 = l1_l2.zip(l3)\n        val l1_l2_l3_filtered = l1_l2_l3.filter(x => x._1._1 == x._1._2 && x._1._1 == x._2)\n        l1_l2_l3_filtered.map(x => x._1._1)\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123219,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpko9lb5ta.scala:12:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpko9lb5ta.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgr2ht2tx.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgr2ht2tx.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = ListBuffer[Long]()\n        for (i <- 0 to l1.length - 1) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyek9tgei.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyek9tgei.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        var l = List[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l = l :+ l1(i)\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyfudr_zc.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyfudr_zc.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        var result = List[Long]()\n        for (i <- 0 to l1.length - 1) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpoys2aj_o.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpoys2aj_o.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = new ListBuffer[Long]\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpe6aj4djr.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpe6aj4djr.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgr2ht2tx.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgr2ht2tx.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = new ListBuffer[Long]\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmplbucyzbv.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmplbucyzbv.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val common = new ListBuffer[Long]\n        val minSize = min(l1.size, min(l2.size, l3.size))\n        for (i <- 0 until minSize) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) {\n                common += l1(i)\n            }\n        }\n        common.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123220,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp240mi2p1.scala:16:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp240mi2p1.scala:17:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l1Set = l1.toSet\n        val l2Set = l2.toSet\n        val l3Set = l3.toSet\n        val l1l2 = l1Set.intersect(l2Set)\n        val l1l2l3 = l1l2.intersect(l3Set)\n        l1l2l3.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpijogwreb.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpijogwreb.scala:15:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = new ListBuffer[Long]\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmplbucyzbv.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmplbucyzbv.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        var result = List[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) {\n                result = result :+ l1(i)\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123187,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp01uuh9e4.scala:15:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp01uuh9e4.scala:16:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = new ListBuffer[Long]\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmplbucyzbv.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmplbucyzbv.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgr2ht2tx.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgr2ht2tx.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        var result = List[Long]()\n        for (i <- 0 to l1.length - 1) {\n            if (l1(i) == l2(i) && l1(i) == l3(i)) result = l1(i) :: result\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123220,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsb7dd9nm.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsb7dd9nm.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val result = new ListBuffer[Long]\n        for (i <- 0 until min(l1.length, l2.length, l3.length)) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result += l1(i)\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123201,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpqh45cfz5.scala:7:26 ------------------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until min(l1.length, l2.length, l3.length)) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^\u001b[0m\n\u001b[31m  |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mmin\u001b[0m in \u001b[33mpackage\u001b[0m \u001b[35mscala.math\u001b[0m with types\n\u001b[31m  |\u001b[0m (x: Double, y: Double): Double\n\u001b[31m  |\u001b[0m (x: Float, y: Float): Float\n\u001b[31m  |\u001b[0m (x: Long, y: Long): Long\n\u001b[31m  |\u001b[0m (x: Int, y: Int): Int\n\u001b[31m  |\u001b[0mmatch arguments ((l1.length : => Int), (l2.length : => Int), (l3.length : => Int))\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqh45cfz5.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqh45cfz5.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[3",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123176,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp4u421qsp.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp4u421qsp.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        var result = List[Long]()\n        for (i <- 0 to l1.length - 1) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpoys2aj_o.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpoys2aj_o.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = new ListBuffer[Long]\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517335,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpe6aj4djr.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpe6aj4djr.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = ListBuffer[Long]()\n        for (i <- 0 until min(l1.length, l2.length, l3.length)) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E134] Type Error: /tmp/tmpm5_xvx_j.scala:7:26 ------------------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until min(l1.length, l2.length, l3.length)) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^\u001b[0m\n\u001b[31m  |\u001b[0mNone of the overloaded alternatives of \u001b[33mmethod\u001b[0m \u001b[35mmin\u001b[0m in \u001b[33mpackage\u001b[0m \u001b[35mscala.math\u001b[0m with types\n\u001b[31m  |\u001b[0m (x: Double, y: Double): Double\n\u001b[31m  |\u001b[0m (x: Float, y: Float): Float\n\u001b[31m  |\u001b[0m (x: Long, y: Long): Long\n\u001b[31m  |\u001b[0m (x: Int, y: Int): Int\n\u001b[31m  |\u001b[0mmatch arguments ((l1.length : => Int), (l2.length : => Int), (l3.length : => Int))\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpm5_xvx_j.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpm5_xvx_j.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[3",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = new ListBuffer[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l += l1(i)\n        }\n        l.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123163,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpoqtk161m.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpoqtk161m.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val l = new ListBuffer[Long]\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l1(i) == l3(i)) l += l1(i)\n        }\n        l.toList\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123220,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpywch9qrs.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpywch9qrs.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        var l = List[Long]()\n        for (i <- 0 to l1.length - 1) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) l = l :+ l1(i)\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfq4k7t7x.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfq4k7t7x.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        var result = List[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpczdv_469.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpczdv_469.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        val minLength = min(min(l1.length, l2.length), l3.length)\n        var result = List[Long]()\n        for (i <- 0 until minLength) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1666123220,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp5c_5yim5.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp5c_5yim5.scala:15:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    def extractIndexList(l1 : List[Long], l2 : List[Long], l3 : List[Long]) : Any = {\n        var result = List[Long]()\n        for (i <- 0 until l1.length) {\n            if (l1(i) == l2(i) && l2(i) == l3(i)) result = result :+ l1(i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 7l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 7l.toLong))).equals((Any(1l.toLong, 6l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 5l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any(1l.toLong, 5l.toLong))));\n    assert(extractIndexList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 6l.toLong, 6l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 7l.toLong))).equals((Any())));\n    }\n\n}\n",
      "timestamp": 1665517330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpczdv_469.scala:13:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                                                                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpczdv_469.scala:14:309 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractIndexList((List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong)), (List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong))).equals((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}