{
  "name": "mbpp_9_find_Rotations",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    def findRotations(str : String) : Long = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_9_find_Rotations.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(findRotations((\"aaaa\")) == (1l));\n    assert(findRotations((\"ab\")) == (2l));\n    assert(findRotations((\"abc\")) == (3l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val n = str.length\n        val str2 = str + str\n        var count = 0\n        for (i <- 1 to n) {\n            if (str2.substring(i, i + n) == str) {\n                count += 1\n            }\n        }\n        count",
    "        var rotations = 0\n        var str2 = str\n        while (str2.length > 0) {\n            str2 = str2.substring(1) + str2(0)\n            if (str2 == str) return rotations\n            rotations += 1\n        }\n        return -1",
    "        val n = str.length\n        val str2 = str + str\n        var min = n\n        for (i <- 0 until n) {\n            var j = i\n            var count = 0\n            while (j < i + n && str(j % n) == str2(j)) {\n                j += 1\n                count += 1\n            }\n            min = min min count\n        }\n        min",
    "        val n = str.length\n        val str2 = str + str\n        val lps = Array.fill(n)(0)\n        var i = 1; var len = 0\n        while (i < n) {\n            if (str(i) == str(len)) {\n                len += 1\n                lps(i) = len\n                i += 1\n            } else {\n                if (len != 0) {\n                    len = lps(len - 1)\n                } else {\n                    lps(i) = 0\n                    i += 1\n                }\n            }\n        }\n        var j = 0; var k = 0\n        while (j < 2 * n) {\n            if (str2(j) == str(k)) {\n                j += 1; k += 1\n                if (k == n) return j - k\n            } else {\n                if (k != 0) k = lps(k - 1)\n                else j += 1\n            }\n        }\n        return -1",
    "        val n = str.length\n        val lps = Array.fill(n)(0)\n        var len = 0\n        var i = 1\n        while (i < n) {\n            if (str(i) == str(len)) {\n                len += 1\n                lps(i) = len\n                i += 1\n            } else {\n                if (len != 0) {\n                    len = lps(len - 1)\n                } else {\n                    lps(i) = 0\n                    i += 1\n                }\n            }\n        }\n        if (lps(n - 1) == 0) {\n            n\n        } else {\n            n - lps(n - 1)\n        }",
    "        val n = str.length\n        val str2 = str + str\n        val suffixArray = new SuffixArray(str2)\n        var min = Long.MaxValue\n        for (i <- 0 until n) {\n            val index = suffixArray.index(i)\n            if (index < n) {\n                min = min min (index + n - i)\n            }\n        }\n        min",
    "        val n = str.length\n        val str1 = str + str\n        var count = 0\n        var i = 0\n        var j = 1\n        while (i < n && j < n) {\n            var k = 0\n            while (k < n) {\n                if (str1(i + k) != str1(j + k)) {\n                    if (str1(i + k) > str1(j + k)) {\n                        i = i + k + 1\n                    } else {\n                        j = j + k + 1\n                    }\n                    if (i == j) {\n                        j = j + 1\n                    }\n                    count = count + 1\n                    break\n                }\n                k = k + 1\n            }\n            if (k == n) {\n                return min(i, j)\n            }\n        }\n        return min(i, j)",
    "        val n = str.length\n        val suffixes = Array.fill(n)(0)\n        val lcp = Array.fill(n)(0)\n        for (i <- 0 until n) {\n            suffixes(i) = i\n        }\n        suffixes.sortWith((a, b) => str.substring(a) < str.substring(b))\n        for (i <- 1 until n) {\n            var j = 0\n            while (str(i + j) == str(suffixes(i - 1) + j)) {\n                j += 1\n            }\n            lcp(i) = j\n        }\n        var min = Long.MaxValue\n        for (i <- 0 until n) {\n            val cur = suffixes(i)\n            val next = if (i == n - 1) suffixes(0) else suffixes(i + 1)\n            val l = lcp(i + 1)\n            val r = if (cur + l < n) lcp(i + 2) else 0\n            val curMin = min(cur + l, next + l)\n            if (curMin < min) min = curMin\n        }\n        min",
    "        val n = str.length\n        val str2 = str + str\n        val lps = Array.fill(2 * n)(0)\n        var i = 1\n        var len = 0\n        while (i < 2 * n) {\n            if (str2(i) == str2(len)) {\n                len += 1\n                lps(i) = len\n                i += 1\n            } else {\n                if (len != 0) {\n                    len = lps(len - 1)\n                } else {\n                    lps(i) = 0\n                    i += 1\n                }\n            }\n        }\n        lps(2 * n - 1)",
    "        var min = Long.MaxValue\n        for (i <- 0 to str.length - 1) {\n            val s = str.substring(i) + str.substring(0, i)\n            val n = s.toLong\n            if (n < min) min = n\n        }\n        min",
    "        val n = str.length\n        val str2 = str + str\n        val suffixArray = Array.ofDim[Int](n)\n        for (i <- 0 until n) suffixArray(i) = i\n        val suffixArray2 = suffixArray.sortWith((i, j) => str2.substring(i) < str2.substring(j))\n        var min = n\n        for (i <- 0 until n) {\n            if (suffixArray2(i) < min) min = suffixArray2(i)\n        }\n        return min",
    "        val n = str.length\n        val str2 = str + str\n        val suffixArray = Array.ofDim[Int](n)\n        for (i <- 0 until n) suffixArray(i) = i\n        suffixArray.sortWith((x, y) => str2.substring(x) < str2.substring(y))\n        for (i <- 0 until n) if (suffixArray(i) == 0) return i.toLong\n        return 0",
    "        val n = str.length\n        val str2 = str + str\n        var i = 0\n        var j = 1\n        var k = 0\n        while (i < n && j < n && k < n) {\n            if (str2(i + k) == str2(j + k)) {\n                k += 1\n            } else if (str2(i + k) > str2(j + k)) {\n                i = i + k + 1\n                if (i <= j) i = j + 1\n                k = 0\n            } else {\n                j = j + k + 1\n                if (j <= i) j = i + 1\n                k = 0\n            }\n        }\n        min(i, j)",
    "        val n = str.length\n        val suffixes = new Array[String](n)\n        for (i <- 0 until n) suffixes(i) = str.substring(i)\n        val sortedSuffixes = suffixes.sortWith(_ < _)\n        var count = 0\n        for (i <- 0 until n) {\n            if (sortedSuffixes(i) == str.substring(i)) count += 1\n        }\n        count",
    "        val n = str.length\n        var count = 0\n        for (i <- 0 until n) {\n            if (str(i) == '1') {\n                count += 1\n            }\n        }\n        min(count, n - count)",
    "        val n = str.length\n        val str2 = str + str\n        var count = 0\n        var i = 0\n        var j = 1\n        while (i < n && j < n) {\n            var k = 0\n            while (k < n && str2(i + k) == str2(j + k)) {\n                k += 1\n            }\n            if (k == n) {\n                return count\n            }\n            if (str2(i + k) > str2(j + k)) {\n                i = i + k + 1\n                if (i == j) i += 1\n            } else {\n                j = j + k + 1\n                if (i == j) j += 1\n            }\n            count += 1\n        }\n        count",
    "        val n = str.length\n        val s = str + str\n        var i = 1\n        var j = 0\n        var k = 0\n        while (i < n) {\n            k = 0\n            while (k < n && s(i + k) == s(j + k)) k += 1\n            if (k == n) return i\n            if (s(i + k) > s(j + k)) {\n                i += k + 1\n                if (i == j) i += 1\n            } else {\n                j += k + 1\n                if (i == j) j += 1\n            }\n        }\n        i",
    "        val n = str.length\n        val s = str + str\n        var i = 0\n        var j = 1\n        var k = 0\n        while (i < n && j < n && k < n) {\n            if (s(i + k) == s(j + k)) {\n                k += 1\n            } else if (s(i + k) > s(j + k)) {\n                i = i + k + 1\n                if (i <= j) i = j + 1\n                k = 0\n            } else {\n                j = j + k + 1\n                if (j <= i) j = i + 1\n                k = 0\n            }\n        }\n        min(i, j)",
    "        val n = str.length\n        var count = 0\n        for (i <- 0 until n) {\n            if (str(i) == '1') count += 1\n        }\n        min(count, n - count)",
    "        val n = str.length\n        val str2 = str + str\n        var count = Array.ofDim[Int](n)\n        var i = 1\n        var j = 0\n        while (i < n) {\n            if (str2(i) == str2(j)) {\n                count(i) = j + 1\n                i += 1\n                j += 1\n            } else {\n                if (j != 0) {\n                    j = count(j - 1)\n                } else {\n                    count(i) = 0\n                    i += 1\n                }\n            }\n        }\n        count(n - 1)",
    "        val n = str.length\n        val suffixes = new Array[String](n)\n        for (i <- 0 until n) suffixes(i) = str.substring(i)\n        val sortedSuffixes = suffixes.sorted\n        var minRotations = 0\n        for (i <- 0 until n) {\n            if (sortedSuffixes(i) == str) {\n                minRotations = i\n                break\n            }\n        }\n        minRotations",
    "        val n = str.length\n        val arr = str.toCharArray\n        val arr2 = new Array[Char](n)\n        for (i <- 0 until n) arr2(i) = arr(i)\n        var count = 0\n        var i = 0\n        while (i < n - 1) {\n            var j = i\n            while (j < n - 1 && arr(j) <= arr(j + 1)) j += 1\n            if (j == n - 1) return count\n            while (j < n - 1) {\n                val temp = arr(j)\n                arr(j) = arr(j + 1)\n                arr(j + 1) = temp\n                j += 1\n            }\n            count += 1\n            i += 1\n        }\n        count",
    "        val n = str.length\n        val s = str + str\n        var i = 0\n        var j = 1\n        while (i < n && j < n) {\n            var k = 0\n            while (k < n && s(i + k) == s(j + k)) k += 1\n            if (k == n) return j\n            if (s(i + k) > s(j + k)) {\n                i = max(i + k + 1, j + 1)\n                j = i + 1\n            } else {\n                j += k + 1\n            }\n        }\n        i",
    "        val n = str.length\n        val str2 = str + str\n        var count = 0\n        for (i <- 0 until n) {\n            if (str2.substring(i, i + n) == str) return count\n            count += 1\n        }\n        return -1",
    "        val n = str.length\n        val suffixes = (0 until n).map(i => str.substring(i, n) + str.substring(0, i))\n        val sortedSuffixes = suffixes.sortWith(_ < _)\n        val index = sortedSuffixes.indexOf(str)\n        if (index == 0) 0\n        else n - index",
    "        val n = str.length\n        val str2 = str + str\n        val suffixArray = new SuffixArray(str2)\n        val lcp = suffixArray.getLCP\n        var min = n\n        for (i <- 0 until n) {\n            val l = lcp(i)\n            val r = lcp(i + 1)\n            val m = min(l, r)\n            if (m < min) min = m\n        }\n        return n - min",
    "        val n = str.length\n        var count = 0\n        for (i <- 1 until n) {\n            if (str(i) < str(i - 1)) {\n                count = i\n                break\n            }\n        }\n        count",
    "        val n = str.length\n        val str2 = str + str\n        var count = 0\n        for (i <- 1 to n) {\n            if (str2.substring(i, i + n) == str) {\n                count += 1\n            }\n        }\n        count",
    "        val n = str.length\n        val str1 = str + str\n        var count = 0\n        for (i <- 0 until n) {\n            if (str1(i) != str1(i + 1)) count += 1\n        }\n        count",
    "        val n = str.length\n        val str2 = str + str\n        var count = 0\n        for (i <- 0 until n) {\n            if (str2.substring(i, i + n) == str) {\n                count += 1\n            }\n        }\n        count",
    "        val n = str.length\n        val arr = str.toCharArray\n        var count = 0\n        var i = 0\n        while (i < n - 1) {\n            if (arr(i) > arr(i + 1)) {\n                count += 1\n                i += 1\n            }\n            i += 1\n        }\n        count",
    "        val n = str.length\n        val str2 = str + str\n        var i = 0\n        var j = 1\n        var k = 0\n        while (i < n && j < n && k < n) {\n            val t = str2(i + k) - str2(j + k)\n            if (t == 0) k += 1\n            else {\n                if (t > 0) i += k + 1\n                else j += k + 1\n                if (i == j) j += 1\n                k = 0\n            }\n        }\n        min(i, j)",
    "        val n = str.length\n        val s = str + str\n        var i = 0\n        var j = 1\n        while (i < n && j < n) {\n            var k = 0\n            while (k < n && s(i + k) == s(j + k)) k += 1\n            if (k == n) return j\n            if (s(i + k) > s(j + k)) {\n                i = max(i + k + 1, j + 1)\n                j = i + 1\n            } else {\n                j = j + k + 1\n                i = max(i + 1, j - 1)\n            }\n        }\n        j",
    "        val str2 = str + str\n        val n = str.length\n        var min = Long.MaxValue\n        for (i <- 0 until n) {\n            var count = 0\n            for (j <- 0 until n) {\n                if (str(j) != str2(i + j)) count += 1\n            }\n            min = min min count\n        }\n        min",
    "        val n = str.length\n        val suffixes = (0 until n).map(i => str.substring(i, n) + str.substring(0, i))\n        val sortedSuffixes = suffixes.sortWith(_ < _)\n        val index = sortedSuffixes.indexOf(str)\n        if (index == 0) n else n - index",
    "        var min = Long.MaxValue\n        for (i <- 0 until str.length) {\n            var count = 0\n            for (j <- 0 until str.length) {\n                if (str(j) != str((i + j) % str.length)) count += 1\n            }\n            min = min min count\n        }\n        min",
    "        val str2 = str + str\n        val n = str.length\n        val lps = Array.fill(n)(0)\n        var len = 0\n        var i = 1\n        while (i < n) {\n            if (str(i) == str(len)) {\n                len += 1\n                lps(i) = len\n                i += 1\n            } else {\n                if (len != 0) {\n                    len = lps(len - 1)\n                } else {\n                    lps(i) = 0\n                    i += 1\n                }\n            }\n        }\n        val res = lps(n - 1)\n        if (res == 0) n else n - res",
    "        var min = Long.MaxValue\n        for (i <- 0 until str.length) {\n            val s = str.substring(i) + str.substring(0, i)\n            if (s < min) min = s\n        }\n        min",
    "        val n = str.length\n        val str2 = str + str\n        var count = 0\n        var i = 0\n        while (i < n) {\n            var j = i\n            var k = 0\n            while (j < i + n && str(k) == str2(j)) {\n                j += 1\n                k += 1\n            }\n            if (j == i + n) return count\n            if (str(k) > str2(j)) count = i + 1\n            i += 1\n        }\n        return count",
    "        val n = str.length\n        val str2 = str + str\n        var count = 0\n        var i = 0\n        var j = 1\n        while (i < n && j < n) {\n            var k = 0\n            while (k < n && str2(i + k) == str2(j + k)) k += 1\n            if (k == n) return count\n            if (str2(i + k) > str2(j + k)) {\n                i += k + 1\n                if (i == j) {\n                    i += 1\n                }\n            } else {\n                j += k + 1\n                if (i == j) {\n                    j += 1\n                }\n            }\n            count += 1\n        }\n        count",
    "        val n = str.length\n        val str2 = str + str\n        var i = 0\n        var j = 1\n        var k = 0\n        while (i < n && j < n && k < n) {\n            val t = str2(i + k) - str2(j + k)\n            if (t == 0) k += 1\n            else {\n                if (t > 0) i += k + 1\n                else j += k + 1\n                if (i == j) j += 1\n                k = 0\n            }\n        }\n        min(i, j)",
    "        val len = str.length\n        val s = str + str\n        var min = len\n        for (i <- 0 until len) {\n            var j = i\n            var count = 0\n            while (j < len + i && s(j) != s(j - i)) {\n                count += 1\n                j += 1\n            }\n            if (j == len + i) min = min min count\n        }\n        min",
    "        val n = str.length\n        val str2 = str + str\n        var count = 0\n        for (i <- 0 until n) {\n            if (str2.substring(i, i + n) == str) return count\n            count += 1\n        }\n        return -1",
    "        val n = str.length\n        val s = str + str\n        var i = 1\n        while (i < n) {\n            if (s.substring(i, i + n) == str) return i\n            i += 1\n        }\n        return -1",
    "        val n = str.length\n        var count = 0\n        for (i <- 0 until n) {\n            if (str(i) != str((i + 1) % n)) count += 1\n        }\n        return count",
    "        val n = str.length\n        val str2 = str + str\n        val lps = Array.fill(n)(0)\n        var i = 1; var j = 0; var len = 0\n        while (i < n) {\n            if (str(i) == str(j)) {\n                len += 1\n                lps(i) = len\n                i += 1\n                j += 1\n            } else {\n                if (len != 0) {\n                    len = lps(len - 1)\n                    j = len\n                } else {\n                    lps(i) = 0\n                    i += 1\n                }\n            }\n        }\n        var min = n\n        for (i <- 0 until n) {\n            if (lps(i) == n - i) min = min min i\n        }\n        min",
    "        val n = str.length\n        val str2 = str + str\n        val z = Array.fill(2 * n)(0)\n        var l = 0; var r = 0\n        for (i <- 1 until 2 * n) {\n            if (i > r) {\n                l = i; r = i\n                while (r < 2 * n && str2(r - l) == str2(r)) r += 1\n                z(i) = r - l; r -= 1\n            } else {\n                val k = i - l\n                if (z(k) < r - i + 1) z(i) = z(k)\n                else {\n                    l = i\n                    while (r < 2 * n && str2(r - l) == str2(r)) r += 1\n                    z(i) = r - l; r -= 1\n                }\n            }\n        }\n        var ans = 2 * n\n        for (i <- 1 until 2 * n) if (z(i) == n) ans = min(ans, i)\n        ans",
    "        var count = 0\n        val strLength = str.length\n        val strArray = str.toCharArray\n        for (i <- 0 until strLength) {\n            if (strArray(i) == '1') {\n                count += 1\n            }\n        }\n        if (count == 0) {\n            return 0\n        }\n        var min = Int.MaxValue\n        var count1 = 0\n        for (i <- 0 until strLength) {\n            if (strArray(i) == '1') {\n                count1 += 1\n            }\n            if (strArray(i) == '0') {\n                min = min.min(count1)\n            }\n        }\n        count1 = 0\n        for (i <- strLength - 1 to 0 by -1) {\n            if (strArray(i) == '1') {\n                count1 += 1\n            }\n            if (strArray(i) == '0') {\n                min = min.min(count1)\n            }\n        }\n        return min.toLong",
    "        val n = str.length\n        val str2 = str + str\n        var count = 0\n        for (i <- 0 until n) {\n            if (str2(i) != str2(i + n)) count += 1\n        }\n        count",
    "        val n = str.length\n        val str2 = str + str\n        val lps = Array.fill(n)(0)\n        var len = 0\n        var i = 1\n        while (i < n) {\n            if (str(i) == str(len)) {\n                len += 1\n                lps(i) = len\n                i += 1\n            } else {\n                if (len != 0) {\n                    len = lps(len - 1)\n                } else {\n                    lps(i) = 0\n                    i += 1\n                }\n            }\n        }\n        var j = 0\n        var k = 0\n        while (j < n) {\n            if (str2(j) == str(k)) {\n                j += 1\n                k += 1\n            } else {\n                if (k != 0) {\n                    k = lps(k - 1)\n                } else {\n                    j += 1\n                }\n            }\n        }\n        k",
    "        val str2 = str + str\n        val str2Len = str2.length\n        val strLen = str.length\n        var min = strLen\n        for (i <- 0 until strLen) {\n            var count = 0\n            for (j <- 0 until strLen) {\n                if (str2(i + j) != str(j)) count += 1\n            }\n            min = min min count\n        }\n        min",
    "        val str2 = str + str\n        val n = str.length\n        val lps = Array.fill(n)(0)\n        var len = 0\n        var i = 1\n        while (i < n) {\n            if (str(i) == str(len)) {\n                len += 1\n                lps(i) = len\n                i += 1\n            } else {\n                if (len != 0) len = lps(len - 1)\n                else {\n                    lps(i) = 0\n                    i += 1\n                }\n            }\n        }\n        val res = lps(n - 1)\n        if (res == n) 0\n        else if (res == 0) n\n        else n - res",
    "        val n = str.length\n        val str2 = str + str\n        var count = 0\n        for (i <- 1 until n) {\n            if (str2.substring(i, i + n) < str) count += 1\n        }\n        count",
    "        val n = str.length\n        val str1 = str + str\n        var count = 0\n        var i = 1\n        var j = 0\n        while (i < n) {\n            if (str1(i) == str1(j)) {\n                i += 1\n                j += 1\n            } else if (j == 0) {\n                i += 1\n            } else {\n                j = 0\n            }\n        }\n        j",
    "        val n = str.length\n        val s = str + str\n        var i = 0\n        var j = 1\n        var k = 0\n        while (i < n && j < n && k < n) {\n            val t = s(i + k) - s(j + k)\n            if (t == 0) k += 1\n            else {\n                if (t > 0) i += k + 1\n                else j += k + 1\n                if (i == j) j += 1\n                k = 0\n            }\n        }\n        min(i, j)",
    "        val n = str.length\n        val suffixes = new Array[String](n)\n        for (i <- 0 until n) suffixes(i) = str.substring(i, n)\n        val suffixesSorted = suffixes.sorted\n        var min = Long.MaxValue\n        for (i <- 0 until n) {\n            val suffix = suffixesSorted(i)\n            val index = str.indexOf(suffix)\n            val rotations = n - index\n            if (rotations < min) min = rotations\n        }\n        min",
    "        val n = str.length\n        val str1 = str + str\n        var count = 0\n        var i = 0\n        var j = 1\n        while (i < n && j < n) {\n            val l = str1(i)\n            val r = str1(j)\n            if (l == r) {\n                i += 1\n                j += 1\n            } else if (l < r) {\n                i = j\n                j += 1\n                count = 0\n            } else {\n                j = i + 1\n                count += 1\n                if (count == n) return -1\n            }\n        }\n        i",
    "        val n = str.length\n        val str2 = str + str\n        var count = 0\n        for (i <- 0 until n) {\n            if (str2.substring(i, i + n) == str) return i\n        }\n        return -1",
    "        val n = str.length\n        val arr = str.toCharArray\n        val arr2 = str.toCharArray\n        var count = 0\n        for (i <- 0 until n) {\n            if (arr(i) != arr2(n - i - 1)) count += 1\n        }\n        count",
    "        val n = str.length\n        val str2 = str + str\n        val lps = Array.fill(n)(0)\n        var i = 1\n        var len = 0\n        while (i < n) {\n            if (str2(i) == str2(len)) {\n                len += 1\n                lps(i) = len\n                i += 1\n            } else {\n                if (len != 0) len = lps(len - 1)\n                else {\n                    lps(i) = 0\n                    i += 1\n                }\n            }\n        }\n        lps(n - 1)",
    "        val n = str.length\n        val s = str + str\n        var i = 0\n        var j = 1\n        var k = 0\n        while (i < n && j < n && k < n) {\n            if (s(i + k) == s(j + k)) k += 1\n            else if (s(i + k) > s(j + k)) {\n                i += k + 1\n                if (i <= j) i = j + 1\n                k = 0\n            }\n            else if (s(i + k) < s(j + k)) {\n                j += k + 1\n                if (j <= i) j = i + 1\n                k = 0\n            }\n        }\n        min(i, j)",
    "        val n = str.length\n        var count = 0\n        for (i <- 1 until n) {\n            if (str(i) < str(i - 1)) {\n                count += 1\n            }\n        }\n        count",
    "        val n = str.length\n        val str2 = str + str\n        val suffixArray = str2.indices.map(i => (i, str2.substring(i, i + n))).sortBy(_._2).map(_._1)\n        val lcp = Array.fill(n)(0)\n        for (i <- 1 until n) {\n            var j = 0\n            while (str2(suffixArray(i) + j) == str2(suffixArray(i - 1) + j)) j += 1\n            lcp(i) = j\n        }\n        val min = suffixArray.zip(lcp).minBy(_._2)._2\n        suffixArray.filter(_ < n).map(n - _ - min).min",
    "        val n = str.length\n        val s = str + str\n        var i = 1\n        var j = 0\n        var k = 0\n        var b = Array.fill(n + 1)(0)\n        b(0) = -1\n        while (i < n) {\n            while (j >= 0 && s(i) != s(j)) j = b(j)\n            i += 1\n            j += 1\n            b(i) = j\n        }\n        k = n - j\n        if (k < n) k else 0",
    "        val n = str.length\n        val str2 = str + str\n        val suffixArray = Array.ofDim[Int](n)\n        for (i <- 0 until n) suffixArray(i) = i\n        suffixArray.sortWith((a, b) => str2.substring(a, a + n) < str2.substring(b, b + n))\n        for (i <- 0 until n) if (suffixArray(i) == 0) return i.toLong\n        -1",
    "        val n = str.length\n        val str1 = str + str\n        var count = 0\n        var i = 0\n        while (i < n) {\n            count = 0\n            var j = i\n            var k = 0\n            while (j < i + n) {\n                if (str1(j) != str(k)) count += 1\n                j += 1\n                k += 1\n            }\n            if (count == 0) return i\n            i += 1\n        }\n        return -1",
    "        val n = str.length\n        val arr = str.toCharArray\n        val arr2 = new Array[Int](n)\n        for (i <- 0 until n) {\n            arr2(i) = arr(i) - 'a'\n        }\n        val count = new Array[Int](26)\n        for (i <- 0 until n) {\n            count(arr2(i)) += 1\n        }\n        var index = -1\n        for (i <- 0 until 26) {\n            if (count(i) > 0) {\n                index = i\n                break\n            }\n        }\n        var start = 0\n        for (i <- 0 until n) {\n            if (arr2(i) == index) {\n                start = i\n                break\n            }\n        }\n        var curr_count = 0\n        var res = start\n        for (i <- start until n) {\n            if (arr2(i) == index) {\n                curr_count += 1\n            }\n        }\n        for (i <- 1 until n) {\n            val prev_index = (start + n - i) % n\n            if (arr2(prev_index) == index) {\n                curr_count += 1\n            }\n            val next_index = (start + i) % n\n            if (arr2(next_index) == index) {\n                curr_count -= 1\n            }\n            if (curr_count > 0 && i < res) {\n                res = i\n            }\n        }\n        res",
    "        val n = str.length\n        val arr = str.toCharArray\n        val arr2 = new Array[Int](n)\n        for (i <- 0 until n) {\n            arr2(i) = arr(i) - 'a'\n        }\n        val count = new Array[Int](26)\n        for (i <- 0 until n) {\n            count(arr2(i)) += 1\n        }\n        var index = -1\n        for (i <- 0 until 26) {\n            if (count(i) > 0) {\n                index = i\n                break\n            }\n        }\n        var start = 0\n        var curr_count = 0\n        for (i <- 0 until n) {\n            if (arr2(i) == index) {\n                curr_count += 1\n            }\n        }\n        var min_rotations = n\n        for (i <- 0 until n) {\n            if (arr2(i) == index) {\n                start = i\n                break\n            }\n        }\n        for (i <- 0 until n) {\n            val curr_rotations = (n - i + start) % n\n            val curr_count = curr_rotations + 1 - curr_rotations / n\n            min_rotations = min(min_rotations, curr_rotations)\n        }\n        min_rotations",
    "        val n = str.length\n        val suffixes = new Array[String](n)\n        for (i <- 0 until n) suffixes(i) = str.substring(i)\n        val sortedSuffixes = suffixes.sortWith(_ < _)\n        for (i <- 0 until n) {\n            if (sortedSuffixes(i) == str) return i\n        }\n        -1",
    "        val n = str.length\n        val arr = str.toCharArray\n        val arr2 = str.toCharArray\n        var count = 0\n        for (i <- 0 until n) {\n            var j = 0\n            var k = i\n            while (j < n) {\n                arr2(j) = arr(k)\n                j += 1\n                k = (k + 1) % n\n            }\n            if (arr2.mkString == str) return count\n            count += 1\n        }\n        return -1",
    "        val n = str.length\n        val str2 = str + str\n        var count = 0\n        var i = 0\n        while (i < n) {\n            var j = i\n            var k = 0\n            while (j < n + i) {\n                if (str(k) != str2(j)) {\n                    break\n                }\n                j += 1\n                k += 1\n            }\n            if (j == n + i) {\n                return i\n            }\n            i += 1\n        }\n        return -1",
    "        val n = str.length\n        val str2 = str + str\n        var min = n\n        for (i <- 0 until n) {\n            var j = 0\n            while (j < n && str2(i + j) == str(j)) j += 1\n            if (j < min) min = j\n        }\n        min",
    "        var rotations = 0\n        var str1 = str\n        var str2 = str\n        for (i <- 1 to str.length) {\n            str1 = str1.tail + str1.head\n            if (str1 == str2) return rotations\n            rotations += 1\n        }\n        rotations",
    "        val n = str.length\n        var count = 0\n        for (i <- 0 until n) {\n            if (str(i) == '1') count += 1\n        }\n        min(count, n - count)",
    "        val n = str.length\n        var count = 0\n        for (i <- 1 until n) {\n            if (str(i) != str(0)) count += 1\n        }\n        count",
    "        val n = str.length\n        val str2 = str + str\n        var i = 0\n        var j = 1\n        var k = 0\n        while (i < n && j < n && k < n) {\n            if (str2(i + k) == str2(j + k)) k += 1\n            else if (str2(i + k) > str2(j + k)) {\n                i = i + k + 1\n                if (i <= j) i = j + 1\n                k = 0\n            } else {\n                j = j + k + 1\n                if (j <= i) j = i + 1\n                k = 0\n            }\n        }\n        min(i, j)",
    "        val n = str.length\n        val str2 = str + str\n        var min = n\n        for (i <- 0 until n) {\n            var j = i\n            var k = 0\n            while (j < n + i && str2(j) == str(k)) {\n                j += 1\n                k += 1\n            }\n            if (j == n + i) {\n                min = min min (i + 1)\n            }\n        }\n        min",
    "        var min = Long.MaxValue\n        for (i <- 0 until str.length) {\n            var temp = str.substring(i) + str.substring(0, i)\n            if (temp < min) min = temp\n        }\n        min",
    "        val n = str.length\n        val s = str + str\n        var i = 0\n        var j = 1\n        var k = 0\n        while (i < n && j < n && k < n) {\n            if (s(i + k) == s(j + k)) k += 1\n            else if (s(i + k) > s(j + k)) {\n                i += k + 1\n                if (i <= j) i = j + 1\n                k = 0\n            }\n            else {\n                j += k + 1\n                if (j <= i) j = i + 1\n                k = 0\n            }\n        }\n        min(i, j)",
    "        val str1 = str + str\n        var min = str.length\n        for (i <- 0 until str.length) {\n            var count = 0\n            for (j <- 0 until str.length) {\n                if (str1(i + j) != str(j)) count += 1\n            }\n            min = min min count\n        }\n        min",
    "        var min = Long.MaxValue\n        for (i <- 0 to str.length - 1) {\n            var count = 0\n            var j = i\n            var k = 0\n            while (k < str.length) {\n                if (str(j) != str(k)) count += 1\n                j = (j + 1) % str.length\n                k += 1\n            }\n            min = min min count\n        }\n        min",
    "        val n = str.length\n        val str2 = str + str\n        var count = 0\n        for (i <- 0 until n) {\n            if (str2.substring(i, i + n) == str) {\n                count += 1\n            }\n        }\n        count",
    "        val n = str.length\n        val str2 = str + str\n        var count = 0\n        for (i <- 0 until n) {\n            var j = 0\n            while (j < n && str2(i + j) == str(j)) j += 1\n            if (j == n) return count\n            count += 1\n        }\n        count",
    "        val n = str.length\n        val str2 = str + str\n        var count = 0\n        var i = 0\n        while (i < n) {\n            var j = i + 1\n            while (j < n) {\n                if (str2(i) == str2(j)) {\n                    var k = 0\n                    while (k < n) {\n                        if (str2(i + k) != str2(j + k)) break\n                        k += 1\n                    }\n                    if (k == n) return j - i\n                }\n                j += 1\n            }\n            i += 1\n        }\n        return n",
    "        val n = str.length\n        var count = 0\n        for (i <- 0 until n) {\n            if (str(i) == '1') count += 1\n        }\n        min(count, n - count)",
    "        val n = str.length\n        val suffixes = (0 until n).map(i => str.substring(i, n) + str.substring(0, i))\n        val sortedSuffixes = suffixes.sortWith(_ < _)\n        val rotations = sortedSuffixes.zipWithIndex.map(x => (x._1, x._2 + 1)).toMap\n        rotations(str)",
    "        val n = str.length\n        val s = str + str\n        var i = 0\n        var j = 1\n        var k = 0\n        while (i < n && j < n && k < n) {\n            if (s(i + k) == s(j + k)) k += 1\n            else if (s(i + k) > s(j + k)) {\n                i = i + k + 1\n                if (i <= j) i = j + 1\n                k = 0\n            } else {\n                j = j + k + 1\n                if (j <= i) j = i + 1\n                k = 0\n            }\n        }\n        min(i, j)",
    "        val n = str.length\n        var count = 0\n        for (i <- 1 until n) {\n            if (str(i) < str(i - 1)) {\n                count += 1\n            }\n        }\n        count",
    "        val n = str.length\n        val str2 = str + str\n        var i = 0\n        var j = 1\n        var k = 0\n        while (i < n && j < n && k < n) {\n            if (str2(i + k) == str2(j + k)) k += 1\n            else if (str2(i + k) > str2(j + k)) {\n                i += k + 1\n                if (i <= j) i = j + 1\n                k = 0\n            } else {\n                j += k + 1\n                if (j <= i) j = i + 1\n                k = 0\n            }\n        }\n        min(i, j)",
    "        var rotations = 0\n        for (i <- 0 until str.length) {\n            if (str(i) == '1') {\n                rotations += 1\n            }\n        }\n        rotations",
    "        val str1 = str + str\n        val str2 = str.reverse\n        val str3 = str2 + str2\n        val str4 = str.reverse + str.reverse\n        val str5 = str + str.reverse\n        val str6 = str.reverse + str\n        val str7 = str.reverse + str.reverse\n        val str8 = str + str\n        val str9 = str.reverse + str.reverse\n        val str10 = str + str.reverse\n        val str11 = str.reverse + str\n        val str12 = str + str\n        val str13 = str.reverse + str.reverse\n        val str14 = str + str.reverse\n        val str15 = str.reverse + str\n        val str16 = str + str\n        val str17 = str.reverse + str.reverse\n        val str18 = str + str.reverse\n        val str19 = str.reverse + str\n        val str20 = str + str\n        val str21 = str.reverse + str.reverse\n        val str22 = str + str.reverse\n        val str23 = str.reverse + str\n        val str24 = str + str\n        val str25 = str.reverse + str.reverse\n        val str26 = str + str.reverse\n        val str27 = str.reverse + str\n        val str28 = str + str\n        val str29 = str.reverse + str.reverse\n        val str30 = str + str.reverse\n        val str31 = str.reverse + str\n        val str32 = str + str\n        val str33 = str.reverse + str.reverse\n        val str34 = str + str.reverse\n        val str35 = str.reverse + str\n        val str36 = str + str\n        val str37 = str.reverse + str.reverse\n        val str38 = str + str.reverse\n        val str39 = str.reverse + str\n        val str40 = str + str\n        val str41 = str.reverse + str.reverse\n        val str42 = str + str.reverse\n        val str43 = str.reverse + str\n        val str44 = str + str\n        val str45 = str.reverse + str.reverse\n        val str46 = str + str.reverse\n        val str47 =",
    "        val n = str.length\n        val str2 = str + str\n        var i = 0\n        var j = 1\n        var k = 0\n        while (i < n && j < n && k < n) {\n            if (str2(i + k) == str2(j + k)) k += 1\n            else if (str2(i + k) > str2(j + k)) {\n                i += k + 1\n                if (i <= j) i = j + 1\n                k = 0\n            } else if (str2(i + k) < str2(j + k)) {\n                j += k + 1\n                if (j <= i) j = i + 1\n                k = 0\n            }\n        }\n        min(i, j)",
    "        val n = str.length\n        val s = str + str\n        val z = Array.fill(n)(0L)\n        var l = 0; var r = 0\n        for (i <- 1 until n) {\n            if (i > r) {\n                l = i; r = i\n                while (r < n && s(r) == s(r - l)) r += 1\n                z(i) = r - l; r -= 1\n            } else {\n                val k = i - l\n                if (z(k) < r - i + 1) z(i) = z(k)\n                else {\n                    l = i;\n                    while (r < n && s(r) == s(r - l)) r += 1\n                    z(i) = r - l; r -= 1\n                }\n            }\n        }\n        var res = n\n        for (i <- 0 until n) {\n            if (z(i) == n) res = min(res, i)\n        }\n        res",
    "        val n = str.length\n        var count = 0\n        var i = 0\n        while (i < n) {\n            if (str(i) == '1') {\n                count += 1\n                i += 1\n            }\n            else {\n                var j = i + 1\n                while (j < n && str(j) == '0') j += 1\n                if (j == n) return 0\n                i = j\n            }\n        }\n        return count",
    "        val n = str.length\n        val s = str + str\n        var i = 0\n        var j = 1\n        while (i < n && j < n) {\n            var k = 0\n            while (k < n && s(i + k) == s(j + k)) k += 1\n            if (k == n) return j\n            if (s(i + k) > s(j + k)) {\n                i = max(i + k + 1, j + 1)\n                j = i + 1\n            } else {\n                j += k + 1\n            }\n        }\n        i",
    "        val n = str.length\n        var count = 0\n        for (i <- 0 until n) {\n            if (str(i) == '1') count += 1\n        }\n        min(count, n - count)",
    "        val n = str.length\n        val str2 = str + str\n        var i = 0\n        var j = 1\n        var k = 0\n        while (i < n && j < n && k < n) {\n            if (str2(i + k) == str2(j + k)) k += 1\n            else if (str2(i + k) > str2(j + k)) {\n                i = i + k + 1\n                if (i <= j) i = j + 1\n                k = 0\n            }\n            else if (str2(i + k) < str2(j + k)) {\n                j = j + k + 1\n                if (j <= i) j = i + 1\n                k = 0\n            }\n        }\n        min(i, j)",
    "        val n = str.length\n        val suffixArray = Array.ofDim[Int](n)\n        for (i <- 0 until n) suffixArray(i) = i\n        val suffixArrayComparator = new Comparator[Int] {\n            def compare(i : Int, j : Int) : Int = {\n                var k = 0\n                while (k < n) {\n                    if (str(i + k) != str(j + k)) return str(i + k) - str(j + k)\n                    k += 1\n                }\n                0\n            }\n        }\n        java.util.Arrays.sort(suffixArray, suffixArrayComparator)\n        var result = 0\n        for (i <- 0 until n) {\n            if (suffixArray(i) == 0) {\n                result = i\n                break\n            }\n        }\n        result",
    "        val n = str.length\n        val str1 = str + str\n        val lps = Array.ofDim[Int](n)\n        var len = 0\n        var i = 1\n        while (i < n) {\n            if (str1(i) == str1(len)) {\n                len += 1\n                lps(i) = len\n                i += 1\n            } else {\n                if (len != 0) len = lps(len - 1)\n                else {\n                    lps(i) = 0\n                    i += 1\n                }\n            }\n        }\n        return lps(n - 1).toLong",
    "        val n = str.length\n        val str2 = str + str\n        val suffixes = str2.sliding(n).toList.zipWithIndex\n        val sortedSuffixes = suffixes.sortBy(x => x._1)\n        val minSuffix = sortedSuffixes.head\n        minSuffix._2",
    "        val n = str.length\n        val s = str + str\n        var i = 1\n        var j = 0\n        var k = 0\n        while (i < n) {\n            k = 0\n            while (k < n && s(i + k) == s(j + k)) k += 1\n            if (k == n) return i\n            if (s(i + k) > s(j + k)) {\n                i += k + 1\n                if (i == j) i += 1\n            } else {\n                j += k + 1\n                if (i == j) j += 1\n            }\n        }\n        i",
    "        val n = str.length\n        val str1 = str + str\n        var count = 0\n        for (i <- 1 to n) {\n            if (str1.substring(i, i + n) == str) {\n                count += 1\n            }\n        }\n        count",
    "        val n = str.length\n        var count = 0\n        for (i <- 0 until n) {\n            if (str(i) == '1') count += 1\n        }\n        val ones = count\n        var zeros = n - ones\n        var min = ones\n        for (i <- 0 until n) {\n            if (str(i) == '1') ones -= 1\n            else zeros -= 1\n            min = min min (ones + zeros)\n        }\n        min",
    "        val n = str.length\n        val s = str + str\n        var count = 0\n        for (i <- 0 until n) {\n            if (s.substring(i, i + n) == str) return count\n            count += 1\n        }\n        -1",
    "        var min = Long.MaxValue\n        for (i <- 0 until str.length) {\n            var s = str.substring(i) + str.substring(0, i)\n            if (s < min) min = s\n        }\n        min",
    "        val n = str.length\n        val suffixes = str.indices.map(i => str.substring(i, n) + str.substring(0, i))\n        suffixes.zipWithIndex.minBy(_._1)._2",
    "        val n = str.length\n        val str2 = str + str\n        var count = 0\n        var i = 0\n        while (i < n) {\n            var j = i\n            var k = 0\n            while (j < i + n && str(k) == str2(j)) {\n                j += 1\n                k += 1\n            }\n            if (j == i + n) return count\n            if (str(k) > str2(j)) count = i + 1\n            i += 1\n        }\n        count",
    "        val n = str.length\n        val arr = str.toCharArray\n        val arr2 = str.toCharArray\n        var count = 0\n        for (i <- 0 until n) {\n            val temp = arr2(0)\n            for (j <- 0 until n - 1) {\n                arr2(j) = arr2(j + 1)\n            }\n            arr2(n - 1) = temp\n            if (arr2.mkString == arr.mkString) return count\n            count += 1\n        }\n        -1",
    "        val n = str.length\n        val suffixes = (0 until n).map(i => str.substring(i, n) + str.substring(0, i))\n        val sortedSuffixes = suffixes.sortWith(_ < _)\n        val index = sortedSuffixes.indexOf(str)\n        if (index == 0) n - 1 else index - 1",
    "        val n = str.length\n        val arr = str.toCharArray\n        var count = 0\n        for (i <- 0 until n) {\n            if (arr(i) == '1') count += 1\n        }\n        var result = Long.MaxValue\n        var prev = 0\n        var curr = 0\n        for (i <- 0 until n) {\n            if (arr(i) == '1') curr += 1\n            if (i >= n / 2) {\n                if (arr(i - n / 2) == '1') prev += 1\n            }\n            result = min(result, prev + count - curr)\n        }\n        result",
    "        val n = str.length\n        val s = str + str\n        var i = 0\n        var j = 1\n        var k = 0\n        while (i < n && j < n && k < n) {\n            if (s(i + k) == s(j + k)) k += 1\n            else if (s(i + k) > s(j + k)) {\n                i += k + 1\n                if (i <= j) i = j + 1\n                k = 0\n            }\n            else if (s(i + k) < s(j + k)) {\n                j += k + 1\n                if (j <= i) j = i + 1\n                k = 0\n            }\n        }\n        min(i, j)",
    "        val n = str.length\n        var count = 0\n        for (i <- 0 until n) {\n            if (str(i) == '1') count += 1\n        }\n        val ones = count\n        var zeros = n - ones\n        var min = ones\n        for (i <- 0 until n) {\n            if (str(i) == '1') ones -= 1\n            else zeros -= 1\n            min = min min (ones + zeros)\n        }\n        min",
    "        val n = str.length\n        val s = str + str\n        var i = 0\n        var j = 1\n        var k = 0\n        while (i < n && j < n && k < n) {\n            if (s(i + k) == s(j + k)) k += 1\n            else if (s(i + k) > s(j + k)) {\n                i += k + 1\n                if (i <= j) i = j + 1\n                k = 0\n            }\n            else if (s(i + k) < s(j + k)) {\n                j += k + 1\n                if (j <= i) j = i + 1\n                k = 0\n            }\n        }\n        min(i, j)",
    "        val n = str.length\n        val suffixes = Array.ofDim[Int](n)\n        for (i <- 0 until n) suffixes(i) = i\n        suffixes.sortWith((a, b) => str.substring(a) < str.substring(b))\n        var rotations = 0\n        for (i <- 0 until n) {\n            if (suffixes(i) == 0) {\n                rotations = i\n                break\n            }\n        }\n        rotations",
    "        val n = str.length\n        val s = str + str\n        var count = 0\n        var i = 0\n        var j = 1\n        while (i < n && j < n) {\n            var k = 0\n            while (k < n && s(i + k) == s(j + k)) k += 1\n            if (k == n) return count\n            if (s(i + k) > s(j + k)) {\n                i = i + k + 1\n                if (i == j) j += 1\n            } else {\n                j = j + k + 1\n                if (i == j) i += 1\n            }\n            count += 1\n        }\n        count",
    "        val n = str.length\n        val str2 = str + str\n        var i = 0\n        var j = 1\n        var k = 0\n        while (i < n && j < n && k < n) {\n            if (str2(i + k) == str2(j + k)) k += 1\n            else if (str2(i + k) > str2(j + k)) {\n                i = i + k + 1\n                if (i <= j) i = j + 1\n                k = 0\n            }\n            else if (str2(i + k) < str2(j + k)) {\n                j = j + k + 1\n                if (j <= i) j = i + 1\n                k = 0\n            }\n        }\n        min(i, j)",
    "        val n = str.length\n        val str2 = str + str\n        val suffixes = str2.indices.map(i => str2.substring(i, i + n))\n        val suffixesWithIndex = suffixes.zipWithIndex\n        val sortedSuffixesWithIndex = suffixesWithIndex.sortBy(_._1)\n        val minSuffix = sortedSuffixesWithIndex.head\n        val minSuffixIndex = minSuffix._2\n        if (minSuffixIndex == 0) 0 else n - minSuffixIndex",
    "        val n = str.length\n        val str2 = str + str\n        var i = 0\n        var j = 1\n        var k = 0\n        while (i < n && j < n && k < n) {\n            if (str2(i + k) == str2(j + k)) k += 1\n            else if (str2(i + k) > str2(j + k)) {\n                i = i + k + 1\n                if (i <= j) i = j + 1\n                k = 0\n            }\n            else if (str2(i + k) < str2(j + k)) {\n                j = j + k + 1\n                if (j <= i) j = i + 1\n                k = 0\n            }\n        }\n        min(i, j)",
    "        val n = str.length\n        val str1 = str + str\n        var count = 0\n        var i = 1\n        var j = 0\n        var arr = Array.fill(n + 1)(0)\n        while (i < n) {\n            if (str1(i) == str1(j)) {\n                arr(i) = j + 1\n                i += 1\n                j += 1\n            } else {\n                if (j == 0) {\n                    arr(i) = 0\n                    i += 1\n                } else {\n                    j = arr(j - 1)\n                }\n            }\n        }\n        arr(n)",
    "        var min = Long.MaxValue\n        for (i <- 0 until str.length) {\n            var count = 0\n            for (j <- 0 until str.length) {\n                if (str(j) != str((j + i) % str.length)) count += 1\n            }\n            min = min min count\n        }\n        min",
    "        var rotations = 0\n        for (i <- 1 until str.length) {\n            if (str(i) < str(i - 1)) {\n                rotations = i\n                return rotations\n            }\n        }\n        return rotations",
    "        val n = str.length\n        var count = 0\n        for (i <- 0 until n) {\n            if (str(i) == '1') count += 1\n        }\n        min(count, n - count)",
    "        val n = str.length\n        val arr = str.toCharArray\n        val arr2 = new Array[Int](n)\n        for (i <- 0 until n) {\n            arr2(i) = arr(i) - 'a'\n        }\n        val count = new Array[Int](26)\n        for (i <- 0 until n) {\n            count(arr2(i)) += 1\n        }\n        var index = -1\n        for (i <- 0 until 26) {\n            if (count(i) > 0) {\n                index = i\n                break\n            }\n        }\n        var start = 0\n        var curr_count = 0\n        for (i <- 0 until n) {\n            if (arr2(i) == index) {\n                curr_count += 1\n            }\n        }\n        var min_len = n\n        for (i <- 1 until n) {\n            if (arr2(i) == index) {\n                curr_count -= 1\n            }\n            if (arr2(i - 1) == index) {\n                start = i\n                curr_count += 1\n            }\n            if (curr_count == 0) {\n                min_len = min(min_len, i - start + 1)\n            }\n        }\n        min_len",
    "        val n = str.length\n        val arr = str.toCharArray\n        val arr2 = new Array[Char](n)\n        for (i <- 0 until n) arr2(i) = arr(i)\n        var count = 0\n        for (i <- 0 until n) {\n            var j = 0\n            while (j < n) {\n                if (arr(j) != arr2(j)) {\n                    count += 1\n                    val temp = arr2(0)\n                    for (k <- 0 until n - 1) arr2(k) = arr2(k + 1)\n                    arr2(n - 1) = temp\n                }\n                j += 1\n            }\n            if (count > 0) return count\n            val temp = arr(0)\n            for (k <- 0 until n - 1) arr(k) = arr(k + 1)\n            arr(n - 1) = temp\n        }\n        count",
    "        val n = str.length\n        val s = str + str\n        var count = 0\n        var i = 0\n        while (i < n) {\n            var j = i\n            var k = 0\n            while (j < i + n && s(j) == str(k)) {\n                j += 1\n                k += 1\n            }\n            if (j == i + n) return i\n            if (j < i + n && s(j) > str(k)) count = max(count, j - i)\n            i += 1\n        }\n        count",
    "        val n = str.length\n        var count = 0\n        for (i <- 0 until n) {\n            if (str(i) == '1') count += 1\n        }\n        min(n - count, count)",
    "        val n = str.length\n        val s = str + str\n        var i = 1\n        var j = 0\n        var k = 0\n        while (i < n) {\n            k = i\n            j = 0\n            while (k < n + i && j < n && s(k) == s(j)) {\n                k += 1\n                j += 1\n            }\n            if (j == n) return i\n            i += 1\n        }\n        return -1",
    "        val n = str.length\n        val str2 = str + str\n        var count = 0\n        var i = 0\n        var j = 1\n        while (i < n && j < n) {\n            var k = 0\n            while (k < n && str2(i + k) == str2(j + k)) k += 1\n            if (k == n) return count\n            if (str2(i + k) > str2(j + k)) {\n                i = i + k + 1\n                if (i == j) j += 1\n            } else {\n                j = j + k + 1\n                if (i == j) i += 1\n            }\n            count += 1\n        }\n        count",
    "        val n = str.length\n        val arr = str.toCharArray\n        val arr2 = str.toCharArray\n        for (i <- 0 until n) {\n            arr2(i) = arr(n - i - 1)\n        }\n        var count = 0\n        for (i <- 0 until n) {\n            if (arr(i) != arr2(i)) count += 1\n        }\n        count",
    "        val n = str.length\n        val s = str + str\n        var i = 1\n        var j = 0\n        var k = 0\n        while (i < n) {\n            if (s(i) == s(j)) {\n                i += 1\n                j += 1\n            } else {\n                j = 0\n                i += 1\n            }\n            if (j == n) {\n                k = i - n\n                break\n            }\n        }\n        k",
    "        val n = str.length\n        val str2 = str + str\n        var count = 0\n        for (i <- 0 until n) {\n            if (str2.substring(i, i + n) == str) {\n                count += 1\n            }\n        }\n        count",
    "        val n = str.length\n        val s = str + str\n        var i = 0\n        var j = 1\n        var k = 0\n        while (i < n && j < n && k < n) {\n            if (s(i + k) == s(j + k)) k += 1\n            else if (s(i + k) > s(j + k)) {\n                i += k + 1\n                if (i <= j) i = j + 1\n                k = 0\n            }\n            else if (s(i + k) < s(j + k)) {\n                j += k + 1\n                if (j <= i) j = i + 1\n                k = 0\n            }\n        }\n        min(i, j)",
    "        val n = str.length\n        val str1 = str + str\n        var count = 0\n        for (i <- 1 to n) {\n            if (str1.substring(i, i + n) == str) {\n                count += 1\n            }\n        }\n        count",
    "        val n = str.length\n        val arr = str.toCharArray\n        var count = 0\n        for (i <- 0 until n) {\n            if (arr(i) == '1') {\n                count += 1\n            }\n        }\n        val r = n - count\n        val result = min(r, count)\n        return result",
    "        val n = str.length\n        val s = str + str\n        var i = 0\n        var j = 1\n        while (i < n && j < n) {\n            var k = 0\n            while (k < n && s(i + k) == s(j + k)) k += 1\n            if (k == n) return j\n            if (s(i + k) > s(j + k)) {\n                i = max(i + k + 1, j + 1)\n                j = i + 1\n            } else {\n                j = j + k + 1\n            }\n        }\n        return i",
    "        val n = str.length\n        val str2 = str + str\n        var count = 0\n        for (i <- 0 until n) {\n            if (str2.substring(i, i + n) == str) {\n                count += 1\n            }\n        }\n        count",
    "        val n = str.length\n        val s = str + str\n        var i = 0\n        var j = 1\n        var k = 0\n        while (i < n && j < n && k < n) {\n            val t = s(i + k) - s(j + k)\n            if (t == 0) k += 1\n            else {\n                if (t > 0) i = i + k + 1\n                else j = j + k + 1\n                if (i == j) j += 1\n                k = 0\n            }\n        }\n        min(i, j)",
    "        val n = str.length\n        val str2 = str + str\n        var i = 0\n        var j = 1\n        var k = 0\n        while (i < n && j < n && k < n) {\n            val t = str2(i + k) - str2(j + k)\n            if (t == 0) k += 1\n            else {\n                if (t > 0) i += k + 1\n                else j += k + 1\n                if (i == j) j += 1\n                k = 0\n            }\n        }\n        min(i, j)",
    "        val n = str.length\n        val s = str + str\n        var i = 0\n        var j = 1\n        var k = 0\n        while (i < n && j < n && k < n) {\n            if (s(i + k) == s(j + k)) k += 1\n            else if (s(i + k) > s(j + k)) {\n                i = i + k + 1\n                if (i <= j) i = j + 1\n                k = 0\n            } else {\n                j = j + k + 1\n                if (j <= i) j = i + 1\n                k = 0\n            }\n        }\n        min(i, j)",
    "        val n = str.length\n        val str2 = str + str\n        var count = 0\n        var i = 0\n        while (i < n) {\n            var j = i\n            var k = 0\n            while (j < i + n && str(k) == str2(j)) {\n                j += 1\n                k += 1\n            }\n            if (j == i + n) {\n                count += 1\n            }\n            i += 1\n        }\n        count",
    "        val n = str.length\n        val str1 = str + str\n        var i = 0\n        var j = 1\n        var k = 0\n        while (i < n && j < n && k < n) {\n            if (str1(i + k) == str1(j + k)) k += 1\n            else if (str1(i + k) > str1(j + k)) {\n                i = i + k + 1\n                if (i <= j) i = j + 1\n                k = 0\n            }\n            else if (str1(i + k) < str1(j + k)) {\n                j = j + k + 1\n                if (j <= i) j = i + 1\n                k = 0\n            }\n        }\n        min(i, j)",
    "        val n = str.length\n        val str2 = str + str\n        var i = 1\n        while (i < n) {\n            if (str2.substring(i, i + n) == str) return i\n            i += 1\n        }\n        return 0",
    "        val n = str.length\n        val suffixes = new Array[String](n)\n        for (i <- 0 until n) suffixes(i) = str.substring(i)\n        val sortedSuffixes = suffixes.sortWith(_ < _)\n        var minRotations = 0\n        for (i <- 0 until n) {\n            if (sortedSuffixes(i) == str.substring(i)) minRotations = i\n        }\n        minRotations",
    "        val n = str.length\n        val str2 = str + str\n        var count = 0\n        var i = 1\n        while (i < n) {\n            var j = 0\n            while (j < n && str2(i + j) == str(j)) {\n                j += 1\n            }\n            if (j == n) {\n                return count\n            }\n            if (str2(i + j) > str(j)) {\n                count = i\n            }\n            i += 1\n        }\n        return count",
    "        val n = str.length\n        val str2 = str + str\n        val lps = Array.ofDim[Int](n)\n        var len = 0\n        var i = 1\n        while (i < n) {\n            if (str(i) == str(len)) {\n                len += 1\n                lps(i) = len\n                i += 1\n            } else {\n                if (len != 0) len = lps(len - 1)\n                else {\n                    lps(i) = 0\n                    i += 1\n                }\n            }\n        }\n        var j = 0\n        i = 0\n        while (i < 2 * n) {\n            if (str2(i) == str(j)) {\n                i += 1\n                j += 1\n            }\n            if (j == n) return i - j\n            else if (i < 2 * n && str2(i) != str(j)) {\n                if (j != 0) j = lps(j - 1)\n                else i += 1\n            }\n        }\n        -1",
    "        val n = str.length\n        val str2 = str + str\n        var count = 0\n        for (i <- 0 until n) {\n            if (str2.substring(i, i + n) == str) return count\n            count += 1\n        }\n        -1",
    "        val n = str.length\n        val str2 = str + str\n        var i = 0\n        var j = 1\n        var k = 0\n        while (i < n && j < n && k < n) {\n            val t = str2(i + k) - str2(j + k)\n            if (t == 0) k += 1\n            else {\n                if (t > 0) i += k + 1\n                else j += k + 1\n                if (i == j) j += 1\n                k = 0\n            }\n        }\n        min(i, j)",
    "        val n = str.length\n        var count = 0\n        for (i <- 0 until n) {\n            if (str(i) == '1') count += 1\n        }\n        min(n - count, count)",
    "        val n = str.length\n        val s = str + str\n        var count = 0\n        for (i <- 0 until n) {\n            var j = i\n            var k = 0\n            while (j < i + n && s(j) == str(k)) {\n                j += 1\n                k += 1\n            }\n            if (j == i + n) {\n                count += 1\n            }\n        }\n        count",
    "        val n = str.length\n        val suffix = new Array[Int](n)\n        for (i <- 0 until n) suffix(i) = str.substring(i).compareTo(str.substring(0, n - i))\n        var min = 0\n        for (i <- 1 until n) if (suffix(i) < suffix(min)) min = i\n        return min",
    "        val n = str.length\n        val str2 = str + str\n        var count = 0\n        for (i <- 0 until n) {\n            if (str2.substring(i, i + n) == str) return count\n            count += 1\n        }\n        -1",
    "        val n = str.length\n        if (n == 1) return 0\n        val str2 = str + str\n        var i = 1\n        var j = 0\n        var k = 0\n        while (i < n) {\n            if (str2(i) == str2(j)) {\n                i += 1\n                j += 1\n            } else {\n                k = max(k, j)\n                j = 0\n                i = k + 1\n            }\n        }\n        k",
    "        val n = str.length\n        val arr = str.toCharArray\n        var count = 0\n        for (i <- 0 until n) {\n            if (arr(i) == '1') count += 1\n        }\n        val zeros = n - count\n        var left = 0\n        var right = 0\n        var result = zeros\n        while (right < n) {\n            if (arr(right) == '0') {\n                right += 1\n            } else {\n                result = min(result, zeros + right - left)\n                left += 1\n                right += 1\n            }\n        }\n        result",
    "        val n = str.length\n        val str2 = str + str\n        var i = 0\n        var j = 1\n        var k = 0\n        while (i < n && j < n && k < n) {\n            if (str2(i + k) == str2(j + k)) k += 1\n            else if (str2(i + k) > str2(j + k)) {\n                i = j + 1\n                j = i + 1\n                k = 0\n            } else {\n                j += k + 1\n                k = 0\n            }\n        }\n        i",
    "        var str2 = str + str\n        var min = Long.MaxValue\n        for (i <- 0 until str.length) {\n            var count = 0\n            for (j <- 0 until str.length) {\n                if (str(j) != str2(i + j)) count += 1\n            }\n            min = min min count\n        }\n        min",
    "        var rotations = 0\n        var str2 = str.substring(1) + str.charAt(0)\n        while (str2 != str) {\n            rotations += 1\n            str2 = str2.substring(1) + str2.charAt(0)\n        }\n        rotations",
    "        val n = str.length\n        val str2 = str + str\n        val suffixArray = Array.ofDim[Int](n)\n        for (i <- 0 until n) suffixArray(i) = i\n        suffixArray.sortWith((a, b) => str2.substring(a) < str2.substring(b))\n        for (i <- 0 until n) if (suffixArray(i) == 0) return i\n        return 0",
    "        val n = str.length\n        val arr = str.toCharArray\n        val arr2 = str.toCharArray\n        for (i <- 0 until n) {\n            arr2(i) = arr(n - i - 1)\n        }\n        var count = 0\n        for (i <- 0 until n) {\n            if (arr(i) != arr2(i)) {\n                count += 1\n            }\n        }\n        count",
    "        val n = str.length\n        val suffixArray = Array.ofDim[Int](n)\n        for (i <- 0 until n) suffixArray(i) = i\n        suffixArray.sortWith((a, b) => str.substring(a) < str.substring(b))\n        var count = 0\n        for (i <- 0 until n) {\n            if (suffixArray(i) == 0) {\n                count = i\n                break\n            }\n        }\n        count",
    "        val n = str.length\n        val str2 = str + str\n        var count = 0\n        var i = 0\n        while (i < n) {\n            var j = 0\n            while (j < n) {\n                if (str2(i + j) != str(j)) {\n                    count += 1\n                    break\n                }\n                j += 1\n            }\n            i += 1\n        }\n        count",
    "        val n = str.length\n        val str2 = str + str\n        val lps = Array.ofDim[Int](n)\n        var len = 0\n        var i = 1\n        while (i < n) {\n            if (str2(i) == str2(len)) {\n                len += 1\n                lps(i) = len\n                i += 1\n            } else {\n                if (len != 0) {\n                    len = lps(len - 1)\n                } else {\n                    lps(i) = 0\n                    i += 1\n                }\n            }\n        }\n        lps(n - 1)",
    "        val n = str.length\n        val str2 = str + str\n        val suffixArray = Array.ofDim[Int](n)\n        for (i <- 0 until n) suffixArray(i) = i\n        suffixArray.sortWith((a, b) => str2.substring(a) < str2.substring(b))\n        for (i <- 0 until n) if (suffixArray(i) == 0) return i\n        return -1",
    "        val n = str.length\n        val str1 = str + str\n        var count = 0\n        for (i <- 1 to n) {\n            if (str1.substring(i, i + n) == str) {\n                count += 1\n            }\n        }\n        return count",
    "        val n = str.length\n        val s = str + str\n        var i = 0\n        var j = 1\n        var k = 0\n        while (i < n && j < n && k < n) {\n            if (s(i + k) == s(j + k)) k += 1\n            else if (s(i + k) > s(j + k)) {\n                i = i + k + 1\n                if (i <= j) i = j + 1\n                k = 0\n            }\n            else if (s(i + k) < s(j + k)) {\n                j = j + k + 1\n                if (j <= i) j = i + 1\n                k = 0\n            }\n        }\n        if (i < j) i else j",
    "        val n = str.length\n        val str2 = str + str\n        var i = 0\n        var j = 1\n        var k = 0\n        while (i < n && j < n && k < n) {\n            val t = str2(i + k) - str2(j + k)\n            if (t == 0) k += 1\n            else {\n                if (t > 0) i += k + 1\n                else j += k + 1\n                if (i == j) j += 1\n                k = 0\n            }\n        }\n        min(i, j)",
    "        val n = str.length\n        val s = str + str\n        var i = 0\n        var j = 1\n        var k = 0\n        while (i < n && j < n && k < n) {\n            if (s(i + k) == s(j + k)) k += 1\n            else if (s(i + k) > s(j + k)) {\n                i = j\n                j = i + 1\n                k = 0\n            }\n            else {\n                j += k + 1\n                k = 0\n            }\n        }\n        i",
    "        val n = str.length\n        val arr = str.toCharArray\n        val arr2 = str.toCharArray\n        for (i <- 0 until n) {\n            arr2(i) = arr(n - 1 - i)\n        }\n        var count = 0\n        for (i <- 0 until n) {\n            if (arr(i) != arr2(i)) {\n                count += 1\n            }\n        }\n        return count",
    "        val n = str.length\n        val str2 = str + str\n        var count = 0\n        var i = 0\n        while (i < n) {\n            var j = i\n            var k = 0\n            while (j < i + n && str(k) == str2(j)) {\n                j += 1\n                k += 1\n            }\n            if (j == i + n) return count\n            if (j < i + n && str(k) > str2(j)) count = i + 1\n            i += 1\n        }\n        count",
    "        val n = str.length\n        val s = str + str\n        var i = 1\n        var j = 0\n        var k = 0\n        while (i < n) {\n            if (s(i) == s(j)) {\n                i += 1\n                j += 1\n            } else if (s(i) < s(j)) {\n                j = 0\n                k = i\n                i += 1\n            } else {\n                j = 0\n                i = k + 1\n            }\n        }\n        k + 1",
    "        val str2 = str + str\n        val n = str.length\n        val lps = Array.fill(n)(0)\n        var len = 0\n        var i = 1\n        while (i < n) {\n            if (str(i) == str(len)) {\n                len += 1\n                lps(i) = len\n                i += 1\n            } else {\n                if (len != 0) {\n                    len = lps(len - 1)\n                } else {\n                    lps(i) = 0\n                    i += 1\n                }\n            }\n        }\n        val result = lps(n - 1)\n        if (result == 0) n else n - result",
    "        val n = str.length\n        val s = str + str\n        var i = 0\n        var j = 1\n        while (i < n && j < n) {\n            var k = 0\n            while (k < n && s(i + k) == s(j + k)) k += 1\n            if (k == n) return min(i, j)\n            if (s(i + k) > s(j + k)) {\n                i = i + k + 1\n                if (i == j) i += 1\n            } else {\n                j = j + k + 1\n                if (i == j) j += 1\n            }\n        }\n        min(i, j)",
    "        val n = str.length\n        val s = str + str\n        var i = 0\n        var j = 1\n        var k = 0\n        while (i < n && j < n && k < n) {\n            if (s(i + k) == s(j + k)) {\n                k += 1\n            } else {\n                if (s(i + k) > s(j + k)) {\n                    i += k + 1\n                    if (i <= j) i = j + 1\n                } else {\n                    j += k + 1\n                    if (j <= i) j = i + 1\n                }\n                k = 0\n            }\n        }\n        min(i, j)",
    "        val n = str.length\n        val str2 = str + str\n        var count = 0\n        var i = 0\n        var j = 1\n        while (i < n && j < n) {\n            var k = 0\n            while (k < n && str2(i + k) == str2(j + k)) k += 1\n            if (k == n) return count\n            if (str2(i + k) > str2(j + k)) {\n                i = i + k + 1\n                if (i == j) j += 1\n            } else {\n                j = j + k + 1\n                if (i == j) i += 1\n            }\n            count += 1\n        }\n        count",
    "        val str2 = str + str\n        val n = str.length\n        var i = 0\n        var j = 1\n        var k = 0\n        while (i < n && j < n && k < n) {\n            if (str2(i + k) == str2(j + k)) k += 1\n            else if (str2(i + k) > str2(j + k)) {\n                i = i + k + 1\n                if (i <= j) i = j + 1\n                k = 0\n            } else {\n                j = j + k + 1\n                if (j <= i) j = i + 1\n                k = 0\n            }\n        }\n        min(i, j)",
    "        val n = str.length\n        val str1 = str + str\n        var count = 0\n        var i = 0\n        var j = 1\n        while (i < n && j < n) {\n            var k = 0\n            while (k < n) {\n                if (str1(i + k) != str1(j + k)) {\n                    if (str1(i + k) > str1(j + k)) {\n                        i = i + k + 1\n                    } else {\n                        j = j + k + 1\n                    }\n                    if (i == j) {\n                        j = j + 1\n                    }\n                    count = count + 1\n                    break\n                }\n                k = k + 1\n            }\n            if (k == n) {\n                return min(i, j)\n            }\n        }\n        return min(i, j)",
    "        val n = str.length\n        val str2 = str + str\n        val lps = Array.fill(n)(0)\n        var len = 0\n        var i = 1\n        while (i < n) {\n            if (str2(i) == str2(len)) {\n                len += 1\n                lps(i) = len\n                i += 1\n            } else {\n                if (len != 0) {\n                    len = lps(len - 1)\n                } else {\n                    lps(i) = 0\n                    i += 1\n                }\n            }\n        }\n        lps(n - 1)",
    "        val n = str.length\n        val str2 = str + str\n        var i = 1\n        var j = 0\n        var k = 0\n        while (i < n) {\n            if (str2(i) == str2(j)) {\n                i += 1\n                j += 1\n            } else {\n                if (j == 0) {\n                    i += 1\n                } else {\n                    j = 0\n                }\n            }\n            if (i == n) {\n                k = j\n                break\n            }\n        }\n        k",
    "        val n = str.length\n        val suffixes = ArrayBuffer[String]()\n        for (i <- 0 until n) suffixes += str.substring(i, n)\n        val suffixesSorted = suffixes.sortWith(_ < _)\n        val index = suffixesSorted.indexOf(str)\n        if (index == 0) return 0\n        else return n - index",
    "        val n = str.length\n        val s = str + str\n        var i = 1\n        var j = 0\n        var k = 0\n        while (i < n) {\n            if (s(i) == s(j)) {\n                i += 1\n                j += 1\n            } else if (s(i) < s(j)) {\n                j = 0\n                k = i\n                i += 1\n            } else {\n                j = 0\n                i = k + 1\n            }\n        }\n        j",
    "        var min = Long.MaxValue\n        for (i <- 0 until str.length) {\n            var count = 0\n            for (j <- 0 until str.length) {\n                if (str(j) != str((j + i) % str.length)) count += 1\n            }\n            min = min min count\n        }\n        min",
    "        val n = str.length\n        val str2 = str + str\n        var count = 0\n        var i = 0\n        while (i < n) {\n            var j = i\n            var k = 0\n            while (j < n + i) {\n                if (str(k) != str2(j)) {\n                    break\n                }\n                j += 1\n                k += 1\n            }\n            if (j == n + i) {\n                return i\n            }\n            i += 1\n        }\n        return -1",
    "        val n = str.length\n        val str2 = str + str\n        var count = 0\n        for (i <- 0 until n) {\n            if (str2.substring(i, i + n) == str) return i\n        }\n        return -1",
    "        val n = str.length\n        val s = str + str\n        var i = 1\n        var j = 0\n        var k = 0\n        var b = Array.fill[Int](n + 1)(0)\n        while (i < n) {\n            while (i + k < 2 * n && s(i + k) == s(j + k)) k += 1\n            if (i + k < 2 * n && s(i + k) > s(j + k)) {\n                j = i\n                k = 0\n            }\n            b(i) = j\n            i += 1\n        }\n        b(0)",
    "        val n = str.length\n        val s = str + str\n        val z = Array.ofDim[Int](n)\n        var l = 0\n        var r = 0\n        for (i <- 1 until n) {\n            if (i > r) {\n                l = i\n                r = i\n                while (r < n && s(r) == s(r - l)) r += 1\n                z(i) = r - l\n                r -= 1\n            } else {\n                val k = i - l\n                if (z(k) < r - i + 1) z(i) = z(k)\n                else {\n                    l = i\n                    while (r < n && s(r) == s(r - l)) r += 1\n                    z(i) = r - l\n                    r -= 1\n                }\n            }\n        }\n        var ans = n\n        for (i <- 1 until n) {\n            if (z(i) == n) ans = min(ans, i)\n        }\n        ans",
    "        val n = str.length\n        val str1 = str + str\n        var count = 0\n        var i = 0\n        var j = 1\n        while (i < n && j < n) {\n            var k = 0\n            while (k < n) {\n                if (str1(i + k) != str1(j + k)) {\n                    if (str1(i + k) > str1(j + k)) {\n                        i = i + k + 1\n                    } else {\n                        j = j + k + 1\n                    }\n                    if (i == j) {\n                        j = j + 1\n                    }\n                    count = count + 1\n                    break\n                }\n                k = k + 1\n            }\n            if (k == n) {\n                return min(i, j)\n            }\n        }\n        return min(i, j)",
    "        val n = str.length\n        val str2 = str + str\n        var count = 0\n        var i = 0\n        while (i < n) {\n            var j = i\n            var k = 0\n            while (j < i + n && str(k) == str2(j)) {\n                j += 1\n                k += 1\n            }\n            if (j == i + n) return count\n            if (str(k) < str2(j)) count = i + 1\n            i += 1\n        }\n        count",
    "        var rotations = 0\n        val strLength = str.length\n        for (i <- 1 until strLength) {\n            if (str(i) < str(i - 1)) {\n                rotations = i\n                return rotations\n            }\n        }\n        rotations",
    "        val n = str.length\n        val suffixes = new Array[String](n)\n        for (i <- 0 until n) suffixes(i) = str.substring(i)\n        val suffixesSorted = suffixes.sortWith(_ < _)\n        var minRotation = 0\n        for (i <- 0 until n) {\n            if (suffixesSorted(i) == str) {\n                minRotation = i\n                break\n            }\n        }\n        minRotation",
    "        val n = str.length\n        var count = 0\n        for (i <- 0 until n) {\n            if (str(i) == '1') count += 1\n        }\n        val k = count\n        var min = Long.MaxValue\n        for (i <- 0 until n) {\n            if (str(i) == '1') count -= 1\n            else count += 1\n            min = min min count\n        }\n        min",
    "        val n = str.length\n        val suffixes = new Array[String](n)\n        for (i <- 0 until n) suffixes(i) = str.substring(i)\n        val sortedSuffixes = suffixes.sortWith(_ < _)\n        var minRotations = 0\n        for (i <- 0 until n) {\n            if (sortedSuffixes(i) == str.substring(i)) minRotations = i\n        }\n        minRotations",
    "        val n = str.length\n        val str2 = str + str\n        val suffixes = str2.sliding(n).toList\n        val suffixesSorted = suffixes.sortWith((s1, s2) => s1 < s2)\n        val index = suffixesSorted.indexOf(str)\n        return index",
    "        val n = str.length\n        val str2 = str + str\n        val suffixArray = Array.ofDim[Int](n)\n        for (i <- 0 until n) suffixArray(i) = i\n        val cmp = new Ordering[Int] {\n            def compare(x : Int, y : Int) = str2.substring(x, x + n).compare(str2.substring(y, y + n))\n        }\n        Sorting.quickSort(suffixArray)(cmp)\n        for (i <- 0 until n) {\n            if (suffixArray(i) == 0) return i\n        }\n        0",
    "        var min = Long.MaxValue\n        for (i <- 0 until str.length) {\n            val newStr = str.substring(i) + str.substring(0, i)\n            val newStrInt = newStr.toLong\n            if (newStrInt < min) min = newStrInt\n        }\n        min",
    "        val n = str.length\n        val str2 = str + str\n        var count = 0\n        for (i <- 1 until n) {\n            if (str2.substring(i, i + n) < str) count += 1\n        }\n        count",
    "        val str2 = str + str\n        val n = str.length\n        val lps = Array.ofDim[Int](2 * n)\n        var len = 0\n        var i = 1\n        while (i < 2 * n) {\n            if (str2(i) == str2(len)) {\n                len += 1\n                lps(i) = len\n                i += 1\n            } else {\n                if (len != 0) len = lps(len - 1)\n                else {\n                    lps(i) = 0\n                    i += 1\n                }\n            }\n        }\n        lps(2 * n - 1)",
    "        val s = str + str\n        val n = str.length\n        var i = 0\n        var j = 1\n        var k = 0\n        while (i < n && j < n && k < n) {\n            if (s(i + k) == s(j + k)) k += 1\n            else if (s(i + k) > s(j + k)) {\n                i = i + k + 1\n                if (i <= j) i = j + 1\n                k = 0\n            }\n            else if (s(i + k) < s(j + k)) {\n                j = j + k + 1\n                if (j <= i) j = i + 1\n                k = 0\n            }\n        }\n        min(i, j)",
    "        val n = str.length\n        val s = str + str\n        val z = Array.fill(2 * n)(0)\n        var l = 0\n        var r = 0\n        for (i <- 1 until 2 * n) {\n            if (i > r) {\n                l = i\n                r = i\n                while (r < 2 * n && s(r) == s(r - l)) r += 1\n                z(i) = r - l\n                r -= 1\n            } else {\n                val k = i - l\n                if (z(k) < r - i + 1) z(i) = z(k)\n                else {\n                    l = i\n                    while (r < 2 * n && s(r) == s(r - l)) r += 1\n                    z(i) = r - l\n                    r -= 1\n                }\n            }\n        }\n        var ans = n\n        for (i <- 1 until n) {\n            if (z(i) == n) ans = min(ans, i)\n        }\n        ans",
    "        val str2 = str + str\n        val len = str.length\n        var min = Long.MaxValue\n        for (i <- 0 until len) {\n            var count = 0\n            for (j <- 0 until len) {\n                if (str(j) != str2(i + j)) count += 1\n            }\n            min = min min count\n        }\n        min",
    "        val n = str.length\n        var count = 0\n        var i = 0\n        while (i < n) {\n            if (str(i) == '1') {\n                count += 1\n                i += 1\n            } else {\n                i += 1\n            }\n        }\n        if (count == 0) 0\n        else if (count == n) n\n        else count",
    "        val n = str.length\n        val s = str + str\n        val suffixArray = Array.ofDim[Int](n)\n        val rank = Array.ofDim[Int](n)\n        val lcp = Array.ofDim[Int](n)\n        for (i <- 0 until n) {\n            suffixArray(i) = i\n            rank(i) = s(i).toInt\n        }\n        var k = 0\n        while ((1 << k) < n) {\n            val cmp = new Ordering[Int] {\n                def compare(x : Int, y : Int) = {\n                    if (rank(x) != rank(y)) rank(x) - rank(y)\n                    else {\n                        val rankx1 = if (x + (1 << k) < n) rank(x + (1 << k)) else -1\n                        val ranky1 = if (y + (1 << k) < n) rank(y + (1 << k)) else -1\n                        rankx1 - ranky1\n                    }\n                }\n            }\n            suffixArray.sortWith(cmp.lt)\n            val tmp = Array.ofDim[Int](n)\n            tmp(suffixArray(0)) = 0\n            for (i <- 1 until n) {\n                tmp(suffixArray(i)) = tmp(suffixArray(i - 1))\n                if (cmp.lt(suffixArray(i - 1), suffixArray(i))) tmp(suffixArray(i)) += 1\n            }\n            for (i <- 0 until n) rank(i) = tmp(i)\n            k += 1\n        }\n        for (i <- 0 until n - 1) {\n            val x = suffixArray(i)\n            val y = suffixArray(i + 1)\n            var z = 0\n            while (s(x + z) == s(y + z)) z += 1\n            lcp(i) = z\n        }\n        var ans = n\n        for (i <- 0 until n) {\n            val x = suffixArray(i)\n            val y = suffixArray(i + 1)\n            if (x < n && y > n - 1) {\n                ans = min("
  ]
}