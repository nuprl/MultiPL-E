{
  "name": "mbpp_769_Diff",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to get the difference between two lists.\n    def Diff(li1 : List[Long], li2 : List[Long]) : List[Long] = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_769_Diff.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(Diff((List[Long](10l.toLong, 15l.toLong, 20l.toLong, 25l.toLong, 30l.toLong, 35l.toLong, 40l.toLong)), (List[Long](25l.toLong, 40l.toLong, 35l.toLong))).equals((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 15l.toLong))));\n    assert(Diff((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (List[Long](6l.toLong, 7l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))));\n    assert(Diff((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](6l.toLong, 7l.toLong, 1l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 6l.toLong, 7l.toLong))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        for (i <- li2) {\n            if (!li1.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        val li3 = li1.toSet.diff(li2.toSet).toList\n        return li3",
    "        val li3 = li1.filter(!li2.contains(_))\n        val li4 = li2.filter(!li1.contains(_))\n        li3 ::: li4",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        for (i <- li2) {\n            if (!li1.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        val li1_set = li1.toSet\n        val li2_set = li2.toSet\n        val diff = li1_set.diff(li2_set)\n        diff.toList",
    "        val li3 = li1.diff(li2)\n        val li4 = li2.diff(li1)\n        li3 ::: li4",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        for (i <- li2) {\n            if (!li1.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        for (i <- li2) {\n            if (!li1.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        for (i <- li2) {\n            if (!li1.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        for (i <- li2) {\n            if (!li1.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        val li = li1.toSet.diff(li2.toSet).toList\n        return li",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        var li3 : List[Long] = List()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        for (i <- li2) {\n            if (!li1.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        var li3 : List[Long] = List()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        for (i <- li2) {\n            if (!li1.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        for (i <- li2) {\n            if (!li1.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        var li3 = List[Long]()\n        for (i <- 0 to li1.length - 1) {\n            if (!li2.contains(li1(i))) {\n                li3 = li3 :+ li1(i)\n            }\n        }\n        for (i <- 0 to li2.length - 1) {\n            if (!li1.contains(li2(i))) {\n                li3 = li3 :+ li2(i)\n            }\n        }\n        return li3",
    "        val li3 = li1.toSet.diff(li2.toSet).toList\n        return li3",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        for (i <- li2) {\n            if (!li1.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        val li = li1.toSet.diff(li2.toSet).toList\n        li",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        for (i <- li2) {\n            if (!li1.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        val li3 = li1.toSet.diff(li2.toSet).toList\n        val li4 = li2.toSet.diff(li1.toSet).toList\n        li3 ::: li4",
    "        var li3 = new ListBuffer[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 += i\n            }\n        }\n        return li3.toList",
    "        val s1 = li1.toSet\n        val s2 = li2.toSet\n        (s1 -- s2).toList",
    "        val li3 = li1.toSet -- li2.toSet\n        li3.toList",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        for (i <- li2) {\n            if (!li1.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        val li3 = li1.diff(li2)\n        val li4 = li2.diff(li1)\n        li3 ::: li4",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) li3 = i :: li3\n        }\n        for (i <- li2) {\n            if (!li1.contains(i)) li3 = i :: li3\n        }\n        return li3",
    "        val map = new HashMap[Long, Int]\n        for (i <- li1) {\n            if (map.contains(i)) map(i) += 1\n            else map(i) = 1\n        }\n        for (i <- li2) {\n            if (map.contains(i)) map(i) -= 1\n            else map(i) = -1\n        }\n        val result = new ListBuffer[Long]\n        for ((k, v) <- map) {\n            if (v > 0) for (i <- 1 to v) result += k\n            else if (v < 0) for (i <- 1 to -v) result += k\n        }\n        result.toList",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        for (i <- li2) {\n            if (!li1.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        val li3 = li1.toSet -- li2.toSet\n        li3.toList",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        for (i <- li2) {\n            if (!li1.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        val li = li1.toSet.diff(li2.toSet).toList\n        li",
    "        val li1_set = li1.toSet\n        val li2_set = li2.toSet\n        val li1_diff = li1_set -- li2_set\n        val li2_diff = li2_set -- li1_set\n        (li1_diff ++ li2_diff).toList",
    "        val li3 = li1.diff(li2)\n        val li4 = li2.diff(li1)\n        li3 ::: li4",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        for (i <- li2) {\n            if (!li1.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        for (i <- li2) {\n            if (!li1.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        val li = li1.toSet.diff(li2.toSet).toList\n        li.sorted",
    "        val set1 = li1.toSet\n        val set2 = li2.toSet\n        (set1 -- set2).toList",
    "        val li = li1.diff(li2)\n        return li",
    "        val li = li1.toSet.diff(li2.toSet).toList\n        li",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        for (i <- li2) {\n            if (!li1.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        var li3 = new ListBuffer[Long]\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 += i\n            }\n        }\n        return li3.toList",
    "        val li = li1.toSet.diff(li2.toSet).toList\n        return li",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        for (i <- li2) {\n            if (!li1.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        for (i <- li2) {\n            if (!li1.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        val li3 = li1.toSet\n        val li4 = li2.toSet\n        val li5 = li3.diff(li4)\n        val li6 = li4.diff(li3)\n        val li7 = li5.toList ::: li6.toList\n        return li7",
    "        var li3 : List[Long] = List()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        for (i <- li2) {\n            if (!li1.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        for (i <- li2) {\n            if (!li1.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        for (i <- li2) {\n            if (!li1.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        val li = li1.toSet -- li2.toSet\n        li.toList",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        for (i <- li2) {\n            if (!li1.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        val set1 = li1.toSet\n        val set2 = li2.toSet\n        (set1 -- set2).toList",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        for (i <- li2) {\n            if (!li1.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        val li3 = li1.filter(x => !li2.contains(x))\n        val li4 = li2.filter(x => !li1.contains(x))\n        li3 ::: li4",
    "        var li3 = ListBuffer[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 += i\n            }\n        }\n        for (i <- li2) {\n            if (!li1.contains(i)) {\n                li3 += i\n            }\n        }\n        return li3.toList",
    "        val li3 = li1.toSet.diff(li2.toSet).toList\n        return li3",
    "        val li1Set = li1.toSet\n        val li2Set = li2.toSet\n        (li1Set -- li2Set).toList",
    "        val li = li1.toSet\n        li2.filter(x => !li.contains(x)).toList",
    "        var li = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li = i :: li\n            }\n        }\n        for (i <- li2) {\n            if (!li1.contains(i)) {\n                li = i :: li\n            }\n        }\n        return li",
    "        val map = new HashMap[Long, Long]()\n        for (i <- li1) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        for (i <- li2) {\n            if (map.contains(i)) {\n                map(i) -= 1\n            } else {\n                map(i) = -1\n            }\n        }\n        val res = new ListBuffer[Long]()\n        for ((k, v) <- map) {\n            if (v > 0) {\n                for (i <- 1 to v) {\n                    res += k\n                }\n            }\n        }\n        res.toList",
    "        val li3 = li1.filter(!li2.contains(_))\n        val li4 = li2.filter(!li1.contains(_))\n        li3 ::: li4",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        for (i <- li2) {\n            if (!li1.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        val li = li1.toSet.diff(li2.toSet).toList\n        return li",
    "        val li3 = li1.toSet.diff(li2.toSet).toList\n        return li3",
    "        val li3 = li1.diff(li2)\n        val li4 = li2.diff(li1)\n        val li5 = li3 ++ li4\n        return li5",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        for (i <- li2) {\n            if (!li1.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        for (i <- li2) {\n            if (!li1.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        var li = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li = i :: li\n            }\n        }\n        for (i <- li2) {\n            if (!li1.contains(i)) {\n                li = i :: li\n            }\n        }\n        return li",
    "        val li = new ListBuffer[Long]\n        for (i <- li1) {\n            if (!li2.contains(i)) li += i\n        }\n        for (i <- li2) {\n            if (!li1.contains(i)) li += i\n        }\n        return li.toList",
    "        val li3 = li1.diff(li2)\n        val li4 = li2.diff(li1)\n        return li3 ::: li4",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        for (i <- li2) {\n            if (!li1.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        for (i <- li2) {\n            if (!li1.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        val li3 = li1.toSet\n        val li4 = li2.toSet\n        val li5 = li3.diff(li4)\n        val li6 = li4.diff(li3)\n        val li7 = li5.toList ::: li6.toList\n        return li7",
    "        val li = li1.toSet.diff(li2.toSet).toList\n        return li",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) li3 = i :: li3\n        }\n        for (i <- li2) {\n            if (!li1.contains(i)) li3 = i :: li3\n        }\n        return li3",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = li3 :+ i\n            }\n        }\n        for (i <- li2) {\n            if (!li1.contains(i)) {\n                li3 = li3 :+ i\n            }\n        }\n        return li3",
    "        val li = li1.toSet -- li2.toSet\n        return li.toList",
    "        var li3 : List[Long] = List()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        for (i <- li2) {\n            if (!li1.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        val li = li1.toSet -- li2.toSet\n        li.toList",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        for (i <- li2) {\n            if (!li1.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        val li = li1.toSet.diff(li2.toSet).toList\n        li.sorted",
    "        val li3 = li1.toSet.diff(li2.toSet).toList\n        return li3",
    "        val li = new ListBuffer[Long]\n        for (i <- li1) {\n            if (!li2.contains(i)) li += i\n        }\n        li.toList",
    "        val li3 = li1.diff(li2)\n        val li4 = li2.diff(li1)\n        li3 ::: li4",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        for (i <- li2) {\n            if (!li1.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        var li3 = new ListBuffer[Long]\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 += i\n            }\n        }\n        return li3.toList",
    "        val li1_set = li1.toSet\n        val li2_set = li2.toSet\n        val li1_diff_li2 = li1_set.diff(li2_set)\n        val li2_diff_li1 = li2_set.diff(li1_set)\n        val li_diff = li1_diff_li2.union(li2_diff_li1)\n        li_diff.toList",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        for (i <- li2) {\n            if (!li1.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        val li = li1.toSet.diff(li2.toSet).toList\n        return li",
    "        var result = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) result = result :+ i\n        }\n        for (i <- li2) {\n            if (!li1.contains(i)) result = result :+ i\n        }\n        return result",
    "        val li1_set = li1.toSet\n        val li2_set = li2.toSet\n        val li1_li2 = li1_set.diff(li2_set)\n        val li2_li1 = li2_set.diff(li1_set)\n        val li = li1_li2.union(li2_li1).toList\n        li.sorted",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        for (i <- li2) {\n            if (!li1.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        for (i <- li2) {\n            if (!li1.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        val li1Set = li1.toSet\n        val li2Set = li2.toSet\n        val li1SetDiff = li1Set.diff(li2Set)\n        val li2SetDiff = li2Set.diff(li1Set)\n        val li1SetDiffList = li1SetDiff.toList\n        val li2SetDiffList = li2SetDiff.toList\n        li1SetDiffList ::: li2SetDiffList",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        for (i <- li2) {\n            if (!li1.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        val set1 = li1.toSet\n        val set2 = li2.toSet\n        (set1 -- set2).toList",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        for (i <- li2) {\n            if (!li1.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        val li = li1.toSet.diff(li2.toSet).toList\n        li.sorted",
    "        val li1Set = li1.toSet\n        val li2Set = li2.toSet\n        val li1Diff = li1Set -- li2Set\n        val li2Diff = li2Set -- li1Set\n        (li1Diff ++ li2Diff).toList",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        val li = li1.toSet.diff(li2.toSet).toList\n        return li",
    "        val set1 = li1.toSet\n        val set2 = li2.toSet\n        val set3 = set1.diff(set2)\n        set3.toList",
    "        val li3 = li1.toSet -- li2.toSet\n        li3.toList",
    "        val set1 = li1.toSet\n        val set2 = li2.toSet\n        val diff = set1.diff(set2)\n        diff.toList",
    "        val li = li1.toSet.diff(li2.toSet).toList\n        return li",
    "        var result = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                result = i :: result\n            }\n        }\n        for (i <- li2) {\n            if (!li1.contains(i)) {\n                result = i :: result\n            }\n        }\n        return result",
    "        val li = li1.toSet.diff(li2.toSet).toList\n        return li",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        for (i <- li2) {\n            if (!li1.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        val li3 = li1.toSet -- li2.toSet\n        return li3.toList",
    "        val li = li1.toSet.diff(li2.toSet).toList\n        return li",
    "        val li3 = li1.toSet -- li2.toSet\n        li3.toList",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        for (i <- li2) {\n            if (!li1.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        var li3 : List[Long] = List()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        for (i <- li2) {\n            if (!li1.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        val li1_set = li1.toSet\n        val li2_set = li2.toSet\n        val li1_diff_li2 = li1_set.diff(li2_set)\n        val li2_diff_li1 = li2_set.diff(li1_set)\n        (li1_diff_li2 ++ li2_diff_li1).toList",
    "        var li = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li = i :: li\n            }\n        }\n        for (i <- li2) {\n            if (!li1.contains(i)) {\n                li = i :: li\n            }\n        }\n        return li",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        for (i <- li2) {\n            if (!li1.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        li1.diff(li2)",
    "        val li3 = li1.diff(li2)\n        val li4 = li2.diff(li1)\n        return li3 ::: li4",
    "        val li = li1.toSet.diff(li2.toSet).toList\n        li",
    "        val li = li1.toSet.diff(li2.toSet).toList\n        return li",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        for (i <- li2) {\n            if (!li1.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        val li3 = li1.toSet -- li2.toSet\n        li3.toList",
    "        val li1Set = li1.toSet\n        val li2Set = li2.toSet\n        (li1Set -- li2Set).toList",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        for (i <- li2) {\n            if (!li1.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        val li = li1.toSet.diff(li2.toSet).toList\n        return li",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        for (i <- li2) {\n            if (!li1.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        var li = ListBuffer[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li += i\n            }\n        }\n        for (i <- li2) {\n            if (!li1.contains(i)) {\n                li += i\n            }\n        }\n        return li.toList",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        for (i <- li2) {\n            if (!li1.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        val li3 = li1.toSet.diff(li2.toSet).toList\n        return li3",
    "        val li1Set = li1.toSet\n        val li2Set = li2.toSet\n        val diff = li1Set.diff(li2Set)\n        diff.toList",
    "        val li3 = li1.toSet -- li2.toSet\n        li3.toList",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        for (i <- li2) {\n            if (!li1.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        val set1 = li1.toSet\n        val set2 = li2.toSet\n        val diff = set1.diff(set2)\n        diff.toList",
    "        var li3 : List[Long] = List()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        for (i <- li2) {\n            if (!li1.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = li3 :+ i\n            }\n        }\n        for (i <- li2) {\n            if (!li1.contains(i)) {\n                li3 = li3 :+ i\n            }\n        }\n        return li3",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) li3 = i :: li3\n        }\n        for (i <- li2) {\n            if (!li1.contains(i)) li3 = i :: li3\n        }\n        return li3",
    "        val li1Set = li1.toSet\n        val li2Set = li2.toSet\n        val li1Diff = li1Set -- li2Set\n        val li2Diff = li2Set -- li1Set\n        (li1Diff ++ li2Diff).toList",
    "        val li3 = li1.diff(li2)\n        val li4 = li2.diff(li1)\n        return li3 ::: li4",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        for (i <- li2) {\n            if (!li1.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        val li3 = li1.diff(li2)\n        val li4 = li2.diff(li1)\n        return li3 ::: li4",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        var li = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li = i :: li\n            }\n        }\n        for (i <- li2) {\n            if (!li1.contains(i)) {\n                li = i :: li\n            }\n        }\n        return li",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        for (i <- li2) {\n            if (!li1.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        val set1 = li1.toSet\n        val set2 = li2.toSet\n        (set1.diff(set2)).toList",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        for (i <- li2) {\n            if (!li1.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        for (i <- li2) {\n            if (!li1.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        li3",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        for (i <- li2) {\n            if (!li1.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        for (i <- li2) {\n            if (!li1.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        val li = li1.toSet.diff(li2.toSet).toList\n        return li",
    "        val li3 = li1.toSet -- li2.toSet\n        li3.toList",
    "        var li3 : List[Long] = List()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        for (i <- li2) {\n            if (!li1.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        val li1_set = li1.toSet\n        val li2_set = li2.toSet\n        val li1_diff = li1_set.diff(li2_set)\n        val li2_diff = li2_set.diff(li1_set)\n        val li_diff = li1_diff.union(li2_diff)\n        li_diff.toList",
    "        val li1Set = li1.toSet\n        val li2Set = li2.toSet\n        val li1Diff = li1Set.diff(li2Set)\n        val li2Diff = li2Set.diff(li1Set)\n        (li1Diff ++ li2Diff).toList",
    "        val li3 = li1.toSet\n        val li4 = li2.toSet\n        val li5 = li3.diff(li4)\n        val li6 = li4.diff(li3)\n        (li5 ++ li6).toList",
    "        val li1_set = li1.toSet\n        val li2_set = li2.toSet\n        val li1_li2 = li1_set.diff(li2_set)\n        val li2_li1 = li2_set.diff(li1_set)\n        val li1_li2_li2_li1 = li1_li2.union(li2_li1)\n        li1_li2_li2_li1.toList",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        for (i <- li2) {\n            if (!li1.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        for (i <- li2) {\n            if (!li1.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        val li = new ListBuffer[Long]\n        for (i <- li1) {\n            if (!li2.contains(i)) li += i\n        }\n        for (i <- li2) {\n            if (!li1.contains(i)) li += i\n        }\n        return li.toList",
    "        val li = li1.toSet.diff(li2.toSet).toList\n        return li",
    "        var li3 = new ListBuffer[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 += i\n            }\n        }\n        return li3.toList",
    "        var li3 : List[Long] = List()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        for (i <- li2) {\n            if (!li1.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        for (i <- li2) {\n            if (!li1.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        val li3 = li1.diff(li2)\n        val li4 = li2.diff(li1)\n        li3 ::: li4",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) li3 = i :: li3\n        }\n        for (i <- li2) {\n            if (!li1.contains(i)) li3 = i :: li3\n        }\n        return li3",
    "        val set1 = li1.toSet\n        val set2 = li2.toSet\n        val diff = set1.diff(set2)\n        diff.toList",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        for (i <- li2) {\n            if (!li1.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        val li3 = li1.toSet.diff(li2.toSet).toList\n        return li3",
    "        val set1 = li1.toSet\n        val set2 = li2.toSet\n        val diff = set1.diff(set2)\n        diff.toList",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        for (i <- li2) {\n            if (!li1.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = li3 :+ i\n            }\n        }\n        for (i <- li2) {\n            if (!li1.contains(i)) {\n                li3 = li3 :+ i\n            }\n        }\n        return li3",
    "        li1.diff(li2)",
    "        val set1 = li1.toSet\n        val set2 = li2.toSet\n        (set1 -- set2).toList",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        for (i <- li2) {\n            if (!li1.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        val set1 = li1.toSet\n        val set2 = li2.toSet\n        val set3 = set1 -- set2\n        val set4 = set2 -- set1\n        (set3 ++ set4).toList",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        for (i <- li2) {\n            if (!li1.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        val li3 = li1.toSet.diff(li2.toSet).toList\n        return li3",
    "        val li3 = li1.toSet.diff(li2.toSet).toList\n        return li3",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        for (i <- li2) {\n            if (!li1.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        val li3 = li1.toSet.diff(li2.toSet).toList\n        return li3",
    "        val set1 = li1.toSet\n        val set2 = li2.toSet\n        val diff = set1.diff(set2)\n        diff.toList",
    "        var li3 : List[Long] = List()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        for (i <- li2) {\n            if (!li1.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        var li3 : List[Long] = List()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        for (i <- li2) {\n            if (!li1.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        val li1_set = li1.toSet\n        val li2_set = li2.toSet\n        val li1_diff_li2 = li1_set -- li2_set\n        val li2_diff_li1 = li2_set -- li1_set\n        (li1_diff_li2 ++ li2_diff_li1).toList",
    "        li1.diff(li2)",
    "        val li3 = li1.toSet -- li2.toSet\n        return li3.toList",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        for (i <- li2) {\n            if (!li1.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        for (i <- li2) {\n            if (!li1.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        li3",
    "        var li : List[Long] = List()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li = i :: li\n            }\n        }\n        for (i <- li2) {\n            if (!li1.contains(i)) {\n                li = i :: li\n            }\n        }\n        return li",
    "        val li1Set = li1.toSet\n        val li2Set = li2.toSet\n        val li3Set = li1Set.diff(li2Set)\n        val li3 = li3Set.toList\n        return li3",
    "        val li = li1.toSet.diff(li2.toSet).toList\n        return li",
    "        var li3 = List[Long]()\n        for (i <- li1) {\n            if (!li2.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        for (i <- li2) {\n            if (!li1.contains(i)) {\n                li3 = i :: li3\n            }\n        }\n        return li3",
    "        val li3 = li1.toSet\n        val li4 = li2.toSet\n        val li5 = li3.diff(li4)\n        val li6 = li4.diff(li3)\n        val li7 = li5.union(li6)\n        li7.toList"
  ]
}