{
  "name": "mbpp_56_checks",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check if a given number is one less than twice its reverse.\n    def checks(n : Long) : Boolean = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_56_checks.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(checks((70l)) == (false));\n    assert(checks((23l)) == (false));\n    assert(checks((73l)) == (true));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val s = n.toString\n        val r = s.reverse\n        val m = (n - 1).toString\n        val t = m.reverse\n        if (s.length == r.length && s.length == t.length) {\n            val d = s.length / 2\n            if (s.substring(0, d) == r.substring(0, d) && s.substring(0, d) == t.substring(0, d)) {\n                val a = s.substring(d).toLong\n                val b = r.substring(d).toLong\n                val c = t.substring(d).toLong\n                if (a == 2 * b && a == 2 * c) return true\n            }\n        }\n        return false",
    "        val s = n.toString\n        val r = s.reverse\n        val d = (n - r.toLong).abs\n        d == 1",
    "        val r = n.toString.reverse.toLong\n        n == 2 * r - 1",
    "        val r = n.toString.reverse.toLong\n        n == 2 * r - 1",
    "        val s = n.toString\n        val r = s.reverse\n        val m = (n - 1).toString\n        val d = m.length - r.length\n        if (d > 0) {\n            val rr = \"0\" * d + r\n            return rr == m\n        }\n        else if (d < 0) {\n            val mm = \"0\" * (-d) + m\n            return mm == r\n        }\n        else return r == m",
    "        val r = n.toString.reverse.toLong\n        n == 2 * r - 1",
    "        val s = n.toString\n        val r = s.reverse\n        if (r.length == s.length) {\n            val m = (s.toLong - r.toLong).abs\n            if (m == 1) return true\n            else return false\n        }\n        else {\n            val m = (s.toLong - r.toLong).abs\n            if (m == 10) return true\n            else return false\n        }",
    "        val r = n.toString.reverse.toLong\n        n == 2 * r - 1",
    "        val s = n.toString\n        val r = s.reverse\n        val m = (s + r).toLong\n        m / 2 == n",
    "        val s = n.toString\n        val r = s.reverse\n        val t = (n - 1).toString\n        val u = t.reverse\n        if (s.length == r.length && s.length == u.length) {\n            val a = s.toLong\n            val b = r.toLong\n            val c = u.toLong\n            if (a == 2 * b && a == 2 * c) return true\n        }\n        return false",
    "        val s = n.toString\n        val r = s.reverse\n        val m = (n - 1).toString\n        val d = m.length - r.length\n        if (d > 0) {\n            val t = \"0\" * d + r\n            return m == t\n        }\n        else if (d < 0) {\n            val t = r.substring(-d)\n            return m == t\n        }\n        else return m == r",
    "        val s = n.toString\n        val r = s.reverse\n        val m = (s + r).toLong\n        m == n * 2 + 1",
    "        val s = n.toString\n        val r = s.reverse\n        val t = (n - 1).toString\n        val u = t.reverse\n        if (s.length == r.length && s.length == u.length) {\n            val a = s.toLong\n            val b = r.toLong\n            val c = u.toLong\n            if (a == 2 * b && a == 2 * c) return true\n        }\n        return false",
    "        val s = n.toString\n        val r = s.reverse\n        val m = (r.toLong + 1) / 2\n        n == m",
    "        val s = n.toString\n        val r = s.reverse\n        val m = (s + r).toLong\n        m == 2 * n",
    "        val s = n.toString\n        val r = s.reverse\n        val m = (s.length - 1) / 2\n        val l = s.substring(0, m)\n        val rl = r.substring(0, m)\n        val rr = r.substring(m)\n        val lr = s.substring(m)\n        if (l == rl && rr == lr) {\n            val nn = n - 1\n            val ss = nn.toString\n            val rr = ss.reverse\n            val mm = (ss.length - 1) / 2\n            val ll = ss.substring(0, mm)\n            val rrl = rr.substring(0, mm)\n            val rrr = rr.substring(mm)\n            val lrr = ss.substring(mm)\n            if (ll == rrl && rrr == lrr) {\n                return true\n            }\n        }\n        return false",
    "        val s = n.toString\n        val r = s.reverse\n        val m = (n - 1).toString\n        val d = m.length - r.length\n        if (d > 0) {\n            val rr = \"0\" * d + r\n            m == rr\n        } else {\n            val mm = \"0\" * (-d) + m\n            r == mm\n        }",
    "        val s = n.toString\n        val r = s.reverse\n        val m = (s.length - 1) / 2\n        val (a, b) = s.splitAt(m)\n        val (c, d) = r.splitAt(m)\n        if (a == c && b == d) {\n            val x = n - 1\n            val y = x / 2\n            val z = y.toString.reverse.toLong\n            y == z\n        } else {\n            false\n        }",
    "        val r = n.toString.reverse.toLong\n        n == 2 * r - 1",
    "        val s = n.toString\n        val r = s.reverse\n        val t = (n - 1).toString\n        val u = t.reverse\n        return s == u"
  ]
}