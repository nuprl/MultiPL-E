{
  "name": "mbpp_730_consecutive_duplicates",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove consecutive duplicates of a given list.\n    def consecutiveDuplicates(nums : Any) : Any = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_730_consecutive_duplicates.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(consecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong))));\n    assert(consecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))));\n    assert(consecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(\"a\", \"b\", \"c\", \"d\"))));\n    assert(consecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"))).equals((Any(\"a\", \"b\", \"c\", \"d\", \"a\"))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => if (x == xs.head) consecutiveDuplicates(xs) else x :: consecutiveDuplicates(xs)\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => if (x == xs.head) consecutiveDuplicates(xs) else x :: consecutiveDuplicates(xs)\n        }",
    "        var result = List[Any]()\n        var last = 0\n        for (i <- 0 until nums.length) {\n            if (nums(i) != last) {\n                result = result :+ nums(i)\n                last = nums(i)\n            }\n        }\n        result",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => if (x == xs.head) consecutiveDuplicates(xs) else x :: consecutiveDuplicates(xs)\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x\n            case x :: xs => x :: consecutiveDuplicates(xs.dropWhile(_ == x))\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => if (x == xs.head) consecutiveDuplicates(xs) else x :: consecutiveDuplicates(xs)\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: xs => x :: consecutiveDuplicates(xs.dropWhile(_ == x))\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: xs => x :: consecutiveDuplicates(xs.dropWhile(_ == x))\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: xs => x :: consecutiveDuplicates(xs.dropWhile(_ == x))\n        }",
    "        var result = ListBuffer[Any]()\n        var last = 0\n        for (i <- 0 until nums.asInstanceOf[List[Any]].length) {\n            if (nums.asInstanceOf[List[Any]].apply(i) != last) {\n                result += nums.asInstanceOf[List[Any]].apply(i)\n                last = nums.asInstanceOf[List[Any]].apply(i)\n            }\n        }\n        result",
    "        if (nums.isInstanceOf[List[Any]]) {\n            val list = nums.asInstanceOf[List[Any]]\n            if (list.length == 0) {\n                return List()\n            }\n            var result = List(list(0))\n            for (i <- 1 until list.length) {\n                if (list(i) != list(i - 1)) {\n                    result = result :+ list(i)\n                }\n            }\n            return result\n        }\n        return nums",
    "        nums match {\n            case Nil => Nil\n            case x :: xs => x :: consecutiveDuplicates(xs.dropWhile(_ == x))\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: y :: xs => if (x == y) consecutiveDuplicates(y :: xs) else x :: consecutiveDuplicates(y :: xs)\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: xs => x :: consecutiveDuplicates(xs.dropWhile(_ == x))\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => if (x == xs.head) consecutiveDuplicates(xs) else x :: consecutiveDuplicates(xs)\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: xs => x :: consecutiveDuplicates(xs.dropWhile(_ == x))\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => {\n                if (x == xs.head) consecutiveDuplicates(xs)\n                else x :: consecutiveDuplicates(xs)\n            }\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => List(x)\n            case x :: xs => {\n                if (x == xs.head) consecutiveDuplicates(xs)\n                else x :: consecutiveDuplicates(xs)\n            }\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x\n            case x :: y :: xs => if (x == y) consecutiveDuplicates(y :: xs) else x :: consecutiveDuplicates(y :: xs)\n        }",
    "        if (nums.isInstanceOf[List[Any]]) {\n            val list = nums.asInstanceOf[List[Any]]\n            if (list.isEmpty) {\n                return List()\n            }\n            var result = List(list.head)\n            for (i <- 1 until list.length) {\n                if (list(i) != result.last) {\n                    result = result :+ list(i)\n                }\n            }\n            return result\n        }\n        else {\n            return nums\n        }"
  ]
}