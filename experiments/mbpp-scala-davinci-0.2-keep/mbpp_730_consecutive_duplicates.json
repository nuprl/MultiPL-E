{
  "name": "mbpp_730_consecutive_duplicates",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove consecutive duplicates of a given list.\n    def consecutiveDuplicates(nums : Any) : Any = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_730_consecutive_duplicates.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(consecutiveDuplicates((Any(0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))).equals((Any(0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong))));\n    assert(consecutiveDuplicates((Any(10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))).equals((Any(10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))));\n    assert(consecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"))).equals((Any(\"a\", \"b\", \"c\", \"d\"))));\n    assert(consecutiveDuplicates((Any(\"a\", \"a\", \"b\", \"c\", \"d\", \"d\", \"a\", \"a\"))).equals((Any(\"a\", \"b\", \"c\", \"d\", \"a\"))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => if (x == xs.head) consecutiveDuplicates(xs) else x :: consecutiveDuplicates(xs)\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => if (x == xs.head) consecutiveDuplicates(xs) else x :: consecutiveDuplicates(xs)\n        }",
    "        var result = List[Any]()\n        var last = 0\n        for (i <- 0 until nums.length) {\n            if (nums(i) != last) {\n                result = result :+ nums(i)\n                last = nums(i)\n            }\n        }\n        result",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => if (x == xs.head) consecutiveDuplicates(xs) else x :: consecutiveDuplicates(xs)\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x\n            case x :: xs => x :: consecutiveDuplicates(xs.dropWhile(_ == x))\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => if (x == xs.head) consecutiveDuplicates(xs) else x :: consecutiveDuplicates(xs)\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: xs => x :: consecutiveDuplicates(xs.dropWhile(_ == x))\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: xs => x :: consecutiveDuplicates(xs.dropWhile(_ == x))\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: xs => x :: consecutiveDuplicates(xs.dropWhile(_ == x))\n        }",
    "        var result = ListBuffer[Any]()\n        var last = 0\n        for (i <- 0 until nums.asInstanceOf[List[Any]].length) {\n            if (nums.asInstanceOf[List[Any]].apply(i) != last) {\n                result += nums.asInstanceOf[List[Any]].apply(i)\n                last = nums.asInstanceOf[List[Any]].apply(i)\n            }\n        }\n        result",
    "        if (nums.isInstanceOf[List[Any]]) {\n            val list = nums.asInstanceOf[List[Any]]\n            if (list.length == 0) {\n                return List()\n            }\n            var result = List(list(0))\n            for (i <- 1 until list.length) {\n                if (list(i) != list(i - 1)) {\n                    result = result :+ list(i)\n                }\n            }\n            return result\n        }\n        return nums",
    "        nums match {\n            case Nil => Nil\n            case x :: xs => x :: consecutiveDuplicates(xs.dropWhile(_ == x))\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: y :: xs => if (x == y) consecutiveDuplicates(y :: xs) else x :: consecutiveDuplicates(y :: xs)\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: xs => x :: consecutiveDuplicates(xs.dropWhile(_ == x))\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => if (x == xs.head) consecutiveDuplicates(xs) else x :: consecutiveDuplicates(xs)\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: xs => x :: consecutiveDuplicates(xs.dropWhile(_ == x))\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => {\n                if (x == xs.head) consecutiveDuplicates(xs)\n                else x :: consecutiveDuplicates(xs)\n            }\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => List(x)\n            case x :: xs => {\n                if (x == xs.head) consecutiveDuplicates(xs)\n                else x :: consecutiveDuplicates(xs)\n            }\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x\n            case x :: y :: xs => if (x == y) consecutiveDuplicates(y :: xs) else x :: consecutiveDuplicates(y :: xs)\n        }",
    "        if (nums.isInstanceOf[List[Any]]) {\n            val list = nums.asInstanceOf[List[Any]]\n            if (list.isEmpty) {\n                return List()\n            }\n            var result = List(list.head)\n            for (i <- 1 until list.length) {\n                if (list(i) != result.last) {\n                    result = result :+ list(i)\n                }\n            }\n            return result\n        }\n        else {\n            return nums\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => {\n                if (x == xs.head) consecutiveDuplicates(xs)\n                else x :: consecutiveDuplicates(xs)\n            }\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => if (x == xs.head) consecutiveDuplicates(xs) else x :: consecutiveDuplicates(xs)\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: xs => x :: consecutiveDuplicates(xs.dropWhile(_ == x))\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: xs => x :: consecutiveDuplicates(xs.dropWhile(_ == x))\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => {\n                if (x == xs.head) consecutiveDuplicates(xs)\n                else x :: consecutiveDuplicates(xs)\n            }\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => if (x == xs.head) consecutiveDuplicates(xs) else x :: consecutiveDuplicates(xs)\n        }",
    "        nums match {\n            case Nil => Nil\n            case head :: tail => head :: consecutiveDuplicates(tail.dropWhile(_ == head))\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => if (x == xs.head) consecutiveDuplicates(xs) else x :: consecutiveDuplicates(xs)\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: xs => x :: consecutiveDuplicates(xs.dropWhile(_ == x))\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => if (x == xs.head) consecutiveDuplicates(xs) else x :: consecutiveDuplicates(xs)\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => List(x)\n            case x :: xs => x :: consecutiveDuplicates(xs.dropWhile(_ == x))\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: xs => x :: consecutiveDuplicates(xs.dropWhile(_ == x))\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: y :: xs => if (x == y) consecutiveDuplicates(y :: xs) else x :: consecutiveDuplicates(y :: xs)\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => if (x == xs.head) consecutiveDuplicates(xs) else x :: consecutiveDuplicates(xs)\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => {\n                if (x == xs.head) consecutiveDuplicates(xs)\n                else x :: consecutiveDuplicates(xs)\n            }\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => if (x == xs.head) consecutiveDuplicates(xs) else x :: consecutiveDuplicates(xs)\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: xs => x :: consecutiveDuplicates(xs.dropWhile(_ == x))\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => List(x)\n            case x :: xs => {\n                if (x == xs.head) consecutiveDuplicates(xs)\n                else x :: consecutiveDuplicates(xs)\n            }\n        }",
    "        val list = nums.asInstanceOf[List[Any]]\n        if (list.isEmpty) List()\n        else {\n            val head = list.head\n            val tail = list.tail\n            if (tail.isEmpty) List(head)\n            else if (head == tail.head) consecutiveDuplicates(tail)\n            else head :: consecutiveDuplicates(tail)\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x\n            case x :: y :: xs => if (x == y) consecutiveDuplicates(y :: xs) else x :: consecutiveDuplicates(y :: xs)\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => if (x == xs.head) consecutiveDuplicates(xs) else x :: consecutiveDuplicates(xs)\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: xs => x :: consecutiveDuplicates(xs.dropWhile(_ == x))\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: xs => x :: consecutiveDuplicates(xs.dropWhile(_ == x))\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: xs => x :: consecutiveDuplicates(xs.dropWhile(_ == x))\n        }",
    "        var result = List[Any]()\n        var last : Any = 0\n        for (num <- nums.asInstanceOf[List[Any]]) {\n            if (num != last) {\n                result = result :+ num\n                last = num\n            }\n        }\n        result",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x\n            case x :: xs => if (x == xs.head) consecutiveDuplicates(xs) else x :: consecutiveDuplicates(xs)\n        }",
    "        nums match {\n            case Nil => Nil\n            case h :: Nil => List(h)\n            case h :: t => if (h == t.head) consecutiveDuplicates(t) else h :: consecutiveDuplicates(t)\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => if (x == xs.head) consecutiveDuplicates(xs) else x :: consecutiveDuplicates(xs)\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x\n            case x :: xs => {\n                if (x == xs.head) consecutiveDuplicates(xs)\n                else x :: consecutiveDuplicates(xs)\n            }\n        }",
    "        nums match {\n            case Nil => Nil\n            case h :: Nil => h :: Nil\n            case h :: t => if (h == t.head) consecutiveDuplicates(t) else h :: consecutiveDuplicates(t)\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => if (x == xs.head) consecutiveDuplicates(xs) else x :: consecutiveDuplicates(xs)\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: xs => x :: consecutiveDuplicates(xs.dropWhile(_ == x))\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => if (x == xs.head) consecutiveDuplicates(xs) else x :: consecutiveDuplicates(xs)\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => if (x == xs.head) consecutiveDuplicates(xs) else x :: consecutiveDuplicates(xs)\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: xs => x :: consecutiveDuplicates(xs.dropWhile(_ == x))\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => {\n                if (x == xs.head) consecutiveDuplicates(xs)\n                else x :: consecutiveDuplicates(xs)\n            }\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => if (x == xs.head) consecutiveDuplicates(xs) else x :: consecutiveDuplicates(xs)\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => if (x == xs.head) consecutiveDuplicates(xs) else x :: consecutiveDuplicates(xs)\n        }",
    "        def consecutiveDuplicatesHelper(nums : List[Any], acc : List[Any]) : List[Any] = {\n            if (nums.isEmpty) acc\n            else if (acc.isEmpty) consecutiveDuplicatesHelper(nums.tail, acc :+ nums.head)\n            else if (acc.last == nums.head) consecutiveDuplicatesHelper(nums.tail, acc)\n            else consecutiveDuplicatesHelper(nums.tail, acc :+ nums.head)\n        }\n        consecutiveDuplicatesHelper(nums.asInstanceOf[List[Any]], List())",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => if (x == xs.head) consecutiveDuplicates(xs) else x :: consecutiveDuplicates(xs)\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => if (x == xs.head) consecutiveDuplicates(xs) else x :: consecutiveDuplicates(xs)\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: xs => x :: consecutiveDuplicates(xs.dropWhile(_ == x))\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: xs => x :: consecutiveDuplicates(xs.dropWhile(_ == x))\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x\n            case x :: y :: xs => if (x == y) consecutiveDuplicates(y :: xs) else x :: consecutiveDuplicates(y :: xs)\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: xs => x :: consecutiveDuplicates(xs.dropWhile(_ == x))\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: xs => x :: consecutiveDuplicates(xs.dropWhile(_ == x))\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => if (x == xs.head) consecutiveDuplicates(xs) else x :: consecutiveDuplicates(xs)\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => {\n                if (x == xs.head) consecutiveDuplicates(xs)\n                else x :: consecutiveDuplicates(xs)\n            }\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => if (x == xs.head) consecutiveDuplicates(xs) else x :: consecutiveDuplicates(xs)\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => List(x)\n            case x :: y :: xs if x == y => consecutiveDuplicates(y :: xs)\n            case x :: y :: xs => x :: consecutiveDuplicates(y :: xs)\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => List(x)\n            case x :: xs => {\n                if (x == xs.head) consecutiveDuplicates(xs)\n                else x :: consecutiveDuplicates(xs)\n            }\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: xs => x :: consecutiveDuplicates(xs.dropWhile(_ == x))\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: xs => x :: consecutiveDuplicates(xs.dropWhile(_ == x))\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => List(x)\n            case x :: xs => {\n                if (x == xs.head) consecutiveDuplicates(xs)\n                else x :: consecutiveDuplicates(xs)\n            }\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => {\n                if (x == xs.head) consecutiveDuplicates(xs)\n                else x :: consecutiveDuplicates(xs)\n            }\n        }",
    "        var result = List[Any]()\n        var last = nums.asInstanceOf[List[Any]].head\n        for (num <- nums.asInstanceOf[List[Any]]) {\n            if (num != last) {\n                result = result :+ num\n                last = num\n            }\n        }\n        result",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => if (x == xs.head) consecutiveDuplicates(xs) else x :: consecutiveDuplicates(xs)\n        }",
    "        if (nums.isInstanceOf[List[Any]]) {\n            val list = nums.asInstanceOf[List[Any]]\n            if (list.length == 0) {\n                return List()\n            }\n            var result = List(list(0))\n            for (i <- 1 until list.length) {\n                if (list(i) != result(result.length - 1)) {\n                    result = result :+ list(i)\n                }\n            }\n            return result\n        }\n        return nums",
    "        nums match {\n            case Nil => Nil\n            case x :: xs => x :: consecutiveDuplicates(xs.dropWhile(_ == x))\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => if (x == xs.head) consecutiveDuplicates(xs) else x :: consecutiveDuplicates(xs)\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => {\n                if (x == xs.head) consecutiveDuplicates(xs)\n                else x :: consecutiveDuplicates(xs)\n            }\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => {\n                if (x == xs.head) consecutiveDuplicates(xs)\n                else x :: consecutiveDuplicates(xs)\n            }\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: y :: xs => if (x == y) consecutiveDuplicates(y :: xs) else x :: consecutiveDuplicates(y :: xs)\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => if (x == xs.head) consecutiveDuplicates(xs) else x :: consecutiveDuplicates(xs)\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => List(x)\n            case x :: xs => if (x == xs.head) consecutiveDuplicates(xs) else x :: consecutiveDuplicates(xs)\n        }",
    "        var result = ListBuffer[Any]()\n        var prev : Any = null\n        for (num <- nums.asInstanceOf[List[Any]]) {\n            if (num != prev) {\n                result += num\n                prev = num\n            }\n        }\n        result.toList",
    "        var result = List[Any]()\n        var prev = nums.asInstanceOf[List[Any]].head\n        for (num <- nums.asInstanceOf[List[Any]]) {\n            if (num != prev) {\n                result = result :+ num\n                prev = num\n            }\n        }\n        result",
    "        nums match {\n            case Nil => Nil\n            case head :: tail => head :: consecutiveDuplicates(tail.dropWhile(_ == head))\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x\n            case x :: xs => x :: consecutiveDuplicates(xs.dropWhile(_ == x))\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => if (x == xs.head) consecutiveDuplicates(xs) else x :: consecutiveDuplicates(xs)\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: y :: xs => if (x == y) consecutiveDuplicates(y :: xs) else x :: consecutiveDuplicates(y :: xs)\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => if (x == xs.head) consecutiveDuplicates(xs) else x :: consecutiveDuplicates(xs)\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => List(x)\n            case x :: y :: xs => if (x == y) consecutiveDuplicates(y :: xs) else x :: consecutiveDuplicates(y :: xs)\n        }",
    "        var result = ListBuffer[Any]()\n        var last : Any = null\n        for (num <- nums.asInstanceOf[List[Any]]) {\n            if (num != last) {\n                result += num\n                last = num\n            }\n        }\n        result",
    "        nums match {\n            case Nil => Nil\n            case x :: xs => x :: consecutiveDuplicates(xs.dropWhile(_ == x))\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => if (x == xs.head) consecutiveDuplicates(xs) else x :: consecutiveDuplicates(xs)\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => {\n                if (x == xs.head) consecutiveDuplicates(xs)\n                else x :: consecutiveDuplicates(xs)\n            }\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: xs => x :: consecutiveDuplicates(xs.dropWhile(_ == x))\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => if (x == xs.head) consecutiveDuplicates(xs) else x :: consecutiveDuplicates(xs)\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => {\n                if (x == xs.head) consecutiveDuplicates(xs)\n                else x :: consecutiveDuplicates(xs)\n            }\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => List(x)\n            case x :: y :: xs => if (x == y) consecutiveDuplicates(y :: xs) else x :: consecutiveDuplicates(y :: xs)\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => if (x == xs.head) consecutiveDuplicates(xs) else x :: consecutiveDuplicates(xs)\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: y :: xs => if (x == y) consecutiveDuplicates(y :: xs) else x :: consecutiveDuplicates(y :: xs)\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: xs => x :: consecutiveDuplicates(xs.dropWhile(_ == x))\n        }",
    "        if (nums.isInstanceOf[List[Any]]) {\n            val list = nums.asInstanceOf[List[Any]]\n            if (list.isEmpty) List()\n            else if (list.tail.isEmpty) List(list.head)\n            else if (list.head == list.tail.head) consecutiveDuplicates(list.tail)\n            else List(list.head) ::: consecutiveDuplicates(list.tail)\n        }\n        else throw new Exception(\"Input must be a list\")",
    "        nums match {\n            case Nil => Nil\n            case x :: xs => x :: consecutiveDuplicates(xs.dropWhile(_ == x))\n        }",
    "        val list = nums.asInstanceOf[List[Any]]\n        var result = List[Any]()\n        for (i <- 0 until list.length) {\n            if (i == 0) result = result :+ list(i)\n            else if (list(i) != list(i - 1)) result = result :+ list(i)\n        }\n        result",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => if (x == xs.head) consecutiveDuplicates(xs) else x :: consecutiveDuplicates(xs)\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x\n            case x :: xs => x :: consecutiveDuplicates(xs.dropWhile(_ == x))\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: xs => x :: consecutiveDuplicates(xs.dropWhile(_ == x))\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => if (x == xs.head) consecutiveDuplicates(xs) else x :: consecutiveDuplicates(xs)\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => if (x == xs.head) consecutiveDuplicates(xs) else x :: consecutiveDuplicates(xs)\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => if (x == xs.head) consecutiveDuplicates(xs) else x :: consecutiveDuplicates(xs)\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => if (x == xs.head) consecutiveDuplicates(xs) else x :: consecutiveDuplicates(xs)\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: xs => x :: consecutiveDuplicates(xs.dropWhile(_ == x))\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: y :: xs => if (x == y) consecutiveDuplicates(y :: xs) else x :: consecutiveDuplicates(y :: xs)\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => List(x)\n            case x :: xs => if (x == xs.head) consecutiveDuplicates(xs) else x :: consecutiveDuplicates(xs)\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: xs => x :: consecutiveDuplicates(xs.dropWhile(_ == x))\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => if (x == xs.head) consecutiveDuplicates(xs) else x :: consecutiveDuplicates(xs)\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => if (x == xs.head) consecutiveDuplicates(xs) else x :: consecutiveDuplicates(xs)\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: xs => x :: consecutiveDuplicates(xs.dropWhile(_ == x))\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: y :: xs => if (x == y) consecutiveDuplicates(y :: xs) else x :: consecutiveDuplicates(y :: xs)\n        }",
    "        var result = ListBuffer[Any]()\n        for (i <- nums.asInstanceOf[List[Any]]) {\n            if (result.isEmpty || result.last != i) result += i\n        }\n        result",
    "        nums match {\n            case Nil => Nil\n            case x :: xs => x :: consecutiveDuplicates(xs.dropWhile(_ == x))\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: xs => x :: consecutiveDuplicates(xs.dropWhile(_ == x))\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => {\n                if (x == xs.head) consecutiveDuplicates(xs)\n                else x :: consecutiveDuplicates(xs)\n            }\n        }",
    "        nums match {\n            case Nil => Nil\n            case head :: tail => head :: consecutiveDuplicates(tail.dropWhile(_ == head))\n        }",
    "        var prev = nums.head\n        var result = ListBuffer[Any]()\n        for (i <- nums) {\n            if (i != prev) {\n                result += i\n                prev = i\n            }\n        }\n        result.toList",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x\n            case x :: xs => if (x == xs.head) consecutiveDuplicates(xs) else x :: consecutiveDuplicates(xs)\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => {\n                if (x == xs.head) consecutiveDuplicates(xs)\n                else x :: consecutiveDuplicates(xs)\n            }\n        }",
    "        nums match {\n            case Nil => Nil\n            case head :: tail => head :: consecutiveDuplicates(tail.dropWhile(_ == head))\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => if (x == xs.head) consecutiveDuplicates(xs) else x :: consecutiveDuplicates(xs)\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: xs => x :: consecutiveDuplicates(xs.dropWhile(_ == x))\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x\n            case x :: xs => x :: consecutiveDuplicates(xs.dropWhile(_ == x))\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => if (x == xs.head) consecutiveDuplicates(xs) else x :: consecutiveDuplicates(xs)\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => List(x)\n            case x :: xs => x :: consecutiveDuplicates(xs.dropWhile(_ == x))\n        }",
    "        var result = ListBuffer[Any]()\n        var prev = nums.asInstanceOf[List[Any]].head\n        for (num <- nums.asInstanceOf[List[Any]]) {\n            if (num != prev) {\n                result += num\n                prev = num\n            }\n        }\n        result.toList",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => List(x)\n            case x :: xs => {\n                if (x == xs.head) consecutiveDuplicates(xs)\n                else x :: consecutiveDuplicates(xs)\n            }\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: xs => x :: consecutiveDuplicates(xs.dropWhile(_ == x))\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: xs => x :: consecutiveDuplicates(xs.dropWhile(_ == x))\n        }",
    "        nums match {\n            case Nil => Nil\n            case head :: tail => head :: consecutiveDuplicates(tail.dropWhile(_ == head))\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => if (x == xs.head) consecutiveDuplicates(xs) else x :: consecutiveDuplicates(xs)\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: xs => x :: consecutiveDuplicates(xs.dropWhile(_ == x))\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: xs => x :: consecutiveDuplicates(xs.dropWhile(_ == x))\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => List(x)\n            case x :: xs => {\n                if (x == xs.head) consecutiveDuplicates(xs)\n                else x :: consecutiveDuplicates(xs)\n            }\n        }",
    "        var result = ListBuffer[Any]()\n        var current = nums.asInstanceOf[List[Any]].head\n        for (i <- nums.asInstanceOf[List[Any]]) {\n            if (i != current) {\n                result += i\n                current = i\n            }\n        }\n        result.toList",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: y :: xs => if (x == y) consecutiveDuplicates(y :: xs) else x :: consecutiveDuplicates(y :: xs)\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: xs => x :: consecutiveDuplicates(xs.dropWhile(_ == x))\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => {\n                if (x == xs.head) consecutiveDuplicates(xs)\n                else x :: consecutiveDuplicates(xs)\n            }\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => List(x)\n            case x :: xs => if (x == xs.head) consecutiveDuplicates(xs) else x :: consecutiveDuplicates(xs)\n        }",
    "        var result = ListBuffer[Any]()\n        var last = nums.asInstanceOf[List[Any]].head\n        for (i <- nums.asInstanceOf[List[Any]]) {\n            if (i != last) {\n                result += i\n                last = i\n            }\n        }\n        result",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => {\n                if (x == xs.head) consecutiveDuplicates(xs)\n                else x :: consecutiveDuplicates(xs)\n            }\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => if (x == xs.head) consecutiveDuplicates(xs) else x :: consecutiveDuplicates(xs)\n        }",
    "        def consecutiveDuplicatesHelper(nums : List[Any], result : List[Any]) : List[Any] = {\n            if (nums.isEmpty) result\n            else if (result.isEmpty) consecutiveDuplicatesHelper(nums.tail, result :+ nums.head)\n            else if (nums.head == result.last) consecutiveDuplicatesHelper(nums.tail, result)\n            else consecutiveDuplicatesHelper(nums.tail, result :+ nums.head)\n        }\n        consecutiveDuplicatesHelper(nums.asInstanceOf[List[Any]], List())",
    "        nums match {\n            case Nil => Nil\n            case x :: xs => x :: consecutiveDuplicates(xs.dropWhile(_ == x))\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: xs => x :: consecutiveDuplicates(xs.dropWhile(_ == x))\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => if (x == xs.head) consecutiveDuplicates(xs) else x :: consecutiveDuplicates(xs)\n        }",
    "        if (nums.isInstanceOf[List[Any]]) {\n            var result = List[Any]()\n            var last = nums.asInstanceOf[List[Any]].head\n            for (i <- nums.asInstanceOf[List[Any]]) {\n                if (i != last) {\n                    result = result :+ i\n                    last = i\n                }\n            }\n            return result\n        } else {\n            return nums\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => if (x == xs.head) consecutiveDuplicates(xs) else x :: consecutiveDuplicates(xs)\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: xs => x :: consecutiveDuplicates(xs.dropWhile(_ == x))\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: y :: xs => if (x == y) consecutiveDuplicates(y :: xs) else x :: consecutiveDuplicates(y :: xs)\n        }",
    "        var result = ListBuffer[Any]()\n        var last = nums.asInstanceOf[List[Any]].head\n        for (i <- nums.asInstanceOf[List[Any]]) {\n            if (i != last) {\n                result += i\n                last = i\n            }\n        }\n        result.toList",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => if (x == xs.head) consecutiveDuplicates(xs) else x :: consecutiveDuplicates(xs)\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: xs => x :: consecutiveDuplicates(xs.dropWhile(_ == x))\n        }",
    "        def consecutiveDuplicatesHelper(nums : Any, acc : Any) : Any = {\n            if (nums == Nil) acc\n            else if (acc == Nil) consecutiveDuplicatesHelper(nums.asInstanceOf[List[Any]].tail, List(nums.asInstanceOf[List[Any]].head))\n            else if (nums.asInstanceOf[List[Any]].head == acc.asInstanceOf[List[Any]].head) consecutiveDuplicatesHelper(nums.asInstanceOf[List[Any]].tail, acc)\n            else consecutiveDuplicatesHelper(nums.asInstanceOf[List[Any]].tail, acc ::: List(nums.asInstanceOf[List[Any]].head))\n        }\n        consecutiveDuplicatesHelper(nums, Nil)",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => if (x == xs.head) consecutiveDuplicates(xs) else x :: consecutiveDuplicates(xs)\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: xs => x :: consecutiveDuplicates(xs.dropWhile(_ == x))\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => List(x)\n            case x :: xs => {\n                if (x == xs.head) consecutiveDuplicates(xs)\n                else x :: consecutiveDuplicates(xs)\n            }\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => if (x == xs.head) consecutiveDuplicates(xs) else x :: consecutiveDuplicates(xs)\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => if (x == xs.head) consecutiveDuplicates(xs) else x :: consecutiveDuplicates(xs)\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: xs => x :: consecutiveDuplicates(xs.dropWhile(_ == x))\n        }",
    "        var result : List[Any] = List()\n        var last : Any = null\n        for (i <- nums.asInstanceOf[List[Any]]) {\n            if (i != last) {\n                result = result :+ i\n                last = i\n            }\n        }\n        result",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => List(x)\n            case x :: xs => {\n                if (x == xs.head) consecutiveDuplicates(xs)\n                else x :: consecutiveDuplicates(xs)\n            }\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => if (x == xs.head) consecutiveDuplicates(xs) else x :: consecutiveDuplicates(xs)\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => if (x == xs.head) consecutiveDuplicates(xs) else x :: consecutiveDuplicates(xs)\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: xs => x :: consecutiveDuplicates(xs.dropWhile(_ == x))\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => List(x)\n            case x :: xs => x :: consecutiveDuplicates(xs.dropWhile(_ == x))\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => {\n                if (x == xs.head) consecutiveDuplicates(xs)\n                else x :: consecutiveDuplicates(xs)\n            }\n        }",
    "        val list = nums.asInstanceOf[List[Any]]\n        list match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: y :: xs => if (x == y) consecutiveDuplicates(y :: xs) else x :: consecutiveDuplicates(y :: xs)\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => if (x == xs.head) consecutiveDuplicates(xs) else x :: consecutiveDuplicates(xs)\n        }",
    "        if (nums.isInstanceOf[List[Any]]) {\n            val list = nums.asInstanceOf[List[Any]]\n            if (list.length == 0) return list\n            var result = List[Any]()\n            var last = list.head\n            result = result :+ last\n            for (i <- 1 until list.length) {\n                if (list(i) != last) {\n                    result = result :+ list(i)\n                    last = list(i)\n                }\n            }\n            return result\n        }\n        else {\n            return nums\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => if (x == xs.head) consecutiveDuplicates(xs) else x :: consecutiveDuplicates(xs)\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => List(x)\n            case x :: xs => x :: consecutiveDuplicates(xs.dropWhile(y => y == x))\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: xs => x :: consecutiveDuplicates(xs.dropWhile(_ == x))\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => List(x)\n            case x :: xs => {\n                if (x == xs.head) consecutiveDuplicates(xs)\n                else x :: consecutiveDuplicates(xs)\n            }\n        }",
    "        if (nums.isInstanceOf[List[Any]]) {\n            val list = nums.asInstanceOf[List[Any]]\n            if (list.length == 0) {\n                return List()\n            }\n            var result = List(list(0))\n            for (i <- 1 until list.length) {\n                if (list(i) != list(i - 1)) {\n                    result = result :+ list(i)\n                }\n            }\n            return result\n        }\n        return nums",
    "        nums match {\n            case Nil => Nil\n            case x :: xs => x :: consecutiveDuplicates(xs.dropWhile(_ == x))\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => List(x)\n            case x :: xs => {\n                if (x == xs.head) consecutiveDuplicates(xs)\n                else x :: consecutiveDuplicates(xs)\n            }\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => {\n                if (x == xs.head) consecutiveDuplicates(xs)\n                else x :: consecutiveDuplicates(xs)\n            }\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => if (x == xs.head) consecutiveDuplicates(xs) else x :: consecutiveDuplicates(xs)\n        }",
    "        nums match {\n            case Nil => Nil\n            case head :: tail => head :: consecutiveDuplicates(tail.dropWhile(_ == head))\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: xs => x :: consecutiveDuplicates(xs.dropWhile(_ == x))\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => {\n                if (x == xs.head) consecutiveDuplicates(xs)\n                else x :: consecutiveDuplicates(xs)\n            }\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => if (x == xs.head) consecutiveDuplicates(xs) else x :: consecutiveDuplicates(xs)\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: xs => x :: consecutiveDuplicates(xs.dropWhile(_ == x))\n        }",
    "        nums match {\n            case Nil => Nil\n            case head :: tail => head :: consecutiveDuplicates(tail.dropWhile(_ == head))\n        }",
    "        val list = nums.asInstanceOf[List[Any]]\n        if (list.length == 0) {\n            return Nil\n        }\n        val head = list.head\n        val tail = list.tail\n        if (tail.length == 0) {\n            return List(head)\n        }\n        if (head == tail.head) {\n            return consecutiveDuplicates(tail)\n        }\n        return List(head) ::: consecutiveDuplicates(tail).asInstanceOf[List[Any]]",
    "        nums match {\n            case Nil => Nil\n            case head :: tail => head :: consecutiveDuplicates(tail.dropWhile(_ == head))\n        }",
    "        nums match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => if (x == xs.head) consecutiveDuplicates(xs) else x :: consecutiveDuplicates(xs)\n        }",
    "        if (nums == Nil) Nil\n        else nums.asInstanceOf[List[Any]].head :: consecutiveDuplicates(nums.asInstanceOf[List[Any]].tail.dropWhile(_ == nums.asInstanceOf[List[Any]].head))"
  ]
}