{
  "name": "mbpp_57_find_Max_Num",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the largest number that can be formed with the given list of digits.\n    def findMaxNum(arr : List[Long]) : Long = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_57_find_Max_Num.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(findMaxNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (321l));\n    assert(findMaxNum((List[Long](4l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (6541l));\n    assert(findMaxNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 9l.toLong))) == (9321l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var maxNum = 0L\n        for (i <- 0 to arr.length - 1) {\n            var num = 0L\n            for (j <- i to arr.length - 1) {\n                num = num * 10 + arr(j)\n                maxNum = max(maxNum, num)\n            }\n        }\n        return maxNum",
    "        var maxNum = 0L\n        for (i <- 0 to arr.length - 1) {\n            var num = 0L\n            for (j <- 0 to arr.length - 1) {\n                if (i != j) {\n                    num = num * 10 + arr(j)\n                }\n            }\n            maxNum = max(maxNum, num)\n        }\n        return maxNum",
    "        var maxNum = 0L\n        for (i <- 0 until arr.length) {\n            maxNum = max(maxNum, arr(i))\n        }\n        maxNum",
    "        arr.sorted.reverse.mkString.toLong",
    "        var result = 0L\n        for (i <- arr.sorted.reverse) {\n            result = result * 10 + i\n        }\n        result",
    "        arr.sorted.reverse.mkString.toLong",
    "        var max = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                val num1 = arr(i).toString + arr(j).toString\n                val num2 = arr(j).toString + arr(i).toString\n                if (num1.toLong > num2.toLong) {\n                    val temp = arr(i)\n                    arr(i) = arr(j)\n                    arr(j) = temp\n                }\n            }\n        }\n        for (i <- 0 until arr.length) max = max * 10 + arr(i)\n        max",
    "        arr.sorted.reverse.mkString.toLong",
    "        arr.sorted.reverse.mkString.toLong",
    "        val sorted = arr.sorted\n        val reversed = sorted.reverse\n        var result = \"\"\n        for (i <- 0 until reversed.length) {\n            result += reversed(i).toString\n        }\n        result.toLong",
    "        var maxNum = 0L\n        for (i <- 0 until arr.length) {\n            var temp = arr(i)\n            for (j <- 0 until arr.length) {\n                if (i != j) {\n                    temp = temp * 10 + arr(j)\n                }\n            }\n            if (temp > maxNum) {\n                maxNum = temp\n            }\n        }\n        return maxNum",
    "        arr.sorted.reverse.mkString.toLong",
    "        var maxNum = 0L\n        for (i <- 0 until arr.length) {\n            var num = 0L\n            for (j <- i until arr.length) {\n                num = num * 10 + arr(j)\n                maxNum = max(maxNum, num)\n            }\n        }\n        return maxNum",
    "        var max = 0L\n        for (i <- 0 until arr.length) {\n            max = max * 10 + arr(i)\n        }\n        max",
    "        var maxNum = 0L\n        for (i <- 0 until arr.length) {\n            var num = 0L\n            for (j <- 0 until arr.length) {\n                if (i != j) num = num * 10 + arr(j)\n            }\n            maxNum = max(maxNum, num)\n        }\n        return maxNum",
    "        var maxNum = 0L\n        for (i <- 0 until arr.length) {\n            val num = arr(i)\n            val numStr = num.toString\n            val numStrArr = numStr.toCharArray\n            val numStrArrSorted = numStrArr.sortWith(_ > _)\n            val numStrSorted = numStrArrSorted.mkString\n            val numSorted = numStrSorted.toLong\n            maxNum = max(maxNum, numSorted)\n        }\n        return maxNum",
    "        var max = 0L\n        for (i <- 0 until arr.length) {\n            var num = 0L\n            for (j <- 0 until arr.length) {\n                if (arr(j) != -1) {\n                    num = num * 10 + arr(j)\n                    arr(j) = -1\n                }\n            }\n            max = max max num\n        }\n        max",
    "        val s = arr.sorted\n        val s1 = s.reverse\n        var res = 0L\n        for (i <- 0 until s1.length) {\n            res = res * 10 + s1(i)\n        }\n        res",
    "        var maxNum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- 0 until arr.length) {\n                if (i != j) {\n                    val num = arr(i).toString + arr(j).toString\n                    if (num.toLong > maxNum) maxNum = num.toLong\n                }\n            }\n        }\n        maxNum",
    "        arr.sorted.reverse.foldLeft(\"\")((a, b) => a + b.toString).toLong",
    "        var max = 0L\n        for (i <- 0 until arr.length) {\n            var num = 0L\n            for (j <- 0 until arr.length) {\n                if (i != j) {\n                    num = num * 10 + arr(j)\n                }\n            }\n            max = max max num\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until arr.length) {\n            var num = 0L\n            for (j <- 0 until arr.length) {\n                if (i != j) {\n                    num = num * 10 + arr(j)\n                }\n            }\n            if (num > max) max = num\n        }\n        max",
    "        var maxNum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) < arr(j)) {\n                    val temp = arr(i)\n                    arr(i) = arr(j)\n                    arr(j) = temp\n                }\n            }\n        }\n        for (i <- 0 until arr.length) {\n            maxNum = maxNum * 10 + arr(i)\n        }\n        return maxNum",
    "        val sorted = arr.sorted\n        val s = sorted.mkString(\"\")\n        s.toLong",
    "        var maxNum = 0L\n        for (i <- 0 until arr.length) {\n            var num = 0L\n            for (j <- 0 until arr.length) {\n                if (i != j) {\n                    num = num * 10 + arr(j)\n                }\n            }\n            maxNum = max(maxNum, num)\n        }\n        maxNum",
    "        var maxNum = 0L\n        for (i <- 0 until arr.length) {\n            var num = 0L\n            for (j <- 0 until arr.length) {\n                if (i != j) {\n                    num = num * 10 + arr(j)\n                }\n            }\n            if (num > maxNum) maxNum = num\n        }\n        return maxNum",
    "        arr.sorted.reverse.mkString.toLong",
    "        var maxNum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- 0 until arr.length) {\n                if (i != j) {\n                    val num = arr(i) * 10 + arr(j)\n                    if (num > maxNum) maxNum = num\n                }\n            }\n        }\n        maxNum",
    "        arr.sorted.reverse.foldLeft(\"\")((a, b) => a + b.toString).toLong",
    "        var maxNum = 0L\n        for (i <- 0 until arr.length) {\n            var num = 0L\n            for (j <- i until arr.length) {\n                num = num * 10 + arr(j)\n                maxNum = max(maxNum, num)\n            }\n        }\n        maxNum",
    "        arr.sorted.reverse.mkString.toLong",
    "        arr.sorted.reverse.foldLeft(0L)((a, b) => a * 10 + b)",
    "        arr.sorted.reverse.foldLeft(0L)((a, b) => a * 10 + b)",
    "        val sorted = arr.sorted.reverse\n        var result = 0L\n        for (i <- 0 until sorted.length) {\n            result = result * 10 + sorted(i)\n        }\n        result",
    "        arr.sorted.reverse.foldLeft(\"\")((a, b) => a + b).toLong",
    "        var max = 0L\n        for (i <- 0 until arr.length) {\n            var num = 0L\n            for (j <- 0 until arr.length) {\n                if (i != j) {\n                    num = num * 10 + arr(j)\n                }\n            }\n            if (num > max) max = num\n        }\n        return max",
    "        var max = 0L\n        for (i <- 0 to arr.length - 1) {\n            for (j <- i + 1 to arr.length - 1) {\n                if (arr(i) < arr(j)) {\n                    val temp = arr(i)\n                    arr(i) = arr(j)\n                    arr(j) = temp\n                }\n            }\n        }\n        for (i <- 0 to arr.length - 1) {\n            max = max * 10 + arr(i)\n        }\n        max",
    "        var maxNum = 0L\n        for (i <- 0 to arr.length - 1) {\n            maxNum = max(maxNum, arr(i))\n        }\n        maxNum",
    "        arr.sorted.reverse.mkString.toLong",
    "        arr.sorted.reverse.mkString.toLong",
    "        var max = 0L\n        for (i <- 0 until arr.length) {\n            var num = 0L\n            for (j <- i until arr.length) {\n                num = num * 10 + arr(j)\n                max = max max num\n            }\n        }\n        max",
    "        val sorted = arr.sortWith(_ > _)\n        sorted.mkString.toLong",
    "        arr.sorted.reverse.mkString.toLong",
    "        var max = 0L\n        for (i <- 0 until arr.length) {\n            var num = 0L\n            for (j <- 0 until arr.length) {\n                if (i != j) {\n                    num = num * 10 + arr(j)\n                }\n            }\n            if (num > max) max = num\n        }\n        max",
    "        var maxNum = 0L\n        for (i <- 0 until arr.length) {\n            maxNum = max(maxNum, arr(i))\n        }\n        maxNum",
    "        arr.sorted.reverse.foldLeft(0L)((a, b) => a * 10 + b)",
    "        arr.sorted.reverse.mkString.toLong",
    "        arr.sorted.reverse.mkString.toLong",
    "        val sorted = arr.sortWith(_ > _)\n        sorted.foldLeft(0L)((acc, x) => acc * 10 + x)",
    "        arr.sorted.reverse.foldLeft(0L)((a, b) => a * 10 + b)",
    "        val sorted = arr.sorted\n        var result = 0L\n        for (i <- sorted.length - 1 to 0 by -1) {\n            result = result * 10 + sorted(i)\n        }\n        result",
    "        val sorted = arr.sortWith(_ > _)\n        sorted.foldLeft(\"\")((x, y) => x + y).toLong",
    "        arr.sorted.reverse.foldLeft(\"\")((x, y) => x + y.toString).toLong",
    "        var max = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                var num = arr(i) * 10 + arr(j)\n                if (num > max) max = num\n                num = arr(j) * 10 + arr(i)\n                if (num > max) max = num\n            }\n        }\n        return max",
    "        val sorted = arr.sorted\n        var result = 0L\n        for (i <- 0 until sorted.length) {\n            result = result * 10 + sorted(sorted.length - 1 - i)\n        }\n        result",
    "        arr.sorted.reverse.mkString.toLong",
    "        arr.sorted.reverse.foldLeft(\"\")((a, b) => a + b.toString).toLong",
    "        var max = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                val num1 = arr(i).toString + arr(j).toString\n                val num2 = arr(j).toString + arr(i).toString\n                max = max max num1.toLong max num2.toLong\n            }\n        }\n        max",
    "        arr.sorted.reverse.mkString.toLong",
    "        var max = 0L\n        for (i <- 0 until arr.length) {\n            var num = 0L\n            for (j <- i until arr.length) {\n                num = num * 10 + arr(j)\n                max = max max num\n            }\n        }\n        max",
    "        var maxNum = 0L\n        for (i <- 0 until arr.length) {\n            var num = 0L\n            for (j <- i until arr.length) {\n                num = num * 10 + arr(j)\n                if (num > maxNum) maxNum = num\n            }\n        }\n        maxNum",
    "        val sorted = arr.sorted\n        val reversed = sorted.reverse\n        val str = reversed.mkString\n        str.toLong",
    "        val sorted = arr.sorted.reverse\n        var result = 0L\n        for (i <- 0 until sorted.length) {\n            result = result * 10 + sorted(i)\n        }\n        result",
    "        var maxNum = 0L\n        for (i <- 0 until arr.length) {\n            var num = 0L\n            for (j <- i until arr.length) {\n                num = num * 10 + arr(j)\n                maxNum = max(maxNum, num)\n            }\n        }\n        maxNum",
    "        arr.sorted.reverse.mkString.toLong",
    "        return arr.sorted.reverse.mkString.toLong",
    "        arr.sortWith((a, b) => a.toString + b.toString > b.toString + a.toString).mkString(\"\").toLong",
    "        arr.sorted.reverse.foldLeft(0L)((a, b) => a * 10 + b)",
    "        arr.sorted.reverse.mkString.toLong",
    "        arr.sorted.reverse.mkString.toLong",
    "        arr.sorted.reverse.mkString.toLong",
    "        var maxNum = 0L\n        for (i <- arr) {\n            maxNum = max(maxNum, i)\n        }\n        return maxNum",
    "        var maxNum = 0L\n        for (i <- 0 to arr.length - 1) {\n            for (j <- i + 1 to arr.length - 1) {\n                val num1 = arr(i).toString + arr(j).toString\n                val num2 = arr(j).toString + arr(i).toString\n                if (num1.toLong > num2.toLong) {\n                    val temp = arr(i)\n                    arr(i) = arr(j)\n                    arr(j) = temp\n                }\n            }\n        }\n        for (i <- 0 to arr.length - 1) maxNum = maxNum * 10 + arr(i)\n        maxNum",
    "        var max = 0L\n        for (i <- 0 until arr.length) {\n            var num = 0L\n            for (j <- 0 until arr.length) {\n                if (i != j) {\n                    num = num * 10 + arr(j)\n                }\n            }\n            if (num > max) max = num\n        }\n        return max",
    "        arr.sorted.reverse.mkString.toLong",
    "        var maxNum = 0L\n        for (i <- 0 until arr.length) {\n            var num = 0L\n            for (j <- 0 until arr.length) {\n                if (i != j) {\n                    num = num * 10 + arr(j)\n                }\n            }\n            maxNum = max(maxNum, num)\n        }\n        return maxNum",
    "        var max = 0L\n        for (i <- arr) {\n            max = max * 10 + i\n        }\n        max",
    "        val sorted = arr.sortWith(_ > _)\n        sorted.mkString.toLong",
    "        arr.sortWith(_ > _).mkString.toLong",
    "        var max = 0L\n        for (i <- 0 until arr.length) {\n            var num = 0L\n            for (j <- 0 until arr.length) {\n                if (i != j) {\n                    num = num * 10 + arr(j)\n                }\n            }\n            if (num > max) max = num\n        }\n        return max",
    "        arr.sorted.reverse.foldLeft(0L)((a, b) => a * 10 + b)",
    "        arr.sorted.reverse.foldLeft(\"\")((x, y) => x + y.toString).toLong",
    "        var maxNum = 0L\n        for (i <- 0 to arr.length - 1) {\n            var num = 0L\n            for (j <- 0 to arr.length - 1) {\n                num = num * 10 + arr(j)\n            }\n            maxNum = max(maxNum, num)\n            var temp = arr(0)\n            for (j <- 0 to arr.length - 2) {\n                arr(j) = arr(j + 1)\n            }\n            arr(arr.length - 1) = temp\n        }\n        return maxNum",
    "        val sorted = arr.sortWith(_ > _)\n        sorted.mkString.toLong",
    "        arr.sorted.reverse.mkString.toLong",
    "        var max = 0L\n        for (i <- 0 until arr.length) {\n            var num = 0L\n            for (j <- i until arr.length) {\n                num = num * 10 + arr(j)\n                max = max max num\n            }\n        }\n        max",
    "        val sorted = arr.sorted\n        val s = sorted.mkString(\"\")\n        s.toLong",
    "        var max = 0L\n        for (i <- 0 until arr.length) {\n            var num = 0L\n            for (j <- i until arr.length) {\n                num = num * 10 + arr(j)\n                max = max max num\n            }\n        }\n        return max",
    "        arr.sorted.reverse.mkString.toLong",
    "        var maxNum = 0L\n        for (i <- 0 until arr.length) {\n            var num = 0L\n            for (j <- i until arr.length) {\n                num = num * 10 + arr(j)\n            }\n            maxNum = max(maxNum, num)\n        }\n        return maxNum",
    "        var max = 0L\n        for (i <- 0 until arr.length) {\n            var num = 0L\n            for (j <- 0 until arr.length) {\n                if (i != j) num = num * 10 + arr(j)\n            }\n            max = max max num\n        }\n        max",
    "        arr.sorted.reverse.mkString.toLong",
    "        var max = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                val num = arr(i) * 10 + arr(j)\n                if (num > max) max = num\n            }\n        }\n        max",
    "        arr.sortWith(_ > _).mkString.toLong",
    "        arr.sorted.reverse.mkString.toLong",
    "        arr.sorted.reverse.mkString.toLong",
    "        arr.sorted.reverse.foldLeft(\"\")((a, b) => a + b).toLong",
    "        var maxNum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                val num = arr(i) * 10 + arr(j)\n                if (num > maxNum) maxNum = num\n            }\n        }\n        maxNum",
    "        arr.sorted.reverse.mkString.toLong",
    "        arr.sorted.reverse.reduceLeft(_ * 10 + _)",
    "        var max = 0L\n        for (i <- 0 until arr.length) {\n            var num = 0L\n            for (j <- 0 until arr.length) {\n                if (i != j) {\n                    num = num * 10 + arr(j)\n                }\n            }\n            if (num > max) max = num\n        }\n        return max",
    "        var maxNum = 0L\n        for (i <- 0 until arr.length) {\n            var num = 0L\n            for (j <- i until arr.length) {\n                num = num * 10 + arr(j)\n                maxNum = max(maxNum, num)\n            }\n        }\n        return maxNum",
    "        val sorted = arr.sortWith(_ > _)\n        sorted.foldLeft(0L)((acc, x) => acc * 10 + x)",
    "        arr.sorted.reverse.mkString.toLong",
    "        var max = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                val num = arr(i).toString + arr(j).toString\n                if (num.toLong > max) max = num.toLong\n            }\n        }\n        max",
    "        var maxNum = 0L\n        for (i <- 0 until arr.length) {\n            var num = 0L\n            for (j <- 0 until arr.length) {\n                if (i != j) {\n                    num = num * 10 + arr(j)\n                }\n            }\n            maxNum = max(maxNum, num)\n        }\n        return maxNum",
    "        val str = arr.sorted.reverse.mkString\n        str.toLong",
    "        val sorted = arr.sorted\n        val sb = new StringBuilder\n        for (i <- sorted.length - 1 to 0 by -1) {\n            sb.append(sorted(i))\n        }\n        sb.toString.toLong",
    "        var maxNum = 0L\n        for (i <- 0 until arr.length) {\n            var num = 0L\n            for (j <- i until arr.length) {\n                num = num * 10 + arr(j)\n                maxNum = max(maxNum, num)\n            }\n        }\n        maxNum",
    "        var max = 0L\n        for (i <- 0 until arr.length) {\n            var num = 0L\n            for (j <- 0 until arr.length) {\n                if (i != j) {\n                    num = num * 10 + arr(j)\n                }\n            }\n            max = max max num\n        }\n        return max",
    "        val sorted = arr.sorted\n        val reversed = sorted.reverse\n        var result = 0L\n        for (i <- 0 until reversed.length) {\n            result = result * 10 + reversed(i)\n        }\n        result",
    "        val sorted = arr.sortWith((x, y) => x.toString + y.toString > y.toString + x.toString)\n        sorted.mkString(\"\").toLong",
    "        var max = 0L\n        for (i <- 0 until arr.length) {\n            var num = 0L\n            for (j <- 0 until arr.length) {\n                if (i != j) {\n                    num = num * 10 + arr(j)\n                }\n            }\n            if (num > max) {\n                max = num\n            }\n        }\n        return max",
    "        arr.sorted.reverse.mkString.toLong",
    "        var maxNum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i until arr.length) {\n                var num = 0L\n                for (k <- i to j) {\n                    num = num * 10 + arr(k)\n                }\n                maxNum = max(maxNum, num)\n            }\n        }\n        return maxNum",
    "        val sorted = arr.sorted.reverse\n        var result = 0L\n        for (i <- 0 until sorted.length) {\n            result = result * 10 + sorted(i)\n        }\n        result",
    "        var maxNum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i+1 until arr.length) {\n                if (arr(i) < arr(j)) {\n                    val temp = arr(i)\n                    arr(i) = arr(j)\n                    arr(j) = temp\n                }\n            }\n        }\n        for (i <- 0 until arr.length) {\n            maxNum = maxNum * 10 + arr(i)\n        }\n        return maxNum",
    "        arr.sorted.reverse.mkString.toLong",
    "        val sorted = arr.sorted\n        val result = new StringBuilder\n        for (i <- sorted.length - 1 to 0 by -1) result.append(sorted(i))\n        result.toString.toLong",
    "        var maxNum = 0L\n        for (i <- arr) {\n            maxNum = max(maxNum, i)\n        }\n        return maxNum",
    "        arr.sortWith((a, b) => a.toString + b.toString > b.toString + a.toString).mkString.toLong",
    "        var max = 0L\n        for (i <- 0 until arr.length) {\n            var num = 0L\n            for (j <- 0 until arr.length) {\n                if (i != j) {\n                    num = num * 10 + arr(j)\n                }\n            }\n            if (num > max) max = num\n        }\n        return max",
    "        arr.sorted.reverse.foldLeft(\"\")((acc, x) => acc + x.toString).toLong",
    "        arr.sorted.reverse.foldLeft(\"\")((acc, x) => acc + x).toLong",
    "        arr.sorted.reverse.foldLeft(0L)((a, b) => a * 10 + b)",
    "        var max = 0L\n        for (i <- 0 until arr.length) {\n            val num = arr(i)\n            val numStr = num.toString\n            val numStrLen = numStr.length\n            var maxStr = \"\"\n            for (j <- 0 until numStrLen) {\n                val digit = numStr(j)\n                maxStr += digit\n                for (k <- j + 1 until numStrLen) {\n                    val digit2 = numStr(k)\n                    if (digit2 > digit) {\n                        maxStr = maxStr.substring(0, j) + digit2 + digit + maxStr.substring(j + 1)\n                        digit = digit2\n                    }\n                }\n            }\n            val maxNum = maxStr.toLong\n            if (maxNum > max) max = maxNum\n        }\n        return max",
    "        arr.sorted.reverse.mkString.toLong",
    "        var max = 0L\n        for (i <- 0 until arr.length) {\n            var num = 0L\n            for (j <- 0 until arr.length) {\n                num = num * 10 + arr(j)\n            }\n            if (num > max) max = num\n            var temp = arr(0)\n            for (j <- 0 until arr.length - 1) {\n                arr(j) = arr(j + 1)\n            }\n            arr(arr.length - 1) = temp\n        }\n        return max",
    "        var maxNum = 0L\n        for (i <- 0 to arr.length - 1) {\n            var num = arr(i)\n            for (j <- i + 1 to arr.length - 1) {\n                num = num * 10 + arr(j)\n            }\n            if (num > maxNum) maxNum = num\n        }\n        return maxNum",
    "        val sorted = arr.sorted\n        var result = 0L\n        for (i <- sorted.length - 1 to 0 by -1) {\n            result = result * 10 + sorted(i)\n        }\n        result",
    "        var max = 0L\n        for (i <- 0 until arr.length) {\n            var num = 0L\n            for (j <- i until arr.length) {\n                num = num * 10 + arr(j)\n                max = max max num\n            }\n        }\n        max",
    "        arr.sorted.reverse.foldLeft(0L)((x, y) => x * 10 + y)",
    "        arr.sorted.reverse.mkString.toLong",
    "        arr.sorted.reverse.mkString.toLong",
    "        var maxNum = 0L\n        for (i <- arr) {\n            maxNum = max(maxNum, i)\n        }\n        return maxNum",
    "        arr.sorted.reverse.mkString.toLong",
    "        arr.sorted.reverse.mkString.toLong",
    "        var maxNum = 0L\n        for (i <- 0 until arr.length) {\n            var num = 0L\n            for (j <- 0 until arr.length) {\n                if (arr(i) > arr(j)) {\n                    num = num * 10 + arr(i)\n                } else {\n                    num = num * 10 + arr(j)\n                }\n            }\n            if (num > maxNum) {\n                maxNum = num\n            }\n        }\n        return maxNum",
    "        arr.sorted.reverse.foldLeft(0L)((acc, x) => acc * 10 + x)",
    "        var max = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                val num = arr(i) * 10 + arr(j)\n                if (num > max) max = num\n            }\n        }\n        max",
    "        arr.sorted.reverse.mkString.toLong",
    "        var maxNum = 0L\n        for (i <- 0 until arr.length) {\n            maxNum = max(maxNum, arr(i))\n        }\n        maxNum",
    "        var maxNum = 0L\n        for (i <- 0 until arr.length) {\n            var temp = arr(i)\n            for (j <- 0 until arr.length) {\n                if (i != j) {\n                    temp = temp * 10 + arr(j)\n                }\n            }\n            if (temp > maxNum) {\n                maxNum = temp\n            }\n        }\n        return maxNum",
    "        arr.sorted.reverse.mkString.toLong",
    "        arr.sorted.reverse.foldLeft(0L)((a, b) => a * 10 + b)",
    "        val sorted = arr.sorted\n        var result = 0L\n        for (i <- 0 until sorted.length) {\n            result = result * 10 + sorted(i)\n        }\n        result",
    "        var max = 0L\n        for (i <- 0 until arr.length) {\n            var num = 0L\n            for (j <- 0 until arr.length) {\n                if (i != j) {\n                    num = num * 10 + arr(j)\n                }\n            }\n            max = max max num\n        }\n        max",
    "        val sorted = arr.sorted\n        var result = 0L\n        for (i <- 0 until sorted.length) {\n            result = result * 10 + sorted(i)\n        }\n        result",
    "        var max = 0L\n        for (i <- 0 until arr.length) {\n            var num = 0L\n            for (j <- i until arr.length) {\n                num = num * 10 + arr(j)\n                if (num > max) max = num\n            }\n        }\n        return max",
    "        var max = 0L\n        arr.foreach(x => max = max * 10 + x)\n        max",
    "        val s = arr.sorted.reverse.mkString(\"\")\n        s.toLong",
    "        val sorted = arr.sorted\n        val reversed = sorted.reverse\n        val result = reversed.mkString(\"\")\n        result.toLong",
    "        var maxNum = 0L\n        for (i <- 0 to arr.length - 1) {\n            maxNum = max(maxNum, arr(i))\n        }\n        maxNum",
    "        var maxNum = 0L\n        for (i <- arr) {\n            var num = i\n            var digits = List[Long]()\n            while (num > 0) {\n                digits = digits :+ num % 10\n                num /= 10\n            }\n            digits = digits.sortWith(_ > _)\n            var maxNumDigits = 0L\n            for (j <- digits) {\n                maxNumDigits = maxNumDigits * 10 + j\n            }\n            maxNum = max(maxNum, maxNumDigits)\n        }\n        return maxNum",
    "        arr.sorted.reverse.mkString.toLong",
    "        var maxNum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- 0 until arr.length) {\n                if (i != j) {\n                    val num = arr(i) * 10 + arr(j)\n                    if (num > maxNum) maxNum = num\n                }\n            }\n        }\n        maxNum",
    "        arr.sorted.reverse.mkString.toLong",
    "        var max = 0L\n        for (i <- 0 until arr.length) {\n            var num = 0L\n            for (j <- 0 until arr.length) {\n                if (arr(j) != -1) {\n                    num = num * 10 + arr(j)\n                    arr(j) = -1\n                    break\n                }\n            }\n            max = max * 10 + num\n        }\n        max",
    "        var maxNum = 0L\n        for (i <- 0 until arr.length) {\n            var num = 0L\n            for (j <- i until arr.length) {\n                num = num * 10 + arr(j)\n                maxNum = max(maxNum, num)\n            }\n        }\n        return maxNum",
    "        val sorted = arr.sortWith(_ > _)\n        var result = 0L\n        for (i <- 0 until sorted.length) {\n            result = result * 10 + sorted(i)\n        }\n        result",
    "        arr.sorted.reverse.mkString.toLong",
    "        arr.sorted.reverse.mkString.toLong",
    "        var maxNum = 0L\n        for (i <- 0 until arr.length) {\n            var num = 0L\n            for (j <- i until arr.length) {\n                num = num * 10 + arr(j)\n                if (num > maxNum) maxNum = num\n            }\n        }\n        return maxNum",
    "        arr.sorted.reverse.mkString.toLong",
    "        arr.sorted.reverse.foldLeft(0L)((a, b) => a * 10 + b)",
    "        var maxNum = 0L\n        for (i <- 0 until arr.length) {\n            var num = 0L\n            for (j <- 0 until arr.length) {\n                if (i != j) {\n                    num = num * 10 + arr(j)\n                }\n            }\n            if (num > maxNum) maxNum = num\n        }\n        maxNum",
    "        var maxNum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                val num = arr(i) * 10 + arr(j)\n                if (num > maxNum) maxNum = num\n            }\n        }\n        maxNum",
    "        def helper(arr : List[Long], acc : Long) : Long = {\n            if (arr.isEmpty) acc\n            else {\n                val max = arr.max\n                val index = arr.indexOf(max)\n                helper(arr.slice(0, index) ::: arr.slice(index + 1, arr.length), acc * 10 + max)\n            }\n        }\n        helper(arr, 0)",
    "        var max = 0L\n        for (i <- 0 until arr.length) {\n            var num = arr(i)\n            for (j <- 0 until arr.length) {\n                if (i != j) {\n                    num = num * 10 + arr(j)\n                }\n            }\n            if (num > max) max = num\n        }\n        return max",
    "        arr.sorted.reverse.mkString.toLong",
    "        var maxNum = 0L\n        for (i <- 0 until arr.length) {\n            var num = 0L\n            for (j <- 0 until arr.length) {\n                if (i != j) {\n                    num = num * 10 + arr(j)\n                }\n            }\n            if (num > maxNum) maxNum = num\n        }\n        maxNum",
    "        arr.sorted.reverse.mkString.toLong",
    "        arr.sorted.reverse.mkString.toLong",
    "        arr.sorted.reverse.mkString.toLong",
    "        var max = 0L\n        for (i <- 0 until arr.length) {\n            var num = 0L\n            for (j <- 0 until arr.length) {\n                if (i != j) {\n                    num = num * 10 + arr(j)\n                }\n            }\n            if (num > max) max = num\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 to arr.length - 1) {\n            var temp = arr(i)\n            for (j <- i + 1 to arr.length - 1) {\n                temp = temp * 10 + arr(j)\n            }\n            if (temp > max) max = temp\n        }\n        return max",
    "        arr.sorted.reverse.foldLeft(\"\")((x, y) => x + y.toString).toLong",
    "        var max = 0L\n        for (i <- 0 to arr.length - 1) {\n            for (j <- 0 to arr.length - 1) {\n                if (i != j) {\n                    val num = arr(i) * 10 + arr(j)\n                    if (num > max) max = num\n                }\n            }\n        }\n        max",
    "        var max = 0L\n        for (i <- 0 until arr.length) {\n            var num = 0L\n            for (j <- 0 until arr.length) {\n                if (i != j) {\n                    num = num * 10 + arr(j)\n                }\n            }\n            if (num > max) max = num\n        }\n        return max",
    "        arr.sorted.reverse.mkString.toLong",
    "        var maxNum = 0L\n        for (i <- 0 to arr.length - 1) {\n            var num = 0L\n            for (j <- 0 to arr.length - 1) {\n                if (i != j) num = num * 10 + arr(j)\n            }\n            if (num > maxNum) maxNum = num\n        }\n        return maxNum",
    "        val sorted = arr.sorted\n        var result = 0L\n        for (i <- sorted.length - 1 to 0 by -1) {\n            result = result * 10 + sorted(i)\n        }\n        result",
    "        val sorted = arr.sorted\n        var result = 0L\n        for (i <- 0 until sorted.length) {\n            result = result * 10 + sorted(i)\n        }\n        result",
    "        var max = 0L\n        for (i <- 0 until arr.length) {\n            var num = 0L\n            for (j <- 0 until arr.length) {\n                if (i != j) {\n                    num = num * 10 + arr(j)\n                }\n            }\n            if (num > max) max = num\n        }\n        max",
    "        arr.sorted.reverse.mkString(\"\").toLong",
    "        var maxNum = 0L\n        for (i <- 0 until arr.length) {\n            var num = 0L\n            for (j <- 0 until arr.length) {\n                num = num * 10 + arr(j)\n            }\n            maxNum = max(maxNum, num)\n            var temp = arr(0)\n            for (j <- 1 until arr.length) {\n                arr(j - 1) = arr(j)\n            }\n            arr(arr.length - 1) = temp\n        }\n        maxNum",
    "        var max = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                var num = arr(i) * 10 + arr(j)\n                if (num > max) max = num\n            }\n        }\n        return max",
    "        arr.sorted.reverse.foldLeft(0L)((a, b) => a * 10 + b)",
    "        val sorted = arr.sorted.reverse\n        val s = sorted.mkString\n        s.toLong",
    "        arr.sorted.reverse.foldLeft(\"\")((a, b) => a + b.toString).toLong",
    "        val sorted = arr.sorted\n        var result = 0L\n        for (i <- 0 until sorted.length) {\n            result = result * 10 + sorted(sorted.length - i - 1)\n        }\n        result",
    "        arr.sorted.reverse.mkString(\"\").toLong",
    "        arr.sorted.reverse.mkString.toLong",
    "        arr.sorted.reverse.mkString.toLong",
    "        var max = 0L\n        for(i <- 0 until arr.length) {\n            var num = 0L\n            for(j <- i until arr.length) {\n                num = num * 10 + arr(j)\n                max = max max num\n            }\n        }\n        max",
    "        var maxNum = 0L\n        for (i <- 0 until arr.length) {\n            maxNum = max(maxNum, arr(i))\n        }\n        maxNum",
    "        arr.sorted.reverse.mkString.toLong",
    "        arr.sorted.reverse.foldLeft(\"\")((x, y) => x + y).toLong",
    "        var maxNum = 0L\n        for (i <- 0 until arr.length) {\n            var num = 0L\n            for (j <- 0 until arr.length) {\n                if (i != j) {\n                    num = num * 10 + arr(j)\n                }\n            }\n            maxNum = max(maxNum, num)\n        }\n        return maxNum",
    "        arr.sorted.reverse.mkString.toLong"
  ]
}