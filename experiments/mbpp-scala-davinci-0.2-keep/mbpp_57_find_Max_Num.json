{
  "name": "mbpp_57_find_Max_Num",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the largest number that can be formed with the given list of digits.\n    def findMaxNum(arr : List[Long]) : Long = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_57_find_Max_Num.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(findMaxNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (321l));\n    assert(findMaxNum((List[Long](4l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (6541l));\n    assert(findMaxNum((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 9l.toLong))) == (9321l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var maxNum = 0L\n        for (i <- 0 to arr.length - 1) {\n            var num = 0L\n            for (j <- i to arr.length - 1) {\n                num = num * 10 + arr(j)\n                maxNum = max(maxNum, num)\n            }\n        }\n        return maxNum",
    "        var maxNum = 0L\n        for (i <- 0 to arr.length - 1) {\n            var num = 0L\n            for (j <- 0 to arr.length - 1) {\n                if (i != j) {\n                    num = num * 10 + arr(j)\n                }\n            }\n            maxNum = max(maxNum, num)\n        }\n        return maxNum",
    "        var maxNum = 0L\n        for (i <- 0 until arr.length) {\n            maxNum = max(maxNum, arr(i))\n        }\n        maxNum",
    "        arr.sorted.reverse.mkString.toLong",
    "        var result = 0L\n        for (i <- arr.sorted.reverse) {\n            result = result * 10 + i\n        }\n        result",
    "        arr.sorted.reverse.mkString.toLong",
    "        var max = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                val num1 = arr(i).toString + arr(j).toString\n                val num2 = arr(j).toString + arr(i).toString\n                if (num1.toLong > num2.toLong) {\n                    val temp = arr(i)\n                    arr(i) = arr(j)\n                    arr(j) = temp\n                }\n            }\n        }\n        for (i <- 0 until arr.length) max = max * 10 + arr(i)\n        max",
    "        arr.sorted.reverse.mkString.toLong",
    "        arr.sorted.reverse.mkString.toLong",
    "        val sorted = arr.sorted\n        val reversed = sorted.reverse\n        var result = \"\"\n        for (i <- 0 until reversed.length) {\n            result += reversed(i).toString\n        }\n        result.toLong",
    "        var maxNum = 0L\n        for (i <- 0 until arr.length) {\n            var temp = arr(i)\n            for (j <- 0 until arr.length) {\n                if (i != j) {\n                    temp = temp * 10 + arr(j)\n                }\n            }\n            if (temp > maxNum) {\n                maxNum = temp\n            }\n        }\n        return maxNum",
    "        arr.sorted.reverse.mkString.toLong",
    "        var maxNum = 0L\n        for (i <- 0 until arr.length) {\n            var num = 0L\n            for (j <- i until arr.length) {\n                num = num * 10 + arr(j)\n                maxNum = max(maxNum, num)\n            }\n        }\n        return maxNum",
    "        var max = 0L\n        for (i <- 0 until arr.length) {\n            max = max * 10 + arr(i)\n        }\n        max",
    "        var maxNum = 0L\n        for (i <- 0 until arr.length) {\n            var num = 0L\n            for (j <- 0 until arr.length) {\n                if (i != j) num = num * 10 + arr(j)\n            }\n            maxNum = max(maxNum, num)\n        }\n        return maxNum",
    "        var maxNum = 0L\n        for (i <- 0 until arr.length) {\n            val num = arr(i)\n            val numStr = num.toString\n            val numStrArr = numStr.toCharArray\n            val numStrArrSorted = numStrArr.sortWith(_ > _)\n            val numStrSorted = numStrArrSorted.mkString\n            val numSorted = numStrSorted.toLong\n            maxNum = max(maxNum, numSorted)\n        }\n        return maxNum",
    "        var max = 0L\n        for (i <- 0 until arr.length) {\n            var num = 0L\n            for (j <- 0 until arr.length) {\n                if (arr(j) != -1) {\n                    num = num * 10 + arr(j)\n                    arr(j) = -1\n                }\n            }\n            max = max max num\n        }\n        max",
    "        val s = arr.sorted\n        val s1 = s.reverse\n        var res = 0L\n        for (i <- 0 until s1.length) {\n            res = res * 10 + s1(i)\n        }\n        res",
    "        var maxNum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- 0 until arr.length) {\n                if (i != j) {\n                    val num = arr(i).toString + arr(j).toString\n                    if (num.toLong > maxNum) maxNum = num.toLong\n                }\n            }\n        }\n        maxNum",
    "        arr.sorted.reverse.foldLeft(\"\")((a, b) => a + b.toString).toLong"
  ]
}