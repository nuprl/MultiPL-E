{
  "name": "mbpp_395_first_non_repeating_character",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the first non-repeated character in a given string.\n    def firstNonRepeatingCharacter(str1 : String) : Option[String] = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_395_first_non_repeating_character.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(firstNonRepeatingCharacter((\"abcabc\")).equals(None));\n    assert(firstNonRepeatingCharacter((\"abc\")).equals(\"a\"));\n    assert(firstNonRepeatingCharacter((\"ababc\")).equals(\"c\"));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (c <- str) {\n            if (map.contains(c)) {\n                map(c) += 1\n            } else {\n                map(c) = 1\n            }\n        }\n        for (c <- str) {\n            if (map(c) == 1) {\n                return Some(c.toString)\n            }\n        }\n        None",
    "        val map = new HashMap[String, Int]()\n        for (c <- str1) {\n            if (map.contains(c.toString)) map(c.toString) += 1\n            else map(c.toString) = 1\n        }\n        for (c <- str1) {\n            if (map(c.toString) == 1) return Some(c.toString)\n        }\n        None",
    "        val str2 = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (i <- 0 until str2.length) {\n            val c = str2(i)\n            if (map.contains(c)) map(c) += 1\n            else map += c -> 1\n        }\n        for (i <- 0 until str2.length) {\n            val c = str2(i)\n            if (map(c) == 1) return Some(c.toString)\n        }\n        None",
    "        val str2 = str1.toLowerCase\n        val map = new HashMap[String, Int]\n        for (i <- 0 until str2.length) {\n            val c = str2(i).toString\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        for (i <- 0 until str2.length) {\n            val c = str2(i).toString\n            if (map(c) == 1) return Some(c)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[String, Int]()\n        for (i <- 0 until str.length) {\n            val c = str(i).toString\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        for (i <- 0 until str.length) {\n            val c = str(i).toString\n            if (map(c) == 1) return Some(c)\n        }\n        None",
    "        val str2 = str1.toLowerCase\n        val str3 = str2.toList\n        val str4 = str3.groupBy(identity).mapValues(_.size)\n        val str5 = str4.filter(x => x._2 == 1)\n        if (str5.isEmpty) None\n        else Some(str5.keys.head.toString)",
    "        val str = str1.toLowerCase\n        val charCount = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charCount.contains(c)) {\n                charCount(c) += 1\n            } else {\n                charCount(c) = 1\n            }\n        }\n        for (c <- str) {\n            if (charCount(c) == 1) {\n                return Some(c.toString)\n            }\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (c <- str) {\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        for (c <- str) {\n            if (map(c) == 1) return Some(c.toString)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (c <- str) {\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        for (c <- str) {\n            if (map(c) == 1) return Some(c.toString)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (c <- str) {\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        for (c <- str) {\n            if (map(c) == 1) return Some(c.toString)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val charCount = new HashMap[String, Int]\n        for (c <- str) {\n            if (charCount.contains(c.toString)) {\n                charCount(c.toString) += 1\n            } else {\n                charCount(c.toString) = 1\n            }\n        }\n        for (c <- str) {\n            if (charCount(c.toString) == 1) return Some(c.toString)\n        }\n        None",
    "        val str1Map = new HashMap[String, Int]()\n        for (c <- str1) {\n            if (str1Map.contains(c.toString)) {\n                str1Map(c.toString) += 1\n            } else {\n                str1Map(c.toString) = 1\n            }\n        }\n        for (c <- str1) {\n            if (str1Map(c.toString) == 1) {\n                return Some(c.toString)\n            }\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (c <- str) {\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        for (c <- str) {\n            if (map(c) == 1) return Some(c.toString)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (c <- str) {\n            if (map.contains(c)) map(c) += 1\n            else map += (c -> 1)\n        }\n        for (c <- str) {\n            if (map(c) == 1) return Some(c.toString)\n        }\n        None",
    "        val map = new HashMap[String, Int]\n        for (c <- str1) {\n            if (map.contains(c.toString)) map(c.toString) += 1\n            else map(c.toString) = 1\n        }\n        for (c <- str1) {\n            if (map(c.toString) == 1) return Some(c.toString)\n        }\n        None",
    "        var map = new HashMap[String, Int]()\n        for (i <- 0 until str1.length) {\n            val c = str1(i).toString\n            if (map.contains(c)) map(c) += 1\n            else map += (c -> 1)\n        }\n        for (i <- 0 until str1.length) {\n            val c = str1(i).toString\n            if (map(c) == 1) return Some(c)\n        }\n        return None",
    "        val charMap = new HashMap[String, Int]()\n        for (c <- str1) {\n            if (charMap.contains(c.toString)) {\n                charMap(c.toString) += 1\n            } else {\n                charMap(c.toString) = 1\n            }\n        }\n        for (c <- str1) {\n            if (charMap(c.toString) == 1) {\n                return Some(c.toString)\n            }\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (i <- 0 until str.length) {\n            val c = str(i)\n            if (map.contains(c)) map(c) += 1\n            else map += (c -> 1)\n        }\n        for (i <- 0 until str.length) {\n            val c = str(i)\n            if (map(c) == 1) return Some(c.toString)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[String, Int]\n        for (i <- 0 until str.length) {\n            val c = str.charAt(i).toString\n            if (map.contains(c)) map(c) += 1\n            else map += (c -> 1)\n        }\n        for (i <- 0 until str.length) {\n            val c = str.charAt(i).toString\n            if (map(c) == 1) return Some(c)\n        }\n        return None",
    "        var map = Map[String, Int]()\n        for (i <- 0 until str1.length) {\n            val c = str1(i).toString\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        for (i <- 0 until str1.length) {\n            val c = str1(i).toString\n            if (map(c) == 1) return Some(c)\n        }\n        return None"
  ]
}