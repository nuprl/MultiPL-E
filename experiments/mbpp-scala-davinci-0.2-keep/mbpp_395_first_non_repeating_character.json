{
  "name": "mbpp_395_first_non_repeating_character",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the first non-repeated character in a given string.\n    def firstNonRepeatingCharacter(str1 : String) : Option[String] = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_395_first_non_repeating_character.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(firstNonRepeatingCharacter((\"abcabc\")).equals(None));\n    assert(firstNonRepeatingCharacter((\"abc\")).equals(\"a\"));\n    assert(firstNonRepeatingCharacter((\"ababc\")).equals(\"c\"));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (c <- str) {\n            if (map.contains(c)) {\n                map(c) += 1\n            } else {\n                map(c) = 1\n            }\n        }\n        for (c <- str) {\n            if (map(c) == 1) {\n                return Some(c.toString)\n            }\n        }\n        None",
    "        val map = new HashMap[String, Int]()\n        for (c <- str1) {\n            if (map.contains(c.toString)) map(c.toString) += 1\n            else map(c.toString) = 1\n        }\n        for (c <- str1) {\n            if (map(c.toString) == 1) return Some(c.toString)\n        }\n        None",
    "        val str2 = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (i <- 0 until str2.length) {\n            val c = str2(i)\n            if (map.contains(c)) map(c) += 1\n            else map += c -> 1\n        }\n        for (i <- 0 until str2.length) {\n            val c = str2(i)\n            if (map(c) == 1) return Some(c.toString)\n        }\n        None",
    "        val str2 = str1.toLowerCase\n        val map = new HashMap[String, Int]\n        for (i <- 0 until str2.length) {\n            val c = str2(i).toString\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        for (i <- 0 until str2.length) {\n            val c = str2(i).toString\n            if (map(c) == 1) return Some(c)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[String, Int]()\n        for (i <- 0 until str.length) {\n            val c = str(i).toString\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        for (i <- 0 until str.length) {\n            val c = str(i).toString\n            if (map(c) == 1) return Some(c)\n        }\n        None",
    "        val str2 = str1.toLowerCase\n        val str3 = str2.toList\n        val str4 = str3.groupBy(identity).mapValues(_.size)\n        val str5 = str4.filter(x => x._2 == 1)\n        if (str5.isEmpty) None\n        else Some(str5.keys.head.toString)",
    "        val str = str1.toLowerCase\n        val charCount = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charCount.contains(c)) {\n                charCount(c) += 1\n            } else {\n                charCount(c) = 1\n            }\n        }\n        for (c <- str) {\n            if (charCount(c) == 1) {\n                return Some(c.toString)\n            }\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (c <- str) {\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        for (c <- str) {\n            if (map(c) == 1) return Some(c.toString)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (c <- str) {\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        for (c <- str) {\n            if (map(c) == 1) return Some(c.toString)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (c <- str) {\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        for (c <- str) {\n            if (map(c) == 1) return Some(c.toString)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val charCount = new HashMap[String, Int]\n        for (c <- str) {\n            if (charCount.contains(c.toString)) {\n                charCount(c.toString) += 1\n            } else {\n                charCount(c.toString) = 1\n            }\n        }\n        for (c <- str) {\n            if (charCount(c.toString) == 1) return Some(c.toString)\n        }\n        None",
    "        val str1Map = new HashMap[String, Int]()\n        for (c <- str1) {\n            if (str1Map.contains(c.toString)) {\n                str1Map(c.toString) += 1\n            } else {\n                str1Map(c.toString) = 1\n            }\n        }\n        for (c <- str1) {\n            if (str1Map(c.toString) == 1) {\n                return Some(c.toString)\n            }\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (c <- str) {\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        for (c <- str) {\n            if (map(c) == 1) return Some(c.toString)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (c <- str) {\n            if (map.contains(c)) map(c) += 1\n            else map += (c -> 1)\n        }\n        for (c <- str) {\n            if (map(c) == 1) return Some(c.toString)\n        }\n        None",
    "        val map = new HashMap[String, Int]\n        for (c <- str1) {\n            if (map.contains(c.toString)) map(c.toString) += 1\n            else map(c.toString) = 1\n        }\n        for (c <- str1) {\n            if (map(c.toString) == 1) return Some(c.toString)\n        }\n        None",
    "        var map = new HashMap[String, Int]()\n        for (i <- 0 until str1.length) {\n            val c = str1(i).toString\n            if (map.contains(c)) map(c) += 1\n            else map += (c -> 1)\n        }\n        for (i <- 0 until str1.length) {\n            val c = str1(i).toString\n            if (map(c) == 1) return Some(c)\n        }\n        return None",
    "        val charMap = new HashMap[String, Int]()\n        for (c <- str1) {\n            if (charMap.contains(c.toString)) {\n                charMap(c.toString) += 1\n            } else {\n                charMap(c.toString) = 1\n            }\n        }\n        for (c <- str1) {\n            if (charMap(c.toString) == 1) {\n                return Some(c.toString)\n            }\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (i <- 0 until str.length) {\n            val c = str(i)\n            if (map.contains(c)) map(c) += 1\n            else map += (c -> 1)\n        }\n        for (i <- 0 until str.length) {\n            val c = str(i)\n            if (map(c) == 1) return Some(c.toString)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[String, Int]\n        for (i <- 0 until str.length) {\n            val c = str.charAt(i).toString\n            if (map.contains(c)) map(c) += 1\n            else map += (c -> 1)\n        }\n        for (i <- 0 until str.length) {\n            val c = str.charAt(i).toString\n            if (map(c) == 1) return Some(c)\n        }\n        return None",
    "        var map = Map[String, Int]()\n        for (i <- 0 until str1.length) {\n            val c = str1(i).toString\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        for (i <- 0 until str1.length) {\n            val c = str1(i).toString\n            if (map(c) == 1) return Some(c)\n        }\n        return None",
    "        val str = str1.toLowerCase()\n        val charCount = new HashMap[Char, Int]\n        for (i <- 0 until str.length) {\n            val c = str(i)\n            if (charCount.contains(c)) charCount(c) += 1\n            else charCount(c) = 1\n        }\n        for (i <- 0 until str.length) {\n            val c = str(i)\n            if (charCount(c) == 1) return Some(c.toString)\n        }\n        None",
    "        var map = new HashMap[String, Int]()\n        for (i <- 0 until str1.length) {\n            if (map.contains(str1(i).toString)) {\n                map(str1(i).toString) += 1\n            } else {\n                map(str1(i).toString) = 1\n            }\n        }\n        for (i <- 0 until str1.length) {\n            if (map(str1(i).toString) == 1) {\n                return Some(str1(i).toString)\n            }\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val charCount = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charCount.contains(c)) {\n                charCount(c) += 1\n            } else {\n                charCount(c) = 1\n            }\n        }\n        for (c <- str) {\n            if (charCount(c) == 1) {\n                return Some(c.toString)\n            }\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = Map[String, Int]()\n        for (i <- 0 until str.length) {\n            val c = str(i).toString\n            if (map.contains(c)) map(c) += 1\n            else map += (c -> 1)\n        }\n        for (i <- 0 until str.length) {\n            val c = str(i).toString\n            if (map(c) == 1) return Some(c)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[String, Int]\n        for (i <- 0 until str.length) {\n            val c = str(i).toString\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        for (i <- 0 until str.length) {\n            val c = str(i).toString\n            if (map(c) == 1) return Some(c)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val dict = new HashMap[String, Int]\n        for (i <- 0 until str.length) {\n            val c = str.charAt(i).toString\n            if (dict.contains(c)) dict(c) += 1\n            else dict(c) = 1\n        }\n        for (i <- 0 until str.length) {\n            val c = str.charAt(i).toString\n            if (dict(c) == 1) return Some(c)\n        }\n        None",
    "        val str = str1.toLowerCase()\n        val map = new HashMap[String, Int]()\n        for (i <- 0 until str.length) {\n            val c = str(i).toString\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        for (i <- 0 until str.length) {\n            val c = str(i).toString\n            if (map(c) == 1) return Some(c)\n        }\n        None",
    "        val map = new HashMap[String, Int]()\n        for (c <- str1) {\n            if (map.contains(c.toString)) map(c.toString) += 1\n            else map(c.toString) = 1\n        }\n        for (c <- str1) {\n            if (map(c.toString) == 1) return Some(c.toString)\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (i <- 0 until str.length) {\n            if (map.contains(str(i))) map(str(i)) += 1\n            else map(str(i)) = 1\n        }\n        for (i <- 0 until str.length) {\n            if (map(str(i)) == 1) return Some(str(i).toString)\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (i <- 0 until str.length) {\n            if (map.contains(str(i))) map(str(i)) += 1\n            else map(str(i)) = 1\n        }\n        for (i <- 0 until str.length) {\n            if (map(str(i)) == 1) return Some(str(i).toString)\n        }\n        return None",
    "        val map = new HashMap[String, Int]\n        for (c <- str1) {\n            if (map.contains(c.toString)) {\n                map(c.toString) += 1\n            } else {\n                map(c.toString) = 1\n            }\n        }\n        for (c <- str1) {\n            if (map(c.toString) == 1) {\n                return Some(c.toString)\n            }\n        }\n        return None",
    "        val map = new HashMap[String, Int]()\n        for (c <- str1) {\n            if (map.contains(c.toString)) {\n                map(c.toString) += 1\n            } else {\n                map(c.toString) = 1\n            }\n        }\n        for (c <- str1) {\n            if (map(c.toString) == 1) {\n                return Some(c.toString)\n            }\n        }\n        return None",
    "        val map = new HashMap[String, Int]()\n        for (i <- 0 until str1.length) {\n            val c = str1(i).toString\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        for (i <- 0 until str1.length) {\n            val c = str1(i).toString\n            if (map(c) == 1) return Some(c)\n        }\n        None",
    "        val map = new HashMap[String, Int]\n        for (c <- str1) {\n            if (map.contains(c.toString)) map(c.toString) += 1\n            else map(c.toString) = 1\n        }\n        for (c <- str1) {\n            if (map(c.toString) == 1) return Some(c.toString)\n        }\n        None",
    "        var map = Map[String, Int]()\n        for (i <- 0 until str1.length) {\n            val c = str1(i).toString\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        for (i <- 0 until str1.length) {\n            val c = str1(i).toString\n            if (map(c) == 1) return Some(c)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (i <- 0 until str.length) {\n            if (map.contains(str(i))) map(str(i)) += 1\n            else map(str(i)) = 1\n        }\n        for (i <- 0 until str.length) {\n            if (map(str(i)) == 1) return Some(str(i).toString)\n        }\n        None",
    "        val map = new HashMap[String, Int]()\n        for (i <- 0 until str1.length) {\n            val c = str1.charAt(i).toString\n            if (map.contains(c)) map(c) += 1\n            else map += (c -> 1)\n        }\n        for (i <- 0 until str1.length) {\n            val c = str1.charAt(i).toString\n            if (map(c) == 1) return Some(c)\n        }\n        None",
    "        val map = new HashMap[String, Int]\n        for (i <- 0 until str1.length) {\n            val c = str1.charAt(i).toString\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        for (i <- 0 until str1.length) {\n            val c = str1.charAt(i).toString\n            if (map(c) == 1) return Some(c)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[String, Int]\n        for (i <- 0 until str.length) {\n            val c = str(i).toString\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        for (i <- 0 until str.length) {\n            val c = str(i).toString\n            if (map(c) == 1) return Some(c)\n        }\n        None",
    "        val map = new HashMap[String, Int]()\n        for (i <- 0 until str1.length) {\n            val c = str1.charAt(i).toString\n            if (map.contains(c)) map(c) += 1 else map(c) = 1\n        }\n        for (i <- 0 until str1.length) {\n            val c = str1.charAt(i).toString\n            if (map(c) == 1) return Some(c)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (i <- 0 until str.length) {\n            val c = str(i)\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        for (i <- 0 until str.length) {\n            val c = str(i)\n            if (map(c) == 1) return Some(c.toString)\n        }\n        None",
    "        val charCount = new HashMap[Char, Int]\n        for (c <- str1) {\n            if (charCount.contains(c)) {\n                charCount(c) += 1\n            } else {\n                charCount(c) = 1\n            }\n        }\n        for (c <- str1) {\n            if (charCount(c) == 1) {\n                return Some(c.toString)\n            }\n        }\n        return None",
    "        var map = new HashMap[String, Int]()\n        for (c <- str1) {\n            if (map.contains(c.toString)) {\n                map(c.toString) += 1\n            } else {\n                map(c.toString) = 1\n            }\n        }\n        for (c <- str1) {\n            if (map(c.toString) == 1) {\n                return Some(c.toString)\n            }\n        }\n        return None",
    "        val str2 = str1.toLowerCase\n        val str3 = str2.toCharArray\n        val str4 = str3.toList\n        val str5 = str4.groupBy(x => x)\n        val str6 = str5.filter(x => x._2.length == 1)\n        val str7 = str6.keys.toList\n        if (str7.length == 0) None else Some(str7(0).toString)",
    "        val str = str1.toLowerCase\n        val map = HashMap[Char, Int]()\n        for (i <- 0 until str.length) {\n            if (!map.contains(str(i))) map(str(i)) = 1\n            else map(str(i)) += 1\n        }\n        for (i <- 0 until str.length) {\n            if (map(str(i)) == 1) return Some(str(i).toString)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[String, Int]\n        for (i <- 0 until str.length) {\n            val c = str.charAt(i).toString\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        for (i <- 0 until str.length) {\n            val c = str.charAt(i).toString\n            if (map(c) == 1) return Some(c)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[String, Int]\n        for (i <- 0 until str.length) {\n            val c = str(i).toString\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        for (i <- 0 until str.length) {\n            val c = str(i).toString\n            if (map(c) == 1) return Some(c)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[String, Int]\n        for (i <- 0 until str.length) {\n            val c = str(i).toString\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        for (i <- 0 until str.length) {\n            val c = str(i).toString\n            if (map(c) == 1) return Some(c)\n        }\n        None",
    "        val str2 = str1.toLowerCase\n        val map = new HashMap[String, Int]\n        for (i <- 0 until str2.length) {\n            val c = str2(i).toString\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        for (i <- 0 until str2.length) {\n            val c = str2(i).toString\n            if (map(c) == 1) return Some(c)\n        }\n        None",
    "        val str2 = str1.toLowerCase\n        val charCount = new HashMap[Char, Int]\n        for (c <- str2) {\n            if (charCount.contains(c)) {\n                charCount(c) += 1\n            } else {\n                charCount(c) = 1\n            }\n        }\n        for (c <- str2) {\n            if (charCount(c) == 1) {\n                return Some(c.toString)\n            }\n        }\n        return None",
    "        val str2 = str1.toLowerCase\n        val str3 = str2.toList\n        val str4 = str3.groupBy(x => x)\n        val str5 = str4.map(x => (x._1, x._2.length))\n        val str6 = str5.filter(x => x._2 == 1)\n        if (str6.size == 0) None\n        else Some(str6.head._1.toString)",
    "        var map = Map[String, Int]()\n        for (i <- 0 until str1.length) {\n            val c = str1(i).toString\n            if (map.contains(c)) map(c) += 1\n            else map += (c -> 1)\n        }\n        for (i <- 0 until str1.length) {\n            val c = str1(i).toString\n            if (map(c) == 1) return Some(c)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (i <- 0 until str.length) {\n            val c = str(i)\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        for (i <- 0 until str.length) {\n            val c = str(i)\n            if (map(c) == 1) return Some(c.toString)\n        }\n        return None",
    "        val map = new HashMap[String, Int]()\n        for (c <- str1) {\n            if (map.contains(c.toString)) map(c.toString) += 1\n            else map(c.toString) = 1\n        }\n        for (c <- str1) {\n            if (map(c.toString) == 1) return Some(c.toString)\n        }\n        None",
    "        val str2 = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (i <- 0 until str2.length) {\n            if (map.contains(str2(i))) map(str2(i)) += 1\n            else map(str2(i)) = 1\n        }\n        for (i <- 0 until str2.length) {\n            if (map(str2(i)) == 1) return Some(str2(i).toString)\n        }\n        None",
    "        val str2 = str1.toLowerCase\n        val charCount = new HashMap[Char, Int]\n        for (c <- str2) {\n            if (charCount.contains(c)) {\n                charCount(c) += 1\n            } else {\n                charCount(c) = 1\n            }\n        }\n        for (c <- str2) {\n            if (charCount(c) == 1) {\n                return Some(c.toString)\n            }\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[String, Int]\n        for (i <- 0 until str.length) {\n            val c = str.charAt(i).toString\n            if (map.contains(c)) map(c) += 1\n            else map += (c -> 1)\n        }\n        for (i <- 0 until str.length) {\n            val c = str.charAt(i).toString\n            if (map(c) == 1) return Some(c)\n        }\n        None",
    "        val map = new HashMap[String, Int]\n        for (c <- str1) {\n            if (map.contains(c.toString)) {\n                map.put(c.toString, map(c.toString) + 1)\n            } else {\n                map.put(c.toString, 1)\n            }\n        }\n        for (c <- str1) {\n            if (map(c.toString) == 1) {\n                return Some(c.toString)\n            }\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (c <- str) {\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        for (c <- str) {\n            if (map(c) == 1) return Some(c.toString)\n        }\n        None",
    "        val map = new HashMap[String, Int]\n        for (i <- 0 until str1.length) {\n            val c = str1(i).toString\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        for (i <- 0 until str1.length) {\n            val c = str1(i).toString\n            if (map(c) == 1) return Some(c)\n        }\n        None",
    "        val map = new HashMap[String, Int]\n        for (i <- 0 until str1.length) {\n            val c = str1(i).toString\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        for (i <- 0 until str1.length) {\n            val c = str1(i).toString\n            if (map(c) == 1) return Some(c)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (i <- 0 until str.length) {\n            if (map.contains(str(i))) {\n                map(str(i)) += 1\n            } else {\n                map(str(i)) = 1\n            }\n        }\n        for (i <- 0 until str.length) {\n            if (map(str(i)) == 1) {\n                return Some(str(i).toString)\n            }\n        }\n        return None",
    "        val map = new HashMap[String, Int]\n        for (c <- str1) {\n            if (map.contains(c.toString)) {\n                map(c.toString) += 1\n            } else {\n                map(c.toString) = 1\n            }\n        }\n        for (c <- str1) {\n            if (map(c.toString) == 1) {\n                return Some(c.toString)\n            }\n        }\n        return None",
    "        val charCount = new HashMap[String, Int]\n        for (c <- str1) {\n            if (charCount.contains(c.toString)) {\n                charCount(c.toString) += 1\n            } else {\n                charCount(c.toString) = 1\n            }\n        }\n        for (c <- str1) {\n            if (charCount(c.toString) == 1) {\n                return Some(c.toString)\n            }\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (i <- 0 until str.length) {\n            val c = str.charAt(i)\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        for (i <- 0 until str.length) {\n            val c = str.charAt(i)\n            if (map(c) == 1) return Some(c.toString)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[String, Int]\n        for (i <- 0 until str.length) {\n            val c = str(i).toString\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        for (i <- 0 until str.length) {\n            val c = str(i).toString\n            if (map(c) == 1) return Some(c)\n        }\n        None",
    "        val map = new HashMap[String, Int]\n        for (i <- 0 until str1.length) {\n            val c = str1(i).toString\n            if (map.contains(c)) {\n                map.put(c, map(c) + 1)\n            } else {\n                map.put(c, 1)\n            }\n        }\n        for (i <- 0 until str1.length) {\n            val c = str1(i).toString\n            if (map(c) == 1) return Some(c)\n        }\n        None",
    "        var map = Map[String, Int]()\n        for (i <- 0 until str1.length) {\n            val c = str1(i).toString\n            if (map.contains(c)) map(c) += 1\n            else map += (c -> 1)\n        }\n        for (i <- 0 until str1.length) {\n            val c = str1(i).toString\n            if (map(c) == 1) return Some(c)\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (i <- 0 until str.length) {\n            if (map.contains(str(i))) map(str(i)) += 1\n            else map(str(i)) = 1\n        }\n        for (i <- 0 until str.length) {\n            if (map(str(i)) == 1) return Some(str(i).toString)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = HashMap[Char, Int]()\n        for (c <- str) {\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        for (c <- str) {\n            if (map(c) == 1) return Some(c.toString)\n        }\n        None",
    "        val map = new HashMap[String, Int]()\n        for (c <- str1) {\n            if (map.contains(c.toString)) map(c.toString) += 1\n            else map(c.toString) = 1\n        }\n        for (c <- str1) {\n            if (map(c.toString) == 1) return Some(c.toString)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[String, Int]\n        for (i <- 0 until str.length) {\n            val c = str(i).toString\n            if (map.contains(c)) {\n                map(c) += 1\n            } else {\n                map(c) = 1\n            }\n        }\n        for (i <- 0 until str.length) {\n            val c = str(i).toString\n            if (map(c) == 1) {\n                return Some(c)\n            }\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (c <- str) {\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        for (c <- str) {\n            if (map(c) == 1) return Some(c.toString)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]()\n        for (c <- str) {\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        for (c <- str) {\n            if (map(c) == 1) return Some(c.toString)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[String, Int]\n        for (i <- 0 until str.length) {\n            val c = str(i).toString\n            if (map.contains(c)) map(c) += 1\n            else map += (c -> 1)\n        }\n        for (i <- 0 until str.length) {\n            val c = str(i).toString\n            if (map(c) == 1) return Some(c)\n        }\n        None",
    "        val map = new HashMap[String, Int]\n        for (i <- 0 until str1.length) {\n            val c = str1(i).toString\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        for (i <- 0 until str1.length) {\n            val c = str1(i).toString\n            if (map(c) == 1) return Some(c)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (c <- str) {\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        for (c <- str) {\n            if (map(c) == 1) return Some(c.toString)\n        }\n        None",
    "        val map = new HashMap[String, Int]\n        for (i <- 0 until str1.length) {\n            val c = str1(i).toString\n            if (map.contains(c)) {\n                map(c) += 1\n            } else {\n                map(c) = 1\n            }\n        }\n        for (i <- 0 until str1.length) {\n            val c = str1(i).toString\n            if (map(c) == 1) {\n                return Some(c)\n            }\n        }\n        None",
    "        val map = new HashMap[String, Int]\n        for (i <- 0 until str1.length) {\n            val c = str1(i).toString\n            if (map.contains(c)) {\n                map(c) = map(c) + 1\n            } else {\n                map(c) = 1\n            }\n        }\n        for (i <- 0 until str1.length) {\n            val c = str1(i).toString\n            if (map(c) == 1) return Some(c)\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (i <- 0 until str.length) {\n            val c = str(i)\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        for (i <- 0 until str.length) {\n            val c = str(i)\n            if (map(c) == 1) return Some(c.toString)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (c <- str) {\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        for (c <- str) {\n            if (map(c) == 1) return Some(c.toString)\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (c <- str) {\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        for (c <- str) {\n            if (map(c) == 1) return Some(c.toString)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[String, Int]\n        for (i <- 0 until str.length) {\n            val c = str(i).toString\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        for (i <- 0 until str.length) {\n            val c = str(i).toString\n            if (map(c) == 1) return Some(c)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (c <- str) {\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        for (c <- str) {\n            if (map(c) == 1) return Some(c.toString)\n        }\n        None",
    "        val charMap = new HashMap[String, Int]()\n        for (char <- str1) {\n            if (charMap.contains(char.toString)) {\n                charMap(char.toString) += 1\n            } else {\n                charMap(char.toString) = 1\n            }\n        }\n        for (char <- str1) {\n            if (charMap(char.toString) == 1) {\n                return Some(char.toString)\n            }\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[String, Int]\n        for (c <- str) {\n            if (map.contains(c.toString)) {\n                map(c.toString) += 1\n            } else {\n                map(c.toString) = 1\n            }\n        }\n        for (c <- str) {\n            if (map(c.toString) == 1) {\n                return Some(c.toString)\n            }\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (c <- str) {\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        for (c <- str) {\n            if (map(c) == 1) return Some(c.toString)\n        }\n        return None",
    "        val map = new HashMap[String, Int]\n        for (c <- str1) {\n            if (map.contains(c.toString)) {\n                map(c.toString) += 1\n            } else {\n                map(c.toString) = 1\n            }\n        }\n        for (c <- str1) {\n            if (map(c.toString) == 1) {\n                return Some(c.toString)\n            }\n        }\n        None",
    "        val str = str1.toLowerCase\n        val charCount = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charCount.contains(c)) {\n                charCount(c) += 1\n            } else {\n                charCount(c) = 1\n            }\n        }\n        for (c <- str) {\n            if (charCount(c) == 1) {\n                return Some(c.toString)\n            }\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (c <- str) {\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        for (c <- str) {\n            if (map(c) == 1) return Some(c.toString)\n        }\n        None",
    "        val map = new HashMap[String, Int]()\n        for (i <- 0 until str1.length) {\n            val c = str1.charAt(i).toString\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        for (i <- 0 until str1.length) {\n            val c = str1.charAt(i).toString\n            if (map(c) == 1) return Some(c)\n        }\n        return None",
    "        val charCount = new HashMap[String, Int]()\n        for (c <- str1) {\n            if (charCount.contains(c.toString)) {\n                charCount(c.toString) += 1\n            } else {\n                charCount += (c.toString -> 1)\n            }\n        }\n        for (c <- str1) {\n            if (charCount(c.toString) == 1) {\n                return Some(c.toString)\n            }\n        }\n        return None",
    "        var map = Map[String, Int]()\n        for (i <- 0 until str1.length) {\n            val c = str1(i).toString\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        for (i <- 0 until str1.length) {\n            val c = str1(i).toString\n            if (map(c) == 1) return Some(c)\n        }\n        None",
    "        val map = new HashMap[String, Int]()\n        for (i <- 0 until str1.length) {\n            val c = str1(i).toString\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        for (i <- 0 until str1.length) {\n            val c = str1(i).toString\n            if (map(c) == 1) return Some(c)\n        }\n        None",
    "        val str2 = str1.toLowerCase\n        val map = new HashMap[String, Int]\n        for (i <- 0 until str2.length) {\n            val c = str2(i).toString\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        for (i <- 0 until str2.length) {\n            val c = str2(i).toString\n            if (map(c) == 1) return Some(c)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (i <- 0 until str.length) {\n            if (map.contains(str(i))) {\n                map(str(i)) += 1\n            } else {\n                map(str(i)) = 1\n            }\n        }\n        for (i <- 0 until str.length) {\n            if (map(str(i)) == 1) {\n                return Some(str(i).toString)\n            }\n        }\n        return None",
    "        val str = str1.toLowerCase()\n        val map = HashMap[Char, Int]()\n        for (i <- 0 until str.length) {\n            val c = str(i)\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        for (i <- 0 until str.length) {\n            val c = str(i)\n            if (map(c) == 1) return Some(c.toString)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (c <- str) {\n            if (map.contains(c)) map(c) += 1\n            else map += (c -> 1)\n        }\n        for (c <- str) {\n            if (map(c) == 1) return Some(c.toString)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[String, Int]\n        for (i <- 0 until str.length) {\n            val c = str(i).toString\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        for (i <- 0 until str.length) {\n            val c = str(i).toString\n            if (map(c) == 1) return Some(c)\n        }\n        None",
    "        val charMap = new HashMap[String, Int]()\n        for (c <- str1) {\n            if (charMap.contains(c.toString)) {\n                charMap(c.toString) += 1\n            } else {\n                charMap(c.toString) = 1\n            }\n        }\n        for (c <- str1) {\n            if (charMap(c.toString) == 1) {\n                return Some(c.toString)\n            }\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val charCount = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charCount.contains(c)) {\n                charCount(c) += 1\n            } else {\n                charCount(c) = 1\n            }\n        }\n        for (c <- str) {\n            if (charCount(c) == 1) return Some(c.toString)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[String, Int]\n        for (i <- 0 until str.length) {\n            val c = str.charAt(i).toString\n            if (map.contains(c)) map(c) += 1 else map(c) = 1\n        }\n        for (i <- 0 until str.length) {\n            val c = str.charAt(i).toString\n            if (map(c) == 1) return Some(c)\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[String, Int]\n        for (i <- 0 until str.length) {\n            val c = str(i).toString\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        for (i <- 0 until str.length) {\n            val c = str(i).toString\n            if (map(c) == 1) return Some(c)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val charCount = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charCount.contains(c)) {\n                charCount(c) += 1\n            } else {\n                charCount(c) = 1\n            }\n        }\n        for (c <- str) {\n            if (charCount(c) == 1) return Some(c.toString)\n        }\n        None",
    "        val str2 = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (i <- 0 until str2.length) {\n            if (map.contains(str2(i))) map(str2(i)) += 1\n            else map(str2(i)) = 1\n        }\n        for (i <- 0 until str2.length) {\n            if (map(str2(i)) == 1) return Some(str2(i).toString)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (c <- str) {\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        for (c <- str) {\n            if (map(c) == 1) return Some(c.toString)\n        }\n        return None",
    "        val str = str1.toLowerCase()\n        val map = new HashMap[Char, Int]()\n        for (c <- str) {\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        for (c <- str) {\n            if (map(c) == 1) return Some(c.toString)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]()\n        for (i <- 0 until str.length) {\n            if (map.contains(str(i))) map(str(i)) += 1\n            else map(str(i)) = 1\n        }\n        for (i <- 0 until str.length) {\n            if (map(str(i)) == 1) return Some(str(i).toString)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (c <- str) {\n            if (map.contains(c)) {\n                map(c) += 1\n            } else {\n                map(c) = 1\n            }\n        }\n        for (c <- str) {\n            if (map(c) == 1) {\n                return Some(c.toString)\n            }\n        }\n        return None",
    "        val map = new HashMap[String, Int]()\n        for (c <- str1) {\n            if (map.contains(c.toString)) map(c.toString) += 1\n            else map(c.toString) = 1\n        }\n        for (c <- str1) {\n            if (map(c.toString) == 1) return Some(c.toString)\n        }\n        return None",
    "        var map = Map[String, Int]()\n        for (c <- str1) {\n            if (map.contains(c.toString)) map(c.toString) += 1\n            else map(c.toString) = 1\n        }\n        for (c <- str1) {\n            if (map(c.toString) == 1) return Some(c.toString)\n        }\n        return None",
    "        val map = HashMap[String, Int]()\n        for (i <- 0 until str1.length) {\n            val c = str1(i).toString\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        for (i <- 0 until str1.length) {\n            val c = str1(i).toString\n            if (map(c) == 1) return Some(c)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (i <- 0 until str.length) {\n            if (map.contains(str(i))) {\n                map(str(i)) += 1\n            } else {\n                map(str(i)) = 1\n            }\n        }\n        for (i <- 0 until str.length) {\n            if (map(str(i)) == 1) {\n                return Some(str(i).toString)\n            }\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[String, Int]\n        for (c <- str) {\n            if (map.contains(c.toString)) {\n                map(c.toString) += 1\n            } else {\n                map(c.toString) = 1\n            }\n        }\n        for (c <- str) {\n            if (map(c.toString) == 1) {\n                return Some(c.toString)\n            }\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (c <- str) {\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        for (c <- str) {\n            if (map(c) == 1) return Some(c.toString)\n        }\n        None",
    "        val str = str1.toLowerCase()\n        val map = new HashMap[String, Int]\n        for (i <- 0 until str.length) {\n            val c = str.charAt(i).toString\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        for (i <- 0 until str.length) {\n            val c = str.charAt(i).toString\n            if (map(c) == 1) return Some(c)\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[String, Int]\n        for (i <- 0 until str.length) {\n            val c = str(i).toString\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        for (i <- 0 until str.length) {\n            val c = str(i).toString\n            if (map(c) == 1) return Some(c)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (c <- str) {\n            if (map.contains(c)) {\n                map(c) += 1\n            } else {\n                map(c) = 1\n            }\n        }\n        for (c <- str) {\n            if (map(c) == 1) {\n                return Some(c.toString)\n            }\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[String, Int]\n        for (i <- 0 until str.length) {\n            val c = str(i).toString\n            if (map.contains(c)) map(c) += 1\n            else map += (c -> 1)\n        }\n        for (i <- 0 until str.length) {\n            val c = str(i).toString\n            if (map(c) == 1) return Some(c)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[String, Int]\n        for (c <- str) {\n            if (map.contains(c.toString)) map(c.toString) += 1\n            else map(c.toString) = 1\n        }\n        for (c <- str) {\n            if (map(c.toString) == 1) return Some(c.toString)\n        }\n        None",
    "        val str2 = str1.toLowerCase\n        val str3 = str2.toCharArray\n        val map = new HashMap[Char, Int]\n        for (i <- 0 until str3.length) {\n            if (map.contains(str3(i))) {\n                map(str3(i)) += 1\n            } else {\n                map(str3(i)) = 1\n            }\n        }\n        for (i <- 0 until str3.length) {\n            if (map(str3(i)) == 1) {\n                return Some(str3(i).toString)\n            }\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (c <- str) {\n            if (map.contains(c)) map(c) += 1\n            else map += (c -> 1)\n        }\n        for (c <- str) {\n            if (map(c) == 1) return Some(c.toString)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (i <- 0 until str.length) {\n            if (map.contains(str(i))) map(str(i)) += 1\n            else map(str(i)) = 1\n        }\n        for (i <- 0 until str.length) {\n            if (map(str(i)) == 1) return Some(str(i).toString)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[String, Int]\n        for (c <- str) {\n            if (map.contains(c.toString)) map(c.toString) += 1\n            else map(c.toString) = 1\n        }\n        for (c <- str) {\n            if (map(c.toString) == 1) return Some(c.toString)\n        }\n        return None",
    "        val str = str1.toLowerCase()\n        val charCount = new HashMap[Char, Int]()\n        for (c <- str) {\n            if (charCount.contains(c)) {\n                charCount(c) += 1\n            } else {\n                charCount += (c -> 1)\n            }\n        }\n        for (c <- str) {\n            if (charCount(c) == 1) {\n                return Some(c.toString)\n            }\n        }\n        return None",
    "        val map = new HashMap[String, Int]\n        for (i <- 0 until str1.length) {\n            if (map.contains(str1(i).toString)) map(str1(i).toString) += 1\n            else map(str1(i).toString) = 1\n        }\n        for (i <- 0 until str1.length) {\n            if (map(str1(i).toString) == 1) return Some(str1(i).toString)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = HashMap[Char, Int]()\n        for (c <- str) {\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        for (c <- str) {\n            if (map(c) == 1) return Some(c.toString)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (c <- str) {\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        for (c <- str) {\n            if (map(c) == 1) return Some(c.toString)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[String, Int]\n        for (i <- 0 until str.length) {\n            val c = str(i).toString\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        for (i <- 0 until str.length) {\n            val c = str(i).toString\n            if (map(c) == 1) return Some(c)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val charCount = new HashMap[String, Int]\n        for (i <- 0 until str.length) {\n            val c = str(i).toString\n            if (charCount.contains(c)) {\n                charCount(c) += 1\n            } else {\n                charCount(c) = 1\n            }\n        }\n        for (i <- 0 until str.length) {\n            val c = str(i).toString\n            if (charCount(c) == 1) return Some(c)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[String, Int]\n        for (i <- 0 until str.length) {\n            val c = str(i).toString\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        for (i <- 0 until str.length) {\n            val c = str(i).toString\n            if (map(c) == 1) return Some(c)\n        }\n        None",
    "        val charMap = new HashMap[String, Int]\n        str1.foreach(c => {\n            val char = c.toString\n            if (charMap.contains(char)) {\n                charMap(char) += 1\n            } else {\n                charMap(char) = 1\n            }\n        })\n        var result : Option[String] = None\n        charMap.foreach(entry => {\n            if (entry._2 == 1) {\n                result = Some(entry._1)\n            }\n        })\n        result",
    "        val str = str1.toLowerCase\n        val map = HashMap[String, Int]()\n        for (i <- 0 until str.length) {\n            val c = str.charAt(i).toString\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        for (i <- 0 until str.length) {\n            val c = str.charAt(i).toString\n            if (map(c) == 1) return Some(c)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = Map[String, Int]()\n        for (i <- 0 until str.length) {\n            val c = str(i).toString\n            if (map.contains(c)) {\n                map(c) += 1\n            } else {\n                map(c) = 1\n            }\n        }\n        for (i <- 0 until str.length) {\n            val c = str(i).toString\n            if (map(c) == 1) return Some(c)\n        }\n        None",
    "        val map = new HashMap[Char, Int]\n        for (i <- 0 until str1.length) {\n            val c = str1(i)\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        for (i <- 0 until str1.length) {\n            val c = str1(i)\n            if (map(c) == 1) return Some(c.toString)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = HashMap[String, Int]()\n        for (i <- 0 until str.length) {\n            val char = str(i).toString\n            if (map.contains(char)) map(char) += 1\n            else map(char) = 1\n        }\n        for (i <- 0 until str.length) {\n            val char = str(i).toString\n            if (map(char) == 1) return Some(char)\n        }\n        None",
    "        val charCount = new HashMap[Char, Int]\n        for (c <- str1) {\n            if (charCount.contains(c)) {\n                charCount(c) += 1\n            } else {\n                charCount(c) = 1\n            }\n        }\n        val firstNonRepeatingChar = str1.find(c => charCount(c) == 1)\n        firstNonRepeatingChar",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (i <- 0 until str.length) {\n            if (map.contains(str(i))) map(str(i)) += 1\n            else map(str(i)) = 1\n        }\n        for (i <- 0 until str.length) {\n            if (map(str(i)) == 1) return Some(str(i).toString)\n        }\n        None",
    "        var map = new HashMap[String, Int]\n        for (i <- 0 until str1.length) {\n            val c = str1(i).toString\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        for (i <- 0 until str1.length) {\n            val c = str1(i).toString\n            if (map(c) == 1) return Some(c)\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]()\n        for (i <- 0 until str.length) {\n            if (map.contains(str(i))) {\n                map(str(i)) += 1\n            }\n            else {\n                map(str(i)) = 1\n            }\n        }\n        for (i <- 0 until str.length) {\n            if (map(str(i)) == 1) {\n                return Some(str(i).toString)\n            }\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (i <- 0 until str.length) {\n            if (map.contains(str(i))) map(str(i)) += 1\n            else map += (str(i) -> 1)\n        }\n        for (i <- 0 until str.length) {\n            if (map(str(i)) == 1) return Some(str(i).toString)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val charCount = new HashMap[String, Int]\n        for (c <- str) {\n            if (charCount.contains(c.toString)) {\n                charCount(c.toString) += 1\n            } else {\n                charCount(c.toString) = 1\n            }\n        }\n        val nonRepeatingChars = charCount.filter(x => x._2 == 1)\n        if (nonRepeatingChars.size == 0) return None\n        else return Some(nonRepeatingChars.keys.toList.sorted.head)",
    "        val charMap = new HashMap[String, Int]()\n        for (c <- str1) {\n            if (charMap.contains(c.toString)) {\n                charMap(c.toString) += 1\n            } else {\n                charMap(c.toString) = 1\n            }\n        }\n        for (c <- str1) {\n            if (charMap(c.toString) == 1) {\n                return Some(c.toString)\n            }\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (c <- str) {\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        for (c <- str) {\n            if (map(c) == 1) return Some(c.toString)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = HashMap[Char, Int]()\n        for (c <- str) {\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        for (c <- str) {\n            if (map(c) == 1) return Some(c.toString)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (i <- 0 until str.length) {\n            if (map.contains(str(i))) map(str(i)) += 1\n            else map(str(i)) = 1\n        }\n        for (i <- 0 until str.length) {\n            if (map(str(i)) == 1) return Some(str(i).toString)\n        }\n        None",
    "        val map = new HashMap[String, Int]()\n        for (c <- str1) {\n            if (map.contains(c.toString)) {\n                map(c.toString) += 1\n            } else {\n                map(c.toString) = 1\n            }\n        }\n        for (c <- str1) {\n            if (map(c.toString) == 1) {\n                return Some(c.toString)\n            }\n        }\n        None",
    "        val map = new HashMap[String, Int]\n        for (i <- 0 until str1.length) {\n            val c = str1(i).toString\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        for (i <- 0 until str1.length) {\n            val c = str1(i).toString\n            if (map(c) == 1) return Some(c)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[String, Int]\n        for (i <- 0 until str.length) {\n            val c = str(i).toString\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        for (i <- 0 until str.length) {\n            val c = str(i).toString\n            if (map(c) == 1) return Some(c)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[String, Int]\n        for (i <- 0 until str.length) {\n            val c = str(i).toString\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        for (i <- 0 until str.length) {\n            val c = str(i).toString\n            if (map(c) == 1) return Some(c)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (i <- 0 until str.length) {\n            if (map.contains(str(i))) map(str(i)) += 1\n            else map(str(i)) = 1\n        }\n        for (i <- 0 until str.length) {\n            if (map(str(i)) == 1) return Some(str(i).toString)\n        }\n        None",
    "        val map = new HashMap[String, Int]\n        for (c <- str1) {\n            if (map.contains(c.toString)) {\n                map(c.toString) += 1\n            } else {\n                map(c.toString) = 1\n            }\n        }\n        for (c <- str1) {\n            if (map(c.toString) == 1) {\n                return Some(c.toString)\n            }\n        }\n        return None",
    "        val map = new HashMap[String, Int]\n        for (c <- str1) {\n            if (map.contains(c.toString)) {\n                map(c.toString) += 1\n            } else {\n                map(c.toString) = 1\n            }\n        }\n        for (c <- str1) {\n            if (map(c.toString) == 1) {\n                return Some(c.toString)\n            }\n        }\n        return None",
    "        val map = new HashMap[Char, Int]()\n        for (i <- 0 until str1.length) {\n            if (map.contains(str1(i))) {\n                map(str1(i)) += 1\n            } else {\n                map(str1(i)) = 1\n            }\n        }\n        for (i <- 0 until str1.length) {\n            if (map(str1(i)) == 1) {\n                return Some(str1(i).toString)\n            }\n        }\n        None",
    "        val map = new HashMap[String, Int]\n        for (c <- str1) {\n            if (map.contains(c.toString)) map(c.toString) += 1\n            else map(c.toString) = 1\n        }\n        for (c <- str1) {\n            if (map(c.toString) == 1) return Some(c.toString)\n        }\n        None",
    "        val map = new HashMap[String, Int]\n        for (i <- 0 until str1.length) {\n            val c = str1(i).toString\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        for (i <- 0 until str1.length) {\n            val c = str1(i).toString\n            if (map(c) == 1) return Some(c)\n        }\n        None",
    "        val map = new HashMap[String, Int]\n        for (c <- str1) {\n            if (map.contains(c.toString)) {\n                map(c.toString) += 1\n            } else {\n                map(c.toString) = 1\n            }\n        }\n        for (c <- str1) {\n            if (map(c.toString) == 1) {\n                return Some(c.toString)\n            }\n        }\n        return None",
    "        val charMap = new HashMap[Char, Int]\n        for (char <- str1) {\n            if (charMap.contains(char)) {\n                charMap(char) += 1\n            } else {\n                charMap(char) = 1\n            }\n        }\n        for (char <- str1) {\n            if (charMap(char) == 1) {\n                return Some(char.toString)\n            }\n        }\n        None",
    "        val charCount = new HashMap[Char, Int]\n        for (c <- str1) {\n            if (charCount.contains(c)) {\n                charCount(c) += 1\n            } else {\n                charCount(c) = 1\n            }\n        }\n        for (c <- str1) {\n            if (charCount(c) == 1) return Some(c.toString)\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[String, Int]\n        for (i <- 0 until str.length) {\n            val c = str(i).toString\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        for (i <- 0 until str.length) {\n            val c = str(i).toString\n            if (map(c) == 1) return Some(c)\n        }\n        None",
    "        val map = new HashMap[String, Int]\n        str1.foreach(x => {\n            if (map.contains(x.toString)) {\n                map.put(x.toString, map(x.toString) + 1)\n            } else {\n                map.put(x.toString, 1)\n            }\n        })\n        str1.foreach(x => {\n            if (map(x.toString) == 1) return Some(x.toString)\n        })\n        return None",
    "        val str = str1.toLowerCase()\n        val map = new HashMap[String, Int]()\n        for (i <- 0 until str.length) {\n            val c = str(i).toString\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        for (i <- 0 until str.length) {\n            val c = str(i).toString\n            if (map(c) == 1) return Some(c)\n        }\n        return None",
    "        val charCount = new HashMap[Char, Int]\n        for (c <- str1) {\n            if (charCount.contains(c)) charCount(c) += 1\n            else charCount(c) = 1\n        }\n        for (c <- str1) {\n            if (charCount(c) == 1) return Some(c.toString)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (i <- 0 until str.length) {\n            if (map.contains(str(i))) map(str(i)) += 1\n            else map += (str(i) -> 1)\n        }\n        for (i <- 0 until str.length) {\n            if (map(str(i)) == 1) return Some(str(i).toString)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (i <- 0 until str.length) {\n            if (map.contains(str(i))) map(str(i)) += 1\n            else map(str(i)) = 1\n        }\n        for (i <- 0 until str.length) {\n            if (map(str(i)) == 1) return Some(str(i).toString)\n        }\n        None",
    "        val str = str1.toLowerCase()\n        val map = new HashMap[String, Int]()\n        for (i <- 0 until str.length) {\n            val c = str.substring(i, i + 1)\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        for (i <- 0 until str.length) {\n            val c = str.substring(i, i + 1)\n            if (map(c) == 1) return Some(c)\n        }\n        None",
    "        val charMap = new HashMap[Char, Int]\n        for (c <- str1) {\n            if (charMap.contains(c)) {\n                charMap(c) += 1\n            } else {\n                charMap(c) = 1\n            }\n        }\n        for (c <- str1) {\n            if (charMap(c) == 1) {\n                return Some(c.toString)\n            }\n        }\n        return None",
    "        val map = new HashMap[String, Int]()\n        for (i <- 0 until str1.length) {\n            val c = str1(i).toString\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        for (i <- 0 until str1.length) {\n            val c = str1(i).toString\n            if (map(c) == 1) return Some(c)\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val charCount = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charCount.contains(c)) {\n                charCount(c) += 1\n            } else {\n                charCount(c) = 1\n            }\n        }\n        for (c <- str) {\n            if (charCount(c) == 1) {\n                return Some(c.toString)\n            }\n        }\n        None",
    "        val str2 = str1.toLowerCase\n        val map = new HashMap[String, Int]\n        for (i <- 0 until str2.length) {\n            val c = str2(i).toString\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        for (i <- 0 until str2.length) {\n            val c = str2(i).toString\n            if (map(c) == 1) return Some(c)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (i <- 0 until str.length) {\n            if (map.contains(str(i))) map(str(i)) += 1\n            else map += (str(i) -> 1)\n        }\n        for (i <- 0 until str.length) {\n            if (map(str(i)) == 1) return Some(str(i).toString)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[String, Int]\n        for (i <- 0 until str.length) {\n            val c = str(i).toString\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        for (i <- 0 until str.length) {\n            val c = str(i).toString\n            if (map(c) == 1) return Some(c)\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (i <- 0 until str.length) {\n            if (map.contains(str(i))) map(str(i)) += 1\n            else map(str(i)) = 1\n        }\n        for (i <- 0 until str.length) {\n            if (map(str(i)) == 1) return Some(str(i).toString)\n        }\n        None",
    "        val hashMap = new HashMap[String, Int]()\n        for (i <- 0 until str1.length) {\n            val c = str1.charAt(i).toString\n            if (hashMap.contains(c)) hashMap(c) += 1\n            else hashMap(c) = 1\n        }\n        for (i <- 0 until str1.length) {\n            val c = str1.charAt(i).toString\n            if (hashMap(c) == 1) return Some(c)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[String, Int]()\n        for (i <- 0 until str.length) {\n            val c = str(i).toString\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        for (i <- 0 until str.length) {\n            val c = str(i).toString\n            if (map(c) == 1) return Some(c)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (i <- 0 until str.length) {\n            val c = str.charAt(i)\n            if (map.contains(c)) {\n                map(c) += 1\n            } else {\n                map(c) = 1\n            }\n        }\n        for (i <- 0 until str.length) {\n            val c = str.charAt(i)\n            if (map(c) == 1) {\n                return Some(c.toString)\n            }\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val charCount = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charCount.contains(c)) {\n                charCount(c) += 1\n            } else {\n                charCount(c) = 1\n            }\n        }\n        for (c <- str) {\n            if (charCount(c) == 1) return Some(c.toString)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (c <- str) {\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        for (c <- str) {\n            if (map(c) == 1) return Some(c.toString)\n        }\n        None",
    "        val map = new HashMap[String, Int]()\n        for (c <- str1) {\n            if (map.contains(c.toString)) {\n                map(c.toString) += 1\n            } else {\n                map(c.toString) = 1\n            }\n        }\n        for (c <- str1) {\n            if (map(c.toString) == 1) {\n                return Some(c.toString)\n            }\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[String, Int]\n        for (i <- 0 until str.length) {\n            val c = str.charAt(i).toString\n            if (map.contains(c)) {\n                map(c) += 1\n            } else {\n                map += (c -> 1)\n            }\n        }\n        for (i <- 0 until str.length) {\n            val c = str.charAt(i).toString\n            if (map(c) == 1) {\n                return Some(c)\n            }\n        }\n        None",
    "        var map = Map[String, Int]()\n        for (i <- 0 until str1.length) {\n            val c = str1(i).toString\n            if (map.contains(c)) map(c) += 1\n            else map += (c -> 1)\n        }\n        for (i <- 0 until str1.length) {\n            val c = str1(i).toString\n            if (map(c) == 1) return Some(c)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val charCount = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charCount.contains(c)) {\n                charCount(c) += 1\n            } else {\n                charCount(c) = 1\n            }\n        }\n        for (c <- str) {\n            if (charCount(c) == 1) {\n                return Some(c.toString)\n            }\n        }\n        return None",
    "        val map = new HashMap[String, Int]\n        for (i <- 0 until str1.length) {\n            val char = str1(i).toString\n            if (map.contains(char)) map(char) += 1\n            else map(char) = 1\n        }\n        for (i <- 0 until str1.length) {\n            val char = str1(i).toString\n            if (map(char) == 1) return Some(char)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[String, Int]\n        for (i <- 0 until str.length) {\n            val c = str(i).toString\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        for (i <- 0 until str.length) {\n            val c = str(i).toString\n            if (map(c) == 1) return Some(c)\n        }\n        None",
    "        val map = new HashMap[Char, Int]\n        for (c <- str1) {\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        for (c <- str1) {\n            if (map(c) == 1) return Some(c.toString)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[String, Int]\n        for (i <- 0 until str.length) {\n            val c = str.charAt(i).toString\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        for (i <- 0 until str.length) {\n            val c = str.charAt(i).toString\n            if (map(c) == 1) return Some(c)\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]()\n        for (i <- 0 until str.length) {\n            val c = str(i)\n            if (map.contains(c)) {\n                map(c) += 1\n            } else {\n                map(c) = 1\n            }\n        }\n        for (i <- 0 until str.length) {\n            val c = str(i)\n            if (map(c) == 1) return Some(c.toString)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (c <- str) {\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        for (c <- str) {\n            if (map(c) == 1) return Some(c.toString)\n        }\n        None",
    "        val map = new HashMap[String, Int]()\n        for (i <- 0 until str1.length) {\n            val c = str1.charAt(i).toString\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        for (i <- 0 until str1.length) {\n            val c = str1.charAt(i).toString\n            if (map(c) == 1) return Some(c)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (c <- str) {\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        for (c <- str) {\n            if (map(c) == 1) return Some(c.toString)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val charCount = new HashMap[Char, Int]\n        for (c <- str) {\n            if (charCount.contains(c)) {\n                charCount(c) += 1\n            } else {\n                charCount(c) = 1\n            }\n        }\n        for (c <- str) {\n            if (charCount(c) == 1) return Some(c.toString)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = Map[String, Int]()\n        for (i <- 0 until str.length) {\n            val c = str(i).toString\n            if (map.contains(c)) {\n                map(c) = map(c) + 1\n            } else {\n                map(c) = 1\n            }\n        }\n        for (i <- 0 until str.length) {\n            val c = str(i).toString\n            if (map(c) == 1) return Some(c)\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[String, Int]\n        for (c <- str) {\n            if (map.contains(c.toString)) map(c.toString) += 1\n            else map(c.toString) = 1\n        }\n        for (c <- str) {\n            if (map(c.toString) == 1) return Some(c.toString)\n        }\n        None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]()\n        for (c <- str) {\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        for (c <- str) {\n            if (map(c) == 1) return Some(c.toString)\n        }\n        None",
    "        val str2 = str1.toLowerCase\n        val str3 = str2.toList\n        val str4 = str3.groupBy(identity)\n        val str5 = str4.mapValues(_.size)\n        val str6 = str5.filter(x => x._2 == 1)\n        if (str6.size == 0) None\n        else Some(str6.keys.toList(0).toString)",
    "        val str = str1.toLowerCase\n        val map = new HashMap[Char, Int]\n        for (c <- str) {\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        for (c <- str) {\n            if (map(c) == 1) return Some(c.toString)\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[String, Int]\n        for (i <- 0 until str.length) {\n            val c = str(i).toString\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        for (i <- 0 until str.length) {\n            val c = str(i).toString\n            if (map(c) == 1) return Some(c)\n        }\n        None",
    "        val map = Map[String, Int]()\n        for (c <- str1) {\n            val c1 = c.toString\n            if (map.contains(c1)) map(c1) += 1 else map(c1) = 1\n        }\n        for (c <- str1) {\n            val c1 = c.toString\n            if (map(c1) == 1) return Some(c1)\n        }\n        return None",
    "        val str = str1.toLowerCase\n        val map = new HashMap[String, Int]\n        for (i <- 0 until str.length) {\n            val c = str(i).toString\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        for (i <- 0 until str.length) {\n            val c = str(i).toString\n            if (map(c) == 1) return Some(c)\n        }\n        return None",
    "        val map = new HashMap[String, Int]\n        for (i <- 0 until str1.length) {\n            val c = str1(i).toString\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        for (i <- 0 until str1.length) {\n            val c = str1(i).toString\n            if (map(c) == 1) return Some(c)\n        }\n        None"
  ]
}