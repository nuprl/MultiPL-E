{
  "name": "mbpp_743_rotate_right",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    def rotateRight(list : List[Long], m : Long) : List[Long] = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_743_rotate_right.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(rotateRight((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (3l)).equals((List[Long](8l.toLong, 9l.toLong, 10l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))));\n    assert(rotateRight((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](9l.toLong, 10l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))));\n    assert(rotateRight((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (5l)).equals((List[Long](6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val n = list.length\n        val m1 = m % n\n        val m2 = n - m1\n        list.drop(m2) ++ list.take(m2)",
    "        val n = list.length\n        val result = new Array[Long](n)\n        for (i <- 0 until n) {\n            val j = (i + m) % n\n            result(j) = list(i)\n        }\n        result.toList",
    "        val n = list.length\n        val r = m % n\n        val a = list.takeRight(r.toInt)\n        val b = list.dropRight(r.toInt)\n        a ++ b",
    "        val n = list.length\n        val r = m % n\n        val result = new ListBuffer[Long]\n        for (i <- 0 until n) {\n            val j = (i + n - r) % n\n            result += list(j)\n        }\n        result.toList",
    "        val n = list.length\n        val result = new ListBuffer[Long]\n        for (i <- 0 until n) {\n            val j = (i + m) % n\n            result += list(j)\n        }\n        result.toList",
    "        val n = list.length\n        val result = new Array[Long](n)\n        for (i <- 0 until n) {\n            val j = (i + m) % n\n            result(j) = list(i)\n        }\n        result.toList",
    "        val n = list.length\n        val result = new Array[Long](n)\n        for (i <- 0 until n) {\n            val j = (i + m) % n\n            result(j) = list(i)\n        }\n        result.toList",
    "        val n = list.length\n        val r = m % n\n        val (a, b) = list.splitAt(n - r.toInt)\n        b ::: a",
    "        val n = list.length\n        val result = new Array[Long](n)\n        for (i <- 0 until n) {\n            result(i) = list((i + m) % n)\n        }\n        result.toList",
    "        val n = list.length\n        val result = new ListBuffer[Long]\n        for (i <- 0 until n) {\n            result += list((i + m) % n)\n        }\n        result.toList",
    "        val n = list.length\n        val result = new Array[Long](n)\n        for (i <- 0 until n) {\n            val j = (i + m) % n\n            result(j) = list(i)\n        }\n        result.toList",
    "        val n = list.length\n        val result = new Array[Long](n)\n        for (i <- 0 until n) {\n            result((i + m) % n) = list(i)\n        }\n        result.toList",
    "        val n = list.length\n        val result = new ListBuffer[Long]\n        for (i <- 0 until n) {\n            val j = (i + m) % n\n            result += list(j)\n        }\n        result.toList",
    "        val n = list.length\n        val result = new ListBuffer[Long]()\n        for (i <- 0 until n) {\n            result += list((i + m) % n)\n        }\n        result.toList",
    "        val n = list.length\n        val m1 = m % n\n        val (l1, l2) = list.splitAt(n - m1.toInt)\n        l2 ::: l1",
    "        val n = list.length\n        val result = new Array[Long](n)\n        for (i <- 0 until n) {\n            result(i) = list((i + m) % n)\n        }\n        result.toList",
    "        val n = list.length\n        val result = new ListBuffer[Long]\n        for (i <- 0 until n) {\n            result += list((i + m) % n)\n        }\n        result.toList",
    "        val n = list.length\n        val newList = new Array[Long](n)\n        for (i <- 0 until n) {\n            newList((i + m) % n) = list(i)\n        }\n        newList.toList",
    "        val n = list.length\n        val result = new Array[Long](n)\n        for (i <- 0 until n) {\n            val j = (i + m) % n\n            result(j) = list(i)\n        }\n        result.toList",
    "        val n = list.length\n        val result = new Array[Long](n)\n        for (i <- 0 until n) {\n            result((i + m) % n) = list(i)\n        }\n        result.toList",
    "        val n = list.length\n        val result = new Array[Long](n)\n        for (i <- 0 until n) {\n            result((i + m) % n) = list(i)\n        }\n        result.toList",
    "        val n = list.size\n        val result = new ListBuffer[Long]\n        for (i <- 0 until n) {\n            result += list((i + m) % n)\n        }\n        result.toList",
    "        val n = list.length\n        val rotated = new ListBuffer[Long]\n        for (i <- 0 until n) {\n            val index = (i + m) % n\n            rotated += list(index)\n        }\n        rotated.toList",
    "        val n = list.length\n        val result = new Array[Long](n)\n        for (i <- 0 until n) {\n            val j = (i + m) % n\n            result(j) = list(i)\n        }\n        result.toList",
    "        val n = list.length\n        val result = new Array[Long](n)\n        for (i <- 0 until n) {\n            result(i) = list((i + m) % n)\n        }\n        result.toList",
    "        val n = list.length\n        val result = new ListBuffer[Long]\n        for (i <- 0 until n) {\n            result += list((i + m) % n)\n        }\n        result.toList",
    "        if (m == 0) return list\n        val n = list.length\n        val newList = new ListBuffer[Long]\n        for (i <- 0 until n) {\n            newList += list((i + m) % n)\n        }\n        newList.toList",
    "        val n = list.length\n        val m1 = m % n\n        if (m1 == 0) return list\n        val list1 = list.slice(n - m1.toInt, n) ::: list.slice(0, n - m1.toInt)\n        list1",
    "        val n = list.length\n        val result = new ListBuffer[Long]\n        for (i <- 0 until n) {\n            result += list((i + m) % n)\n        }\n        result.toList",
    "        val n = list.length\n        val r = m % n\n        val (a, b) = list.splitAt(n - r.toInt)\n        b ::: a",
    "        val n = list.length\n        val result = new Array[Long](n)\n        for (i <- 0 until n) {\n            result(i) = list((i + m) % n)\n        }\n        result.toList",
    "        val n = list.length\n        val result = new ListBuffer[Long]\n        for (i <- 0 until n) {\n            result += list((i + m) % n)\n        }\n        result.toList",
    "        val n = list.length\n        val result = new Array[Long](n)\n        for (i <- 0 until n) {\n            val j = (i + m) % n\n            result(j) = list(i)\n        }\n        result.toList",
    "        val n = list.length\n        val result = new Array[Long](n)\n        for (i <- 0 until n) {\n            result((i + m) % n) = list(i)\n        }\n        result.toList",
    "        val n = list.length\n        val m1 = m % n\n        val m2 = n - m1\n        list.slice(m2, n) ::: list.slice(0, m2)",
    "        val n = list.length\n        val result = new Array[Long](n)\n        for (i <- 0 until n) {\n            result(i) = list((i + m) % n)\n        }\n        result.toList",
    "        val n = list.length\n        val result = new ListBuffer[Long]\n        for (i <- 0 until n) {\n            result += list((i + m) % n)\n        }\n        result.toList",
    "        val n = list.length\n        val m1 = m % n\n        val m2 = n - m1\n        list.takeRight(m1.toInt) ++ list.take(m2.toInt)",
    "        val n = list.size\n        val newList = new ListBuffer[Long]\n        for (i <- 0 until n) {\n            val newIndex = (i + m) % n\n            newList += list(newIndex)\n        }\n        newList.toList",
    "        val n = list.length\n        val result = new ListBuffer[Long]\n        for (i <- 0 until n) {\n            val index = (i + m) % n\n            result.append(list(index))\n        }\n        result.toList",
    "        val n = list.length\n        val m1 = m % n\n        val m2 = n - m1\n        list.takeRight(m1.toInt) ::: list.take(m2.toInt)",
    "        val n = list.length\n        val m1 = m % n\n        val (left, right) = list.splitAt(n - m1.toInt)\n        right ::: left",
    "        val n = list.length\n        val newList = new Array[Long](n)\n        for (i <- 0 until n) {\n            newList((i + m) % n) = list(i)\n        }\n        newList.toList",
    "        val n = list.length\n        val rotated = new Array[Long](n)\n        for (i <- 0 until n) rotated(i) = list((i + m) % n)\n        rotated.toList",
    "        val n = list.length\n        val m1 = m % n\n        val list1 = list.slice(n - m1.toInt, n)\n        val list2 = list.slice(0, n - m1.toInt)\n        list1 ::: list2",
    "        val n = list.length\n        val m1 = m % n\n        val (a, b) = list.splitAt(n - m1.toInt)\n        b ::: a",
    "        val n = list.length\n        val result = new Array[Long](n)\n        for (i <- 0 until n) {\n            val j = (i + m) % n\n            result(j) = list(i)\n        }\n        result.toList",
    "        val n = list.length\n        val result = new Array[Long](n)\n        for (i <- 0 until n) result(i) = list((i + m) % n)\n        result.toList",
    "        val n = list.length\n        val result = new Array[Long](n)\n        for (i <- 0 until n) {\n            val j = (i + m) % n\n            result(j) = list(i)\n        }\n        result.toList",
    "        val n = list.length\n        val result = new ListBuffer[Long]\n        for (i <- 0 until n) {\n            result += list((i + m) % n)\n        }\n        result.toList",
    "        val n = list.length\n        val rotated = new Array[Long](n)\n        for (i <- 0 until n) {\n            val j = (i + m) % n\n            rotated(j) = list(i)\n        }\n        rotated.toList",
    "        val n = list.length\n        val m1 = m % n\n        val (left, right) = list.splitAt(n - m1.toInt)\n        right ::: left",
    "        val n = list.length\n        val newList = new Array[Long](n)\n        for (i <- 0 until n) {\n            newList(i) = list((i + m) % n)\n        }\n        newList.toList",
    "        val n = list.length\n        val newList = new Array[Long](n)\n        for (i <- 0 until n) {\n            newList((i + m) % n) = list(i)\n        }\n        newList.toList",
    "        val n = list.length\n        val newList = new ListBuffer[Long]\n        for (i <- 0 until n) {\n            val newIndex = (i + m) % n\n            newList += list(newIndex)\n        }\n        newList.toList",
    "        val n = list.length\n        val m1 = m % n\n        val m2 = n - m1\n        list.slice(m2, n) ::: list.slice(0, m2)",
    "        val n = list.length\n        val result = new ListBuffer[Long]\n        for (i <- 0 until n) {\n            val index = (i + m) % n\n            result += list(index)\n        }\n        result.toList",
    "        val n = list.length\n        val result = new ListBuffer[Long]\n        for (i <- 0 until n) result += list((i + m) % n)\n        result.toList",
    "        val n = list.length\n        val result = new Array[Long](n)\n        for (i <- 0 until n) {\n            val j = (i + m) % n\n            result(j) = list(i)\n        }\n        result.toList",
    "        val n = list.length\n        val newList = new ListBuffer[Long]\n        for (i <- 0 until n) {\n            val newIndex = (i + m) % n\n            newList += list(newIndex)\n        }\n        newList.toList",
    "        val n = list.length\n        val result = new Array[Long](n)\n        for (i <- 0 until n) {\n            val index = (i + m) % n\n            result(index) = list(i)\n        }\n        result.toList",
    "        val n = list.length\n        val r = m % n\n        val (a, b) = list.splitAt(n - r.toInt)\n        b ::: a",
    "        val n = list.length\n        val result = new Array[Long](n)\n        for (i <- 0 until n) {\n            val j = (i + m) % n\n            result(j) = list(i)\n        }\n        result.toList",
    "        val n = list.length\n        val result = new Array[Long](n)\n        for (i <- 0 until n) {\n            result(i) = list((i + m) % n)\n        }\n        result.toList",
    "        val n = list.length\n        val result = new Array[Long](n)\n        for (i <- 0 until n) {\n            result(i) = list((i + m) % n)\n        }\n        result.toList",
    "        val n = list.length\n        val result = new ListBuffer[Long]\n        for (i <- 0 until n) {\n            val index = (i + m) % n\n            result += list(index)\n        }\n        result.toList",
    "        val n = list.length\n        val result = new Array[Long](n)\n        for (i <- 0 until n) {\n            val j = (i + m) % n\n            result(j) = list(i)\n        }\n        result.toList",
    "        val n = list.length\n        val newList = new Array[Long](n)\n        for (i <- 0 until n) {\n            newList((i + m) % n) = list(i)\n        }\n        newList.toList",
    "        def rotateRightHelper(list : List[Long], m : Long, acc : List[Long]) : List[Long] = {\n            if (m == 0) acc\n            else {\n                val (left, right) = list.splitAt(list.length - 1)\n                rotateRightHelper(right ::: left, m - 1, acc)\n            }\n        }\n        rotateRightHelper(list, m, List())",
    "        val n = list.length\n        val m1 = m % n\n        val m2 = n - m1\n        list.takeRight(m1.toInt) ++ list.take(m2.toInt)",
    "        val n = list.length\n        val r = m % n\n        val first = list.takeRight(r.toInt)\n        val second = list.take(n - r.toInt)\n        first ::: second",
    "        val n = list.length\n        val newList = new Array[Long](n)\n        for (i <- 0 until n) {\n            newList(i) = list((i + m) % n)\n        }\n        newList.toList",
    "        val n = list.length\n        val result = ArrayBuffer[Long]()\n        for (i <- 0 until n) {\n            result += list((i + m) % n)\n        }\n        result.toList",
    "        val n = list.length\n        val result = new Array[Long](n)\n        for (i <- 0 until n) {\n            val j = (i + m) % n\n            result(j) = list(i)\n        }\n        result.toList",
    "        val n = list.length\n        val result = new ListBuffer[Long]\n        for (i <- 0 until n) {\n            result += list((i + m) % n)\n        }\n        result.toList",
    "        val n = list.length\n        val newList = new Array[Long](n)\n        for (i <- 0 until n) {\n            newList(i) = list((i + m) % n)\n        }\n        newList.toList",
    "        val n = list.length\n        val (a, b) = list.splitAt(n - m.toInt)\n        b ::: a",
    "        val n = list.length\n        val result = new Array[Long](n)\n        for (i <- 0 until n) {\n            val index = (i + m) % n\n            result(index) = list(i)\n        }\n        result.toList",
    "        val n = list.length\n        val result = new ListBuffer[Long]\n        for (i <- 0 until n) {\n            val index = (i + m) % n\n            result += list(index)\n        }\n        result.toList",
    "        val n = list.length\n        val result = new Array[Long](n)\n        for (i <- 0 until n) {\n            val j = (i + m) % n\n            result(j) = list(i)\n        }\n        result.toList",
    "        val n = list.length\n        val result = new Array[Long](n)\n        for (i <- 0 until n) {\n            val index = (i + m) % n\n            result(index) = list(i)\n        }\n        result.toList",
    "        val n = list.length\n        val result = new Array[Long](n)\n        for (i <- 0 until n) {\n            result(i) = list((i + m) % n)\n        }\n        result.toList",
    "        val n = list.length\n        val result = new ListBuffer[Long]\n        for (i <- 0 until n) {\n            val index = (i + m) % n\n            result += list(index)\n        }\n        result.toList",
    "        val n = list.length\n        val result = new Array[Long](n)\n        for (i <- 0 until n) {\n            val newIndex = (i + m) % n\n            result(newIndex) = list(i)\n        }\n        result.toList",
    "        val n = list.length\n        val newList = new ListBuffer[Long]\n        for (i <- 0 until n) {\n            val newIndex = (i + m) % n\n            newList += list(newIndex)\n        }\n        newList.toList",
    "        val n = list.length\n        val newList = new ListBuffer[Long]\n        for (i <- 0 until n) {\n            newList += list((i + m) % n)\n        }\n        newList.toList",
    "        val n = list.length\n        val newList = new ListBuffer[Long]\n        for (i <- 0 until n) newList += list((i + m) % n)\n        newList.toList",
    "        val n = list.length\n        val result = new Array[Long](n)\n        for (i <- 0 until n) {\n            val j = (i + m) % n\n            result(j) = list(i)\n        }\n        result.toList",
    "        val n = list.length\n        val result = new Array[Long](n)\n        for (i <- 0 until n) {\n            result(i) = list((i + m) % n)\n        }\n        result.toList",
    "        val n = list.length\n        val result = new Array[Long](n)\n        for (i <- 0 until n) {\n            result(i) = list((i + m) % n)\n        }\n        result.toList",
    "        val n = list.length\n        val m2 = m % n\n        val list2 = list.takeRight(m2.toInt) ::: list.take(n - m2.toInt)\n        list2",
    "        val n = list.length\n        val result = new ListBuffer[Long]\n        for (i <- 0 until n) {\n            val j = (i + m) % n\n            result += list(j)\n        }\n        result.toList",
    "        val n = list.length\n        val mod = m % n\n        val left = list.take(n - mod.toInt)\n        val right = list.takeRight(mod.toInt)\n        right ::: left",
    "        val n = list.length\n        val newList = new Array[Long](n)\n        for (i <- 0 until n) {\n            newList((i + m) % n) = list(i)\n        }\n        newList.toList",
    "        val n = list.length\n        val result = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            result((i + m) % n) = list(i)\n        }\n        result.toList",
    "        val n = list.length\n        val newList = new Array[Long](n)\n        for (i <- 0 until n) {\n            val newIndex = (i + m) % n\n            newList(newIndex) = list(i)\n        }\n        newList.toList",
    "        val n = list.length\n        val result = new Array[Long](n)\n        for (i <- 0 until n) {\n            val j = (i + m) % n\n            result(j) = list(i)\n        }\n        result.toList",
    "        val n = list.length\n        val result = new Array[Long](n)\n        for (i <- 0 until n) {\n            result(i) = list((i + m) % n)\n        }\n        result.toList",
    "        val n = list.size\n        val result = new ListBuffer[Long]\n        for (i <- 0 until n) {\n            val index = (i + m) % n\n            result += list(index)\n        }\n        result.toList",
    "        val n = list.length\n        val result = new Array[Long](n)\n        for (i <- 0 until n) {\n            result(i) = list((i + m) % n)\n        }\n        result.toList",
    "        val n = list.length\n        val result = new ListBuffer[Long]\n        for (i <- 0 until n) {\n            val index = (i + m) % n\n            result += list(index)\n        }\n        result.toList",
    "        val n = list.length\n        val m1 = m % n\n        val list1 = list.slice(n - m1.toInt, n) ++ list.slice(0, n - m1.toInt)\n        list1",
    "        val n = list.length\n        val result = new Array[Long](n)\n        for (i <- 0 until n) {\n            val j = (i + m) % n\n            result(j) = list(i)\n        }\n        result.toList",
    "        val n = list.length\n        val result = new Array[Long](n)\n        for (i <- 0 until n) {\n            val j = (i + m) % n\n            result(j) = list(i)\n        }\n        result.toList",
    "        val n = list.length\n        val m1 = m % n\n        val m2 = n - m1\n        list.slice(m2, n) ::: list.slice(0, m2)",
    "        val n = list.length\n        val result = new Array[Long](n)\n        for (i <- 0 until n) {\n            val j = (i + m) % n\n            result(j) = list(i)\n        }\n        result.toList",
    "        val n = list.length\n        val newList = new Array[Long](n)\n        for (i <- 0 until n) {\n            val newIndex = (i + m) % n\n            newList(newIndex) = list(i)\n        }\n        newList.toList",
    "        val n = list.length\n        val newList = new ListBuffer[Long]\n        for (i <- 0 until n) {\n            val newIndex = (i + m) % n\n            newList += list(newIndex)\n        }\n        newList.toList",
    "        val n = list.length\n        val result = new Array[Long](n)\n        for (i <- 0 until n) {\n            val j = (i + m) % n\n            result(j) = list(i)\n        }\n        result.toList",
    "        val n = list.length\n        val result = new Array[Long](n)\n        for (i <- 0 until n) {\n            result(i) = list((i + m) % n)\n        }\n        result.toList",
    "        val n = list.length\n        val newList = new Array[Long](n)\n        for (i <- 0 until n) {\n            newList((i + m) % n) = list(i)\n        }\n        newList.toList",
    "        val n = list.length\n        val k = m % n\n        val a = list.take(n - k.toInt)\n        val b = list.takeRight(k.toInt)\n        b ::: a",
    "        val n = list.length\n        val result = new Array[Long](n)\n        for (i <- 0 until n) {\n            val j = (i + m) % n\n            result(j) = list(i)\n        }\n        result.toList",
    "        val n = list.length\n        val newList = new ListBuffer[Long]\n        for (i <- 0 until n) {\n            newList += list((i + m) % n)\n        }\n        newList.toList",
    "        val n = list.length\n        val result = new Array[Long](n)\n        for (i <- 0 until n) result(i) = list((i + m) % n)\n        result.toList",
    "        val n = list.length\n        val r = m % n\n        val (a, b) = list.splitAt(n - r.toInt)\n        b ::: a",
    "        val n = list.length\n        val m1 = m % n\n        val (l1, l2) = list.splitAt(n - m1.toInt)\n        l2 ::: l1",
    "        val n = list.length\n        val m1 = m % n\n        val list1 = list.takeRight(m1.toInt)\n        val list2 = list.take(n - m1.toInt)\n        list1 ::: list2",
    "        val n = list.length\n        val result = new ListBuffer[Long]\n        for (i <- 0 until n) {\n            val j = (i + m) % n\n            result += list(j)\n        }\n        result.toList",
    "        val n = list.length\n        val result = new ListBuffer[Long]\n        for (i <- 0 until n) {\n            val j = (i + m) % n\n            result += list(j)\n        }\n        result.toList",
    "        val n = list.length\n        val m1 = m % n\n        val list1 = list.slice(n - m1.toInt, n)\n        val list2 = list.slice(0, n - m1.toInt)\n        list1 ::: list2",
    "        val n = list.length\n        if (m > n) {\n            rotateRight(list, m % n)\n        } else {\n            list.takeRight(m.toInt) ::: list.dropRight(m.toInt)\n        }",
    "        val n = list.length\n        val result = new Array[Long](n)\n        for (i <- 0 until n) {\n            val newIndex = (i + m) % n\n            result(newIndex) = list(i)\n        }\n        result.toList",
    "        val n = list.length\n        val result = new ListBuffer[Long]\n        for (i <- 0 until n) {\n            val index = (i + m) % n\n            result += list(index)\n        }\n        result.toList",
    "        val n = list.length\n        val newList = new Array[Long](n)\n        for (i <- 0 until n) {\n            newList((i + m) % n) = list(i)\n        }\n        newList.toList",
    "        val n = list.length\n        val newList = new ListBuffer[Long]\n        for (i <- 0 until n) {\n            val newIndex = (i + m) % n\n            newList += list(newIndex.toInt)\n        }\n        newList.toList",
    "        val n = list.length\n        val result = Array.fill(n)(0L)\n        for (i <- 0 until n) {\n            val index = (i + m) % n\n            result(index) = list(i)\n        }\n        result.toList",
    "        val n = list.length\n        val result = new ListBuffer[Long]\n        for (i <- 0 until n) {\n            result += list((i + m) % n)\n        }\n        result.toList",
    "        val n = list.length\n        val result = new Array[Long](n)\n        for (i <- 0 until n) {\n            val j = (i + m) % n\n            result(j) = list(i)\n        }\n        result.toList",
    "        val n = list.length\n        val m1 = m % n\n        val m2 = n - m1\n        val (a, b) = list.splitAt(m2)\n        b ::: a",
    "        val n = list.length\n        val rotated = new ListBuffer[Long]\n        for (i <- 0 until n) {\n            val index = (i + m) % n\n            rotated += list(index.toInt)\n        }\n        rotated.toList",
    "        val n = list.length\n        val result = new Array[Long](n)\n        for (i <- 0 until n) {\n            val j = (i + m) % n\n            result(j) = list(i)\n        }\n        result.toList",
    "        val n = list.length\n        val result = new ListBuffer[Long]\n        for (i <- 0 until n) {\n            val index = (i + m) % n\n            result += list(index)\n        }\n        result.toList",
    "        val n = list.length\n        val result = new ListBuffer[Long]\n        for (i <- 0 until n) result += list((i + m) % n)\n        result.toList",
    "        val n = list.length\n        val result = new ListBuffer[Long]\n        for (i <- 0 until n) {\n            result += list((i + m) % n)\n        }\n        result.toList",
    "        val n = list.length\n        val result = new Array[Long](n)\n        for (i <- 0 until n) {\n            val j = (i + m) % n\n            result(j) = list(i)\n        }\n        result.toList",
    "        val n = list.length\n        val rotated = new Array[Long](n)\n        for (i <- 0 until n) {\n            val j = (i + m) % n\n            rotated(j) = list(i)\n        }\n        rotated.toList",
    "        val n = list.length\n        val result = new Array[Long](n)\n        for (i <- 0 until n) {\n            val j = (i + m) % n\n            result(j) = list(i)\n        }\n        result.toList",
    "        val n = list.length\n        val result = new ListBuffer[Long]\n        for (i <- 0 until n) {\n            result += list((i + m) % n)\n        }\n        result.toList",
    "        val n = list.length\n        val newList = new ListBuffer[Long]\n        for (i <- 0 until n) newList += list((i + m) % n)\n        newList.toList",
    "        val n = list.length\n        val result = new Array[Long](n)\n        for (i <- 0 until n) result(i) = list((i + m) % n)\n        result.toList",
    "        val n = list.length\n        val result = new Array[Long](n)\n        for (i <- 0 until n) {\n            val j = (i + m) % n\n            result(j) = list(i)\n        }\n        result.toList",
    "        val n = list.length\n        val result = new Array[Long](n)\n        for (i <- 0 until n) {\n            result((i + m) % n) = list(i)\n        }\n        result.toList",
    "        val n = list.length\n        val result = new Array[Long](n)\n        for (i <- 0 until n) {\n            result((i + m) % n) = list(i)\n        }\n        result.toList",
    "        val n = list.length\n        val result = new Array[Long](n)\n        for (i <- 0 until n) {\n            result((i + m) % n) = list(i)\n        }\n        result.toList",
    "        val n = list.length\n        val k = m % n\n        val result = new ListBuffer[Long]\n        for (i <- (n - k) until n) result += list(i)\n        for (i <- 0 until (n - k)) result += list(i)\n        result.toList",
    "        val n = list.length\n        val result = new Array[Long](n)\n        for (i <- 0 until n) {\n            val j = (i + m) % n\n            result(j) = list(i)\n        }\n        result.toList",
    "        val n = list.length\n        val result = new Array[Long](n)\n        for (i <- 0 until n) result(i) = list((i + m) % n)\n        result.toList",
    "        val n = list.length\n        val newList = new ListBuffer[Long]\n        for (i <- 0 until n) {\n            val index = (i + m) % n\n            newList += list(index)\n        }\n        newList.toList",
    "        val n = list.length\n        val newList = new ListBuffer[Long]\n        for (i <- 0 until n) {\n            newList += list((i + m.toInt) % n)\n        }\n        newList.toList",
    "        val n = list.length\n        val result = new Array[Long](n)\n        for (i <- 0 until n) {\n            val j = (i + m) % n\n            result(j) = list(i)\n        }\n        result.toList",
    "        val n = list.length\n        val result = new Array[Long](n)\n        for (i <- 0 until n) result(i) = list((i + m) % n)\n        result.toList",
    "        val n = list.length\n        val rotated = new Array[Long](n)\n        for (i <- 0 until n) {\n            val j = (i + m) % n\n            rotated(j) = list(i)\n        }\n        rotated.toList",
    "        val n = list.length\n        val newList = new ListBuffer[Long]\n        for (i <- 0 until n) {\n            val index = (i + m) % n\n            newList += list(index)\n        }\n        newList.toList",
    "        val n = list.length\n        val result = new ListBuffer[Long]\n        for (i <- 0 until n) {\n            result += list((i + m) % n)\n        }\n        result.toList",
    "        val n = list.length\n        val newList = new Array[Long](n)\n        for (i <- 0 until n) {\n            val newIndex = (i + m) % n\n            newList(newIndex) = list(i)\n        }\n        newList.toList",
    "        val n = list.length\n        val newList = new Array[Long](n)\n        for (i <- 0 until n) {\n            newList(i) = list((i + m) % n)\n        }\n        newList.toList",
    "        val n = list.length\n        val result = new Array[Long](n)\n        for (i <- 0 until n) {\n            val j = (i + m) % n\n            result(j) = list(i)\n        }\n        result.toList",
    "        val n = list.length\n        val result = new ListBuffer[Long]\n        for (i <- 0 until n) {\n            result += list((i + m) % n)\n        }\n        result.toList",
    "        val n = list.length\n        val result = new ListBuffer[Long]\n        for (i <- 0 until n) {\n            val j = (i + m) % n\n            result += list(j)\n        }\n        result.toList",
    "        val n = list.length\n        val result = new ListBuffer[Long]()\n        for (i <- 0 until n) {\n            val index = (i + m) % n\n            result += list(index)\n        }\n        result.toList",
    "        val n = list.length\n        val m1 = m % n\n        val m2 = n - m1\n        list.slice(m2, n) ::: list.slice(0, m2)",
    "        val n = list.length\n        val newList = new Array[Long](n)\n        for (i <- 0 until n) {\n            val newIndex = (i + m) % n\n            newList(newIndex) = list(i)\n        }\n        newList.toList",
    "        val n = list.length\n        val result = new Array[Long](n)\n        for (i <- 0 until n) {\n            val j = (i + m) % n\n            result(j) = list(i)\n        }\n        result.toList",
    "        val n = list.length\n        val result = new Array[Long](n)\n        for (i <- 0 until n) {\n            result((i + m) % n) = list(i)\n        }\n        result.toList",
    "        val n = list.length\n        val result = ArrayBuffer[Long]()\n        for (i <- 0 until n) {\n            result += list((i + m) % n)\n        }\n        result.toList",
    "        val n = list.length\n        val result = new Array[Long](n)\n        for (i <- 0 until n) {\n            val index = (i + m) % n\n            result(index) = list(i)\n        }\n        result.toList",
    "        val n = list.length\n        val newList = new Array[Long](n)\n        for (i <- 0 until n) {\n            newList(i) = list((i + m) % n)\n        }\n        newList.toList",
    "        val n = list.length\n        val newList = new Array[Long](n)\n        for (i <- 0 until n) {\n            newList((i + m) % n) = list(i)\n        }\n        newList.toList",
    "        val n = list.length\n        val result = new Array[Long](n)\n        for (i <- 0 until n) {\n            result(i) = list((i + m) % n)\n        }\n        result.toList",
    "        val n = list.length\n        val result = new Array[Long](n)\n        for (i <- 0 until n) result((i + m) % n) = list(i)\n        result.toList",
    "        val n = list.size\n        val r = m % n\n        val l1 = list.takeRight(r.toInt)\n        val l2 = list.dropRight(r.toInt)\n        l1 ::: l2",
    "        val n = list.length\n        val result = new Array[Long](n)\n        for (i <- 0 until n) {\n            val j = (i + m) % n\n            result(j) = list(i)\n        }\n        result.toList",
    "        val n = list.length\n        val result = new Array[Long](n)\n        for (i <- 0 until n) result((i + m) % n) = list(i)\n        result.toList",
    "        val n = list.length\n        val r = m % n\n        val (a, b) = list.splitAt(n - r.toInt)\n        b ::: a",
    "        val n = list.length\n        val result = new ListBuffer[Long]\n        for (i <- 0 until n) {\n            result += list((i + m) % n)\n        }\n        result.toList",
    "        val n = list.length\n        val rotatedList = new ListBuffer[Long]\n        for (i <- 0 until n) {\n            val index = (i + m) % n\n            rotatedList += list(index)\n        }\n        rotatedList.toList",
    "        val n = list.length\n        val m1 = m % n\n        list.drop(n - m1.toInt) ++ list.take(n - m1.toInt)",
    "        val n = list.length\n        val result = new Array[Long](n)\n        for (i <- 0 until n) {\n            val j = (i + m) % n\n            result(j) = list(i)\n        }\n        result.toList",
    "        val n = list.length\n        val result = new Array[Long](n)\n        for (i <- 0 until n) {\n            result((i + m) % n) = list(i)\n        }\n        result.toList",
    "        val n = list.length\n        val result = new Array[Long](n)\n        for (i <- 0 until n) {\n            val j = (i + m) % n\n            result(j) = list(i)\n        }\n        result.toList",
    "        val n = list.size\n        val result = new Array[Long](n)\n        for (i <- 0 until n) {\n            val index = (i + m) % n\n            result(index) = list(i)\n        }\n        result.toList",
    "        val n = list.length\n        val res = new Array[Long](n)\n        for (i <- 0 until n) {\n            val j = (i + m) % n\n            res(j) = list(i)\n        }\n        res.toList",
    "        val n = list.length\n        val result = new Array[Long](n)\n        for (i <- 0 until n) {\n            result(i) = list((i + m) % n)\n        }\n        result.toList",
    "        val n = list.length\n        val m = m % n\n        val (a, b) = list.splitAt(n - m.toInt)\n        b ::: a",
    "        val n = list.length\n        val result = new Array[Long](n)\n        for (i <- 0 until n) {\n            val j = (i + m) % n\n            result(j) = list(i)\n        }\n        result.toList",
    "        val n = list.length\n        val result = new ListBuffer[Long]\n        for (i <- 0 until n) {\n            result += list((i + m) % n)\n        }\n        result.toList",
    "        val n = list.length\n        val result = new Array[Long](n)\n        for (i <- 0 until n) {\n            val j = (i + m) % n\n            result(j) = list(i)\n        }\n        result.toList",
    "        val n = list.length\n        val result = new Array[Long](n)\n        for (i <- 0 until n) {\n            val j = (i + m) % n\n            result(j) = list(i)\n        }\n        result.toList",
    "        val n = list.length\n        val k = m % n\n        val (a, b) = list.splitAt(n - k.toInt)\n        b ::: a",
    "        val n = list.length\n        val result = ArrayBuffer[Long]()\n        for (i <- 0 until n) {\n            result += list((i + m) % n)\n        }\n        result.toList",
    "        val n = list.length\n        val k = m % n\n        val (a, b) = list.splitAt(n - k.toInt)\n        b ::: a",
    "        val n = list.length\n        val result = new ListBuffer[Long]\n        for (i <- 0 until n) {\n            result += list((i + m) % n)\n        }\n        result.toList",
    "        val n = list.length\n        val m1 = m % n\n        val m2 = n - m1\n        list.slice(m2, n) ::: list.slice(0, m2)",
    "        val n = list.length\n        val newList = new ArrayBuffer[Long]()\n        for (i <- 0 until n) {\n            val newIndex = (i + m) % n\n            newList += list(newIndex)\n        }\n        newList.toList",
    "        val n = list.length\n        val newList = new Array[Long](n)\n        for (i <- 0 until n) {\n            newList(i) = list((i + m) % n)\n        }\n        newList.toList",
    "        val n = list.length\n        val newList = new ListBuffer[Long]\n        for (i <- 0 until n) {\n            val newIndex = (i + m) % n\n            newList += list(newIndex)\n        }\n        newList.toList",
    "        val n = list.length\n        val result = new Array[Long](n)\n        for (i <- 0 until n) {\n            val j = (i + m) % n\n            result(j) = list(i)\n        }\n        result.toList",
    "        val n = list.length\n        val result = new Array[Long](n)\n        for (i <- 0 until n) {\n            val j = (i + m) % n\n            result(j) = list(i)\n        }\n        result.toList",
    "        val n = list.length\n        val result = new ListBuffer[Long]\n        for (i <- 0 until n) {\n            result += list((i + m) % n)\n        }\n        result.toList"
  ]
}