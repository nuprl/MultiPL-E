{
  "name": "mbpp_743_rotate_right",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    def rotateRight(list : List[Long], m : Long) : List[Long] = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_743_rotate_right.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(rotateRight((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (3l)).equals((List[Long](8l.toLong, 9l.toLong, 10l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))));\n    assert(rotateRight((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (2l)).equals((List[Long](9l.toLong, 10l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))));\n    assert(rotateRight((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (5l)).equals((List[Long](6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val n = list.length\n        val m1 = m % n\n        val m2 = n - m1\n        list.drop(m2) ++ list.take(m2)",
    "        val n = list.length\n        val result = new Array[Long](n)\n        for (i <- 0 until n) {\n            val j = (i + m) % n\n            result(j) = list(i)\n        }\n        result.toList",
    "        val n = list.length\n        val r = m % n\n        val a = list.takeRight(r.toInt)\n        val b = list.dropRight(r.toInt)\n        a ++ b",
    "        val n = list.length\n        val r = m % n\n        val result = new ListBuffer[Long]\n        for (i <- 0 until n) {\n            val j = (i + n - r) % n\n            result += list(j)\n        }\n        result.toList",
    "        val n = list.length\n        val result = new ListBuffer[Long]\n        for (i <- 0 until n) {\n            val j = (i + m) % n\n            result += list(j)\n        }\n        result.toList",
    "        val n = list.length\n        val result = new Array[Long](n)\n        for (i <- 0 until n) {\n            val j = (i + m) % n\n            result(j) = list(i)\n        }\n        result.toList",
    "        val n = list.length\n        val result = new Array[Long](n)\n        for (i <- 0 until n) {\n            val j = (i + m) % n\n            result(j) = list(i)\n        }\n        result.toList",
    "        val n = list.length\n        val r = m % n\n        val (a, b) = list.splitAt(n - r.toInt)\n        b ::: a",
    "        val n = list.length\n        val result = new Array[Long](n)\n        for (i <- 0 until n) {\n            result(i) = list((i + m) % n)\n        }\n        result.toList",
    "        val n = list.length\n        val result = new ListBuffer[Long]\n        for (i <- 0 until n) {\n            result += list((i + m) % n)\n        }\n        result.toList",
    "        val n = list.length\n        val result = new Array[Long](n)\n        for (i <- 0 until n) {\n            val j = (i + m) % n\n            result(j) = list(i)\n        }\n        result.toList",
    "        val n = list.length\n        val result = new Array[Long](n)\n        for (i <- 0 until n) {\n            result((i + m) % n) = list(i)\n        }\n        result.toList",
    "        val n = list.length\n        val result = new ListBuffer[Long]\n        for (i <- 0 until n) {\n            val j = (i + m) % n\n            result += list(j)\n        }\n        result.toList",
    "        val n = list.length\n        val result = new ListBuffer[Long]()\n        for (i <- 0 until n) {\n            result += list((i + m) % n)\n        }\n        result.toList",
    "        val n = list.length\n        val m1 = m % n\n        val (l1, l2) = list.splitAt(n - m1.toInt)\n        l2 ::: l1",
    "        val n = list.length\n        val result = new Array[Long](n)\n        for (i <- 0 until n) {\n            result(i) = list((i + m) % n)\n        }\n        result.toList",
    "        val n = list.length\n        val result = new ListBuffer[Long]\n        for (i <- 0 until n) {\n            result += list((i + m) % n)\n        }\n        result.toList",
    "        val n = list.length\n        val newList = new Array[Long](n)\n        for (i <- 0 until n) {\n            newList((i + m) % n) = list(i)\n        }\n        newList.toList",
    "        val n = list.length\n        val result = new Array[Long](n)\n        for (i <- 0 until n) {\n            val j = (i + m) % n\n            result(j) = list(i)\n        }\n        result.toList",
    "        val n = list.length\n        val result = new Array[Long](n)\n        for (i <- 0 until n) {\n            result((i + m) % n) = list(i)\n        }\n        result.toList"
  ]
}