{
  "name": "mbpp_758_unique_sublists",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_758_unique_sublists.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var dict = new HashMap[Any, Int]()\n        for (i <- list1.asInstanceOf[List[Any]]) {\n            if (dict.contains(i)) {\n                dict(i) += 1\n            } else {\n                dict(i) = 1\n            }\n        }\n        dict",
    "        var dict = Map[Any, Int]()\n        for (i <- list1.asInstanceOf[List[Any]]) {\n            if (dict.contains(i)) {\n                dict(i) += 1\n            } else {\n                dict(i) = 1\n            }\n        }\n        dict",
    "        var dict = Map[Any, Int]()\n        for (i <- list1.asInstanceOf[List[Any]]) {\n            if (dict.contains(i)) {\n                dict(i) += 1\n            } else {\n                dict(i) = 1\n            }\n        }\n        dict",
    "        // Write your code here\n        val list = list1.asInstanceOf[List[Any]]\n        val map = new HashMap[Any, Int]\n        for (i <- list) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        map",
    "        var list2 = list1.asInstanceOf[List[Any]]\n        var dict = Map[Any, Int]()\n        for (i <- list2) {\n            if (dict.contains(i)) {\n                dict(i) += 1\n            } else {\n                dict(i) = 1\n            }\n        }\n        return dict",
    "        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = list2.map(x => x.asInstanceOf[List[Any]].toSet)\n        var list4 = list3.map(x => (x, list3.count(y => y == x)))\n        return list4.toSet",
    "        var list2 = list1.asInstanceOf[List[Any]]\n        var dict = new HashMap[Any, Int]\n        for (i <- list2) {\n            if (dict.contains(i)) {\n                dict(i) += 1\n            } else {\n                dict(i) = 1\n            }\n        }\n        dict",
    "        var dict = Map[Any, Int]()\n        for (i <- 0 until list1.asInstanceOf[List[Any]].length) {\n            var tuple = list1.asInstanceOf[List[Any]].apply(i)\n            if (dict.contains(tuple)) {\n                dict(tuple) += 1\n            } else {\n                dict(tuple) = 1\n            }\n        }\n        dict",
    "        // Write your code here\n        val list = list1.asInstanceOf[List[Any]]\n        val map = new HashMap[Any, Int]\n        for (i <- 0 until list.length) {\n            if (map.contains(list(i))) {\n                map(list(i)) += 1\n            } else {\n                map(list(i)) = 1\n            }\n        }\n        map",
    "        list1 match {\n            case Nil => Nil\n            case (x : List[Any]) :: xs => {\n                val xs1 = uniqueSublists(xs).asInstanceOf[List[(List[Any], Int)]]\n                val xs2 = xs1.filter(x1 => x1._1 == x)\n                if (xs2.isEmpty) (x, 1) :: xs1\n                else (x, xs2.head._2 + 1) :: xs1.filter(x1 => x1._1 != x)\n            }\n            case x :: xs => uniqueSublists(xs)\n        }",
    "        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = list2.map(x => x.asInstanceOf[List[Any]].toSet)\n        var list4 = list3.toSet\n        var list5 = list4.map(x => (x, list3.count(y => y == x)))\n        list5",
    "        var dict = Map[Any, Int]()\n        for (i <- list1.asInstanceOf[List[Any]]) {\n            if (dict.contains(i)) dict(i) += 1\n            else dict(i) = 1\n        }\n        dict",
    "        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = ListBuffer[Any]()\n        var list4 = ListBuffer[Any]()\n        var list5 = ListBuffer[Any]()\n        var list6 = ListBuffer[Any]()\n        var list7 = ListBuffer[Any]()\n        var list8 = ListBuffer[Any]()\n        var list9 = ListBuffer[Any]()\n        var list10 = ListBuffer[Any]()\n        var list11 = ListBuffer[Any]()\n        var list12 = ListBuffer[Any]()\n        var list13 = ListBuffer[Any]()\n        var list14 = ListBuffer[Any]()\n        var list15 = ListBuffer[Any]()\n        var list16 = ListBuffer[Any]()\n        var list17 = ListBuffer[Any]()\n        var list18 = ListBuffer[Any]()\n        var list19 = ListBuffer[Any]()\n        var list20 = ListBuffer[Any]()\n        var list21 = ListBuffer[Any]()\n        var list22 = ListBuffer[Any]()\n        var list23 = ListBuffer[Any]()\n        var list24 = ListBuffer[Any]()\n        var list25 = ListBuffer[Any]()\n        var list26 = ListBuffer[Any]()\n        var list27 = ListBuffer[Any]()\n        var list28 = ListBuffer[Any]()\n        var list29 = ListBuffer[Any]()\n        var list30 = ListBuffer[Any]()\n        var list31 = ListBuffer[Any]()\n        var list32 = ListBuffer[Any]()\n        var list33 = ListBuffer[Any]()\n        var list34 = ListBuffer[Any]()\n        var list35 = ListBuffer[Any]()\n        var list36 = ListBuffer[Any]()\n        var list37 = ListBuffer[Any]()\n        var list38 = ListBuffer[Any]()\n        var list39 = ListBuffer[Any]()\n        var list40 = ListBuffer[Any]()\n        var list41 = ListBuffer[Any]()\n        var list42 = ListBuffer[Any]()\n        var list43 = ListBuffer[Any]()\n        var",
    "        var list2 = list1.asInstanceOf[List[Any]]\n        var map = Map[Any, Int]()\n        for (i <- 0 until list2.length) {\n            var tuple = list2(i).asInstanceOf[List[Any]].toSet\n            if (map.contains(tuple)) {\n                map(tuple) += 1\n            } else {\n                map(tuple) = 1\n            }\n        }\n        return map",
    "        var dict = new HashMap[Any, Int]()\n        for (i <- list1.asInstanceOf[List[Any]]) {\n            if (dict.contains(i)) {\n                dict(i) += 1\n            } else {\n                dict(i) = 1\n            }\n        }\n        dict",
    "        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = list2.map(x => x.asInstanceOf[List[Any]]).toSet\n        var list4 = list3.map(x => (x, list2.count(y => y == x)))\n        list4",
    "        val list2 = list1.asInstanceOf[List[Any]]\n        val list3 = list2.map(x => x.asInstanceOf[List[Any]]).toSet\n        val list4 = list3.map(x => (x, list2.count(y => y == x)))\n        list4",
    "        var list2 = list1.asInstanceOf[List[Any]]\n        var map = Map[Any, Int]()\n        for (i <- list2) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        return map",
    "        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = list2.map(x => x.asInstanceOf[List[Any]]).toSet\n        var list4 = list3.map(x => (x, list2.count(y => y == x)))\n        return list4",
    "        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = ListBuffer[Any]()\n        var list4 = ListBuffer[Any]()\n        var list5 = ListBuffer[Any]()\n        var list6 = ListBuffer[Any]()\n        var list7 = ListBuffer[Any]()\n        var list8 = ListBuffer[Any]()\n        var list9 = ListBuffer[Any]()\n        var list10 = ListBuffer[Any]()\n        var list11 = ListBuffer[Any]()\n        var list12 = ListBuffer[Any]()\n        var list13 = ListBuffer[Any]()\n        var list14 = ListBuffer[Any]()\n        var list15 = ListBuffer[Any]()\n        var list16 = ListBuffer[Any]()\n        var list17 = ListBuffer[Any]()\n        var list18 = ListBuffer[Any]()\n        var list19 = ListBuffer[Any]()\n        var list20 = ListBuffer[Any]()\n        var list21 = ListBuffer[Any]()\n        var list22 = ListBuffer[Any]()\n        var list23 = ListBuffer[Any]()\n        var list24 = ListBuffer[Any]()\n        var list25 = ListBuffer[Any]()\n        var list26 = ListBuffer[Any]()\n        var list27 = ListBuffer[Any]()\n        var list28 = ListBuffer[Any]()\n        var list29 = ListBuffer[Any]()\n        var list30 = ListBuffer[Any]()\n        var list31 = ListBuffer[Any]()\n        var list32 = ListBuffer[Any]()\n        var list33 = ListBuffer[Any]()\n        var list34 = ListBuffer[Any]()\n        var list35 = ListBuffer[Any]()\n        var list36 = ListBuffer[Any]()\n        var list37 = ListBuffer[Any]()\n        var list38 = ListBuffer[Any]()\n        var list39 = ListBuffer[Any]()\n        var list40 = ListBuffer[Any]()\n        var list41 = ListBuffer[Any]()\n        var list42 = ListBuffer[Any]()\n        var list43 = ListBuffer[Any]()\n        var"
  ]
}