{
  "name": "mbpp_758_unique_sublists",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_758_unique_sublists.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var dict = new HashMap[Any, Int]()\n        for (i <- list1.asInstanceOf[List[Any]]) {\n            if (dict.contains(i)) {\n                dict(i) += 1\n            } else {\n                dict(i) = 1\n            }\n        }\n        dict",
    "        var dict = Map[Any, Int]()\n        for (i <- list1.asInstanceOf[List[Any]]) {\n            if (dict.contains(i)) {\n                dict(i) += 1\n            } else {\n                dict(i) = 1\n            }\n        }\n        dict",
    "        var dict = Map[Any, Int]()\n        for (i <- list1.asInstanceOf[List[Any]]) {\n            if (dict.contains(i)) {\n                dict(i) += 1\n            } else {\n                dict(i) = 1\n            }\n        }\n        dict",
    "        // Write your code here\n        val list = list1.asInstanceOf[List[Any]]\n        val map = new HashMap[Any, Int]\n        for (i <- list) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        map",
    "        var list2 = list1.asInstanceOf[List[Any]]\n        var dict = Map[Any, Int]()\n        for (i <- list2) {\n            if (dict.contains(i)) {\n                dict(i) += 1\n            } else {\n                dict(i) = 1\n            }\n        }\n        return dict",
    "        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = list2.map(x => x.asInstanceOf[List[Any]].toSet)\n        var list4 = list3.map(x => (x, list3.count(y => y == x)))\n        return list4.toSet",
    "        var list2 = list1.asInstanceOf[List[Any]]\n        var dict = new HashMap[Any, Int]\n        for (i <- list2) {\n            if (dict.contains(i)) {\n                dict(i) += 1\n            } else {\n                dict(i) = 1\n            }\n        }\n        dict",
    "        var dict = Map[Any, Int]()\n        for (i <- 0 until list1.asInstanceOf[List[Any]].length) {\n            var tuple = list1.asInstanceOf[List[Any]].apply(i)\n            if (dict.contains(tuple)) {\n                dict(tuple) += 1\n            } else {\n                dict(tuple) = 1\n            }\n        }\n        dict",
    "        // Write your code here\n        val list = list1.asInstanceOf[List[Any]]\n        val map = new HashMap[Any, Int]\n        for (i <- 0 until list.length) {\n            if (map.contains(list(i))) {\n                map(list(i)) += 1\n            } else {\n                map(list(i)) = 1\n            }\n        }\n        map",
    "        list1 match {\n            case Nil => Nil\n            case (x : List[Any]) :: xs => {\n                val xs1 = uniqueSublists(xs).asInstanceOf[List[(List[Any], Int)]]\n                val xs2 = xs1.filter(x1 => x1._1 == x)\n                if (xs2.isEmpty) (x, 1) :: xs1\n                else (x, xs2.head._2 + 1) :: xs1.filter(x1 => x1._1 != x)\n            }\n            case x :: xs => uniqueSublists(xs)\n        }",
    "        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = list2.map(x => x.asInstanceOf[List[Any]].toSet)\n        var list4 = list3.toSet\n        var list5 = list4.map(x => (x, list3.count(y => y == x)))\n        list5",
    "        var dict = Map[Any, Int]()\n        for (i <- list1.asInstanceOf[List[Any]]) {\n            if (dict.contains(i)) dict(i) += 1\n            else dict(i) = 1\n        }\n        dict",
    "        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = ListBuffer[Any]()\n        var list4 = ListBuffer[Any]()\n        var list5 = ListBuffer[Any]()\n        var list6 = ListBuffer[Any]()\n        var list7 = ListBuffer[Any]()\n        var list8 = ListBuffer[Any]()\n        var list9 = ListBuffer[Any]()\n        var list10 = ListBuffer[Any]()\n        var list11 = ListBuffer[Any]()\n        var list12 = ListBuffer[Any]()\n        var list13 = ListBuffer[Any]()\n        var list14 = ListBuffer[Any]()\n        var list15 = ListBuffer[Any]()\n        var list16 = ListBuffer[Any]()\n        var list17 = ListBuffer[Any]()\n        var list18 = ListBuffer[Any]()\n        var list19 = ListBuffer[Any]()\n        var list20 = ListBuffer[Any]()\n        var list21 = ListBuffer[Any]()\n        var list22 = ListBuffer[Any]()\n        var list23 = ListBuffer[Any]()\n        var list24 = ListBuffer[Any]()\n        var list25 = ListBuffer[Any]()\n        var list26 = ListBuffer[Any]()\n        var list27 = ListBuffer[Any]()\n        var list28 = ListBuffer[Any]()\n        var list29 = ListBuffer[Any]()\n        var list30 = ListBuffer[Any]()\n        var list31 = ListBuffer[Any]()\n        var list32 = ListBuffer[Any]()\n        var list33 = ListBuffer[Any]()\n        var list34 = ListBuffer[Any]()\n        var list35 = ListBuffer[Any]()\n        var list36 = ListBuffer[Any]()\n        var list37 = ListBuffer[Any]()\n        var list38 = ListBuffer[Any]()\n        var list39 = ListBuffer[Any]()\n        var list40 = ListBuffer[Any]()\n        var list41 = ListBuffer[Any]()\n        var list42 = ListBuffer[Any]()\n        var list43 = ListBuffer[Any]()\n        var",
    "        var list2 = list1.asInstanceOf[List[Any]]\n        var map = Map[Any, Int]()\n        for (i <- 0 until list2.length) {\n            var tuple = list2(i).asInstanceOf[List[Any]].toSet\n            if (map.contains(tuple)) {\n                map(tuple) += 1\n            } else {\n                map(tuple) = 1\n            }\n        }\n        return map",
    "        var dict = new HashMap[Any, Int]()\n        for (i <- list1.asInstanceOf[List[Any]]) {\n            if (dict.contains(i)) {\n                dict(i) += 1\n            } else {\n                dict(i) = 1\n            }\n        }\n        dict",
    "        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = list2.map(x => x.asInstanceOf[List[Any]]).toSet\n        var list4 = list3.map(x => (x, list2.count(y => y == x)))\n        list4",
    "        val list2 = list1.asInstanceOf[List[Any]]\n        val list3 = list2.map(x => x.asInstanceOf[List[Any]]).toSet\n        val list4 = list3.map(x => (x, list2.count(y => y == x)))\n        list4",
    "        var list2 = list1.asInstanceOf[List[Any]]\n        var map = Map[Any, Int]()\n        for (i <- list2) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        return map",
    "        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = list2.map(x => x.asInstanceOf[List[Any]]).toSet\n        var list4 = list3.map(x => (x, list2.count(y => y == x)))\n        return list4",
    "        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = ListBuffer[Any]()\n        var list4 = ListBuffer[Any]()\n        var list5 = ListBuffer[Any]()\n        var list6 = ListBuffer[Any]()\n        var list7 = ListBuffer[Any]()\n        var list8 = ListBuffer[Any]()\n        var list9 = ListBuffer[Any]()\n        var list10 = ListBuffer[Any]()\n        var list11 = ListBuffer[Any]()\n        var list12 = ListBuffer[Any]()\n        var list13 = ListBuffer[Any]()\n        var list14 = ListBuffer[Any]()\n        var list15 = ListBuffer[Any]()\n        var list16 = ListBuffer[Any]()\n        var list17 = ListBuffer[Any]()\n        var list18 = ListBuffer[Any]()\n        var list19 = ListBuffer[Any]()\n        var list20 = ListBuffer[Any]()\n        var list21 = ListBuffer[Any]()\n        var list22 = ListBuffer[Any]()\n        var list23 = ListBuffer[Any]()\n        var list24 = ListBuffer[Any]()\n        var list25 = ListBuffer[Any]()\n        var list26 = ListBuffer[Any]()\n        var list27 = ListBuffer[Any]()\n        var list28 = ListBuffer[Any]()\n        var list29 = ListBuffer[Any]()\n        var list30 = ListBuffer[Any]()\n        var list31 = ListBuffer[Any]()\n        var list32 = ListBuffer[Any]()\n        var list33 = ListBuffer[Any]()\n        var list34 = ListBuffer[Any]()\n        var list35 = ListBuffer[Any]()\n        var list36 = ListBuffer[Any]()\n        var list37 = ListBuffer[Any]()\n        var list38 = ListBuffer[Any]()\n        var list39 = ListBuffer[Any]()\n        var list40 = ListBuffer[Any]()\n        var list41 = ListBuffer[Any]()\n        var list42 = ListBuffer[Any]()\n        var list43 = ListBuffer[Any]()\n        var",
    "        val list = list1.asInstanceOf[List[Any]]\n        val map = new HashMap[Any, Int]\n        for (i <- list) {\n            if (map.contains(i)) map(i) += 1\n            else map(i) = 1\n        }\n        map",
    "        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = list2.map(x => x.asInstanceOf[List[Any]])\n        var list4 = list3.map(x => x.toSet)\n        var list5 = list4.map(x => x.toList)\n        var list6 = list5.map(x => x.sorted)\n        var list7 = list6.map(x => x.toSet)\n        var list8 = list7.map(x => x.toList)\n        var list9 = list8.map(x => x.sorted)\n        var list10 = list9.map(x => x.toSet)\n        var list11 = list10.map(x => x.toList)\n        var list12 = list11.map(x => x.sorted)\n        var list13 = list12.map(x => x.toSet)\n        var list14 = list13.map(x => x.toList)\n        var list15 = list14.map(x => x.sorted)\n        var list16 = list15.map(x => x.toSet)\n        var list17 = list16.map(x => x.toList)\n        var list18 = list17.map(x => x.sorted)\n        var list19 = list18.map(x => x.toSet)\n        var list20 = list19.map(x => x.toList)\n        var list21 = list20.map(x => x.sorted)\n        var list22 = list21.map(x => x.toSet)\n        var list23 = list22.map(x => x.toList)\n        var list24 = list23.map(x => x.sorted)\n        var list25 = list24.map(x => x.toSet)\n        var list26 = list25.map(x => x.toList)\n        var list27 = list26.map(x => x.sorted)\n        var list28 = list27.map(x => x.toSet)\n        var list29 = list28.map(x => x.toList)\n        var",
    "        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = ListBuffer[Any]()\n        var list4 = ListBuffer[Any]()\n        var dict = Map[Any, Any]()\n        for (i <- 0 to list2.length - 1) {\n            if (list2(i).isInstanceOf[List[Any]]) {\n                list3 += list2(i)\n            }\n        }\n        for (i <- 0 to list3.length - 1) {\n            if (!list4.contains(list3(i))) {\n                list4 += list3(i)\n            }\n        }\n        for (i <- 0 to list4.length - 1) {\n            var count = 0\n            for (j <- 0 to list3.length - 1) {\n                if (list4(i) == list3(j)) {\n                    count += 1\n                }\n            }\n            dict += (list4(i) -> count)\n        }\n        dict",
    "        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = list2.map(x => x.asInstanceOf[List[Any]]).toSet\n        var list4 = list3.map(x => (x, list2.count(y => y == x)))\n        list4",
    "        var list2 = list1.asInstanceOf[List[Any]]\n        var dict = new HashMap[Any, Int]()\n        for (i <- 0 until list2.length) {\n            if (dict.contains(list2(i))) {\n                dict(list2(i)) += 1\n            } else {\n                dict(list2(i)) = 1\n            }\n        }\n        return dict",
    "        // Write your code here",
    "        var dictionary = Map[Any, Int]()\n        for (i <- 0 to list1.length - 1) {\n            if (dictionary.contains(list1(i))) {\n                dictionary(list1(i)) += 1\n            }\n            else {\n                dictionary(list1(i)) = 1\n            }\n        }\n        return dictionary",
    "        val list = list1.asInstanceOf[List[Any]]\n        var dictionary = new HashMap[Any, Int]\n        for (i <- 0 until list.length) {\n            if (list(i).isInstanceOf[List[Any]]) {\n                val tuple = list(i).asInstanceOf[List[Any]].toSet.toList.toString\n                if (dictionary.contains(tuple)) dictionary(tuple) += 1\n                else dictionary(tuple) = 1\n            }\n        }\n        dictionary",
    "        var dict = Map[Any, Int]()\n        for (i <- 0 until list1.asInstanceOf[List[Any]].length) {\n            var tuple = list1.asInstanceOf[List[Any]].slice(i, list1.asInstanceOf[List[Any]].length)\n            if (dict.contains(tuple)) dict(tuple) += 1\n            else dict += (tuple -> 1)\n        }\n        return dict",
    "        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = list2.map(x => x.asInstanceOf[List[Any]])\n        var list4 = list3.map(x => x.sorted)\n        var list5 = list4.map(x => x.toString)\n        var list6 = list5.groupBy(x => x)\n        var list7 = list6.map(x => (x._1.replace(\"List(\",\"\").replace(\")\",\"\").split(\",\").toList, x._2.length))\n        list7",
    "        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = new HashMap[Any, Int]\n        for (i <- list2) {\n            if (list3.contains(i)) {\n                list3(i) += 1\n            } else {\n                list3(i) = 1\n            }\n        }\n        return list3",
    "        val list2 = list1.asInstanceOf[List[Any]]\n        val list3 = list2.map(x => x.asInstanceOf[List[Any]]).toSet\n        val list4 = list3.map(x => (x, list2.count(y => y == x)))\n        list4",
    "        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = list2.map(x => x.asInstanceOf[List[Any]]).toSet\n        var list4 = list3.map(x => (x, list2.count(y => y == x)))\n        return list4",
    "        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = ListBuffer[Any]()\n        var dict = Map[Any, Int]()\n        for (i <- 0 until list2.length) {\n            if (list2(i).isInstanceOf[List[Any]]) {\n                list3 += list2(i)\n            }\n        }\n        for (i <- 0 until list3.length) {\n            var count = 0\n            for (j <- 0 until list3.length) {\n                if (list3(i) == list3(j)) {\n                    count += 1\n                }\n            }\n            dict += (list3(i) -> count)\n        }\n        dict",
    "        var list = list1.asInstanceOf[List[Any]]\n        var dict = new HashMap[Any, Int]\n        for (i <- 0 until list.length) {\n            var tuple = list(i).asInstanceOf[List[Any]].toSet.toList.sorted\n            if (dict.contains(tuple)) dict(tuple) += 1 else dict(tuple) = 1\n        }\n        dict",
    "        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = list2.map(x => x.asInstanceOf[List[Any]])\n        var list4 = list3.map(x => x.toSet)\n        var list5 = list4.map(x => x.toList)\n        var list6 = list5.map(x => x.sorted)\n        var list7 = list6.map(x => x.toString)\n        var list8 = list7.map(x => x.toList)\n        var list9 = list8.map(x => x.sorted)\n        var list10 = list9.map(x => x.toString)\n        var list11 = list10.map(x => x.toList)\n        var list12 = list11.map(x => x.sorted)\n        var list13 = list12.map(x => x.toString)\n        var list14 = list13.map(x => x.toList)\n        var list15 = list14.map(x => x.sorted)\n        var list16 = list15.map(x => x.toString)\n        var list17 = list16.map(x => x.toList)\n        var list18 = list17.map(x => x.sorted)\n        var list19 = list18.map(x => x.toString)\n        var list20 = list19.map(x => x.toList)\n        var list21 = list20.map(x => x.sorted)\n        var list22 = list21.map(x => x.toString)\n        var list23 = list22.map(x => x.toList)\n        var list24 = list23.map(x => x.sorted)\n        var list25 = list24.map(x => x.toString)\n        var list26 = list25.map(x => x.toList)\n        var list27 = list26.map(x => x.sorted)\n        var list28 = list27.map(x => x.toString)\n        var list29 = list28.map(x => x.toList)\n        var",
    "        val list2 = list1.asInstanceOf[List[Any]]\n        val list3 = list2.map(x => x.asInstanceOf[List[Any]].toSet)\n        val list4 = list3.map(x => (x, list3.count(y => x == y)))\n        val list5 = list4.distinct\n        list5",
    "        val list = list1.asInstanceOf[List[Any]]\n        val dict = new HashMap[Any, Int]\n        for (i <- list) {\n            val tuple = i.asInstanceOf[List[Any]].toSet\n            if (dict.contains(tuple)) dict(tuple) += 1 else dict(tuple) = 1\n        }\n        dict",
    "        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = list2.map(x => x.asInstanceOf[List[Any]])\n        var list4 = list3.map(x => x.toSet)\n        var list5 = list4.map(x => x.toList)\n        var list6 = list5.map(x => x.sorted)\n        var list7 = list6.map(x => x.toSet)\n        var list8 = list7.map(x => x.toList)\n        var list9 = list8.map(x => x.sorted)\n        var list10 = list9.map(x => x.toSet)\n        var list11 = list10.map(x => x.toList)\n        var list12 = list11.map(x => x.sorted)\n        var list13 = list12.map(x => x.toSet)\n        var list14 = list13.map(x => x.toList)\n        var list15 = list14.map(x => x.sorted)\n        var list16 = list15.map(x => x.toSet)\n        var list17 = list16.map(x => x.toList)\n        var list18 = list17.map(x => x.sorted)\n        var list19 = list18.map(x => x.toSet)\n        var list20 = list19.map(x => x.toList)\n        var list21 = list20.map(x => x.sorted)\n        var list22 = list21.map(x => x.toSet)\n        var list23 = list22.map(x => x.toList)\n        var list24 = list23.map(x => x.sorted)\n        var list25 = list24.map(x => x.toSet)\n        var list26 = list25.map(x => x.toList)\n        var list27 = list26.map(x => x.sorted)\n        var list28 = list27.map(x => x.toSet)\n        var list29 = list28.map(x => x.toList)\n        var",
    "        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = list2.map(x => x.asInstanceOf[List[Any]])\n        var list4 = list3.map(x => x.toSet)\n        var list5 = list4.map(x => x.toList)\n        var list6 = list5.map(x => x.sorted)\n        var list7 = list6.map(x => x.toString)\n        var list8 = list7.toSet\n        var list9 = list8.toList\n        var list10 = list9.map(x => x.toList)\n        var list11 = list10.map(x => x.map(y => y.toString))\n        var list12 = list11.map(x => x.map(y => y.toInt))\n        var list13 = list12.map(x => x.sorted)\n        var list14 = list13.map(x => x.toString)\n        var list15 = list14.map(x => x.toList)\n        var list16 = list15.map(x => x.map(y => y.toString))\n        var list17 = list16.map(x => x.map(y => y.toInt))\n        var list18 = list17.map(x => x.sorted)\n        var list19 = list18.map(x => x.toString)\n        var list20 = list19.map(x => x.toList)\n        var list21 = list20.map(x => x.map(y => y.toString))\n        var list22 = list21.map(x => x.map(y => y.toInt))\n        var list23 = list22.map(x => x.sorted)\n        var list24 = list23.map(x => x.toString)\n        var list25 = list24.map(x => x.toList)\n        var list26 = list25.map(x => x.map(y => y.toString))\n        var list27 = list26.map(x => x.map(y => y.toInt))\n        var list28",
    "        val list2 = list1.asInstanceOf[List[Any]]\n        val list3 = list2.map(x => x.asInstanceOf[List[Any]])\n        val list4 = list3.map(x => x.toSet)\n        val list5 = list4.map(x => x.toList)\n        val list6 = list5.map(x => x.sorted)\n        val list7 = list6.map(x => x.toSet)\n        val list8 = list7.map(x => x.toList)\n        val list9 = list8.map(x => x.toSet)\n        val list10 = list9.map(x => x.toList)\n        val list11 = list10.map(x => x.sorted)\n        val list12 = list11.map(x => x.toSet)\n        val list13 = list12.map(x => x.toList)\n        val list14 = list13.map(x => x.toSet)\n        val list15 = list14.map(x => x.toList)\n        val list16 = list15.map(x => x.sorted)\n        val list17 = list16.map(x => x.toSet)\n        val list18 = list17.map(x => x.toList)\n        val list19 = list18.map(x => x.toSet)\n        val list20 = list19.map(x => x.toList)\n        val list21 = list20.map(x => x.sorted)\n        val list22 = list21.map(x => x.toSet)\n        val list23 = list22.map(x => x.toList)\n        val list24 = list23.map(x => x.toSet)\n        val list25 = list24.map(x => x.toList)\n        val list26 = list25.map(x => x.sorted)\n        val list27 = list26.map(x => x.toSet)\n        val list28 = list27.map(x => x.toList)\n        val list29 = list28.map(x => x.toSet)\n        val",
    "        var result = Map[Any, Int]()\n        for (i <- 0 until list1.asInstanceOf[List[Any]].length) {\n            if (result.contains(list1.asInstanceOf[List[Any]].apply(i))) {\n                result.update(list1.asInstanceOf[List[Any]].apply(i), result.apply(list1.asInstanceOf[List[Any]].apply(i)) + 1)\n            } else {\n                result += (list1.asInstanceOf[List[Any]].apply(i) -> 1)\n            }\n        }\n        return result",
    "        var list2 = list1.asInstanceOf[List[Any]]\n        var map = Map[Any, Int]()\n        for (i <- 0 to list2.length - 1) {\n            if (map.contains(list2(i))) {\n                map(list2(i)) += 1\n            } else {\n                map(list2(i)) = 1\n            }\n        }\n        return map",
    "        var list2 : List[Any] = List()\n        var list3 : List[Any] = List()\n        var list4 : List[Any] = List()\n        var list5 : List[Any] = List()\n        var list6 : List[Any] = List()\n        var list7 : List[Any] = List()\n        var list8 : List[Any] = List()\n        var list9 : List[Any] = List()\n        var list10 : List[Any] = List()\n        var list11 : List[Any] = List()\n        var list12 : List[Any] = List()\n        var list13 : List[Any] = List()\n        var list14 : List[Any] = List()\n        var list15 : List[Any] = List()\n        var list16 : List[Any] = List()\n        var list17 : List[Any] = List()\n        var list18 : List[Any] = List()\n        var list19 : List[Any] = List()\n        var list20 : List[Any] = List()\n        var list21 : List[Any] = List()\n        var list22 : List[Any] = List()\n        var list23 : List[Any] = List()\n        var list24 : List[Any] = List()\n        var list25 : List[Any] = List()\n        var list26 : List[Any] = List()\n        var list27 : List[Any] = List()\n        var list28 : List[Any] = List()\n        var list29 : List[Any] = List()\n        var list30 : List[Any] = List()\n        var list31 : List[Any] = List()\n        var list32 : List[Any] = List()\n        var list33 : List[Any] = List()\n        var list34 : List[Any] = List()\n        var list35 : List[Any] = List()\n        var list36 : List[Any] = List()\n        var list37 : List[Any] = List()\n        var list38 : List[Any] = List()\n        var list39 : List[Any] = List()\n        var list40 : List[Any] = List()\n        var list41",
    "        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = ListBuffer[Any]()\n        var list4 = ListBuffer[Any]()\n        var list5 = ListBuffer[Any]()\n        var list6 = ListBuffer[Any]()\n        var list7 = ListBuffer[Any]()\n        var list8 = ListBuffer[Any]()\n        var list9 = ListBuffer[Any]()\n        var list10 = ListBuffer[Any]()\n        var list11 = ListBuffer[Any]()\n        var list12 = ListBuffer[Any]()\n        var list13 = ListBuffer[Any]()\n        var list14 = ListBuffer[Any]()\n        var list15 = ListBuffer[Any]()\n        var list16 = ListBuffer[Any]()\n        var list17 = ListBuffer[Any]()\n        var list18 = ListBuffer[Any]()\n        var list19 = ListBuffer[Any]()\n        var list20 = ListBuffer[Any]()\n        var list21 = ListBuffer[Any]()\n        var list22 = ListBuffer[Any]()\n        var list23 = ListBuffer[Any]()\n        var list24 = ListBuffer[Any]()\n        var list25 = ListBuffer[Any]()\n        var list26 = ListBuffer[Any]()\n        var list27 = ListBuffer[Any]()\n        var list28 = ListBuffer[Any]()\n        var list29 = ListBuffer[Any]()\n        var list30 = ListBuffer[Any]()\n        var list31 = ListBuffer[Any]()\n        var list32 = ListBuffer[Any]()\n        var list33 = ListBuffer[Any]()\n        var list34 = ListBuffer[Any]()\n        var list35 = ListBuffer[Any]()\n        var list36 = ListBuffer[Any]()\n        var list37 = ListBuffer[Any]()\n        var list38 = ListBuffer[Any]()\n        var list39 = ListBuffer[Any]()\n        var list40 = ListBuffer[Any]()\n        var list41 = ListBuffer[Any]()\n        var list42 = ListBuffer[Any]()\n        var list43 = ListBuffer[Any]()\n        var",
    "        var dictionary = new HashMap[Any, Int]\n        for (i <- 0 to list1.length - 1) {\n            if (dictionary.contains(list1(i))) {\n                dictionary(list1(i)) += 1\n            }\n            else {\n                dictionary(list1(i)) = 1\n            }\n        }\n        return dictionary",
    "        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = list2.map(x => x.asInstanceOf[List[Any]]).toSet\n        var list4 = list3.map(x => (x, list2.count(y => y == x)))\n        list4",
    "        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = list2.map(x => x.asInstanceOf[List[Any]]).toSet\n        var list4 = list3.map(x => (x, list2.count(y => y == x)))\n        list4",
    "        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = list2.map(x => x.asInstanceOf[List[Any]])\n        var list4 = list3.map(x => x.toSet)\n        var list5 = list4.map(x => x.toList)\n        var list6 = list5.map(x => x.sorted)\n        var list7 = list6.map(x => x.toString)\n        var list8 = list7.map(x => x.toList)\n        var list9 = list8.map(x => x.sorted)\n        var list10 = list9.map(x => x.toString)\n        var list11 = list10.map(x => x.toList)\n        var list12 = list11.map(x => x.sorted)\n        var list13 = list12.map(x => x.toString)\n        var list14 = list13.map(x => x.toList)\n        var list15 = list14.map(x => x.sorted)\n        var list16 = list15.map(x => x.toString)\n        var list17 = list16.map(x => x.toList)\n        var list18 = list17.map(x => x.sorted)\n        var list19 = list18.map(x => x.toString)\n        var list20 = list19.map(x => x.toList)\n        var list21 = list20.map(x => x.sorted)\n        var list22 = list21.map(x => x.toString)\n        var list23 = list22.map(x => x.toList)\n        var list24 = list23.map(x => x.sorted)\n        var list25 = list24.map(x => x.toString)\n        var list26 = list25.map(x => x.toList)\n        var list27 = list26.map(x => x.sorted)\n        var list28 = list27.map(x => x.toString)\n        var list29 = list28.map(x => x.toList)\n        var",
    "        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = ListBuffer[Any]()\n        var list4 = ListBuffer[Any]()\n        var list5 = ListBuffer[Any]()\n        var list6 = ListBuffer[Any]()\n        var list7 = ListBuffer[Any]()\n        var list8 = ListBuffer[Any]()\n        var list9 = ListBuffer[Any]()\n        var list10 = ListBuffer[Any]()\n        var list11 = ListBuffer[Any]()\n        var list12 = ListBuffer[Any]()\n        var list13 = ListBuffer[Any]()\n        var list14 = ListBuffer[Any]()\n        var list15 = ListBuffer[Any]()\n        var list16 = ListBuffer[Any]()\n        var list17 = ListBuffer[Any]()\n        var list18 = ListBuffer[Any]()\n        var list19 = ListBuffer[Any]()\n        var list20 = ListBuffer[Any]()\n        var list21 = ListBuffer[Any]()\n        var list22 = ListBuffer[Any]()\n        var list23 = ListBuffer[Any]()\n        var list24 = ListBuffer[Any]()\n        var list25 = ListBuffer[Any]()\n        var list26 = ListBuffer[Any]()\n        var list27 = ListBuffer[Any]()\n        var list28 = ListBuffer[Any]()\n        var list29 = ListBuffer[Any]()\n        var list30 = ListBuffer[Any]()\n        var list31 = ListBuffer[Any]()\n        var list32 = ListBuffer[Any]()\n        var list33 = ListBuffer[Any]()\n        var list34 = ListBuffer[Any]()\n        var list35 = ListBuffer[Any]()\n        var list36 = ListBuffer[Any]()\n        var list37 = ListBuffer[Any]()\n        var list38 = ListBuffer[Any]()\n        var list39 = ListBuffer[Any]()\n        var list40 = ListBuffer[Any]()\n        var list41 = ListBuffer[Any]()\n        var list42 = ListBuffer[Any]()\n        var list43 = ListBuffer[Any]()\n        var",
    "        val list = list1.asInstanceOf[List[Any]]\n        val map = new HashMap[Any, Int]\n        for (i <- list) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        map",
    "        val list2 = list1.asInstanceOf[List[Any]]\n        val dict = new HashMap[Any, Int]\n        for (i <- list2) {\n            if (dict.contains(i)) dict(i) += 1\n            else dict(i) = 1\n        }\n        dict",
    "        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = list2.map(x => x.asInstanceOf[List[Any]])\n        var list4 = list3.map(x => x.sorted)\n        var list5 = list4.map(x => x.toSet)\n        var list6 = list5.map(x => x.toList)\n        var list7 = list6.map(x => x.toSet)\n        var list8 = list7.toList\n        var list9 = list8.map(x => x.toList)\n        var list10 = list9.map(x => x.sorted)\n        var list11 = list10.map(x => x.toSet)\n        var list12 = list11.map(x => x.toList)\n        var list13 = list12.map(x => x.sorted)\n        var list14 = list13.map(x => x.toSet)\n        var list15 = list14.map(x => x.toList)\n        var list16 = list15.map(x => x.sorted)\n        var list17 = list16.map(x => x.toSet)\n        var list18 = list17.map(x => x.toList)\n        var list19 = list18.map(x => x.sorted)\n        var list20 = list19.map(x => x.toSet)\n        var list21 = list20.map(x => x.toList)\n        var list22 = list21.map(x => x.sorted)\n        var list23 = list22.map(x => x.toSet)\n        var list24 = list23.map(x => x.toList)\n        var list25 = list24.map(x => x.sorted)\n        var list26 = list25.map(x => x.toSet)\n        var list27 = list26.map(x => x.toList)\n        var list28 = list27.map(x => x.sorted)\n        var list29 = list28.map(x => x.toSet)\n        var list30 = list29.map",
    "        var dict = Map[Any, Int]()\n        for (i <- list1.asInstanceOf[List[Any]]) {\n            if (dict.contains(i)) {\n                dict(i) += 1\n            }\n            else {\n                dict(i) = 1\n            }\n        }\n        dict",
    "        // Write your code here\n        return null",
    "        val list = list1.asInstanceOf[List[Any]]\n        val map = Map[Any, Int]()\n        for (i <- list) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        map",
    "        val list2 = list1.asInstanceOf[List[Any]]\n        val list3 = list2.map(x => x.asInstanceOf[List[Any]]).toSet\n        val list4 = list3.map(x => (x, list2.count(y => y == x)))\n        list4",
    "        var list = list1.asInstanceOf[List[Any]]\n        var dict = new HashMap[Any, Int]\n        for (i <- 0 until list.length) {\n            if (dict.contains(list(i))) {\n                dict(list(i)) += 1\n            } else {\n                dict += (list(i) -> 1)\n            }\n        }\n        return dict",
    "        val list = list1.asInstanceOf[List[Any]]\n        val result = new HashMap[Any, Int]\n        for (i <- list) {\n            if (result.contains(i)) result(i) += 1\n            else result(i) = 1\n        }\n        result",
    "        var dict = Map[Any, Int]()\n        for (i <- list1.asInstanceOf[List[Any]]) {\n            if (dict.contains(i)) {\n                dict(i) += 1\n            } else {\n                dict(i) = 1\n            }\n        }\n        dict",
    "        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = ListBuffer[Any]()\n        var list4 = ListBuffer[Any]()\n        var list5 = ListBuffer[Any]()\n        var list6 = ListBuffer[Any]()\n        var list7 = ListBuffer[Any]()\n        var list8 = ListBuffer[Any]()\n        var list9 = ListBuffer[Any]()\n        var list10 = ListBuffer[Any]()\n        var list11 = ListBuffer[Any]()\n        var list12 = ListBuffer[Any]()\n        var list13 = ListBuffer[Any]()\n        var list14 = ListBuffer[Any]()\n        var list15 = ListBuffer[Any]()\n        var list16 = ListBuffer[Any]()\n        var list17 = ListBuffer[Any]()\n        var list18 = ListBuffer[Any]()\n        var list19 = ListBuffer[Any]()\n        var list20 = ListBuffer[Any]()\n        var list21 = ListBuffer[Any]()\n        var list22 = ListBuffer[Any]()\n        var list23 = ListBuffer[Any]()\n        var list24 = ListBuffer[Any]()\n        var list25 = ListBuffer[Any]()\n        var list26 = ListBuffer[Any]()\n        var list27 = ListBuffer[Any]()\n        var list28 = ListBuffer[Any]()\n        var list29 = ListBuffer[Any]()\n        var list30 = ListBuffer[Any]()\n        var list31 = ListBuffer[Any]()\n        var list32 = ListBuffer[Any]()\n        var list33 = ListBuffer[Any]()\n        var list34 = ListBuffer[Any]()\n        var list35 = ListBuffer[Any]()\n        var list36 = ListBuffer[Any]()\n        var list37 = ListBuffer[Any]()\n        var list38 = ListBuffer[Any]()\n        var list39 = ListBuffer[Any]()\n        var list40 = ListBuffer[Any]()\n        var list41 = ListBuffer[Any]()\n        var list42 = ListBuffer[Any]()\n        var list43 = ListBuffer[Any]()\n        var",
    "        var dict = Map[Any, Int]()\n        for (i <- list1.asInstanceOf[List[Any]]) {\n            if (dict.contains(i)) {\n                dict(i) += 1\n            } else {\n                dict += (i -> 1)\n            }\n        }\n        return dict",
    "        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = ListBuffer[Any]()\n        var list4 = ListBuffer[Any]()\n        var list5 = ListBuffer[Any]()\n        var list6 = ListBuffer[Any]()\n        var list7 = ListBuffer[Any]()\n        var list8 = ListBuffer[Any]()\n        var list9 = ListBuffer[Any]()\n        var list10 = ListBuffer[Any]()\n        var list11 = ListBuffer[Any]()\n        var list12 = ListBuffer[Any]()\n        var list13 = ListBuffer[Any]()\n        var list14 = ListBuffer[Any]()\n        var list15 = ListBuffer[Any]()\n        var list16 = ListBuffer[Any]()\n        var list17 = ListBuffer[Any]()\n        var list18 = ListBuffer[Any]()\n        var list19 = ListBuffer[Any]()\n        var list20 = ListBuffer[Any]()\n        var list21 = ListBuffer[Any]()\n        var list22 = ListBuffer[Any]()\n        var list23 = ListBuffer[Any]()\n        var list24 = ListBuffer[Any]()\n        var list25 = ListBuffer[Any]()\n        var list26 = ListBuffer[Any]()\n        var list27 = ListBuffer[Any]()\n        var list28 = ListBuffer[Any]()\n        var list29 = ListBuffer[Any]()\n        var list30 = ListBuffer[Any]()\n        var list31 = ListBuffer[Any]()\n        var list32 = ListBuffer[Any]()\n        var list33 = ListBuffer[Any]()\n        var list34 = ListBuffer[Any]()\n        var list35 = ListBuffer[Any]()\n        var list36 = ListBuffer[Any]()\n        var list37 = ListBuffer[Any]()\n        var list38 = ListBuffer[Any]()\n        var list39 = ListBuffer[Any]()\n        var list40 = ListBuffer[Any]()\n        var list41 = ListBuffer[Any]()\n        var list42 = ListBuffer[Any]()\n        var list43 = ListBuffer[Any]()\n        var",
    "        var list2 : List[Any] = List()\n        var list3 : List[Any] = List()\n        var list4 : List[Any] = List()\n        var list5 : List[Any] = List()\n        var list6 : List[Any] = List()\n        var list7 : List[Any] = List()\n        var list8 : List[Any] = List()\n        var list9 : List[Any] = List()\n        var list10 : List[Any] = List()\n        var list11 : List[Any] = List()\n        var list12 : List[Any] = List()\n        var list13 : List[Any] = List()\n        var list14 : List[Any] = List()\n        var list15 : List[Any] = List()\n        var list16 : List[Any] = List()\n        var list17 : List[Any] = List()\n        var list18 : List[Any] = List()\n        var list19 : List[Any] = List()\n        var list20 : List[Any] = List()\n        var list21 : List[Any] = List()\n        var list22 : List[Any] = List()\n        var list23 : List[Any] = List()\n        var list24 : List[Any] = List()\n        var list25 : List[Any] = List()\n        var list26 : List[Any] = List()\n        var list27 : List[Any] = List()\n        var list28 : List[Any] = List()\n        var list29 : List[Any] = List()\n        var list30 : List[Any] = List()\n        var list31 : List[Any] = List()\n        var list32 : List[Any] = List()\n        var list33 : List[Any] = List()\n        var list34 : List[Any] = List()\n        var list35 : List[Any] = List()\n        var list36 : List[Any] = List()\n        var list37 : List[Any] = List()\n        var list38 : List[Any] = List()\n        var list39 : List[Any] = List()\n        var list40 : List[Any] = List()\n        var list41",
    "        val list2 = list1.asInstanceOf[List[Any]]\n        val list3 = list2.map(x => x.asInstanceOf[List[Any]]).toSet\n        val list4 = list3.map(x => (x, list2.count(y => y == x)))\n        list4",
    "        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = list2.map(x => x.asInstanceOf[List[Any]]).toSet.toList\n        var list4 = list3.map(x => (x, list2.count(y => y == x)))\n        list4",
    "        var dict = new HashMap[Any, Int]()\n        for (i <- 0 until list1.length) {\n            if (dict.contains(list1(i))) {\n                dict(list1(i)) = dict(list1(i)) + 1\n            } else {\n                dict(list1(i)) = 1\n            }\n        }\n        return dict",
    "        val list = list1.asInstanceOf[List[Any]]\n        val map = new HashMap[Any, Int]()\n        for (i <- list) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        map",
    "        val list = list1.asInstanceOf[List[Any]]\n        val map = new HashMap[Any, Int]\n        for (i <- list) {\n            if (map.contains(i)) map(i) += 1\n            else map(i) = 1\n        }\n        map",
    "        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = list2.map(x => x.asInstanceOf[List[Any]])\n        var list4 = list3.map(x => x.toSet)\n        var list5 = list4.map(x => x.toList)\n        var list6 = list5.map(x => x.sorted)\n        var list7 = list6.map(x => x.toSet)\n        var list8 = list7.map(x => x.toList)\n        var list9 = list8.map(x => x.sorted)\n        var list10 = list9.map(x => x.toSet)\n        var list11 = list10.map(x => x.toList)\n        var list12 = list11.map(x => x.sorted)\n        var list13 = list12.map(x => x.toSet)\n        var list14 = list13.map(x => x.toList)\n        var list15 = list14.map(x => x.sorted)\n        var list16 = list15.map(x => x.toSet)\n        var list17 = list16.map(x => x.toList)\n        var list18 = list17.map(x => x.sorted)\n        var list19 = list18.map(x => x.toSet)\n        var list20 = list19.map(x => x.toList)\n        var list21 = list20.map(x => x.sorted)\n        var list22 = list21.map(x => x.toSet)\n        var list23 = list22.map(x => x.toList)\n        var list24 = list23.map(x => x.sorted)\n        var list25 = list24.map(x => x.toSet)\n        var list26 = list25.map(x => x.toList)\n        var list27 = list26.map(x => x.sorted)\n        var list28 = list27.map(x => x.toSet)\n        var list29 = list28.map(x => x.toList)\n        var",
    "        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = list2.map(x => x.asInstanceOf[List[Any]]).toSet\n        var list4 = list3.map(x => (x, list2.count(y => y == x))).toList\n        return list4",
    "        var list2 = new ListBuffer[Any]()\n        var list3 = new ListBuffer[Any]()\n        var list4 = new ListBuffer[Any]()\n        var list5 = new ListBuffer[Any]()\n        var list6 = new ListBuffer[Any]()\n        var list7 = new ListBuffer[Any]()\n        var list8 = new ListBuffer[Any]()\n        var list9 = new ListBuffer[Any]()\n        var list10 = new ListBuffer[Any]()\n        var list11 = new ListBuffer[Any]()\n        var list12 = new ListBuffer[Any]()\n        var list13 = new ListBuffer[Any]()\n        var list14 = new ListBuffer[Any]()\n        var list15 = new ListBuffer[Any]()\n        var list16 = new ListBuffer[Any]()\n        var list17 = new ListBuffer[Any]()\n        var list18 = new ListBuffer[Any]()\n        var list19 = new ListBuffer[Any]()\n        var list20 = new ListBuffer[Any]()\n        var list21 = new ListBuffer[Any]()\n        var list22 = new ListBuffer[Any]()\n        var list23 = new ListBuffer[Any]()\n        var list24 = new ListBuffer[Any]()\n        var list25 = new ListBuffer[Any]()\n        var list26 = new ListBuffer[Any]()\n        var list27 = new ListBuffer[Any]()\n        var list28 = new ListBuffer[Any]()\n        var list29 = new ListBuffer[Any]()\n        var list30 = new ListBuffer[Any]()\n        var list31 = new ListBuffer[Any]()\n        var list32 = new ListBuffer[Any]()\n        var list33 = new ListBuffer[Any]()\n        var list34 = new ListBuffer[Any]()\n        var list35 = new ListBuffer[Any]()\n        var list36 = new ListBuffer[Any]()\n        var list37 = new ListBuffer[Any]()\n        var list38 = new ListBuffer[Any]()\n        var list39 = new ListBuffer[Any]()\n        var list40 = new ListBuffer[Any]()\n        var list41",
    "        var list = list1.asInstanceOf[List[Any]]\n        var result = new HashMap[Any, Int]()\n        for (i <- 0 until list.length) {\n            var tuple = list(i).asInstanceOf[List[Any]].toSet.toList.sorted\n            if (result.contains(tuple)) result(tuple) += 1\n            else result(tuple) = 1\n        }\n        result",
    "        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = list2.map(x => x.asInstanceOf[List[Any]].toSet)\n        var list4 = list3.map(x => x.toList.sorted)\n        var list5 = list4.map(x => (x, list4.count(y => y == x)))\n        var list6 = list5.distinct\n        return list6",
    "        var list2 = list1.asInstanceOf[List[Any]]\n        var map = Map[Any, Int]()\n        for (i <- 0 until list2.length) {\n            var tuple = list2(i).asInstanceOf[List[Any]].toSet.toList.toString\n            if (map.contains(tuple)) {\n                map(tuple) += 1\n            } else {\n                map += (tuple -> 1)\n            }\n        }\n        return map",
    "        var list2 = list1.asInstanceOf[List[Any]]\n        var dict = new HashMap[Any, Int]\n        for (i <- list2) {\n            if (dict.contains(i)) {\n                dict(i) += 1\n            } else {\n                dict(i) = 1\n            }\n        }\n        dict",
    "        var list2 = list1.asInstanceOf[List[Any]]\n        var map = Map[Any, Int]()\n        for (i <- list2) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        return map",
    "        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = List[Any]()\n        var list4 = List[Any]()\n        var list5 = List[Any]()\n        var list6 = List[Any]()\n        var list7 = List[Any]()\n        var list8 = List[Any]()\n        var list9 = List[Any]()\n        var list10 = List[Any]()\n        var list11 = List[Any]()\n        var list12 = List[Any]()\n        var list13 = List[Any]()\n        var list14 = List[Any]()\n        var list15 = List[Any]()\n        var list16 = List[Any]()\n        var list17 = List[Any]()\n        var list18 = List[Any]()\n        var list19 = List[Any]()\n        var list20 = List[Any]()\n        var list21 = List[Any]()\n        var list22 = List[Any]()\n        var list23 = List[Any]()\n        var list24 = List[Any]()\n        var list25 = List[Any]()\n        var list26 = List[Any]()\n        var list27 = List[Any]()\n        var list28 = List[Any]()\n        var list29 = List[Any]()\n        var list30 = List[Any]()\n        var list31 = List[Any]()\n        var list32 = List[Any]()\n        var list33 = List[Any]()\n        var list34 = List[Any]()\n        var list35 = List[Any]()\n        var list36 = List[Any]()\n        var list37 = List[Any]()\n        var list38 = List[Any]()\n        var list39 = List[Any]()\n        var list40 = List[Any]()\n        var list41 = List[Any]()\n        var list42 = List[Any]()\n        var list43 = List[Any]()\n        var list44 = List[Any]()\n        var list45 = List[Any]()\n        var list46 = List[Any]()\n        var list47 = List[Any]()",
    "        var list1_ = list1.asInstanceOf[List[Any]]\n        var list1_unique = list1_.distinct\n        var list1_unique_count = list1_unique.map(x => (x, list1_.count(y => y == x)))\n        return list1_unique_count",
    "        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = list2.map(x => x.asInstanceOf[List[Any]])\n        var list4 = list3.map(x => x.toSet)\n        var list5 = list4.map(x => x.toList)\n        var list6 = list5.map(x => x.sorted)\n        var list7 = list6.map(x => x.toSet)\n        var list8 = list7.toSet\n        var list9 = list8.toList\n        var list10 = list9.map(x => x.toList)\n        var list11 = list10.map(x => x.sorted)\n        var list12 = list11.map(x => x.toList)\n        var list13 = list12.map(x => x.toSet)\n        var list14 = list13.map(x => x.toList)\n        var list15 = list14.map(x => x.sorted)\n        var list16 = list15.map(x => x.toList)\n        var list17 = list16.map(x => x.toSet)\n        var list18 = list17.map(x => x.toList)\n        var list19 = list18.map(x => x.sorted)\n        var list20 = list19.map(x => x.toList)\n        var list21 = list20.map(x => x.toSet)\n        var list22 = list21.map(x => x.toList)\n        var list23 = list22.map(x => x.sorted)\n        var list24 = list23.map(x => x.toList)\n        var list25 = list24.map(x => x.toSet)\n        var list26 = list25.map(x => x.toList)\n        var list27 = list26.map(x => x.sorted)\n        var list28 = list27.map(x => x.toList)\n        var list29 = list28.map(x => x.toSet)\n        var list30 = list29.map(x => x.toList",
    "        var dictionary = new HashMap[Any, Int]()\n        for (x <- list1.asInstanceOf[List[Any]]) {\n            if (dictionary.contains(x)) {\n                dictionary(x) += 1\n            } else {\n                dictionary(x) = 1\n            }\n        }\n        dictionary",
    "        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = list2.map(x => x.asInstanceOf[List[Any]]).toSet.toList\n        var list4 = list3.map(x => (x, list2.count(y => y == x)))\n        list4",
    "        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = list2.map(x => x.asInstanceOf[List[Any]]).toSet\n        var list4 = list3.map(x => (x, list2.count(y => y == x)))\n        list4",
    "        var list = list1.asInstanceOf[List[Any]]\n        var map = Map[Any, Int]()\n        for (i <- 0 until list.length) {\n            if (map.contains(list(i))) {\n                map(list(i)) += 1\n            } else {\n                map(list(i)) = 1\n            }\n        }\n        return map",
    "        var map = Map[Any, Int]()\n        for (i <- list1.asInstanceOf[List[Any]]) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        return map",
    "        // Write your code here\n        var result = Map[Any, Int]()\n        for (i <- list1.asInstanceOf[List[Any]]) {\n            if (result.contains(i)) {\n                result(i) += 1\n            } else {\n                result(i) = 1\n            }\n        }\n        result",
    "        val list = list1.asInstanceOf[List[Any]]\n        val map = new HashMap[Any, Int]\n        for (i <- list) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        map",
    "        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = list2.map(x => x.asInstanceOf[List[Any]]).toSet\n        var list4 = list3.map(x => (x, list2.count(y => y == x)))\n        list4",
    "        val list2 = list1.asInstanceOf[List[Any]]\n        val list3 = list2.map(x => x.asInstanceOf[List[Any]]).toSet\n        val list4 = list3.map(x => (x, list2.count(y => y == x)))\n        list4",
    "        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = list2.map(x => x.asInstanceOf[List[Any]])\n        var list4 = list3.map(x => x.toSet)\n        var list5 = list4.map(x => x.toList)\n        var list6 = list5.map(x => x.sorted)\n        var list7 = list6.map(x => x.toSet)\n        var list8 = list7.map(x => x.toList)\n        var list9 = list8.map(x => x.toString)\n        var list10 = list9.map(x => x.toSet)\n        var list11 = list10.map(x => x.toList)\n        var list12 = list11.map(x => x.sorted)\n        var list13 = list12.map(x => x.toSet)\n        var list14 = list13.map(x => x.toList)\n        var list15 = list14.map(x => x.toString)\n        var list16 = list15.map(x => x.toSet)\n        var list17 = list16.map(x => x.toList)\n        var list18 = list17.map(x => x.sorted)\n        var list19 = list18.map(x => x.toSet)\n        var list20 = list19.map(x => x.toList)\n        var list21 = list20.map(x => x.toString)\n        var list22 = list21.map(x => x.toSet)\n        var list23 = list22.map(x => x.toList)\n        var list24 = list23.map(x => x.sorted)\n        var list25 = list24.map(x => x.toSet)\n        var list26 = list25.map(x => x.toList)\n        var list27 = list26.map(x => x.toString)\n        var list28 = list27.map(x => x.toSet)\n        var list29 = list28.map(x => x.toList)\n        var",
    "        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = list2.map(x => x.asInstanceOf[List[Any]].sorted)\n        var list4 = list3.map(x => x.toString)\n        var list5 = list4.groupBy(x => x).map(x => (x._1, x._2.length))\n        return list5",
    "        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = list2.map(x => x.asInstanceOf[List[Any]])\n        var list4 = list3.map(x => x.toSet)\n        var list5 = list4.map(x => x.toList)\n        var list6 = list5.map(x => x.sorted)\n        var list7 = list6.map(x => x.toSet)\n        var list8 = list7.map(x => x.toList)\n        var list9 = list8.map(x => x.sorted)\n        var list10 = list9.map(x => x.toSet)\n        var list11 = list10.map(x => x.toList)\n        var list12 = list11.map(x => x.sorted)\n        var list13 = list12.map(x => x.toSet)\n        var list14 = list13.map(x => x.toList)\n        var list15 = list14.map(x => x.sorted)\n        var list16 = list15.map(x => x.toSet)\n        var list17 = list16.map(x => x.toList)\n        var list18 = list17.map(x => x.sorted)\n        var list19 = list18.map(x => x.toSet)\n        var list20 = list19.map(x => x.toList)\n        var list21 = list20.map(x => x.sorted)\n        var list22 = list21.map(x => x.toSet)\n        var list23 = list22.map(x => x.toList)\n        var list24 = list23.map(x => x.sorted)\n        var list25 = list24.map(x => x.toSet)\n        var list26 = list25.map(x => x.toList)\n        var list27 = list26.map(x => x.sorted)\n        var list28 = list27.map(x => x.toSet)\n        var list29 = list28.map(x => x.toList)\n        var",
    "        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = list2.map(x => x.asInstanceOf[List[Any]])\n        var list4 = list3.map(x => x.toSet)\n        var list5 = list4.map(x => x.toList)\n        var list6 = list5.map(x => x.sorted)\n        var list7 = list6.map(x => x.toString)\n        var list8 = list7.map(x => x.toList)\n        var list9 = list8.map(x => x.sorted)\n        var list10 = list9.map(x => x.toString)\n        var list11 = list10.map(x => x.toList)\n        var list12 = list11.map(x => x.sorted)\n        var list13 = list12.map(x => x.toString)\n        var list14 = list13.map(x => x.toList)\n        var list15 = list14.map(x => x.sorted)\n        var list16 = list15.map(x => x.toString)\n        var list17 = list16.map(x => x.toList)\n        var list18 = list17.map(x => x.sorted)\n        var list19 = list18.map(x => x.toString)\n        var list20 = list19.map(x => x.toList)\n        var list21 = list20.map(x => x.sorted)\n        var list22 = list21.map(x => x.toString)\n        var list23 = list22.map(x => x.toList)\n        var list24 = list23.map(x => x.sorted)\n        var list25 = list24.map(x => x.toString)\n        var list26 = list25.map(x => x.toList)\n        var list27 = list26.map(x => x.sorted)\n        var list28 = list27.map(x => x.toString)\n        var list29 = list28.map(x => x.toList)\n        var",
    "        var list2 = list1.asInstanceOf[List[Any]]\n        var dict = new HashMap[Any, Int]\n        for (i <- 0 until list2.length) {\n            var tuple = list2(i).asInstanceOf[List[Any]].toList\n            if (dict.contains(tuple)) dict(tuple) += 1\n            else dict(tuple) = 1\n        }\n        dict",
    "        var list2 = list1.asInstanceOf[List[Any]]\n        var map = Map[Any, Int]()\n        for (i <- 0 until list2.length) {\n            if (map.contains(list2(i))) {\n                map(list2(i)) += 1\n            } else {\n                map(list2(i)) = 1\n            }\n        }\n        map",
    "        var dictionary = Map[Any, Int]()\n        for (i <- 0 to list1.length - 1) {\n            if (dictionary.contains(list1(i))) {\n                dictionary(list1(i)) += 1\n            } else {\n                dictionary += (list1(i) -> 1)\n            }\n        }\n        return dictionary",
    "        var dict = Map[Any, Int]()\n        for (i <- 0 until list1.asInstanceOf[List[Any]].length) {\n            var tuple = list1.asInstanceOf[List[Any]].apply(i).asInstanceOf[List[Any]].toTuple\n            if (dict.contains(tuple)) dict(tuple) += 1\n            else dict(tuple) = 1\n        }\n        dict",
    "        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = list2.map(x => x.asInstanceOf[List[Any]])\n        var list4 = list3.map(x => x.toSet)\n        var list5 = list4.map(x => x.toList)\n        var list6 = list5.map(x => x.sorted)\n        var list7 = list6.map(x => x.toString)\n        var list8 = list7.map(x => x.toList)\n        var list9 = list8.map(x => x.sorted)\n        var list10 = list9.map(x => x.toString)\n        var list11 = list10.map(x => x.toList)\n        var list12 = list11.map(x => x.sorted)\n        var list13 = list12.map(x => x.toString)\n        var list14 = list13.map(x => x.toList)\n        var list15 = list14.map(x => x.sorted)\n        var list16 = list15.map(x => x.toString)\n        var list17 = list16.map(x => x.toList)\n        var list18 = list17.map(x => x.sorted)\n        var list19 = list18.map(x => x.toString)\n        var list20 = list19.map(x => x.toList)\n        var list21 = list20.map(x => x.sorted)\n        var list22 = list21.map(x => x.toString)\n        var list23 = list22.map(x => x.toList)\n        var list24 = list23.map(x => x.sorted)\n        var list25 = list24.map(x => x.toString)\n        var list26 = list25.map(x => x.toList)\n        var list27 = list26.map(x => x.sorted)\n        var list28 = list27.map(x => x.toString)\n        var list29 = list28.map(x => x.toList)\n        var",
    "        // Write your code here\n        val list = list1.asInstanceOf[List[Any]]\n        val map = new HashMap[Any, Int]()\n        for (i <- list) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        map",
    "        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = list2.map(x => x.asInstanceOf[List[Any]]).toSet\n        var list4 = list3.map(x => (x, list2.count(y => y == x)))\n        return list4",
    "        var dict = new HashMap[Any, Int]()\n        for (i <- 0 to list1.asInstanceOf[List[Any]].length - 1) {\n            if (dict.contains(list1.asInstanceOf[List[Any]].apply(i))) {\n                dict.update(list1.asInstanceOf[List[Any]].apply(i), dict.apply(list1.asInstanceOf[List[Any]].apply(i)) + 1)\n            } else {\n                dict.put(list1.asInstanceOf[List[Any]].apply(i), 1)\n            }\n        }\n        dict",
    "        var dict = Map[Any, Int]()\n        for (i <- 0 until list1.length) {\n            if (dict.contains(list1(i))) {\n                dict(list1(i)) += 1\n            } else {\n                dict += (list1(i) -> 1)\n            }\n        }\n        dict",
    "        val list = list1.asInstanceOf[List[Any]]\n        val dic = new HashMap[Any, Int]\n        for (i <- list) {\n            if (dic.contains(i)) {\n                dic(i) += 1\n            } else {\n                dic(i) = 1\n            }\n        }\n        return dic",
    "        val list = list1.asInstanceOf[List[Any]]\n        val map = new HashMap[Any, Int]\n        for (i <- list) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map += (i -> 1)\n            }\n        }\n        map",
    "        var list2 = list1.asInstanceOf[List[Any]]\n        var map = Map[Any, Int]()\n        for (i <- 0 until list2.length) {\n            if (map.contains(list2(i))) {\n                map(list2(i)) += 1\n            } else {\n                map(list2(i)) = 1\n            }\n        }\n        return map",
    "        var dict = new HashMap[Any, Int]\n        for (i <- list1.asInstanceOf[List[Any]]) {\n            if (dict.contains(i)) {\n                dict(i) += 1\n            } else {\n                dict(i) = 1\n            }\n        }\n        dict",
    "        var list2 = list1.asInstanceOf[List[Any]]\n        var dict = new HashMap[Any, Int]\n        for (i <- list2) {\n            if (dict.contains(i)) {\n                dict(i) += 1\n            } else {\n                dict(i) = 1\n            }\n        }\n        return dict",
    "        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = ListBuffer[Any]()\n        var list4 = ListBuffer[Any]()\n        var list5 = ListBuffer[Any]()\n        var list6 = ListBuffer[Any]()\n        var list7 = ListBuffer[Any]()\n        var list8 = ListBuffer[Any]()\n        var list9 = ListBuffer[Any]()\n        var list10 = ListBuffer[Any]()\n        var list11 = ListBuffer[Any]()\n        var list12 = ListBuffer[Any]()\n        var list13 = ListBuffer[Any]()\n        var list14 = ListBuffer[Any]()\n        var list15 = ListBuffer[Any]()\n        var list16 = ListBuffer[Any]()\n        var list17 = ListBuffer[Any]()\n        var list18 = ListBuffer[Any]()\n        var list19 = ListBuffer[Any]()\n        var list20 = ListBuffer[Any]()\n        var list21 = ListBuffer[Any]()\n        var list22 = ListBuffer[Any]()\n        var list23 = ListBuffer[Any]()\n        var list24 = ListBuffer[Any]()\n        var list25 = ListBuffer[Any]()\n        var list26 = ListBuffer[Any]()\n        var list27 = ListBuffer[Any]()\n        var list28 = ListBuffer[Any]()\n        var list29 = ListBuffer[Any]()\n        var list30 = ListBuffer[Any]()\n        var list31 = ListBuffer[Any]()\n        var list32 = ListBuffer[Any]()\n        var list33 = ListBuffer[Any]()\n        var list34 = ListBuffer[Any]()\n        var list35 = ListBuffer[Any]()\n        var list36 = ListBuffer[Any]()\n        var list37 = ListBuffer[Any]()\n        var list38 = ListBuffer[Any]()\n        var list39 = ListBuffer[Any]()\n        var list40 = ListBuffer[Any]()\n        var list41 = ListBuffer[Any]()\n        var list42 = ListBuffer[Any]()\n        var list43 = ListBuffer[Any]()\n        var",
    "        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = List[Any]()\n        var list4 = List[Any]()\n        var list5 = List[Any]()\n        var list6 = List[Any]()\n        var list7 = List[Any]()\n        var list8 = List[Any]()\n        var list9 = List[Any]()\n        var list10 = List[Any]()\n        var list11 = List[Any]()\n        var list12 = List[Any]()\n        var list13 = List[Any]()\n        var list14 = List[Any]()\n        var list15 = List[Any]()\n        var list16 = List[Any]()\n        var list17 = List[Any]()\n        var list18 = List[Any]()\n        var list19 = List[Any]()\n        var list20 = List[Any]()\n        var list21 = List[Any]()\n        var list22 = List[Any]()\n        var list23 = List[Any]()\n        var list24 = List[Any]()\n        var list25 = List[Any]()\n        var list26 = List[Any]()\n        var list27 = List[Any]()\n        var list28 = List[Any]()\n        var list29 = List[Any]()\n        var list30 = List[Any]()\n        var list31 = List[Any]()\n        var list32 = List[Any]()\n        var list33 = List[Any]()\n        var list34 = List[Any]()\n        var list35 = List[Any]()\n        var list36 = List[Any]()\n        var list37 = List[Any]()\n        var list38 = List[Any]()\n        var list39 = List[Any]()\n        var list40 = List[Any]()\n        var list41 = List[Any]()\n        var list42 = List[Any]()\n        var list43 = List[Any]()\n        var list44 = List[Any]()\n        var list45 = List[Any]()\n        var list46 = List[Any]()\n        var list47 = List[Any]()",
    "        val list2 = list1.asInstanceOf[List[Any]]\n        val list3 = list2.map(x => x.asInstanceOf[List[Any]])\n        val list4 = list3.map(x => x.toSet)\n        val list5 = list4.map(x => x.toList)\n        val list6 = list5.map(x => x.sorted)\n        val list7 = list6.map(x => x.toSet)\n        val list8 = list7.map(x => x.toList)\n        val list9 = list8.map(x => x.toString)\n        val list10 = list9.map(x => x.toList)\n        val list11 = list10.map(x => x.sorted)\n        val list12 = list11.map(x => x.toSet)\n        val list13 = list12.map(x => x.toList)\n        val list14 = list13.map(x => x.toString)\n        val list15 = list14.map(x => x.toList)\n        val list16 = list15.map(x => x.sorted)\n        val list17 = list16.map(x => x.toSet)\n        val list18 = list17.map(x => x.toList)\n        val list19 = list18.map(x => x.toString)\n        val list20 = list19.map(x => x.toList)\n        val list21 = list20.map(x => x.sorted)\n        val list22 = list21.map(x => x.toSet)\n        val list23 = list22.map(x => x.toList)\n        val list24 = list23.map(x => x.toString)\n        val list25 = list24.map(x => x.toList)\n        val list26 = list25.map(x => x.sorted)\n        val list27 = list26.map(x => x.toSet)\n        val list28 = list27.map(x => x.toList)\n        val list29 = list28.map(x => x.toString)\n        val",
    "        val list2 = list1.asInstanceOf[List[Any]]\n        val list3 = list2.map(x => x.asInstanceOf[List[Any]])\n        val list4 = list3.map(x => x.toSet)\n        val list5 = list4.map(x => x.toList)\n        val list6 = list5.map(x => x.sorted)\n        val list7 = list6.map(x => x.toSet)\n        val list8 = list7.map(x => x.toList)\n        val list9 = list8.map(x => x.sorted)\n        val list10 = list9.map(x => x.toSet)\n        val list11 = list10.map(x => x.toList)\n        val list12 = list11.map(x => x.sorted)\n        val list13 = list12.map(x => x.toSet)\n        val list14 = list13.map(x => x.toList)\n        val list15 = list14.map(x => x.sorted)\n        val list16 = list15.map(x => x.toSet)\n        val list17 = list16.map(x => x.toList)\n        val list18 = list17.map(x => x.sorted)\n        val list19 = list18.map(x => x.toSet)\n        val list20 = list19.map(x => x.toList)\n        val list21 = list20.map(x => x.sorted)\n        val list22 = list21.map(x => x.toSet)\n        val list23 = list22.map(x => x.toList)\n        val list24 = list23.map(x => x.sorted)\n        val list25 = list24.map(x => x.toSet)\n        val list26 = list25.map(x => x.toList)\n        val list27 = list26.map(x => x.sorted)\n        val list28 = list27.map(x => x.toSet)\n        val list29 = list28.map(x => x.toList)\n        val",
    "        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = list2.map(x => x.asInstanceOf[List[Any]])\n        var list4 = list3.map(x => x.sortWith(_ < _))\n        var list5 = list4.map(x => x.toSet)\n        var list6 = list5.map(x => x.toList)\n        var list7 = list6.map(x => x.toString)\n        var list8 = list7.map(x => x.toList)\n        var list9 = list8.map(x => x.sortWith(_ < _))\n        var list10 = list9.map(x => x.toString)\n        var list11 = list10.map(x => x.toList)\n        var list12 = list11.map(x => x.toSet)\n        var list13 = list12.map(x => x.toList)\n        var list14 = list13.map(x => x.toString)\n        var list15 = list14.map(x => x.toList)\n        var list16 = list15.map(x => x.sortWith(_ < _))\n        var list17 = list16.map(x => x.toString)\n        var list18 = list17.map(x => x.toList)\n        var list19 = list18.map(x => x.toSet)\n        var list20 = list19.map(x => x.toList)\n        var list21 = list20.map(x => x.toString)\n        var list22 = list21.map(x => x.toList)\n        var list23 = list22.map(x => x.sortWith(_ < _))\n        var list24 = list23.map(x => x.toString)\n        var list25 = list24.map(x => x.toList)\n        var list26 = list25.map(x => x.toSet)\n        var list27 = list26.map(x => x.toList)\n        var list28 = list27.map(x => x.toString)\n        var list29 = list28.",
    "        val list = list1.asInstanceOf[List[Any]]\n        val map = new HashMap[Any, Int]()\n        for (item <- list) {\n            if (map.contains(item)) {\n                map(item) += 1\n            } else {\n                map(item) = 1\n            }\n        }\n        map",
    "        var dict = Map[Any, Int]()\n        for (i <- list1.asInstanceOf[List[Any]]) {\n            if (dict.contains(i)) {\n                dict(i) += 1\n            } else {\n                dict += (i -> 1)\n            }\n        }\n        dict",
    "        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = ListBuffer[Any]()\n        for (i <- list2) {\n            if (list3.contains(i)) {\n                var index = list3.indexOf(i)\n                var value = list3(index).asInstanceOf[(Any, Int)]\n                list3(index) = (value._1, value._2 + 1)\n            } else {\n                list3 += (i, 1)\n            }\n        }\n        list3.toList",
    "        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = list2.map(x => x.asInstanceOf[List[Any]]).toSet\n        var list4 = list3.map(x => (x, list2.count(y => y == x)))\n        list4",
    "        val list = list1.asInstanceOf[List[Any]]\n        val map = new HashMap[Any, Int]\n        for (i <- list) {\n            if (map.contains(i)) map(i) += 1\n            else map(i) = 1\n        }\n        map",
    "        var dict = Map[Any, Int]()\n        for (i <- 0 until list1.asInstanceOf[List[Any]].length) {\n            if (dict.contains(list1.asInstanceOf[List[Any]].apply(i))) {\n                dict(list1.asInstanceOf[List[Any]].apply(i)) += 1\n            } else {\n                dict += (list1.asInstanceOf[List[Any]].apply(i) -> 1)\n            }\n        }\n        return dict",
    "        var list2 = list1.asInstanceOf[List[Any]]\n        var dict = Map[Any, Int]()\n        for (i <- 0 until list2.length) {\n            if (dict.contains(list2(i))) {\n                dict(list2(i)) += 1\n            } else {\n                dict(list2(i)) = 1\n            }\n        }\n        return dict",
    "        var list = list1.asInstanceOf[List[Any]]\n        var dict = new HashMap[Any, Int]\n        for (i <- 0 until list.length) {\n            if (dict.contains(list(i))) {\n                dict(list(i)) += 1\n            } else {\n                dict(list(i)) = 1\n            }\n        }\n        return dict",
    "        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = list2.map(x => x.asInstanceOf[List[Any]])\n        var list4 = list3.map(x => x.sorted)\n        var list5 = list4.map(x => x.toString)\n        var list6 = list5.distinct\n        var list7 = list6.map(x => x.toList)\n        var list8 = list7.map(x => x.tail)\n        var list9 = list8.map(x => x.init)\n        var list10 = list9.map(x => x.map(y => y.toInt - 48))\n        var list11 = list10.map(x => x.map(y => y.toString))\n        var list12 = list11.map(x => x.map(y => y.toInt))\n        var list13 = list12.map(x => x.toString)\n        var list14 = list13.map(x => x.toList)\n        var list15 = list14.map(x => x.tail)\n        var list16 = list15.map(x => x.init)\n        var list17 = list16.map(x => x.map(y => y.toInt - 48))\n        var list18 = list17.map(x => x.map(y => y.toString))\n        var list19 = list18.map(x => x.map(y => y.toInt))\n        var list20 = list19.map(x => x.toString)\n        var list21 = list20.map(x => x.toList)\n        var list22 = list21.map(x => x.tail)\n        var list23 = list22.map(x => x.init)\n        var list24 = list23.map(x => x.map(y => y.toInt - 48))\n        var list25 = list24.map(x => x.map(y => y.toString))\n        var list26 = list25.map(x => x.map(y => y.toInt))\n        var list27 = list26.map",
    "        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = list2.map(x => x.asInstanceOf[List[Any]]).toSet\n        var list4 = list3.map(x => (x, list2.count(y => y == x)))\n        list4",
    "        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = list2.map(x => x.asInstanceOf[List[Any]]).toSet\n        var list4 = list3.map(x => (x, list2.count(y => y == x)))\n        list4",
    "        val list1_ = list1.asInstanceOf[List[Any]]\n        val list1_uniq = list1_.distinct\n        val list1_uniq_tuples = list1_uniq.map(x => (x, list1_.count(y => y == x)))\n        list1_uniq_tuples",
    "        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = list2.map(x => x.asInstanceOf[List[Any]].toSet)\n        var list4 = list3.map(x => (x, list3.count(y => y == x)))\n        var list5 = list4.toSet\n        return list5",
    "        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = list2.map(x => x.asInstanceOf[List[Any]])\n        var list4 = list3.map(x => x.toSet)\n        var list5 = list4.map(x => x.toList)\n        var list6 = list5.map(x => x.sorted)\n        var list7 = list6.map(x => x.toSet)\n        var list8 = list7.map(x => x.toList)\n        var list9 = list8.map(x => x.sorted)\n        var list10 = list9.map(x => x.toSet)\n        var list11 = list10.map(x => x.toList)\n        var list12 = list11.map(x => x.sorted)\n        var list13 = list12.map(x => x.toSet)\n        var list14 = list13.map(x => x.toList)\n        var list15 = list14.map(x => x.sorted)\n        var list16 = list15.map(x => x.toSet)\n        var list17 = list16.map(x => x.toList)\n        var list18 = list17.map(x => x.sorted)\n        var list19 = list18.map(x => x.toSet)\n        var list20 = list19.map(x => x.toList)\n        var list21 = list20.map(x => x.sorted)\n        var list22 = list21.map(x => x.toSet)\n        var list23 = list22.map(x => x.toList)\n        var list24 = list23.map(x => x.sorted)\n        var list25 = list24.map(x => x.toSet)\n        var list26 = list25.map(x => x.toList)\n        var list27 = list26.map(x => x.sorted)\n        var list28 = list27.map(x => x.toSet)\n        var list29 = list28.map(x => x.toList)\n        var",
    "        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = list2.map(x => x.asInstanceOf[List[Any]]).toSet\n        var list4 = list3.map(x => (x, list2.count(y => y == x)))\n        return list4",
    "        var list = list1.asInstanceOf[List[Any]]\n        var dict = new HashMap[Any, Int]\n        for (i <- 0 until list.length) {\n            var tuple = list(i).asInstanceOf[List[Any]].toSet.toList.sorted\n            if (dict.contains(tuple)) dict(tuple) += 1\n            else dict(tuple) = 1\n        }\n        return dict",
    "        var result = new HashMap[Any, Int]\n        for (i <- list1.asInstanceOf[List[Any]]) {\n            if (result.contains(i)) {\n                result(i) += 1\n            } else {\n                result(i) = 1\n            }\n        }\n        result",
    "        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = list2.map(x => x.asInstanceOf[List[Any]])\n        var list4 = list3.map(x => x.toSet)\n        var list5 = list4.map(x => x.toList)\n        var list6 = list5.map(x => x.sorted)\n        var list7 = list6.map(x => x.toString)\n        var list8 = list7.map(x => x.toList)\n        var list9 = list8.map(x => x.sorted)\n        var list10 = list9.map(x => x.toString)\n        var list11 = list10.toSet\n        var list12 = list11.toList\n        var list13 = list12.map(x => x.toList)\n        var list14 = list13.map(x => x.sorted)\n        var list15 = list14.map(x => x.toString)\n        var list16 = list15.map(x => x.toList)\n        var list17 = list16.map(x => x.sorted)\n        var list18 = list17.map(x => x.toString)\n        var list19 = list18.map(x => x.toList)\n        var list20 = list19.map(x => x.sorted)\n        var list21 = list20.map(x => x.toString)\n        var list22 = list21.map(x => x.toList)\n        var list23 = list22.map(x => x.sorted)\n        var list24 = list23.map(x => x.toString)\n        var list25 = list24.map(x => x.toList)\n        var list26 = list25.map(x => x.sorted)\n        var list27 = list26.map(x => x.toString)\n        var list28 = list27.map(x => x.toList)\n        var list29 = list28.map(x => x.sorted)\n        var list30 = list29.map(x => x.toString",
    "        val list = list1.asInstanceOf[List[Any]]\n        val map = Map[Any, Int]()\n        for (i <- list) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        map",
    "        val list = list1.asInstanceOf[List[Any]]\n        val map = Map[Any, Int]()\n        for (i <- list) {\n            if (map.contains(i)) map(i) += 1\n            else map += (i -> 1)\n        }\n        map",
    "        val list2 = list1.asInstanceOf[List[Any]]\n        val list3 = list2.map(x => x.asInstanceOf[List[Any]])\n        val list4 = list3.map(x => x.toSet)\n        val list5 = list4.map(x => x.toList)\n        val list6 = list5.map(x => x.sorted)\n        val list7 = list6.map(x => x.toSet)\n        val list8 = list7.map(x => x.toList)\n        val list9 = list8.map(x => x.toSet)\n        val list10 = list9.map(x => x.toList)\n        val list11 = list10.map(x => x.sorted)\n        val list12 = list11.map(x => x.toSet)\n        val list13 = list12.map(x => x.toList)\n        val list14 = list13.map(x => x.toSet)\n        val list15 = list14.map(x => x.toList)\n        val list16 = list15.map(x => x.sorted)\n        val list17 = list16.map(x => x.toSet)\n        val list18 = list17.map(x => x.toList)\n        val list19 = list18.map(x => x.toSet)\n        val list20 = list19.map(x => x.toList)\n        val list21 = list20.map(x => x.sorted)\n        val list22 = list21.map(x => x.toSet)\n        val list23 = list22.map(x => x.toList)\n        val list24 = list23.map(x => x.toSet)\n        val list25 = list24.map(x => x.toList)\n        val list26 = list25.map(x => x.sorted)\n        val list27 = list26.map(x => x.toSet)\n        val list28 = list27.map(x => x.toList)\n        val list29 = list28.map(x => x.toSet)\n        val",
    "        // Write your code here\n        val list = list1.asInstanceOf[List[Any]]\n        val map = new HashMap[Any, Int]\n        for (i <- list) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        map",
    "        var list = list1.asInstanceOf[List[Any]]\n        var dict = new HashMap[Any, Int]\n        for (i <- 0 until list.length) {\n            if (dict.contains(list(i))) {\n                dict(list(i)) += 1\n            } else {\n                dict(list(i)) = 1\n            }\n        }\n        dict",
    "        val list2 = list1.asInstanceOf[List[Any]]\n        val list3 = list2.map(x => x.asInstanceOf[List[Any]])\n        val list4 = list3.map(x => x.sortWith(_ < _))\n        val list5 = list4.map(x => x.toSet)\n        val list6 = list5.map(x => x.toList)\n        val list7 = list6.map(x => x.toString)\n        val list8 = list7.map(x => (x, list7.count(_ == x)))\n        val list9 = list8.distinct\n        val list10 = list9.map(x => (x._1.replace(\"List(\", \"\").replace(\")\", \"\"), x._2))\n        val list11 = list10.map(x => (x._1.split(\",\").toList.map(y => y.toInt), x._2))\n        val list12 = list11.toMap\n        return list12",
    "        var dict = Map[Any, Int]()\n        for (x <- list1.asInstanceOf[List[Any]]) {\n            if (dict.contains(x)) dict(x) += 1\n            else dict += (x -> 1)\n        }\n        dict",
    "        var dict = Map[Any, Int]()\n        for (i <- list1.asInstanceOf[List[Any]]) {\n            if (dict.contains(i)) {\n                dict(i) += 1\n            } else {\n                dict(i) = 1\n            }\n        }\n        dict",
    "        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = ListBuffer[Any]()\n        var list4 = ListBuffer[Any]()\n        var list5 = ListBuffer[Any]()\n        var list6 = ListBuffer[Any]()\n        var list7 = ListBuffer[Any]()\n        var list8 = ListBuffer[Any]()\n        var list9 = ListBuffer[Any]()\n        var list10 = ListBuffer[Any]()\n        var list11 = ListBuffer[Any]()\n        var list12 = ListBuffer[Any]()\n        var list13 = ListBuffer[Any]()\n        var list14 = ListBuffer[Any]()\n        var list15 = ListBuffer[Any]()\n        var list16 = ListBuffer[Any]()\n        var list17 = ListBuffer[Any]()\n        var list18 = ListBuffer[Any]()\n        var list19 = ListBuffer[Any]()\n        var list20 = ListBuffer[Any]()\n        var list21 = ListBuffer[Any]()\n        var list22 = ListBuffer[Any]()\n        var list23 = ListBuffer[Any]()\n        var list24 = ListBuffer[Any]()\n        var list25 = ListBuffer[Any]()\n        var list26 = ListBuffer[Any]()\n        var list27 = ListBuffer[Any]()\n        var list28 = ListBuffer[Any]()\n        var list29 = ListBuffer[Any]()\n        var list30 = ListBuffer[Any]()\n        var list31 = ListBuffer[Any]()\n        var list32 = ListBuffer[Any]()\n        var list33 = ListBuffer[Any]()\n        var list34 = ListBuffer[Any]()\n        var list35 = ListBuffer[Any]()\n        var list36 = ListBuffer[Any]()\n        var list37 = ListBuffer[Any]()\n        var list38 = ListBuffer[Any]()\n        var list39 = ListBuffer[Any]()\n        var list40 = ListBuffer[Any]()\n        var list41 = ListBuffer[Any]()\n        var list42 = ListBuffer[Any]()\n        var list43 = ListBuffer[Any]()\n        var",
    "        var list2 = list1.asInstanceOf[List[Any]]\n        var dictionary = Map[Any, Int]()\n        for (i <- 0 until list2.length) {\n            if (list2(i).isInstanceOf[List[Any]]) {\n                var tuple = list2(i).asInstanceOf[List[Any]].toSet\n                if (dictionary.contains(tuple)) dictionary(tuple) += 1\n                else dictionary(tuple) = 1\n            }\n        }\n        return dictionary",
    "        var list2 = list1.asInstanceOf[List[Any]]\n        var map = new HashMap[Any, Int]()\n        for (i <- list2) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        map",
    "        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = ListBuffer[Any]()\n        var list4 = ListBuffer[Any]()\n        var list5 = ListBuffer[Any]()\n        var list6 = ListBuffer[Any]()\n        var list7 = ListBuffer[Any]()\n        var list8 = ListBuffer[Any]()\n        var list9 = ListBuffer[Any]()\n        var list10 = ListBuffer[Any]()\n        var list11 = ListBuffer[Any]()\n        var list12 = ListBuffer[Any]()\n        var list13 = ListBuffer[Any]()\n        var list14 = ListBuffer[Any]()\n        var list15 = ListBuffer[Any]()\n        var list16 = ListBuffer[Any]()\n        var list17 = ListBuffer[Any]()\n        var list18 = ListBuffer[Any]()\n        var list19 = ListBuffer[Any]()\n        var list20 = ListBuffer[Any]()\n        var list21 = ListBuffer[Any]()\n        var list22 = ListBuffer[Any]()\n        var list23 = ListBuffer[Any]()\n        var list24 = ListBuffer[Any]()\n        var list25 = ListBuffer[Any]()\n        var list26 = ListBuffer[Any]()\n        var list27 = ListBuffer[Any]()\n        var list28 = ListBuffer[Any]()\n        var list29 = ListBuffer[Any]()\n        var list30 = ListBuffer[Any]()\n        var list31 = ListBuffer[Any]()\n        var list32 = ListBuffer[Any]()\n        var list33 = ListBuffer[Any]()\n        var list34 = ListBuffer[Any]()\n        var list35 = ListBuffer[Any]()\n        var list36 = ListBuffer[Any]()\n        var list37 = ListBuffer[Any]()\n        var list38 = ListBuffer[Any]()\n        var list39 = ListBuffer[Any]()\n        var list40 = ListBuffer[Any]()\n        var list41 = ListBuffer[Any]()\n        var list42 = ListBuffer[Any]()\n        var list43 = ListBuffer[Any]()\n        var",
    "        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = list2.map(x => x.asInstanceOf[List[Any]]).toSet\n        var list4 = list3.map(x => (x, list2.count(y => y == x)))\n        list4",
    "        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = list2.map(x => x.asInstanceOf[List[Any]])\n        var list4 = list3.map(x => x.toSet)\n        var list5 = list4.map(x => x.toList)\n        var list6 = list5.map(x => x.sorted)\n        var list7 = list6.map(x => x.toString)\n        var list8 = list7.map(x => x.replace(\"List(\", \"(\"))\n        var list9 = list8.map(x => x.replace(\")\", \"\"))\n        var list10 = list9.map(x => x.replace(\" \", \"\"))\n        var list11 = list10.map(x => x.replace(\",\", \" \"))\n        var list12 = list11.map(x => x.replace(\"(\", \"(\"))\n        var list13 = list12.map(x => x.replace(\")\", \")\"))\n        var list14 = list13.map(x => x.replace(\" \", \",\"))\n        var list15 = list14.map(x => x.replace(\"(\", \"(\"))\n        var list16 = list15.map(x => x.replace(\")\", \")\"))\n        var list17 = list16.map(x => x.replace(\" \", \",\"))\n        var list18 = list17.map(x => x.replace(\"(\", \"(\"))\n        var list19 = list18.map(x => x.replace(\")\", \")\"))\n        var list20 = list19.map(x => x.replace(\" \", \",\"))\n        var list21 = list20.map(x => x.replace(\"(\", \"(\"))\n        var list22 = list21.map(x => x.replace(\")\", \")\"))\n        var list23 = list22.map(x => x.replace(\" \", \",\"))\n        var list24 = list23.map(x => x.replace(\"(\", \"(\"))\n        var list25 = list24.map(x => x.replace(\")\", \")\"))\n        var list26 = list25.",
    "        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = list2.map(x => x.asInstanceOf[List[Any]])\n        var list4 = list3.map(x => x.toSet)\n        var list5 = list4.map(x => x.toList)\n        var list6 = list5.map(x => x.sorted)\n        var list7 = list6.map(x => x.toSet)\n        var list8 = list7.map(x => x.toList)\n        var list9 = list8.map(x => x.sorted)\n        var list10 = list9.map(x => x.toSet)\n        var list11 = list10.map(x => x.toList)\n        var list12 = list11.map(x => x.sorted)\n        var list13 = list12.map(x => x.toSet)\n        var list14 = list13.map(x => x.toList)\n        var list15 = list14.map(x => x.sorted)\n        var list16 = list15.map(x => x.toSet)\n        var list17 = list16.map(x => x.toList)\n        var list18 = list17.map(x => x.sorted)\n        var list19 = list18.map(x => x.toSet)\n        var list20 = list19.map(x => x.toList)\n        var list21 = list20.map(x => x.sorted)\n        var list22 = list21.map(x => x.toSet)\n        var list23 = list22.map(x => x.toList)\n        var list24 = list23.map(x => x.sorted)\n        var list25 = list24.map(x => x.toSet)\n        var list26 = list25.map(x => x.toList)\n        var list27 = list26.map(x => x.sorted)\n        var list28 = list27.map(x => x.toSet)\n        var list29 = list28.map(x => x.toList)\n        var",
    "        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = new ListBuffer[Any]\n        for (i <- 0 until list2.length) {\n            if (list2(i).isInstanceOf[List[Any]]) {\n                list3 += list2(i).asInstanceOf[List[Any]]\n            }\n        }\n        var list4 = new ListBuffer[Any]\n        for (i <- 0 until list3.length) {\n            list4 += list3(i).asInstanceOf[List[Any]].sorted\n        }\n        var list5 = list4.toList.distinct\n        var list6 = new ListBuffer[Any]\n        for (i <- 0 until list5.length) {\n            var count = 0\n            for (j <- 0 until list4.length) {\n                if (list5(i).asInstanceOf[List[Any]] == list4(j).asInstanceOf[List[Any]]) {\n                    count += 1\n                }\n            }\n            list6 += (list5(i), count)\n        }\n        list6.toList",
    "        var dict = Map[Any, Int]()\n        for (i <- list1.asInstanceOf[List[Any]]) {\n            if (dict.contains(i)) {\n                dict(i) = dict(i) + 1\n            } else {\n                dict(i) = 1\n            }\n        }\n        dict",
    "        // Write your code here\n        var dict = Map[Any, Int]()\n        for (i <- list1.asInstanceOf[List[Any]]) {\n            if (dict.contains(i)) {\n                dict(i) += 1\n            } else {\n                dict(i) = 1\n            }\n        }\n        dict",
    "        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = List[Any]()\n        var list4 = List[Any]()\n        var list5 = List[Any]()\n        var list6 = List[Any]()\n        var list7 = List[Any]()\n        var list8 = List[Any]()\n        var list9 = List[Any]()\n        var list10 = List[Any]()\n        var list11 = List[Any]()\n        var list12 = List[Any]()\n        var list13 = List[Any]()\n        var list14 = List[Any]()\n        var list15 = List[Any]()\n        var list16 = List[Any]()\n        var list17 = List[Any]()\n        var list18 = List[Any]()\n        var list19 = List[Any]()\n        var list20 = List[Any]()\n        var list21 = List[Any]()\n        var list22 = List[Any]()\n        var list23 = List[Any]()\n        var list24 = List[Any]()\n        var list25 = List[Any]()\n        var list26 = List[Any]()\n        var list27 = List[Any]()\n        var list28 = List[Any]()\n        var list29 = List[Any]()\n        var list30 = List[Any]()\n        var list31 = List[Any]()\n        var list32 = List[Any]()\n        var list33 = List[Any]()\n        var list34 = List[Any]()\n        var list35 = List[Any]()\n        var list36 = List[Any]()\n        var list37 = List[Any]()\n        var list38 = List[Any]()\n        var list39 = List[Any]()\n        var list40 = List[Any]()\n        var list41 = List[Any]()\n        var list42 = List[Any]()\n        var list43 = List[Any]()\n        var list44 = List[Any]()\n        var list45 = List[Any]()\n        var list46 = List[Any]()\n        var list47 = List[Any]()",
    "        var list = list1.asInstanceOf[List[Any]]\n        var dict = new HashMap[Any, Int]\n        for (item <- list) {\n            if (dict.contains(item)) {\n                dict(item) += 1\n            } else {\n                dict(item) = 1\n            }\n        }\n        return dict",
    "        var list2 = list1.asInstanceOf[List[Any]]\n        var dict = new HashMap[Any, Int]\n        for (i <- 0 until list2.length) {\n            var tuple = list2(i).asInstanceOf[List[Any]].toSet.toList.sorted\n            if (dict.contains(tuple)) dict(tuple) += 1\n            else dict(tuple) = 1\n        }\n        dict",
    "        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = ListBuffer[Any]()\n        var list4 = ListBuffer[Any]()\n        var list5 = ListBuffer[Any]()\n        var list6 = ListBuffer[Any]()\n        var list7 = ListBuffer[Any]()\n        var list8 = ListBuffer[Any]()\n        var list9 = ListBuffer[Any]()\n        var list10 = ListBuffer[Any]()\n        var list11 = ListBuffer[Any]()\n        var list12 = ListBuffer[Any]()\n        var list13 = ListBuffer[Any]()\n        var list14 = ListBuffer[Any]()\n        var list15 = ListBuffer[Any]()\n        var list16 = ListBuffer[Any]()\n        var list17 = ListBuffer[Any]()\n        var list18 = ListBuffer[Any]()\n        var list19 = ListBuffer[Any]()\n        var list20 = ListBuffer[Any]()\n        var list21 = ListBuffer[Any]()\n        var list22 = ListBuffer[Any]()\n        var list23 = ListBuffer[Any]()\n        var list24 = ListBuffer[Any]()\n        var list25 = ListBuffer[Any]()\n        var list26 = ListBuffer[Any]()\n        var list27 = ListBuffer[Any]()\n        var list28 = ListBuffer[Any]()\n        var list29 = ListBuffer[Any]()\n        var list30 = ListBuffer[Any]()\n        var list31 = ListBuffer[Any]()\n        var list32 = ListBuffer[Any]()\n        var list33 = ListBuffer[Any]()\n        var list34 = ListBuffer[Any]()\n        var list35 = ListBuffer[Any]()\n        var list36 = ListBuffer[Any]()\n        var list37 = ListBuffer[Any]()\n        var list38 = ListBuffer[Any]()\n        var list39 = ListBuffer[Any]()\n        var list40 = ListBuffer[Any]()\n        var list41 = ListBuffer[Any]()\n        var list42 = ListBuffer[Any]()\n        var list43 = ListBuffer[Any]()\n        var",
    "        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = ListBuffer[Any]()\n        var dict = Map[Any, Int]()\n        for (i <- 0 until list2.length) {\n            if (list2(i).isInstanceOf[List[Any]]) {\n                list3 += list2(i)\n            }\n        }\n        for (i <- 0 until list3.length) {\n            var count = 0\n            for (j <- 0 until list3.length) {\n                if (list3(i) == list3(j)) {\n                    count += 1\n                }\n            }\n            dict += (list3(i) -> count)\n        }\n        dict",
    "        list1 match {\n            case Nil => Nil\n            case x :: xs => {\n                val (first, rest) = list1.partition(_ == x)\n                (first, rest) match {\n                    case (Nil, Nil) => Nil\n                    case (Nil, _) => uniqueSublists(rest)\n                    case (_, Nil) => (first, 1) :: Nil\n                    case (_, _) => (first, 1) :: uniqueSublists(rest)\n                }\n            }\n        }",
    "        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = list2.map(x => x.asInstanceOf[List[Any]]).toSet\n        var list4 = list3.map(x => (x, list2.count(y => y == x)))\n        list4",
    "        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = ListBuffer[Any]()\n        var list4 = ListBuffer[Any]()\n        var list5 = ListBuffer[Any]()\n        var list6 = ListBuffer[Any]()\n        var list7 = ListBuffer[Any]()\n        var list8 = ListBuffer[Any]()\n        var list9 = ListBuffer[Any]()\n        var list10 = ListBuffer[Any]()\n        var list11 = ListBuffer[Any]()\n        var list12 = ListBuffer[Any]()\n        var list13 = ListBuffer[Any]()\n        var list14 = ListBuffer[Any]()\n        var list15 = ListBuffer[Any]()\n        var list16 = ListBuffer[Any]()\n        var list17 = ListBuffer[Any]()\n        var list18 = ListBuffer[Any]()\n        var list19 = ListBuffer[Any]()\n        var list20 = ListBuffer[Any]()\n        var list21 = ListBuffer[Any]()\n        var list22 = ListBuffer[Any]()\n        var list23 = ListBuffer[Any]()\n        var list24 = ListBuffer[Any]()\n        var list25 = ListBuffer[Any]()\n        var list26 = ListBuffer[Any]()\n        var list27 = ListBuffer[Any]()\n        var list28 = ListBuffer[Any]()\n        var list29 = ListBuffer[Any]()\n        var list30 = ListBuffer[Any]()\n        var list31 = ListBuffer[Any]()\n        var list32 = ListBuffer[Any]()\n        var list33 = ListBuffer[Any]()\n        var list34 = ListBuffer[Any]()\n        var list35 = ListBuffer[Any]()\n        var list36 = ListBuffer[Any]()\n        var list37 = ListBuffer[Any]()\n        var list38 = ListBuffer[Any]()\n        var list39 = ListBuffer[Any]()\n        var list40 = ListBuffer[Any]()\n        var list41 = ListBuffer[Any]()\n        var list42 = ListBuffer[Any]()\n        var list43 = ListBuffer[Any]()\n        var",
    "        val list = list1.asInstanceOf[List[Any]]\n        val dict = new HashMap[Any, Int]\n        for (item <- list) {\n            if (dict.contains(item)) {\n                dict(item) += 1\n            } else {\n                dict(item) = 1\n            }\n        }\n        dict",
    "        val list2 = list1.asInstanceOf[List[Any]]\n        val list3 = list2.map(x => x.asInstanceOf[List[Any]]).toSet\n        val list4 = list3.map(x => (x, list2.count(y => y == x)))\n        list4",
    "        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = ListBuffer[Any]()\n        var list4 = ListBuffer[Any]()\n        var list5 = ListBuffer[Any]()\n        var list6 = ListBuffer[Any]()\n        var list7 = ListBuffer[Any]()\n        var list8 = ListBuffer[Any]()\n        var list9 = ListBuffer[Any]()\n        var list10 = ListBuffer[Any]()\n        var list11 = ListBuffer[Any]()\n        var list12 = ListBuffer[Any]()\n        var list13 = ListBuffer[Any]()\n        var list14 = ListBuffer[Any]()\n        var list15 = ListBuffer[Any]()\n        var list16 = ListBuffer[Any]()\n        var list17 = ListBuffer[Any]()\n        var list18 = ListBuffer[Any]()\n        var list19 = ListBuffer[Any]()\n        var list20 = ListBuffer[Any]()\n        var list21 = ListBuffer[Any]()\n        var list22 = ListBuffer[Any]()\n        var list23 = ListBuffer[Any]()\n        var list24 = ListBuffer[Any]()\n        var list25 = ListBuffer[Any]()\n        var list26 = ListBuffer[Any]()\n        var list27 = ListBuffer[Any]()\n        var list28 = ListBuffer[Any]()\n        var list29 = ListBuffer[Any]()\n        var list30 = ListBuffer[Any]()\n        var list31 = ListBuffer[Any]()\n        var list32 = ListBuffer[Any]()\n        var list33 = ListBuffer[Any]()\n        var list34 = ListBuffer[Any]()\n        var list35 = ListBuffer[Any]()\n        var list36 = ListBuffer[Any]()\n        var list37 = ListBuffer[Any]()\n        var list38 = ListBuffer[Any]()\n        var list39 = ListBuffer[Any]()\n        var list40 = ListBuffer[Any]()\n        var list41 = ListBuffer[Any]()\n        var list42 = ListBuffer[Any]()\n        var list43 = ListBuffer[Any]()\n        var",
    "        var list2 = list1.asInstanceOf[List[Any]]\n        var dict = new HashMap[Any, Int]()\n        for (i <- list2) {\n            if (dict.contains(i)) {\n                dict(i) += 1\n            } else {\n                dict(i) = 1\n            }\n        }\n        return dict",
    "        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = list2.map(x => x.asInstanceOf[List[Any]]).toSet\n        var list4 = list3.map(x => (x, list2.count(y => y == x)))\n        list4",
    "        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = list2.map(x => x.asInstanceOf[List[Any]])\n        var list4 = list3.map(x => x.sortWith(_ < _))\n        var list5 = list4.map(x => x.toString)\n        var list6 = list5.toSet\n        var list7 = list6.toList\n        var list8 = list7.map(x => x.toList)\n        var list9 = list8.map(x => x.drop(1))\n        var list10 = list9.map(x => x.dropRight(1))\n        var list11 = list10.map(x => x.map(y => y.toString.toInt))\n        var list12 = list11.map(x => x.toString)\n        var list13 = list12.map(x => x.toList)\n        var list14 = list13.map(x => x.drop(1))\n        var list15 = list14.map(x => x.dropRight(1))\n        var list16 = list15.map(x => x.map(y => y.toString.toInt))\n        var list17 = list16.map(x => x.toString)\n        var list18 = list17.map(x => x.toList)\n        var list19 = list18.map(x => x.drop(1))\n        var list20 = list19.map(x => x.dropRight(1))\n        var list21 = list20.map(x => x.map(y => y.toString.toInt))\n        var list22 = list21.map(x => x.toString)\n        var list23 = list22.map(x => x.toList)\n        var list24 = list23.map(x => x.drop(1))\n        var list25 = list24.map(x => x.dropRight(1))\n        var list26 = list25.map(x => x.map(y => y.toString.toInt))\n        var list27 = list26.map(x => x.toString)\n       ",
    "        val list2 = list1.asInstanceOf[List[Any]]\n        val list3 = list2.map(x => x.asInstanceOf[List[Any]]).toSet\n        val list4 = list3.map(x => (x, list2.count(y => y == x)))\n        list4",
    "        val list2 = list1.asInstanceOf[List[Any]]\n        val list3 = list2.map(x => x.asInstanceOf[List[Any]])\n        val list4 = list3.map(x => x.toSet)\n        val list5 = list4.map(x => x.toList)\n        val list6 = list5.map(x => x.sorted)\n        val list7 = list6.map(x => x.toSet)\n        val list8 = list7.map(x => x.toList)\n        val list9 = list8.map(x => x.toString)\n        val list10 = list9.map(x => x.toSet)\n        val list11 = list10.map(x => x.toList)\n        val list12 = list11.map(x => x.sorted)\n        val list13 = list12.map(x => x.toSet)\n        val list14 = list13.map(x => x.toList)\n        val list15 = list14.map(x => x.toString)\n        val list16 = list15.map(x => x.toSet)\n        val list17 = list16.map(x => x.toList)\n        val list18 = list17.map(x => x.sorted)\n        val list19 = list18.map(x => x.toSet)\n        val list20 = list19.map(x => x.toList)\n        val list21 = list20.map(x => x.toString)\n        val list22 = list21.map(x => x.toSet)\n        val list23 = list22.map(x => x.toList)\n        val list24 = list23.map(x => x.sorted)\n        val list25 = list24.map(x => x.toSet)\n        val list26 = list25.map(x => x.toList)\n        val list27 = list26.map(x => x.toString)\n        val list28 = list27.map(x => x.toSet)\n        val list29 = list28.map(x => x.toList)\n        val",
    "        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = ListBuffer[Any]()\n        for (i <- 0 until list2.length) {\n            if (list2(i).isInstanceOf[List[Any]]) {\n                list3 += list2(i)\n            }\n        }\n        var list4 = list3.toList\n        var list5 = ListBuffer[Any]()\n        for (i <- 0 until list4.length) {\n            list5 += list4(i).asInstanceOf[List[Any]].sorted\n        }\n        var list6 = list5.toList\n        var list7 = list6.distinct\n        var list8 = ListBuffer[Any]()\n        for (i <- 0 until list7.length) {\n            var count = 0\n            for (j <- 0 until list6.length) {\n                if (list7(i) == list6(j)) {\n                    count += 1\n                }\n            }\n            list8 += (list7(i), count)\n        }\n        var list9 = list8.toList\n        return list9",
    "        var list2 = list1.asInstanceOf[List[Any]]\n        var dict = new HashMap[Any, Int]\n        for (i <- 0 to list2.length - 1) {\n            var tuple = list2(i).asInstanceOf[List[Any]].toList\n            if (dict.contains(tuple)) {\n                dict(tuple) += 1\n            } else {\n                dict(tuple) = 1\n            }\n        }\n        return dict",
    "        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = list2.map(x => x.asInstanceOf[List[Any]])\n        var list4 = list3.map(x => x.sorted)\n        var list5 = list4.map(x => x.toSet)\n        var list6 = list5.map(x => x.toList)\n        var list7 = list6.map(x => x.toSet)\n        var list8 = list7.toSet\n        var list9 = list8.toList\n        var list10 = list9.map(x => x.toList)\n        var list11 = list10.map(x => x.sorted)\n        var list12 = list11.map(x => x.toSet)\n        var list13 = list12.map(x => x.toList)\n        var list14 = list13.map(x => x.sorted)\n        var list15 = list14.map(x => x.toSet)\n        var list16 = list15.map(x => x.toList)\n        var list17 = list16.map(x => x.sorted)\n        var list18 = list17.map(x => x.toSet)\n        var list19 = list18.map(x => x.toList)\n        var list20 = list19.map(x => x.sorted)\n        var list21 = list20.map(x => x.toSet)\n        var list22 = list21.map(x => x.toList)\n        var list23 = list22.map(x => x.sorted)\n        var list24 = list23.map(x => x.toSet)\n        var list25 = list24.map(x => x.toList)\n        var list26 = list25.map(x => x.sorted)\n        var list27 = list26.map(x => x.toSet)\n        var list28 = list27.map(x => x.toList)\n        var list29 = list28.map(x => x.sorted)\n        var list30 = list29.map(x => x.toSet",
    "        val list = list1.asInstanceOf[List[Any]]\n        val dict = new HashMap[Any, Int]\n        for (i <- list) {\n            if (dict.contains(i)) dict(i) += 1\n            else dict(i) = 1\n        }\n        dict",
    "        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = list2.map(x => x.asInstanceOf[List[Any]])\n        var list4 = list3.map(x => x.toSet)\n        var list5 = list4.map(x => x.toList)\n        var list6 = list5.map(x => x.sorted)\n        var list7 = list6.map(x => x.toSet)\n        var list8 = list7.map(x => x.toList)\n        var list9 = list8.map(x => x.map(y => y.toString))\n        var list10 = list9.map(x => x.mkString)\n        var list11 = list10.map(x => x.toInt)\n        var list12 = list11.map(x => x.toString)\n        var list13 = list12.map(x => x.map(y => y.toInt))\n        var list14 = list13.map(x => x.sorted)\n        var list15 = list14.map(x => x.toSet)\n        var list16 = list15.map(x => x.toList)\n        var list17 = list16.map(x => x.map(y => y.toString))\n        var list18 = list17.map(x => x.mkString)\n        var list19 = list18.map(x => x.toInt)\n        var list20 = list19.map(x => x.toString)\n        var list21 = list20.map(x => x.map(y => y.toInt))\n        var list22 = list21.map(x => x.sorted)\n        var list23 = list22.map(x => x.toSet)\n        var list24 = list23.map(x => x.toList)\n        var list25 = list24.map(x => x.map(y => y.toString))\n        var list26 = list25.map(x => x.mkString)\n        var list27 = list26.map(x => x.toInt)\n        var list28 = list27.",
    "        var list = list1.asInstanceOf[List[Any]]\n        var dict = new HashMap[Any, Int]()\n        for (i <- 0 until list.length) {\n            if (dict.contains(list(i))) {\n                dict(list(i)) += 1\n            } else {\n                dict(list(i)) = 1\n            }\n        }\n        return dict",
    "        val list = list1.asInstanceOf[List[Any]]\n        val map = Map[Any, Int]()\n        for (i <- 0 until list.length) {\n            val sublist = list(i)\n            if (map.contains(sublist)) {\n                map(sublist) += 1\n            } else {\n                map(sublist) = 1\n            }\n        }\n        map",
    "        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = ListBuffer[Any]()\n        var list4 = ListBuffer[Any]()\n        var list5 = ListBuffer[Any]()\n        var list6 = ListBuffer[Any]()\n        var list7 = ListBuffer[Any]()\n        var list8 = ListBuffer[Any]()\n        var list9 = ListBuffer[Any]()\n        var list10 = ListBuffer[Any]()\n        var list11 = ListBuffer[Any]()\n        var list12 = ListBuffer[Any]()\n        var list13 = ListBuffer[Any]()\n        var list14 = ListBuffer[Any]()\n        var list15 = ListBuffer[Any]()\n        var list16 = ListBuffer[Any]()\n        var list17 = ListBuffer[Any]()\n        var list18 = ListBuffer[Any]()\n        var list19 = ListBuffer[Any]()\n        var list20 = ListBuffer[Any]()\n        var list21 = ListBuffer[Any]()\n        var list22 = ListBuffer[Any]()\n        var list23 = ListBuffer[Any]()\n        var list24 = ListBuffer[Any]()\n        var list25 = ListBuffer[Any]()\n        var list26 = ListBuffer[Any]()\n        var list27 = ListBuffer[Any]()\n        var list28 = ListBuffer[Any]()\n        var list29 = ListBuffer[Any]()\n        var list30 = ListBuffer[Any]()\n        var list31 = ListBuffer[Any]()\n        var list32 = ListBuffer[Any]()\n        var list33 = ListBuffer[Any]()\n        var list34 = ListBuffer[Any]()\n        var list35 = ListBuffer[Any]()\n        var list36 = ListBuffer[Any]()\n        var list37 = ListBuffer[Any]()\n        var list38 = ListBuffer[Any]()\n        var list39 = ListBuffer[Any]()\n        var list40 = ListBuffer[Any]()\n        var list41 = ListBuffer[Any]()\n        var list42 = ListBuffer[Any]()\n        var list43 = ListBuffer[Any]()\n        var",
    "        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = list2.map(x => x.asInstanceOf[List[Any]])\n        var list4 = list3.map(x => x.toSet)\n        var list5 = list4.map(x => x.toList)\n        var list6 = list5.map(x => x.sorted)\n        var list7 = list6.map(x => x.toString)\n        var list8 = list7.toSet\n        var list9 = list8.toList\n        var list10 = list9.map(x => x.toList)\n        var list11 = list10.map(x => x.map(y => y.toString))\n        var list12 = list11.map(x => x.map(y => y.toInt))\n        var list13 = list12.map(x => x.sorted)\n        var list14 = list13.map(x => x.toString)\n        var list15 = list14.map(x => x.toList)\n        var list16 = list15.map(x => x.map(y => y.toString))\n        var list17 = list16.map(x => x.map(y => y.toInt))\n        var list18 = list17.map(x => x.toSet)\n        var list19 = list18.map(x => x.toList)\n        var list20 = list19.map(x => x.sorted)\n        var list21 = list20.map(x => x.toString)\n        var list22 = list21.map(x => x.toList)\n        var list23 = list22.map(x => x.map(y => y.toString))\n        var list24 = list23.map(x => x.map(y => y.toInt))\n        var list25 = list24.map(x => x.toSet)\n        var list26 = list25.map(x => x.toList)\n        var list27 = list26.map(x => x.sorted)\n        var list28 = list27.map(x => x.toString",
    "        // Your code here\n        val list2 = list1.asInstanceOf[List[Any]]\n        val list3 = list2.map(x => x.asInstanceOf[List[Any]]).toSet\n        val list4 = list3.map(x => (x, list2.count(y => y == x)))\n        list4",
    "        var dict = Map[Any, Int]()\n        for (i <- list1.asInstanceOf[List[Any]]) {\n            if (dict.contains(i)) {\n                dict(i) += 1\n            } else {\n                dict(i) = 1\n            }\n        }\n        return dict",
    "        val list = list1.asInstanceOf[List[Any]]\n        val dict = new HashMap[Any, Int]\n        for (i <- 0 until list.length) {\n            val tuple = list(i)\n            if (dict.contains(tuple)) {\n                dict(tuple) += 1\n            } else {\n                dict(tuple) = 1\n            }\n        }\n        dict",
    "        val list2 = list1.asInstanceOf[List[Any]]\n        val list3 = list2.map(x => x.asInstanceOf[List[Any]])\n        val list4 = list3.map(x => x.toSet)\n        val list5 = list4.map(x => x.toList)\n        val list6 = list5.map(x => x.sorted)\n        val list7 = list6.map(x => x.toSet)\n        val list8 = list7.map(x => x.toList)\n        val list9 = list8.map(x => x.sorted)\n        val list10 = list9.map(x => x.toSet)\n        val list11 = list10.map(x => x.toList)\n        val list12 = list11.map(x => x.sorted)\n        val list13 = list12.map(x => x.toSet)\n        val list14 = list13.map(x => x.toList)\n        val list15 = list14.map(x => x.sorted)\n        val list16 = list15.map(x => x.toSet)\n        val list17 = list16.map(x => x.toList)\n        val list18 = list17.map(x => x.sorted)\n        val list19 = list18.map(x => x.toSet)\n        val list20 = list19.map(x => x.toList)\n        val list21 = list20.map(x => x.sorted)\n        val list22 = list21.map(x => x.toSet)\n        val list23 = list22.map(x => x.toList)\n        val list24 = list23.map(x => x.sorted)\n        val list25 = list24.map(x => x.toSet)\n        val list26 = list25.map(x => x.toList)\n        val list27 = list26.map(x => x.sorted)\n        val list28 = list27.map(x => x.toSet)\n        val list29 = list28.map(x => x.toList)\n        val",
    "        if (list1.isInstanceOf[List[_]]) {\n            val list = list1.asInstanceOf[List[_]]\n            val sublists = list.map(x => uniqueSublists(x)).toSet\n            val sublistsCount = sublists.map(x => (x, list.count(y => y == x)))\n            sublistsCount\n        } else {\n            list1\n        }",
    "        val list = list1.asInstanceOf[List[Any]]\n        val dict = new HashMap[Any, Int]\n        for (i <- 0 until list.length) {\n            val key = list(i)\n            if (dict.contains(key)) dict(key) += 1\n            else dict(key) = 1\n        }\n        dict",
    "        // Write your code here\n        val list = list1.asInstanceOf[List[Any]]\n        val map = new HashMap[Any, Int]\n        for (i <- list) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        map",
    "        val list2 = list1.asInstanceOf[List[Any]]\n        val list3 = list2.map(x => x.asInstanceOf[List[Any]]).toSet\n        val list4 = list3.map(x => (x, list2.count(y => y == x)))\n        list4",
    "        var list2 = list1.asInstanceOf[List[Any]]\n        var dict = new HashMap[Any, Int]()\n        for (i <- list2) {\n            if (dict.contains(i)) {\n                dict(i) += 1\n            } else {\n                dict(i) = 1\n            }\n        }\n        dict",
    "        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = list2.map(x => x.asInstanceOf[List[Any]]).toSet.toList\n        var list4 = list3.map(x => (x, list2.count(y => y == x)))\n        return list4",
    "        // Write your code here",
    "        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = list2.map(x => x.asInstanceOf[List[Any]].toSet)\n        var list4 = list3.map(x => (x, list3.count(y => y == x)))\n        var list5 = list4.toSet\n        list5",
    "        var dict = Map[Any, Int]()\n        for (x <- list1.asInstanceOf[List[Any]]) {\n            if (dict.contains(x)) {\n                dict(x) += 1\n            } else {\n                dict(x) = 1\n            }\n        }\n        dict",
    "        val list = list1.asInstanceOf[List[Any]]\n        val map = new HashMap[Any, Int]\n        for (i <- list) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        map.toMap",
    "        val list2 = list1.asInstanceOf[List[Any]]\n        val map = new HashMap[Any, Int]\n        for (i <- list2) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        map",
    "        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = list2.map(x => x.asInstanceOf[List[Any]]).toSet\n        var list4 = list3.map(x => (x, list2.count(y => y == x)))\n        list4",
    "        var list2 = list1.asInstanceOf[List[Any]]\n        var dict = Map[Any, Int]()\n        for (i <- 0 until list2.length) {\n            if (dict.contains(list2(i))) {\n                dict(list2(i)) += 1\n            } else {\n                dict(list2(i)) = 1\n            }\n        }\n        dict",
    "        val list = list1.asInstanceOf[List[Any]]\n        val dict = new HashMap[Any, Int]\n        for (i <- list) {\n            if (dict.contains(i)) {\n                dict(i) += 1\n            } else {\n                dict(i) = 1\n            }\n        }\n        dict",
    "        var list2 = list1.asInstanceOf[List[Any]]\n        var map = new HashMap[Any, Int]()\n        for (i <- 0 until list2.length) {\n            var tuple = list2(i).asInstanceOf[Tuple2[Any, Any]]\n            if (map.contains(tuple)) map(tuple) += 1\n            else map += tuple -> 1\n        }\n        return map",
    "        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = ListBuffer[Any]()\n        var list4 = ListBuffer[Any]()\n        var list5 = ListBuffer[Any]()\n        var list6 = ListBuffer[Any]()\n        var list7 = ListBuffer[Any]()\n        var list8 = ListBuffer[Any]()\n        var list9 = ListBuffer[Any]()\n        var list10 = ListBuffer[Any]()\n        var list11 = ListBuffer[Any]()\n        var list12 = ListBuffer[Any]()\n        var list13 = ListBuffer[Any]()\n        var list14 = ListBuffer[Any]()\n        var list15 = ListBuffer[Any]()\n        var list16 = ListBuffer[Any]()\n        var list17 = ListBuffer[Any]()\n        var list18 = ListBuffer[Any]()\n        var list19 = ListBuffer[Any]()\n        var list20 = ListBuffer[Any]()\n        var list21 = ListBuffer[Any]()\n        var list22 = ListBuffer[Any]()\n        var list23 = ListBuffer[Any]()\n        var list24 = ListBuffer[Any]()\n        var list25 = ListBuffer[Any]()\n        var list26 = ListBuffer[Any]()\n        var list27 = ListBuffer[Any]()\n        var list28 = ListBuffer[Any]()\n        var list29 = ListBuffer[Any]()\n        var list30 = ListBuffer[Any]()\n        var list31 = ListBuffer[Any]()\n        var list32 = ListBuffer[Any]()\n        var list33 = ListBuffer[Any]()\n        var list34 = ListBuffer[Any]()\n        var list35 = ListBuffer[Any]()\n        var list36 = ListBuffer[Any]()\n        var list37 = ListBuffer[Any]()\n        var list38 = ListBuffer[Any]()\n        var list39 = ListBuffer[Any]()\n        var list40 = ListBuffer[Any]()\n        var list41 = ListBuffer[Any]()\n        var list42 = ListBuffer[Any]()\n        var list43 = ListBuffer[Any]()\n        var",
    "        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = List[Any]()\n        var list4 = List[Any]()\n        var list5 = List[Any]()\n        var list6 = List[Any]()\n        var list7 = List[Any]()\n        var list8 = List[Any]()\n        var list9 = List[Any]()\n        var list10 = List[Any]()\n        var list11 = List[Any]()\n        var list12 = List[Any]()\n        var list13 = List[Any]()\n        var list14 = List[Any]()\n        var list15 = List[Any]()\n        var list16 = List[Any]()\n        var list17 = List[Any]()\n        var list18 = List[Any]()\n        var list19 = List[Any]()\n        var list20 = List[Any]()\n        var list21 = List[Any]()\n        var list22 = List[Any]()\n        var list23 = List[Any]()\n        var list24 = List[Any]()\n        var list25 = List[Any]()\n        var list26 = List[Any]()\n        var list27 = List[Any]()\n        var list28 = List[Any]()\n        var list29 = List[Any]()\n        var list30 = List[Any]()\n        var list31 = List[Any]()\n        var list32 = List[Any]()\n        var list33 = List[Any]()\n        var list34 = List[Any]()\n        var list35 = List[Any]()\n        var list36 = List[Any]()\n        var list37 = List[Any]()\n        var list38 = List[Any]()\n        var list39 = List[Any]()\n        var list40 = List[Any]()\n        var list41 = List[Any]()\n        var list42 = List[Any]()\n        var list43 = List[Any]()\n        var list44 = List[Any]()\n        var list45 = List[Any]()\n        var list46 = List[Any]()\n        var list47 = List[Any]()",
    "        val list = list1.asInstanceOf[List[Any]]\n        val map = new HashMap[Any, Int]\n        for (item <- list) {\n            if (map.contains(item)) {\n                map(item) += 1\n            } else {\n                map(item) = 1\n            }\n        }\n        map",
    "        val list = list1.asInstanceOf[List[Any]]\n        var dict = Map[Any, Int]()\n        for (i <- list) {\n            if (dict.contains(i)) {\n                dict(i) += 1\n            } else {\n                dict(i) = 1\n            }\n        }\n        dict",
    "        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = list2.map(x => x.asInstanceOf[List[Any]])\n        var list4 = list3.map(x => x.toSet)\n        var list5 = list4.map(x => x.toList)\n        var list6 = list5.map(x => x.sorted)\n        var list7 = list6.map(x => x.toSet)\n        var list8 = list7.map(x => x.toList)\n        var list9 = list8.map(x => x.toSet)\n        var list10 = list9.map(x => x.toList)\n        var list11 = list10.map(x => x.sorted)\n        var list12 = list11.map(x => x.toSet)\n        var list13 = list12.map(x => x.toList)\n        var list14 = list13.map(x => x.toSet)\n        var list15 = list14.map(x => x.toList)\n        var list16 = list15.map(x => x.sorted)\n        var list17 = list16.map(x => x.toSet)\n        var list18 = list17.map(x => x.toList)\n        var list19 = list18.map(x => x.toSet)\n        var list20 = list19.map(x => x.toList)\n        var list21 = list20.map(x => x.sorted)\n        var list22 = list21.map(x => x.toSet)\n        var list23 = list22.map(x => x.toList)\n        var list24 = list23.map(x => x.toSet)\n        var list25 = list24.map(x => x.toList)\n        var list26 = list25.map(x => x.sorted)\n        var list27 = list26.map(x => x.toSet)\n        var list28 = list27.map(x => x.toList)\n        var list29 = list28.map(x => x.toSet)\n        var",
    "        var list2 = list1.asInstanceOf[List[Any]]\n        var map = Map[Any, Int]()\n        for (i <- list2) {\n            if (map.contains(i)) {\n                map(i) = map(i) + 1\n            } else {\n                map(i) = 1\n            }\n        }\n        return map",
    "        val list = list1.asInstanceOf[List[Any]]\n        val dict = new HashMap[Any, Int]()\n        for (i <- list) {\n            if (dict.contains(i)) {\n                dict(i) += 1\n            } else {\n                dict(i) = 1\n            }\n        }\n        dict",
    "        var list = list1.asInstanceOf[List[Any]]\n        var dict = new HashMap[Any, Int]()\n        for (i <- list) {\n            if (dict.contains(i)) {\n                dict(i) += 1\n            } else {\n                dict(i) = 1\n            }\n        }\n        return dict"
  ]
}