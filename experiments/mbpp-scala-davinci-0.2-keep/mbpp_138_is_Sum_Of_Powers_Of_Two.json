{
  "name": "mbpp_138_is_Sum_Of_Powers_Of_Two",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    def isSumOfPowersOfTwo(n : Long) : Boolean = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_138_is_Sum_Of_Powers_Of_Two.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(isSumOfPowersOfTwo((10l)) == (true));\n    assert(isSumOfPowersOfTwo((7l)) == (false));\n    assert(isSumOfPowersOfTwo((14l)) == (true));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var nn = n\n        var i = 0\n        while (nn > 0) {\n            if (nn % 2 == 1) {\n                nn -= pow(2, i).toLong\n                if (nn < 0) return false\n            }\n            i += 1\n            nn /= 2\n        }\n        return true",
    "        var sum = 0L\n        var i = 0\n        while (sum < n) {\n            sum += pow(2, i).toLong\n            if (sum == n) return true\n            i += 1\n        }\n        return false",
    "        var m = n\n        var i = 0\n        while (m > 0) {\n            if (m % 2 == 1) {\n                if (n - pow(2, i).toLong != 0 && !isSumOfPowersOfTwo(n - pow(2, i).toLong)) return false\n            }\n            m /= 2\n            i += 1\n        }\n        true",
    "        var m = n\n        var i = 0\n        while (m > 0) {\n            if (m % 2 == 1) {\n                if (n - pow(2, i).toLong != 0 && isSumOfPowersOfTwo(n - pow(2, i).toLong)) return true\n            }\n            m /= 2\n            i += 1\n        }\n        return false",
    "        var x = n\n        while (x > 0) {\n            if (x % 2 == 1) return false\n            x /= 2\n        }\n        return true",
    "        var x = n\n        while (x > 0) {\n            if ((x & (x - 1)) == 0) return true\n            x -= 1\n        }\n        return false",
    "        var m = n\n        while (m > 0) {\n            var k = (log(m) / log(2)).toInt\n            if (m == pow(2, k).toLong) return true\n            m -= pow(2, k).toLong\n        }\n        return false",
    "        var x = n\n        var i = 0\n        while (x > 0) {\n            if (x % 2 == 1) {\n                if (n - pow(2, i).toLong == 0) return true\n                else return false\n            }\n            x /= 2\n            i += 1\n        }\n        false",
    "        if (n == 0) return true\n        var x = n\n        while (x % 2 == 0) {\n            x /= 2\n        }\n        if (x == 1) return true\n        return false",
    "        var x = n\n        while (x > 0) {\n            if (x % 2 == 0) x /= 2\n            else if (x == 1) return true\n            else return false\n        }\n        return false",
    "        var m = n\n        var i = 0\n        while (m > 0) {\n            if (m % 2 == 1) {\n                if (n - pow(2, i).toLong != 0 && !isSumOfPowersOfTwo(n - pow(2, i).toLong)) return false\n            }\n            m /= 2\n            i += 1\n        }\n        return true",
    "        var sum = 0L\n        var i = 0\n        while (sum < n) {\n            sum += pow(2, i).toLong\n            if (sum == n) return true\n            i += 1\n        }\n        return false",
    "        var i = 0\n        var nn = n\n        while (nn > 0) {\n            if (nn % 2 == 1) {\n                nn -= pow(2, i).toLong\n                if (nn < 0) return false\n            }\n            i += 1\n            nn /= 2\n        }\n        return true",
    "        var i = 0\n        var sum = 0L\n        while (sum < n) {\n            sum += pow(2, i).toLong\n            i += 1\n        }\n        return sum == n",
    "        var x = n\n        while (x > 0) {\n            val y = x & (x - 1)\n            if (y == 0) return true\n            x = y\n        }\n        return false",
    "        var m = n\n        var i = 0\n        while (m > 0) {\n            if (m % 2 == 1) {\n                if (m == 1) return true\n                else return false\n            }\n            m /= 2\n        }\n        return false",
    "        var x = n\n        while (x > 0) {\n            if (x % 2 != 0) return false\n            x /= 2\n        }\n        return true",
    "        var x = n\n        var i = 0\n        while (x > 0) {\n            if (x % 2 == 1) {\n                if (n - pow(2, i).toLong != 0 && !isSumOfPowersOfTwo(n - pow(2, i).toLong)) return false\n            }\n            x /= 2\n            i += 1\n        }\n        return true",
    "        var x = n\n        var i = 0\n        while (x > 0) {\n            if (x % 2 == 1) {\n                if (x == 1) return true\n                else return false\n            }\n            x /= 2\n            i += 1\n        }\n        return false",
    "        var x = n\n        while (x > 0) {\n            if ((x & 1) == 1) {\n                x -= 1\n            }\n            x >>= 1\n        }\n        x == 0"
  ]
}