language: scala
name: HumanEval_149_sorted_list_sum
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.sortWith((a,\
    \ b) => a.length == b.length && a <= b || a.length < b.length)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\"\
    , \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprtzeengm.scala:23)\n\tat Problem.main(tmprtzeengm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979805
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val m = lst.map(a\
    \ => a.length).sorted\n        return lst.filter(a => a.length == m(0))\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpp9ov493n.scala:24)\n\tat Problem.main(tmpp9ov493n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979804
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val lst1 = lst.filter(_.length\
    \ % 2 == 0)\n        val lst2 = lst1.sortWith((a, b) => a.length < b.length)\n\
    \        lst2\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp819hkdde.scala:28)\n\tat Problem.main(tmp819hkdde.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979804
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.filter(s =>\
    \ s.length % 2 == 0).sorted\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfs5x3wxb.scala:29)\n\tat Problem.main(tmpfs5x3wxb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979805
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        var newList =\
    \ List[String]()\n        var len = lst.length\n        var oddCount = 0\n   \
    \     var evenCount = 0\n        for (i <- 0 until len) {\n            if (lst(i).length\
    \ % 2 == 0) {\n                evenCount += 1\n            } else {\n        \
    \        oddCount += 1\n            }\n        }\n        var evenList = new Array[String](evenCount)\n\
    \        var oddList = new Array[String](oddCount)\n        var evenIndex = 0\n\
    \        var oddIndex = 0\n        for (i <- 0 until len) {\n            if (lst(i).length\
    \ % 2 == 0) {\n                evenList(evenIndex) = lst(i)\n                evenIndex\
    \ += 1\n            } else {\n                oddList(oddIndex) = lst(i)\n   \
    \             oddIndex += 1\n            }\n        }\n        evenList = evenList.sorted\n\
    \        evenList.foreach(x => newList = newList :+ x)\n        oddList.foreach(x\
    \ => newList = newList :+ x)\n        return newList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptc4ac1mc.scala:50)\n\tat Problem.main(tmptc4ac1mc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979805
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        def isEven(input\
    \ : Int) : Boolean = {\n            input % 2 == 0\n        }\n        def isOdd(input\
    \ : Int) : Boolean = {\n            !isEven(input)\n        }\n        lst.sortWith(_.length\
    \ < _.length).filter(s => isEven(s.length))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpybu0k3ox.scala:32)\n\tat Problem.main(tmpybu0k3ox.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979805
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val lstLength\
    \ = lst.map(_.length)\n        val lstUniqueLength = lstLength.distinct\n    \
    \    val sortedLengths = lstUniqueLength.sorted\n        val lstSorted = new ListBuffer[String]\n\
    \        for (len <- sortedLengths) {\n            lstSorted ++= lst.filter(_.length\
    \ == len).sorted\n        }\n        lstSorted.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcwdvtq93.scala:30)\n\tat Problem.main(tmpcwdvtq93.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979804
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val m = new HashMap[Int,\
    \ List[String]]()\n        for (i <- lst) {\n            if (m.contains(i.length))\
    \ {\n                m(i.length) = m(i.length) :+ i\n            } else {\n  \
    \              m(i.length) = List(i)\n            }\n        }\n        var r\
    \ = List[String]()\n        for (i <- m.keys.toList.sorted) {\n            r =\
    \ r ::: m(i).sorted\n        }\n        r\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpg_subkwk.scala:35)\n\tat Problem.main(tmpg_subkwk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979805
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        def delOdd(lst\
    \ : List[String]) : List[String] = lst match {\n            case Nil => Nil\n\
    \            case x :: xs => if (x.length % 2 == 0) x :: delOdd(xs) else delOdd(xs)\n\
    \        }\n        def sorted(lst : List[String]) : List[String] = lst match\
    \ {\n            case Nil => Nil\n            case x :: xs => sorted(xs.filter(x\
    \ > _)) ::: x :: sorted(xs.filter(x <= _))\n        }\n        sorted(delOdd(lst))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpumt5y77g.scala:37)\n\tat Problem.main(tmpumt5y77g.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979805
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val d = new scala.collection.mutable.HashMap[Int,\
    \ List[String]]()\n        for (i <- lst) {\n            d(i.length) = (i :: d.getOrElse(i.length,\
    \ List()))\n        }\n        var result = List[String]()\n        for (k <-\
    \ d.keys.toList.sorted) {\n            result = result ::: d(k).sorted\n     \
    \   }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvcwpp5dk.scala:31)\n\tat Problem.main(tmpvcwpp5dk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979805
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        def helper(lst\
    \ : List[String], acc : List[String]) : List[String] = {\n            if (lst.isEmpty)\
    \ acc\n            else {\n                val len = lst.head.length\n       \
    \         if (len % 2 == 0) helper(lst.tail, acc :+ lst.head)\n              \
    \  else helper(lst.tail, acc)\n            }\n        }\n        // return an\
    \ array of strings sorted by length\n        def sortByLength(lst : List[String])\
    \ : List[String] = {\n            val elems = lst.toArray\n            // IMPORTANT!\n\
    \            // This is a stable sort.\n            // I mean if two elements\
    \ have the same length, they will\n            // retain their relative order\n\
    \            Sorting.stableSort(elems, (a : String, b : String) => a.length <\
    \ b.length)\n            elems.toList\n        }\n        sortByLength(helper(lst,\
    \ List[String]()))\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5iejchhu.scala:35:12 ------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m            Sorting.stableSort(elems, (\e[36ma\e[0m :\
    \ \e[35mString\e[0m, \e[36mb\e[0m : \e[35mString\e[0m) => a.length < b.length)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^\e[0m\n\e[31m   |\e[0m            Not\
    \ found: Sorting\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979801
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n      var q = new Queue[String]()\n\
    \      var even = ArrayBuffer[String]()\n      var odd = ArrayBuffer[String]()\n\
    \      for (str <- lst) {\n        if (str.length % 2 == 0) even += str\n    \
    \    else odd += str\n      }\n      var sortedOdd = odd.sorted\n      var sortedEven\
    \ = even.sorted\n      val sorted = sortedOdd ++ sortedEven\n      sorted.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn8plk_jy.scala:33)\n\tat Problem.main(tmpn8plk_jy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979805
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        var map = Map[Int,\
    \ List[String]]()\n        for (n <- lst) {\n            var count = n.length\n\
    \            if (map.contains(count)) {\n                var list = map(count)\n\
    \                list = n :: list\n                map += (count -> list)\n  \
    \          } else {\n                map += (count -> List(n))\n            }\n\
    \        }\n        return map.values.flatten.toList.sorted\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprkhj9zmn.scala:34)\n\tat Problem.main(tmprkhj9zmn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979805
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        def lessThan(s1\
    \ : String, s2 : String) : Boolean = {\n            if (s1.length == s2.length)\
    \ {\n                return s1 < s2\n            }\n            s1.length < s2.length\n\
    \        }\n        def mergesort(lst : List[String]) : List[String] = {\n   \
    \         val n = lst.length / 2\n            if (n == 0) {\n                return\
    \ lst\n            }\n            def merge(left : List[String], right : List[String])\
    \ : List[String] = {\n                var leftc = left\n                var rightc\
    \ = right\n                var result = List[String]()\n                while\
    \ (leftc.length > 0 && rightc.length > 0) {\n                    if (lessThan(leftc.head,\
    \ rightc.head)) {\n                        result = result :+ leftc.head\n   \
    \                     leftc = leftc.tail\n                    } else {\n     \
    \                   result = result :+ rightc.head\n                        rightc\
    \ = rightc.tail\n                    }\n                }\n                if\
    \ (leftc.length > 0) {\n                    result = result ::: leftc\n      \
    \          }\n                if (rightc.length > 0) {\n                    result\
    \ = result ::: rightc\n                }\n                result\n           \
    \ }\n            val (left, right) = lst.splitAt(n)\n            merge(mergesort(left),\
    \ mergesort(right))\n        }\n        mergesort(lst)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnqtsxlaz.scala:58)\n\tat Problem.main(tmpnqtsxlaz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979805
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n      lst.filter(x =>\
    \ x.length % 2 == 0).distinct.sortWith(_.length < _.length)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcda6o06k.scala:26)\n\tat Problem.main(tmpcda6o06k.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979805
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        var table = lst.map(l\
    \ => (l, l.length)).toMap\n        table.filter((k, v) => v % 2 == 0).toList.sortBy(k\
    \ => k._2).map(s => s._1)\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzn7lu01v.scala:27)\n\tat Problem.main(tmpzn7lu01v.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979805
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n      lst.filter(_.length\
    \ % 2 == 0).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2mwzf_i3.scala:29)\n\tat Problem.main(tmp2mwzf_i3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979805
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n      var buffer : ListBuffer[String]\
    \ = ListBuffer[String]()\n      for (str <- lst) {\n        if (str.length % 2\
    \ == 0) buffer += str\n      }\n      var res = buffer.sortWith(_.length < _.length)\n\
    \      res.toList\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3ej7zooh.scala:31)\n\tat Problem.main(tmp3ej7zooh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979805
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.filter(x =>\
    \ x.length % 2 == 0).sorted\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4vbdbm0v.scala:29)\n\tat Problem.main(tmp4vbdbm0v.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979805
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.sorted\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpds2hj2o_.scala:23)\n\tat Problem.main(tmpds2hj2o_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979805
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n    \tdef sum(s1 : String,\
    \ s2 : String) : String = {\n    \t\tval a = s1.toCharArray()\n    \t\tval b =\
    \ s2.toCharArray()\n    \t\tval r = new StringBuilder()\n    \t\tvar c = 0\n \
    \   \t\tvar i = 0\n    \t\twhile (i < a.length && i < b.length) {\n    \t\t\t\
    r.append((a(i) + b(i) - '0' * 2 + c) % 10)\n    \t\t\tc = (a(i) + b(i) - '0' *\
    \ 2 + c) / 10\n    \t\t\ti += 1\n    \t\t}\n    \t\twhile (i < a.length) {\n \
    \   \t\t\tr.append((a(i) - '0' + c) % 10)\n    \t\t\tc = (a(i) - '0' + c) / 10\n\
    \    \t\t\ti += 1\n    \t\t}\n    \t\twhile (i < b.length) {\n    \t\t\tr.append((b(i)\
    \ - '0' + c) % 10)\n    \t\t\tc = (b(i) - '0' + c) / 10\n    \t\t\ti += 1\n  \
    \  \t\t}\n    \t\tif (c != 0) r.append(c)\n    \t\tr.toString\n    \t}\n    \t\
    val lst2 = lst.filter(s => s.length % 2 == 0)\n    \tdef sort(lst : List[String])\
    \ : List[String] = {\n    \t\tif (lst.length == 0) List()\n    \t\telse {\n  \
    \  \t\t\tval p = lst.head\n    \t\t\tval q = lst.tail\n    \t\t\tval (left, right)\
    \ = q.partition(s => s.length < p.length || (s.length == p.length && s < p))\n\
    \    \t\t\tsort(left) ::: List(p) ::: sort(right)\n    \t\t}\n    \t}\n    \t\
    if (lst2.length == 0) List()\n    \telse {\n\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpbf0_vyg8.scala:69:0 ----------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbf0_vyg8.scala:68:1\
    \ ---------------------\e[0m\e[0m\n\e[31m68 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e\
    [0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m   |\e[0m Required: List[String]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[33m\e[33m-- Warning: /tmp/tmpbf0_vyg8.scala:58:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m58 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n2 errors found\n"
  stdout: ''
  timestamp: 1659979804
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n    \t\tvar lstToSort\
    \ = lst\n    \t\tif (lst.length <= 1)\n    \t\t\treturn lst\n    \t\telse {\n\
    \    \t\t\tvar leftList = List[String]()\n    \t\t\tvar rightList = List[String]()\n\
    \    \t\t\tvar pivot = lst(0)\n    \t\t\tfor (i <- 1 until lst.length) {\n   \
    \ \t\t\t\tif (lst(i).length < pivot.length)\n    \t\t\t\t\tleftList = leftList\
    \ :+ lst(i)\n    \t\t\t\telse if (lst(i).length > pivot.length)\n    \t\t\t\t\t\
    rightList = rightList :+ lst(i)\n    \t\t\t\telse if (lst(i).compareTo(pivot)\
    \ < 0)\n    \t\t\t\t\tleftList = leftList :+ lst(i)\n    \t\t\t\telse\n    \t\t\
    \t\t\trightList = rightList :+ lst(i)\n    \t\t\t}\n    \t\t\treturn sortedListSum(leftList)\
    \ :+ pivot ::: sortedListSum(rightList)\n    \t\t}\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E041] Syntax Error: /tmp/tmp9ovg3iy6.scala:37:42 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m    \t\t\t\e[33mreturn\e[0m sortedListSum(leftList) :+\
    \ pivot ::: sortedListSum(rightList)\n\e[31m\e[31m   |\e[0m    \t\t\t        \
    \                          ^\e[0m\n\e[31m   |\e[0m:+ (which is left-associative)\
    \ and ::: (which is right-associative) have same precedence and may not be mixed\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979802
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        return lst.filter(x\
    \ => x.length % 2 == 0).sorted\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7unfug0h.scala:29)\n\tat Problem.main(tmp7unfug0h.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979805
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        var map = new\
    \ HashMap[Int, List[String]]()\n        for (str <- lst) {\n            if (map.contains(str.length))\
    \ {\n                var newList = map(str.length) :+ str\n                map.update(str.length,\
    \ newList)\n            } else {\n                map.put(str.length, List(str))\n\
    \            }\n        }\n        var res = new ListBuffer[String]()\n      \
    \  var sorted = map.keys.toList.sorted\n        for (i <- sorted) {\n        \
    \    var curr = map(i).sorted\n            for (j <- curr) {\n               \
    \ res += j\n            }\n        }\n        res.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqiwgj5p7.scala:40)\n\tat Problem.main(tmpqiwgj5p7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979812
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        var list = lst.sortWith((x,\
    \ y) => x.length < y.length || (x.length == y.length && x < y))\n        var index\
    \ = 0\n        while (index < list.length - 1) {\n            if (list(index).length\
    \ == list(index + 1).length) {\n                list = list.take(index) ++ list.drop(index\
    \ + 2)\n            } else {\n                index += 1\n            }\n    \
    \    }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjyz4t8x8.scala:32)\n\tat Problem.main(tmpjyz4t8x8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979814
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        // Sort the list\
    \ according to length of the string, then alphabetically\n        // if two strings\
    \ have the same length.\n        var lstSorted = lst.sortWith((s1, s2) => {\n\
    \            if (s1.length != s2.length) s1.length < s2.length\n            else\
    \ s1 < s2\n        })\n        // If a string has an odd length, remove it from\
    \ the list\n        return lstSorted.filter(s => s.length % 2 == 0)\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979815
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n      def oddLength(str\
    \ : String) : Boolean = {\n        return (str.length % 2 == 1)\n      }\n   \
    \   lst.filterNot(oddLength)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphd_m7_cw.scala:27)\n\tat Problem.main(tmphd_m7_cw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979815
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.filter(str\
    \ => str.length % 2 == 0).sortWith((str1, str2) =>\n            str1.length <\
    \ str2.length ||\n            (str1.length == str2.length && str1 < str2))\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979815
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        var sumList =\
    \ new ListBuffer[String]()\n        var map = Map[Int, Int]()\n        for (i\
    \ <- lst) {\n            map(i.length) = map.getOrElse(i.length, 0) + 1\n    \
    \    }\n        var keySet = map.keySet.toList.sorted\n        for (i <- keySet)\
    \ {\n            var frequency = map(i)\n            while (frequency > 0) {\n\
    \                sumList += i.toString\n                frequency -= 1\n     \
    \       }\n        }\n        return sumList.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwcphj31i.scala:36)\n\tat Problem.main(tmpwcphj31i.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979815
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        // Map each string\
    \ with its length, then sort it and get the length of each string\n        val\
    \ mappings = lst.map(w => (w, w.length)).sortBy(_._2)\n        mappings.map(_._1)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxt6cizax.scala:25)\n\tat Problem.main(tmpxt6cizax.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979816
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        var result : List[String]\
    \ = List()\n        for (item <- lst) {\n            if (item.length % 2 == 0)\
    \ {\n                result = result :+ item\n            }\n        }\n     \
    \   result.sortWith(_.length < _.length)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxttfzqv4.scala:32)\n\tat Problem.main(tmpxttfzqv4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979815
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        var m = lst.groupBy(_.length)\n\
    \        m.map(kv => {\n            var key = kv._1\n            var value = kv._2\n\
    \            var sortedValue = value.sorted\n            (key, sortedValue)\n\
    \        }).toList.map(kv => kv._2).flatten\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjd8zgr3s.scala:29)\n\tat Problem.main(tmpjd8zgr3s.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979816
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n      lst.filter(x =>\
    \ x.length % 2 == 0).sortWith(_.length < _.length)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7tkg26o0.scala:26)\n\tat Problem.main(tmp7tkg26o0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979815
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.groupBy(_.length)\n\
    \            .values\n            .map(_.sorted)\n            .flatten\n     \
    \       .toList\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0wpvoyud.scala:27)\n\tat Problem.main(tmp0wpvoyud.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979816
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        def sort(lst :\
    \ List[String]) : List[String] = {\n            if (lst.isEmpty) List[String]()\n\
    \            else {\n                val p = lst.head\n                val (left,\
    \ right) = lst.tail.partition(_.length < p.length)\n                sort(left)\
    \ ::: p :: sort(right)\n            }\n        }\n        sort(lst).filter(_.length\
    \ % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2xg4r85n.scala:34)\n\tat Problem.main(tmp2xg4r85n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979815
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        def sumHelper(lst\
    \ : List[String], acc : List[String]) : List[String] = {\n            lst match\
    \ {\n                case Nil => acc\n                case _ => {\n          \
    \          sumHelper(lst.tail, if (lst.head.length % 2 == 0) lst.head :: acc else\
    \ acc)\n                }\n            }\n        }\n        def sortHelper(lst\
    \ : List[String]) : List[String] = {\n            def compare(str1 : String, str2\
    \ : String) : Boolean = {\n                if (str1.length < str2.length) true\n\
    \                else if (str1.length > str2.length) false\n                else\
    \ str1 < str2\n            }\n            if (lst.length == 1) lst\n         \
    \   else {\n                val pivot = lst(lst.length / 2)\n                val\
    \ lessthan = sortHelper(lst.filter(x => compare(x, pivot)))\n                val\
    \ greaterthan = sortHelper(lst.filter(x => !compare(x, pivot)))\n            \
    \    lessthan ::: pivot :: greaterthan\n            }\n        }\n        if (lst.length\
    \ == 0) List()\n        else sortHelper(sumHelper(lst, List()))\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\"\
    , \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 0\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.sortHelper$1(tmpoh6s_mif.scala:36)\n\tat Problem$.sortHelper$1(tmpoh6s_mif.scala:37)\n\
    \tat Problem$.sortedListSum(tmpoh6s_mif.scala:43)\n\tat Problem$.main(tmpoh6s_mif.scala:47)\n\
    \tat Problem.main(tmpoh6s_mif.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979816
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val result = new\
    \ ArrayBuffer[String]\n        val sortedLst = lst.sortWith(_.length() < _.length())\n\
    \        var lastLength = 0\n        for (elem <- sortedLst) {\n            if\
    \ (elem.length() % 2 == 0) {\n                if (elem.length() != lastLength)\
    \ result.clear()\n                result += elem\n                lastLength =\
    \ elem.length()\n            }\n        }\n        result.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\"\
    , \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8_j97hj3.scala:34)\n\tat Problem.main(tmp8_j97hj3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979816
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n      var res = List[String]()\n\
    \      lst.foreach(str => {\n        if(str.length % 2 == 0) {\n          res\
    \ = str :: res\n        }\n      })\n      return res.sortWith(_.length < _.length)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpuc2027u2.scala:33)\n\tat Problem.main(tmpuc2027u2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979816
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        var map : HashMap[Int,\
    \ List[String]] = new HashMap[Int, List[String]]()\n        for (str <- lst) {\n\
    \            var len = str.length\n            if (map.contains(len)) {\n    \
    \            var lst = map(len)\n                map(len) = str :: lst\n     \
    \       } else {\n                map(len) = List(str)\n            }\n      \
    \  }\n        var a : List[String] = Nil\n        var ks = map.keys.toList.sorted\n\
    \        for (k <- ks) {\n            a = map(k).sorted ::: a\n        }\n   \
    \     a\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgy_l8tvg.scala:38)\n\tat Problem.main(tmpgy_l8tvg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979816
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        if (lst.length\
    \ == 0) return lst\n        var table = new HashMap[Int, List[String]]\n     \
    \   for (word <- lst) {\n            var len = word.length\n            if (table.contains(len))\
    \ {\n                table.put(len, (word :: table.get(len).get).sorted)\n   \
    \         } else {\n                table.put(len, List(word))\n            }\n\
    \        }\n        var keys = table.keys.toList.sorted\n        var res = List[String]()\n\
    \        for (key <- keys) {\n            res = table.get(key).get ::: res\n \
    \       }\n        return res\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpx8_e__g3.scala:38)\n\tat Problem.main(tmpx8_e__g3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979816
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.filter(str\
    \ => str.length % 2 == 0).sortWith((str1, str2) => (str1.length < str2.length)\
    \ || (str1.length == str2.length && str1 < str2))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979816
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n      lst.sortWith((s1,\
    \ s2) => {\n        val v1 = s1.length\n        val v2 = s2.length\n        if\
    \ (v1 == v2) {\n          s1.compareTo(s2) < 0\n        } else {\n          v1\
    \ < v2\n        }\n      })\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprtlhgla8.scala:31)\n\tat Problem.main(tmprtlhgla8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979816
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        // Question 1:\n\
    \        // What should we do if the input list is empty?\n        if (lst.isEmpty)\
    \ Nil\n        else {\n            // Question 2:\n            // What should\
    \ we do if the input list is non-empty?\n            // Hint: think about pairwise\
    \ comparison between head element and rest of the list\n            val m = lst.map(x\
    \ => (x, x.length)).maxBy(_._2)\n            if (m._2 % 2 == 0) List(m._1) ++\
    \ sortedListSum(lst.filter(x => x != m._1))\n            else sortedListSum(lst.filter(x\
    \ => x != m._1))\n        }\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgt9c5rm2.scala:34)\n\tat Problem.main(tmpgt9c5rm2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979816
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.filter(x =>\
    \ x.length % 2 == 0).sortWith(_.length < _.length)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpu5y1ofi4.scala:26)\n\tat Problem.main(tmpu5y1ofi4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979816
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.filter(x =>\
    \ x.length % 2 == 0).sortWith((x, y) => x.length < y.length || (x.length == y.length\
    \ && x < y))\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979816
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val lenCount =\
    \ new HashMap[Int, Int]()\n        val lenWords = new HashMap[Int, List[String]]()\n\
    \        lst.foreach { s =>\n            val len = s.length\n            if (!lenCount.contains(len))\
    \ {\n                lenCount(len) = 0\n                lenWords(len) = List()\n\
    \            }\n            lenCount(len) += 1\n            lenWords(len) = lenWords(len)\
    \ :+ s\n        }\n        val rst = new ArrayBuffer[String]()\n        val l\
    \ = new ListBuffer[Int]()\n        lenCount.keys.foreach { k =>\n            if\
    \ (lenCount(k) % 2 == 0) {\n                l += k\n            }\n        }\n\
    \        l.sorted.foreach { k =>\n            lenWords(k).sorted.foreach { w =>\n\
    \                rst += w\n            }\n        }\n        rst.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmparh0bng1.scala:46)\n\tat Problem.main(tmparh0bng1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979817
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        // var lst2 =\
    \ lst.filter(x => x.length % 2 == 0)\n        // var lst3 = lst2.sortWith(_.length\
    \ > _.length)\n        // lst3\n        lst.filter(x => x.length % 2 == 0).sortWith(_.length\
    \ > _.length)\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpx_ami51c.scala:27)\n\tat Problem.main(tmpx_ami51c.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979823
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val n = lst.length\n\
    \        var result : List[String] = List()\n        if (n == 0) return result\n\
    \        var i = 0\n        var j = 0\n        var k = 1\n        for (i <- 0\
    \ until n - 1) {\n            for (j <- i + 1 until n) {\n                if (lst(i).length\
    \ > lst(j).length) {\n                    val tmp = lst(i)\n                 \
    \   lst(i) = lst(j)\n                    lst(j) = tmp\n                }\n   \
    \         }\n        }\n        var min = lst(0).length\n        var max = lst(n\
    \ - 1).length\n        for (i <- 0 until n) {\n            if (lst(i).length !=\
    \ min) {\n                max = lst(i).length\n                break\n       \
    \     }\n        }\n        var l : List[String] = List()\n        for (i <- min\
    \ to max) {\n            for (j <- 0 until n) {\n                if (lst(j).length\
    \ == i) {\n                    l = l :+ lst(j)\n                }\n          \
    \  }\n        }\n        val m = l.length\n        for (i <- 0 until m - 1) {\n\
    \            for (j <- i + 1 until m) {\n                if (l(i) > l(j)) {\n\
    \                    val tmp = l(i)\n                    l(i) = l(j)\n       \
    \             l(j) = tmp\n                }\n            }\n        }\n      \
    \  return l\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpj7ihlb84.scala:30:20 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m                    lst(i) = lst(j)\n\e[31m\e[31m   |\e\
    [0m                    ^^^\e[0m\n\e[31m   |\e[0mvalue update is not a member of\
    \ List[String] - did you mean lst.updated?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpj7ihlb84.scala:31:20 ------------------------\e[0m\e[0m\n\e[31m31 |\e\
    [0m                    lst(j) = tmp\n\e[31m\e[31m   |\e[0m                   \
    \ ^^^\e[0m\n\e[31m   |\e[0mvalue update is not a member of List[String] - did\
    \ you mean lst.updated?\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpj7ihlb84.scala:40:16\
    \ ------------------------\e[0m\e[0m\n\e[31m40 |\e[0m                break\n\e\
    [31m\e[31m   |\e[0m                ^^^^^\e[0m\n\e[31m   |\e[0m               \
    \ Not found: break\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpj7ihlb84.scala:56:20\
    \ ------------------------\e[0m\e[0m\n\e[31m56 |\e[0m                    l(i)\
    \ = l(j)\n\e[31m\e[31m   |\e[0m                    ^\e[0m\n\e[31m   |\e[0mvalue\
    \ update is not a member of List[String] - did you mean List[String].updated?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpj7ihlb84.scala:57:20 ------------------------\e\
    [0m\e[0m\n\e[31m57 |\e[0m                    l(j) = tmp\n\e[31m\e[31m   |\e[0m\
    \                    ^\e[0m\n\e[31m   |\e[0mvalue update is not a member of List[String]\
    \ - did you mean List[String].updated?\n5 errors found\n"
  stdout: ''
  timestamp: 1659979823
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        // val newLst\
    \ = for (v <- lst if v.length % 2 == 0) yield v\n        // val newLst = lst.filter(_.length\
    \ % 2 == 0)\n        // newLst.sortWith((s, t) => s.length < t.length)\n     \
    \   // lst.filter(_.length % 2 == 0).sortWith((s, t) => s.length < t.length)\n\
    \        val newLst = lst.filter(_.length % 2 == 0).sortWith((s, t) => (s.length\
    \ < t.length) || s.length == t.length && s < t)\n        newLst\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\"\
    , \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979826
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.filter(_.length\
    \ % 2 == 0).sortWith((a, b) => (a.length < b.length) || (a.length == b.length\
    \ && a < b))\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979826
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        def compare(a\
    \ : String, b : String) : Boolean = {\n            if (a.length < b.length) return\
    \ true\n            if (a.length > b.length) return false\n            if (a.length\
    \ == b.length) {\n                if (a < b) return true\n                else\
    \ return false\n            }\n            return false\n        }\n        def\
    \ splitMerge(lst : List[String]) : List[String] = {\n            if (lst.length\
    \ <= 1) return lst\n            val (lst1, lst2) = lst.splitAt(lst.length / 2)\n\
    \            merge(splitMerge(lst1), splitMerge(lst2))\n        }\n        def\
    \ merge(lst1 : List[String], lst2 : List[String]) : List[String] = {\n       \
    \     if (lst1.isEmpty) return lst2\n            if (lst2.isEmpty) return lst1\n\
    \            if (compare(lst1.head, lst2.head)) return List(lst1.head) ::: merge(lst1.tail,\
    \ lst2)\n            else return List(lst2.head) ::: merge(lst1, lst2.tail)\n\
    \        }\n        return splitMerge(lst)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvz8v9s0i.scala:43)\n\tat Problem.main(tmpvz8v9s0i.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979827
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.map(x => (x,\
    \ x.length)).sortBy(x => (x._2, x._1)).map(x => x._1)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpahje4h8f.scala:23)\n\tat Problem.main(tmpahje4h8f.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979826
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        var sortedList\
    \ = lst.sortWith(sortFunc)\n        return sortedList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyktd9xe6.scala:20:38 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mvar\e[0m \e[36msortedList\e[0m = lst.sortWith(sortFunc)\n\
    \e[31m\e[31m   |\e[0m                                      ^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                      Not found: sortFunc\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659979822
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        // Implement the\
    \ body of this function\n        var temp = lst.filter(x => x.length % 2 == 0)\n\
    \        temp = temp.sortWith(_.length < _.length)\n        temp\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\"\
    , \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp31zl04as.scala:29)\n\tat Problem.main(tmp31zl04as.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979826
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        if (lst.length\
    \ == 0) return List[String]()\n        val len = lst(0).length\n        val lst1\
    \ = lst.filter(x => x.length == len)\n        val lst2 = lst.filter(x => x.length\
    \ != len)\n        lst1.sorted ++ sortedListSum(lst2)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbakh315j.scala:27)\n\tat Problem.main(tmpbakh315j.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979826
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val it = lst.iterator\n\
    \        var map = Map[Int, List[String]]()\n        while (it.hasNext) {\n  \
    \          val str = it.next\n            val len = str.length\n            val\
    \ v = map.getOrElse(len, List[String]())\n            map += (len -> (str :: v))\n\
    \        }\n        val sortedKeys = map.keys.toList.sorted\n        val it2 =\
    \ sortedKeys.iterator\n        var r = List[String]()\n        while (it2.hasNext)\
    \ {\n            val len = it2.next\n            r = map(len).sorted ++ r\n  \
    \      }\n        r\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_dgqo2h8.scala:38)\n\tat Problem.main(tmp_dgqo2h8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979827
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        return lst.filter(x\
    \ => x.length % 2 == 0).sortWith(_.length < _.length)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpz7q8rtwa.scala:26)\n\tat Problem.main(tmpz7q8rtwa.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979827
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        var newList =\
    \ scala.collection.mutable.ListBuffer[String]()\n        for (i <- lst) {\n  \
    \          if (i.length % 2 == 0) {\n                newList += i\n          \
    \  }\n        }\n        newList.toList.sorted\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjoc5b0mp.scala:35)\n\tat Problem.main(tmpjoc5b0mp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979827
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n    \tvar dict = scala.collection.mutable.Map[Int,\
    \ List[String]]()\n    \tfor (s <- lst) {\n    \t\tif (dict.contains(s.length))\
    \ {\n    \t\t\tdict(s.length) = dict(s.length) :+ s\n    \t\t} else {\n    \t\t\
    \tdict(s.length) = List(s)\n    \t\t}\n    \t}\n    \tvar keys = dict.keys.toList.sorted\n\
    \    \tvar result = List[String]()\n    \tfor (k <- keys) {\n    \t\tresult =\
    \ result ::: dict(k).sorted\n    \t}\n    \tresult\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpd2ottcso.scala:36)\n\tat Problem.main(tmpd2ottcso.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979827
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.filter(_.length%2\
    \ == 0).sortWith((x, y) => x.length < y.length)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxmz23zlm.scala:26)\n\tat Problem.main(tmpxmz23zlm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979827
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        def sortedListSumHelper(lst\
    \ : List[String], result : List[String]) : List[String] = {\n            if (lst.isEmpty)\
    \ result\n            else {\n                val word = lst.head\n          \
    \      val newResult = result.filter(x => x.length == word.length) ::: result.filter(x\
    \ => x.length < word.length) ::: List(word) ::: result.filter(x => x.length >\
    \ word.length)\n                sortedListSumHelper(lst.tail, newResult)\n   \
    \         }\n        }\n        sortedListSumHelper(lst, List())\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\"\
    , \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxygs3s2s.scala:31)\n\tat Problem.main(tmpxygs3s2s.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979827
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val slst = lst.sorted\n\
    \        var oslst = new ListBuffer[String]\n        var last = slst(0)\n    \
    \    oslst += last\n        for (i <- 1 until slst.length) {\n            if (slst(i)\
    \ != last) {\n                oslst += slst(i)\n                last = slst(i)\n\
    \            }\n        }\n        oslst.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp00q8a2y8.scala:33)\n\tat Problem.main(tmp00q8a2y8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979827
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        var dic = Map[Int,\
    \ List[String]]()\n        for (x <- lst) {\n            var l = dic.getOrElse(x.length,\
    \ List[String]())\n            l = l :+ x\n            dic += x.length -> l\n\
    \        }\n        var l = List[String]()\n        for (x <- dic.keys.toList.sorted)\
    \ {\n            l = l ::: dic(x).sorted\n        }\n        return l\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0903lkns.scala:33)\n\tat Problem.main(tmp0903lkns.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979827
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.sortWith(\n\
    \            (str1, str2) => {\n                if (str1.length != str2.length)\
    \ {\n                    str1.length < str2.length\n                } else {\n\
    \                    str1.compareTo(str2) <= 0\n                }\n          \
    \  }\n        )\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpa51_dahu.scala:31)\n\tat Problem.main(tmpa51_dahu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979827
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        return lst.sortWith((x,\
    \ y) => x.length < y.length)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp99qsz47y.scala:23)\n\tat Problem.main(tmp99qsz47y.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979827
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val m = lst.map\
    \ {\n            s => s.length()\n        }.sorted.zipWithIndex.map {\n      \
    \      case (v, i) => {\n                if (i % 2 == 0) -v else v\n         \
    \   }\n        }.sum\n        println(m)\n        lst.filter {\n            s\
    \ => s.length() <= m\n        }.sorted\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7e48egkj.scala:33)\n\tat Problem.main(tmp7e48egkj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: '-2

    '
  timestamp: 1659979828
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n      //lst.filter((str\
    \ : String) => str.length % 2 == 0).sorted\n      //lst.filter(_.length % 2 ==\
    \ 0).sorted\n      lst.filter(_.length % 2 == 0).sorted\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpje5rgscj.scala:31)\n\tat Problem.main(tmpje5rgscj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979827
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        var m = mutable.Map[Int,\
    \ List[String]]()\n        for (i <- lst) {\n            val n = i.length\n  \
    \          if (m.contains(n)) {\n                val y = m(n)\n              \
    \  y :+ i\n                m(n) = y\n            } else {\n                m(n)\
    \ = List(i)\n            }\n        }\n        var sortedList = List[String]()\n\
    \        for (i <- m.keys.toList.sorted) {\n            sortedList = sortedList\
    \ ::: m(i).sorted\n        }\n        sortedList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfx1_tkcz.scala:20:16 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mvar\e[0m \e[36mm\e[0m = mutable.Map[\e\
    [35mInt\e[0m, \e[35mList\e[0m[\e[35mString\e[0m]]()\n\e[31m\e[31m   |\e[0m   \
    \             ^^^^^^^\e[0m\n\e[31m   |\e[0m                Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979824
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.filter(x =>\
    \ x.length % 2 == 0).sortWith((x, y) => x.length < y.length || (x.length == y.length\
    \ && x.compareTo(y) <= 0))\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979828
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val oddLengths\
    \ = lst.filter(x => x.length % 2 == 0)\n        //lst.map(x => x.length)\n   \
    \     oddLengths.sortWith((a, b) => a.length <= b.length)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpduztlndz.scala:29)\n\tat Problem.main(tmpduztlndz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979833
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val x = for(item\
    \ <- lst if item.length % 2 == 0) yield item\n        x.sorted\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\"\
    , \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbigr2l4w.scala:30)\n\tat Problem.main(tmpbigr2l4w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979834
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        var sortedLst\
    \ = lst.sorted\n        sortedLst = sortedLst.sorted(Ordering.by((s : String)\
    \ => s.length))\n        sortedLst = sortedLst.filter((s : String) => (s.length\
    \ % 2 == 0))\n        return sortedLst\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979835
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val lengthOrder\
    \ = new Ordering[String]() {\n            def compare(x : String, y : String)\
    \ = {\n                val a = x.length\n                val b = y.length\n  \
    \              if (a > b) 1\n                else if (a < b) -1\n            \
    \    else x.compareTo(y)\n            }\n        }\n        val sorted = lst.sorted(lengthOrder)\n\
    \        val result = new ListBuffer[String]\n        var last = sorted(0)\n \
    \       var count = 1\n        for (i <- 1 until sorted.length) {\n          \
    \  if (sorted(i) == last) count += 1\n            else {\n                if (count\
    \ % 2 == 0) result += last\n                last = sorted(i)\n               \
    \ count = 1\n            }\n        }\n        if (count % 2 == 0) result += last\n\
    \        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkwv4t2s6.scala:45)\n\tat Problem.main(tmpkwv4t2s6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979836
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        var map = Map[Int,\
    \ ArrayBuffer[String]]()\n        var lst2 = lst.sortWith(_.length < _.length)\n\
    \        for (i <- 0 until lst2.length) {\n            if (!map.contains(lst2(i).length))\
    \ {\n                map += (lst2(i).length -> ArrayBuffer[String]())\n      \
    \      }\n            map(lst2(i).length) += lst2(i)\n        }\n        var lst3\
    \ = List[String]()\n        for (i <- 0 until map.keys.toList.length) {\n    \
    \        var s = map(map.keys.toList(i)).toList.sortWith(_ < _)\n            for\
    \ (j <- 0 until s.length) lst3 = lst3 :+ s(j)\n        }\n        lst3\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpg0yw7ejn.scala:36)\n\tat Problem.main(tmpg0yw7ejn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979837
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.toSet.toList.sortWith((a,\
    \ b) => a.length < b.length || (a.length == b.length && a < b))\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\"\
    , \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpge7uipjp.scala:23)\n\tat Problem.main(tmpge7uipjp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979837
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.sorted.filter(str\
    \ => str.length % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnylz239p.scala:29)\n\tat Problem.main(tmpnylz239p.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979837
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        // list to return\n\
    \        val sumList = new ListBuffer[String]()\n        // initialize sum to\
    \ 0 and word to empty string\n        var sum = 0\n        var word = \"\"\n \
    \       // iterate through list\n        for (word <- lst) {\n            // increment\
    \ sum by ASCII values of the characters\n            for (c <- word) {\n     \
    \           sum += c.toInt\n            }\n            // if sum is even append\
    \ to sumList\n            if (sum % 2 == 0) {\n                sumList += word\n\
    \            }\n            // reset sum to 0\n            sum = 0\n        }\n\
    \        // return sumList\n        sumList.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpc7hx44o2.scala:43)\n\tat Problem.main(tmpc7hx44o2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979838
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        // If the list\
    \ is empty, then there is nothing to do,\n        // just return the empty list.\n\
    \        if (lst.isEmpty) {\n            return lst\n        }\n        // Find\
    \ the minimum length of string in the list.\n        val min_length = lst.foldLeft(Integer.MAX_VALUE)((accum,\
    \ str) => min(accum, str.length))\n        // Return the list of strings that\
    \ have the minimum length.\n        lst.filter(str => str.length == min_length)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzxira5j7.scala:31)\n\tat Problem.main(tmpzxira5j7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979838
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val sorted = lst.sortWith((a,\
    \ b) => (a.length <= b.length))\n        val lst2 = lst.toSet.toList\n       \
    \ val lst3 = lst2.sortWith((a, b) => (a.length <= b.length))\n        lst3\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbvtv3j04.scala:26)\n\tat Problem.main(tmpbvtv3j04.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979838
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val lst1 = lst.filter(x\
    \ => x.length % 2 == 0)\n        val lst2 = lst1.sortWith((x, y) => x.length <\
    \ y.length)\n        lst2\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkqh1j93d.scala:28)\n\tat Problem.main(tmpkqh1j93d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979838
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        // Solution 1\n\
    \        // val lst1 = lst.filter(x => (x.length % 2 == 0))\n        // val lst2\
    \ = lst1.sorted\n        // lst2\n        // Solution 2\n        lst.filter(x\
    \ => (x.length % 2 == 0)).sorted\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpa1_d3php.scala:34)\n\tat Problem.main(tmpa1_d3php.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979838
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val nlst = lst.groupBy(_.length).map(x\
    \ => x._2.sorted).toList.sortBy(_.head.length)\n        nlst.map(x => x.head)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpo75olfgk.scala:24)\n\tat Problem.main(tmpo75olfgk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979838
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        // some sort of\
    \ filter function where I filter out the\n        // list by a certain length\
    \ of the words\n        // and then sort the list by that size\n        // and\
    \ then return the list\n        def filterBySize(words : List[String], size :\
    \ Int) : List[String] = {\n            words.filter(w => w.length == size)\n \
    \       }\n        val oddList = lst.filter(x => x.length % 2 == 0)\n        val\
    \ oddSizes = List(1,3,5,7,9)\n        val evenSizes = List(2,4,6,8,10)\n     \
    \   val evenList = evenSizes.flatMap(s => filterBySize(oddList, s))\n        evenList.sorted\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphwlp8kpg.scala:40)\n\tat Problem.main(tmphwlp8kpg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979838
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        def isEven(num\
    \ : Int) : Boolean = {\n            return num % 2 == 0\n        }\n        val\
    \ evenList = lst.filter(x => isEven(x.length()))\n        val sortedList = evenList.sortWith(_.length\
    \ < _.length)\n        return sortedList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpyw0_u8eq.scala:31)\n\tat Problem.main(tmpyw0_u8eq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979838
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val sortedWords\
    \ = lst.sortWith((s1, s2) => (s1.length < s2.length) || ((s1.length == s2.length)\
    \ && (s1 < s2)))\n        val oddWords = sortedWords.filter((s) => (s.length %\
    \ 2 == 1))\n        val oddWordsSize = oddWords.size\n        for (i <- 0 until\
    \ oddWordsSize) {\n            sortedWords.remove(sortedWords.indexOf(oddWords(i)))\n\
    \        }\n        sortedWords\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqt73yak8.scala:24:24 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            sortedWords.remove(sortedWords.indexOf(oddWords(i)))\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ remove is not a member of List[String] - did you mean sortedWords.reduce?\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659979837
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        var newLst = lst.sortWith((a,\
    \ b) => a.length < b.length)\n        var result = List[String]()\n        var\
    \ i = 0\n        while (i < newLst.length) {\n            if (i == 0) result =\
    \ result :+ newLst(i)\n            else if (newLst(i) != newLst(i - 1)) result\
    \ = result :+ newLst(i)\n            i += 1\n        }\n        result\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxbjv2acc.scala:31)\n\tat Problem.main(tmpxbjv2acc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979838
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val sortedLst\
    \ = lst.sorted\n        var result = List[String]()\n        var wordLength =\
    \ 0\n        var i = 0\n        var temp = \"\"\n        for (i <- 0 until sortedLst.length)\
    \ {\n            if (wordLength == sortedLst(i).length) temp += sortedLst(i)\n\
    \            else {\n                if (wordLength != 0) result = temp :: result\n\
    \                wordLength = sortedLst(i).length\n                temp = sortedLst(i)\n\
    \            }\n        }\n        result = temp :: result\n        result.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn26oo3va.scala:37)\n\tat Problem.main(tmpn26oo3va.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979838
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        return lst.sortWith((a,\
    \ b) => a.length < b.length || a.length == b.length && a < b)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\"\
    , \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2e8ak26k.scala:23)\n\tat Problem.main(tmp2e8ak26k.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979838
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        def comp_f(i :\
    \ String, j : String) : Boolean = {\n            i.length < j.length\n       \
    \ }\n        if (lst.length == 0) {\n            return List[String]()\n     \
    \   }\n        val sorted = lst.sortWith(comp_f)\n        val filtered = sorted.filter((s)\
    \ => s.length % 2 == 0)\n        return filtered\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqrbv0ksh.scala:34)\n\tat Problem.main(tmpqrbv0ksh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979838
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.sortWith(_.length\
    \ < _.length)\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9k6b47m7.scala:23)\n\tat Problem.main(tmp9k6b47m7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        var sz = 0\n \
    \       for (x <- lst) {\n            sz = max(sz, x.length)\n        }\n    \
    \    var bucket = Array.fill(sz + 1)(List[String]())\n        for (x <- lst) {\n\
    \            bucket(x.length) = x :: bucket(x.length)\n        }\n        var\
    \ res = List[String]()\n        for (x <- bucket) {\n            for (y <- x.sorted)\
    \ {\n                res = y :: res\n            }\n        }\n        res\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpke4wbaqu.scala:37)\n\tat Problem.main(tmpke4wbaqu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val sum = (0 /:\
    \ lst)((a, b) => a + b.length)\n        val avg = sum / lst.length\n        val\
    \ first = (List[String]() /: lst)((a, b) => if (b.length < avg) b :: a else a)\n\
    \        val second = (List[String]() /: lst)((a, b) => if (b.length >= avg) b\
    \ :: a else a)\n        first.sortWith(_ < _) ::: second.sortWith(_ < _)\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpg_jc0m0l.scala:27)\n\tat Problem.main(tmpg_jc0m0l.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n    \tlst.sortWith(\n\t\
    \t\t(str1 : String, str2 : String) => {\n\t\t\t\tif (str1.length == str2.length)\
    \ {\n\t\t\t\t\tstr1 <= str2\n\t\t\t\t} else {\n\t\t\t\t\tstr1.length < str2.length\n\
    \t\t\t\t}\n\t\t\t}\n\t\t)\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpg79af27y.scala:31)\n\tat Problem.main(tmpg79af27y.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979844
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.filter(s =>\
    \ s.length % 2 == 0).sorted\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfs5x3wxb.scala:29)\n\tat Problem.main(tmpfs5x3wxb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979805
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val dictionary\
    \ = HashMap[Int, List[String]]()\n        for (s <- lst) {\n            if (dictionary.contains(s.length))\
    \ {\n                val list = dictionary(s.length)\n                dictionary.update(s.length,\
    \ list :+ s)\n            } else {\n                dictionary += (s.length ->\
    \ List(s))\n            }\n        }\n        return (for (v <- dictionary.toList.sortBy(_._1).map(_._2).flatten)\
    \ yield v).filter(_.length % 2 == 0)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp49is70fx.scala:35)\n\tat Problem.main(tmp49is70fx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979846
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        var i = 0\n  \
    \      var size = lst.size\n        var tmp = List[String]()\n        while (i\
    \ < size) {\n            if (lst(i).length % 2 == 0) {\n                tmp =\
    \ tmp :+ lst(i)\n            }\n            i += 1\n        }\n        return\
    \ tmp.sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpm0bguirk.scala:38)\n\tat Problem.main(tmpm0bguirk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979847
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val lstSorted\
    \ = lst.sortWith((x, y) => x.length < y.length)\n        val lstSortedRemovedDuplicates\
    \ = lstSorted.distinct\n        return lstSortedRemovedDuplicates\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8u4nk564.scala:25)\n\tat Problem.main(tmp8u4nk564.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979845
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val lst2 = lst.filter(e\
    \ => e.length % 2 == 0)\n        val lst3 = lst2.sortWith(_.length < _.length)\n\
    \        val lst4 = lst3.sortWith(_.compareTo(_) < 0)\n        return lst4\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3vz1iwmt.scala:32)\n\tat Problem.main(tmp3vz1iwmt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        var count : Int\
    \ = 0\n        var map : Map[Int, Int] = Map()\n        for (x <- lst) {\n   \
    \         count = map.getOrElse(x.length, 0)\n            map(x.length) = count\
    \ + 1\n        }\n        var res : Array[String] = new Array[String](map.size)\n\
    \        var pos : Int = 0\n        var mapPos : Int = 0\n        for (x <- lst)\
    \ {\n            count = map.getOrElse(x.length, 0)\n            if (count % 2\
    \ == 0) {\n                res(pos) = x\n                pos += 1\n          \
    \  }\n            map(x.length) = count - 1\n        }\n        return res.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5syamcsy.scala:40)\n\tat Problem.main(tmp5syamcsy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979849
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.sortWith((a,\
    \ b) => (a.length < b.length) || ((a.length == b.length) && (a.compareTo(b) <\
    \ 0)))\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpl4ovridg.scala:23)\n\tat Problem.main(tmpl4ovridg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.filter(x =>\
    \ x.length % 2 == 0).sortWith((x, y) => {if (x.length == y.length) x.compareTo(y)\
    \ < 0 else x.length < y.length})\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        def trimList(lst\
    \ : List[String]) : List[String] = {\n            var newList = lst.filter(x =>\
    \ x.length % 2 == 0)\n            newList.sortWith(_ < _)\n        }\n       \
    \ trimList(lst)\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpd14z_ped.scala:33)\n\tat Problem.main(tmpd14z_ped.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.sortWith((a,\
    \ b) => a.length < b.length)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpa186achx.scala:23)\n\tat Problem.main(tmpa186achx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979849
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.groupBy(x\
    \ => x.length).filter(y => y._1 % 2 == 0).values.flatten.toList.sorted\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpghge3_o_.scala:29)\n\tat Problem.main(tmpghge3_o_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979849
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        def sortedListSum1(lst\
    \ : List[String], acc : List[String]) : List[String] = {\n            if (lst.length\
    \ == 0) acc\n            else if (lst.length == 1) lst.head::acc\n           \
    \ else {\n                val first = lst.head\n                val second = lst.tail.head\n\
    \                if (first.length == second.length) {\n                    if\
    \ (first > second) sortedListSum1(lst.tail.tail, second::acc)\n              \
    \      else sortedListSum1(lst.tail.tail, first::acc)\n                }\n   \
    \             else if (first.length > second.length) sortedListSum1(lst.tail,\
    \ second::acc)\n                else sortedListSum1(lst.tail, first::acc)\n  \
    \          }\n        }\n        sortedListSum1(lst, List()).reverse\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9zthaiex.scala:37)\n\tat Problem.main(tmp9zthaiex.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979849
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.map(s => s.length).sorted\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp65zijggl.scala:20:8\
    \ ---------------------\e[0m\e[0m\n\e[31m20 |\e[0m        lst.map(\e[36ms\e[0m\
    \ => s.length).sorted\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    List[\e[1m\e[31mInt\e[0m]\n\e[31m   |\e\
    [0m        Required: List[\e[1m\e[32mString\e[0m]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979848
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        // Your code here...\n\
    \        return (List[String]())\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpl8a2h8pc.scala:24)\n\tat Problem.main(tmpl8a2h8pc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979849
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.filter(_.length\
    \ % 2 == 0).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8wyn60z4.scala:29)\n\tat Problem.main(tmp8wyn60z4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979849
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val lst_len =\
    \ lst.map(_.length).toSet.toList.sorted\n        val lst_map = lst.map(word =>\
    \ (word.length, word)).groupBy(_._1).mapValues(_.map(_._2).sorted)\n        lst_len.flatMap(lst_map(_))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpluq2jp95.scala:25)\n\tat Problem.main(tmpluq2jp95.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979849
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        return lst.sortWith((a,\
    \ b) => a.length < b.length)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxsfwyztm.scala:23)\n\tat Problem.main(tmpxsfwyztm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979849
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n    \tvar lst2 = lst.map(_.size)\n\
    \    \tvar lst3 = lst2.sorted\n    \tvar lst4 = lst3.filter(x => x % 2 == 0)\n\
    \    \tvar lst5 = lst.map(_.size)\n    \tvar lst6 = lst5.zip(lst)\n    \tvar lst7\
    \ = lst6.filter(x => x._1 % 2 == 0)\n    \tvar lst8 = lst7.map(_._2)\n    \tvar\
    \ lst9 = lst8.sorted\n    \treturn lst9\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_pjfg9p3.scala:37)\n\tat Problem.main(tmp_pjfg9p3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979850
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        def recurse(lst\
    \ : List[String], result : List[String]) : List[String] = {\n            lst match\
    \ {\n                case List() => result\n                case _ => {\n    \
    \                val l = lst.map(x => x.length).toSet.toList.sorted\n        \
    \            val buffer = new ListBuffer[String]\n                    for (i <-\
    \ l) {\n                        val newElements = lst.filter(x => x.length ==\
    \ i)\n                        buffer ++= newElements.sorted\n                \
    \    }\n                    recurse(buffer.toList, result)\n                }\n\
    \            }\n        }\n        recurse(lst, List())\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659979854
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val groups = lst.groupBy(_.length)\n\
    \        var result = List[String]()\n        for ((length, group) <- groups)\
    \ {\n            result = result ::: group.sorted\n        }\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppq1b2rf_.scala:28)\n\tat Problem.main(tmppq1b2rf_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979850
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.map(_.length).sortWith(_\
    \ < _).map(x => lst.filter(_.length == x)).flatten\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpp0p85dia.scala:23)\n\tat Problem.main(tmpp0p85dia.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979849
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        // the sort method\
    \ for lists in Scala takes a\n        // function as its parameter which takes\
    \ two\n        // arguments, and should return true if the\n        // first argument\
    \ should go before the second\n        // in the sorted list\n        lst.sortWith((x,\
    \ y) => x.length() < y.length())\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwllui6od.scala:28)\n\tat Problem.main(tmpwllui6od.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979850
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        if (lst.length\
    \ == 0) return lst\n        val h = lst.head\n        val t = lst.tail\n     \
    \   var nh = List[String]()\n        for (i <- 0 until h.length by 2) nh = nh\
    \ :+ h(i).toString\n        if (nh.length == 0) sortedListSum(t)\n        else\
    \ sortedListSum(nh) ::: sortedListSum(t)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat scala.collection.mutable.ListBuffer.addAll(ListBuffer.scala:145)\n\
    \tat scala.collection.mutable.ListBuffer.addAll(ListBuffer.scala:39)\n\tat scala.collection.StrictOptimizedSeqOps.appended(StrictOptimizedSeqOps.scala:50)\n\
    \tat scala.collection.StrictOptimizedSeqOps.appended$(StrictOptimizedSeqOps.scala:45)\n\
    \tat scala.collection.immutable.List.appended(List.scala:79)\n\tat scala.collection.SeqOps.$colon$plus(Seq.scala:149)\n\
    \tat scala.collection.SeqOps.$colon$plus$(Seq.scala:149)\n\tat scala.collection.AbstractSeq.$colon$plus(Seq.scala:1161)\n\
    \tat Problem$.sortedListSum$$anonfun$1(tmp804tbn8i.scala:24)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.sortedListSum(tmp804tbn8i.scala:24)\n\
    \tat Problem$.sortedListSum(tmp804tbn8i.scala:26)\n\tat Problem$.sortedListSum(tmp804tbn8i.scala:26)\n\
    \tat Problem$.sortedListSum(tmp804tbn8i.scala:26)\n\tat Problem$.sortedListSum(tmp804tbn8i.scala:26)\n\
    \tat Problem$.sortedListSum(tmp804tbn8i.scala:26)\n\tat Problem$.sortedListSum(tmp804tbn8i.scala:26)\n\
    \tat Problem$.sortedListSum(tmp804tbn8i.scala:26)\n\tat Problem$.sortedListSum(tmp804tbn8i.scala:26)\n\
    \tat Problem$.sortedListSum(tmp804tbn8i.scala:26)\n\tat Problem$.sortedListSum(tmp804tbn8i.scala:26)\n\
    \tat Problem$.sortedListSum(tmp804tbn8i.scala:26)\n\tat Problem$.sortedListSum(tmp804tbn8i.scala:26)\n\
    \tat Problem$.sortedListSum(tmp804tbn8i.scala:26)\n\tat Problem$.sortedListSum(tmp804tbn8i.scala:26)\n\
    \tat Problem$.sortedListSum(tmp804tbn8i.scala:26)\n\tat Problem$.sortedListSum(tmp804tbn8i.scala:26)\n\
    \tat Problem$.sortedListSum(tmp804tbn8i.scala:26)\n\tat Problem$.sortedListSum(tmp804tbn8i.scala:26)\n\
    \tat Problem$.sortedListSum(tmp804tbn8i.scala:26)\n\tat Problem$.sortedListSum(tmp804tbn8i.scala:26)\n\
    \tat Problem$.sortedListSum(tmp804tbn8i.scala:26)\n\tat Problem$.sortedListSum(tmp804tbn8i.scala:26)\n\
    \tat Problem$.sortedListSum(tmp804tbn8i.scala:26)\n\tat Problem$.sortedListSum(tmp804tbn8i.scala:26)\n\
    \tat Problem$.sortedListSum(tm"
  stdout: ''
  timestamp: 1659979852
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.sortWith(_.length\
    \ < _.length)\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9k6b47m7.scala:23)\n\tat Problem.main(tmp9k6b47m7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979839
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.filter(word\
    \ => word.length % 2 == 0).sortWith((x, y) => if (x.length == y.length) x < y\
    \ else x.length < y.length)\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979854
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val aa = lst.map(_.length)\n\
    \        val aaa = aa.sortWith(_ < _)\n        val bb = lst.sortWith(_ < _)\n\
    \        aaa.map(x => bb(aa.indexOf(x)))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsy3gctz5.scala:26)\n\tat Problem.main(tmpsy3gctz5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979857
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        def sortLst(word\
    \ : String, lst : List[String]) : List[String] = {\n            var mylst = List[String]()\n\
    \            if (lst.isEmpty) {\n                mylst = List(word)\n        \
    \    } else {\n                mylst = lst\n                if (word.length()\
    \ <= lst.head.length()) {\n                    mylst = List(word) ::: lst\n  \
    \              } else {\n                    mylst = List(lst.head) ::: sortLst(word,\
    \ lst.tail)\n                }\n            }\n            mylst\n        }\n\
    \        var result = List[String]()\n        if (lst.isEmpty) {\n           \
    \ result = lst\n        } else {\n            result = sortLst(lst.head, sortedListSum(lst.tail))\n\
    \        }\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8qv24l24.scala:43)\n\tat Problem.main(tmp8qv24l24.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979857
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        if (lst.isEmpty)\
    \ return List[String]()\n        if (lst.length == 1) return lst\n        val\
    \ sortedList = lst.sortWith((a, b) => a.length < b.length)\n        sortedList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpac2v47is.scala:26)\n\tat Problem.main(tmpac2v47is.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979858
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        // (List[String](\"\
    aa\", \"a\", \"aaa\"))\n        // (List[String](\"a\", \"aa\", \"aaa\"))\n  \
    \      // (List[String](\"a\", \"aa\", \"aaa\"))\n        // (List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\"))\n        // (List[String](\"a\", \"ab\", \"aaa\"\
    , \"cd\"))\n        // (List[String](\"a\", \"ab\", \"aaa\", \"cd\"))\n      \
    \  // (List[String](\"a\", \"ab\", \"aaa\", \"cd\"))\n        def isEven(s : String)\
    \ : Boolean = {\n            return ((s.length % 2) == 0)\n        }\n       \
    \ var newList = lst.filter(isEven)\n        println(newList)\n        newList\
    \ = newList.sortWith(_.length < _.length)\n        return newList\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpas5e7fpp.scala:39)\n\tat Problem.main(tmpas5e7fpp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: 'List(aa)

    List(school, AI, asdf)

    List()

    List(dcba, abcd)

    '
  timestamp: 1659979858
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        // returns a list\
    \ of strings of even length in ascending order\n        var res = List[String]()\n\
    \        for (v <- lst.sorted) {\n            if (v.length % 2 == 0) res = res\
    \ :+ v\n        }\n        res\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp21v93uep.scala:34)\n\tat Problem.main(tmp21v93uep.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979859
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        // (\"a\", \"\
    aa\", \"aaa\", \"b\", \"bb\", \"bbb\")\n        // (\"aa\", \"aaa\", \"bb\", \"\
    bbb\")\n        var lenMap = Map[Int, List[String]]()\n        for (str <- lst)\
    \ {\n            if (lenMap.contains(str.length)) {\n                lenMap(str.length)\
    \ = lenMap(str.length) :+ str\n            } else {\n                lenMap(str.length)\
    \ = List(str)\n            }\n        }\n        var sortedList = List[String]()\n\
    \        for (i <- 1 to lenMap.size) {\n            for (str <- lenMap(i)) {\n\
    \                sortedList = sortedList :+ str\n            }\n        }\n  \
    \      return sortedList\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsd7vgqbc.scala:39)\n\tat Problem.main(tmpsd7vgqbc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979859
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.distinct.sorted\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpi0teqh5g.scala:23)\n\tat Problem.main(tmpi0teqh5g.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979859
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val count = lst.length\n\
    \        val arr = Array.ofDim[String](count)\n        var i = 0\n        for\
    \ (str <- lst) {\n            arr(i) = str\n            i += 1\n        }\n  \
    \      scala.util.Sorting.quickSort(arr)\n        lst.clear\n        for (str\
    \ <- arr) lst.::=(str)\n        lst\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp99vg0u35.scala:28:12 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        lst.clear\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m   value clear is not a member of List[String] - did you mean\
    \ lst.clone?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp99vg0u35.scala:29:29\
    \ ------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mfor\e[0m (str\
    \ <- arr) lst.::=(str)\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        value ::= is not a member of List[String] - did you\
    \ mean lst.::?\n2 errors found\n"
  stdout: ''
  timestamp: 1659979859
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val lst1 = lst.sorted\n\
    \        val lst2 = lst1.filter(x => (x.length % 2 == 0))\n        return lst2\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpz2ww0j1b.scala:31)\n\tat Problem.main(tmpz2ww0j1b.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979859
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val sortedList\
    \ = lst.sortWith(_.length < _.length)\n        val oddList = sortedList.filter(e\
    \ => (e.length % 2 == 1))\n        val evenList = sortedList.filter(e => (e.length\
    \ % 2 == 0))\n        return (evenList ::: oddList)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpl7v4hwuw.scala:26)\n\tat Problem.main(tmpl7v4hwuw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979859
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val r = lst.groupBy(x\
    \ => x.length)\n        val r2 = r.map(x => x._2.sorted).toList.sortBy(x => x.head.length)\n\
    \        r2.flatMap(x => x)\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptmnlw826.scala:25)\n\tat Problem.main(tmptmnlw826.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979860
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n    \t// We dont need\
    \ to filter out odd numbered strings because \n    \t// all of them will be the\
    \ same length and should never be odd length!\n    \tlst.sortWith(_.length < _.length)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgheukrnq.scala:25)\n\tat Problem.main(tmpgheukrnq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979860
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.filter(x =>\
    \ x.length % 2 == 0).sortWith((a, b) => a.length < b.length)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2k3u2dj9.scala:26)\n\tat Problem.main(tmp2k3u2dj9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979859
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.sortWith((a,\
    \ b) => a.length < b.length || (a.length == b.length && a < b)).filter(x => x.length\
    \ % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979860
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        def sumList(lst\
    \ : List[String]) : Int = lst match {\n            case Nil => 0\n           \
    \ case head :: tail => head.size + sumList(tail)\n        }\n        def merge(lst1\
    \ : List[String], lst2 : List[String]) : List[String] = {\n            if (lst1.size\
    \ == 0) lst2\n            else if (lst2.size == 0) lst1\n            else if (lst1.head.size\
    \ < lst2.head.size) lst1.head :: merge(lst1.tail, lst2)\n            else if (lst1.head.size\
    \ > lst2.head.size) lst2.head :: merge(lst1, lst2.tail)\n            else if (lst1.head.compareTo(lst2.head)\
    \ < 0) lst1.head :: merge(lst1.tail, lst2)\n            else lst2.head :: merge(lst1,\
    \ lst2.tail)\n        }\n        def mergeSort(lst : List[String]) : List[String]\
    \ = {\n            val mid = lst.size / 2\n            if (mid == 0) lst\n   \
    \         else merge(mergeSort(lst.slice(0, mid)), mergeSort(lst.slice(mid, lst.size)))\n\
    \        }\n        mergeSort(lst.filter(s => s.size % 2 == 0))\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\"\
    , \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979860
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        var map = scala.collection.mutable.Map[Int,\
    \ List[String]]()\n        var lst2 = lst.sortWith((a, b) => (a.length() < b.length()))\n\
    \        var count = 1\n        var prev = \"\"\n        for (item <- lst2) {\n\
    \            if (count == 1) {\n                prev = item\n                count\
    \ += 1\n            } else {\n                if (item.length() != prev.length())\
    \ {\n                    map += (item.length() -> List(item))\n              \
    \      prev = item\n                } else {\n                    map(item.length())\
    \ = item :: map(item.length())\n                }\n            }\n        }\n\
    \        var lst3 = List[String]()\n        var lst4 = List[Int]()\n        for\
    \ (item <- map) {\n            lst4 = item._1 :: lst4\n        }\n        lst4\
    \ = lst4.sortWith((a, b) => (a < b))\n        for (item <- lst4) {\n         \
    \   for (item2 <- map(item)) {\n                lst3 = item2 :: lst3\n       \
    \     }\n        }\n        lst3.reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0vbwq3wq.scala:51)\n\tat Problem.main(tmp0vbwq3wq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979861
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.sorted\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpds2hj2o_.scala:23)\n\tat Problem.main(tmpds2hj2o_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979805
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.sortWith((l,\
    \ r) => if (l.length > r.length) true else if (l.length == r.length) (l.compareTo(r)\
    \ < 0) else false)\n        .filter((word) => word.length % 2 == 0)\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpb7w7_mu5.scala:25)\n\tat Problem.main(tmpb7w7_mu5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979861
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        var oddList =\
    \ List[String]()\n        var evenList = List[String]()\n        for (s <- lst)\
    \ {\n            if (s.length % 2 == 0) {\n                evenList = evenList\
    \ :+ s\n            } else {\n                oddList = oddList :+ s\n       \
    \     }\n        }\n        evenList.sortWith((s1, s2) => s1.length < s2.length)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw86yk2s0.scala:35)\n\tat Problem.main(tmpw86yk2s0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979860
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        return lst.sortWith(_.length\
    \ < _.length)\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwnk2wxu0.scala:23)\n\tat Problem.main(tmpwnk2wxu0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979861
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.sorted.groupBy(_.length).map(_._2.sorted).toList.flatten\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpihf0__r9.scala:23)\n\tat Problem.main(tmpihf0__r9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979861
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        var res = new\
    \ HashMap[Int, String]\n        for (i <- lst) {\n            val key = i.length\n\
    \            res(key) = res.getOrElse(key, \"\") + i\n        }\n        res.keys.toList.sorted.map(res)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8dms4sob.scala:28)\n\tat Problem.main(tmp8dms4sob.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979863
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val evenList =\
    \ lst.filter(x => x.length % 2 == 0)\n        val sortedEvenList = evenList.sortWith(_.length\
    \ < _.length)\n        return sortedEvenList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmp2twqo4.scala:28)\n\tat Problem.main(tmpmp2twqo4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979865
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.filter(x =>\
    \ x.length % 2 == 0).sortWith((x, y) => x.length < y.length)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfcu6erg4.scala:26)\n\tat Problem.main(tmpfcu6erg4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979866
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val lst2 = lst.sorted\n\
    \        val lst3 = lst2.groupBy(_.length)\n        val lst4 = lst3.toList.sortBy(_._1)\n\
    \        lst4.flatMap(x => x._2)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpyop9406_.scala:26)\n\tat Problem.main(tmpyop9406_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979868
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        def sortedListSumHelper(lst\
    \ : List[String], current : String, acc : List[String]) : List[String] = {\n \
    \           lst match {\n                case Nil => acc\n                case\
    \ h :: t =>\n                    if (h.length() < current.length()) {\n      \
    \                  sortedListSumHelper(t, current, acc :+ h)\n               \
    \     } else {\n                        sortedListSumHelper(t, current, acc)\n\
    \                    }\n            }\n        }\n        lst match {\n      \
    \      case Nil => lst\n            case h :: t => {\n                val result\
    \ = sortedListSumHelper(t, h, List(h))\n                result.sortWith((x, y)\
    \ => if (x.length() == y.length()) x.compareTo(y) <= 0 else x.length() < y.length())\n\
    \            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6hdaodrh.scala:40)\n\tat Problem.main(tmp6hdaodrh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979869
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val lenghtComparator\
    \ = new Comparator[String]() {\n            def compare(o1 : String, o2 : String)\
    \ : Int = o1.length - o2.length\n        }\n        val alphaComparator = new\
    \ Comparator[String]() {\n            def compare(o1 : String, o2 : String) :\
    \ Int = o1.compareTo(o2)\n        }\n        val m = new TreeMap[String, String](lenghtComparator)\n\
    \        for (e <- lst) m.put(e, e)\n        val lst1 = m.values\n        val\
    \ lst2 = new TreeSet[String](alphaComparator)\n        for (e <- lst1) lst2.add(e)\n\
    \        lst2.toList\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp37krbmbn.scala:20:35 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mlenghtComparator\e[0m =\
    \ \e[33mnew\e[0m \e[35mComparator\e[0m[\e[35mString\e[0m]() {\n\e[31m\e[31m  \
    \ |\e[0m                                   ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                                 Not found: type Comparator\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp37krbmbn.scala:23:34 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36malphaComparator\e[0m = \e\
    [33mnew\e[0m \e[35mComparator\e[0m[\e[35mString\e[0m]() {\n\e[31m\e[31m   |\e\
    [0m                                  ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                          Not found: type Comparator\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- Error: /tmp/tmp37krbmbn.scala:26:44 -----------------------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = \e[33mnew\e[0m\
    \ \e[35mTreeMap\e[0m[\e[35mString\e[0m, \e[35mString\e[0m](lenghtComparator)\n\
    \e[31m\e[31m   |\e[0m                                            ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m         too many arguments for \e[33mconstructor\e[0m \e\
    [35mTreeMap\e[0m in \e[33mclass\e[0m \e[35mTreeMap\e[0m: ()\n\e[31m   |\e[0m \
    \          (\e[33mimplicit \e[0mord: Ordering[String]): \n\e[31m   |\e[0m    \
    \         scala.collection.mutable.TreeMap[String, String]\n\e[31m\e[31m-- Error:\
    \ /tmp/tmp37krbmbn.scala:29:39 -----------------------------------------\e[0m\e\
    [0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mlst2\e[0m = \e[33mnew\e[0m \e\
    [35mTreeSet\e[0m[\e[35mString\e[0m](alphaComparator)\n\e[31m\e[31m   |\e[0m  \
    \                                     ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mtoo\
    \ many arguments for \e[33mconstructor\e[0m \e[35mTreeSet\e[0m in \e[33mclass\e\
    [0m \e[35mTreeSet\e[0m: ()(\e[33mimplicit \e[0mord: Ordering[String]): scala.collection.mutable.TreeSet[String]\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659979865
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        def sort(lst :\
    \ List[String]) : List[String] = {\n            lst.sortWith((s1, s2) => s1.length\
    \ < s2.length || (s1.length == s2.length && s1 < s2))\n        }\n        def\
    \ deleteOdd(lst : List[String]) : List[String] = {\n            lst.filter(str\
    \ => str.length % 2 == 0)\n        }\n        sort(deleteOdd(lst))\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979870
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.filter(a =>\
    \ a.length % 2 == 0).sortWith((a, b) => a.length < b.length)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp89bdpzym.scala:26)\n\tat Problem.main(tmp89bdpzym.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979869
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.filter(_.length\
    \ % 2 == 0).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8wyn60z4.scala:29)\n\tat Problem.main(tmp8wyn60z4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979849
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n      var lst2 = lst.sortWith(_.length\
    \ < _.length)\n      var lst3 = lst2.filter(x => x.length % 2 == 0)\n      lst3\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5weuc5td.scala:28)\n\tat Problem.main(tmp5weuc5td.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979870
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        return lst.filter(x\
    \ => x.length % 2 == 0).sorted\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7unfug0h.scala:29)\n\tat Problem.main(tmp7unfug0h.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979805
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        var ans = new\
    \ ListBuffer[String]()\n        for (i <- lst) {\n            if (i.length % 2\
    \ == 0) {\n                ans += i\n            }\n        }\n        ans.toList.sorted\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdopyxfa5.scala:35)\n\tat Problem.main(tmpdopyxfa5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979870
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        // Returns a list\
    \ of string that contains only the even length words\n        // and is sorted\
    \ in a ascending order.\n        def sortedEvenLst(lst : List[String]) : List[String]\
    \ = {\n            if (lst.isEmpty) lst\n            else if (lst.head.length\
    \ % 2 == 0) lst.head :: sortedEvenLst(lst.tail)\n            else sortedEvenLst(lst.tail)\n\
    \        }\n        // Sorts the list of strings in an ascending order by length.\n\
    \        // If two words have the same length, sort the list alphabetically.\n\
    \        def sortedList(lst : List[String]) : List[String] = {\n            if\
    \ (lst.length <= 1) lst\n            else {\n                val pivot = lst(lst.length\
    \ / 2)\n                val (smaller, rest) = lst.partition(x => x.length < pivot.length\
    \ || (x.length == pivot.length && x < pivot))\n                sortedList(smaller)\
    \ ::: pivot :: sortedList(rest)\n            }\n        }\n        sortedList(sortedEvenLst(lst))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat scala.collection.IterableOnceOps.foreach(IterableOnce.scala:562)\n\
    \tat scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:561)\n\tat scala.collection.AbstractIterator.foreach(Iterator.scala:1293)\n\
    \tat scala.collection.immutable.List.partition(List.scala:588)\n\tat Problem$.sortedList$1(tmpc6iwkic1.scala:33)\n\
    \tat Problem$.sortedList$1(tmpc6iwkic1.scala:34)\n\tat Problem$.sortedList$1(tmpc6iwkic1.scala:34)\n\
    \tat Problem$.sortedList$1(tmpc6iwkic1.scala:34)\n\tat Problem$.sortedList$1(tmpc6iwkic1.scala:34)\n\
    \tat Problem$.sortedList$1(tmpc6iwkic1.scala:34)\n\tat Problem$.sortedList$1(tmpc6iwkic1.scala:34)\n\
    \tat Problem$.sortedList$1(tmpc6iwkic1.scala:34)\n\tat Problem$.sortedList$1(tmpc6iwkic1.scala:34)\n\
    \tat Problem$.sortedList$1(tmpc6iwkic1.scala:34)\n\tat Problem$.sortedList$1(tmpc6iwkic1.scala:34)\n\
    \tat Problem$.sortedList$1(tmpc6iwkic1.scala:34)\n\tat Problem$.sortedList$1(tmpc6iwkic1.scala:34)\n\
    \tat Problem$.sortedList$1(tmpc6iwkic1.scala:34)\n\tat Problem$.sortedList$1(tmpc6iwkic1.scala:34)\n\
    \tat Problem$.sortedList$1(tmpc6iwkic1.scala:34)\n\tat Problem$.sortedList$1(tmpc6iwkic1.scala:34)\n\
    \tat Problem$.sortedList$1(tmpc6iwkic1.scala:34)\n\tat Problem$.sortedList$1(tmpc6iwkic1.scala:34)\n\
    \tat Problem$.sortedList$1(tmpc6iwkic1.scala:34)\n\tat Problem$.sortedList$1(tmpc6iwkic1.scala:34)\n\
    \tat Problem$.sortedList$1(tmpc6iwkic1.scala:34)\n\tat Problem$.sortedList$1(tmpc6iwkic1.scala:34)\n\
    \tat Problem$.sortedList$1(tmpc6iwkic1.scala:34)\n\tat Problem$.sortedList$1(tmpc6iwkic1.scala:34)\n\
    \tat Problem$.sortedList$1(tmpc6iwkic1.scala:34)\n\tat Problem$.sortedList$1(tmpc6iwkic1.scala:34)\n\
    \tat Problem$.sortedList$1(tmpc6iwkic1.scala:34)\n\tat Problem$.sortedList$1(tmpc6iwkic1.scala:34)\n\
    \tat Problem$.sortedList$1(tmpc6iwkic1.scala:34)\n\tat Problem$.sortedList$1(tmpc6iwkic1.scala:34)\n\
    \tat Problem$.sortedList$1(tmpc6iwkic1.scala:34)\n\tat Problem$.sortedList$1(tmpc6iwkic1.scala:34)\n\
    \tat Problem$.sortedList$1(tmpc6iwkic1.scala:34)\n\tat Problem$.sortedList$1(tmpc6iwkic1.scala:34)\n\
    \tat Problem$.sortedList$1(tmpc6iwkic1.scala:"
  stdout: ''
  timestamp: 1659979871
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        if (lst.length\
    \ == 0) {\n            return lst\n        }\n        var sumList = new ListBuffer[String]()\n\
    \        for (str <- lst) {\n            if (str.length % 2 == 0) {\n        \
    \        sumList += str\n            }\n        }\n        return sumList.toList.sorted\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpr995nz2u.scala:38)\n\tat Problem.main(tmpr995nz2u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979870
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n      // f: (A, B) =>\
    \ C\n      lst.sortWith((x, y) => x.length < y.length)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpk1orgp00.scala:24)\n\tat Problem.main(tmpk1orgp00.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979870
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val temp = lst.sortWith((a,\
    \ b) => (a.length < b.length))\n        val temp2 = new ListBuffer[String]()\n\
    \        for (i <- 0 until temp.length) {\n            if (temp(i).length % 2\
    \ == 0) {\n                temp2 += temp(i)\n            }\n        }\n      \
    \  return temp2.toList\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp442vuj9j.scala:33)\n\tat Problem.main(tmp442vuj9j.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979871
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        var s : List[String]\
    \ = List[String]()\n        for (i <- lst) {\n            if (i.length % 2 ==\
    \ 0) {\n                s = s :+ i\n            }\n        }\n        return s.sorted\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnf34a8gs.scala:35)\n\tat Problem.main(tmpnf34a8gs.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979871
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val sortedList\
    \ = lst.sortWith(_.length < _.length)\n        val evenLengths = new ArrayBuffer[String]\n\
    \        var i = 0\n        while (i < sortedList.length) {\n            val thisLength\
    \ = sortedList(i).length\n            if (thisLength % 2 == 0) evenLengths +=\
    \ sortedList(i)\n            else break\n            i += 1\n        }\n     \
    \   evenLengths.toList\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp88d01jj4.scala:26:17 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            \e[33melse\e[0m break\n\e[31m\e[31m   |\e\
    [0m                 ^^^^^\e[0m\n\e[31m   |\e[0m                 Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979867
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        return lst.sortWith((s1,\
    \ s2) => (s1.length < s2.length) || (s1.length == s2.length && s1 < s2))\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw34c97dx.scala:23)\n\tat Problem.main(tmpw34c97dx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979871
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.filter(word\
    \ => word.length % 2 == 0).sorted\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpg3j0dtl9.scala:29)\n\tat Problem.main(tmpg3j0dtl9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979871
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val res = new\
    \ ListBuffer[String]()\n        val lenMap = new HashMap[Int, ListBuffer[String]]()\n\
    \        lst.foreach(item => {\n            if (lenMap.contains(item.length))\
    \ {\n                lenMap(item.length) += item\n            } else {\n     \
    \           lenMap += (item.length -> new ListBuffer[String](List(item)))\n  \
    \          }\n        })\n        lenMap.toList.sortBy(_._1).foreach(item => {\n\
    \            res ++= item._2.toList.sorted\n        })\n        res.toList\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp8xjlo6d3.scala:26:69 -----------------------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                lenMap += (item.length -> \e[33mnew\e\
    [0m \e[35mListBuffer\e[0m[\e[35mString\e[0m](List(item)))\n\e[31m\e[31m   |\e\
    [0m                                                                 ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mtoo many arguments for \e[33mconstructor\e[0m \e[35mListBuffer\e\
    [0m in \e[33mclass\e[0m \e[35mListBuffer\e[0m: (): scala.collection.mutable.ListBuffer[String]\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659979869
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        if (lst.length\
    \ == 0) lst\n        else {\n            def sort_rec(lst : List[String], result\
    \ : List[String]) : List[String] = {\n                if (lst.length == 0) result\n\
    \                else {\n                    val lst_sorted = lst.sortWith(_ <\
    \ _)\n                    val min_length = min(lst_sorted(0).length, lst_sorted(1).length)\n\
    \                    val min_list = lst_sorted.filter(_.length == min_length)\n\
    \                    val max_list = lst_sorted.filter(_.length != min_length)\n\
    \                    val new_result = result ++ min_list\n                   \
    \ sort_rec(max_list, new_result)\n                }\n            }\n         \
    \   sort_rec(lst, List[String]())\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 1\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.sort_rec$1(tmp8ge5gn08.scala:26)\n\tat Problem$.sortedListSum(tmp8ge5gn08.scala:33)\n\
    \tat Problem$.main(tmp8ge5gn08.scala:37)\n\tat Problem.main(tmp8ge5gn08.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979872
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        var arr = new\
    \ Array[String](lst.length)\n        var i = 0\n        for (i <- 0 until lst.length)\
    \ {\n            arr(i) = lst(i)\n        }\n        var j = 0\n        for (i\
    \ <- 0 until arr.length - 1) {\n            for (j <- i + 1 until arr.length)\
    \ {\n                if (arr(i).length > arr(j).length) {\n                  \
    \  var tmp = arr(i)\n                    arr(i) = arr(j)\n                   \
    \ arr(j) = tmp\n                }\n            }\n        }\n        var ret =\
    \ new Array[String](arr.length)\n        j = 0\n        for (i <- 0 until arr.length)\
    \ {\n            var t = 0\n            for (t <- 0 until j) {\n             \
    \   if (arr(i) == ret(t)) {\n                    break\n                }\n  \
    \          }\n            if (t == j) {\n                ret(j) = arr(i)\n   \
    \             j += 1\n            }\n        }\n        ret.slice(0, j).toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1go7w3t3.scala:41:20 ------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979869
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.filter((str)\
    \ => (str.length % 2 == 0)).sortWith((str1, str2) => str1.length < str2.length)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpr5ochmo5.scala:26)\n\tat Problem.main(tmpr5ochmo5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979872
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val oddList =\
    \ lst.filter(_.length % 2 == 0)\n        val sortedOddList = oddList.sortWith(_.length\
    \ < _.length)\n        sortedOddList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpq59p_ouv.scala:28)\n\tat Problem.main(tmpq59p_ouv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979872
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        var nlst = new\
    \ ListBuffer[String]\n        var aa = new ListBuffer[String]\n        var aa2\
    \ = new ListBuffer[String]\n        for (i <- lst) {\n            if (i.length\
    \ % 2 == 0) {\n                nlst += i\n            }\n        }\n        for\
    \ (i <- nlst) {\n            if (i.length == 2) {\n                aa += i\n \
    \           }\n        }\n        for (i <- nlst) {\n            if (i.length\
    \ == 4) {\n                aa2 += i\n            }\n        }\n        return\
    \ aa.toList ++ aa2.toList\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_ytpi3rh.scala:42)\n\tat Problem.main(tmp_ytpi3rh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979874
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        def sortedListSum(lst\
    \ : List[String], acc : List[String]) : List[String] = {\n            if (lst.isEmpty)\
    \ acc\n            else if (lst.head.length % 2 == 0) sortedListSum(lst.tail,\
    \ acc :+ lst.head)\n            else sortedListSum(lst.tail, acc)\n        }\n\
    \        sortedListSum(lst, List[String]()).sortWith((a, b) => a.length < b.length\
    \ || (a.length == b.length && a.compareTo(b) < 0))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979876
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.sortWith((x,\
    \ y) => x.length < y.length)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplemno067.scala:23)\n\tat Problem.main(tmplemno067.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979876
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        var newLst = lst.sortWith(_.length\
    \ < _.length)\n        var result = newLst.reduceLeft((a, b) => a + b)\n     \
    \   var resultLst = List(result)\n        return resultLst\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkymcea6f.scala:26)\n\tat Problem.main(tmpkymcea6f.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979877
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        // Counter which\
    \ will count the number of elements that were deleted.\n        // We have to\
    \ go through the list once, and delete elements that have\n        // odd lengths,\
    \ so that's O(n).\n        // We have to do the same for counting, so O(n) again,\
    \ making it O(2n) => O(n).\n        // Finally, we need to sort the remaining\
    \ elements, so once again O(n).\n        // We can see that the algorithm is O(n).\n\
    \        val count = lst.count(s => (s.length % 2) == 0)\n        val res = lst.filter(s\
    \ => (s.length % 2) == 0)\n        val srt = res.sortWith((a, b) => (a.length\
    \ < b.length))\n        srt\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4li91fxs.scala:35)\n\tat Problem.main(tmp4li91fxs.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979878
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        var new_lst =\
    \ lst.toBuffer\n        for (i <- 0 until new_lst.length) {\n            for (j\
    \ <- 0 until new_lst.length - 1) {\n                if (new_lst(j).length > new_lst(j\
    \ + 1).length) {\n                    var tmp = new_lst(j)\n                 \
    \   new_lst(j) = new_lst(j + 1)\n                    new_lst(j + 1) = tmp\n  \
    \              }\n            }\n        }\n        // delete odd length strings\n\
    \        for (i <- 0 until new_lst.length) {\n            if (new_lst(i).length\
    \ % 2 == 1) {\n                new_lst.remove(i)\n            }\n        }\n \
    \       // sort alphabetically\n        for (i <- 0 until new_lst.length) {\n\
    \            for (j <- 0 until new_lst.length - 1) {\n                if (new_lst(j)\
    \ > new_lst(j + 1)) {\n                    var tmp = new_lst(j)\n            \
    \        new_lst(j) = new_lst(j + 1)\n                    new_lst(j + 1) = tmp\n\
    \                }\n            }\n        }\n        return new_lst.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 2 is out of bounds (min 0, max 0)\n\
    \tat scala.collection.mutable.ArrayBuffer.apply(ArrayBuffer.scala:99)\n\tat Problem$.sortedListSum$$anonfun$2(tmp8omz_mue.scala:32)\n\
    \tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.sortedListSum(tmp8omz_mue.scala:35)\n\
    \tat Problem$.main(tmp8omz_mue.scala:49)\n\tat Problem.main(tmp8omz_mue.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979880
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        return lst.sorted\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdawvh2qo.scala:23)\n\tat Problem.main(tmpdawvh2qo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979880
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.groupBy(i\
    \ => i.length).map(_._2.sorted).toList.sortBy(_.head.length).flatten\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp37vaha79.scala:23)\n\tat Problem.main(tmp37vaha79.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979880
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        var newLst = lst.sorted\n\
    \        var countedLst = newLst.groupBy(identity).mapValues(_.size)\n       \
    \ var newList = for ((k,v) <- countedLst) yield (k, v)\n        return newList.toList.sortBy(x\
    \ => (x._2, x._1))\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7271ra94.scala:23:15\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mreturn\e[0m newList.toList.sortBy(\e\
    [36mx\e[0m => (x._2, x._1))\n\e[31m\e[31m   |\e[0m               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m               Found:    List[\e[1m\e[31m(\e[0mString\e[1m\e\
    [31m,\e[0m\e[1m\e[31m \e[0m\e[1m\e[31mInt\e[0m\e[1m\e[31m)\e[0m]\n\e[31m   |\e\
    [0m               Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659979879
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val filteredList\
    \ = lst.filter(x => x.length % 2 == 0)\n        val sortedList = filteredList.sortWith(_.length\
    \ < _.length)\n        sortedList\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt4d7mqma.scala:28)\n\tat Problem.main(tmpt4d7mqma.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979879
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val hash = HashMap[Int,\
    \ List[String]]()\n        lst.foreach(x => {\n            val len = x.length\n\
    \            if (hash.contains(len)) hash(len) = x :: hash(len)\n            else\
    \ hash(len) = List(x)\n        })\n        val answer = hash.keys.toList.sorted.flatMap(x\
    \ => hash(x).sorted)\n        answer\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpi942wi85.scala:30)\n\tat Problem.main(tmpi942wi85.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        return lst.filter(x\
    \ => x.length % 2 == 0).sortWith((x, y) => x.length < y.length)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\"\
    , \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpr3bvl0ef.scala:26)\n\tat Problem.main(tmpr3bvl0ef.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n      var res = new ListBuffer[String]()\n\
    \      for (s <- lst.sorted) {\n        if (s.length % 2 == 0) res += s\n    \
    \  }\n      res.toList\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2lpulnzu.scala:33)\n\tat Problem.main(tmp2lpulnzu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.sortWith((s1,\
    \ s2) => s1.length < s2.length || (s1.length == s2.length && s1 < s2))\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcfmdd510.scala:23)\n\tat Problem.main(tmpcfmdd510.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979882
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.filter(a =>\
    \ a.length % 2 == 0).sorted.sorted(new Ordering[String] {\n                def\
    \ compare(a : String, b : String) = a.compareTo(b)\n            })\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpuw0bg4_o.scala:31)\n\tat Problem.main(tmpuw0bg4_o.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979882
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n      return lst.filter(word\
    \ => word.length % 2 == 0).sortWith((s, t) => s.length < t.length || (s.length\
    \ == t.length && s < t))\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979881
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.map(_.length).distinct.sorted.flatMap(x\
    \ => lst.filter(_.length == x).sorted)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1b6r_vue.scala:23)\n\tat Problem.main(tmp1b6r_vue.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979882
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.filter(x =>\
    \ x.length % 2 == 0).sortWith((a, b) => {\n            if (a.length == b.length)\
    \ a < b\n            else a.length < b.length\n        })\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979883
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        return (lst.filter((str)\
    \ => str.length % 2 == 0)).sorted\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpd268nmkg.scala:29)\n\tat Problem.main(tmpd268nmkg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979882
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val l = lst.length\n\
    \        var res = new ListBuffer[String]()\n        for (i <- 0 until l) {\n\
    \            var minj = i\n            for (j <- i + 1 until l) {\n          \
    \      if (lst(j).length < lst(minj).length) {\n                    minj = j\n\
    \                }\n            }\n            val temp = lst(i)\n           \
    \ lst(i) = lst(minj)\n            lst(minj) = temp\n            if (lst(i).length\
    \ % 2 == 0) res += lst(i)\n        }\n        res.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphj04ngko.scala:30:12 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m            lst(i) = lst(minj)\n\e[31m\e[31m   |\e[0m\
    \            ^^^\e[0m\n\e[31m   |\e[0mvalue update is not a member of List[String]\
    \ - did you mean lst.updated?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphj04ngko.scala:31:12\
    \ ------------------------\e[0m\e[0m\n\e[31m31 |\e[0m            lst(minj) = temp\n\
    \e[31m\e[31m   |\e[0m            ^^^\e[0m\n\e[31m   |\e[0mvalue update is not\
    \ a member of List[String] - did you mean lst.updated?\n2 errors found\n"
  stdout: ''
  timestamp: 1659979882
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n      var m = Map[Int,\
    \ List[String]]()\n      lst.foreach(i => {\n        val l = i.length\n      \
    \  if (m.contains(l)) {\n          m(l) = i :: m(l)\n        } else {\n      \
    \    m += l -> List(i)\n        }\n      })\n      m.values.toList.map(v => v.sorted).flatten\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprcd2tq3x.scala:32)\n\tat Problem.main(tmprcd2tq3x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979883
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val sortedList\
    \ = lst.sortWith((x, y) => x.length < y.length)\n        val sumList = sortedList.groupBy(_.length).mapValues(_.length).toList.sortWith((x,\
    \ y) => x._1 < y._1)\n        val revSumList = sumList.reverse\n        val map\
    \ = lst.map(x => x.length -> x).toMap\n        revSumList.foldLeft(List[String]())((res,\
    \ x) => res ++ List.fill(x._2)(map(x._1)))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpo29vxov_.scala:27)\n\tat Problem.main(tmpo29vxov_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.sortWith((a,\
    \ b) => (a.length < b.length) || ((a.length == b.length) && (a < b)))\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprpp1q1le.scala:23)\n\tat Problem.main(tmprpp1q1le.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        // Implement me!\n\
    \        lst.sortWith((x, y) => (x.length < y.length))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptigmf0jy.scala:24)\n\tat Problem.main(tmptigmf0jy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979885
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        var sortedList\
    \ = List[String]()\n        if (lst.length == 0) return sortedList\n        var\
    \ sortedMap = Map[Int, List[String]]()\n        for (s <- lst) {\n           \
    \ var currentLength = s.length\n            var currentList = List[String]()\n\
    \            if (sortedMap.contains(currentLength)) {\n                currentList\
    \ = sortedMap(currentLength)\n            }\n            currentList = s :: currentList\n\
    \            sortedMap += (currentLength -> currentList)\n        }\n        val\
    \ list = sortedMap.toList.sortBy(_._1)\n        for (pair <- list) {\n       \
    \     sortedList = sortedList ::: pair._2.sortWith(_ < _)\n        }\n       \
    \ return sortedList\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgcqq_0jb.scala:39)\n\tat Problem.main(tmpgcqq_0jb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979886
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.groupBy(_.length).filterKeys(_\
    \ % 2 == 0).values.flatten.sorted.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpt8lqseaj.scala:20:68 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        lst.groupBy(_.length).filterKeys(_ % \e[31m2\e\
    [0m == \e[31m0\e[0m).values.flatten.sorted.toList\n\e[31m\e[31m   |\e[0m     \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m        value sorted is not a member of Iterable[String]\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659979885
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.filter(x =>\
    \ x.length % 2 == 0).sortWith((x, y) => {\n            if (x.length == y.length)\
    \ x < y\n            else x.length < y.length\n        })\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979886
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n      // println(lst.size)\n\
    \      // println(lst)\n      if (lst.size <= 1) lst\n      else {\n        val\
    \ i = lst.indexOf(lst.minBy(x => x.length))\n        val lstMin = lst(i)\n   \
    \     val lstWithoutMin = lst.patch(i, Nil, 1)\n        // println(lstWithoutMin)\n\
    \        lstMin :: sortedListSum(lstWithoutMin)\n      }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9ctdcnqh.scala:32)\n\tat Problem.main(tmp9ctdcnqh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979887
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n    \tval sortedLst =\
    \ lst.sortWith(_.length < _.length)\n    \tval rstLst = ArrayBuffer[String]()\n\
    \    \tval group = lst.groupBy(_.length)\n    \tvar prev = -1\n    \tfor (str\
    \ <- sortedLst) {\n    \t\tif (str.length != prev) {\n    \t\t\tval lst = group(str.length)\n\
    \    \t\t\tval mappedLst = lst.map(x => (x, 1)).groupBy(_._1).map(x => (x._1,\
    \ x._2.map(_._2).sum))\n    \t\t\tval sortedLst2 = mappedLst.toList.sortWith(_._2\
    \ < _._2)\n    \t\t\tfor (word <- sortedLst2) {\n    \t\t\t\trstLst += word._1\n\
    \    \t\t\t}\n    \t\t\tprev = str.length\n    \t\t}\n    \t}\n    \trstLst.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4nwyl3rv.scala:38)\n\tat Problem.main(tmp4nwyl3rv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979888
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val sortedList\
    \ = lst.sortWith((a, b) => a.length < b.length)\n        println(sortedList)\n\
    \        var result : List[String] = List[String]()\n        result = sortedList.filter((elem\
    \ : String) => elem.length % 2 == 0)\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5umy7dnj.scala:30)\n\tat Problem.main(tmp5umy7dnj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: 'List(a, aa, aaa)

    List(b, AI, asdf, school)

    List(d, b, c, a)

    List(d, a, dcba, abcd)

    '
  timestamp: 1659979887
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val lstLen = lst.map(s\
    \ => s.length)\n        val numMax = lstLen.max\n        val numMin = lstLen.min\n\
    \        val lstSum = ListBuffer[String]()\n        for (i <- numMin to numMax)\
    \ {\n            val lsSum = lst.filter(s => s.length == i)\n            lstSum\
    \ ++= lsSum\n        }\n        lstSum.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpy5lvyrr2.scala:31)\n\tat Problem.main(tmpy5lvyrr2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979888
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        var evens = List[String]()\n\
    \        var odds = List[String]()\n        lst.foreach(str => {\n           \
    \ if (str.length % 2 == 0) evens = evens :+ str\n            else odds = odds\
    \ :+ str\n        })\n        evens.sortWith(_.length < _.length)\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9mudvgy_.scala:32)\n\tat Problem.main(tmp9mudvgy_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979888
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.filter(x =>\
    \ (x.length % 2 == 0)).sortWith((a, b) => {\n            if (a.length == b.length)\n\
    \                a < b\n            else\n                a.length < b.length\n\
    \        })\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979888
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val lengthSortedList\
    \ = lst.sortWith((s1, s2) => s1.length < s2.length)\n        var output = List[String]()\n\
    \        for (i <- 0 until lengthSortedList.length - 1) {\n            val w1\
    \ = lengthSortedList(i)\n            val w2 = lengthSortedList(i + 1)\n      \
    \      if (w1.length == w2.length) {\n                if (w1 <= w2) {\n      \
    \              output = output :+ w1\n                } else {\n             \
    \       output = output :+ w2\n                }\n            } else {\n     \
    \           output = output :+ w1\n            }\n        }\n        output =\
    \ output :+ lengthSortedList(lengthSortedList.length - 1)\n        output\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpa3cqvkd_.scala:39)\n\tat Problem.main(tmpa3cqvkd_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979888
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val map = lst.groupBy(_.length).mapValues(_.sorted).toList.sortBy(_._1)\n\
    \        map.map(_._2).flatten\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_m2p6cid.scala:24)\n\tat Problem.main(tmp_m2p6cid.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979888
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never a list of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        // We first sort\
    \ the list and then delete the elements that we don't need\n        val lst_sorted\
    \ = lst.sortWith(_.length < _.length)\n        // Now we loop through the list\n\
    \        var result = List[String]()\n        for (elem <- lst_sorted) {\n   \
    \         // If elem length is even then add it to the list\n            if (elem.length\
    \ % 2 == 0) result = result :+ elem\n        }\n        result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\"\
    , \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp26zrmkva.scala:34)\n\tat Problem.main(tmp26zrmkva.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979888
