language: scala
name: HumanEval_95_check_dict_case
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n      if (dict.size == 0) {\n        return\
    \ false\n      }\n      var keys = dict.keys.toList\n      var allUpper = true\n\
    \      var allLower = true\n      for (key <- keys) {\n        if (key != key.toUpperCase)\
    \ {\n          allUpper = false\n        }\n        if (key != key.toLowerCase)\
    \ {\n          allLower = false\n        }\n      }\n      return allUpper ||\
    \ allLower\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptsteptaq.scala:38)\n\tat Problem.main(tmptsteptaq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009801
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n      dict.isEmpty || dict.map(_._1).map(x\
    \ => x.toLowerCase == x).reduceLeft(_ && _) || dict.map(_._1).map(x => x.toUpperCase\
    \ == x).reduceLeft(_ && _)\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\" -> \"\
    banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"p\" ->\
    \ \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n  \
    \  assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" -> \"\
    banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpb4txs4u8.scala:24)\n\tat Problem.main(tmpb4txs4u8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009801
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        var lower = true\n        var upper = true\n        for (key <- dict.keys)\
    \ {\n            if (key.exists(!_.isUpper)) upper = false\n            if (key.exists(!_.isLower))\
    \ lower = false\n        }\n        lower || upper\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009801
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n\t\tdict.keys.exists(k => k.toLowerCase\
    \ != k) && dict.keys.exists(k => k.toUpperCase != k)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpbpys0ofe.scala:20:4 ------------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m   Incompatible combinations of tabs and spaces in indentation prefixes.\n\e\
    [31m   |\e[0m   Previous indent : 2 tabs\n\e[31m   |\e[0m   Latest indent   :\
    \ 4 spaces\n1 error found\n"
  stdout: ''
  timestamp: 1660009797
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) false\n     \
    \   else {\n            val keys = dict.keys.toList\n            if (keys.head.head.isLower)\
    \ {\n                !(keys.find(s => s.head.isUpper) != None)\n            }\
    \ else {\n                !(keys.find(s => s.head.isLower) != None)\n        \
    \    }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsz8x9cye.scala:32)\n\tat Problem.main(tmpsz8x9cye.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009801
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.keys.exists(k => !k.isInstanceOf[String]))\
    \ return false\n        var flag = true\n        for (k <- dict.keys.iterator)\
    \ {\n            if (k.isUpper) flag = true\n            else if (k.isLower) flag\
    \ = false\n            else return false\n        }\n        flag\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1qmu4mss.scala:22:18 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mif\e[0m (k.isUpper) flag = \e[31mtrue\e\
    [0m\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \            value isUpper is not a member of String\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmp1qmu4mss.scala:23:23 ------------------------\e[0m\e[0m\n\
    \e[31m23 |\e[0m            \e[33melse\e[0m \e[33mif\e[0m (k.isLower) flag = \e\
    [31mfalse\e[0m\n\e[31m\e[31m   |\e[0m                     ^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     value isLower is not a member of String\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009800
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        // Implement your solution here\n\
    \        true\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2vs13vuu.scala:24)\n\tat Problem.main(tmp2vs13vuu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009801
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2nmqptco.scala:22)\n\tat Problem.main(tmp2nmqptco.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009801
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) false\n     \
    \   else {\n            val keys = dict.keys\n            val caseCheck = keys.head.equals(keys.head.toLowerCase)\n\
    \            keys.forall((x) => x.equals(x.toLowerCase) == caseCheck)\n      \
    \  }\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwb8sn2tt.scala:29)\n\tat Problem.main(tmpwb8sn2tt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009800
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val strs = dict.keys.toList\n        val bool = strs.head.toLowerCase()\
    \ == strs.head.toUpperCase()\n        bool && strs.forall(str => str.toLowerCase()\
    \ == str.toUpperCase() == bool)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\" ->\
    \ \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"p\"\
    \ -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpztlp4ak1.scala:25)\n\tat Problem.main(tmpztlp4ak1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009801
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        //TODO: Implement\n        false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0jjbg3qf.scala:23)\n\tat Problem.main(tmp0jjbg3qf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009801
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        var res = true\n        val isLower\
    \ = dict.keySet.head.head.isLower\n        for (k <- dict.keySet) {\n        \
    \    if (k.head.isLower != isLower) {\n                res = false\n         \
    \       return res\n            }\n        }\n        res\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcqh_7g59.scala:33)\n\tat Problem.main(tmpcqh_7g59.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009801
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        // check if all lower case\n  \
    \      val isLower = dict.forall { case (k,v) => k.forall(c => Character.isLowerCase(c))\
    \ }\n        // check if all upper case\n        val isUpper = dict.forall { case\
    \ (k,v) => k.forall(c => Character.isUpperCase(c)) }\n        if (isLower) true\n\
    \        else if (isUpper) true\n        else false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_kmh4vri.scala:34)\n\tat Problem.main(tmp_kmh4vri.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009801
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        // TODO\n        return true\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmph18zp_p_.scala:24)\n\tat Problem.main(tmph18zp_p_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009801
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n      dict.filterKeys(key => key.matches(\"\
    ^[a-z]*$\")).size == dict.size || dict.filterKeys(key => key.matches(\"^[A-Z]*$\"\
    )).size == dict.size\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp27pzgj0v.scala:28)\n\tat Problem.main(tmp27pzgj0v.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009801
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        // Write your code here\n     \
    \   true\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2s9mg6le.scala:24)\n\tat Problem.main(tmp2s9mg6le.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009801
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        ???\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.NotImplementedError: an implementation is missing\n\tat scala.Predef$.$qmark$qmark$qmark(Predef.scala:344)\n\
    \tat Problem$.checkDictCase(tmpgli70fzs.scala:19)\n\tat Problem$.main(tmpgli70fzs.scala:22)\n\
    \tat Problem.main(tmpgli70fzs.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009801
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        dict.isEmpty || (dict.keys.filter\
    \ { key => key.toLowerCase == key }.size == dict.size || dict.keys.filter { key\
    \ => key.toUpperCase == key }.size == dict.size)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpky_g5w_g.scala:24)\n\tat Problem.main(tmpky_g5w_g.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009801
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        // Fill Up this function body\n\
    \        // `dict` is a Map of String to String\n        // `dict.keys` is an\
    \ Iterable of String\n        // `dict.keys.foreach` is a function that takes\
    \ in a function of type\n        //    `(String) => Unit` and applies it to each\
    \ key of the map `dict`\n        var flag = true\n        var lowerCase = 0\n\
    \        var upperCase = 0\n        dict.keys.foreach { (x: String) => if (x.toLowerCase()\
    \ == x) lowerCase += 1 else upperCase += 1 }\n        if (lowerCase != 0 && upperCase\
    \ != 0) flag = false\n        return flag\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpablobp0w.scala:34)\n\tat Problem.main(tmpablobp0w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009801
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n    \tif (dict.isEmpty) {\n    \t\tfalse\n\
    \    \t} else {\n    \t\tval values = dict.values\n    \t\tval lower = dict.filter(_._1.toLowerCase()\
    \ == _._1)\n    \t\tval upper = dict.filter(_._1.toUpperCase() == _._1)\n    \t\
    \tif (lower.size == 0 || upper.size == 0) {\n    \t\t\tfalse\n    \t\t} else {\n\
    \    \t\t\tlower.values.equals(values) || upper.values.equals(values)\n    \t\t\
    }\n    \t}\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgl3wd34v.scala:23:34 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m    \t\t\e[33mval\e[0m \e[36mlower\e[0m = dict.filter(_._1.toLowerCase()\
    \ == _._1)\n\e[31m\e[31m   |\e[0m    \t\t                        ^^^^\e[0m\n\e\
    [31m   |\e[0m    \t\t                        value _1 is not a member of String\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgl3wd34v.scala:24:34 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m    \t\t\e[33mval\e[0m \e[36mupper\e[0m = dict.filter(_._1.toUpperCase()\
    \ == _._1)\n\e[31m\e[31m   |\e[0m    \t\t                        ^^^^\e[0m\n\e\
    [31m   |\e[0m    \t\t                        value _1 is not a member of String\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009800
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        return false;\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfl6vjudd.scala:22)\n\tat Problem.main(tmpfl6vjudd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009801
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.keys.forall(key => key.toLowerCase()\
    \ == key)) true\n        else if (dict.keys.forall(key => key.toUpperCase() ==\
    \ key)) true\n        else false\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\" ->\
    \ \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"p\"\
    \ -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv909q5pr.scala:26)\n\tat Problem.main(tmpv909q5pr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009801
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) {\n         \
    \   return false\n        }\n        val lowerCaseKeys = dict.keys.filter(_.forall(_.isLower))\n\
    \        val upperCaseKeys = dict.keys.filter(_.forall(_.isUpper))\n        lowerCaseKeys.isEmpty\
    \ || upperCaseKeys.isEmpty\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\" -> \"\
    banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"p\" ->\
    \ \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n  \
    \  assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" -> \"\
    banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6n8to9nm.scala:29)\n\tat Problem.main(tmp6n8to9nm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009801
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) false\n     \
    \   else {\n            val keys = dict.keys\n            if (keys.exists(x =>\
    \ x.toUpperCase != x)) false\n            else if (keys.exists(x => x.toLowerCase\
    \ != x)) false\n            else true\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp70dkest2.scala:28)\n\tat Problem.main(tmp70dkest2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009808
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        // TODO: Implement\n        if\
    \ (dict.size == 0) return false\n        val upperKeys = dict.keys.filter(_.toUpperCase\
    \ == _)\n        val lowerKeys = dict.keys.filter(_.toLowerCase == _)\n      \
    \  if (upperKeys.size > 0 && lowerKeys.size > 0) return false\n        else return\
    \ true\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmp5ptjr5vb.scala:21:41 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mupperKeys\e[0m = dict.keys.filter(_.toUpperCase\
    \ == _)\n\e[31m\e[31m   |\e[0m                                         ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 1\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmp5ptjr5vb.scala:22:41\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mlowerKeys\e[0m = dict.keys.filter(_.toLowerCase == _)\n\e[31m\e[31m  \
    \ |\e[0m                                         ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                 Wrong number of parameters, expected:\
    \ 1\n2 errors found\n"
  stdout: ''
  timestamp: 1660009808
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        def checkDictCase_iter(dict : Map[String,String],\
    \ lower : Boolean) : Boolean = {\n            if (dict.isEmpty) return true\n\
    \            if (lower) {\n                if (dict.head._1 == dict.head._1.toLowerCase)\
    \ return checkDictCase_iter(dict.tail, lower)\n                else return false\n\
    \            }\n            else {\n                if (dict.head._1 == dict.head._1.toUpperCase)\
    \ return checkDictCase_iter(dict.tail, lower)\n                else return false\n\
    \            }\n        }\n        if (dict.isEmpty) return false\n        else\
    \ {\n            if (dict.head._1 == dict.head._1.toLowerCase) return checkDictCase_iter(dict.tail,\
    \ true)\n            else if (dict.head._1 == dict.head._1.toUpperCase) return\
    \ checkDictCase_iter(dict.tail, false)\n            else return false\n      \
    \  }\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpz7d3cuwb.scala:40)\n\tat Problem.main(tmpz7d3cuwb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009811
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        // write your code here\n     \
    \   null\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpprj8wv1i.scala:20:8\
    \ ---------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[31mnull\e[0m\n\e\
    [31m\e[31m   |\e[0m        ^^^^\e[0m\n\e[31m   |\e[0m        Found:    Null\n\e\
    [31m   |\e[0m        Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009808
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        var lowercaseKeys = true\n    \
    \    var uppercaseKeys = true\n        if (dict.size == 0)\n        \treturn false\n\
    \        for (key <- dict.keys) {\n        \tif (key.toLowerCase == key)\n   \
    \     \t\tuppercaseKeys = false\n        \tif (key.toUpperCase == key)\n     \
    \   \t\tlowercaseKeys = false\n        }\n        return (lowercaseKeys || uppercaseKeys)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqxkeu158.scala:35)\n\tat Problem.main(tmpqxkeu158.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009812
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        ???\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.NotImplementedError: an implementation is missing\n\tat scala.Predef$.$qmark$qmark$qmark(Predef.scala:344)\n\
    \tat Problem$.checkDictCase(tmpgli70fzs.scala:19)\n\tat Problem$.main(tmpgli70fzs.scala:22)\n\
    \tat Problem.main(tmpgli70fzs.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009801
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        dict.isEmpty match {\n        \
    \    case true => false\n            case false => dict.forall(x => x._1.toLowerCase\
    \ == x._1 || x._1.toUpperCase == x._1)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpaq33k2ih.scala:26)\n\tat Problem.main(tmpaq33k2ih.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009811
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        dict.keys.forall(s => s.toLowerCase\
    \ == s) || dict.keys.forall(s => s.toUpperCase == s)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxlcmfpec.scala:24)\n\tat Problem.main(tmpxlcmfpec.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009812
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        dict.keySet.filter(x => x.matches(\"\
    [A-Z]+\")).size * dict.keySet.filter(x => x.matches(\"[a-z]+\")).size == 0\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt9mex5a9.scala:24)\n\tat Problem.main(tmpt9mex5a9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009812
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppwrz74yr.scala:22)\n\tat Problem.main(tmppwrz74yr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009812
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        ???\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.NotImplementedError: an implementation is missing\n\tat scala.Predef$.$qmark$qmark$qmark(Predef.scala:344)\n\
    \tat Problem$.checkDictCase(tmpgli70fzs.scala:19)\n\tat Problem$.main(tmpgli70fzs.scala:22)\n\
    \tat Problem.main(tmpgli70fzs.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009801
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        var result : Boolean = true\n \
    \       for (t <- dict) {\n            if (t._1.toLowerCase() != t._1) result\
    \ = false\n        }\n        for (t <- dict) {\n            if (t._1.toUpperCase()\
    \ != t._1) result = false\n        }\n        return result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpm8l4fkly.scala:29)\n\tat Problem.main(tmpm8l4fkly.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009812
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        // Implement a solution here\n\
    \        ???\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.NotImplementedError: an implementation is missing\n\tat scala.Predef$.$qmark$qmark$qmark(Predef.scala:344)\n\
    \tat Problem$.checkDictCase(tmplezjxcwe.scala:20)\n\tat Problem$.main(tmplezjxcwe.scala:23)\n\
    \tat Problem.main(tmplezjxcwe.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009812
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n    \tvar a, b = 0\n    \tfor (x <- dict.keys)\
    \ {\n    \t\tif (x.toUpperCase == x) {\n    \t\t\ta += 1\n    \t\t} else if (x.toLowerCase\
    \ == x) {\n    \t\t\tb += 1\n    \t\t}\n    \t}\n    \tif (a == dict.size || b\
    \ == dict.size) {\n    \t\treturn true\n    \t}\n    \treturn false\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpau_162c0.scala:39)\n\tat Problem.main(tmpau_162c0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009812
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        // Write your code here.\n    \
    \    var upper = 0\n        var lower = 0\n        dict.keys.foreach(i => if (i.toUpperCase\
    \ == i) upper += 1 else lower += 1)\n        if (upper == 0 || lower == 0) true\
    \ else false\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7u3lz0ka.scala:29)\n\tat Problem.main(tmp7u3lz0ka.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009812
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n\t\t//this can be rewritten using the all\
    \ method\n\t\tval keysUpper = dict.keys.forall(x => x.toUpperCase == x)\n\t\t\
    val keysLower = dict.keys.forall(x => x.toLowerCase == x)\n\t\tif(keysUpper ||\
    \ keysLower) true else false\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\" ->\
    \ \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"p\"\
    \ -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmptm_p_edr.scala:23:4 ------------------------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m   Incompatible combinations of tabs and spaces in indentation prefixes.\n\e\
    [31m   |\e[0m   Previous indent : 2 tabs\n\e[31m   |\e[0m   Latest indent   :\
    \ 4 spaces\n1 error found\n"
  stdout: ''
  timestamp: 1660009808
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) false\n     \
    \   else {\n            val lower = dict.keySet.forall(s => s.toLowerCase == s)\n\
    \            val upper = dict.keySet.forall(s => s.toUpperCase == s)\n       \
    \     lower || upper\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\" ->\
    \ \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"p\"\
    \ -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmps69upepd.scala:29)\n\tat Problem.main(tmps69upepd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009812
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        val (lower, upper) = dict.partition(_._1.toLowerCase\
    \ == _._1)\n        lower.size == 0 || upper.size == 0\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp81_jx0xt.scala:19:46 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m (lower, upper) = dict.partition(_._1.toLowerCase\
    \ == _._1)\n\e[31m\e[31m   |\e[0m                                            ^^^^\e\
    [0m\n\e[31m   |\e[0m                                      value _1 is not a member\
    \ of String\n1 error found\n"
  stdout: ''
  timestamp: 1660009811
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        var lc = 0\n        var uc = 0\n\
    \        for ((k,v) <- dict) {\n            if (k.toLowerCase.equals(k)) lc +=\
    \ 1\n            else if (k.toUpperCase.equals(k)) uc += 1\n        }\n      \
    \  if (lc > 0 && uc > 0) return false\n        return true\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplyc04tus.scala:31)\n\tat Problem.main(tmplyc04tus.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009812
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        // Fill Up this function body\n\
    \        // `dict` contains an empty map `Map()`\n        if (dict.isEmpty) {\n\
    \            false\n        }\n        else {\n            val lowercase = dict.keys.forall(_.toLowerCase()\
    \ == _)\n            val uppercase = dict.keys.forall(_.toUpperCase() == _)\n\
    \            if (lowercase || uppercase) {\n                true\n           \
    \ }\n            else {\n                false\n            }\n        }\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmptu6bhv5w.scala:25:45 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            \e[33mval\e[0m \e[36mlowercase\e[0m = dict.keys.forall(_.toLowerCase()\
    \ == _)\n\e[31m\e[31m   |\e[0m                                             ^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 1\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmptu6bhv5w.scala:26:45\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m            \e[33mval\e\
    [0m \e[36muppercase\e[0m = dict.keys.forall(_.toUpperCase() == _)\n\e[31m\e[31m\
    \   |\e[0m                                             ^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 1\n2 errors found\n"
  stdout: ''
  timestamp: 1660009809
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        var upper = true\n        var lower\
    \ = true\n        for (key <- dict.keys) {\n            if (key != key.toLowerCase)\
    \ {\n                lower = false\n            }\n            if (key != key.toUpperCase)\
    \ {\n                upper = false\n            }\n        }\n        if (lower\
    \ || upper) {\n            return true\n        }\n        return false\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9z6xek4a.scala:37)\n\tat Problem.main(tmp9z6xek4a.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009812
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        val (lowerCaseKeys, upperCaseKeys)\
    \ = dict.keys.partition(_.forall(_.isLower))\n        (lowerCaseKeys.size > 0\
    \ && upperCaseKeys.size == 0) || (lowerCaseKeys.size == 0 && upperCaseKeys.size\
    \ > 0)\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0q92ejhr.scala:26)\n\tat Problem.main(tmp0q92ejhr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009812
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        dict.keys.forall(_.toLowerCase\
    \ == _) || dict.keys.forall(_.toUpperCase == _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpaqema8lk.scala:19:25 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        dict.keys.forall(_.toLowerCase == _) || dict.keys.forall(_.toUpperCase\
    \ == _)\n\e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Wrong number of parameters, expected:\
    \ 1\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpaqema8lk.scala:19:65 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        dict.keys.forall(_.toLowerCase == _) || dict.keys.forall(_.toUpperCase\
    \ == _)\n\e[31m\e[31m   |\e[0m                                               \
    \                  ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \               Wrong number of parameters, expected: 1\n2 errors found\n"
  stdout: ''
  timestamp: 1660009809
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n    \tif (dict.size == 0) return false\n\
    \    \tval keys = dict.keys\n    \tval firstKey = keys.head\n    \tvar isAllUpperCase\
    \ = firstKey.toUpperCase == firstKey\n    \tvar isAllLowerCase = firstKey.toLowerCase\
    \ == firstKey\n    \tval set = HashSet[String]()\n    \tfor (key <- keys) {\n\
    \    \t\tif (isAllUpperCase && key.toUpperCase != key) return false\n    \t\t\
    if (isAllLowerCase && key.toLowerCase != key) return false\n    \t\tset += key\n\
    \    \t}\n    \treturn set.size == keys.size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6xwfwd5_.scala:35)\n\tat Problem.main(tmp6xwfwd5_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009813
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) false\n     \
    \   else {\n            val keys = dict.keys\n            if (keys.forall(s =>\
    \ s.forall(c => c.isLower)) || keys.forall(s => s.forall(c => c.isUpper))) true\n\
    \            else false\n        }\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\"\
    \ -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009813
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        // your code here\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp00wkrame.scala:18:61\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m    \e[33mdef\e[0m \e[36mcheckDictCase\e\
    [0m(\e[36mdict\e[0m : \e[35mMap\e[0m[\e[35mString\e[0m,\e[35mString\e[0m]) : \e\
    [35mBoolean\e[0m = {\n\e[31m\e[31m   |\e[0m                                  \
    \                           ^\e[0m\n\e[31m   |\e[0m                          \
    \                             Found:    Unit\n\e[31m   |\e[0m                \
    \                                       Required: Boolean\n\e[31m19 |\e[0m   \
    \     \e[34m// your code here\e[0m\n\e[31m20 |\e[0m    }\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660009818
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        // Fill in the blanks.\n      \
    \  dict.isEmpty match {\n            case true => false\n            case false\
    \ =>\n                val r = dict.keys.map { k => k.forall(_.isUpper) }.reduce(_==_)\n\
    \                val b = dict.keys.map { k => k.forall(_.isLower) }.reduce(_==_)\n\
    \                r || b\n        }\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\"\
    \ -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009819
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        dict.keys.map(k => k.toUpperCase).toSet.size\
    \ match {\n            case 1 => true\n            case _ => false\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpisx_1t19.scala:25)\n\tat Problem.main(tmpisx_1t19.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009819
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        //Solution goes here..\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1s2d9ouu.scala:18:61\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m    \e[33mdef\e[0m \e[36mcheckDictCase\e\
    [0m(\e[36mdict\e[0m : \e[35mMap\e[0m[\e[35mString\e[0m,\e[35mString\e[0m]) : \e\
    [35mBoolean\e[0m = {\n\e[31m\e[31m   |\e[0m                                  \
    \                           ^\e[0m\n\e[31m   |\e[0m                          \
    \                             Found:    Unit\n\e[31m   |\e[0m                \
    \                                       Required: Boolean\n\e[31m19 |\e[0m   \
    \     \e[34m//Solution goes here..\e[0m\n\e[31m20 |\e[0m    }\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009817
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        // YOUR CODE HERE\n        if (dict.isEmpty)\
    \ false\n        else{\n          val dic = dict.map(_._1)\n          for (i <-\
    \ dic){\n            if(i.exists(_.isUpper)){\n              for (j <- dic){\n\
    \                if(j.exists(_.isLower)) return false\n              }\n     \
    \         return true\n            }\n            else{\n              for (j\
    \ <- dic){\n                if(j.exists(_.isUpper)) return false\n           \
    \   }\n              return true\n            }\n          }\n          false\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw9l0cqme.scala:43)\n\tat Problem.main(tmpw9l0cqme.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009821
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        // Fill Up this function body\n\
    \        // `dict` is a map of type Map[String,String]\n        // use `dict.keys`\
    \ to get all the keys\n        // use `key.isUpper` to check if all the keys are\
    \ in upper case\n        // use `key.isLower` to check if all the keys are in\
    \ lower case\n        false\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\" -> \"\
    banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"p\" ->\
    \ \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n  \
    \  assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" -> \"\
    banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp28sd9nqk.scala:27)\n\tat Problem.main(tmp28sd9nqk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009821
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        for (i <- (0 until dict.keys.toList.length))\
    \ {\n            if (dict.keys.toList(i).toUpperCase != dict.keys.toList(i) &&\
    \ dict.keys.toList(i).toLowerCase != dict.keys.toList(i)) {\n                return\
    \ false\n            }\n        }\n        true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpppdswz43.scala:28)\n\tat Problem.main(tmpppdswz43.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009823
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        var up = 0\n        var down =\
    \ 0\n        var flag = true\n        for ((k,v) <- dict) if (k == k.toUpperCase)\
    \ up += 1 else down += 1\n        if (up == 0 && down == 0) flag = false\n   \
    \     else if (up > 0 && down > 0) flag = false\n        flag\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp33vynxuk.scala:31)\n\tat Problem.main(tmp33vynxuk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009823
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.size == 0) {\n       \
    \     false\n        } else {\n            dict.keys.forall(_.toLowerCase == _)\
    \ || dict.keys.forall(_.toUpperCase == _)\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmph_q9f13y.scala:22:29 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            dict.keys.forall(_.toLowerCase == _) || dict.keys.forall(_.toUpperCase\
    \ == _)\n\e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                             Wrong number of parameters, expected:\
    \ 1\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmph_q9f13y.scala:22:69 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            dict.keys.forall(_.toLowerCase == _) || dict.keys.forall(_.toUpperCase\
    \ == _)\n\e[31m\e[31m   |\e[0m                                               \
    \                      ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                   Wrong number of parameters, expected: 1\n2 errors found\n"
  stdout: ''
  timestamp: 1660009819
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        val ret = dict.map(x => x._1.toLowerCase)\n\
    \        return ret == dict.keys\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\" ->\
    \ \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"p\"\
    \ -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2ohesu78.scala:23)\n\tat Problem.main(tmp2ohesu78.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009824
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n      val isAllUpperCase = dict.keys.filter(k\
    \ => !k.isUpper).isEmpty\n      val isAllLowerCase = dict.keys.filter(k => !k.isLower).isEmpty\n\
    \      !dict.isEmpty && (isAllUpperCase || isAllLowerCase)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp88j572jm.scala:19:52 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m      \e[33mval\e[0m \e[36misAllUpperCase\e[0m = dict.keys.filter(\e\
    [36mk\e[0m => !k.isUpper).isEmpty\n\e[31m\e[31m   |\e[0m                     \
    \                             ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                 value isUpper is not a member of String\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp88j572jm.scala:20:52 ------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m      \e[33mval\e[0m \e[36misAllLowerCase\e[0m = dict.keys.filter(\e\
    [36mk\e[0m => !k.isLower).isEmpty\n\e[31m\e[31m   |\e[0m                     \
    \                             ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                 value isLower is not a member of String\n2 errors found\n"
  stdout: ''
  timestamp: 1660009822
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.size == 0) return false\n\
    \        else {\n            dict.keys.head.head.isUpper match {\n           \
    \     case true => dict.keys.forall(x => x.head.isUpper == true)\n           \
    \     case false => dict.keys.forall(x => x.head.isLower == true)\n          \
    \  }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4zzjss44.scala:31)\n\tat Problem.main(tmp4zzjss44.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009824
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        dict.isEmpty match {\n        \
    \    case true => return false\n            case false => return false\n     \
    \   }\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0n3ff1em.scala:25)\n\tat Problem.main(tmp0n3ff1em.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009824
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n      null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7eedx1cf.scala:19:6\
    \ ---------------------\e[0m\e[0m\n\e[31m19 |\e[0m      \e[31mnull\e[0m\n\e[31m\e\
    [31m   |\e[0m      ^^^^\e[0m\n\e[31m   |\e[0m      Found:    Null\n\e[31m   |\e\
    [0m      Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009820
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.size == 0) {\n       \
    \     return false\n        }\n        var lowerCase = true\n        var upperCase\
    \ = true\n        for (key <- dict.keys) {\n            if (key.exists(_.isLower))\
    \ {\n                upperCase = false\n            }\n            if (key.exists(_.isUpper))\
    \ {\n                lowerCase = false\n            }\n        }\n        if (lowerCase\
    \ || upperCase) {\n            return true\n        }\n        return false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpz3c2uc72.scala:40)\n\tat Problem.main(tmpz3c2uc72.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009824
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        val s = dict.keys.toList.map(k\
    \ => k(0).isUpper).distinct\n        s.length == 1 && s(0) == false || s.length\
    \ == 1 && s(0) == true\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxy2xhsiq.scala:25)\n\tat Problem.main(tmpxy2xhsiq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009824
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        dict.keys.toList.map(k => k.isUpper).contains(false)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8362k3k1.scala:19:36 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        dict.keys.toList.map(\e[36mk\e[0m => k.isUpper).contains(\e\
    [31mfalse\e[0m)\n\e[31m\e[31m   |\e[0m                                  ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 value isUpper is not a member\
    \ of String\n1 error found\n"
  stdout: ''
  timestamp: 1660009823
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        // Your code goes here\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcvn_9ala.scala:18:61\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m    \e[33mdef\e[0m \e[36mcheckDictCase\e\
    [0m(\e[36mdict\e[0m : \e[35mMap\e[0m[\e[35mString\e[0m,\e[35mString\e[0m]) : \e\
    [35mBoolean\e[0m = {\n\e[31m\e[31m   |\e[0m                                  \
    \                           ^\e[0m\n\e[31m   |\e[0m                          \
    \                             Found:    Unit\n\e[31m   |\e[0m                \
    \                                       Required: Boolean\n\e[31m19 |\e[0m   \
    \     \e[34m// Your code goes here\e[0m\n\e[31m20 |\e[0m    }\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009823
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n\t\t// TODO: fill the body of this function\n\
    \t\t// Replace \"true\" with the appropriate code\n\t\tdict.keys.forall(!_.isUpper)\
    \ || dict.keys.forall(!_.isLower)\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\"\
    \ -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp5jqxafrz.scala:22:4 ------------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m   Incompatible combinations of tabs and spaces in indentation prefixes.\n\e\
    [31m   |\e[0m   Previous indent : 2 tabs\n\e[31m   |\e[0m   Latest indent   :\
    \ 4 spaces\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5jqxafrz.scala:21:20\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m\t\tdict.keys.forall(!_.isUpper)\
    \ || dict.keys.forall(!_.isLower)\n\e[31m\e[31m   |\e[0m\t\t                 \
    \ ^^^^^^^^^\e[0m\n\e[31m   |\e[0m\t\t                  value isUpper is not a\
    \ member of String\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5jqxafrz.scala:21:52\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m\t\tdict.keys.forall(!_.isUpper)\
    \ || dict.keys.forall(!_.isLower)\n\e[31m\e[31m   |\e[0m\t\t                 \
    \                                 ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \                     value isLower is not a member of String\n3 errors found\n"
  stdout: ''
  timestamp: 1660009823
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        // Fill in the function body below\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpiu4_4tvs.scala:18:61\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m    \e[33mdef\e[0m \e[36mcheckDictCase\e\
    [0m(\e[36mdict\e[0m : \e[35mMap\e[0m[\e[35mString\e[0m,\e[35mString\e[0m]) : \e\
    [35mBoolean\e[0m = {\n\e[31m\e[31m   |\e[0m                                  \
    \                           ^\e[0m\n\e[31m   |\e[0m                          \
    \                             Found:    Unit\n\e[31m   |\e[0m                \
    \                                       Required: Boolean\n\e[31m19 |\e[0m   \
    \     \e[34m// Fill in the function body below\e[0m\n\e[31m20 |\e[0m    }\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009822
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        dict.keySet.forall(x => x.toLowerCase == x) || dict.keySet.forall(x =>\
    \ x.toUpperCase == x)\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqfhi4rhw.scala:25)\n\tat Problem.main(tmpqfhi4rhw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009825
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        var case1 = true\n        var case2\
    \ = true\n        for ((k, v) <- dict) {\n            if (k.exists(!_.isUpper))\
    \ {\n                case1 = false\n            }\n            if (k.exists(!_.isLower))\
    \ {\n                case2 = false\n            }\n        }\n        return case1\
    \ || case2\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp29sfm_9q.scala:38)\n\tat Problem.main(tmp29sfm_9q.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009826
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        // Fill in the implementation\n\
    \        false\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7nubcb_1.scala:23)\n\tat Problem.main(tmp7nubcb_1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009826
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        // Your code here\n        return\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0atg3qsu.scala:23)\n\tat Problem.main(tmp0atg3qsu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009829
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.size == 0) return false\n\
    \        var lowerSet = Set[String]()\n        var upperSet = Set[String]()\n\
    \        for (key <- dict.keys) {\n            var keyLower = key.toLowerCase\n\
    \            var keyUpper = key.toUpperCase\n            if (keyLower == key)\
    \ lowerSet += key\n            else if (keyUpper == key) upperSet += key\n   \
    \         else return false\n        }\n        if (lowerSet.size == 0 || upperSet.size\
    \ == 0) return true\n        else return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpp32k7x2e.scala:35)\n\tat Problem.main(tmpp32k7x2e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009831
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        // fill in the implementation\n\
    \        return false\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpiooxgiwj.scala:23)\n\tat Problem.main(tmpiooxgiwj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009831
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n\t\t\n\t}\n}\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpowb2ifqa.scala:22:4 ----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    eof expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpowb2ifqa.scala:18:61 --------------------\e[0m\e[0m\n\e[31m18 |\e[0m\
    \    \e[33mdef\e[0m \e[36mcheckDictCase\e[0m(\e[36mdict\e[0m : \e[35mMap\e[0m[\e\
    [35mString\e[0m,\e[35mString\e[0m]) : \e[35mBoolean\e[0m = {\n\e[31m\e[31m   |\e\
    [0m                                                             ^\e[0m\n\e[31m\
    \   |\e[0m                                                       Found:    Unit\n\
    \e[31m   |\e[0m                                                       Required:\
    \ Boolean\n\e[31m19 |\e[0m\t\t\n\e[31m20 |\e[0m\t}\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009829
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        ???\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.NotImplementedError: an implementation is missing\n\tat scala.Predef$.$qmark$qmark$qmark(Predef.scala:344)\n\
    \tat Problem$.checkDictCase(tmpgli70fzs.scala:19)\n\tat Problem$.main(tmpgli70fzs.scala:22)\n\
    \tat Problem.main(tmpgli70fzs.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009801
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        val r = dict.filter(x => !x._1.toLowerCase.equals(x._1))\n\
    \        if (r.isEmpty) return true\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfolfr646.scala:26)\n\tat Problem.main(tmpfolfr646.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009831
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        dict.forall(_._1.matches(\"[a-z]+\"\
    )) || dict.forall(_._1.matches(\"[A-Z]+\"))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpod_5u20j.scala:28)\n\tat Problem.main(tmpod_5u20j.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009833
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        dict.keys.forall(key => key.toLowerCase\
    \ == key || key.toUpperCase == key)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp218qthhy.scala:23)\n\tat Problem.main(tmp218qthhy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009833
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        // Fill In\n        ???\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.NotImplementedError: an implementation is missing\n\tat scala.Predef$.$qmark$qmark$qmark(Predef.scala:344)\n\
    \tat Problem$.checkDictCase(tmps7dxzsmj.scala:20)\n\tat Problem$.main(tmps7dxzsmj.scala:23)\n\
    \tat Problem.main(tmps7dxzsmj.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009833
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        dict.isEmpty || dict.forall(x =>\
    \ x._1.toLowerCase == x._1) || dict.forall(x => x._1.toUpperCase == x._1)\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgw0065xh.scala:24)\n\tat Problem.main(tmpgw0065xh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009834
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n      val keysLowerCase = dict.keySet.toList.filter(_.forall(_.isLower))\n\
    \      val keysUpperCase = dict.keySet.toList.filter(_.forall(_.isUpper))\n  \
    \    if (keysLowerCase.size == dict.size || keysUpperCase.size == dict.size)\n\
    \        true\n      else\n        false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjcel6vyx.scala:33)\n\tat Problem.main(tmpjcel6vyx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009834
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) false\n     \
    \   else {\n            val lowercase = dict.keySet.forall(_.isLowerCase)\n  \
    \          val uppercase = dict.keySet.forall(_.isUpperCase)\n            lowercase\
    \ || uppercase\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpf_u8r4l2.scala:21:49 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mval\e[0m \e[36mlowercase\e[0m = dict.keySet.forall(_.isLowerCase)\n\
    \e[31m\e[31m   |\e[0m                                               ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue isLowerCase is not a member of String - did you mean\
    \ _$1.toLowerCase?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpf_u8r4l2.scala:22:49\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e[0m\
    \ \e[36muppercase\e[0m = dict.keySet.forall(_.isUpperCase)\n\e[31m\e[31m   |\e\
    [0m                                               ^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mvalue isUpperCase is not a member of String - did you mean _$2.toUpperCase?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009833
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) false\n     \
    \   else {\n            val isUpper = dict.head._1 == dict.head._1.toUpperCase\n\
    \            dict.forall(kv => kv._1 == kv._1.toUpperCase) == isUpper\n      \
    \  }\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0728gf1l.scala:27)\n\tat Problem.main(tmp0728gf1l.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009834
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        ???\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.NotImplementedError: an implementation is missing\n\tat scala.Predef$.$qmark$qmark$qmark(Predef.scala:344)\n\
    \tat Problem$.checkDictCase(tmpgli70fzs.scala:19)\n\tat Problem$.main(tmpgli70fzs.scala:22)\n\
    \tat Problem.main(tmpgli70fzs.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009801
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        ???\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.NotImplementedError: an implementation is missing\n\tat scala.Predef$.$qmark$qmark$qmark(Predef.scala:344)\n\
    \tat Problem$.checkDictCase(tmpgli70fzs.scala:19)\n\tat Problem$.main(tmpgli70fzs.scala:22)\n\
    \tat Problem.main(tmpgli70fzs.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009801
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        // TODO: Write down your code here\n\
    \        if (dict.size == 0) return false\n        val str = dict.keys.toList(0)\n\
    \        var check = true\n        for (i <- 0 until str.length) {\n         \
    \   val a = str(i)\n            if (a.isLower) check = false\n        }\n    \
    \    for (i <- 0 until str.length) {\n            val a = str(i)\n           \
    \ if (a.isUpper) check = false\n        }\n        check\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzsaj0z3c.scala:34)\n\tat Problem.main(tmpzsaj0z3c.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009835
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2nmqptco.scala:22)\n\tat Problem.main(tmp2nmqptco.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009801
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        // TODO: implement the function\
    \ here, and return the correct value\n        val allUpper = dict.keys.filter(k\
    \ => k == k.toUpperCase)\n        val allLower = dict.keys.filter(k => k == k.toLowerCase)\n\
    \        if (allUpper.size == dict.size || allLower.size == dict.size)\n     \
    \       true\n        else\n            false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpahnnwwtb.scala:30)\n\tat Problem.main(tmpahnnwwtb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009834
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n      ???\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.NotImplementedError: an implementation is missing\n\tat scala.Predef$.$qmark$qmark$qmark(Predef.scala:344)\n\
    \tat Problem$.checkDictCase(tmprwdld1sq.scala:19)\n\tat Problem$.main(tmprwdld1sq.scala:22)\n\
    \tat Problem.main(tmprwdld1sq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009834
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        val upperCase = dict.forall(_._1.toUpperCase\
    \ == _._1)\n        val lowerCase = dict.forall(_._1.toLowerCase == _._1)\n  \
    \      if (upperCase || lowerCase) true else false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpuq2vyyyd.scala:19:38 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mupperCase\e[0m = dict.forall(_._1.toUpperCase\
    \ == _._1)\n\e[31m\e[31m   |\e[0m                                    ^^^^\e[0m\n\
    \e[31m   |\e[0m                                    value _1 is not a member of\
    \ String\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpuq2vyyyd.scala:20:38\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mlowerCase\e[0m = dict.forall(_._1.toLowerCase == _._1)\n\e[31m\e[31m   |\e\
    [0m                                    ^^^^\e[0m\n\e[31m   |\e[0m            \
    \                        value _1 is not a member of String\n2 errors found\n"
  stdout: ''
  timestamp: 1660009835
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        return true\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_hgs1tho.scala:23)\n\tat Problem.main(tmp_hgs1tho.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009835
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        ???\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.NotImplementedError: an implementation is missing\n\tat scala.Predef$.$qmark$qmark$qmark(Predef.scala:344)\n\
    \tat Problem$.checkDictCase(tmpgli70fzs.scala:19)\n\tat Problem$.main(tmpgli70fzs.scala:22)\n\
    \tat Problem.main(tmpgli70fzs.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009801
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) {\n         \
    \   return false\n        }\n        if (dict.keys.forall(x => x.forall(y => y.isUpper)))\
    \ {\n            true\n        } else if (dict.keys.forall(x => x.forall(y =>\
    \ y.isLower))) {\n            true\n        } else {\n            false\n    \
    \    }\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009836
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) false\n     \
    \   else {\n            // 1. \u5224\u65AD\u662F\u5927\u5199\u8FD8\u662F\u5C0F\
    \u5199\n            val isLower = dict.keys.head.charAt(0).isLower\n         \
    \   // 2. \u5224\u65AD\u5176\u4ED6\u7684\u952E\u662F\u5426\u90FD\u7B26\u5408\u5927\
    \u5C0F\u5199\u8981\u6C42\n            val isLegal = dict.keys.forall(_.charAt(0).isLower\
    \ == isLower)\n            // 3. \u8FD4\u56DE\u7ED3\u679C\n            isLegal\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpo4wopzba.scala:33)\n\tat Problem.main(tmpo4wopzba.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009836
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n\t\tvar key = dict.keys\n\t\tvar upper\
    \ = key.filter(str => str == str.toUpperCase)\n\t\tvar lower = key.filter(str\
    \ => str == str.toLowerCase)\n\t\tif (dict.size == 0) false else if (upper.size\
    \ == key.size || lower.size == key.size) true else false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp5jvmfh58.scala:23:4 ------------------------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m   Incompatible combinations of tabs and spaces in indentation prefixes.\n\e\
    [31m   |\e[0m   Previous indent : 2 tabs\n\e[31m   |\e[0m   Latest indent   :\
    \ 4 spaces\n1 error found\n"
  stdout: ''
  timestamp: 1660009833
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) false\n     \
    \   else {\n            var x = dict.keys.toList\n            var z = true\n \
    \           if (x.head.apply(0).isUpper) {\n                x.foreach(e => z &&=\
    \ e.apply(0).isUpper)\n            }\n            else {\n                x.foreach(e\
    \ => z &&= e.apply(0).isLower)\n            }\n            z\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf2sst3e9.scala:36)\n\tat Problem.main(tmpf2sst3e9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009836
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) false\n     \
    \   else if (dict.keys.toList.head.head.isLower) {\n            if (dict.keys.toList.forall(c\
    \ => c.head.isLower)) true\n            else false\n        }\n        else if\
    \ (dict.keys.toList.head.head.isUpper) {\n            if (dict.keys.toList.forall(c\
    \ => c.head.isUpper)) true\n            else false\n        }\n        else false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxrdhd35_.scala:34)\n\tat Problem.main(tmpxrdhd35_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009837
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        ???\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.NotImplementedError: an implementation is missing\n\tat scala.Predef$.$qmark$qmark$qmark(Predef.scala:344)\n\
    \tat Problem$.checkDictCase(tmpgli70fzs.scala:19)\n\tat Problem$.main(tmpgli70fzs.scala:22)\n\
    \tat Problem.main(tmpgli70fzs.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009801
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        dict.keys.forall(k => k.toLowerCase\
    \ == k) || dict.keys.forall(k => k.toUpperCase == k)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7wf5bor2.scala:24)\n\tat Problem.main(tmp7wf5bor2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009838
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        // Fill in your code here\n   \
    \     // dict.keys.toList.exists(x => x.toUpperCase == x.toLowerCase)\n      \
    \  dict.keys.toList.forall(x => x.toUpperCase == x.toLowerCase)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_hcao3xv.scala:24)\n\tat Problem.main(tmp_hcao3xv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009840
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.size == 0) false\n   \
    \     else {\n        \tval case0 = dict.keys.head.charAt(0).isUpper\n       \
    \ \tvar case1 = true\n        \tfor (key <- dict.keys) {\n        \t    case1\
    \ = case1 && (key.charAt(0).isUpper == case0)\n        \t}\n        \tcase1\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpco68492r.scala:32)\n\tat Problem.main(tmpco68492r.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009841
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        ???\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.NotImplementedError: an implementation is missing\n\tat scala.Predef$.$qmark$qmark$qmark(Predef.scala:344)\n\
    \tat Problem$.checkDictCase(tmpgli70fzs.scala:19)\n\tat Problem$.main(tmpgli70fzs.scala:22)\n\
    \tat Problem.main(tmpgli70fzs.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009801
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        val keys = dict.keys.toList\n \
    \       val keyChars = keys.mkString.toCharArray\n        val lower = keyChars.forall(c\
    \ => c.isLower)\n        val upper = keyChars.forall(c => c.isUpper)\n       \
    \ lower || upper\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpy1stfg4t.scala:32)\n\tat Problem.main(tmpy1stfg4t.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009844
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n\t\tdict.isEmpty\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpzfb8vchr.scala:20:4 ------------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m   Incompatible combinations of tabs and spaces in indentation prefixes.\n\e\
    [31m   |\e[0m   Previous indent : 2 tabs\n\e[31m   |\e[0m   Latest indent   :\
    \ 4 spaces\n1 error found\n"
  stdout: ''
  timestamp: 1660009838
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        // Insert code here\n        return\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw3lhr92w.scala:23)\n\tat Problem.main(tmpw3lhr92w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009842
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        // See if first key is upper case.\n\
    \        // If there is no first key, return false.\n        if (dict.size ==\
    \ 0) return false\n        val firstKey : String = dict.head._1\n        val firstUpper\
    \ : Boolean = (firstKey == firstKey.toUpperCase)\n        // Now see if all keys\
    \ are upper or lower case.\n        // If not, return false.\n        for (entry\
    \ <- dict) {\n            val key : String = entry._1\n            if (firstUpper\
    \ != (key == key.toUpperCase)) {\n                return false\n            }\n\
    \        }\n        // All keys match either upper or lower case.\n        return\
    \ true\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpup47fx3d.scala:39)\n\tat Problem.main(tmpup47fx3d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009845
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        ???\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.NotImplementedError: an implementation is missing\n\tat scala.Predef$.$qmark$qmark$qmark(Predef.scala:344)\n\
    \tat Problem$.checkDictCase(tmpgli70fzs.scala:19)\n\tat Problem$.main(tmpgli70fzs.scala:22)\n\
    \tat Problem.main(tmpgli70fzs.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009801
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        true\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpj6a7l9wx.scala:23)\n\tat Problem.main(tmpj6a7l9wx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009844
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        val (lowerKeys, upperKeys) = dict.keys.partition(_.matches(\"\
    \"\"[a-z]+\"\"\"))\n        (lowerKeys.size == dict.size || upperKeys.size ==\
    \ dict.size) && dict.keys.forall(_.matches(\"\"\"[a-zA-Z]+\"\"\"))\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqmlvz4km.scala:26)\n\tat Problem.main(tmpqmlvz4km.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009845
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n\t\tval validLower = dict.keys.forall(x\
    \ => x.exists(y => y.isLower))\n\t\tval validUpper = dict.keys.forall(x => x.exists(y\
    \ => y.isUpper))\n\t\tif (validLower || validUpper)\n\t\t\ttrue\n\t\telse\n\t\t\
    \tfalse\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpk18zorio.scala:25:4 ------------------------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m   Incompatible combinations of tabs and spaces in indentation prefixes.\n\e\
    [31m   |\e[0m   Previous indent : 3 tabs\n\e[31m   |\e[0m   Latest indent   :\
    \ 4 spaces\n1 error found\n"
  stdout: ''
  timestamp: 1660009840
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        // Write your code here\n     \
    \   false\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpk8vd0zu7.scala:23)\n\tat Problem.main(tmpk8vd0zu7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009845
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        dict.keys.forall(key => key.isUpper\
    \ || key.isLower)\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpaouicy_z.scala:19:36 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        dict.keys.forall(\e[36mkey\e[0m => key.isUpper\
    \ || key.isLower)\n\e[31m\e[31m   |\e[0m                                ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                value isUpper is not a member\
    \ of String\n1 error found\n"
  stdout: ''
  timestamp: 1660009844
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        dict.keys.forall(key => key.toLowerCase\
    \ == key || key.toUpperCase == key)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp218qthhy.scala:23)\n\tat Problem.main(tmp218qthhy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009833
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        def go(dict : Map[String,String],\
    \ lowerCase : Boolean) : Boolean = {\n            if (dict.isEmpty)\n        \
    \        true\n            else if (lowerCase)\n                if (dict.head._1.toLowerCase\
    \ == dict.head._1)\n                    go(dict.tail, lowerCase)\n           \
    \     else\n                    false\n            else\n                if (dict.head._1.toUpperCase\
    \ == dict.head._1)\n                    go(dict.tail, lowerCase)\n           \
    \     else\n                    false\n        }\n        if (dict.isEmpty)\n\
    \            false\n        else if (dict.head._1.toLowerCase == dict.head._1)\n\
    \            go(dict.tail, true)\n        else if (dict.head._1.toUpperCase ==\
    \ dict.head._1)\n            go(dict.tail, false)\n        else\n            false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1jqj2gwp.scala:45)\n\tat Problem.main(tmp1jqj2gwp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009846
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.size == 0) return false\n\
    \        var upper = false\n        var lower = false\n        for (key <- dict.keys)\
    \ {\n            if (key.toUpperCase == key) {\n                upper = true\n\
    \            } else if (key.toLowerCase == key) {\n                lower = true\n\
    \            } else {\n                return false\n            }\n        }\n\
    \        if (upper && lower) {\n            return false\n        } else {\n \
    \           return true\n        }\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\"\
    \ -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009845
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val allKeysLower = dict.keys.forall(_.isAllLowerCase)\n        if (allKeysLower)\
    \ return true\n        val allKeysUpper = dict.keys.forall(_.isAllUpperCase)\n\
    \        if (allKeysUpper) return true\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmps5ti8fjp.scala:20:46 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mallKeysLower\e[0m = dict.keys.forall(_.isAllLowerCase)\n\
    \e[31m\e[31m   |\e[0m                                            ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                          value isAllLowerCase is not a member\
    \ of String\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmps5ti8fjp.scala:22:46\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mallKeysUpper\e[0m = dict.keys.forall(_.isAllUpperCase)\n\e[31m\e[31m   |\e\
    [0m                                            ^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                          value isAllUpperCase is not a member of String\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009844
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        val keys = dict.keys.toList\n \
    \       if (keys.isEmpty) return false\n        val regex = \"(?i).*[a-z].*\"\
    .r\n        val lowerString = dict.keys.map(x => x.matches(regex.toString))\n\
    \        return !lowerString.contains(true) || !lowerString.contains(false)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpf1rest48.scala:23:28 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mreturn\e[0m !lowerString.contains(\e[31mtrue\e\
    [0m) || !lowerString.contains(\e[31mfalse\e[0m)\n\e[31m\e[31m   |\e[0m       \
    \         ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                value contains\
    \ is not a member of Iterable[Boolean]\n1 error found\n"
  stdout: ''
  timestamp: 1660009844
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        def check(items : Map[String,String],\
    \ checkLower : Boolean) : Boolean = {\n            if (items.size == 0) true\n\
    \            else {\n                val head = items.head\n                if\
    \ (head._1.forall(c => c.isLower) == checkLower)\n                    check(items.tail,\
    \ checkLower)\n                else false\n            }\n        }\n        if\
    \ (dict.size == 0) false\n        else {\n            val head = dict.head\n \
    \           if (head._1.forall(c => c.isLower)) check(dict.tail, true)\n     \
    \       else if (head._1.forall(c => c.isUpper)) check(dict.tail, false)\n   \
    \         else false\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\" ->\
    \ \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"p\"\
    \ -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009847
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) {\n         \
    \   return false\n        }\n        if (dict.forall((pair) => (pair._1.forall((c)\
    \ => c.isUpper)) && (pair._2.forall((c) => c.isUpper)))) {\n            return\
    \ true\n        }\n        if (dict.forall((pair) => (pair._1.forall((c) => c.isLower))\
    \ && (pair._2.forall((c) => c.isLower)))) {\n            return true\n       \
    \ }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpurkad29o.scala:35)\n\tat Problem.main(tmpurkad29o.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009847
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        dict.keys.forall(s => (s == s.toLowerCase)\
    \ || (s == s.toUpperCase))\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\" -> \"\
    banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"p\" ->\
    \ \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n  \
    \  assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" -> \"\
    banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptgswldre.scala:23)\n\tat Problem.main(tmptgswldre.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009846
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        // Your code goes here\n      \
    \  return false\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp40i12ain.scala:23)\n\tat Problem.main(tmp40i12ain.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009847
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        var isAllLower = true\n        var isAllUpper = true\n        for (e\
    \ <- dict) {\n            isAllLower &= e._1.forall(_.isLower)\n            isAllUpper\
    \ &= e._1.forall(_.isUpper)\n        }\n        return isAllLower || isAllUpper\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009848
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        val cases = (dict map (_._1)) groupBy\
    \ (_.toUpperCase == _)\n        if (cases.size > 1) false else cases.head._1\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmp64_ay89w.scala:19:47 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mcases\e[0m = (dict map (_._1))\
    \ groupBy (_.toUpperCase == _)\n\e[31m\e[31m   |\e[0m                        \
    \                       ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \                    Wrong number of parameters, expected: 1\n1 error found\n"
  stdout: ''
  timestamp: 1660009844
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        val xs = dict.keys.toList.sortWith((s1,\
    \ s2) => s1 < s2)\n        if (xs.isEmpty) {\n            false\n        } else\
    \ {\n            val c = xs.head(0)\n            xs.foreach(x => if (x(0) != c)\
    \ return false)\n            true\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptnleveuk.scala:29)\n\tat Problem.main(tmptnleveuk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009849
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.size == 0) return false\n\
    \        val fst = dict.keys.head\n        val u = fst.toUpperCase\n        val\
    \ l = fst.toLowerCase\n        if (fst == u)\n            dict.keys.forall(_.toUpperCase\
    \ == _)\n        else if (fst == l)\n            dict.keys.forall(_.toLowerCase\
    \ == _)\n        else\n            false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpsxqnh6vg.scala:24:29 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            dict.keys.forall(_.toUpperCase == _)\n\e\
    [31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                             Wrong number of parameters, expected: 1\n\
    \e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpsxqnh6vg.scala:26:29 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            dict.keys.forall(_.toLowerCase == _)\n\e\
    [31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                             Wrong number of parameters, expected: 1\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009846
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n      ???\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.NotImplementedError: an implementation is missing\n\tat scala.Predef$.$qmark$qmark$qmark(Predef.scala:344)\n\
    \tat Problem$.checkDictCase(tmprwdld1sq.scala:19)\n\tat Problem$.main(tmprwdld1sq.scala:22)\n\
    \tat Problem.main(tmprwdld1sq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009834
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        var result = true\n        val\
    \ isLower = new HashMap[String, Boolean]\n        val isUpper = new HashMap[String,\
    \ Boolean]\n        if (dict.isEmpty)\n            result = false\n        else\n\
    \            for ((k, v) <- dict) {\n                if (k == k.toLowerCase) {\n\
    \                    isLower(k) = true\n                    isUpper(k) = false\n\
    \                }\n                else if (k == k.toUpperCase) {\n         \
    \           isLower(k) = false\n                    isUpper(k) = true\n      \
    \          }\n                else {\n                    result = false\n   \
    \                 return result\n                }\n            }\n        for\
    \ ((k, v) <- isLower) {\n            if (v && isUpper(k)) {\n                result\
    \ = false\n                return result\n            }\n        }\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp98h_lx60.scala:49)\n\tat Problem.main(tmp98h_lx60.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009851
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        def checkDictCase0(keys : Iterable[String],\
    \ isKeyUpper : Boolean, isKeyLower : Boolean) : Boolean = {\n            if (keys.isEmpty)\
    \ return false\n            else if (keys.head.toUpperCase == keys.head) {\n \
    \               if (isKeyLower) return false\n                else checkDictCase0(keys.tail,\
    \ true, false)\n            }\n            else if (keys.head.toLowerCase == keys.head)\
    \ {\n                if (isKeyUpper) return false\n                else checkDictCase0(keys.tail,\
    \ false, true)\n            }\n            else return false\n        }\n    \
    \    checkDictCase0(dict.keys, false, false)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpa2f6ghwr.scala:31:28\
    \ --------------------\e[0m\e[0m\n\e[31m31 |\e[0m        checkDictCase0(dict.keys,\
    \ \e[31mfalse\e[0m, \e[31mfalse\e[0m)\n\e[31m\e[31m   |\e[0m                 \
    \      ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                       Found:    Iterable[String]\n\
    \e[31m   |\e[0m                       Required: \e[1m\e[32mcollection\e[0m\e[1m\e\
    [32m.\e[0m\e[1m\e[32mmutable\e[0m\e[1m\e[32m.\e[0mIterable[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009850
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        val n = dict.size\n        var\
    \ allLower = true\n        var allUpper = true\n        dict.foreach(e => {\n\
    \            if (e._1 != e._1.toLowerCase) allLower = false\n            if (e._1\
    \ != e._1.toUpperCase) allUpper = false\n        })\n        (allLower || allUpper)\
    \ && (n > 0)\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4lvjjooa.scala:31)\n\tat Problem.main(tmp4lvjjooa.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009852
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2nmqptco.scala:22)\n\tat Problem.main(tmp2nmqptco.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009801
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) {\n         \
    \   false\n        } else {\n            val lower = dict.keys.forall(_.matches(\"\
    [a-z]+\"))\n            val upper = dict.keys.forall(_.matches(\"[A-Z]+\"))\n\
    \            if (!lower && !upper) false else true\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009853
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        // YOUR CODE HERE\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplz3uwzhu.scala:18:61\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m    \e[33mdef\e[0m \e[36mcheckDictCase\e\
    [0m(\e[36mdict\e[0m : \e[35mMap\e[0m[\e[35mString\e[0m,\e[35mString\e[0m]) : \e\
    [35mBoolean\e[0m = {\n\e[31m\e[31m   |\e[0m                                  \
    \                           ^\e[0m\n\e[31m   |\e[0m                          \
    \                             Found:    Unit\n\e[31m   |\e[0m                \
    \                                       Required: Boolean\n\e[31m19 |\e[0m   \
    \     \e[34m// YOUR CODE HERE\e[0m\n\e[31m20 |\e[0m    }\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660009853
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n      val s = dict.keys.filter(x => x.charAt(0).isLower).toSet\n\
    \      val S = dict.keys.filter(x => x.charAt(0).isUpper).toSet\n      (s.size\
    \ == 0 && S.size == dict.size) || (S.size == 0 && s.size == dict.size)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpevaz6sey.scala:27)\n\tat Problem.main(tmpevaz6sey.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009856
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        var upperCase = false\n       \
    \ var lowerCase = false\n        for (key <- dict.keys) {\n            if (key.toUpperCase\
    \ == key) upperCase = true\n            if (key.toLowerCase == key) lowerCase\
    \ = true\n        }\n        if (upperCase && lowerCase) return false\n      \
    \  else return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0ohun540.scala:32)\n\tat Problem.main(tmp0ohun540.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009856
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        var lower = true\n        var upper = true\n        for (key <- dict.keys)\
    \ {\n            if (key.toLowerCase() != key) lower = false\n            if (key.toUpperCase()\
    \ != key) upper = false\n        }\n        lower || upper\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsu6nlcj7.scala:31)\n\tat Problem.main(tmpsu6nlcj7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009857
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        // Fill in the code here\n    \
    \    val result = dict.filter{case (x, y) => x.isInstanceOf[String] && y.isInstanceOf[String]}\n\
    \        val check = result.keys.forall(_.toUpperCase == _)\n        val check2\
    \ = result.keys.forall(_.toLowerCase == _)\n        if(check || check2) {true}\
    \ else {false}\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpz2q6uhkk.scala:21:39 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mcheck\e[0m = result.keys.forall(_.toUpperCase\
    \ == _)\n\e[31m\e[31m   |\e[0m                                       ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 1\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpz2q6uhkk.scala:22:40\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mcheck2\e[0m = result.keys.forall(_.toLowerCase == _)\n\e[31m\e[31m   |\e\
    [0m                                        ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                 Wrong number of parameters, expected: 1\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009853
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        val lower = dict.keys.filter {\
    \ key =>\n            key == key.toLowerCase\n        }\n        val upper = dict.keys.filter\
    \ { key =>\n            key == key.toUpperCase\n        }\n        dict.keys.size\
    \ == lower.size || dict.keys.size == upper.size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpa3shnifl.scala:30)\n\tat Problem.main(tmpa3shnifl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009856
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        return true\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_hgs1tho.scala:23)\n\tat Problem.main(tmp_hgs1tho.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009835
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n      if (dict.isEmpty) {\n        false\n\
    \      } else {\n        dict.keySet.forall(x => x.toLowerCase == x || x.toUpperCase\
    \ == x)\n      }\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdi7083n1.scala:27)\n\tat Problem.main(tmpdi7083n1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009856
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        true\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpj6a7l9wx.scala:23)\n\tat Problem.main(tmpj6a7l9wx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009844
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        def isUpper(str : String) : Boolean\
    \ = {\n            for (ch <- str) {\n                if (ch.isUpper) return true\n\
    \            }\n            return false\n        }\n        var upper = false\n\
    \        var lower = false\n        for (key <- dict.keys) {\n            if (isUpper(key))\
    \ upper = true\n            else lower = true\n        }\n        return upper\
    \ ^ lower\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpm5tv_h9k.scala:36)\n\tat Problem.main(tmpm5tv_h9k.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009857
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        var (lower, upper) = (true, true)\n\
    \        for (key <- dict.keys) {\n            if (key.exists(c => c.isLower))\
    \ lower = false\n            if (key.exists(c => c.isUpper)) upper = false\n \
    \       }\n        if (dict.size == 0) false\n        else lower || upper\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmr3jc6xg.scala:30)\n\tat Problem.main(tmpmr3jc6xg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009857
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        // Your code goes here...\n   \
    \     return false\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxt69sl5b.scala:23)\n\tat Problem.main(tmpxt69sl5b.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009857
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.size == 0) return false\n\
    \        val firstStr = dict.keys.head\n        if (firstStr.forall(_.isLower))\
    \ {\n            for (s <- dict.keys) {\n                if (!s.forall(_.isLower))\
    \ return false\n            }\n        } else if (firstStr.forall(_.isUpper))\
    \ {\n            for (s <- dict.keys) {\n                if (!s.forall(_.isUpper))\
    \ return false\n            }\n        } else {\n            return false\n  \
    \      }\n        return true\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\" ->\
    \ \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"p\"\
    \ -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009857
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        ???\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.NotImplementedError: an implementation is missing\n\tat scala.Predef$.$qmark$qmark$qmark(Predef.scala:344)\n\
    \tat Problem$.checkDictCase(tmpgli70fzs.scala:19)\n\tat Problem$.main(tmpgli70fzs.scala:22)\n\
    \tat Problem.main(tmpgli70fzs.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009801
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2nmqptco.scala:22)\n\tat Problem.main(tmp2nmqptco.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009801
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        return false;\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfl6vjudd.scala:22)\n\tat Problem.main(tmpfl6vjudd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009801
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n      return true\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp80zb6xxt.scala:23)\n\tat Problem.main(tmp80zb6xxt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009858
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        dict.keys.filter(_.isLowerCase).size\
    \ == dict.size || dict.keys.filter(_.isUpperCase).size == dict.size\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3xkddad8.scala:19:27 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        dict.keys.filter(_.isLowerCase).size == dict.size\
    \ || dict.keys.filter(_.isUpperCase).size == dict.size\n\e[31m\e[31m   |\e[0m\
    \                         ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue isLowerCase\
    \ is not a member of String - did you mean _$1.toLowerCase?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp3xkddad8.scala:19:80 ------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        dict.keys.filter(_.isLowerCase).size == dict.size\
    \ || dict.keys.filter(_.isUpperCase).size == dict.size\n\e[31m\e[31m   |\e[0m\
    \                                                                            \
    \  ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue isUpperCase is not a member of String\
    \ - did you mean _$2.toUpperCase?\n2 errors found\n"
  stdout: ''
  timestamp: 1660009857
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        val upper = dict.keys.forall(k\
    \ => k.forall(c => c.isUpper))\n        val lower = dict.keys.forall(k => k.forall(c\
    \ => c.isLower))\n        (upper || lower) && !dict.isEmpty\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009858
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val testValue = dict.keys.toList(0)\n        if (testValue.toUpperCase.equals(testValue))\
    \ {\n            return dict.keys.forall(_.toUpperCase.equals(_))\n        } else\
    \ if (testValue.toLowerCase.equals(testValue)) {\n            return dict.keys.forall(_.toLowerCase.equals(_))\n\
    \        } else {\n            return false\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpx_4mnkyh.scala:22:36 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mreturn\e[0m dict.keys.forall(_.toUpperCase.equals(_))\n\
    \e[31m\e[31m   |\e[0m                                    ^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 1\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpx_4mnkyh.scala:24:36\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m            \e[33mreturn\e\
    [0m dict.keys.forall(_.toLowerCase.equals(_))\n\e[31m\e[31m   |\e[0m         \
    \                           ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                             Wrong number of parameters, expected: 1\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009855
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        // Your code here\n        var\
    \ upper = true\n        var lower = true\n        for (k <- dict.keys) {\n   \
    \         if (!k.equals(k.toUpperCase)) {\n                upper = false\n   \
    \         }\n            if (!k.equals(k.toLowerCase)) {\n                lower\
    \ = false\n            }\n        }\n        if (upper || lower) true else false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpj_msgkmh.scala:35)\n\tat Problem.main(tmpj_msgkmh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009860
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n    \tdict.isEmpty || dict.keys.forall(s\
    \ => s.isUpper || s.isLower)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\" ->\
    \ \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"p\"\
    \ -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp6u9xfcrt.scala:19:48 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m    \tdict.isEmpty || dict.keys.forall(\e[36ms\e[0m =>\
    \ s.isUpper || s.isLower)\n\e[31m\e[31m   |\e[0m    \t                       \
    \               ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                              \
    \   value isUpper is not a member of String\n1 error found\n"
  stdout: ''
  timestamp: 1660009858
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        var lowerCase = dict.filter(key\
    \ => key._1.toLowerCase() == key._1)\n        var upperCase = dict.filter(key\
    \ => key._1.toUpperCase() == key._1)\n        var isLower = lowerCase.size ==\
    \ dict.size\n        var isUpper = upperCase.size == dict.size\n        isLower\
    \ || isUpper\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp74wqblne.scala:28)\n\tat Problem.main(tmp74wqblne.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009860
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) false\n     \
    \   else {\n            var case_type = 0\n            for (k <- dict.keys) {\n\
    \                if (k.toLowerCase == k) {\n                    if (case_type\
    \ == 0) case_type = 1\n                    else if (case_type == 2) return false\n\
    \                }\n                else if (k.toUpperCase == k) {\n         \
    \           if (case_type == 0) case_type = 2\n                    else if (case_type\
    \ == 1) return false\n                }\n                else return false\n \
    \           }\n            return true\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmyl2avm0.scala:39)\n\tat Problem.main(tmpmyl2avm0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009862
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppwrz74yr.scala:22)\n\tat Problem.main(tmppwrz74yr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009812
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        val l = dict.keys.toList\n    \
    \    if (l.size == 0) false\n        else {\n            val x = l(0)\n      \
    \      if (x.toUpperCase == x) {\n                for (key <- l) {\n         \
    \           if (key.toUpperCase != key) return false\n                }\n    \
    \            true\n            }\n            else {\n                for (key\
    \ <- l) {\n                    if (key.toLowerCase != key) return false\n    \
    \            }\n                true\n            }\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnqb0uvjz.scala:40)\n\tat Problem.main(tmpnqb0uvjz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009862
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        var result = true\n        var\
    \ upper = false\n        var lower = false\n        if (dict.nonEmpty) {\n   \
    \         for ((k, v) <- dict) {\n                if (k.forall(_.isUpper)) upper\
    \ = true\n                else if (k.forall(_.isLower)) lower = true\n       \
    \         else { result = false; return result }\n            }\n            result\
    \ = (upper && !lower) || (!upper && lower)\n        }\n        result\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpujp_i9qa.scala:39)\n\tat Problem.main(tmpujp_i9qa.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009863
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        var upper = 0\n        var lower\
    \ = 0\n        for ((k, v) <- dict) {\n            if (k.toUpperCase.equals(k))\
    \ upper += 1\n            else lower += 1\n        }\n        if (upper > 0 &&\
    \ lower > 0) false\n        else true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpg_8o2wwj.scala:32)\n\tat Problem.main(tmpg_8o2wwj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009865
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        val upperDict = dict.filter(key\
    \ => key._1.forall(_.isUpper))\n        val lowerDict = dict.filter(key => key._1.forall(_.isLower))\n\
    \        upperDict.isEmpty || lowerDict.isEmpty\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpx453bxbi.scala:26)\n\tat Problem.main(tmpx453bxbi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009864
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        dict.keySet.forall(k => k.toLowerCase\
    \ == k) || dict.keySet.forall(k => k.toUpperCase == k)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpyc17723c.scala:24)\n\tat Problem.main(tmpyc17723c.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009865
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n      dict.keys.forall(_.forall(_.isUpper))\
    \ || dict.keys.forall(_.forall(_.isLower))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkcmgy3gj.scala:28)\n\tat Problem.main(tmpkcmgy3gj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009865
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        // Your Code Here\n        true\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpoz_q8d09.scala:24)\n\tat Problem.main(tmpoz_q8d09.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009867
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys\n        val lowerCase = (keys.forall(s => s.toLowerCase\
    \ == s))\n        val upperCase = (keys.forall(s => s.toUpperCase == s))\n   \
    \     (lowerCase || upperCase)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\" ->\
    \ \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"p\"\
    \ -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe36rb_7b.scala:28)\n\tat Problem.main(tmpe36rb_7b.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009868
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n      val str = dict.keys.head\n      val\
    \ ans = dict.keys.foldLeft(str.isUpper)((x, y) => if(x != y.isUpper) false else\
    \ x)\n      if(ans) true else false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3d99k4c4.scala:20:39 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m      \e[33mval\e[0m \e[36mans\e[0m = dict.keys.foldLeft(str.isUpper)((\e\
    [36mx\e[0m, \e[36my\e[0m) => \e[33mif\e[0m(x != y.isUpper) \e[31mfalse\e[0m \e\
    [33melse\e[0m x)\n\e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 value isUpper is not a member\
    \ of String\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3d99k4c4.scala:20:68\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m      \e[33mval\e[0m \e[36mans\e\
    [0m = dict.keys.foldLeft(str.isUpper)((\e[36mx\e[0m, \e[36my\e[0m) => \e[33mif\e\
    [0m(x != y.isUpper) \e[31mfalse\e[0m \e[33melse\e[0m x)\n\e[31m\e[31m   |\e[0m\
    \                                                                  ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 value isUpper is not a member\
    \ of String\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3d99k4c4.scala:21:9\
    \ ---------------------\e[0m\e[0m\n\e[31m21 |\e[0m      \e[33mif\e[0m(ans) \e\
    [31mtrue\e[0m \e[33melse\e[0m \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m        \
    \ ^^^\e[0m\n\e[31m   |\e[0m         Found:    (ans : Any)\n\e[31m   |\e[0m   \
    \      Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009867
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n    \tif (dict.isEmpty) false\n    \telse\
    \ {\n    \t\tval t = dict.keys.head\n    \t\tif (t.head.isUpper) {\n    \t\t\t\
    if (dict.keys.forall(x => x.head.isUpper)) true\n    \t\t\telse false\n    \t\t\
    }\n    \t\telse {\n    \t\t\tif (dict.keys.forall(x => x.head.isLower)) true\n\
    \    \t\t\telse false\n    \t\t}\n    \t}\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzl7f8bzp.scala:36)\n\tat Problem.main(tmpzl7f8bzp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009868
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        // Your code here\n        var\
    \ upperKey = 0\n        var lowerKey = 0\n        for ((k,v) <- dict) {\n    \
    \        if (k == k.toUpperCase) {\n                upperKey += 1\n          \
    \  } else if (k == k.toLowerCase) {\n                lowerKey += 1\n         \
    \   }\n        }\n        if (upperKey == dict.size || lowerKey == dict.size)\
    \ {\n            return true\n        } else {\n            return false\n   \
    \     }\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpna1cf90y.scala:42)\n\tat Problem.main(tmpna1cf90y.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009868
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.size == 0) {\n       \
    \     false\n        } else {\n            val check1 = dict.keySet.forall(s =>\
    \ s.equals(s.toLowerCase))\n            val check2 = dict.keySet.forall(s => s.equals(s.toUpperCase))\n\
    \            (check1 || check2)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6qpurt2n.scala:30)\n\tat Problem.main(tmp6qpurt2n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009868
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n\t\tif (dict.isEmpty) return false\n\t\t\
    var lower = true\n\t\tvar upper = true\n\t\tfor (t <- dict) {\n\t\t\tlower &=\
    \ t._1.forall(_.isLower)\n\t\t\tupper &= t._1.forall(_.isUpper)\n\t\t}\n\t\treturn\
    \ lower || upper\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpc6rvjsk3.scala:27:4 ------------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m   Incompatible combinations of tabs and spaces in indentation prefixes.\n\e\
    [31m   |\e[0m   Previous indent : 2 tabs\n\e[31m   |\e[0m   Latest indent   :\
    \ 4 spaces\n1 error found\n"
  stdout: ''
  timestamp: 1660009865
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        val l = dict.keys.forall(k => k.toLowerCase\
    \ == k)\n        val u = dict.keys.forall(k => k.toUpperCase == k)\n        l\
    \ || u\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp053qstyw.scala:26)\n\tat Problem.main(tmp053qstyw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009868
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        // Your code here\n        var\
    \ lower = false\n        var upper = false\n        if (dict.isEmpty) {\n    \
    \        return false\n        }\n        for ((k,v) <- dict) {\n            var\
    \ a = k.toLowerCase\n            var b = k.toUpperCase\n            if (k == a)\
    \ {\n                lower = true\n            }\n            if (k == b) {\n\
    \                upper = true\n            }\n        }\n        if (lower ^ upper)\
    \ {\n            return true\n        }\n        return false\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009869
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        // Fill up this function body\n\
    \        // You may create other functions as well, if required\n        return\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp23qgwlvh.scala:24)\n\tat Problem.main(tmp23qgwlvh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009868
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        var result = true\n        val\
    \ cases = dict.keys.map(k => {\n            if (k == k.toLowerCase()) {\n    \
    \            \"LOWER\"\n            } else if (k == k.toUpperCase()) {\n     \
    \           \"UPPER\"\n            } else {\n                \"MIXED\"\n     \
    \       }\n        })\n        val set = cases.toSet\n        if (set.size > 1)\
    \ result = false\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\" ->\
    \ \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"p\"\
    \ -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7keotw9m.scala:36)\n\tat Problem.main(tmp7keotw9m.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009869
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        dict.foreach(i => if (i._1.toLowerCase\
    \ != i._1 && i._1.toUpperCase != i._1) return false)\n        dict.foreach(i =>\
    \ if (i._1.toLowerCase == i._1) dict.foreach(j => if (j._1.toUpperCase == j._1)\
    \ return false))\n        dict.foreach(i => if (i._1.toUpperCase == i._1) dict.foreach(j\
    \ => if (j._1.toLowerCase == j._1) return false))\n        return true\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppzsu3lkm.scala:31)\n\tat Problem.main(tmppzsu3lkm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009869
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) {\n         \
    \   false\n        } else {\n            val keys = dict.keys.toList.map(key =>\
    \ key.toLowerCase == key || key.toUpperCase == key)\n            keys.distinct.length\
    \ == 1\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw7my_6f1.scala:28)\n\tat Problem.main(tmpw7my_6f1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009869
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        //your code goes here\n       \
    \ return false\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6zc_pmfg.scala:23)\n\tat Problem.main(tmp6zc_pmfg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009869
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        var keySet = dict.keySet\n    \
    \    if (keySet.isEmpty) return false\n        var b = true\n        if (keySet.head.exists(_.isLower))\
    \ {\n            keySet.foreach(key => if (!key.exists(_.isLower)) b = false)\n\
    \        } else {\n            keySet.foreach(key => if (!key.exists(_.isUpper))\
    \ b = false)\n        }\n        b\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\"\
    \ -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpriy6tkxs.scala:33)\n\tat Problem.main(tmpriy6tkxs.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009872
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        var lc = true\n        var uc =\
    \ true\n        for (k <- dict.keys) {\n            lc = lc && k.toLowerCase ==\
    \ k\n            uc = uc && k.toUpperCase == k\n        }\n        lc || uc\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplkhq9zvh.scala:30)\n\tat Problem.main(tmplkhq9zvh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009872
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n\t\t// Implement the checkDictCase function.\n\
    \        var flag=true\n        var flag1=false\n        var flag2=false\n   \
    \     var flag3=false\n        var map=dict.keys\n        if(map.isEmpty){\n \
    \           return false\n        }\n        for(x<-map){\n            var s=x.getClass\n\
    \            if(!s.equals(\"String\")){\n                flag=false\n        \
    \    }\n        }\n        if(flag==true){\n            for(x<-map){\n       \
    \         if(x.exists(_.isUpper)){\n                    flag1=true\n         \
    \       }\n                if(x.exists(_.isLower)){\n                    flag2=true\n\
    \                }\n            }\n            if(flag1==true && flag2==true){\n\
    \                flag3=false\n            }\n            else if(flag1==true ||\
    \ flag2==true){\n                flag3=true\n            }\n        }\n      \
    \  return flag3\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3oibppf0.scala:53)\n\tat Problem.main(tmp3oibppf0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009874
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        val s = dict.keys.toList(0)\n \
    \       val check = s(0).isUpper\n        dict.keys.forall(a => a(0).isUpper ==\
    \ check)\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpb6bsh_33.scala:26)\n\tat Problem.main(tmpb6bsh_33.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009874
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        // If given map is empty return\
    \ false\n        if (dict.isEmpty) {\n            return false\n        }\n  \
    \      // This flag will be set to true if the first encountered key is in lower\
    \ case\n        var isLowerCase = true\n        // This flag will be set to true\
    \ if the first encountered key is in upper case\n        var isUpperCase = true\n\
    \        // Iterate over every element of the map and determine if the key is\
    \ in upper case or lower case\n        for (elem <- dict) {\n            // If\
    \ the current element is in lower case and the flag is still true, \n        \
    \    // set the lower case flag to true\n            if (elem._1.toLowerCase ==\
    \ elem._1 && isLowerCase) {\n                isLowerCase = true\n            }\n\
    \            // If the current element is in upper case and the flag is still\
    \ true, \n            // set the upper case flag to true\n            else if\
    \ (elem._1.toUpperCase == elem._1 && isUpperCase) {\n                isUpperCase\
    \ = true\n            }\n            // If the current element is in lower case\
    \ and the lower case flag is set to false, \n            // return false\n   \
    \         else if (elem._1.toLowerCase == elem._1 && !isLowerCase) {\n       \
    \         return false\n            }\n            // If the current element is\
    \ in upper case and the upper case flag is set to false, \n            // return\
    \ false\n            else if (elem._1.toUpperCase == elem._1 && !isUpperCase)\
    \ {\n                return false\n            }\n            // If the current\
    \ element is in lower case and the upper case flag is set to true, \n        \
    \    // set the upper case flag to false\n            else if (elem._1.toLowerCase\
    \ == elem._1 && isUpperCase) {\n                isUpperCase = false\n        \
    \    }\n            // If the current element is in upper case and the lower case\
    \ flag is set to true, \n            // set the lower case flag to false\n   \
    \         else if (elem._1.toUpperCase == elem._1 && isLowerCase) {\n        \
    \        isLowerCase = false\n            }\n        }\n        // If the lower\
    \ case flag is set to\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsndh0o2v.scala:28:8\
    \ ---------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mfor\e[0m (elem\
    \ <- dict) {\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m        Found:\
    \    Unit\n\e[31m   |\e[0m        Required: Boolean\n\e[31m29 |\e[0m         \
    \   \e[34m// If the current element is in lower case and the flag is still true,\
    \ \e[0m\n\e[31m30 |\e[0m            \e[34m// set the lower case flag to true\e\
    [0m\n\e[31m31 |\e[0m            \e[33mif\e[0m (elem._1.toLowerCase == elem._1\
    \ && isLowerCase) {\n\e[31m32 |\e[0m                isLowerCase = \e[31mtrue\e\
    [0m\n\e[31m33 |\e[0m            }\n\e[31m34 |\e[0m            \e[34m// If the\
    \ current element is in upper case and the flag is still true, \e[0m\n\e[31m35\
    \ |\e[0m            \e[34m// set the upper case flag to true\e[0m\n\e[31m36 |\e\
    [0m            \e[33melse\e[0m \e[33mif\e[0m (elem._1.toUpperCase == elem._1 &&\
    \ isUpperCase) {\n\e[31m37 |\e[0m                isUpperCase = \e[31mtrue\e[0m\n\
    \e[31m38 |\e[0m            }\n\e[31m39 |\e[0m            \e[34m// If the current\
    \ element is in lower case and the lower case flag is set to false, \e[0m\n\e\
    [31m40 |\e[0m            \e[34m// return false\e[0m\n\e[31m41 |\e[0m         \
    \   \e[33melse\e[0m \e[33mif\e[0m (elem._1.toLowerCase == elem._1 && !isLowerCase)\
    \ {\n\e[31m42 |\e[0m                \e[33mreturn\e[0m \e[31mfalse\e[0m\n\e[31m43\
    \ |\e[0m            }\n\e[31m44 |\e[0m            \e[34m// If the current element\
    \ is in upper case and the upper case flag is set to false, \e[0m\n\e[31m45 |\e\
    [0m            \e[34m// return false\e[0m\n\e[31m46 |\e[0m            \e[33melse\e\
    [0m \e[33mif\e[0m (elem._1.toUpperCase == elem._1 && !isUpperCase) {\n\e[31m47\
    \ |\e[0m                \e[33mreturn\e[0m \e[31mfalse\e[0m\n\e[31m48 |\e[0m  \
    \          }\n\e[31m49 |\e[0m            \e[34m// If the current element is in\
    \ lower case and the upper case flag is set to true, \e[0m\n\e[31m50 |\e[0m  \
    \          \e[34m// set the upper case flag to false\e[0m\n\e[31m51 |\e[0m   \
    \         \e[33melse\e[0m \e[33mif\e[0m (elem._1.toLowerCase == elem._1 && isUpperCase)\
    \ {\n\e[31m52 |\e[0m                isUpperCase = \e[31mfalse\e[0m\n\e[31m53 |\e\
    [0m         "
  stdout: ''
  timestamp: 1660009873
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        var lk = false\n        var uk\
    \ = false\n        for (key <- dict.keys) {\n            if (key.charAt(0).isLower)\
    \ lk = true\n            else uk = true\n        }\n        if (lk && uk) false\n\
    \        else true\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp086rn89t.scala:32)\n\tat Problem.main(tmp086rn89t.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009875
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        dict.keys.count(x => x.head.isUpper)\
    \ match {\n            case 0 => {\n                return true\n            }\n\
    \            case _ => {\n                dict.keys.count(x => x.head.isLower)\
    \ match {\n                    case 0 => {\n                        return true\n\
    \                    }\n                    case _ => {\n                    \
    \    return false\n                    }\n                }\n            }\n \
    \       }\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpx34y3k1f.scala:38)\n\tat Problem.main(tmpx34y3k1f.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009875
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.isEmpty) return false\n\
    \        val lower = dict.keys.filter(_ == _.toLowerCase()).size\n        val\
    \ upper = dict.keys.filter(_ == _.toUpperCase()).size\n        return lower ==\
    \ dict.size || upper == dict.size\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\"\
    \ -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmp2jf9_t1b.scala:20:37 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mlower\e[0m = dict.keys.filter(_\
    \ == _.toLowerCase()).size\n\e[31m\e[31m   |\e[0m                            \
    \         ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                         \
    \        Wrong number of parameters, expected: 1\n\e[31m\e[31m-- [E086] Syntax\
    \ Error: /tmp/tmp2jf9_t1b.scala:21:37 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mupper\e[0m = dict.keys.filter(_ == _.toUpperCase()).size\n\
    \e[31m\e[31m   |\e[0m                                     ^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 1\n2 errors found\n"
  stdout: ''
  timestamp: 1660009872
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n\tdict.keys.forall(_.isLowerCase) || dict.keys.forall(_.isUpperCase)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpac01a53g.scala:20:4 ------------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m   Incompatible combinations of tabs and spaces in indentation prefixes.\n\e\
    [31m   |\e[0m   Previous indent : 1 tab\n\e[31m   |\e[0m   Latest indent   : 4\
    \ spaces\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpac01a53g.scala:19:19\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m\tdict.keys.forall(_.isLowerCase)\
    \ || dict.keys.forall(_.isUpperCase)\n\e[31m\e[31m   |\e[0m\t                \
    \ ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue isLowerCase is not a member of String\
    \ - did you mean _$1.toLowerCase?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpac01a53g.scala:19:54\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m\tdict.keys.forall(_.isLowerCase)\
    \ || dict.keys.forall(_.isUpperCase)\n\e[31m\e[31m   |\e[0m\t                \
    \                                    ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ isUpperCase is not a member of String - did you mean _$2.toUpperCase?\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009875
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        if (dict.size == 0) false\n   \
    \     else {\n            var upper = true\n            var lower = true\n   \
    \         dict.foreach(x => {\n                upper = upper && (x._1.toUpperCase\
    \ == x._1)\n                lower = lower && (x._1.toLowerCase == x._1)\n    \
    \        })\n            upper || lower\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp82d0npxr.scala:33)\n\tat Problem.main(tmp82d0npxr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009876
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        // Fill in the correct code\n \
    \       var s = true\n        var u = true\n        for(x <- dict) {\n       \
    \     if (x._1.toLowerCase != x._1) s = false\n            if (x._1.toUpperCase\
    \ != x._1) u = false\n        }\n        if (s || u) true else false\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2wwdv3tx.scala:31)\n\tat Problem.main(tmp2wwdv3tx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009876
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        val keys = dict.keys.toList\n \
    \       val upper = keys.filter(x => x.toUpperCase() == x)\n        val lower\
    \ = keys.filter(x => x.toLowerCase() == x)\n        (upper.length == keys.length\
    \ || lower.length == keys.length)\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\"\
    \ -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_vm2qqeb.scala:27)\n\tat Problem.main(tmp_vm2qqeb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009876
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n      // we keep track of the status of\
    \ each key (upper/lower) and at\n      // the end compare the size of the 2 sets\
    \ to see if they differ\n      val (lowerCaseSet, upperCaseSet) = dict.keys.foldLeft(Set[String](),\
    \ Set[String]()) { (s, k) =>\n        if (k.toLowerCase == k)\n          (s._1\
    \ + k, s._2)\n        else if (k.toUpperCase == k)\n          (s._1, s._2 + k)\n\
    \        else\n          (s._1, s._2)\n      }\n      lowerCaseSet.size == 0 ||\
    \ upperCaseSet.size == 0\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1fh8448z.scala:34)\n\tat Problem.main(tmp1fh8448z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009877
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n      if (dict.isEmpty) false\n      else\
    \ if (dict.forall(_._1.forall(_.isUpper))) true\n      else if (dict.forall(_._1.forall(_.isLower)))\
    \ true\n      else false\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009877
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        return true\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_hgs1tho.scala:23)\n\tat Problem.main(tmp_hgs1tho.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009835
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        // The default comparer works here\
    \ too\n        // val lc = dict.keys.groupBy(x => x.toLowerCase)\n        // val\
    \ uc = dict.keys.groupBy(x => x.toUpperCase)\n        // return !lc.values.exists(x\
    \ => x.size > 1) || !uc.values.exists(x => x.size > 1)\n        return !dict.keys.groupBy(x\
    \ => x.toLowerCase).values.exists(x => x.size > 1) || !dict.keys.groupBy(x =>\
    \ x.toUpperCase).values.exists(x => x.size > 1)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp66u1cu45.scala:27)\n\tat Problem.main(tmp66u1cu45.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009877
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        var allLower = true\n        var\
    \ allUpper = true\n        for (i <- dict.keys) {\n            if (i == i.toLowerCase)\
    \ {\n                allUpper = false\n            } else if (i == i.toUpperCase)\
    \ {\n                allLower = false\n            } else {\n                return\
    \ false\n            }\n        }\n        if (allLower) {\n            return\
    \ true\n        } else if (allUpper) {\n            return true\n        } else\
    \ {\n            return false\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpawll6uei.scala:41)\n\tat Problem.main(tmpawll6uei.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009877
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppwrz74yr.scala:22)\n\tat Problem.main(tmppwrz74yr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009812
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        // Your code here\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmozdhtb6.scala:18:61\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m    \e[33mdef\e[0m \e[36mcheckDictCase\e\
    [0m(\e[36mdict\e[0m : \e[35mMap\e[0m[\e[35mString\e[0m,\e[35mString\e[0m]) : \e\
    [35mBoolean\e[0m = {\n\e[31m\e[31m   |\e[0m                                  \
    \                           ^\e[0m\n\e[31m   |\e[0m                          \
    \                             Found:    Unit\n\e[31m   |\e[0m                \
    \                                       Required: Boolean\n\e[31m19 |\e[0m   \
    \     \e[34m// Your code here\e[0m\n\e[31m20 |\e[0m    }\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660009876
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        //val s = dict.map(x => (x._1(0).isUpper,\
    \ x._1(0).isLower))\n        //s.toSet.size == 1\n        dict.forall(x =>  x._1.matches(\"\
    [a-z]+\") || x._1.matches(\"[A-Z]+\"))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpd7yxf5nm.scala:25)\n\tat Problem.main(tmpd7yxf5nm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009877
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n    \tvar lower = true\n    \tvar upper\
    \ = true\n    \tfor (key <- dict.keys) {\n    \t\tlower = lower && (key == key.toLowerCase)\n\
    \    \t\tupper = upper && (key == key.toUpperCase)\n    \t}\n    \tlower || upper\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdc701bq_.scala:30)\n\tat Problem.main(tmpdc701bq_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009877
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        // Your code here\n        false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn0miywcg.scala:23)\n\tat Problem.main(tmpn0miywcg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009877
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a map, return true if all keys are strings in lower \n    //\
    \ case or all keys are strings in upper case, else return false.\n    // The function\
    \ should return false is the given map is empty.\n    // Examples:\n    // >>>\
    \ checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n\
    \    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
    , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n  \
    \  // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"\
    36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
    \ : Map[String,String]) : Boolean = {\n        var allUpper = true\n        var\
    \ allLower = true\n        for ((k,v) <- dict) {\n            allUpper &= (k.toUpperCase\
    \ == k)\n            allLower &= (k.toLowerCase == k)\n        }\n        allUpper\
    \ || allLower\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpskxe1i77.scala:30)\n\tat Problem.main(tmpskxe1i77.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009877
