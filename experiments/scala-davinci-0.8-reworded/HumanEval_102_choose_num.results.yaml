language: scala
name: HumanEval_102_choose_num
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     for (n <- (y.toInt).to(x.toInt, -1)) {\n            if (n % 2 == 0) return\
    \ n\n        }\n        return -1\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978907
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     val min = min(x, y)\n        val max = max(x, y)\n        //for (i <- x\
    \ to y) {\n        //    if (i % 2 == 0) return i\n        //}\n        if (max\
    \ % 2 == 0) max\n        else if (min % 2 == 0) min\n        else -1\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(chooseNum((12l), (15l)) ==\
    \ (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpoqa8_hd5.scala:13:18 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mmin\e[0m = min(x, y)\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35mmin\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmpoqa8_hd5.scala:14:18 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = max(x, y)\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35mmax\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659978903
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     var chosen : Long = -1l\n        for (num <- x to y) {\n            if (num\
    \ % 2 == 0) {\n                chosen = num\n            }\n        }\n      \
    \  return chosen\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978907
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     var i = max(x, y)\n        while (i >= min(x, y)) {\n            if (i %\
    \ 2 == 0) return i\n            i -= 1\n        }\n        return -1\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(chooseNum((12l), (15l)) ==\
    \ (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpevatkmea.scala:22)\n\tat Problem.main(tmpevatkmea.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978907
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     if (x % 2 == 0) {\n            val x2 = x\n            val y2 = if (y %\
    \ 2 == 0) y else y - 1\n            if (x2 > y2) -1 else y2\n        } else {\n\
    \            val x2 = x + 1\n            val y2 = if (y % 2 == 0) y else y - 1\n\
    \            if (x2 > y2) -1 else y2\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978907
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     // YOUR CODE GOES HERE\n        return -1\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpoetzke5e.scala:17)\n\tat Problem.main(tmpoetzke5e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978906
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     require(x >= 0 && y >= 0)\n        var max : Long = -1\n        for (i <-\
    \ x to y) {\n            if (i % 2 == 0 && i > max) max = i\n        }\n     \
    \   max\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     var (i, maxEven) = (x, -1l)\n        while (i <= y) {\n            if (i\
    \ % 2 == 0) maxEven = max(maxEven, i)\n            i += 1\n        }\n       \
    \ maxEven\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978907
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     if (x % 2 == 0) x\n        else if (x + 1 <= y) x + 1\n        else -1\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l), (15l))\
    \ == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzbqu_lwd.scala:18)\n\tat Problem.main(tmpzbqu_lwd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978907
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     if (x > y) {\n            -1\n        } else {\n            if (x % 2 ==\
    \ 0) x else x + 1\n        }\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l), (12l))\
    \ == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n    assert(chooseNum((5234l),\
    \ (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l),\
    \ (10l)) == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpa2ppcd09.scala:20)\n\tat Problem.main(tmpa2ppcd09.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978906
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     if (x > y) return -1\n        if (x % 2 == 0) return x\n        else return\
    \ x + 1\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprvef0b6p.scala:18)\n\tat Problem.main(tmprvef0b6p.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978907
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     if (x == y) {\n            if (x % 2 == 0) {\n                return x\n\
    \            } else {\n                return -1\n            }\n        } else\
    \ if (x < y) {\n            if (x % 2 == 0) {\n                return max(x, chooseNum(x\
    \ + 1, y))\n            } else {\n                return chooseNum(x + 1, y)\n\
    \            }\n        } else {\n            return -1\n        }\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(chooseNum((12l), (15l)) == (14l));\n\
    \    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l))\
    \ == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l),\
    \ (29l)) == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat Problem$.chooseNum(tmpwhrx2db9.scala:23)\n\
    \tat Problem$.chooseNum(tmpwhrx2db9.scala:21)\n\tat Problem$.chooseNum(tmpwhrx2db9.scala:23)\n\
    \tat Problem$.chooseNum(tmpwhrx2db9.scala:21)\n\tat Problem$.chooseNum(tmpwhrx2db9.scala:23)\n\
    \tat Problem$.chooseNum(tmpwhrx2db9.scala:21)\n\tat Problem$.chooseNum(tmpwhrx2db9.scala:23)\n\
    \tat Problem$.chooseNum(tmpwhrx2db9.scala:21)\n\tat Problem$.chooseNum(tmpwhrx2db9.scala:23)\n\
    \tat Problem$.chooseNum(tmpwhrx2db9.scala:21)\n\tat Problem$.chooseNum(tmpwhrx2db9.scala:23)\n\
    \tat Problem$.chooseNum(tmpwhrx2db9.scala:21)\n\tat Problem$.chooseNum(tmpwhrx2db9.scala:23)\n\
    \tat Problem$.chooseNum(tmpwhrx2db9.scala:21)\n\tat Problem$.chooseNum(tmpwhrx2db9.scala:23)\n\
    \tat Problem$.chooseNum(tmpwhrx2db9.scala:21)\n\tat Problem$.chooseNum(tmpwhrx2db9.scala:23)\n\
    \tat Problem$.chooseNum(tmpwhrx2db9.scala:21)\n\tat Problem$.chooseNum(tmpwhrx2db9.scala:23)\n\
    \tat Problem$.chooseNum(tmpwhrx2db9.scala:21)\n\tat Problem$.chooseNum(tmpwhrx2db9.scala:23)\n\
    \tat Problem$.chooseNum(tmpwhrx2db9.scala:21)\n\tat Problem$.chooseNum(tmpwhrx2db9.scala:23)\n\
    \tat Problem$.chooseNum(tmpwhrx2db9.scala:21)\n\tat Problem$.chooseNum(tmpwhrx2db9.scala:23)\n\
    \tat Problem$.chooseNum(tmpwhrx2db9.scala:21)\n\tat Problem$.chooseNum(tmpwhrx2db9.scala:23)\n\
    \tat Problem$.chooseNum(tmpwhrx2db9.scala:21)\n\tat Problem$.chooseNum(tmpwhrx2db9.scala:23)\n\
    \tat Problem$.chooseNum(tmpwhrx2db9.scala:21)\n\tat Problem$.chooseNum(tmpwhrx2db9.scala:23)\n\
    \tat Problem$.chooseNum(tmpwhrx2db9.scala:21)\n\tat Problem$.chooseNum(tmpwhrx2db9.scala:23)\n\
    \tat Problem$.chooseNum(tmpwhrx2db9.scala:21)\n\tat Problem$.chooseNum(tmpwhrx2db9.scala:23)\n\
    \tat Problem$.chooseNum(tmpwhrx2db9.scala:21)\n\tat Problem$.chooseNum(tmpwhrx2db9.scala:23)\n\
    \tat Problem$.chooseNum(tmpwhrx2db9.scala:21)\n\tat Problem$.chooseNum(tmpwhrx2db9.scala:23)\n\
    \tat Problem$.chooseNum(tmpwhrx2db9.scala:21)\n\tat Problem$.chooseNum(tmpwhrx2db9.scala:23)\n\
    \tat Problem$.chooseNum(tmpwhrx2db9.scala:21)\n\tat Problem$.chooseNum(tmpwhrx2db9.scala:23)\n\
    \tat Problem$.chooseNum(tmpwhrx2db9.scala:21)\n\tat Problem$"
  stdout: ''
  timestamp: 1659978907
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     val range = x to y\n        if (range.exists(_ % 2 == 0)) {\n          \
    \  val sorted_range = range.filter(_ % 2 == 0).toList.sorted\n            return\
    \ sorted_range.last\n        }\n        return -1\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978908
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     if (x > y) {\n            -1\n        } else {\n            if (x % 2 ==\
    \ 0) {\n                x\n            } else {\n                chooseNum(x +\
    \ 1, y)\n            }\n        }\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0necyc9k.scala:24)\n\tat Problem.main(tmp0necyc9k.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978906
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     val z = x+y\n        if (z % 2 == 0 && x % 2 == 0) z / 2 else if (z % 2\
    \ == 0 && y % 2 == 0) z / 2 else -1\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpd6mp2j3y.scala:17)\n\tat Problem.main(tmpd6mp2j3y.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978907
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     return 0\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3tw7zjd3.scala:16)\n\tat Problem.main(tmp3tw7zjd3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978907
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     if (x > y) {\n            return -1\n        }\n        else if (x % 2 ==\
    \ 0) {\n            return x\n        }\n        else {\n            return chooseNum(x\
    \ + 1, y)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpp4326fs5.scala:24)\n\tat Problem.main(tmpp4326fs5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978907
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     var i : Long = x;\n        var res : Long = -1;\n        while (i <= y)\
    \ {\n            if (i % 2 == 0) {\n                res = i;\n            }\n\
    \            i = i + 1;\n        }\n        return res;\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978906
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     // TODO: Fix this function to match the problem description\n        x\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l), (15l))\
    \ == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5hx4rl62.scala:17)\n\tat Problem.main(tmp5hx4rl62.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978907
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \   // This function takes a number x and returns the biggest number that \n \
    \     // is even and is in the range [0, x]. If there's no such number, then \n\
    \      // the function should return -1.\n      // For example:\n      // >>>\
    \ x(12l)\n      // (12l)\n      // >>> x(13l)\n      // (12l)\n      // >>> x(1l)\n\
    \      // (0l)\n      // >>> x(0l)\n      // (0l)\n      // >>> x(-1l)\n     \
    \ // (-1l)\n      def x(x : Long) : Long = {\n        if (x < 0) -1 else if (x\
    \ % 2 == 0) x else x - 1\n      }\n      if (x > y) -1 else x(y)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(chooseNum((12l), (15l)) == (14l));\n\
    \    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l))\
    \ == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l),\
    \ (29l)) == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpeweme84l.scala:30:12 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m      \e[33mif\e[0m (x > y) -\e[31m1\e[0m \e[33melse\e\
    [0m x(y)\n\e[31m\e[31m   |\e[0m          ^^^\e[0m\n\e[31m   |\e[0mvalue > is not\
    \ a member of Long => Long, but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress\
    \ towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Ordered.orderingToOrdered\n\
    \e[31m   |\e[0m  import math.Ordering.Implicits.infixOrderingOps\n\e[31m   |\e\
    [0m\n1 error found\n"
  stdout: ''
  timestamp: 1659978907
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     require(x > 0 && y > 0)\n        if (x > y) {\n            -1\n        }\
    \ else {\n            if (x % 2 == 0) {\n                x\n            } else\
    \ {\n                chooseNum(x + 1, y)\n            }\n        }\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(chooseNum((12l), (15l)) == (14l));\n\
    \    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l))\
    \ == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l),\
    \ (29l)) == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp52wys4c9.scala:25)\n\tat Problem.main(tmp52wys4c9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978907
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     val lst = for (i <- x to y) yield i\n        lst.filter(_ % 2 == 0).reduceLeftOption(_\
    \ max _).getOrElse(-1)\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978907
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     // Your code here!\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0013zvys.scala:12:47\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m    \e[33mdef\e[0m \e[36mchooseNum\e\
    [0m(\e[36mx\e[0m : \e[35mLong\e[0m, \e[36my\e[0m : \e[35mLong\e[0m) : \e[35mLong\e\
    [0m = {\n\e[31m\e[31m   |\e[0m                                               ^\e\
    [0m\n\e[31m   |\e[0m                                               Found:    Unit\n\
    \e[31m   |\e[0m                                               Required: Long\n\
    \e[31m13 |\e[0m        \e[34m// Your code here!\e[0m\n\e[31m14 |\e[0m    }\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978907
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     if (x < 0 || y < 0) {\n            println(\"The function takes two positive\
    \ numbers. Returning -1.\")\n            return -1\n        }\n        var tmp\
    \ : Long = max(x, y)\n        while (tmp >= min(x, y)) {\n            if (tmp\
    \ % 2 == 0) {\n                return tmp\n            }\n            tmp -= 1\n\
    \        }\n        return -1\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l), (12l))\
    \ == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n    assert(chooseNum((5234l),\
    \ (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l),\
    \ (10l)) == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfn9qnh3i.scala:28)\n\tat Problem.main(tmpfn9qnh3i.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978914
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     ((x to y).toList.filter(_ % 2 == 0)).max\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.UnsupportedOperationException: empty.max\n\tat scala.collection.IterableOnceOps.max(IterableOnce.scala:945)\n\
    \tat scala.collection.IterableOnceOps.max$(IterableOnce.scala:943)\n\tat scala.collection.AbstractIterable.max(Iterable.scala:926)\n\
    \tat Problem$.chooseNum(tmpm3boewtx.scala:13)\n\tat Problem$.main(tmpm3boewtx.scala:17)\n\
    \tat Problem.main(tmpm3boewtx.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978916
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     if (x <= y) {\n            val n = if (x % 2 == 0) x else x + 1\n      \
    \      if (n <= y) n else -1\n        } else -1\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp96khq8x9.scala:19)\n\tat Problem.main(tmp96khq8x9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978915
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     val (x, y) = (min(x, y), max(x, y))\n        val xEven = x % 2 == 0\n  \
    \      val yEven = y % 2 == 0\n        if (xEven && yEven) {\n            return\
    \ y\n        } else if (!xEven && !yEven) {\n            return y - 1\n      \
    \  } else {\n            return x\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmppvbl5dd5.scala:13:13 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m (x, y) = (min(x, y), max(x, y))\n\
    \e[31m\e[31m   |\e[0m             ^\e[0m\n\e[31m   |\e[0m             Recursive\
    \ \e[33mvalue\e[0m \e[35m$1$\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmppvbl5dd5.scala:13:16 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m (x, y) = (min(x, y), max(x, y))\n\
    \e[31m\e[31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35m$1$\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978913
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     if (x > y) -1\n        else {\n            var z = max(x, y)\n         \
    \   while (z >= x) {\n                if (z % 2 == 0) return z\n             \
    \   z -= 1\n            }\n            -1\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978916
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     // Your code goes here.\n        // return 42l;\n        var maxEven : Long\
    \ = 0\n        for (i <- x to y) {\n            if (i % 2 == 0) {\n          \
    \      maxEven = i\n            }\n        }\n        if (maxEven != 0) {\n  \
    \          return maxEven\n        }\n        else {\n            return -1\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978917
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     if (x > y) -1\n        else {\n            val r = (x to y).filter(i =>\
    \ i % 2 == 0).max\n            if (r < x) -1 else r\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(chooseNum((12l), (15l)) == (14l));\n\
    \    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l))\
    \ == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l),\
    \ (29l)) == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.UnsupportedOperationException: empty.max\n\tat scala.collection.IterableOnceOps.max(IterableOnce.scala:945)\n\
    \tat scala.collection.IterableOnceOps.max$(IterableOnce.scala:943)\n\tat scala.collection.AbstractIterable.max(Iterable.scala:926)\n\
    \tat Problem$.chooseNum(tmplcyeesed.scala:15)\n\tat Problem$.main(tmplcyeesed.scala:26)\n\
    \tat Problem.main(tmplcyeesed.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978916
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n\tvar\
    \ max = -1L\n\tfor (i <- x to y) {\n\t    if (i % 2 == 0) {\n\t\tmax = i\n\t \
    \   }\n\t}\n\treturn max\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp27mtw5g_.scala:17:4 ------------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m\t    }\n\e[31m\e[31m   |\e[0m\t    ^\e[0m\n\e[31m  \
    \ |\e[0m   Incompatible combinations of tabs and spaces in indentation prefixes.\n\
    \e[31m   |\e[0m   Previous indent : 2 tabs\n\e[31m   |\e[0m   Latest indent  \
    \ : 1 tab, 4 spaces\n\e[31m\e[31m-- Error: /tmp/tmp27mtw5g_.scala:20:4 ------------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m   Incompatible combinations of tabs and spaces in indentation prefixes.\n\e\
    [31m   |\e[0m   Previous indent : 1 tab\n\e[31m   |\e[0m   Latest indent   : 4\
    \ spaces\n2 errors found\n"
  stdout: ''
  timestamp: 1659978913
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     if (x > y) return -1\n        if (x % 2 == 0) x\n        else if (y % 2\
    \ == 0) y\n        else return -1\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpucpyqsa5.scala:19)\n\tat Problem.main(tmpucpyqsa5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978915
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     if (x > y) {\n            return -1\n        }\n        if (x % 2 == 0)\
    \ {\n            return x\n        }\n        return chooseNum(x + 1, y)\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l), (15l))\
    \ == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwlhr6dk_.scala:22)\n\tat Problem.main(tmpwlhr6dk_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978915
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     var result = -1l\n        if (x % 2 == 0) result = x\n        else if (x\
    \ + 1 <= y) result = x + 1\n        if (result == -1l && y % 2 == 0) result =\
    \ y\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkj3y4he9.scala:20)\n\tat Problem.main(tmpkj3y4he9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978916
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \   if (x > y)\n        return -1\n      for (n <- x to y) {\n        if (n %\
    \ 2 == 0)\n          return n\n      }\n      return -1\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3yxw06ih.scala:22)\n\tat Problem.main(tmp3yxw06ih.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978916
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     for (i <- (y to x by -1)) {\n            if (i % 2 == 0) return i\n    \
    \    }\n        return -1\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978916
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     if (x % 2 == 0) {\n            if (x <= y) x else -1\n        } else {\n\
    \            if (x + 1 <= y) x + 1 else -1\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_18zmaeo.scala:20)\n\tat Problem.main(tmp_18zmaeo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978915
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     val z = if (x % 2 == 0) x else x + 1\n        if (z > y) -1 else z\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l), (15l))\
    \ == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2qevy06a.scala:17)\n\tat Problem.main(tmp2qevy06a.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978915
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     (x to y).filter(_ % 2 == 0).reduceOption((a, b) => max(a, b)).getOrElse(-1)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l), (15l))\
    \ == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978917
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     if (x % 2 == 0)\n            if (x > y)\n                -1\n          \
    \  else\n                x\n        else if (x + 1 > y)\n            -1\n    \
    \    else\n            x + 1\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l), (12l))\
    \ == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n    assert(chooseNum((5234l),\
    \ (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l),\
    \ (10l)) == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjiwq33g5.scala:24)\n\tat Problem.main(tmpjiwq33g5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978916
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     if (x > y) -1l\n        else if (x % 2 == 0) x\n        else chooseNum(x\
    \ + 1, y)\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbhhflwcg.scala:18)\n\tat Problem.main(tmpbhhflwcg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978916
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     if (x % 2 == 0) {\n            var f = false\n            var i = x\n  \
    \          while (i <= y) {\n                if (i % 2 == 0) {\n             \
    \       f = true\n                    return i\n                }\n          \
    \      i += 1\n            }\n            if (!f) return -1\n        }\n     \
    \   else {\n            var f = false\n            var i = x + 1\n           \
    \ while (i <= y) {\n                if (i % 2 == 0) {\n                    f =\
    \ true\n                    return i\n                }\n                i +=\
    \ 1\n            }\n            if (!f) return -1\n        }\n        return -1\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l), (15l))\
    \ == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptfdkp0yg.scala:40)\n\tat Problem.main(tmptfdkp0yg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978916
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     if (x <= y) {\n            if (x % 2 == 0) x\n            else if (y % 2\
    \ == 0) y\n            else -1\n        }\n        else -1\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4my83dou.scala:21)\n\tat Problem.main(tmp4my83dou.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978916
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     if (x > y) -1l else (x + y - 1) & ~1\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpaxdv8pmc.scala:16)\n\tat Problem.main(tmpaxdv8pmc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978916
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     var even = x % 2 == 0\n        val start = if (even) x else x + 1\n    \
    \    val end = if (even) y else y - 1\n        if (end < start) -1 else end\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l), (15l))\
    \ == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_zmfch3q.scala:19)\n\tat Problem.main(tmp_zmfch3q.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978916
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     if (x % 2 == 0) return x\n        if (x % 2 == 1) {\n            if (x +\
    \ 1 > y) return -1\n            return x + 1\n        }\n        return -1\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l), (15l))\
    \ == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbtszrd4k.scala:21)\n\tat Problem.main(tmpbtszrd4k.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978917
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \   throw new RuntimeException(\"Not implemented yet!\")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.RuntimeException: Not implemented yet!\n\tat Problem$.chooseNum(tmp85n4s_7u.scala:13)\n\
    \tat Problem$.main(tmp85n4s_7u.scala:16)\n\tat Problem.main(tmp85n4s_7u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978921
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     if (x <= y) {\n            if (x % 2 == 0)\n                x\n        \
    \    else\n                chooseNum(x + 1, y)\n        }\n        else\n    \
    \        -1\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpngf48o6s.scala:23)\n\tat Problem.main(tmpngf48o6s.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978922
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     if (x > y) -1 else\n            (x to y).toList.filter(z => z % 2 == 0).sortWith(_\
    \ > _).head\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: head of empty list\n\tat scala.collection.immutable.Nil$.head(List.scala:662)\n\
    \tat scala.collection.immutable.Nil$.head(List.scala:661)\n\tat Problem$.chooseNum(tmppb8c3vgh.scala:14)\n\
    \tat Problem$.main(tmppb8c3vgh.scala:23)\n\tat Problem.main(tmppb8c3vgh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978924
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     var i = x\n        while (i <= y) {\n            if (i % 2 == 0) return\
    \ i\n            i += 1\n        }\n        return -1\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpweqbtper.scala:21)\n\tat Problem.main(tmpweqbtper.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978924
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     // YOUR CODE GOES HERE\n        var z = -1\n        for (a <- x to y) {\n\
    \            if (a % 2 == 0) z = a\n        }\n        z\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcgmcei8k.scala:16:32\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m            \e[33mif\e[0m (a\
    \ % \e[31m2\e[0m == \e[31m0\e[0m) z = a\n\e[31m\e[31m   |\e[0m               \
    \                 ^\e[0m\n\e[31m   |\e[0m                                Found:\
    \    (a : Long)\n\e[31m   |\e[0m                                Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978924
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     if (x > y) return -1\n        else if (x % 2 == 0) x\n        else if (x\
    \ + 1 == y) return -1\n        else chooseNum(x + 1, y)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpu54tb8w1.scala:19)\n\tat Problem.main(tmpu54tb8w1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978924
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     if (x > y) {\n            return -1\n        }\n        if (x % 2 == 0)\
    \ {\n            return x\n        }\n        if (y % 2 == 0) {\n            return\
    \ y\n        }\n        return -1\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjgqdtnx3.scala:25)\n\tat Problem.main(tmpjgqdtnx3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978924
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     def chooseNumHelper(n : Long) : Long = n match {\n            case n if\
    \ n < x => -1\n            case n if n % 2 == 0 => n\n            case n => chooseNumHelper(n\
    \ - 1)\n        }\n        chooseNumHelper(y)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978924
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     if (x > y) return -1\n        var z = x % 2\n        if (z == 0) return\
    \ x\n        return chooseNum(x + 1, y)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpi72l7xu6.scala:19)\n\tat Problem.main(tmpi72l7xu6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978924
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     // If both x and y are equal\n        if (x == y) {\n            // If x\
    \ is even then return x.\n            if (x % 2 == 0) {\n                return\
    \ x\n            }\n            // Return -1 if x is odd.\n            else {\n\
    \                return -1\n            }\n        }\n        // If x is less\
    \ than y\n        else if (x < y) {\n            // If y is even, then return\
    \ y\n            if (y % 2 == 0) {\n                return y\n            }\n\
    \            // Else if y - 1 is even then return y - 1\n            else if ((y\
    \ - 1) % 2 == 0) {\n                return y - 1\n            }\n            //\
    \ Else if y - 2 is even then return y - 2\n            else if ((y - 2) % 2 ==\
    \ 0) {\n                return y - 2\n            }\n            // Else return\
    \ -1.\n            else {\n                return -1\n            }\n        }\n\
    \        // If x is greater than y\n        else {\n            // If x is even,\
    \ then return x\n            if (x % 2 == 0) {\n                return x\n   \
    \         }\n            // Else if x - 1 is even then return x - 1\n        \
    \    else if ((x - 1) % 2 == 0) {\n                return x - 1\n            }\n\
    \            // Else if x - 2 is even then return x - 2\n            else if ((x\
    \ - 2) % 2 == 0) {\n                return x - 2\n            }\n            //\
    \ Else return -1.\n            else {\n                return -1\n           \
    \ }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp20o9__ui.scala:65)\n\tat Problem.main(tmp20o9__ui.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978924
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     if (x == y) {\n            if (x % 2 == 0) return x\n            else return\
    \ -1\n        }\n        var lower = x\n        var upper = y\n        if (x >\
    \ y) {\n            lower = y\n            upper = x\n        }\n        var curr\
    \ : Long = lower\n        while (curr <= upper) {\n            if (curr % 2 ==\
    \ 0) return curr\n            curr += 1\n        }\n        return -1\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(chooseNum((12l), (15l)) ==\
    \ (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxoqnwa1o.scala:31)\n\tat Problem.main(tmpxoqnwa1o.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978925
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \   val numbers = new ArrayBuffer[Long]\n      for (i <- x to y) {\n        if\
    \ (i % 2 == 0) numbers += i\n      }\n      numbers.size match {\n        case\
    \ 0 => -1\n        case 1 => numbers(0)\n        case _ => numbers.max\n     \
    \ }\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978926
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     if (x % 2 == 0) {\n            return x\n        }\n        else if (x+1\
    \ < y && (x+1) % 2 == 0) {\n            return x+1\n        }\n        else {\n\
    \            return -1\n        }\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkgh93rf0.scala:24)\n\tat Problem.main(tmpkgh93rf0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978925
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     if (x % 2 == 0) x\n        else if (x + 1 == y) -1\n        else chooseNum(x\
    \ + 1, y)\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjz6u3ewj.scala:18)\n\tat Problem.main(tmpjz6u3ewj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978925
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     var i = x\n        while (i <= y) {\n            if (i % 2 == 0) return\
    \ i\n            i += 1\n        }\n        return -1\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpweqbtper.scala:21)\n\tat Problem.main(tmpweqbtper.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978924
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     require(x > 0)\n        require(y > 0)\n        if (x > y) return -1\n \
    \       return ((2 * (x / 2)).max(2 * (y / 2)))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp129tj4j4.scala:25)\n\tat Problem.main(tmp129tj4j4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978925
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     var acc = -1l\n        var i = x\n        while (i <= y) {\n           \
    \ if (i % 2 == 0) {\n                acc = i\n            }\n            i +=\
    \ 1\n        }\n        acc\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l), (12l))\
    \ == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n    assert(chooseNum((5234l),\
    \ (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l),\
    \ (10l)) == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978925
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     if (x > y)\n            -1\n        else if (x%2 == 0)\n            x\n\
    \        else\n            chooseNum(x+1, y)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp15dqylsp.scala:21)\n\tat Problem.main(tmp15dqylsp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978925
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     val z = x.to(y).filter(_ % 2 == 0).max\n        if (z == 0) -1\n       \
    \ else z\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.UnsupportedOperationException: empty.max\n\tat scala.collection.IterableOnceOps.max(IterableOnce.scala:945)\n\
    \tat scala.collection.IterableOnceOps.max$(IterableOnce.scala:943)\n\tat scala.collection.AbstractIterable.max(Iterable.scala:926)\n\
    \tat Problem$.chooseNum(tmpldzbz2a6.scala:13)\n\tat Problem$.main(tmpldzbz2a6.scala:19)\n\
    \tat Problem.main(tmpldzbz2a6.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978927
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \   (x to y).find(n => n % 2 == 0).getOrElse(-1)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3xkn1z3x.scala:16)\n\tat Problem.main(tmp3xkn1z3x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978927
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     var a = x\n        var b = y\n        var max : Long = -1\n        if (a\
    \ > b) {\n            var t = a\n            a = b\n            b = t\n      \
    \  }\n        while (a <= b) {\n            if (a % 2 == 0) max = a\n        \
    \    a += 1\n        }\n        return max\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6m4ud2vc.scala:29)\n\tat Problem.main(tmp6m4ud2vc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978925
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     return -1\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1iz3c1y6.scala:16)\n\tat Problem.main(tmp1iz3c1y6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978925
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     if (x < y)\n            if (x % 2 == 0) x\n            else chooseNum(x\
    \ + 1, y)\n        else if (x > y) chooseNum(y, x)\n        else if (x % 2 ==\
    \ 0) x\n        else -1\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzdwuo1ms.scala:21)\n\tat Problem.main(tmpzdwuo1ms.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978926
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \   var b = y - x + 1\n      var v = new Array[Long](b.toInt)\n      for (i <-\
    \ 0 until b.toInt) {\n        v(i) = x + i\n      }\n      v = v.filter(i => i\
    \ % 2 == 0)\n      if (v.length > 0) {\n        v.max\n      } else {\n      \
    \  -1\n      }\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NegativeArraySizeException: -16\n\tat Problem$.chooseNum(tmps4ym9ct1.scala:14)\n\
    \tat Problem$.main(tmps4ym9ct1.scala:31)\n\tat Problem.main(tmps4ym9ct1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978928
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     if (x > y) -1l\n        else if (x % 2 == 0) x\n        else chooseNum(x\
    \ + 1, y)\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbhhflwcg.scala:18)\n\tat Problem.main(tmpbhhflwcg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978916
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     if (x > y) -1\n        else {\n            var upperBound : Long = max(x,\
    \ y)\n            while (upperBound % 2 != 0) upperBound -= 1\n            upperBound\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpctjfiexh.scala:27)\n\tat Problem.main(tmpctjfiexh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978930
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     if (x <= y) {\n            if (x % 2 == 0) x\n            else chooseNum(x\
    \ + 1, y)\n        }\n        else -1\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8egngdtr.scala:20)\n\tat Problem.main(tmp8egngdtr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978930
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     var chooseNum : Long = -1\n        for (i <- x to y) {\n            if (i\
    \ % 2 == 0) chooseNum = i\n        }\n        return chooseNum\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(chooseNum((12l), (15l)) == (14l));\n\
    \    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l))\
    \ == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l),\
    \ (29l)) == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978934
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     val a = if (x % 2 == 0) x else x + 1\n        if (a > y) return -1\n   \
    \     else return a\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp258pjcnk.scala:18)\n\tat Problem.main(tmp258pjcnk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978932
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     // TODO: Implement this function.\n        0\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4gc3bgvu.scala:17)\n\tat Problem.main(tmp4gc3bgvu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978932
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     if (x > y) {\n            -1\n        } else {\n            if (x % 2 ==\
    \ 0) {\n                x\n            } else {\n                chooseNum(x +\
    \ 1, y)\n            }\n        }\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0necyc9k.scala:24)\n\tat Problem.main(tmp0necyc9k.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978906
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     def chooseNum_helper(i : Long) : Long = {\n            if (i % 2 == 0) i\n\
    \            else if (i > y) -1\n            else chooseNum_helper(i + 1)\n  \
    \      }\n        chooseNum_helper(x)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplwsphp7e.scala:21)\n\tat Problem.main(tmplwsphp7e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     // Implement this function\n        if (x%2 == 0 && y%2 == 0) {\n      \
    \      if (x <= y) x else y\n        } else if (x%2 == 1 && y%2 == 1) {\n    \
    \        if (x > y) (x - 1) else (y - 1)\n        } else if (x%2 == 0 && y%2 ==\
    \ 1) {\n            if (x <= y - 1) x else (y - 1)\n        } else {\n       \
    \     if (x - 1 <= y) (x - 1) else y\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpalc3f_ng.scala:25)\n\tat Problem.main(tmpalc3f_ng.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978932
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n\t\t\
    // Fast O(1) solution which is better if the input is big\n\t\tval z = x + y\n\
    \t\tif (z % 2 == 0) z / 2 else z / 2 - 1\n\t\t\n\t\t// Brute force O(n) solution\n\
    \t\t// (x to y).foldLeft(-1l)((n, m) => if (m % 2 == 0) m else n)\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(chooseNum((12l), (15l)) == (14l));\n\
    \    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l))\
    \ == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l),\
    \ (29l)) == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpedua3cqz.scala:19:4 ------------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m   Incompatible combinations of tabs and spaces in indentation prefixes.\n\e\
    [31m   |\e[0m   Previous indent : 2 tabs\n\e[31m   |\e[0m   Latest indent   :\
    \ 4 spaces\n1 error found\n"
  stdout: ''
  timestamp: 1659978929
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     // The empty list already satisfies the condition.\n        val nums = List()\n\
    \        // Now, let's generate a list of numbers starting from the lowest\n \
    \       // number and ending with the highest number.\n        val range = nums.range(x,\
    \ y + 1)\n        // After that, we filter out all odd numbers from the list.\n\
    \        val evens = range.filter((n) => n % 2 == 0)\n        // If the list of\
    \ even numbers is not empty, then we get the maximum\n        // number from it.\n\
    \        val largestEven = evens.max((n) => n)\n        // If the list of even\
    \ numbers is empty, then the largest even number\n        // is -1.\n        val\
    \ result = if(evens.length > 0) largestEven else -1\n        // Return the result.\n\
    \        result\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8van2ovr.scala:17:25 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mrange\e[0m = nums.range(x,\
    \ y + \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m  value range is not a member of List[Nothing] - did you mean nums.take?\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659978933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     return -1\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1iz3c1y6.scala:16)\n\tat Problem.main(tmp1iz3c1y6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978925
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     val bignum = BigInt(max(x, y))\n        // Is this even?\n        if (bignum\
    \ % 2 == 0) {\n            return bignum.toLong\n        }\n        // Is this\
    \ close to a number that is even?\n        if (bignum + 1 == BigInt(0)) {\n  \
    \          return -1\n        }\n        if (bignum + 1 % 2 == 0) {\n        \
    \    return (bignum + 1).toLong\n        }\n        return -1\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(chooseNum((12l), (15l)) == (14l));\n\
    \    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l))\
    \ == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l),\
    \ (29l)) == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpyawhf2p0.scala:28)\n\tat Problem.main(tmpyawhf2p0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     val even = (2l to y by 2).toList\n        even.takeWhile(_ <= y).filter(_\
    \ >= x).lastOption.getOrElse(-1l)\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978935
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     // Your code here:\n        var i = y \n        while (i >= x) {\n     \
    \       if (i % 2 == 0) return i\n            i -= 1\n        }\n        return\
    \ -1\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978934
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     if (x % 2 == 0)\n            x\n        else if (x + 1 == y)\n         \
    \   -1\n        else\n            chooseNum(x + 1, y)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpg3_b7e4g.scala:21)\n\tat Problem.main(tmpg3_b7e4g.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978933
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     val min = min(x, y)\n        val max = max(x, y)\n        var biggestEven\
    \ = -1l\n        for (i <- min to max) {\n            if (i % 2 == 0) {\n    \
    \            biggestEven = i\n            }\n        }\n        return biggestEven\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l), (15l))\
    \ == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpav2c75x5.scala:13:18 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mmin\e[0m = min(x, y)\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35mmin\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmpav2c75x5.scala:14:18 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = max(x, y)\n\e\
    [31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m                 \
    \ Recursive \e[33mvalue\e[0m \e[35mmax\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659978931
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     val evens = (x to y).filter(n => n % 2 == 0)\n        if (evens.isEmpty)\n\
    \            -1\n        else\n            evens.max\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978935
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     if (x > y) -1\n        else if (x % 2 == 0) x\n        else chooseNum(x\
    \ + 1, y)\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe10wbiu_.scala:18)\n\tat Problem.main(tmpe10wbiu_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978934
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \   var res : Long = -1\n      var i : Long = y\n      while (i >= x) {\n    \
    \    if (i % 2 == 0) {\n          res = i\n          return res\n        }\n \
    \       i -= 1\n      }\n      return res\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978934
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     if (x > y) return -1\n        var best = 0l\n        for (i <- x to y) if\
    \ (i % 2 == 0) best = i\n        if (best != 0) return best\n        else return\
    \ -1\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978936
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     val l : Long = (x % 2) + (y % 2)\n        if (l == 0) {\n            if\
    \ (x == y) {\n                x\n            } else {\n                if (x >\
    \ y) {\n                    chooseNum(y, x)\n                } else {\n      \
    \              y - 1\n                }\n            }\n        } else {\n   \
    \         if (l == 1) {\n                if (x > y) {\n                    chooseNum(y,\
    \ x)\n                } else {\n                    y - 2\n                }\n\
    \            } else {\n                if (x == y) {\n                    -1\n\
    \                } else {\n                    if (x > y) {\n                \
    \        chooseNum(y, x)\n                    } else {\n                     \
    \   y - 2\n                    }\n                }\n            }\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l), (15l))\
    \ == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphav0uwmf.scala:45)\n\tat Problem.main(tmphav0uwmf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978935
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     if (x > y) -1 else {\n            var n = x\n            while (n <= y)\
    \ {\n                if (n % 2 == 0) return n\n                n += 1\n      \
    \      }\n            -1\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpej_42heg.scala:23)\n\tat Problem.main(tmpej_42heg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978935
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     if (x < y)\n            if (x % 2 == 0)\n                x\n           \
    \ else\n                chooseNum(x + 1, y)\n        else if (x == y)\n      \
    \      if (x % 2 == 0)\n                x\n            else\n                -1\n\
    \        else\n            -1\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l), (12l))\
    \ == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n    assert(chooseNum((5234l),\
    \ (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l),\
    \ (10l)) == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp45s1bktt.scala:27)\n\tat Problem.main(tmp45s1bktt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978936
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n\tvar\
    \ z = y\n\twhile (z >= x) {\n\t    if (z % 2 == 0) {\n\t\treturn z\n\t    }\n\t\
    \    z -= 1\n\t}\n\treturn -1\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l), (12l))\
    \ == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n    assert(chooseNum((5234l),\
    \ (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l),\
    \ (10l)) == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpkjebw8cq.scala:17:4 ------------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m\t    }\n\e[31m\e[31m   |\e[0m\t    ^\e[0m\n\e[31m  \
    \ |\e[0m   Incompatible combinations of tabs and spaces in indentation prefixes.\n\
    \e[31m   |\e[0m   Previous indent : 2 tabs\n\e[31m   |\e[0m   Latest indent  \
    \ : 1 tab, 4 spaces\n\e[31m\e[31m-- Error: /tmp/tmpkjebw8cq.scala:21:4 ------------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m   Incompatible combinations of tabs and spaces in indentation prefixes.\n\e\
    [31m   |\e[0m   Previous indent : 1 tab\n\e[31m   |\e[0m   Latest indent   : 4\
    \ spaces\n2 errors found\n"
  stdout: ''
  timestamp: 1659978934
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     ???\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.NotImplementedError: an implementation is missing\n\tat scala.Predef$.$qmark$qmark$qmark(Predef.scala:344)\n\
    \tat Problem$.chooseNum(tmpcsjg933p.scala:13)\n\tat Problem$.main(tmpcsjg933p.scala:16)\n\
    \tat Problem.main(tmpcsjg933p.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978937
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     val n = max(x, y)\n        var i = n\n        while (i >= min(x, y)) {\n\
    \            if (i % 2 == 0) return i\n            i -= 1\n        }\n       \
    \ -1\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkq_oc8jd.scala:23)\n\tat Problem.main(tmpkq_oc8jd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978938
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \   var ret = -1l\n      for (i <- x to y) {\n        if (i % 2 == 0) ret = i\n\
    \      }\n      ret\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978941
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     var n : Long = x\n        while (n <= y) {\n            if (n % 2 == 0)\
    \ return n\n            n += 1\n        }\n        return -1\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp73p910g5.scala:21)\n\tat Problem.main(tmp73p910g5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978940
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \   if (x%2 == 0)\n        x\n      else if (x == y && x%2 == 1)\n        -1\n\
    \      else\n        chooseNum(x+1, y)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpztsr8v1s.scala:21)\n\tat Problem.main(tmpztsr8v1s.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978940
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     val evens = (x to y).filter(_ % 2 == 0)\n        if (evens.isEmpty) {\n\
    \            -1\n        } else {\n            evens.last\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(chooseNum((12l), (15l)) ==\
    \ (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978942
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     ???\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.NotImplementedError: an implementation is missing\n\tat scala.Predef$.$qmark$qmark$qmark(Predef.scala:344)\n\
    \tat Problem$.chooseNum(tmpcsjg933p.scala:13)\n\tat Problem$.main(tmpcsjg933p.scala:16)\n\
    \tat Problem.main(tmpcsjg933p.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978937
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     // IMPLEMENT ME\n        return 0l\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7pp3ys4i.scala:17)\n\tat Problem.main(tmp7pp3ys4i.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978941
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     var (x1, y1) = (x, y)\n        if (x1 > y1) {\n            (x1, y1) = (y1,\
    \ x1)\n        }\n        var result = -1l\n        while (x1 <= y1) {\n     \
    \       if (x1 % 2 == 0) {\n                result = x1\n            }\n     \
    \       x1 += 1\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpz_1aqt4i.scala:15:21 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            (x1, y1) = (y1, x1)\n\e[31m\e[31m   |\e[0m\
    \                     ^\e[0m\n\e[31m   |\e[0m                     end of statement\
    \ expected but '=' found\n1 error found\n"
  stdout: ''
  timestamp: 1659978939
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     val range = x to y\n        val evenNumbers = range.filter(n => n % 2 ==\
    \ 0)\n        if (evenNumbers.size == 0) {\n            -1\n        } else {\n\
    \            evenNumbers.max\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978943
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     if (x == y) return -1\n        var z = if (x % 2 == 0) x else x + 1\n  \
    \      while (z < y) {\n            if (z % 2 == 0) return z\n            z +=\
    \ 1\n        }\n        -1\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l), (12l))\
    \ == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n    assert(chooseNum((5234l),\
    \ (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l),\
    \ (10l)) == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw6p63q76.scala:22)\n\tat Problem.main(tmpw6p63q76.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978942
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     if (x > y) {\n            return -1\n        }\n        if (x % 2 == 0)\
    \ {\n            return x\n        }\n        return chooseNum(x + 1, y)\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l), (15l))\
    \ == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwlhr6dk_.scala:22)\n\tat Problem.main(tmpwlhr6dk_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978915
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     if (x % 2 == 0) x else if (x == y) -1 else chooseNum(x + 1, y)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(chooseNum((12l), (15l)) ==\
    \ (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpaan7wndq.scala:16)\n\tat Problem.main(tmpaan7wndq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978942
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n\t\t\
    if (x > y) -1l\n\t\telse if (x % 2 == 0) x\n\t\telse chooseNum(x + 1, y)\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l), (15l))\
    \ == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpm9mjncze.scala:16:4 ------------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m   Incompatible combinations of tabs and spaces in indentation prefixes.\n\e\
    [31m   |\e[0m   Previous indent : 2 tabs\n\e[31m   |\e[0m   Latest indent   :\
    \ 4 spaces\n1 error found\n"
  stdout: ''
  timestamp: 1659978939
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \   if (x > y) -1\n      else {\n        val z = x + x % 2\n        if (z > y)\
    \ -1\n        else z\n      }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l), (12l))\
    \ == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n    assert(chooseNum((5234l),\
    \ (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l),\
    \ (10l)) == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkry8g2m0.scala:21)\n\tat Problem.main(tmpkry8g2m0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978943
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     if (x > y) return -1\n        if (x % 2 == 0) return x\n        if (y %\
    \ 2 == 0) return y\n        return -1\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzbyu5f25.scala:19)\n\tat Problem.main(tmpzbyu5f25.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978942
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     var res = -1L\n        for (i <- x to y) {\n            if (i % 2 == 0)\
    \ res = i\n        }\n        res\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978944
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     val even = (n : Long) => n % 2 == 0\n        var max = -1l\n        for\
    \ (i <- x to y) {\n            if (even(i)) {\n                max = i\n     \
    \       }\n        }\n        max\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978944
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     if (x%2 != 0) {\n            if (y%2 != 0) return -1\n            else return\
    \ y\n        }\n        else return x\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6tqfz4kg.scala:20)\n\tat Problem.main(tmp6tqfz4kg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978943
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     var z = x\n        if (x % 2 == 0) z -= 1\n        var flag = true\n   \
    \     while (z < y && flag) {\n            if (z % 2 == 0) flag = false\n    \
    \        else z += 2\n        }\n        if (flag) -1 else z\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppxwxvo6n.scala:23)\n\tat Problem.main(tmppxwxvo6n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978943
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     if (x % 2 == 0) x\n        else if (x + 1 == y) -1\n        else chooseNum(x\
    \ + 1, y)\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjz6u3ewj.scala:18)\n\tat Problem.main(tmpjz6u3ewj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978925
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     // you're free to define other helper functions as necessary\n        def\
    \ helper(n : Long) : Long = {\n            if (n > y) -1\n            else if\
    \ (n % 2 == 0) n\n            else helper(n + 1)\n        }\n        helper(x)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l), (15l))\
    \ == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvw_6bh5w.scala:22)\n\tat Problem.main(tmpvw_6bh5w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978943
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     if (x % 2 == 0) {\n            x\n        } else if (x + 1 == y) {\n   \
    \         -1\n        } else {\n            chooseNum(x + 1, y)\n        }\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l), (15l))\
    \ == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptajg7rk9.scala:22)\n\tat Problem.main(tmptajg7rk9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978944
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     val t = if (x % 2 == 0) x else x + 1\n        if (t > y) -1 else t\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l), (15l))\
    \ == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpihqufyk5.scala:17)\n\tat Problem.main(tmpihqufyk5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978944
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     val lower = max(x, y)\n        val upper = min(x, y)\n        var isEven\
    \ = true\n        while (isEven && lower >= upper) {\n            if (lower %\
    \ 2 == 0) isEven = false\n            else lower -= 1\n        }\n        if (isEven)\
    \ -1 else lower\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpem1bclyg.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33melse\e[0m lower -= \e[31m1\e[0m\n\e\
    [31m\e[31m   |\e[0m                 ^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \    value -= is not a member of Long - did you mean lower.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659978944
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \   // Fill in the code below.\n      var nums = List[Long]()\n      for (i <-\
    \ x to y) {\n        if (i % 2 == 0) nums = i :: nums\n      }\n      if (nums.length\
    \ == 0) -1 else nums.max\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978947
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     val a = if (x > y) y else x\n        val b = if (x > y) x else y\n     \
    \   val n = (b - a + 1) / 2\n        if (n == 0) -1 else (a + (if (b % 2 == 0)\
    \ b else b - 1)) / 2\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpo1qfgnzg.scala:19)\n\tat Problem.main(tmpo1qfgnzg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978946
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     var ans : Long = -1\n        var best : Long = -1\n        for (i <- x to\
    \ y) {\n            if (i % 2 == 0) {\n                ans = i\n             \
    \   best = i\n            }\n        }\n        return best\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978948
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     var n = if (x % 2 == 0) x else x + 1\n        if (n >= y) -1 else if (n\
    \ % 2 == 0) n else n + 1\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpz6nbefff.scala:17)\n\tat Problem.main(tmpz6nbefff.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978947
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     // WRITE YOUR CODE HERE\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l), (12l))\
    \ == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n    assert(chooseNum((5234l),\
    \ (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l),\
    \ (10l)) == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3av19bzu.scala:12:47\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m    \e[33mdef\e[0m \e[36mchooseNum\e\
    [0m(\e[36mx\e[0m : \e[35mLong\e[0m, \e[36my\e[0m : \e[35mLong\e[0m) : \e[35mLong\e\
    [0m = {\n\e[31m\e[31m   |\e[0m                                               ^\e\
    [0m\n\e[31m   |\e[0m                                               Found:    Unit\n\
    \e[31m   |\e[0m                                               Required: Long\n\
    \e[31m13 |\e[0m        \e[34m// WRITE YOUR CODE HERE\e[0m\n\e[31m14 |\e[0m   \
    \ }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978948
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n\ty\
    \ match {\n\t    case y if y % 2 == 0 => y\n\t    case y if y == x => -1\n\t \
    \   case y => chooseNum(x, y - 1)\n\t}\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpvtz79ijh.scala:18:4 ------------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m   Incompatible combinations of tabs and spaces in indentation prefixes.\n\e\
    [31m   |\e[0m   Previous indent : 1 tab\n\e[31m   |\e[0m   Latest indent   : 4\
    \ spaces\n1 error found\n"
  stdout: ''
  timestamp: 1659978946
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     val rng = (x to y).reverse\n        rng.filter(n => n % 2 == 0).headOption\
    \ match {\n            case Some(e) => e\n            case None => -1\n      \
    \  }\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978950
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     var k = max(x, y)\n        while (k >= x) {\n            if (k % 2 == 0)\
    \ return k\n            k -= 1\n        }\n        return -1\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgm0b09ja.scala:24)\n\tat Problem.main(tmpgm0b09ja.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978949
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     if (x % 2 == 0) x\n        else if (x + 1 == y) {\n            if (y % 2\
    \ == 0) y\n            else -1\n        }\n        else chooseNum(x + 1, y)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l), (15l))\
    \ == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcvqbo3ep.scala:21)\n\tat Problem.main(tmpcvqbo3ep.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978950
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     if (x == y)\n            if (x % 2 == 0)\n                x\n          \
    \  else\n                -1\n        else\n            if (x % 2 == 0)\n     \
    \           if (y % 2 == 0)\n                    max(x, y)\n                else\n\
    \                    max(x, chooseNum(x + 1, y - 1))\n            else\n     \
    \           chooseNum(x + 1, y)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l), (12l))\
    \ == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n    assert(chooseNum((5234l),\
    \ (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l),\
    \ (10l)) == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsnybyjl_.scala:29)\n\tat Problem.main(tmpsnybyjl_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978951
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     // REPLACE THIS LINE WITH YOUR CODE\n        if (x%2 != 0 && y%2 != 0) {\n\
    \            return -1\n        } else if (x%2 == 0 && y%2 == 0) {\n         \
    \   return max(x, y)\n        } else if (x%2 == 0 && y%2 != 0) {\n           \
    \ return x\n        } else {\n            return y\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(chooseNum((12l), (15l)) == (14l));\n\
    \    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l))\
    \ == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l),\
    \ (29l)) == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpurhj4pk1.scala:25)\n\tat Problem.main(tmpurhj4pk1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978950
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     // YOUR CODE HERE\n        (y-x).toInt/2+x\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpku2vjeg2.scala:17)\n\tat Problem.main(tmpku2vjeg2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978951
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     // BEGIN SOLUTION\n        (x to y).filter(_ % 2 == 0).maxOption.getOrElse(-1)\n\
    \        // END SOLUTION\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978953
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     if (x % 2 == 0) x\n        else if (x + 1 == y) y\n        else if (x +\
    \ 1 < y) x + 2\n        else -1\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l), (12l))\
    \ == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n    assert(chooseNum((5234l),\
    \ (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l),\
    \ (10l)) == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9twfxqiw.scala:19)\n\tat Problem.main(tmp9twfxqiw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978951
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     if (x > y) -1\n        else {\n            val range = (x to y).toList\n\
    \            var finalNum = -1l\n            for (i <- range) {\n            \
    \    if (i % 2 == 0) finalNum = i\n            }\n            finalNum\n     \
    \   }\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978954
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \   if (x > y) -1\n      else {\n        val m = max(x, y)\n        if (m % 2\
    \ == 0) m\n        else chooseNum(x, m - 1)\n      }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978952
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     var sum: Long = 0;\n        if (x % 2 == 0) {\n            sum = x;\n  \
    \      } else {\n            sum = x + 1;\n        }\n        if (sum > y) {\n\
    \            return -1;\n        }\n        return sum;\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp616e80pw.scala:25)\n\tat Problem.main(tmp616e80pw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978952
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     if (x > y) -1\n        else if (x % 2 == 0) x\n        else chooseNum(x\
    \ + 1, y)\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe10wbiu_.scala:18)\n\tat Problem.main(tmpe10wbiu_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978934
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     val best = if (x % 2 == 0) x else x + 1\n        if (best <= y) best else\
    \ -1\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7dc59fy6.scala:17)\n\tat Problem.main(tmp7dc59fy6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978953
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     if (x % 2 == 0) x\n        else if (x + 1 == y) if (y % 2 == 0) y else -1\n\
    \        else chooseNum(x + 1, y)\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjsm92ebj.scala:18)\n\tat Problem.main(tmpjsm92ebj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978953
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     var result = -1l\n        var i = if (x % 2 == 0) x else x + 1\n       \
    \ while (i <= y) {\n            result = i\n            i += 2\n        }\n  \
    \      result\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978953
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     // Replace 0 with the correct return value.\n        if (x % 2 == 0) x else\
    \ chooseNum(x + 1, y)\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6abb3dnj.scala:17)\n\tat Problem.main(tmp6abb3dnj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978952
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     return y - (y % 2) + 1 - x + (x % 2)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxrkntg41.scala:16)\n\tat Problem.main(tmpxrkntg41.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978953
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     var bigEven = -1l\n        var i = x\n        while (i <= y) {\n       \
    \     if (i % 2 == 0) {\n                bigEven = i\n            }\n        \
    \    i += 1\n        }\n        return bigEven\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978953
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     for (i <- x to y if i % 2 == 0) return i\n        -1\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp66u83tm4.scala:17)\n\tat Problem.main(tmp66u83tm4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978956
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \   if (x == y) {\n        if (x % 2 == 0) return x\n        else return -1\n\
    \      }\n      var max = 0l\n      for (i <- x until y+1) {\n        if (i %\
    \ 2 == 0) {\n          if (i > max) max = i\n        }\n      }\n      if (max\
    \ == 0) return -1\n      else return max\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978956
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     if (x % 2 == 0) {\n            x\n        } else if (x+1 <= y) {\n     \
    \       x+1\n        } else {\n            -1\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpusoohl7v.scala:22)\n\tat Problem.main(tmpusoohl7v.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978955
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     // *************************\n        // DO NOT TOUCH THIS FUNCTION\n  \
    \      // *************************\n        def chooseNumImpl(x : Long, y : Long)\
    \ : Long = {\n            if (x == y) {\n                if (x % 2 == 0)\n   \
    \                 x\n                else\n                    -1\n          \
    \  } else {\n                if (x % 2 == 0)\n                    x\n        \
    \        else\n                    chooseNumImpl(x + 1, y)\n            }\n  \
    \      }\n        chooseNumImpl(x, y)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4owpkuj4.scala:32)\n\tat Problem.main(tmp4owpkuj4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978956
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     if (x > y) -1l\n        else if (x % 2 == 0) x\n        else chooseNum(x\
    \ + 1, y)\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbhhflwcg.scala:18)\n\tat Problem.main(tmpbhhflwcg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978916
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     if (x > y) {\n            // Helper function that returns the biggest even\
    \ number in the range\n            // [2, x] inclusive.\n            def f(x :\
    \ Long) : Long = {\n                if (x == 2) 2\n                else if (x\
    \ % 2 == 0) x\n                else f(x - 1)\n            }\n            if (y\
    \ >= 2) f(y)\n            else -1\n        } else {\n            // Helper function\
    \ that returns the biggest even number in the range\n            // [x, 2] inclusive.\n\
    \            def f(x : Long) : Long = {\n                if (x == 2) 2\n     \
    \           else if (x % 2 == 0) x\n                else f(x + 1)\n          \
    \  }\n            if (x >= 2) f(x)\n            else -1\n        }\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(chooseNum((12l), (15l)) == (14l));\n\
    \    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l))\
    \ == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l),\
    \ (29l)) == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpp9jo3faw.scala:36)\n\tat Problem.main(tmpp9jo3faw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978957
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     // BEGIN SOLUTION\n        if (x%2==0)\n            x\n        else\n  \
    \          x+1\n        // END SOLUTION\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3irj3txm.scala:21)\n\tat Problem.main(tmp3irj3txm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978957
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     val x1 = max(x, y)\n        val y1 = min(x, y)\n        if (x1 % 2 == 0)\
    \ {\n            x1\n        } else if (x1 - 1 >= y1 && (x1 - 1) % 2 == 0) {\n\
    \            x1 - 1\n        } else {\n            -1\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(chooseNum((12l), (15l)) == (14l));\n\
    \    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l))\
    \ == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l),\
    \ (29l)) == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpp664ogxu.scala:25)\n\tat Problem.main(tmpp664ogxu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978957
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     // Write your code here, and replace the following line with your code.\n\
    \        -1\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvf8qlnys.scala:17)\n\tat Problem.main(tmpvf8qlnys.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978958
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     if (x % 2 == 0) x\n        else if (x + 1 == y) y\n        else if (x +\
    \ 1 > y) -1\n        else chooseNum(x + 1, y)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0ij38ar6.scala:19)\n\tat Problem.main(tmp0ij38ar6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978959
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     // This function takes a number z and returns true if z is even and\n  \
    \      // false otherwise.\n        def isEven(z : Long) : Boolean = {\n     \
    \       if (z % 2 == 0) {\n                true\n            } else {\n      \
    \          false\n            }\n        }\n        // This function takes a number\
    \ z and returns the biggest even number\n        // that is less than or equal\
    \ to z. If there's no such number, then\n        // the function should return\
    \ -1.\n        def closestEven(z : Long) : Long = {\n            if (isEven(z))\
    \ {\n                z\n            } else {\n                closestEven(z -\
    \ 1)\n            }\n        }\n        // This function takes a number z and\
    \ returns the smallest even number\n        // that is greater than or equal to\
    \ z. If there's no such number, then\n        // the function should return -1.\n\
    \        def farthestEven(z : Long) : Long = {\n            if (isEven(z)) {\n\
    \                z\n            } else {\n                farthestEven(z + 1)\n\
    \            }\n        }\n        if (x > y) {\n            -1\n        } else\
    \ if (closestEven(x) == -1) {\n            -1\n        } else if (farthestEven(y)\
    \ == -1) {\n            -1\n        } else if (closestEven(x) > farthestEven(y))\
    \ {\n            -1\n        } else {\n            farthestEven(y)\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l), (15l))\
    \ == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptaifkz9p.scala:55)\n\tat Problem.main(tmptaifkz9p.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978959
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \   if (x > y) return -1\n      for (i <- x to y) {\n        if (i % 2 == 0) return\
    \ i\n      }\n      return -1\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l), (12l))\
    \ == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n    assert(chooseNum((5234l),\
    \ (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l),\
    \ (10l)) == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplf0zqj8t.scala:20)\n\tat Problem.main(tmplf0zqj8t.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978961
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     // Implement the body of this function so that it returns\n        // the\
    \ correct value.\n        -1\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l), (12l))\
    \ == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n    assert(chooseNum((5234l),\
    \ (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l),\
    \ (10l)) == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpq5vak_2k.scala:18)\n\tat Problem.main(tmpq5vak_2k.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978958
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     if (x > y) return -1\n        for (z <- y to x by -1) {\n            if\
    \ (z % 2 == 0) return z\n        }\n        return -1\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978961
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \   val l = min(x, y)\n      val h = max(x, y)\n      if (l % 2 == 0) l\n    \
    \  else if (h % 2 == 0) h\n      else -1\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpd5udqtwz.scala:20)\n\tat Problem.main(tmpd5udqtwz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978961
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     if (x <= y) {\n            if (x % 2 == 0) x\n            else chooseNum(x\
    \ + 1, y)\n        }\n        else -1\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8egngdtr.scala:20)\n\tat Problem.main(tmp8egngdtr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978930
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     // The core of the problem can be solved with a math trick.\n        //\
    \ Note that if x >= 2 and y >= 2, then:\n        // (x+y) mod 2 = x mod 2 + y\
    \ mod 2\n        // Let's call (x+y) mod 2 the parity of x+y.\n        // Now\
    \ suppose the parity of x+y is 0. \n        // Then x+y is even, and it is the\
    \ biggest even number in the range [x, y].\n        // Now suppose the parity\
    \ of x+y is 1. \n        // Then we should subtract one from y and call the function\
    \ again.\n        // But it's possible that we're subtracting one from 2.\n  \
    \      // But in that case we can just return -1 right away.\n        if (x <\
    \ 0 || y < 0) {\n            throw new IllegalArgumentException(\"x and y must\
    \ be positive.\")\n        }\n        else if (x > y) {\n            -1\n    \
    \    }\n        else if (x == y) {\n            // The two numbers are equal.\
    \ It's either even or odd.\n            if (x % 2 == 0) {\n                x\n\
    \            }\n            else {\n                -1\n            }\n      \
    \  }\n        else {\n            // x < y.\n            // We should add them\
    \ together and check the parity.\n            if ((x + y) % 2 == 0) {\n      \
    \          // The sum is even.\n                x + y\n            }\n       \
    \     else {\n                // The sum is odd. We need to subtract one from\
    \ y and call the function again.\n                if (y == 2) {\n            \
    \        // y is equal to 2. We need to return -1.\n                    -1\n \
    \               }\n                else {\n                    // y > 2. We can\
    \ call the function again.\n                    chooseNum(x, y - 1)\n        \
    \        }\n            }\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvvx5ct8c.scala:59)\n\tat Problem.main(tmpvvx5ct8c.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978961
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     if (x%2 == 0) x\n        else if (x+1 <= y) x+1\n        else -1\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(chooseNum((12l), (15l)) ==\
    \ (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6h_6nklf.scala:18)\n\tat Problem.main(tmp6h_6nklf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978961
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     var result = -1l\n        for (i <- x to y if i % 2 == 0) result = i\n \
    \       result\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978962
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \   if (x > y) { return -1 }\n      else if (x == y) { return (x % 2 == 0) ? x\
    \ : -1 }\n      else {\n        return chooseNum(x + 1, y)\n      }\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(chooseNum((12l), (15l)) == (14l));\n\
    \    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l))\
    \ == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l),\
    \ (29l)) == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1f7p2rec.scala:14:45 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m      \e[33melse\e[0m \e[33mif\e[0m (x == y) { \e[33mreturn\e\
    [0m (x % \e[31m2\e[0m == \e[31m0\e[0m) ? x : -\e[31m1\e[0m }\n\e[31m\e[31m   |\e\
    [0m                                ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                          value ? is not a member of Boolean\n1 error found\n"
  stdout: ''
  timestamp: 1659978961
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     (x to y).filter(x => x % 2 == 0).max\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.UnsupportedOperationException: empty.max\n\tat scala.collection.IterableOnceOps.max(IterableOnce.scala:945)\n\
    \tat scala.collection.IterableOnceOps.max$(IterableOnce.scala:943)\n\tat scala.collection.AbstractIterable.max(Iterable.scala:926)\n\
    \tat Problem$.chooseNum(tmpwczuc4dn.scala:13)\n\tat Problem$.main(tmpwczuc4dn.scala:17)\n\
    \tat Problem.main(tmpwczuc4dn.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978963
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     var x = x\n        while (x <= y) {\n            if (x % 2 == 0) {\n   \
    \             return x\n            }\n            x += 1\n        }\n       \
    \ return -1\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpt3e_6kfo.scala:13:16 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mvar\e[0m \e[36mx\e[0m = x\n\e[31m\e[31m\
    \   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive \e\
    [33mvariable\e[0m \e[35mx\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978959
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     if (x > y) -1\n        else if (x % 2 == 0) x\n        else chooseNum(x\
    \ + 1, y)\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe10wbiu_.scala:18)\n\tat Problem.main(tmpe10wbiu_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978934
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     val l = x + (if (x % 2 == 0) 0 else 1)\n        val r = y - (if (y % 2 ==\
    \ 0) 0 else 1)\n        if (l > r) -1 else r\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978962
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     var maxEven = -1l\n        var i = x\n        while (i <= y) {\n       \
    \     if (i % 2 == 0) {\n                maxEven = i\n            }\n        \
    \    i += 1\n        }\n        return maxEven\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978963
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     val a = if (x%2 == 0) x else x+1\n        if (a > y) -1 else if (a == y)\
    \ a else chooseNum(a+2, y)\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l), (12l))\
    \ == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n    assert(chooseNum((5234l),\
    \ (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l),\
    \ (10l)) == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsuwv6t9l.scala:17)\n\tat Problem.main(tmpsuwv6t9l.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978962
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     var result : Long = -1\n        for (i <- x to y) {\n            if (i %\
    \ 2 == 0) {\n                result = i\n            }\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978966
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     val range = x to y\n        val evens = range.filter(x => x % 2 == 0)\n\
    \        if (evens.isEmpty) -1 else evens.last\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978966
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     // The range to iterate over is [x, y] inclusive\n        val range = x\
    \ to y\n        // You can use 'if' as an expression in Scala.\n        // The\
    \ expression following 'if' is the returned value.\n        if (x > y) {\n   \
    \         -1\n        } else {\n            // Iterate over the range.\n     \
    \       for (n <- range) {\n                // If n is even, then return it.\n\
    \                if (n % 2 == 0) {\n                    return n\n           \
    \     }\n            }\n            // If we get here, then there's no even number\
    \ in the range [x, y].\n            -1\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvw0l44kt.scala:32)\n\tat Problem.main(tmpvw0l44kt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978966
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     ???\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.NotImplementedError: an implementation is missing\n\tat scala.Predef$.$qmark$qmark$qmark(Predef.scala:344)\n\
    \tat Problem$.chooseNum(tmpcsjg933p.scala:13)\n\tat Problem$.main(tmpcsjg933p.scala:16)\n\
    \tat Problem.main(tmpcsjg933p.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978937
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     if (x % 2 == 0) {\n            if (x <= y) {\n                x\n      \
    \      } else {\n                chooseNum(x - 1, y)\n            }\n        }\
    \ else {\n            chooseNum(x + 1, y)\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp15ovijw4.scala:24)\n\tat Problem.main(tmp15ovijw4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978965
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     if (x == y) return -1\n        var m : Long = x\n        while (m % 2 !=\
    \ 0) m += 1\n        if (m <= y) return m\n        else return -1\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(chooseNum((12l), (15l)) == (14l));\n\
    \    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l))\
    \ == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l),\
    \ (29l)) == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpky10vh54.scala:20)\n\tat Problem.main(tmpky10vh54.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978967
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     var ans = -1l\n        val max = x.max(y)\n        val min = x.min(y)\n\
    \        for (i <- min to max) {\n            if (i % 2 == 0) {\n            \
    \    ans = i\n            }\n        }\n        ans\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_h5dx889.scala:25)\n\tat Problem.main(tmp_h5dx889.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978968
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     if (x % 2 == 0) {\n            if (x > y) -1 else x\n        } else if (x\
    \ + 1 > y) -1 else x + 1\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgk0xedt0.scala:18)\n\tat Problem.main(tmpgk0xedt0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978966
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     var a = y\n        while (a >= x) {\n            if (a % 2 == 0) return\
    \ a\n            a -= 1\n        }\n        return -1\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978967
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     if (x > y) return -1\n        if (x % 2 == 0) return x\n        return chooseNum(x\
    \ + 1, y)\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3eg6uk6p.scala:18)\n\tat Problem.main(tmp3eg6uk6p.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978967
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     require(x > 0 && y > 0)\n        // Fill in here\n        for (i <- y to\
    \ x by -1) {\n            if (i % 2 == 0) return i\n        }\n        -1\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l), (15l))\
    \ == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978969
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     var maxEven : Long = -1\n        for (i <- x to y) {\n            if (i\
    \ % 2 == 0) {\n                maxEven = i\n            }\n        }\n       \
    \ return maxEven\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978970
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     if (x > y) {\n            return -1\n        }\n        if (x == y) {\n\
    \            if (x % 2 == 0) {\n                return x\n            } else {\n\
    \                return -1\n            }\n        }\n        var res = -1\n \
    \       for (i <- x to y) {\n            if (i % 2 == 0) {\n                res\
    \ = i\n            }\n        }\n        return res\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2do1o26_.scala:26:22\
    \ --------------------\e[0m\e[0m\n\e[31m26 |\e[0m                res = i\n\e[31m\e\
    [31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                   \
    \   Found:    (i : Long)\n\e[31m   |\e[0m                      Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978968
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     throw new NotImplementedError\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "scala.NotImplementedError: an implementation is missing\n\tat Problem$.chooseNum(tmpa4svf8ms.scala:13)\n\
    \tat Problem$.main(tmpa4svf8ms.scala:16)\n\tat Problem.main(tmpa4svf8ms.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978969
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     val ans = (x to y).filter(n => n % 2 == 0).max\n        if (ans == 0) {\n\
    \            return -1\n        }\n        return ans\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.UnsupportedOperationException: empty.max\n\tat scala.collection.IterableOnceOps.max(IterableOnce.scala:945)\n\
    \tat scala.collection.IterableOnceOps.max$(IterableOnce.scala:943)\n\tat scala.collection.AbstractIterable.max(Iterable.scala:926)\n\
    \tat Problem$.chooseNum(tmpn69ae_35.scala:13)\n\tat Problem$.main(tmpn69ae_35.scala:21)\n\
    \tat Problem.main(tmpn69ae_35.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978970
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     // TODO: Implement the chooseNum function.\n        ???\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(chooseNum((12l), (15l)) == (14l));\n\
    \    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l))\
    \ == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l),\
    \ (29l)) == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "scala.NotImplementedError: an implementation is missing\n\tat scala.Predef$.$qmark$qmark$qmark(Predef.scala:344)\n\
    \tat Problem$.chooseNum(tmpsqiqbd2d.scala:14)\n\tat Problem$.main(tmpsqiqbd2d.scala:17)\n\
    \tat Problem.main(tmpsqiqbd2d.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978970
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     // TODO - Use recursion to solve this problem\n        if (x <= y) {\n \
    \           if (x % 2 == 0)\n                x\n            else\n           \
    \     chooseNum(x + 1, y)\n        }\n        else\n            -1\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(chooseNum((12l), (15l)) == (14l));\n\
    \    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l))\
    \ == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l),\
    \ (29l)) == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn4qd4zb4.scala:24)\n\tat Problem.main(tmpn4qd4zb4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978970
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     if (x % 2 == 0) x\n        else if (x + 1 > y) -1\n        else chooseNum(x\
    \ + 1, y)\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpp_0jez83.scala:18)\n\tat Problem.main(tmpp_0jez83.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978970
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     if (x % 2 == 0)\n            if (x == y)\n                x\n          \
    \  else\n                chooseNum(x + 1, y)\n        else\n            if (x\
    \ == y)\n                -1\n            else\n                chooseNum(x + 1,\
    \ y)\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1ygspfie.scala:25)\n\tat Problem.main(tmp1ygspfie.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978970
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     if (x % 2 == 0) {\n            if (x <= y) x else -1\n        } else {\n\
    \            if (x + 1 <= y) x + 1 else -1\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_18zmaeo.scala:20)\n\tat Problem.main(tmp_18zmaeo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978915
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     if (x > y) return -1;\n        val sqrtx = sqrt(x);\n        val sqrty =\
    \ sqrt(y);\n        val ceilx = ceil(sqrtx);\n        val floory = floor(sqrty);\n\
    \        if (ceilx == floory) {\n            val floorx = floor(sqrtx);\n    \
    \        if (floorx % 2 == 0) {\n                val root = floorx;\n        \
    \        return root * root;\n            } else {\n                val root =\
    \ floorx + 1;\n                return root * root;\n            }\n        } else\
    \ {\n            val floorx = floor(sqrtx);\n            val ceily = ceil(sqrty);\n\
    \            val root = if (floorx % 2 == 0) floorx else floorx + 1;\n       \
    \     return root * root;\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpx6bnxb1y.scala:22:23\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m                \e[33mreturn\e\
    [0m root * root;\n\e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                       Found:    Double\n\e[31m   |\e[0m      \
    \                 Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpx6bnxb1y.scala:25:23 --------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m                \e[33mreturn\e[0m root * root;\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \   Found:    Double\n\e[31m   |\e[0m                       Required: Long\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpx6bnxb1y.scala:31:19\
    \ --------------------\e[0m\e[0m\n\e[31m31 |\e[0m            \e[33mreturn\e[0m\
    \ root * root;\n\e[31m\e[31m   |\e[0m                   ^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Found:    Double\n\e[31m   |\e[0m               \
    \    Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659978970
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     if (x == y)\n            if (x % 2 == 0)\n                x\n          \
    \  else\n                -1\n        else if (x > y)\n            -1\n       \
    \ else\n            chooseNum(x + 1, y)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbneytncf.scala:24)\n\tat Problem.main(tmpbneytncf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978970
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     var x_ = x\n        var y_ = y\n        var z = -1l\n        if (x > y)\
    \ {\n            x_ = y\n            y_ = x\n        }\n        while (x_ <= y_)\
    \ {\n            if (x_ % 2 == 0) {\n                z = x_\n            }\n \
    \           x_ += 1\n        }\n        return z\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9c0h1mjx.scala:30)\n\tat Problem.main(tmp9c0h1mjx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978970
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     ???\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.NotImplementedError: an implementation is missing\n\tat scala.Predef$.$qmark$qmark$qmark(Predef.scala:344)\n\
    \tat Problem$.chooseNum(tmpcsjg933p.scala:13)\n\tat Problem$.main(tmpcsjg933p.scala:16)\n\
    \tat Problem.main(tmpcsjg933p.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978937
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     if (x > y) {\n            return -1\n        }\n        else if (x == y)\
    \ {\n            if (x % 2 == 0) {\n                return x\n            }\n\
    \            else {\n                return -1\n            }\n        }\n   \
    \     else {\n            if (x % 2 == 0) {\n                return x\n      \
    \      }\n            else {\n                return chooseNum(x + 1, y)\n   \
    \         }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxcejdoc3.scala:34)\n\tat Problem.main(tmpxcejdoc3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978970
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     if (x > y) return -1\n        if (x % 2 == 0) return x\n        return chooseNum(x\
    \ + 1, y)\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3eg6uk6p.scala:18)\n\tat Problem.main(tmp3eg6uk6p.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978967
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     throw new Exception()\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l), (12l))\
    \ == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n    assert(chooseNum((5234l),\
    \ (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l),\
    \ (10l)) == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.Exception\n\tat Problem$.chooseNum(tmp93ouxmjf.scala:13)\n\t\
    at Problem$.main(tmp93ouxmjf.scala:16)\n\tat Problem.main(tmp93ouxmjf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978970
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     // Since x and y are positive numbers, then one of them should be the\n\
    \        // biggest even number.\n        if (x % 2 == 0) {\n            // x\
    \ is even\n            if (y % 2 == 0) {\n                // y is even\n     \
    \           // both x and y are even\n                val maxNum = max(x, y)\n\
    \                return maxNum\n            } else {\n                // y is\
    \ odd\n                // x is even and y is odd\n                val maxNum =\
    \ max(x, y - 1)\n                return maxNum\n            }\n        } else\
    \ {\n            // x is odd\n            if (y % 2 == 0) {\n                //\
    \ y is even\n                // x is odd and y is even\n                val maxNum\
    \ = max(x + 1, y)\n                return maxNum\n            } else {\n     \
    \           // y is odd\n                // both x and y are odd\n           \
    \     val maxNum = max(x + 1, y - 1)\n                return maxNum\n        \
    \    }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5g0r2gum.scala:45)\n\tat Problem.main(tmp5g0r2gum.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978971
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     if (x == y) {\n            if (x % 2 == 0) x else -1\n        } else {\n\
    \            if (x % 2 == 0) \n                chooseNum(x + 1, y) \n        \
    \    else\n                chooseNum(x + 2, y)\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(chooseNum((12l), (15l)) == (14l));\n    assert(chooseNum((13l),\
    \ (12l)) == (-1l));\n    assert(chooseNum((33l), (12354l)) == (12354l));\n   \
    \ assert(chooseNum((5234l), (5233l)) == (-1l));\n    assert(chooseNum((6l), (29l))\
    \ == (28l));\n    assert(chooseNum((27l), (10l)) == (-1l));\n    assert(chooseNum((7l),\
    \ (7l)) == (-1l));\n    assert(chooseNum((546l), (546l)) == (546l));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsybrkp9j.scala:23)\n\tat Problem.main(tmpsybrkp9j.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978971
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // This function takes two positive numbers x and y and returns the\n\
    \    // biggest even integer number that is in the range [x, y] inclusive. If\
    \ \n    // there's no such number, then the function should return -1.\n    //\
    \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
    \ (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n   \
    \     var i : Long = min(x, y)\n        var j : Long = max(x, y)\n        if (i\
    \ % 2 == 1) i += 1\n        if (j % 2 == 1) j -= 1\n        if (i <= j) i else\
    \ -1\n    }\n    def main(args: Array[String]) = {\n    assert(chooseNum((12l),\
    \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
    \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n\
    \    assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
    \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
    \ (546l)) == (546l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqe64o2le.scala:20)\n\tat Problem.main(tmpqe64o2le.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978971
