name: HumanEval_78_hex_key
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // You have been tasked to write a function that receives \n    // a hexadecimal\
  \ number as a string and counts the number of hexadecimal \n    // digits that are\
  \ primes (prime number, or a prime, is a natural number \n    // greater than 1\
  \ that is not a product of two smaller natural numbers).\n    // Hexadecimal digits\
  \ are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are\
  \ 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following\
  \ digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you\
  \ may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F\
  \ are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n\
  \    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n\
  \    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>>\
  \ hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\"))\
  \ == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\"\
  )) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\"\
  )) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n\
  \    }\n\n}\n"
completions: ["        return num.map(s => s match {\n            case 'A' | 'B' |\
    \ 'D' => 1\n            case '2' | '3' | '5' | '7' => 1\n            case _ =>\
    \ 0\n        }).sum", "        if (num.length == 0) return 0\n        val hexMap\
    \ = Map('0' -> 0, '1' -> 1, '2' -> 2, '3' -> 3, '4' -> 4, '5' -> 5, '6' -> 6,\
    \ '7' -> 7, '8' -> 8, '9' -> 9, 'A' -> 10, 'B' -> 11, 'C' -> 12, 'D' -> 13, 'E'\
    \ -> 14, 'F' -> 15)\n        num.toCharArray.map(x => hexMap(x)).filter(x => x\
    \ == 2 || x == 3 || x == 5 || x == 7 || x == 11 || x == 13).length", "       \
    \ val primes = List(2, 3, 5, 7, 11, 13)\n        val dec = Long.parseLong(num,\
    \ 16)\n        primes.filter(num => dec % num == 0).length", "        // Your\
    \ Code Here\n        num.map(x => x match {\n            case '2' => 1l\n    \
    \        case '3' => 1l\n            case '5' => 1l\n            case '7' => 1l\n\
    \            case 'B' => 1l\n            case 'D' => 1l\n            case _ =>\
    \ 0l\n        }).sum", "        val primes = Array(2, 3, 5, 7, 11, 13)\n     \
    \   val hex = Map('0' -> 0, '1' -> 1, '2' -> 2, '3' -> 3, '4' -> 4, '5' -> 5,\
    \ '6' -> 6, '7' -> 7, '8' -> 8, '9' -> 9, 'A' -> 10, 'B' -> 11, 'C' -> 12, 'D'\
    \ -> 13, 'E' -> 14, 'F' -> 15)\n        val numbers = num.map(c => hex(c)).toArray\n\
    \        val dp = Array.ofDim[Int](primes.length + 1, numbers.length + 1)\n  \
    \      for (i <- 1 to primes.length) {\n            for (j <- 1 to numbers.length)\
    \ {\n                dp(i)(j) = dp(i)(j - 1)\n                val k = numbers(j\
    \ - 1)\n                if (primes(i - 1) == k) dp(i)(j) += 1\n            }\n\
    \        }\n        val res = primes.map(p => dp(p)(numbers.length)).max\n   \
    \     res", "      val r = num.map(c => c.toUpper).toList.map(c => {\n       \
    \ val n = c match {\n          case 'A' => 10\n          case 'B' => 11\n    \
    \      case 'C' => 12\n          case 'D' => 13\n          case 'E' => 14\n  \
    \        case 'F' => 15\n          case x => x.toString.toInt\n        }\n   \
    \     n\n      })\n      r.filter(n => n == 2 || n == 3 || n == 5 || n == 7 ||\
    \ n == 11 || n == 13).size", "        def isHexPrime(x : Int) : Boolean = {\n\
    \            val a = (2 to min(x, 11)).filter(y => (x % y == 0)).size == 1\n \
    \           val b = (13 to min(x, 17)).filter(y => (x % y == 0)).size == 1\n \
    \           a || b\n        }\n        def hex2dec(x : String) : Int = {\n   \
    \         val map = Map(0 -> 0, 1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4, 5 -> 5, 6 -> 6,\
    \ 7 -> 7, 8 -> 8, 9 -> 9, 10 -> 10, 11 -> 11, 12 -> 12, 13 -> 13, 14 -> 14, 15\
    \ -> 15)\n            val z = x.map(y => map(y.toString.toInt)).map(y => pow(16,\
    \ x.size - 1 - x.indexOf(y.toString)).toInt * y)\n            z.sum\n        }\n\
    \        def dec2hex(x : Int) : String = {\n            def loop(x : Int, acc\
    \ : List[Int]) : List[Int] = {\n                if (x == 0) acc\n            \
    \    else loop(x / 16, (x % 16) :: acc)\n            }\n            val map =\
    \ Map(0 -> 0, 1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4, 5 -> 5, 6 -> 6, 7 -> 7, 8 -> 8,\
    \ 9 -> 9, 10 -> \"A\", 11 -> \"B\", 12 -> \"C\", 13 -> \"D\", 14 -> \"E\", 15\
    \ -> \"F\")\n            val z = loop(x, Nil).map(y => map(y))\n            z.reverse.mkString\n\
    \        }\n        num.map(x => dec2hex(hex2dec(x.toString))).filter(x => isHexPrime(hex2dec(x))).size",
  "        // val hexKey = new HexKey(num)\n        // hexKey.count()\n        val\
    \ hexKey = new HexKey2(num)\n        hexKey.count()", "        val hex = Array(\"\
    0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"A\", \"\
    B\", \"C\", \"D\", \"E\", \"F\")\n        val n = num.map(x => x.toString)\n \
    \       def find(n : Array[String], len : Int, pos : Int, result : Long) : Long\
    \ = {\n            if (pos == len) result\n            else if (hex.indexOf(n(pos))\
    \ == 0 || hex.indexOf(n(pos)) == 1) find(n, len, pos + 1, result)\n          \
    \  else if (hex.indexOf(n(pos)) == 2 || hex.indexOf(n(pos)) == 3 || hex.indexOf(n(pos))\
    \ == 5 || hex.indexOf(n(pos)) == 7 || hex.indexOf(n(pos)) == 11 || hex.indexOf(n(pos))\
    \ == 13) find(n, len, pos + 1, result + 1)\n            else find(n, len, pos\
    \ + 1, result)\n        }\n        find(n, n.length, 0, 0)", "        // Your\
    \ code goes here.\n        num.toUpperCase.map(getHexNum(_)).filter(isPrime(_)).size",
  "        val dict = Map('2' -> 2, '3' -> 3, '5' -> 5, '7' -> 7, 'B' -> 11, 'D' ->\
    \ 13)\n        num.filter(dict.contains(_)).length", "        var count = 0\n\
    \        val map = new HashMap[Char, Int]\n        val hex = num.toCharArray\n\
    \        map += ('0' -> 0, '1' -> 1, '2' -> 2, '3' -> 3, '4' -> 4, '5' -> 5, '6'\
    \ -> 6, '7' -> 7, '8' -> 8, '9' -> 9, 'A' -> 10, 'B' -> 11, 'C' -> 12, 'D' ->\
    \ 13, 'E' -> 14, 'F' -> 15)\n        for (x <- hex) {\n            if (map(x)\
    \ == 2 || map(x) == 3 || map(x) == 5 || map(x) == 7 || map(x) == 11 || map(x)\
    \ == 13) count += 1\n        }\n        count", "        var sum = 0\n       \
    \ val digits = HashSet(2, 3, 5, 7, 11, 13)\n        for (i <- 0 until num.length)\
    \ {\n            val m = Integer.parseInt(num(i).toString, 16)\n            if\
    \ (digits.contains(m)) sum += 1\n        }\n        sum", "    \t// Fill up this\
    \ function body\n        // 'return 0L' compiles, but is not correct\n       \
    \ val hexTable = List('0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B',\
    \ 'C', 'D', 'E', 'F')\n        val primeTable = List(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103,\
    \ 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191,\
    \ 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277,\
    \ 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379,\
    \ 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467,\
    \ 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587,\
    \ 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677,\
    \ 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797,\
    \ 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907,\
    \ 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997)\n        var\
    \ count = 0\n        for (", "        //println(num)\n        var result = 0l\n\
    \        num.foreach(c => {\n            val v = c match {\n                case\
    \ 'A' => 10\n                case 'B' => 11\n                case 'C' => 12\n\
    \                case 'D' => 13\n                case 'E' => 14\n            \
    \    case 'F' => 15\n                case _ => c.toString.toInt\n            }\n\
    \            if (List(2, 3, 5, 7, 11, 13).contains(v)) result += 1\n        })\n\
    \        result", "        var count = 0l\n        val hexDigits = List(2, 3,\
    \ 5, 7, 11, 13)\n        for (c <- num) {\n            if (hexDigits.contains(Integer.parseInt(c.toString,\
    \ 16))) {\n                count += 1\n            }\n        }\n        count",
  "        val map = Map(\"0\" -> 0, \"1\" -> 1, \"2\" -> 2, \"3\" -> 3, \"4\" ->\
    \ 4, \"5\" -> 5, \"6\" -> 6, \"7\" -> 7, \"8\" -> 8, \"9\" -> 9, \"A\" -> 10,\
    \ \"B\" -> 11, \"C\" -> 12, \"D\" -> 13, \"E\" -> 14, \"F\" -> 15)\n        num.filter(x\
    \ => (x >= '0' && x <= '9') || (x >= 'A' && x <= 'F')).map(map(_)).map(x => if\
    \ (x == 2 || x == 3 || x == 5 || x == 7 || x == 11 || x == 13) 1 else 0).sum",
  "        val hexDigits = \"0123456789ABCDEF\"\n        var n = 0\n        for (i\
    \ <- 0 until num.length) {\n            if (hexDigits.contains(num(i)) && isPrime(hexDigits.indexOf(num(i))))\
    \ n += 1\n        }\n        n", "        val primeMap = Map(2 -> true, 3 -> true,\
    \ 5 -> true, 7 -> true, 11 -> true, 13 -> true)\n        num.flatMap(ch => if\
    \ (primeMap.contains(Integer.parseInt(ch.toString, 16))) Some(ch) else None).length",
  "        var hexDigits = num.split(\"\")\n        var primes = List(2, 3, 5, 7,\
    \ 11, 13)\n        var count = 0\n        for (x <- hexDigits) {\n           \
    \ if (primes.contains(Integer.parseInt(x, 16))) count += 1\n        }\n      \
    \  return count", "        var count = 0l\n        val digits = List(2, 3, 5,\
    \ 7, 11, 13)\n        val map = Map('0' -> 0, '1' -> 1, '2' -> 2, '3' -> 3, '4'\
    \ -> 4, '5' -> 5, '6' -> 6, '7' -> 7, '8' -> 8, '9' -> 9, 'A' -> 10, 'B' -> 11,\
    \ 'C' -> 12, 'D' -> 13, 'E' -> 14, 'F' -> 15)\n        for (i <- 0 until num.length)\
    \ {\n            if (digits.contains(map(num(i)))) count += 1\n        }\n   \
    \     count", "        val hexNums = num.map(x => Integer.parseInt(x.toString,\
    \ 16))\n        def isPrime(num : Int) : Boolean = {\n            if (num == 1)\
    \ false\n            else {\n                val range = (2 to num / 2).toList\n\
    \                range.forall(x => num % x != 0)\n            }\n        }\n \
    \       val primes = hexNums.filter(x => isPrime(x)).toList\n        val numPrimes\
    \ = primes.length\n        numPrimes", "        num.filter(_.isLetter).map(x =>\
    \ if (x == 'A' || x == 'B' || x == 'D') 1 else 0).sum + \n            num.filter(_.isDigit).map(x\
    \ => if (x == '2' || x == '3' || x == '5' || x == '7') 1 else 0).sum", "     \
    \   val m = Map('0' -> 0, '1' -> 1, '2' -> 2, '3' -> 3, '4' -> 4, '5' -> 5, '6'\
    \ -> 6, '7' -> 7, '8' -> 8, '9' -> 9, 'A' -> 10, 'B' -> 11, 'C' -> 12, 'D' ->\
    \ 13, 'E' -> 14, 'F' -> 15)\n        // for (c <- num) yield m(c)\n        def\
    \ isPrime(n : Int) : Boolean = {\n            if (n < 2) return false\n      \
    \      val m = sqrt(n).toInt\n            for (i <- 2 to m) {\n              \
    \  if (n % i == 0) return false\n            }\n            true\n        }\n\
    \        num.map(m(_)).count(isPrime(_))", '        return num.toUpperCase.count(p
    => "2357BD".contains(p))', "        // Returns whether or not the given number\
    \ is prime.\n        def isPrime(n : Int) : Boolean = {\n            if (n < 2)\
    \ return false\n            if (n == 2) return true\n            if (n % 2 ==\
    \ 0) return false\n            val sqrtN = Math.sqrt(n).toInt\n            for\
    \ (i <- 3 to sqrtN by 2) if (n % i == 0) return false\n            return true\n\
    \        }\n        // Converts a number as a string to an int.\n        def strToInt(s\
    \ : String) : Int = {\n            if (s.length() == 1) {\n                s(0)\
    \ match {\n                    case '0' => return 0\n                    case\
    \ '1' => return 1\n                    case '2' => return 2\n                \
    \    case '3' => return 3\n                    case '4' => return 4\n        \
    \            case '5' => return 5\n                    case '6' => return 6\n\
    \                    case '7' => return 7\n                    case '8' => return\
    \ 8\n                    case '9' => return 9\n                    case 'A' =>\
    \ return 10\n                    case 'B' => return 11\n                    case\
    \ 'C' => return 12\n                    case 'D' => return 13\n              \
    \      case 'E' => return 14\n                    case 'F' => return 15\n    \
    \            }\n            }\n            return 0\n        }\n        var cnt\
    \ = 0\n        for (i <- 0 until num.length()) {\n            if (isPrime(strToInt(num.substring(i,\
    \ i + 1)))) cnt += 1\n        }\n        return cnt", "      var ret : Long =\
    \ 0\n      var i : Int = 0\n      while (i < num.length) {\n        if (num(i)\
    \ == '2' || num(i) == '3' || num(i) == '5' || num(i) == '7' || num(i) == 'B' ||\
    \ num(i) == 'D') ret += 1\n        i += 1\n      }\n      ret", '        num.count(x
    => List(2, 3, 5, 7, 11, 13).contains(x.toInt))', "        // Write your code here\n\
    \        num.filter(c => List('2', '3', '5', '7', 'B', 'D').contains(c)).length.toLong",
  "        val decToHex = new HashMap[Int, String]\n        decToHex(10) = \"A\"\n\
    \        decToHex(11) = \"B\"\n        decToHex(12) = \"C\"\n        decToHex(13)\
    \ = \"D\"\n        decToHex(14) = \"E\"\n        decToHex(15) = \"F\"\n      \
    \  //1, 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\
    \ 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151,\
    \ 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239,\
    \ 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337,\
    \ 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433,\
    \ 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541,\
    \ 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641,\
    \ 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743,\
    \ 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857,\
    \ 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971,\
    \ 977, 983, 991, 9", "        val digit = Array(2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107,\
    \ 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193,\
    \ 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281,\
    \ 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383,\
    \ 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479,\
    \ 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593,\
    \ 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683,\
    \ 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809,\
    \ 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911,\
    \ 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997)\n        def getDec(c\
    \ : Char) : Int = {\n            if ('0' <= c && c <= '9') return c - '0'\n  \
    \          else return c - 'A' + 10\n        }\n        var cnt = 0\n        for\
    \ (i <- 0 until num.length) {\n            if (digit.contains(getDec(num(i))))\
    \ cnt += 1\n       ", "    \t(for(str <- num if(str == '2' || str == '3' || str\
    \ == '5' || str == '7' || str == 'B' || str == 'D')) yield 1).size", "       \
    \ val hex = Map('0' -> 0, '1' -> 1, '2' -> 2, '3' -> 3, '4' -> 4, '5' -> 5, '6'\
    \ -> 6, '7' -> 7, '8' -> 8, '9' -> 9, 'A' -> 10, 'B' -> 11, 'C' -> 12, 'D' ->\
    \ 13, 'E' -> 14, 'F' -> 15)\n        def toDecimal(num : String) : Long = {\n\
    \            var result = 0l\n            for (i <- 0 until num.length) {\n  \
    \              result = result * 16 + hex(num(i))\n            }\n           \
    \ result\n        }\n        def isPrime(n : Long) : Boolean = {\n           \
    \ if (n < 2) false\n            else if (n == 2) true\n            else !(2 to\
    \ (sqrt(n).toInt)).exists(x => n % x == 0)\n        }\n        var result = 0l\n\
    \        val numDecimal = toDecimal(num)\n        for (d <- hex.values if isPrime(d))\
    \ {\n            result += (numDecimal / d)\n        }\n        result", "   \
    \     val primes = Set(2, 3, 5, 7, 11, 13)\n        var counter = 0\n        for\
    \ (i <- 0 until num.length) {\n            if (primes.contains(num(i).toInt -\
    \ '0'.toInt)) counter += 1\n            else if (primes.contains(num(i).toInt\
    \ - 'A'.toInt + 10)) counter += 1\n        }\n        counter", "        // Fill\
    \ in the function.\n        val p = (\"2\" :: \"3\" :: \"5\" :: \"7\" :: \"B\"\
    \ :: \"D\" :: Nil).toSet\n        val q = num.toUpperCase.toList.filter(p.contains)\n\
    \        q.length.toLong", "        val m = num.filter(x => x >= '2' && x <= '7'\
    \ || x >= 'B' && x <= 'F').length\n        return m", "        val digits = num.map(c\
    \ => Integer.parseInt(c.toString, 16))\n        digits.filter(n => isPrime(n)).length",
  "        val primes = HashSet[Long](2, 3, 5, 7, 11, 13)\n        val n = num.toLong\n\
    \        var digits = 0\n        var mul = 1\n        var n1 = n\n        while\
    \ (n1 > 0) {\n            val k = n1 % 16\n            if (primes.contains(k))\
    \ digits += 1\n            n1 /= 16\n            mul *= 16\n        }\n      \
    \  digits", "        val digits = \"0123456789ABCDEF\"\n        val primes = Set[Int](2,\
    \ 3, 5, 7, 11, 13)\n        num.map(c => digits.indexOf(c)).filter(i => primes.contains(i)).size",
  "        if (num.isEmpty) 0\n        else {\n            val s = \"123456789ABCDEF\"\
    \n            val ss = \"2 3 5 7 B D\".split(\" \").toList\n            num.map(x\
    \ => s.indexOf(x)).filter(x => ss.contains(x.toString)).size\n        }", "  \
    \      var l = List[Int]()\n        for (x <- List(2, 3, 5, 7, 11, 13)) l = x\
    \ :: l\n        num.filter(x => l.contains(Integer.parseInt(x.toString, 16))).length",
  "        def checkPrime(n : Int) : Boolean = {\n            if (n <= 1) return false\n\
    \            if (n == 2) return true\n            if (n % 2 == 0) return false\n\
    \            var i = 3\n            while (i <= sqrt(n)) {\n                if\
    \ (n % i == 0) return false\n                i += 2\n            }\n         \
    \   return true\n        }\n        def checkKey(num : Int) : Boolean = {\n  \
    \          if (num >= 2 && num <= 7) return true\n            if (num == 11 ||\
    \ num == 13) return true\n            return false\n        }\n        var numL\
    \ = num.length\n        var result = 0l\n        for (i <- 0 until numL) {\n \
    \           if (checkKey(num(i))) result += 1\n        }\n        return result",
  "        // your code\n        0", "        // number of digits that are primes\n\
    \        var count = 0l\n        for (i <- 0 until num.length) {\n           \
    \ val d = num(i)\n            if (d == '2' || d == '3' || d == '5' || d == '7'\
    \ || d == 'B' || d == 'D') count += 1\n        }\n        count", "        //\
    \ If a String has no characters, it is not going to return any Long.\n       \
    \ if (num.length == 0) 0\n        // The Map (collection) is used to map the digits\
    \ of Hexadecimal number to decimal.\n        // It takes an alphabet from 0 to\
    \ F and maps it to decimal from 0 to 15.\n        val hexMap = Map(\"0\" -> 0,\
    \ \"1\" -> 1, \"2\" -> 2, \"3\" -> 3, \"4\" -> 4, \"5\" -> 5, \"6\" -> 6, \"7\"\
    \ -> 7, \"8\" -> 8, \"9\" -> 9,\n        \"A\" -> 10, \"B\" -> 11, \"C\" -> 12,\
    \ \"D\" -> 13, \"E\" -> 14, \"F\" -> 15)\n        // This method is used to convert\
    \ the Hexadecimal string number into decimal.\n        // For example if a string\
    \ is AB, it first converts to binary (using hexMap)\n        // and then converts\
    \ it to decimal number, which is 13.\n        // Math.pow is used to calculate\
    \ the powers of 16.\n        // The sum of all numbers is calculated by reducing\
    \ the list of numbers.\n        def toDecimal(hex : String) : Int = {\n      \
    \      val binList = hex.split(\"\").toList.map(x => hexMap(x))\n            def\
    \ toDecimalHelper(binList : List[Int], count : Int) : Int = {\n              \
    \  if (binList.length == 0) 0\n                else binList.head * pow(16, count).toInt\
    \ + toDecimalHelper(binList.tail, count + 1)\n            }\n            toDecimalHelper(binList,\
    \ 0)\n        }\n        // This function is used to check whether a given number\
    \ is a prime or not.\n        // The method isPrime accepts a number and checks\
    \ whether it is a prime or not.\n        // The range of numbers for which we\
    \ need to check for prime is 1 to\n        // sqrt(number).\n        // For example\
    \ if we need to check whether 13 is a prime or not, we need to\n        // check\
    \ its divisibility from 1 to sqrt(13) which is 3.65. But since we\n        //\
    \ need to check divisibility from 2 to", "        def isPrime(n : Int) : Boolean\
    \ = {\n            if (n == 2) return true\n            if (n == 3) return true\n\
    \            if (n % 2 == 0) return false\n            if (n % 3 == 0) return\
    \ false\n            val lim = sqrt(n).toInt\n            for (i <- 5 to lim by\
    \ 6) {\n                if (n % i == 0) return false\n                if (n %\
    \ (i + 2) == 0) return false\n            }\n            return true\n       \
    \ }\n        var count = 0\n        for (i <- 0 until num.length) {\n        \
    \    val c = num(i)\n            if (c >= 'A' && c <= 'F') {\n               \
    \ if (isPrime(c - 'A' + 10)) count += 1\n            } else {\n              \
    \  if (isPrime(c - '0')) count += 1\n            }\n        }\n        return\
    \ count", "        var ret : Long = 0\n        for (i <- 0 until num.length) {\n\
    \            val c = num(i)\n            c match {\n                case '2' =>\
    \ ret += 1\n                case '3' => ret += 1\n                case '5' =>\
    \ ret += 1\n                case '7' => ret += 1\n                case 'B' =>\
    \ ret += 1\n                case 'D' => ret += 1\n                case _ => \n\
    \            }\n        }\n        ret", "        // Write your code here\n  \
    \      0l", "        // First, convert hexadecimal num to decimal.\n        val\
    \ dec : Int = Integer.parseInt(num, 16)\n        // Compute the prime.\n     \
    \   def isPrime(n : Int) : Boolean = {\n            if (n < 2) return false\n\
    \            var c = 0\n            for (i <- 2 to sqrt(n).toInt) {\n        \
    \        if (n % i == 0) c += 1\n            }\n            return c == 0\n  \
    \      }\n        var c = 0\n        // Then go through its digit.\n        for\
    \ (i <- 0 to num.length - 1) {\n            val digit = Integer.parseInt(num.substring(i,\
    \ i + 1), 16)\n            if (isPrime(digit)) c += 1\n        }\n        return\
    \ c", "        def isPrime(num : Long) : Boolean = {\n            if (num == 1)\
    \ return false\n            for (x <- 2L to round(sqrt(num)).toLong) {\n     \
    \           if (num % x == 0) return false\n            }\n            return\
    \ true\n        }\n        val map = Map(10L -> 'A', 11L -> 'B', 12L -> 'C', 13L\
    \ -> 'D', 14L -> 'E', 15L -> 'F')\n        var nums = num.map(x => if (x >= 'A')\
    \ map.find(_._2 == x).get._1 else x.asDigit)\n        nums.map(x => if (isPrime(x))\
    \ 1 else 0).sum", "        val hex = num.map(x => x.toInt.toString).toList\n \
    \       val hexPrime = \"2357BD\".toList\n        hex.count(x => hexPrime.contains(x))",
  "    \tvar count = 0l\n    \tfor (i <- num) {\n    \t\tif (i == '2' || i == '3'\
    \ || i == '5' || i == '7' || i == 'B' || i == 'D') count += 1\n    \t}\n    \t\
    count", "        var set = Set(\"2\", \"3\", \"5\", \"7\", \"B\", \"D\")\n   \
    \     num.filter(set.contains(_)).length", "      val hex = num.foldLeft(0L)((a,\
    \ b) => a + hexToDec(b))\n      (2 to hex.toInt).foldLeft(0L)((a, b) => if (isPrime(b))\
    \ a + 1 else a)", "        val table = HashMap[Char, Int]('0' -> 0, '1' -> 1,\
    \ '2' -> 2, '3' -> 3, '4' -> 4, '5' -> 5, '6' -> 6, '7' -> 7, '8' -> 8, '9' ->\
    \ 9, 'A' -> 10, 'B' -> 11, 'C' -> 12, 'D' -> 13, 'E' -> 14, 'F' -> 15)\n     \
    \   def isPrime(x : Int) : Boolean = {\n            if (x < 2) return false\n\
    \            if (x == 2) return true\n            if (x % 2 == 0) return false\n\
    \            for (i <- 3 to (sqrt(x).toInt)) {\n                if (x % i == 0)\
    \ return false\n            }\n            return true\n        }\n        def\
    \ f(num : String) : Long = {\n            if (num.isEmpty) return 0\n        \
    \    val x = table(num.head)\n            if (isPrime(x)) return 1 + f(num.tail)\n\
    \            else return f(num.tail)\n        }\n        f(num)", "        val\
    \ digits = Array(\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\"\
    , \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\")\n        val primes = Array(2,\
    \ 3, 5, 7, 11, 13)\n        var result = 0l\n        for (c <- num) if (primes.contains(digits.indexOf(c.toString)))\
    \ result += 1\n        result", "        var m = Map(\"A\" -> 10, \"B\" -> 11,\
    \ \"C\" -> 12, \"D\" -> 13, \"E\" -> 14, \"F\" -> 15)\n        var primeCount\
    \ = 0\n        for (i <- 0 until num.length) {\n            if ((m.contains(num(i).toString)\
    \ && (m(num(i).toString) % 2 != 0) && (m(num(i).toString) % 3 != 0) && (m(num(i).toString)\
    \ % 5 != 0) && (m(num(i).toString) % 7 != 0) && (m(num(i).toString) % 11 != 0)\
    \ && (m(num(i).toString) % 13 != 0)) || ((num(i).toString.toInt % 2 != 0) && (num(i).toString.toInt\
    \ % 3 != 0) && (num(i).toString.toInt % 5 != 0) && (num(i).toString.toInt % 7\
    \ != 0) && (num(i).toString.toInt % 11 != 0) && (num(i).toString.toInt % 13 !=\
    \ 0))) primeCount += 1\n        }\n        primeCount", "        return num.count(c\
    \ => List('2', '3', '5', '7', 'B', 'D').contains(c))", "        def isPrime(num\
    \ : Int) : Boolean = {\n            if (num <= 1) return false\n            val\
    \ sqrt = math.sqrt(num).toInt\n            for (i <- 2 to sqrt) {\n          \
    \      if (num % i == 0) return false\n            }\n            return true\n\
    \        }\n        val digits = \"0123456789ABCDEF\"\n        var count = 0\n\
    \        for (i <- 0 until num.length) {\n            val digit = digits.indexOf(num(i))\n\
    \            if (isPrime(digit)) count += 1\n        }\n        return count",
  "        val primes = Set[Int](2, 3, 5, 7, 11, 13)\n        num.toUpperCase.map(c\
    \ => c.toInt - '0'.toInt).map(i => if (i > 9) i - 7 else i).count(i => primes.contains(i))",
  "        val primes = List(2, 3, 5, 7, 11, 13)\n        num.map(x => {\n       \
    \     primes.filter(y => y == Integer.parseInt(x.toString, 16)).size\n       \
    \ }).sum", "        val hexprimes = Set(\"2\", \"3\", \"5\", \"7\", \"B\", \"\
    D\")\n        var result = 0\n        for (digit <- num) {\n            if (hexprimes.contains(digit.toString))\
    \ result += 1\n        }\n        result", "        val primes = List(2, 3, 5,\
    \ 7, 11, 13)\n        var nums = num.map(x => x.toString.toInt)\n        var result\
    \ = 0\n        for (x <- nums) {\n            if (primes.contains(x)) result +=\
    \ 1\n        }\n        result", "\t\tval prime = Set(2, 3, 5, 7, 11, 13, 17)\n\
    \t\tval hex = Map('0' -> 0, '1' -> 1, '2' -> 2, '3' -> 3, '4' -> 4, \n\t\t\t'5'\
    \ -> 5, '6' -> 6, '7' -> 7, '8' -> 8, '9' -> 9, 'A' -> 10, \n\t\t\t'B' -> 11,\
    \ 'C' -> 12, 'D' -> 13, 'E' -> 14, 'F' -> 15)\n\t\tval ans = num.map(x => hex(x))\n\
    \t\tans.count(x => prime.contains(x))", "        // Write your code here\n   \
    \     var hex : String = \"0123456789ABCDEF\"\n        var hexDigits : List[Char]\
    \ = hex.toList\n        var primes : List[Int] = List(2, 3, 5, 7, 11, 13)\n  \
    \      var result : Long = 0\n        var int_to_char : HashMap[Int, Char] = new\
    \ HashMap[Int, Char]\n        for(i <- 0 until hexDigits.length) {\n         \
    \   int_to_char += i -> hexDigits(i)\n        }\n        var char_to_int : HashMap[Char,\
    \ Int] = new HashMap[Char, Int]\n        for(i <- 0 until hexDigits.length) {\n\
    \            char_to_int += hexDigits(i) -> i\n        }\n        for(digit <-\
    \ num) {\n            if(primes.contains(char_to_int(digit))) result += 1\n  \
    \      }\n        return result", "        var map = Map(\"0\" -> 0, \"1\" ->\
    \ 1, \"2\" -> 2, \"3\" -> 3, \"4\" -> 4, \"5\" -> 5, \"6\" -> 6, \"7\" -> 7, \"\
    8\" -> 8, \"9\" -> 9, \"A\" -> 10, \"B\" -> 11, \"C\" -> 12, \"D\" -> 13, \"E\"\
    \ -> 14, \"F\" -> 15)\n        var array = num.toCharArray\n        var count\
    \ = 0l\n        array.foreach(x => if (map(x.toString).toInt == 2 || map(x.toString).toInt\
    \ == 3 || map(x.toString).toInt == 5 || map(x.toString).toInt == 7 || map(x.toString).toInt\
    \ == 11 || map(x.toString).toInt == 13) count += 1)\n        count", "       \
    \ val m = scala.collection.mutable.HashMap[Char, Int]('0' -> 0, '1' -> 1, '2'\
    \ -> 2, '3' -> 3, '4' -> 4, \n            '5' -> 5, '6' -> 6, '7' -> 7, '8' ->\
    \ 8, '9' -> 9, 'A' -> 10, 'B' -> 11, 'C' -> 12, 'D' -> 13, 'E' -> 14, 'F' -> 15)\n\
    \        val primes = List[Int](2, 3, 5, 7, 11, 13)\n        num.map(m(_)).filter(primes.contains(_)).length",
  "        val primes = Set(2, 3, 5, 7, 11, 13)\n        num.map(x => Integer.parseInt(x.toString,\
    \ 16)).filter(x => primes.contains(x)).size", "        def isPrime(n : Int) :\
    \ Boolean = {\n            if (n < 2) return false\n            if (n == 2) return\
    \ true\n            val r = sqrt(n).toInt\n            for (i <- 2 to r) if (n\
    \ % i == 0) return false\n            return true\n        }\n        num.toList.filter(x\
    \ => x == '2' || x == '3' || x == '5' || x == '7' || x == 'B' || x == 'D').length",
  "        val p = new Problem();\n        p.hexKey2(num);", "        // Your code\
    \ here\n        var count = 0\n        var a = Array(\"2\", \"3\", \"5\", \"7\"\
    , \"B\", \"D\")\n        var h = Array(\"0\", \"1\", \"2\", \"3\", \"4\", \"5\"\
    , \"6\", \"7\", \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\")\n    \
    \    for (i <- 0 to num.length - 1) {\n            for (j <- 0 to a.length - 1)\
    \ {\n                if (num(i).toString == a(j)) {\n                    count\
    \ += 1\n                }\n            }\n        }\n        count", '        0',
  "        // Fill in the code\n        return 0", "        var lst = num.map(c =>\
    \ c.toString).toList\n        var ret = 0\n        lst.foreach(c => {\n      \
    \      if (c == \"2\" || c == \"3\" || c == \"5\" || c == \"7\" || c == \"B\"\
    \ || c == \"D\") ret += 1\n        })\n        ret", "        val dic = scala.collection.mutable.HashMap[String,\
    \ Long]()\n        var count = 0\n        num.foreach(i => {\n            if (i\
    \ == 'A' || i == 'B' || i == 'D') {\n                count += 1\n            }\n\
    \        })\n        count", "    \tvar count = 0l\n    \tfor (i <- 0 until num.length)\
    \ {\n    \t\tval n = num(i)\n    \t\tif (n == 'A' || n == 'B' || n == 'D') count\
    \ += 1\n    \t\telse if (n >= '2' && n <= '7') count += 1\n    \t}\n    \tcount",
  "        if (num.length <= 0) return 0l\n        var ans = 0l\n        val prime\
    \ = List(2, 3, 5, 7, 11, 13)\n        num.foreach(i => prime.foreach(j => if (i\
    \ == j.toHexString.charAt(0)) ans += 1))\n        ans", "        val map = new\
    \ HashMap[Char, Int]\n        map += ('0' -> 0, '1' -> 1, '2' -> 2, '3' -> 3,\
    \ '4' -> 4, '5' -> 5, '6' -> 6, '7' -> 7, '8' -> 8, '9' -> 9, 'A' -> 10, 'B' ->\
    \ 11, 'C' -> 12, 'D' -> 13, 'E' -> 14, 'F' -> 15)\n        val list = List(2,\
    \ 3, 5, 7, 11, 13)\n        return num.foldLeft(0l) {\n            (acc, x) =>\
    \ if (list.contains(map(x))) acc + 1 else acc\n        }", '        num.map(x
    => x.toString.toInt).filter(x => List(2, 3, 5, 7, 11, 13).contains(x)).size',
  "        val hex = num.replace(\"A\", \"10\").replace(\"B\", \"11\").replace(\"\
    C\", \"12\").replace(\"D\", \"13\").replace(\"E\", \"14\").replace(\"F\", \"15\"\
    )\n        val primes = List(2, 3, 5, 7, 11, 13)\n        hex.map(x => x.toString.toInt).foldLeft(0l)((a,\
    \ b) => if (primes.contains(b)) a + 1 else a)", "        // Fill in the code here\n\
    \        var str : String = num.toLowerCase\n        var arr : Array[String] =\
    \ Array[String](\"2\", \"3\", \"5\", \"7\", \"b\", \"d\")\n        var count :\
    \ Long = 0\n        var index : Int = 0\n        for (c <- str) {\n          \
    \  if (arr.contains(c.toString)) {\n                count += 1\n            }\n\
    \        }\n        return count", "    \treturn 0", "        def f(n : String)\
    \ : List[String] = n match {\n            case _ if n.length == 1 => List(n)\n\
    \            case _ => n.slice(0, 1) :: f(n.slice(1, n.length))\n        }\n \
    \       f(num).map(c => if (c == \"A\" || c == \"B\" || c == \"D\") \"11\" else\
    \ c).map(c => if (c == \"C\" || c == \"E\") \"13\" else c).map(c => if (c == \"\
    F\") \"17\" else c).map(c => if (c == \"2\" || c == \"3\" || c == \"5\" || c ==\
    \ \"7\" || c == \"11\" || c == \"13\" || c == \"17\") \"1\" else \"0\").map(c\
    \ => c.toInt).sum", "        var primes = ArrayBuffer[Int]()\n        primes +=\
    \ 2\n        primes += 3\n        primes += 5\n        primes += 7\n        primes\
    \ += 11\n        primes += 13\n        primes += 17\n        val primesLength\
    \ = primes.length\n        var hexKey = 0l\n        val alphabet = \"ABCDEF\"\n\
    \        val numbers = (0 to 9).toArray\n        val map = Map[Char, Int]()\n\
    \        alphabet.zipWithIndex.foreach(x => map += (x._1 -> (x._2 + 10)))\n  \
    \      numbers.zipWithIndex.foreach(x => map += (x._1.toString()(0) -> x._2))\n\
    \        for (ch <- num) {\n            val decimal = map(ch)\n            for\
    \ (p <- 0 until primesLength) {\n                if (decimal == primes(p)) {\n\
    \                    hexKey += 1\n                    break\n                }\n\
    \            }\n        }\n        hexKey", "        // Your code goes here...\n\
    \        0", "        val key = Map(\"0\" -> false, \"1\" -> false, \"2\" -> true,\
    \ \"3\" -> true, \n            \"4\" -> false, \"5\" -> true, \"6\" -> false,\
    \ \"7\" -> true, \"8\" -> false, \n            \"9\" -> false, \"A\" -> false,\
    \ \"B\" -> true, \"C\" -> false, \"D\" -> true, \n            \"E\" -> false,\
    \ \"F\" -> false)\n        var sum = 0\n        for (i <- 0 until num.length)\
    \ {\n            if (key(num(i).toString)) sum += 1\n        }\n        sum",
  "        // Fill up this function body\n        // `0L` is just a placeholder for\
    \ compilation\n        val hexToInt = Map(\n            '0' -> 0,\n          \
    \  '1' -> 1,\n            '2' -> 2,\n            '3' -> 3,\n            '4' ->\
    \ 4,\n            '5' -> 5,\n            '6' -> 6,\n            '7' -> 7,\n  \
    \          '8' -> 8,\n            '9' -> 9,\n            'A' -> 10,\n        \
    \    'B' -> 11,\n            'C' -> 12,\n            'D' -> 13,\n            'E'\
    \ -> 14,\n            'F' -> 15)\n        val primes = List(2, 3, 5, 7, 11, 13)\n\
    \        num.toCharArray.map(c => hexToInt(c)).filter(i => primes.contains(i)).size",
  "        val hex = Array(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)\n        val prime\
    \ = Array(2,3,5,7,11,13)\n        val numList = num.map(x => x.toInt - '0'.toInt).toList\n\
    \        numList.count(x => prime.contains(x))", "    \tval ones = num.map(hex\
    \ => hex.asDigit)\n    \tval primes = Array(2, 3, 5, 7, 11, 13)\n    \tones.filter(one\
    \ => primes.contains(one)).size", "        var temp : Long = 0l\n        for (i\
    \ <- 0 until num.length) {\n            val c = num(i)\n            c match {\n\
    \                case '2' => temp += 1\n                case '3' => temp += 1\n\
    \                case '5' => temp += 1\n                case '7' => temp += 1\n\
    \                case 'B' => temp += 1\n                case 'D' => temp += 1\n\
    \                case _ =>\n            }\n        }\n        temp", "       \
    \ def isPrime(n : Int) : Boolean = {\n            if (n <= 1) return false\n \
    \           if (n == 2) return true\n            for (i <- 2 to (n / 2).toInt)\
    \ if (n % i == 0) return false\n            return true\n        }\n        val\
    \ hexDigits = \"0123456789ABCDEF\"\n        var count = 0\n        for (c <- num)\
    \ if (isPrime(hexDigits.indexOf(c))) count += 1\n        return count", '        num.map(x
    => x.toString.toLong).filter(x => x == 2 || x == 3 || x == 5 || x == 7 || x ==
    11 || x == 13).length', "    \tval digits = \"0123456789ABCDEF\"\n    \tval numerals\
    \ = new Array[Int](16)\n    \tfor (i <- 0 until 16) numerals(i) = digits.indexOf(num(i))\n\
    \    \tvar count = 0\n    \tfor (i <- 0 until 16) if (isPrime(numerals(i))) count\
    \ += 1\n    \tcount", "        val hexDigits = \"0123456789ABCDEF\"\n        val\
    \ primes = List(2, 3, 5, 7, 11, 13)\n        var result = 0l\n        var sub\
    \ = num\n        while(sub.length > 0) {\n            if (primes.contains(hexDigits.indexOf(sub.charAt(0))))\
    \ result += 1\n            sub = sub.substring(1)\n        }\n        result",
  "        num.map(c => c.toUpper).filter(c => c == '2' || c == '3' || c == '5' ||\
    \ c == '7' || c == 'B' || c == 'D').size", "    \tval prime = List(2, 3, 5, 7,\
    \ 11, 13)\n    \tval dict = ('0' to '9').zip(0 to 9).toMap ++ ('A' to 'F').zip(10\
    \ to 15).toMap\n    \tval digitList = num.map(c => dict(c)).toList\n    \tvar\
    \ count = 0\n    \tfor (x <- digitList) {\n    \t\tif (prime.contains(x)) count\
    \ += 1\n    \t}\n    \tcount", "        val primes = List(2, 3, 5, 7, 11, 13)\n\
    \        val map = scala.collection.mutable.Map.empty[Char, Int]\n        var\
    \ i = 0\n        while (i < num.length) {\n            if (map.contains(num(i)))\
    \ map(num(i)) += 1\n            else map(num(i)) = 1\n            i += 1\n   \
    \     }\n        primes.map(prime => map.getOrElse(prime.toHexString.charAt(0),\
    \ 0)).foldLeft(0)(_ + _)", "        // Your code here...\n        return 0l",
  "        if (num.length == 0) 0\n        else num.map(a => a.toInt).filter(a =>\
    \ a == 2 || a == 3 || a == 5 || a == 7 || a == 11 || a == 13).length", '        0',
  "        val hex = \"0123456789ABCDEF\"\n        val primes = Array(2, 3, 5, 7,\
    \ 11, 13)\n        var c = 0\n        for (x <- num) {\n            val i = hex.indexOf(x)\n\
    \            if (primes.contains(i)) c += 1\n        }\n        c", "        val\
    \ hexDigits = Map(\"0\" -> 0, \"1\" -> 1, \"2\" -> 2, \"3\" -> 3, \"4\" -> 4,\
    \ \"5\" -> 5, \"6\" -> 6, \"7\" -> 7, \"8\" -> 8, \"9\" -> 9, \"A\" -> 10, \"\
    B\" -> 11, \"C\" -> 12, \"D\" -> 13, \"E\" -> 14, \"F\" -> 15)\n        val primes\
    \ = List(2, 3, 5, 7, 11, 13)\n        num.map(c => hexDigits(c.toString())).filter(x\
    \ => primes.contains(x)).size", "        val primes = Set(2, 3, 5, 7, 11, 13)\n\
    \        var sum = 0\n        num.foreach(c => sum += if (primes.contains(Integer.parseInt(c.toString,\
    \ 16))) 1 else 0)\n        sum", "    \t// Your code here\n    \t0", "       \
    \ if (num.length == 0) return 0\n        val table = HashMap[Char, Int]('0' ->\
    \ 0, '1' -> 1, '2' -> 2, '3' -> 3, '4' -> 4, '5' -> 5, '6' -> 6, '7' -> 7, '8'\
    \ -> 8, '9' -> 9, 'A' -> 10, 'B' -> 11, 'C' -> 12, 'D' -> 13, 'E' -> 14, 'F' ->\
    \ 15)\n        var result = 0\n        for (char <- num) {\n            val digit\
    \ = table(char)\n            if (digit == 2 || digit == 3 || digit == 5 || digit\
    \ == 7 || digit == 11 || digit == 13) result += 1\n        }\n        result",
  "        // Your code goes here\n        1l", '        (for (i <- num if i.isDigit)
    yield i).map(x => BigInt(x.toString)).filter(x => x.isProbablePrime(10)).length',
  "        num.filter(x => List('2', '3', '5', '7', 'B', 'D').contains(x)).length",
  "        var hexKeyMap = Map(\n            '0' -> 0, '1' -> 1, '2' -> 2, '3' ->\
    \ 3,\n            '4' -> 4, '5' -> 5, '6' -> 6, '7' -> 7,\n            '8' ->\
    \ 8, '9' -> 9, 'A' -> 10, 'B' -> 11,\n            'C' -> 12, 'D' -> 13, 'E' ->\
    \ 14, 'F' -> 15\n        )\n        var prime = List(2, 3, 5, 7, 11, 13)\n   \
    \     var result = 0\n        var nums = num.toList\n        for (i <- 0 until\
    \ nums.length) result += prime.contains(hexKeyMap(nums(i)))\n        result",
  "        val charStr = num.toCharArray.map(_.toString)\n        val hexStr = charStr.map(x\
    \ => x match {\n            case \"A\" => (10l)\n            case \"B\" => (11l)\n\
    \            case \"C\" => (12l)\n            case \"D\" => (13l)\n          \
    \  case \"E\" => (14l)\n            case \"F\" => (15l)\n            case _ =>\
    \ (x.toLong)\n        })\n        var count = 0l\n        for (i <- hexStr) {\n\
    \            if (i == 2l || i == 3l || i == 5l || i == 7l || i == 11l || i ==\
    \ 13l) count += 1\n        }\n        count", '        return 0', "        //\
    \ Your code here\n        if (num.length == 0) 0l\n        else num.map {x =>\
    \ x match {\n            case '2' => 1\n            case '3' => 1\n          \
    \  case '5' => 1\n            case '7' => 1\n            case 'B' => 1\n     \
    \       case 'D' => 1\n            case _ => 0\n        }}.sum", "        val\
    \ primes = Array(2, 3, 5, 7, 11, 13)\n        var count = 0\n        for (c <-\
    \ num) {\n            val n = if (c >= 'A') c - 'A' + 10 else c - '0'\n      \
    \      if (primes.contains(n)) count += 1\n        }\n        count", "      \
    \  val cnt = num.filter(x => \"2357BD\".contains(x)).length\n        return cnt",
  "        val n = num.map(_.toInt)\n        n.map(digitToInt(_)).count(isPrime(_))",
  "        val alpha = \"ABCDEF\"\n        val convertToNum = (c : Char) => if(alpha.contains(c))\
    \ 10 + alpha.indexOf(c) else c.asDigit\n        var sum = 0l\n        for(c <-\
    \ num) {\n            sum += 1l\n        }\n        sum", "        val primes\
    \ = List(2, 3, 5, 7, 11, 13)\n        num.map(_.toInt).map(i => if (i >= 97) i\
    \ - 87 else i - 48).filter(i => primes.contains(i)).size", "        // The number\
    \ of the digits that are primes.\n        var count = 0\n        // Extracting\
    \ each digit and comparing it with the list of hexadecimal primes.\n        for\
    \ (digit <- num) {\n            if (List('2', '3', '5', '7', 'B', 'D').contains(digit))\
    \ {\n                count += 1\n            }\n        }\n        count", " \
    \       var count = 0l\n        for (ch <- num) {\n            ch match {\n  \
    \              case '2' => count += 1\n                case '3' => count += 1\n\
    \                case '5' => count += 1\n                case '7' => count +=\
    \ 1\n                case 'B' => count += 1\n                case 'D' => count\
    \ += 1\n                case _ =>\n            }\n        }\n        count", " \
    \       num.count(Set('2', '3', '5', '7', 'B', 'D').contains(_))", "        var\
    \ result = 0l\n        for (c <- num.toUpperCase) {\n            c match {\n \
    \               case '2' => result += 1\n                case '3' => result +=\
    \ 1\n                case '5' => result += 1\n                case '7' => result\
    \ += 1\n                case 'B' => result += 1\n                case 'D' => result\
    \ += 1\n                case _ =>\n            }\n        }\n        result",
  "        val hexMap = Map(\"0\" -> 0, \"1\" -> 1, \"2\" -> 2, \"3\" -> 3, \"4\"\
    \ -> 4, \"5\" -> 5, \"6\" -> 6, \"7\" -> 7, \"8\" -> 8, \"9\" -> 9, \"A\" -> 10,\
    \ \"B\" -> 11, \"C\" -> 12, \"D\" -> 13, \"E\" -> 14, \"F\" -> 15)\n        var\
    \ counter = 0l\n        for (i <- 0 until num.length) {\n            var digit\
    \ = hexMap(num(i).toString)\n            if (digit == 2 || digit == 3 || digit\
    \ == 5 || digit == 7 || digit == 11 || digit == 13) counter += 1\n        }\n\
    \        counter", "\t    val hexs = List(2, 3, 5, 7, 11, 13)\n\t    var count\
    \ = 0L\n\t    num.foreach(x => if (hexs.contains(x.toInt - 48)) count += 1)\n\t\
    \    count", "        // Fill in the code.\n        // Note: you may assume the\
    \ input is always correct.\n        // Note: you may assume all symbols are uppercase.\n\
    \        // Note: you may use the fact that n.toHexString returns a hexadecimal\
    \ representation of n.\n        ???", '        return 0l', "        if (num.isEmpty)\
    \ 0 else {\n            val digit = num.toUpperCase.head\n            if (digit\
    \ == 'A' || digit == 'B' || digit == 'D') hexKey(num.tail) + 1 else hexKey(num.tail)\n\
    \        }", "        var result = 0l\n        if (num.length == 0) return result\n\
    \        for (digit <- num) {\n            if (\"2357BD\".contains(digit)) result\
    \ += 1\n        }\n        result", "        var ans = 0l\n        for (i <- 0\
    \ until num.length) {\n            var v = num(i).toInt\n            if (v <=\
    \ '9'.toInt) v -= '0'.toInt\n            else v -= 'A'.toInt - 10\n          \
    \  ans += (v == 2 || v == 3 || v == 5 || v == 7 || v == 11 || v == 13)\n     \
    \   }\n        ans", "        val map = Map('0' -> 0, '1' -> 1, '2' -> 2, '3'\
    \ -> 3, '4' -> 4, '5' -> 5, '6' -> 6, '7' -> 7, '8' -> 8, '9' -> 9, 'A' -> 10,\
    \ 'B' -> 11, 'C' -> 12, 'D' -> 13, 'E' -> 14, 'F' -> 15)\n        val lst = num.map(map(_)).toList\n\
    \        val primes = Set(2, 3, 5, 7, 11, 13)\n        def loop(lst : List[Int],\
    \ count : Long) : Long = {\n            if (lst.length == 0) count\n         \
    \   else {\n                if (primes.contains(lst.head)) loop(lst.tail, count\
    \ + 1)\n                else loop(lst.tail, count)\n            }\n        }\n\
    \        loop(lst, 0)", "        val m = new HashMap[Char, Int]\n        m +=\
    \ ('0' -> 0, '1' -> 1, '2' -> 2, '3' -> 3, '4' -> 4, '5' -> 5, '6' -> 6, '7' ->\
    \ 7, '8' -> 8, '9' -> 9, 'A' -> 10, 'B' -> 11, 'C' -> 12, 'D' -> 13, 'E' -> 14,\
    \ 'F' -> 15)\n        var result = 0l\n        for (i <- 0 until num.length) {\n\
    \            if (m(num(i)) == 2 || m(num(i)) == 3 || m(num(i)) == 5 || m(num(i))\
    \ == 7 || m(num(i)) == 11 || m(num(i)) == 13) result += 1\n        }\n       \
    \ result", "        if (num.length == 0) 0l\n        else num.filter(x => \"2357BDF\"\
    .contains(x)).length", "\t\tdef isPrime(n : Int) : Boolean = {\n\t\t\tif (n ==\
    \ 2) return true\n\t\t\tif (n % 2 == 0) return false\n\t\t\tvar d = 3\n\t\t\t\
    while (d * d <= n) {\n\t\t\t\tif (n % d == 0) return false\n\t\t\t\td += 2\n\t\
    \t\t}\n\t\t\treturn true\n\t\t}\n\t\tnum.toList.filter(x => (x == '2' || x ==\
    \ '3' || x == '5' || x == '7' || x == 'B' || x == 'D')).length", '        return
    0l', '        1', "        val primes = List(2, 3, 5, 7, 11, 13)\n        var\
    \ count = 0l\n        for (c <- num.toCharArray()) {\n            if (primes.contains(Integer.parseInt(c.toString,\
    \ 16))) count += 1\n        }\n        count", "        def isPrime(n : Int) :\
    \ Boolean = {\n            if (n <= 1) return false\n            val m = sqrt(n).toInt\n\
    \            var i = 2\n            while (i <= m) {\n                if (n %\
    \ i == 0) return false\n                i += 1\n            }\n            return\
    \ true\n        }\n        if (num.length == 0) return 0\n        var count =\
    \ 0\n        for (i <- 0 until num.length) {\n            val c = num(i)\n   \
    \         if ('0' <= c && c <= '9') {\n                if (isPrime(c - '0')) count\
    \ += 1\n            } else if ('A' <= c && c <= 'F') {\n                if (isPrime(c\
    \ - 'A' + 10)) count += 1\n            }\n        }\n        return count", " \
    \       val ls = num.toList\n        val p = List(2, 3, 5, 7, 11, 13)\n      \
    \  var res = 0l\n        for (i <- 0 until ls.length) {\n            val temp\
    \ = (ls(i) - 48) match {\n                case 'A' => 10\n                case\
    \ 'B' => 11\n                case 'C' => 12\n                case 'D' => 13\n\
    \                case 'E' => 14\n                case 'F' => 15\n            \
    \    case _ => ls(i) - 48\n            }\n            res += if (p.contains(temp))\
    \ 1 else 0\n        }\n        res", "        val m = Map(('2', 0), ('3', 0),\
    \ ('5', 0), ('7', 0), ('B', 0), ('D', 0))\n        for (i <- 0 until num.length)\
    \ {\n            if (m.contains(num(i))) {\n                m(num(i)) += 1\n \
    \           }\n        }\n        return m.values.reduceLeft(_ + _)", "      \
    \  val primes = Set[Long](2l, 3l, 5l, 7l, 11l, 13l)\n        num.toList.map(s\
    \ => s.toString.toLong).filter(s => primes.contains(s)).length", '        num.filter(isPrimeHexDigit(_)).length',
  "      // Fill up this function body\n      // You can add another function as well,\
    \ if required\n      def isPrime(n : Int) : Boolean = {\n        if (n == 2) return\
    \ true\n        if (n < 2 || n % 2 == 0) return false\n        val t = sqrt(n).toInt\n\
    \        for (i <- 3 to t by 2) if (n % i == 0) return false\n        return true\n\
    \      }\n      var count = 0\n      for (i <- 0 until num.length) {\n       \
    \ val m = Integer.parseInt(num(i).toString, 16)\n        if (isPrime(m)) count\
    \ += 1\n      }\n      return count", '        return num.toList.map(x => x.toString).filter(x
    => isPrime(x.toInt)).length', "        val primeHex = \"2357BDF\"\n        val\
    \ s = num.map(c => primeHex.contains(c))\n        (s count (b => b == true)).toLong",
  "\t\t// use the fact that 13 is the only prime between 9 and 15\n\t\tnum.toLong.toString(16).count(_.isDigit\
    \ && \"2357\".contains(_)) + \n\t\tnum.toLong.toString(16).count(_.isLetter &&\
    \ \"BD\".contains(_))", "        val digits = num.split(\"\").filter(s => s !=\
    \ \"\")\n        val isPrime = (x : String) => {\n            try {\n        \
    \        val a = Integer.parseInt(x, 16)\n                (a == 2 || a == 3 ||\
    \ a == 5 || a == 7 || a == 11 || a == 13)\n            } catch {\n           \
    \     case e : Exception => false\n            }\n        }\n        digits.filter(s\
    \ => isPrime(s)).length", "        num.filter(c => Set('2', '3', '5', '7', 'B',\
    \ 'D').contains(c)).length", "        val primes = List(2, 3, 5, 7, 11, 13, 17)\n\
    \        val hexs = List(\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\"\
    , \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\")\n        val map = (for\
    \ {i <- 0 until hexs.length} yield hexs(i) -> i).toMap\n        val counts = (for\
    \ {i <- 0 until hexs.length} yield hexs(i) -> 0).toMap\n        for (hex <- num)\
    \ {\n            counts(hex.toString) += 1\n        }\n        val result = counts.filter({case\
    \ (hex, count) => primes.contains(map(hex))}).values.sum\n        result", " \
    \       var count = 0l\n        for (i <- 0 until num.length) {\n            val\
    \ digit = num(i)\n            if (digit == '2' || digit == '3' || digit == '5'\
    \ || digit == '7' || digit == 'B' || digit == 'D') count += 1\n        }\n   \
    \     count", "        return num.toList.map(_.toString).map(num => num match\
    \ {\n            case \"2\" => 1\n            case \"3\" => 1\n            case\
    \ \"5\" => 1\n            case \"7\" => 1\n            case \"B\" => 1\n     \
    \       case \"D\" => 1\n            case _ => 0\n        }).sum", "        var\
    \ result = 0\n        var x = 0\n        while (x < num.length) {\n          \
    \  val c = num(x)\n            c match {\n                case '2' => result +=\
    \ 1\n                case '3' => result += 1\n                case '5' => result\
    \ += 1\n                case '7' => result += 1\n                case 'B' => result\
    \ += 1\n                case 'D' => result += 1\n                case _ =>\n \
    \           }\n            x += 1\n        }\n        result", "        var count\
    \ = 0\n        for (ch <- num) {\n            if (List(2, 3, 5, 7, 11, 13).contains(Integer.parseInt(ch.toString,\
    \ 16))) {\n                count += 1\n            }\n        }\n        count",
  "    \tif (num.length == 0) return 0\n    \tvar total = 0l\n    \tfor (i <- 0 until\
    \ num.length) {\n    \t\tval d = num(i)\n    \t\tif (d == '2' || d == '3' || d\
    \ == '5' || d == '7' || d == 'B' || d == 'D') total += 1\n    \t}\n    \ttotal",
  "        def hexKey(n : String, isPrime : String => Boolean) : Long = {\n      \
    \      if (n.length == 0) 0\n            else if (isPrime(n.take(1))) 1 + hexKey(n.drop(1),\
    \ isPrime)\n            else hexKey(n.drop(1), isPrime)\n        }\n        def\
    \ isPrime(n : String) : Boolean = {\n            if (n == \"2\" || n == \"3\"\
    \ || n == \"5\" || n == \"7\" || n == \"B\" || n == \"D\") true\n            else\
    \ false\n        }\n        hexKey(num, isPrime)", "        val hex = num.toUpperCase()\n\
    \        if (hex.size == 0) return 0\n        val key = hex.toList.map(_.toInt)\n\
    \        val primes = Array(2, 3, 5, 7, 11, 13)\n        val primeHex = key.filter(primes.contains(_))\n\
    \        //println(primeHex)\n        primeHex.size", '        return 0', "  \
    \      val primes = Array(2, 3, 5, 7, 11, 13)\n        num.map(x => x.toUpper.toString.toInt).filter(x\
    \ => primes.contains(x)).size", "        // Your code here\n        return 0",
  "        val hexChars = \"0123456789ABCDEF\"\n        val primes = Set(2, 3, 5,\
    \ 7, 11, 13)\n        num.toUpperCase.count(ch => primes.contains(hexChars.indexOf(ch)))",
  "        (num.map(x =>\n            x match {\n                case '2' => 1\n \
    \               case '3' => 1\n                case '5' => 1\n               \
    \ case '7' => 1\n                case 'B' => 1\n                case 'D' => 1\n\
    \                case _ => 0\n            }\n        ).reduce(_ + _))", "    \
    \    val hexSet = Set('0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B',\
    \ 'C', 'D', 'E', 'F')\n        val primes = Set('2', '3', '5', '7', 'B', 'D')\n\
    \        num.count(c => hexSet.contains(c) && primes.contains(c))", "        val\
    \ hex = List(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)\n        val\
    \ hexStr = \"0123456789ABCDEF\"\n        val primes = Set(2, 3, 5, 7, 11, 13)\n\
    \        num.map(x => hexStr.indexOf(x)).count(x => primes.contains(x))", "\t\t\
    var count = 0\n\t\tfor (i <- 0 until num.length) {\n\t\t\tval a = num(i)\n\t\t\
    \tif (a == '2' || a == '3' || a == '5' || a == '7' || a == 'B' || a == 'D') count\
    \ += 1\n\t\t}\n\t\tcount", "        var digits = num.map(_.toUpper).map(x => x.toInt\
    \ - '0'.toInt).filter(x => x > 9).map(x => x - 7)\n        var ans = 0L\n    \
    \    for (i <- digits) {\n            if (List(2, 3, 5, 7, 11, 13).contains(i))\
    \ ans += 1\n        }\n        ans", "        var count = 0l\n        for (i <-\
    \ num) {\n            if (i == '2' || i == '3' || i == '5' || i == '7' || i ==\
    \ 'B' || i == 'D') {\n                count += 1\n            }\n        }\n \
    \       count", "        var counter = 0\n        for (c <- num) c match {\n \
    \           case '2' => counter += 1\n            case '3' => counter += 1\n \
    \           case '5' => counter += 1\n            case '7' => counter += 1\n \
    \           case 'B' => counter += 1\n            case 'D' => counter += 1\n \
    \           case _ => \n        }\n        counter", "        val hexMap = Map('0'\
    \ -> 0, '1' -> 1, '2' -> 2, '3' -> 3, '4' -> 4, '5' -> 5, '6' -> 6, '7' -> 7,\
    \ '8' -> 8, '9' -> 9, 'A' -> 10, 'B' -> 11, 'C' -> 12, 'D' -> 13, 'E' -> 14, 'F'\
    \ -> 15)\n        val primes = Set(2, 3, 5, 7, 11, 13)\n        num.foldLeft(0l)((cnt,\
    \ e) => cnt + (if (primes.contains(hexMap(e))) 1 else 0))", "        val primes\
    \ = Vector(2, 3, 5, 7, 11, 13)\n        num.toUpperCase.map(x => x.toString.toInt(16)).filter(x\
    \ => primes.contains(x)).length", "        // Fill up this function body\n   \
    \     // `0` is used as a placeholder for compilation\n        0", "        num.toUpperCase.map(n\
    \ => {\n            val v = n.toInt\n            if (v > 64 && v < 71) v - 55\n\
    \            else v - 48\n        }).count(n => n == 2 || n == 3 || n == 5 ||\
    \ n == 7 || n == 11 || n == 13)", "        val hex = \"0123456789ABCDEF\"\n  \
    \      val prime = List(2, 3, 5, 7, 11, 13)\n        num.flatMap(x => hex.indexOf(x).toString).flatMap(x\
    \ => prime.contains(x.toInt)).toList.length", "        val dic = Map(\n      \
    \      '0' -> 0, '1' -> 1, '2' -> 2, '3' -> 3,\n            '4' -> 4, '5' -> 5,\
    \ '6' -> 6, '7' -> 7,\n            '8' -> 8, '9' -> 9, 'A' -> 10, 'B' -> 11,\n\
    \            'C' -> 12, 'D' -> 13, 'E' -> 14, 'F' -> 15)\n        var count =\
    \ 0\n        for (c <- num) {\n            val n = dic(c)\n            if (n ==\
    \ 2 || n == 3 || n == 5 || n == 7 || n == 11 || n == 13) count += 1\n        }\n\
    \        count", "        val hexes = num.toCharArray.filter(_.isDigit).map(_.toString.toInt)\n\
    \        var result = 0\n        for (x <- hexes) {\n            if (x == 2 ||\
    \ x == 3 || x == 5 || x == 7 || x == 11 || x == 13) result += 1\n        }\n \
    \       result", "        val ch = num.toCharArray.map(c => c.toString.toInt(16))\n\
    \        val prime = Array(2, 3, 5, 7, 11, 13)\n        ch.filter(x => prime.contains(x)).length",
  "        val hexToInt = Map(\n            '0' -> 0,\n            '1' -> 1,\n   \
    \         '2' -> 2,\n            '3' -> 3,\n            '4' -> 4,\n          \
    \  '5' -> 5,\n            '6' -> 6,\n            '7' -> 7,\n            '8' ->\
    \ 8,\n            '9' -> 9,\n            'A' -> 10,\n            'B' -> 11,\n\
    \            'C' -> 12,\n            'D' -> 13,\n            'E' -> 14,\n    \
    \        'F' -> 15\n        )\n        val primes = List(2, 3, 5, 7, 11, 13)\n\
    \        (for (d <- num) yield hexToInt(d)).filter(primes.contains(_)).length",
  "        var result = 0L\n        val sieve = Sieve(65536)\n        num.map(x =>\
    \ {\n            if (sieve.isPrime(x.toString.toInt)) {\n                result\
    \ += 1\n            }\n        })\n        result", "        var primes = Array(2,\
    \ 3, 5, 7, 11, 13)\n        var s = 0\n        for (x <- num) s += primes.contains(x.toUpper.toInt\
    \ - 55)\n        s", "        // hexKey: String -> Long\n        // Given a string,\
    \ count all occurences of hexadecimal digits that are prime numbers\n        //\
    \ Pattern Matching Over String\n        var counter = 0\n        for (digit <-\
    \ num) digit match {\n            case '2' => counter += 1\n            case '3'\
    \ => counter += 1\n            case '5' => counter += 1\n            case '7'\
    \ => counter += 1\n            case 'B' => counter += 1\n            case 'D'\
    \ => counter += 1\n            case _ => Unit\n        }\n        return counter",
  '        0', "        var count = 0\n        val digits = num.map(x => Character.digit(x,\
    \ 16))\n        for (x <- digits) {\n            if (isPrime(x)) {\n         \
    \       count += 1\n            }\n        }\n        count", "        val primes\
    \ = Array(2, 3, 5, 7, 11, 13)\n        def f(num : String, base : Int) : Long\
    \ = {\n            if (num.isEmpty) 0 else {\n                if (primes.contains(num.head.toString.toInt(base)))\
    \ 1 else 0 + f(num.tail, base)\n            }\n        }\n        f(num, 16)",
  "        val map = HashMap(0 -> false, 1 -> false, 2 -> true, 3 -> true, 4 -> false,\
    \ 5 -> true, 6 -> false, 7 -> true, 8 -> false, 9 -> false, 10 -> false, 11 ->\
    \ true, 12 -> false, 13 -> true, 14 -> false, 15 -> false)\n        num.map(x\
    \ => map(x.toInt - 48)).filter(x => x).length", "        val hexs = List('2',\
    \ '3', '5', '7', 'B', 'D')\n        num.count(hexs.contains(_))", "        //\
    \ 1. convert the hexadecimal number to decimal number\n        // 2. filter out\
    \ the digits that are primes\n        // 3. count the number of the primes\n \
    \       // OR\n        // 1. convert the hexadecimal number to decimal number\n\
    \        // 2. filter out the digits that are NOT primes\n        // 3. count\
    \ the number of the digits\n        // 4. subtract it from the length of the number\n\
    \        // 5. which is equivalent to the number of the primes\n        val primes\
    \ = Array(2, 3, 5, 7, 11, 13)\n        num.map(hex => Integer.parseInt(hex.toString,\
    \ 16)).filter(x => !primes.contains(x)).length", "        var buf = num.split(\"\
    \").filter(x => x != \"\")\n        buf.map(x => x.toInt).count(y => y % 2 !=\
    \ 0 && y != 1)", "        val hex = Array(\"0\", \"1\", \"2\", \"3\", \"4\", \"\
    5\", \"6\", \"7\", \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\")\n \
    \       val prime = Array(0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0)\n  \
    \      val digits = hex.zip(prime).toMap\n        num.map(x => digits(x.toString)).sum",
  "        val digits = num.toUpperCase().map(c => c.toString.toInt).toList\n    \
    \    var count = 0\n        for (digit <- digits) {\n            if (digit ==\
    \ 2 || digit == 3 || digit == 5 || digit == 7 || digit == 11 || digit == 13) count\
    \ += 1\n        }\n        count", "        // Given a big number in string format,\
    \ get the digits in int format.\n        def getDigits(num: String) : List[Int]\
    \ = {\n            def getDigitsInternal(num: String, list: List[Int]) : List[Int]\
    \ = {\n                if (num.isEmpty) list.reverse\n                else {\n\
    \                    if (num.head.isDigit) getDigitsInternal(num.tail, num.head.asDigit\
    \ :: list)\n                    else if (num.head.isUpper) getDigitsInternal(num.tail,\
    \ num.head.toUpper.toInt - 55 :: list)\n                    else throw new Exception(\"\
    Invalid string!\")\n                }\n            }\n            getDigitsInternal(num,\
    \ List())\n        }\n        // Given a big number in string format, get the\
    \ number in long format.\n        def getNumber(num: String) : Long = {\n    \
    \        val digits = getDigits(num)\n            val number = getNumberInternal(digits,\
    \ 0L)\n            number\n        }\n        def getNumberInternal(digits: List[Int],\
    \ number: Long) : Long = {\n            if (digits.isEmpty) number\n         \
    \   else {\n                val next = number * 16 + digits.head\n           \
    \     getNumberInternal(digits.tail, next)\n            }\n        }\n       \
    \ // Given a number in long format, get the number of prime digits.\n        def\
    \ countPrimeDigits(num: Long) : Long = {\n            val digits = getDigits(num.toString)\n\
    \            val primeCount = countPrimeDigitsInternal(digits, 0L)\n         \
    \   primeCount\n        }\n        def countPrimeDigitsInternal(digits: List[Int],\
    \ count: Long) : Long = {\n            if (digits.isEmpty) count\n           \
    \ else {\n                val next = count + (if (digits.head % 2 != 0 && digits.head\
    \ % 3 != 0 && digits.head % 5 != 0 && digits.head % 7 != 0 && digits.head % 11\
    \ != 0 && digits.head % 13 != 0) 1 else 0)\n                countPrimeDigitsInternal(digits.tail,\
    \ next)\n            }\n        }\n        // Main logic\n        if (", "   \
    \     if (num.length < 2) return 0l\n        val map = new HashMap[Char, Int]\n\
    \        map += ('0' -> 0, '1' -> 1, '2' -> 2, '3' -> 3, '4' -> 4, '5' -> 5, '6'\
    \ -> 6, '7' -> 7, '8' -> 8, '9' -> 9,\n                'A' -> 10, 'B' -> 11, 'C'\
    \ -> 12, 'D' -> 13, 'E' -> 14, 'F' -> 15)\n        var result = 0l\n        for\
    \ (i <- 0 until num.length) {\n            if (map(num(i)) == 2 || map(num(i))\
    \ == 3 || map(num(i)) == 5 || map(num(i)) == 7 ||\n                map(num(i))\
    \ == 11 || map(num(i)) == 13) result += 1\n        }\n        result", "     \
    \   val hex = num.toLong\n        val prime = List(2, 3, 5, 7, 11, 13)\n     \
    \   var result = 0\n        def countPrime(curr : Long) : Unit = {\n         \
    \   if (curr == 0) {\n                return ;\n            }\n            val\
    \ mod = curr % 16\n            if (prime.contains(mod)) {\n                result\
    \ += 1\n            }\n            countPrime(curr / 16)\n        }\n        countPrime(hex)\n\
    \        result", "    \tval m = Map('2' -> 1, '3' -> 1, '5' -> 1, '7' -> 1, 'B'\
    \ -> 1, 'D' -> 1)\n    \tval chars = num.toCharArray.map(_.toUpper)\n    \tvar\
    \ sum = 0\n    \tfor (c <- chars) {\n    \t\tsum += m.getOrElse(c, 0)\n    \t\
    }\n    \tsum", "        // TODO: Implement this function\n        def isPrime(n\
    \ : Int) : Boolean = n match {\n            case 0 => false\n            case\
    \ 1 => false\n            case 2 => true\n            case _ => Range(2, n).filter(x\
    \ => n % x == 0).length == 0\n        }\n        def hexVal(c : Char) : Int =\
    \ c match {\n            case '0' => 0\n            case '1' => 1\n          \
    \  case '2' => 2\n            case '3' => 3\n            case '4' => 4\n     \
    \       case '5' => 5\n            case '6' => 6\n            case '7' => 7\n\
    \            case '8' => 8\n            case '9' => 9\n            case 'A' =>\
    \ 10\n            case 'B' => 11\n            case 'C' => 12\n            case\
    \ 'D' => 13\n            case 'E' => 14\n            case 'F' => 15\n        }\n\
    \        var total = 0l\n        for (i <- 0 until num.length) {\n           \
    \ if (isPrime(hexVal(num(i)))) total += 1\n        }\n        total", "      if\
    \ (num.isEmpty) return 0\n      else {\n        var counter = 0l\n        for\
    \ (i <- 0 until num.length) if (List(2, 3, 5, 7, 11, 13).contains(num(i).toString.toInt))\
    \ counter += 1\n        counter\n      }", "        def convertToDigit(c : Char)\
    \ : Int = {\n            if (c >= '0' && c <= '9') c - '0'\n            else c\
    \ - 'A' + 10\n        }\n        num.foldLeft(0)((s, c) => s + convertToDigit(c))",
  "    \tvar result = 0l\n    \tval hexPrime = Set(2, 3, 5, 7, 11, 13)\n    \tnum.foreach(x\
    \ => {\n    \t\tval d = if (x >= 'A') x - 'A' + 10 else x - '0'\n    \t\tif (hexPrime.contains(d))\
    \ result += 1\n    \t})\n    \tresult", "        var count = 0\n        var array\
    \ = Array[Int]()\n        for (i <- 0 until num.length) array :+= num(i).toInt\n\
    \        array.foreach(i => if (isPrime(i)) count += 1)\n        return count",
  "        val arr = num.toUpperCase.toCharArray\n        val map = new HashMap[Char,\
    \ Int]()\n        map.put('0', 0)\n        map.put('1', 1)\n        map.put('2',\
    \ 2)\n        map.put('3', 3)\n        map.put('4', 4)\n        map.put('5', 5)\n\
    \        map.put('6', 6)\n        map.put('7', 7)\n        map.put('8', 8)\n \
    \       map.put('9', 9)\n        map.put('A', 10)\n        map.put('B', 11)\n\
    \        map.put('C', 12)\n        map.put('D', 13)\n        map.put('E', 14)\n\
    \        map.put('F', 15)\n        var cnt = 0\n        for (i <- 0 until arr.length)\
    \ {\n            val n = map(arr(i))\n            if (n == 2 || n == 3 || n ==\
    \ 5 || n == 7 || n == 11 || n == 13) cnt += 1\n        }\n        cnt", "    \
    \    def isPrime(n : Int) : Boolean = {\n            if (n == 2) return true\n\
    \            if (n % 2 == 0) return false\n            for (i <- 3 to sqrt(n).toInt\
    \ by 2) {\n                if (n % i == 0) return false\n            }\n     \
    \       return true\n        }\n        val primes = Vector(2, 3, 5, 7, 11, 13)\n\
    \        num.toList.filter(x => primes.contains(Integer.parseInt(x.toString, 16))).size",
  "        num.map(x => x.toInt match {\n            case x if x >= 65 && x <= 70\
    \ => x - 55\n            case x => x - 48\n        }).foldLeft(0)((x, y) => if\
    \ (isPrime(y)) x + 1 else x)", "        val hm = Map('0' -> 0, '1' -> 1, '2' ->\
    \ 2, '3' -> 3, '4' -> 4, '5' -> 5, '6' -> 6, '7' -> 7, '8' -> 8, '9' -> 9,\n \
    \                   'A' -> 10, 'B' -> 11, 'C' -> 12, 'D' -> 13, 'E' -> 14, 'F'\
    \ -> 15)\n        var map = Map[Int, Boolean]()\n        for (i <- 0 to 9) {\n\
    \            map += (i -> true)\n        }\n        map += (2 -> true)\n     \
    \   map += (3 -> true)\n        map += (5 -> true)\n        map += (7 -> true)\n\
    \        map += (11 -> true)\n        map += (13 -> true)\n        for (i <- 14\
    \ to 15) {\n            map += (i -> false)\n        }\n        for (i <- 16 to\
    \ 255) {\n            if (i % 2 == 0 || i % 3 == 0 || i % 5 == 0 || i % 7 == 0\
    \ || i % 11 == 0 || i % 13 == 0) {\n                map += (i -> false)\n    \
    \        } else {\n                map += (i -> true)\n            }\n       \
    \ }\n        var count = 0\n        for (i <- 0 until num.length) {\n        \
    \    val x = hm(num(i))\n            if (map(x)) count += 1\n        }\n     \
    \   count", "        val hex = Array('0', '1', '2', '3', '4', '5', '6', '7', '8',\
    \ '9', 'A', 'B', 'C', 'D', 'E', 'F')\n        val prime = Array(false, false,\
    \ true, true, false, true, false, true, false, false, false, true, false, true,\
    \ false, false)\n        var result = 0l\n        for (i <- 0 until num.length)\
    \ {\n            if (prime(hex.indexOf(num(i)))) result += 1\n        }\n    \
    \    result"]
stop_tokens:
- "\n    }\n"
