language: scala
name: HumanEval_65_circular_shift
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val s = x.toString\n\
    \        if (shift >= s.length) {\n            return new StringBuilder(s).reverse.toString\n\
    \        }\n        val shiftString = s.substring(0, s.length - shift.toInt)\n\
    \        val appendString = s.substring(s.length - shift.toInt)\n        appendString\
    \ + shiftString\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprmhldaop.scala:22)\n\tat Problem.main(tmprmhldaop.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028713
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.map(c => c.toString)\n        if (shift > digits.length) digits.reverse.reduceLeft(_\
    \ + _)\n        else digits.takeRight(shift.toInt) ++ digits.take(digits.length\
    \ - shift.toInt) reduceLeft(_ + _)\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028713
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val s = x.toString\n\
    \        val len = s.length\n        if (shift >= len) {\n            s.reverse\n\
    \        } else {\n            val (a, b) = s.splitAt(len - shift.toInt)\n   \
    \         a + b\n        }\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwjcknlz2.scala:22)\n\tat Problem.main(tmpwjcknlz2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028713
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString\n        val n = digits.length\n        val m = min(n, shift)\n \
    \       digits.substring(n - m, n) + digits.substring(0, n - m)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"\
    001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpma5hc0co.scala:15:25\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        digits.substring(n -\
    \ m, n) + digits.substring(\e[31m0\e[0m, n - m)\n\e[31m\e[31m   |\e[0m       \
    \                  ^^^^^\e[0m\n\e[31m   |\e[0m                         Found:\
    \    Long\n\e[31m   |\e[0m                         Required: Int\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpma5hc0co.scala:15:57 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        digits.substring(n - m, n) + digits.substring(\e\
    [31m0\e[0m, n - m)\n\e[31m\e[31m   |\e[0m                                    \
    \                     ^^^^^\e[0m\n\e[31m   |\e[0m                            \
    \                             Found:    Long\n\e[31m   |\e[0m                \
    \                                         Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660028713
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.map(_.asDigit)\n        if (shift >= digits.length) digits.reverse.mkString\n\
    \        else digits.dropRight(shift.toInt).mkString + digits.takeRight(shift.toInt).mkString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfc0ezzgt.scala:17)\n\tat Problem.main(tmpfc0ezzgt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028713
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.length\n        if (shift >= digits) {\n            return x.toString.reverse\n\
    \        }\n        val right = (x / pow(10, shift).toLong).toString\n       \
    \ val left = (x % pow(10, shift).toLong).toString\n        return left + right\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_fd5_crs.scala:21)\n\tat Problem.main(tmp_fd5_crs.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028713
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val xS = x.toString\n\
    \        val shiftS = shift.toString\n        val xL = xS.length\n        if (shiftS.length\
    \ >= xL) {\n            return xS.reverse\n        }\n        val shiftMod = shift\
    \ % xL\n        val left = xS.slice(0, xL - shiftMod.toInt)\n        val right\
    \ = xS.slice(xL - shiftMod.toInt, xL)\n        val result = right + left\n   \
    \     return result\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1oorconl.scala:27)\n\tat Problem.main(tmp1oorconl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028712
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        if (shift ==\
    \ 0) x.toString\n        else {\n            val digits = x.toString.map(e =>\
    \ e.toString)\n            val n = digits.length\n            val shift1 = if\
    \ (shift >= n) n - 1 else shift.toInt\n            val shifted = (digits.slice(n\
    \ - shift1, n) ++ digits.slice(0, n - shift1)).mkString\n            if (shift\
    \ >= n) shifted.reverse else shifted\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjd8wvxfr.scala:24)\n\tat Problem.main(tmpjd8wvxfr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028713
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.toList\n        if (shift > digits.length) digits.reverse.mkString\n\
    \        else (digits.dropRight(shift.toInt) ::: digits.takeRight(shift.toInt)).mkString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp63pj00f2.scala:17)\n\tat Problem.main(tmp63pj00f2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028713
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n      val s = x.toString\n\
    \      val n = s.length\n      val l = if (shift < n) n - shift else 0\n     \
    \ val r = if (shift > n) shift - n else 0\n      val newS = s.substring(l, n)\
    \ + s.substring(0, l)\n      newS.reverse.substring(r, n) + newS.reverse.substring(0,\
    \ r)\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpncxi17v6.scala:16:29\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m      \e[33mval\e[0m \e[36mnewS\e\
    [0m = s.substring(l, n) + s.substring(\e[31m0\e[0m, l)\n\e[31m\e[31m   |\e[0m\
    \                             ^\e[0m\n\e[31m   |\e[0m                        \
    \     Found:    (l : Long)\n\e[31m   |\e[0m                             Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpncxi17v6.scala:16:52\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m      \e[33mval\e[0m \e[36mnewS\e\
    [0m = s.substring(l, n) + s.substring(\e[31m0\e[0m, l)\n\e[31m\e[31m   |\e[0m\
    \                                                    ^\e[0m\n\e[31m   |\e[0m \
    \                                                   Found:    (l : Long)\n\e[31m\
    \   |\e[0m                                                    Required: Int\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpncxi17v6.scala:17:29\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m      newS.reverse.substring(r,\
    \ n) + newS.reverse.substring(\e[31m0\e[0m, r)\n\e[31m\e[31m   |\e[0m        \
    \                     ^\e[0m\n\e[31m   |\e[0m                             Found:\
    \    (r : Long)\n\e[31m   |\e[0m                             Required: Int\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpncxi17v6.scala:17:63\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m      newS.reverse.substring(r,\
    \ n) + newS.reverse.substring(\e[31m0\e[0m, r)\n\e[31m\e[31m   |\e[0m        \
    \                                                       ^\e[0m\n\e[31m   |\e[0m\
    \                                                    Found:    (r : Long)\n\e\
    [31m   |\e[0m                                                    Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660028713
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val str = x.toString()\n\
    \        if (shift > str.length) str.reverse\n        else (str.substring(str.length\
    \ - shift.toInt) + str.substring(0, str.length - shift.toInt))\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"\
    001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028713
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val s = x.toString\n\
    \        if (shift > s.length) s.reverse\n        else {\n            val (left,\
    \ right) = s.splitAt(s.length - shift.toInt)\n            right + left\n     \
    \   }\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028713
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val s = x.toString\n\
    \        if (shift > s.length) s.reverse\n        else {\n            val (a,\
    \ b) = s.splitAt(s.length - shift.toInt)\n            b + a\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"\
    001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028713
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString\n        val shiftAmount = if (shift > digits.length) digits.length\
    \ else shift.toInt\n        val shiftedDigits = digits.takeRight(shiftAmount)\
    \ + digits.dropRight(shiftAmount)\n        shiftedDigits\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n\
    \    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppmljjus_.scala:20)\n\tat Problem.main(tmppmljjus_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028712
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        var m = BigInt(x)\n\
    \        var a = List[Int]()\n        while (m > 0) {\n            a = (m % 10).toInt\
    \ :: a\n            m /= 10\n        }\n        for (i <- 1 to shift.toInt) {\n\
    \            val temp = a.head\n            a = a.tail :+ temp\n        }\n  \
    \      a.reverse.mkString\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp912xyal8.scala:25)\n\tat Problem.main(tmp912xyal8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028713
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n      if (shift == 0)\
    \ x.toString\n      else {\n        val s = x.toString\n        val n = s.length\n\
    \        if (shift > n) s.reverse\n        else (s.substring(n - shift.toInt)\
    \ + s.substring(0, n - shift.toInt))\n      }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028713
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val nDigits\
    \ = x.toString.length\n        if (shift > nDigits) x.toString.reverse\n     \
    \   else x.toString.slice(shift.toInt, nDigits) + x.toString.slice(0, shift.toInt)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkmuglrc6.scala:17)\n\tat Problem.main(tmpkmuglrc6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028713
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.toList\n        val numDigits = digits.length\n        if (shift\
    \ >= numDigits) {\n            return digits.reverse.mkString\n        }\n   \
    \     val splitPos = numDigits - shift.toInt\n        val (front, back) = digits.splitAt(splitPos)\n\
    \        return (back ::: front).mkString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5xpxo_ov.scala:23)\n\tat Problem.main(tmp5xpxo_ov.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028713
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ (x.toString.length - shift.toString.length).toInt\n        var xStr = x.toString\n\
    \        if (digits < 0) return xStr.reverse\n        var shiftStr = shift.toString\n\
    \        xStr = xStr.substring(0, digits) + shiftStr + xStr.substring(digits +\
    \ shiftStr.length, xStr.length)\n        return xStr\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n\
    \    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3ztmdzsq.scala:20)\n\tat Problem.main(tmp3ztmdzsq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028713
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val s = x.toString\n\
    \        val n = s.length\n        if (shift >= n) return s.reverse\n        val\
    \ prefix = s.take(n - shift.toInt)\n        val suffix = s.drop(n - shift.toInt)\n\
    \        return suffix + prefix\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5243wb0a.scala:21)\n\tat Problem.main(tmp5243wb0a.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028713
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val xLength\
    \ = x.toString.length\n        if (shift > xLength) {\n            val reversedX\
    \ = x.toString.reverse\n            return reversedX\n        }\n        var xString\
    \ = x.toString\n        val shiftString = shift.toString\n        val left = xString.substring(0,\
    \ shiftString.toInt)\n        val right = xString.substring(shiftString.toInt,\
    \ xLength)\n        xString = right + left\n        return xString\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"\
    001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpd6y2wucx.scala:25)\n\tat Problem.main(tmpd6y2wucx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028713
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n      val n = x.toString().length()\n\
    \      if (shift >= n) return x.toString().reverse\n      val first = x.toString().substring(0,\
    \ n - shift.toInt)\n      val second = x.toString().substring(n - shift.toInt,\
    \ n)\n      second + first\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppspf4xdv.scala:20)\n\tat Problem.main(tmppspf4xdv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028713
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        if (shift ==\
    \ 0) return x.toString\n        val str = x.toString\n        val len = str.length\n\
    \        if (shift >= len) return str.reverse\n        str.substring(len - shift.toInt)\
    \ + str.substring(0, len - shift.toInt)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_l3kove5.scala:20)\n\tat Problem.main(tmp_l3kove5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028713
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        var k = shift\n\
    \        var b = x.toString.toList\n        while (k > 0) {\n            val temp\
    \ = b.remove(0)\n            b = b :+ temp\n            k -= 1\n        }\n  \
    \      b.reverse.mkString\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpubmc_h35.scala:15:25 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e[0m \e[36mtemp\e[0m = b.remove(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m                       ^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue remove is not a member of List[Char] - did you mean List[Char].reduce?\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028722
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val s = x.toString\n\
    \        val l = s.length\n        if (shift > l) s.reverse\n        else s.substring(l\
    \ - shift.toInt) + s.substring(0, l - shift.toInt)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n\
    \    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028722
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val numDigits\
    \ = x.toString.length\n        val newDigits = x.toString.substring(numDigits\
    \ - shift.toInt, numDigits) + x.toString.substring(0, numDigits - shift.toInt)\n\
    \        newDigits\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: begin -6, end 2, length 2\n\t\
    at java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\
    \tat Problem$.circularShift(tmpw8uwxgt8.scala:13)\n\tat Problem$.main(tmpw8uwxgt8.scala:19)\n\
    \tat Problem.main(tmpw8uwxgt8.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028721
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val length =\
    \ x.toString.length\n        if (shift > length) {\n            x.toString.reverse\n\
    \        } else {\n            x.toString.substring(length - shift.toInt) + x.toString.substring(0,\
    \ length - shift.toInt)\n        }\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028722
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val s = x.toString\n\
    \        val shiftMod = shift % s.length\n        if (shiftMod == 0) s\n     \
    \   else if (shiftMod > 0) s.substring(s.length - shiftMod) + s.substring(0, s.length\
    \ - shiftMod)\n        else s.substring(-shiftMod) + s.substring(0, -shiftMod)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmponblsech.scala:15:43\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33melse\e[0m \e[33mif\e\
    [0m (shiftMod > \e[31m0\e[0m) s.substring(s.length - shiftMod) + s.substring(\e\
    [31m0\e[0m, s.length - shiftMod)\n\e[31m\e[31m   |\e[0m                      \
    \                     ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                             Found:    Long\n\e[31m   |\e[0m                \
    \                           Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmponblsech.scala:15:81 --------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (shiftMod > \e[31m0\e\
    [0m) s.substring(s.length - shiftMod) + s.substring(\e[31m0\e[0m, s.length - shiftMod)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                         ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                                                Found:    Long\n\e[31m   |\e\
    [0m                                                          Required: Int\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmponblsech.scala:16:25\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33melse\e[0m s.substring(-shiftMod)\
    \ + s.substring(\e[31m0\e[0m, -shiftMod)\n\e[31m\e[31m   |\e[0m              \
    \           ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                         Found:   \
    \ Long\n\e[31m   |\e[0m                         Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmponblsech.scala:16:53 --------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33melse\e[0m s.substring(-shiftMod) + s.substring(\e\
    [31m0\e[0m, -shiftMod)\n\e[31m\e[31m   |\e[0m                                \
    \                     ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \                             Found:    Long\n\e[31m   |\e[0m                \
    \                   "
  stdout: ''
  timestamp: 1660028723
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val s = x.toString\n\
    \        val n = s.length\n        (s.substring(n - shift.toInt, n) + s.substring(0,\
    \ n - shift.toInt)).reverse\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4s_ep2g2.scala:17)\n\tat Problem.main(tmp4s_ep2g2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028722
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        if (shift ==\
    \ 0) {\n            return x.toString\n        }\n        val s = x.toString\n\
    \        val t = s.reverse\n        val u = t.substring(0, (t.length - shift.toInt).max(0))\n\
    \        val v = t.substring((t.length - shift.toInt).max(0))\n        return\
    \ (v + u).reverse\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplqgsvusj.scala:22)\n\tat Problem.main(tmplqgsvusj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028722
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val s = x.toString\n\
    \        if (shift >= s.length) {\n            s.reverse\n        } else {\n \
    \           s.drop(shift.toInt) + s.take(shift.toInt)\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"\
    001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpyf1ay5nn.scala:20)\n\tat Problem.main(tmpyf1ay5nn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028723
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val s = x.toString\n\
    \        if (shift > s.length) return s.reverse\n        else return s.slice(s.length\
    \ - shift.toInt, s.length) + s.slice(0, s.length - shift.toInt)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"\
    001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028723
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        if (shift >\
    \ x.toString.length) return x.toString.reverse\n        val digit = x.toString.reverse.substring(0,\
    \ shift.toInt)\n        val rest = x.toString.reverse.substring(shift.toInt)\n\
    \        return digit + rest\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqki5gv5a.scala:19)\n\tat Problem.main(tmpqki5gv5a.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028723
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val xstr = x.toString\n\
    \        if (shift < xstr.length) xstr.substring(xstr.length - shift.toInt) +\
    \ xstr.substring(0, xstr.length - shift.toInt)\n        else xstr.reverse\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5ov320k5.scala:18)\n\tat Problem.main(tmp5ov320k5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028723
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        if (shift ==\
    \ 0) return x.toString\n        var s = x.toString\n        if (shift < s.length)\
    \ {\n            val temp = s.substring(0, s.length - shift.toInt)\n         \
    \   s = s.substring(s.length - shift.toInt) + temp\n        }\n        else {\n\
    \            s = s.reverse\n        }\n        s\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpybc7on74.scala:25)\n\tat Problem.main(tmpybc7on74.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028723
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val str = x.toString\n\
    \        val len = str.length\n        val shiftLen = shift % len\n        if\
    \ (shiftLen == 0) str\n        else str.drop(len - shiftLen) + str.take(len -\
    \ shiftLen)\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7beydoqj.scala:16:22\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33melse\e[0m str.drop(len\
    \ - shiftLen) + str.take(len - shiftLen)\n\e[31m\e[31m   |\e[0m              \
    \        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                      Found:    Long\n\
    \e[31m   |\e[0m                      Required: Int\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp7beydoqj.scala:16:49 --------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33melse\e[0m str.drop(len - shiftLen) + str.take(len\
    \ - shiftLen)\n\e[31m\e[31m   |\e[0m                                         \
    \        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                \
    \                 Found:    Long\n\e[31m   |\e[0m                            \
    \                     Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028723
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        var digits =\
    \ (x.toString).map(y => y).toList\n        if (shift < digits.length) {\n    \
    \        val (end, front) = digits.splitAt(digits.length - shift.toInt)\n    \
    \        (front ++ end).mkString\n        } else (digits.reverse).mkString\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwxkwwnae.scala:20)\n\tat Problem.main(tmpwxkwwnae.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028724
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        if (shift >\
    \ x.toString.length)\n            return x.toString.reverse\n        x.toString.substring(shift.toInt)\
    \ + x.toString.substring(0, shift.toInt)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1ahwzqoe.scala:17)\n\tat Problem.main(tmp1ahwzqoe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028723
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n      val s = x.toString\n\
    \      if (shift > s.length) return s.reverse\n      val (left, right) = s.splitAt(s.length\
    \ - shift.toInt)\n      right + left\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028723
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        if (shift ==\
    \ 0) return x.toString\n        var s = x.toString\n        val digitCount = s.length\n\
    \        if (shift > digitCount) return s.reverse\n        val y = s.substring(digitCount\
    \ - shift.toInt, digitCount) + s.substring(0, digitCount - shift.toInt)\n    \
    \    y\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028723
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        var str = x.toString\n\
    \        var i = 0\n        while (i < shift) {\n            val temp = str.last\n\
    \            str = temp + str.substring(0, str.length - 1)\n            i += 1\n\
    \        }\n        str\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5kbe8zru.scala:24)\n\tat Problem.main(tmp5kbe8zru.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028723
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val s = x.toString\n\
    \        if (shift >= s.length) {\n            val r = new StringBuilder\n   \
    \         for (i <- s.length - 1 to 0 by -1) {\n                r.append(s(i))\n\
    \            }\n            r.toString\n        } else {\n            val r =\
    \ new StringBuilder\n            for (i <- shift to s.length - 1) {\n        \
    \        r.append(s(i))\n            }\n            for (i <- 0 to shift - 1)\
    \ {\n                r.append(s(i))\n            }\n            r.toString\n \
    \       }\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3wyuwu59.scala:22:27\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m                r.append(s(i))\n\
    \e[31m\e[31m   |\e[0m                           ^\e[0m\n\e[31m   |\e[0m      \
    \                     Found:    (i : Long)\n\e[31m   |\e[0m                  \
    \         Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3wyuwu59.scala:24:27\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m            \e[33mfor\e[0m (i\
    \ <- \e[31m0\e[0m to shift - \e[31m1\e[0m) {\n\e[31m\e[31m   |\e[0m          \
    \                 ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                           Found:\
    \    Long\n\e[31m   |\e[0m                           Required: Int\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660028723
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.toList\n        val len = digits.length\n        val result = (1\
    \ to len).map(i => digits((i - 1 + shift) % len))\n        result.mkString\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdlx9466m.scala:14:48\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mresult\e\
    [0m = (\e[31m1\e[0m to len).map(\e[36mi\e[0m => digits((i - \e[31m1\e[0m + shift)\
    \ % len))\n\e[31m\e[31m   |\e[0m                                             \
    \   ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                              \
    \                  Found:    Long\n\e[31m   |\e[0m                           \
    \                     Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028722
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ String.valueOf(x).map(_.asDigit).toList\n        val reversed = digits.reverse\n\
    \        val shiftMod = (shift % digits.length).toInt\n        if (shiftMod >\
    \ 0) {\n            val prefix = reversed.take(shiftMod)\n            val suffix\
    \ = reversed.drop(shiftMod)\n            (suffix ::: prefix).mkString\n      \
    \  } else {\n            digits.mkString\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n\
    \    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwq33_jan.scala:24)\n\tat Problem.main(tmpwq33_jan.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028723
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        if (shift >\
    \ x.toString.length) return x.toString.reverse\n        val s = x.toString\n \
    \       return s.substring(s.length - shift.toInt) + s.substring(0, s.length -\
    \ shift.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028724
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        // First get\
    \ the number of digits of x\n        var x2 = x\n        var n = 0\n        while\
    \ (x2 > 0) {\n            x2 /= 10\n            n += 1\n        }\n        //\
    \ Reverse digits of x\n        var x3 = 0l\n        for (i <- 1 to n) {\n    \
    \        x3 = x3 * 10 + x % 10\n            x /= 10\n        }\n        // Now\
    \ do the circular shift\n        var x4 = 0l\n        for (i <- 1 to n) {\n  \
    \          x4 = x4 * 10 + x3 % 10\n            x3 /= 10\n            shift -=\
    \ 1\n            if (shift == 0) return x4.toString\n        }\n        // If\
    \ we get here, the shift was greater than number of digits.\n        // Just return\
    \ the reverse\n        x4.toString\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpda_18j8l.scala:23:14 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            x /= \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value /= is not a member of\
    \ Long - did you mean x.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpda_18j8l.scala:30:18\
    \ ------------------------\e[0m\e[0m\n\e[31m30 |\e[0m            shift -= \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \   value -= is not a member of Long - did you mean shift.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660028723
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString\n        if (shift > digits.length) digits.reverse\n        else\
    \ digits.substring(digits.length - shift.toInt) + digits.substring(0, digits.length\
    \ - shift.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028730
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        if (shift >=\
    \ x.toString.length)\n            return x.toString.reverse\n        else\n  \
    \          return x.toString.substring(shift.toInt) + x.toString.substring(0,\
    \ shift.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvtg3fqcg.scala:18)\n\tat Problem.main(tmpvtg3fqcg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028732
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        if (shift ==\
    \ 0) x.toString\n        else if (shift > x.toString.length) {\n            val\
    \ reverse = x.toString.reverse\n            val head = reverse.take(shift.toInt\
    \ % reverse.length)\n            val tail = reverse.takeRight(reverse.length -\
    \ head.length)\n            (head + tail).reverse\n        }\n        else {\n\
    \            val head = x.toString.takeRight(shift.toInt)\n            val tail\
    \ = x.toString.take(x.toString.length - head.length)\n            head + tail\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjf477pmb.scala:28)\n\tat Problem.main(tmpjf477pmb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028732
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val s = x.toString\n\
    \        if (shift > s.length)\n            return s.reverse\n        else\n \
    \           return s.substring(shift.toInt) + s.substring(0, shift.toInt)\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw0v38zja.scala:19)\n\tat Problem.main(tmpw0v38zja.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028732
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val s = x.toString\n\
    \        val len = s.length\n        if (shift > len) s.reverse\n        else\
    \ s.drop(len - shift.toInt) + s.take(len - shift.toInt)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n\
    \    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028732
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        if (shift >\
    \ x.toString.length) x.toString.reverse\n        else x.toString.substring(x.toString.length\
    \ - shift.toInt) + x.toString.substring(0, x.toString.length - shift.toInt)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028732
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val s = x.toString\n\
    \        val n = s.length\n        val (a, b) = s.splitAt(if (shift < n) (n -\
    \ shift).toInt else 0)\n        b + a\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv9c8af_w.scala:20)\n\tat Problem.main(tmpv9c8af_w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028732
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val r = (x %\
    \ 10l)\n        if (x < 10l) {\n            // r is last digit\n            r.toString\n\
    \        } else {\n            // (10l ** (shift % x.toString.length))\n     \
    \       (circularShift(x / 10l, shift) + r.toString).substring(0, x.toString.length)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwflq334c.scala:22)\n\tat Problem.main(tmpwflq334c.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028732
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        var d = x.toString.size\n\
    \        var str = x.toString\n        var l = List[Char]()\n        if (shift\
    \ == d) {\n            return str.reverse\n        }\n        else if (shift >\
    \ d) {\n            return str.reverse\n        }\n        else {\n          \
    \  for (i <- 0 until d) {\n                l = str((i + shift) % d) :: l\n   \
    \         }\n            return l.mkString(\"\")\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n\
    \    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpopnkea01.scala:23:24\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m                l = str((i +\
    \ shift) % d) :: l\n\e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                        Found:    Long\n\e[31m   |\e[0m  \
    \                      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028732
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        if (shift >\
    \ (x + \"\").length) ((x + \"\").reverse)\n        else {\n            var s =\
    \ x + \"\"\n            (s.substring(s.length - shift.toInt, s.length) + s.substring(0,\
    \ s.length - shift.toInt))\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028732
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.toList\n        val len = digits.length\n        val newList = ListBuffer.empty[Char]\n\
    \        for (i <- 0 until len) {\n            val index = (i + shift) % len\n\
    \            newList += digits(index)\n        }\n        newList.mkString\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmkwe8cvq.scala:17:30\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m            newList += digits(index)\n\
    \e[31m\e[31m   |\e[0m                              ^^^^^\e[0m\n\e[31m   |\e[0m\
    \                              Found:    (index : Long)\n\e[31m   |\e[0m     \
    \                         Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028732
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString\n        if (shift > digits.length) {\n            digits.reverse\n\
    \        } else {\n            digits.substring(digits.length - shift.toInt) +\
    \ digits.substring(0, digits.length - shift.toInt)\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"\
    001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028733
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        var str = (x.toString.toList)\n\
    \        var shiftStart = str.length - shift.toInt\n        var list1 = str.slice(shiftStart,\
    \ str.length)\n        var list2 = str.slice(0, shiftStart)\n        return (list1\
    \ ::: list2).reverse.mkString\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpti6nfse1.scala:19)\n\tat Problem.main(tmpti6nfse1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028733
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val s = x.toString\n\
    \        if (shift > s.length) s.reverse\n        else (s.substring(s.length -\
    \ shift.toInt) + s.substring(0, s.length - shift.toInt))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n\
    \    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028733
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        if (shift >\
    \ x.toString.length) return x.toString.reverse\n        val reversed = x.toString.reverse\n\
    \        (reversed.drop(shift.toInt) + reversed.take(shift.toInt)).reverse\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028732
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        if (shift >\
    \ log10(x).toLong + 1) x.toString.reverse\n        else {\n            val (h,\
    \ t) = (x / pow(10, shift).toLong, x % pow(10, shift).toLong)\n            (t.toString\
    \ + h.toString).reverse\n        }\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp17n5ghug.scala:19)\n\tat Problem.main(tmp17n5ghug.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028733
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val s = x.toString\n\
    \        val length = s.length\n        if (shift >= length)\n            s.reverse\n\
    \        else\n            s.drop(length - shift.toInt) + s.take(length - shift.toInt)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp207wx7kt.scala:21)\n\tat Problem.main(tmp207wx7kt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028733
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.length\n        val (r1, r2) = x.toString.splitAt(digits - (shift\
    \ % digits).toInt)\n        (r2 + r1).reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv9sjskxz.scala:17)\n\tat Problem.main(tmpv9sjskxz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028733
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val str = x.toString\n\
    \        if (shift >= str.length) str.reverse\n        else str.substring(str.length\
    \ - shift.toInt) + str.substring(0, str.length - shift.toInt)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"\
    001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfhz4e0d0.scala:18)\n\tat Problem.main(tmpfhz4e0d0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028733
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        var xString\
    \ = x.toString\n        if (shift >= xString.length) {\n            return xString.reverse\n\
    \        }\n        var yString = xString.substring(0, xString.length - shift.toInt)\n\
    \        xString = xString.substring(xString.length - shift.toInt)\n        return\
    \ xString + yString\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9kzeiqcj.scala:22)\n\tat Problem.main(tmp9kzeiqcj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028733
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        x.toString.substring(x.toString.length\
    \ - shift.toInt, x.toString.length) + x.toString.substring(0, x.toString.length\
    \ - shift.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: begin -6, end 2, length 2\n\t\
    at java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\
    \tat Problem$.circularShift(tmp9f8zljy1.scala:12)\n\tat Problem$.main(tmp9f8zljy1.scala:17)\n\
    \tat Problem.main(tmp9f8zljy1.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028732
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n      if (shift > x.toString.length)\n\
    \        return x.toString.reverse\n      else {\n        val s = (x.toString.takeRight(shift.toInt)\
    \ + x.toString.dropRight(shift.toInt))\n        s\n      }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n\
    \    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028733
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digit =\
    \ x.toString.map(_.asDigit)\n        if (shift > digit.length) digit.reverse.mkString\n\
    \        else digit.reverse.drop(shift.toInt).reverse.mkString + digit.reverse.take(shift.toInt).reverse.mkString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1rvefsai.scala:17)\n\tat Problem.main(tmp1rvefsai.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028734
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val s = x.toString\n\
    \        val n = s.length\n        val shiftMod = shift % n\n        if (shiftMod\
    \ == 0) {\n            return s\n        }\n        else if (shiftMod < n - shiftMod)\
    \ {\n            return s.substring(shiftMod) + s.substring(0, shiftMod)\n   \
    \     }\n        else {\n            return s.substring(n - shiftMod) + s.substring(0,\
    \ n - shiftMod)\n        }\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1_d3lj08.scala:19:31\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m            \e[33mreturn\e[0m\
    \ s.substring(shiftMod) + s.substring(\e[31m0\e[0m, shiftMod)\n\e[31m\e[31m  \
    \ |\e[0m                               ^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                       Found:    (shiftMod : Long)\n\e[31m   |\e[0m         \
    \                      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp1_d3lj08.scala:19:58 --------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m            \e[33mreturn\e[0m s.substring(shiftMod) + s.substring(\e\
    [31m0\e[0m, shiftMod)\n\e[31m\e[31m   |\e[0m                                 \
    \                         ^^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \                        Found:    (shiftMod : Long)\n\e[31m   |\e[0m        \
    \                                     Required: Int\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp1_d3lj08.scala:22:31 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mreturn\e[0m s.substring(n - shiftMod)\
    \ + s.substring(\e[31m0\e[0m, n - shiftMod)\n\e[31m\e[31m   |\e[0m           \
    \                    ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \         Found:    Long\n\e[31m   |\e[0m                               Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1_d3lj08.scala:22:62\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m            \e[33mreturn\e[0m\
    \ s.substring(n - shiftMod) + s.substring(\e[31m0\e[0m, n - shiftMod)\n\e[31m\e\
    [31m   |\e[0m                                                              ^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                         \
    \ Found:    Long\n\e[31m   |\e[0m                                            \
    \              Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain"
  stdout: ''
  timestamp: 1660028740
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString\n        val n = digits.length\n        if (shift >= n) digits.reverse\n\
    \        else digits.takeRight(shift.toInt) + digits.dropRight(shift.toInt)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkji31o5b.scala:19)\n\tat Problem.main(tmpkji31o5b.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028743
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ new ArrayBuffer[Long]\n        var y = x\n        while (y > 0) {\n        \
    \    digits += y % 10\n            y /= 10\n        }\n        if (shift > digits.length)\
    \ return digits.reverse.mkString\n        digits.rotateRight(shift.toInt)\n  \
    \      return digits.mkString\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpowr0nvu1.scala:19:15 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        digits.rotateRight(shift.toInt)\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue rotateRight is\
    \ not a member of scala.collection.mutable.ArrayBuffer[Long] - did you mean digits.takeRight?\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028741
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.length\n        val shift2 = shift % digits\n        if (shift2 ==\
    \ 0) {\n            x.toString\n        } else {\n            ((x / pow(10, shift2)).toLong.toString\
    \ + (x % pow(10, shift2)).toLong.toString.reverse).reverse\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"\
    001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpl_dlu_my.scala:21)\n\tat Problem.main(tmpl_dlu_my.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028743
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val a = x.toString\n\
    \        if (shift > a.length) a.reverse\n        else a.substring(a.length -\
    \ shift.toInt) + a.substring(0, a.length - shift.toInt)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n\
    \    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028742
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n      var n = x\n  \
    \    var digits = new ListBuffer[Long]()\n      while (n > 0) {\n        digits\
    \ += n % 10\n        n /= 10\n      }\n      if (shift > digits.length) {\n  \
    \      return digits.reverse.mkString\n      }\n      for (i <- 0l until shift)\
    \ {\n        digits.prepend(digits.last)\n        digits.remove(digits.length\
    \ - 1)\n      }\n      digits.mkString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1mwqgun1.scala:28)\n\tat Problem.main(tmp1mwqgun1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028743
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        var temp = x\n\
    \        for (i <- 0 until shift) {\n            var digit = temp % 10\n     \
    \       temp /= 10\n            temp += digit * pow(10, floor(log10(x)).toInt).toLong\n\
    \        }\n        return temp.toString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqx362_34.scala:13:26\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until shift) {\n\e[31m\e[31m   |\e[0m                         \
    \ ^^^^^\e[0m\n\e[31m   |\e[0m                          Found:    (shift : Long)\n\
    \e[31m   |\e[0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028742
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        var s = x.toString\n\
    \        var i = shift % s.length\n        s = s.substring(i) + s.substring(0,\
    \ i)\n        s\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptq9hqpez.scala:14:24\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        s = s.substring(i) +\
    \ s.substring(\e[31m0\e[0m, i)\n\e[31m\e[31m   |\e[0m                        ^\e\
    [0m\n\e[31m   |\e[0m                        Found:    (i : Long)\n\e[31m   |\e\
    [0m                        Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmptq9hqpez.scala:14:44 --------------------\e[0m\e\
    [0m\n\e[31m14 |\e[0m        s = s.substring(i) + s.substring(\e[31m0\e[0m, i)\n\
    \e[31m\e[31m   |\e[0m                                            ^\e[0m\n\e[31m\
    \   |\e[0m                                            Found:    (i : Long)\n\e\
    [31m   |\e[0m                                            Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660028743
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        if (shift ==\
    \ 0) return x.toString\n        val xStr = x.toString\n        val shiftMod =\
    \ shift % xStr.length\n        if (shiftMod == 0) return xStr\n        return\
    \ xStr.substring(xStr.length - shiftMod) + xStr.substring(0, xStr.length - shiftMod)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpap3z9tbh.scala:16:30\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mreturn\e[0m xStr.substring(xStr.length\
    \ - shiftMod) + xStr.substring(\e[31m0\e[0m, xStr.length - shiftMod)\n\e[31m\e\
    [31m   |\e[0m                              ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                              Found:    Long\n\e[31m   |\e[0m      \
    \                        Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpap3z9tbh.scala:16:74 --------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m        \e[33mreturn\e[0m xStr.substring(xStr.length - shiftMod)\
    \ + xStr.substring(\e[31m0\e[0m, xStr.length - shiftMod)\n\e[31m\e[31m   |\e[0m\
    \                                                                          ^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                         \
    \ Found:    Long\n\e[31m   |\e[0m                                            \
    \              Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028742
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        var t = x\n\
    \        var digits = 0\n        while (t > 0) {\n            t /= 10\n      \
    \      digits += 1\n        }\n        if (shift > digits) return x.toString.reverse\n\
    \        var l = x % (pow(10, shift).toLong)\n        var r = x / (pow(10, shift).toLong)\n\
    \        l + (r * pow(10, digits - shift)).toLong\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpr3fczowt.scala:21:42\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        l + (r * pow(\e[31m10\e\
    [0m, digits - shift)).toLong\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Found:    Long\n\e[31m   |\e[0m            Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028742
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n      val str = (if\
    \ (shift > x.toString.length) x.toString.reverse else x.toString.substring(shift.toInt)\
    \ + x.toString.substring(0, shift.toInt))\n      println(str)\n      str\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"\
    001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1kekyaq_.scala:17)\n\tat Problem.main(tmp1kekyaq_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: '010

    '
  timestamp: 1660028743
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n      if (shift == 0)\
    \ {\n        return x.toString\n      }\n      var arr = x.toString.toCharArray\n\
    \      var t1 = arr.take(arr.length - shift.toInt)\n      var t2 = arr.drop(arr.length\
    \ - shift.toInt)\n      (t2 ++ t1).mkString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmaemloxz.scala:23)\n\tat Problem.main(tmpmaemloxz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028744
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val y = x.toString\n\
    \        val n = y.length\n        val s = shift.toInt\n        if (s >= n) y.reverse\n\
    \        else {\n            val t = y.substring(s, n) + y.substring(0, s)\n \
    \           val m = t.toLong\n            m.toString\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"\
    001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt5wl6d27.scala:23)\n\tat Problem.main(tmpt5wl6d27.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028743
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        var xString\
    \ = x.toString()\n        var answer = xString.substring(xString.length - shift.toInt,\
    \ xString.length) + xString.substring(0, xString.length - shift.toInt)\n     \
    \   return answer\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: begin -6, end 2, length 2\n\t\
    at java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\
    \tat Problem$.circularShift(tmpdsywcdx4.scala:13)\n\tat Problem$.main(tmpdsywcdx4.scala:19)\n\
    \tat Problem.main(tmpdsywcdx4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028742
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.map(_.asDigit)\n        (shift to digits.length).foldLeft(digits)((digits,\
    \ i) => digits(i - 1) :: digits.take(i - 1) ::: digits.drop(i))\n      .mkString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpit20ojlz.scala:13:117\
    \ -------------------\e[0m\e[0m\n\e[31m13 |\e[0m        (shift to digits.length).foldLeft(digits)((\e\
    [36mdigits\e[0m, \e[36mi\e[0m) => digits(i - \e[31m1\e[0m) :: digits.take(i -\
    \ \e[31m1\e[0m) ::: digits.drop(i))\n\e[31m\e[31m   |\e[0m                   \
    \                                                                            \
    \                      ^\e[0m\n\e[31m   |\e[0m                               \
    \                     Found:    (i : Long)\n\e[31m   |\e[0m                  \
    \                                  Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpit20ojlz.scala:13:94 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        (shift to digits.length).foldLeft(digits)((\e\
    [36mdigits\e[0m, \e[36mi\e[0m) => digits(i - \e[31m1\e[0m) :: digits.take(i -\
    \ \e[31m1\e[0m) ::: digits.drop(i))\n\e[31m\e[31m   |\e[0m                   \
    \                                                                           ^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                         \
    \ Found:    Long\n\e[31m   |\e[0m                                            \
    \              Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[33m\e[33m-- Warning: /tmp/tmpit20ojlz.scala:14:6\
    \ ----------------------------------------\e[0m\e[0m\n\e[33m14 |\e[0m      .mkString\n\
    \e[33m\e[33m   |\e[0m      ^\e[0m\n\e[33m   |\e[0m      Line is indented too far\
    \ to the left, or a `}` is missing\n1 warning found\n2 errors found\n"
  stdout: ''
  timestamp: 1660028743
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n      val n = x.toString.length\n\
    \      val s = if (shift >= n) {\n          x.toString.reverse\n      } else {\n\
    \          val (a, b) = x.toString.splitAt(n - shift.toInt)\n          b + a\n\
    \      }\n      s\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqir8qjr9.scala:23)\n\tat Problem.main(tmpqir8qjr9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028743
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        if (shift ==\
    \ 0) return x.toString\n        var y = x\n        val k = y.toString.length\n\
    \        val r = shift % k\n        if (r > 0) {\n            var t = y % (pow(10,\
    \ r).toLong)\n            y = y / (pow(10, r).toLong)\n            y = t * (pow(10,\
    \ k - r).toLong) + y\n        }\n        y.toString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n\
    \    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbqp_53g_.scala:24)\n\tat Problem.main(tmpbqp_53g_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028743
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val d = x.toString.length\
    \ - shift.toString.length\n        if (d > 0) {\n            return x.toString.drop(d)\
    \ + x.toString.take(d)\n        } else {\n            return x.toString.reverse\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplyb69422.scala:20)\n\tat Problem.main(tmplyb69422.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028743
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.length\n        if (shift >= digits) {\n            x.toString.reverse\n\
    \        } else {\n            (x.toString.substring(digits - shift.toInt) + x.toString.substring(0,\
    \ digits - shift.toInt))\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvxiy2f3v.scala:21)\n\tat Problem.main(tmpvxiy2f3v.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028743
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val str = x.toString\n\
    \        val n = str.length\n        val s = str.substring(n - shift.toInt, n)\
    \ + str.substring(0, n - shift.toInt)\n        if (shift > n) str.reverse else\
    \ s\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: begin -6, end 2, length 2\n\t\
    at java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\
    \tat Problem$.circularShift(tmp1sxaim_s.scala:14)\n\tat Problem$.main(tmp1sxaim_s.scala:20)\n\
    \tat Problem.main(tmp1sxaim_s.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028743
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val s = x.toString\n\
    \        val n = s.length\n        val j = if (shift > n) n - shift % n else shift\n\
    \        s.substring(j) + s.substring(0, j)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnhqdxiec.scala:15:20\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        s.substring(j) + s.substring(\e\
    [31m0\e[0m, j)\n\e[31m\e[31m   |\e[0m                    ^\e[0m\n\e[31m   |\e\
    [0m                    Found:    (j : Long)\n\e[31m   |\e[0m                 \
    \   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnhqdxiec.scala:15:40\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        s.substring(j) + s.substring(\e\
    [31m0\e[0m, j)\n\e[31m\e[31m   |\e[0m                                        ^\e\
    [0m\n\e[31m   |\e[0m                                        Found:    (j : Long)\n\
    \e[31m   |\e[0m                                        Required: Int\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660028743
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        if (shift ==\
    \ 0) return x.toString\n        else if (shift >= x.toString.length) return x.toString.reverse\n\
    \        else return x.toString.substring(shift.toInt) + x.toString.substring(0,\
    \ shift.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprywz6v3s.scala:17)\n\tat Problem.main(tmprywz6v3s.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028744
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        var digits =\
    \ x.toString.toCharArray\n        var r = digits.length - shift.toInt\n      \
    \  var result = digits.slice(r, digits.length) ++ digits.slice(0, r)\n       \
    \ return result.mkString\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpuvw0_7se.scala:20)\n\tat Problem.main(tmpuvw0_7se.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028746
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n      val digits = x.toString.toArray\n\
    \      val n = digits.length\n      val shiftMod = shift % n\n      val m = min(shiftMod,\
    \ n - shiftMod)\n      val left = if (shiftMod <= 0) digits else digits.slice(shiftMod,\
    \ n)\n      val right = if (shiftMod <= 0) digits.slice(0, n + shiftMod) else\
    \ digits.slice(0, shiftMod)\n      new String(left ++ right)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n\
    \    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzhxjp9fd.scala:16:61\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m      \e[33mval\e[0m \e[36mleft\e\
    [0m = \e[33mif\e[0m (shiftMod <= \e[31m0\e[0m) digits \e[33melse\e[0m digits.slice(shiftMod,\
    \ n)\n\e[31m\e[31m   |\e[0m                                                  \
    \           ^^^^^^^^\e[0m\n\e[31m   |\e[0m                                   \
    \          Found:    (shiftMod : Long)\n\e[31m   |\e[0m                      \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpzhxjp9fd.scala:17:53 --------------------\e[0m\e\
    [0m\n\e[31m17 |\e[0m      \e[33mval\e[0m \e[36mright\e[0m = \e[33mif\e[0m (shiftMod\
    \ <= \e[31m0\e[0m) digits.slice(\e[31m0\e[0m, n + shiftMod) \e[33melse\e[0m digits.slice(\e\
    [31m0\e[0m, shiftMod)\n\e[31m\e[31m   |\e[0m                                 \
    \                    ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \                               Found:    Long\n\e[31m   |\e[0m              \
    \                                       Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpzhxjp9fd.scala:17:88 --------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m      \e[33mval\e[0m \e[36mright\e[0m = \e[33mif\e[0m\
    \ (shiftMod <= \e[31m0\e[0m) digits.slice(\e[31m0\e[0m, n + shiftMod) \e[33melse\e\
    [0m digits.slice(\e[31m0\e[0m, shiftMod)\n\e[31m\e[31m   |\e[0m              \
    \                                                                          ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                             Found:    (shiftMod\
    \ : Long)\n\e[31m   |\e[0m                                             Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660028751
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        var xstr = x.toString\n\
    \        if (shift >= xstr.length) return xstr.reverse\n        return xstr.substring(shift.toInt)\
    \ + xstr.substring(0, shift.toInt)\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpj8og3fvd.scala:17)\n\tat Problem.main(tmpj8og3fvd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028752
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        var p = x.toString.reverse.toCharArray\n\
    \        val k = p.length\n        // shift = 0..k\n        var y = new Array[Char](k)\n\
    \        if (shift == 0) return x.toString\n        if (shift > k) return new\
    \ String(p)\n        var q = 0\n        while (q < k) {\n            y(q) = p((q\
    \ + shift) % k)\n            q += 1\n        }\n        new String(y)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"\
    001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpp7vcxze2.scala:20:21\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m            y(q) = p((q + shift)\
    \ % k)\n\e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Found:    Long\n\e[31m   |\e[0m               \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028751
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val s = x.toString\n\
    \        if (shift >= s.length) s.reverse\n        else (s.drop(shift.toInt) +\
    \ s.take(shift.toInt)).reverse\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_22cx1ak.scala:17)\n\tat Problem.main(tmp_22cx1ak.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028752
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString\n        val numDigits = digits.length\n        if (shift >= numDigits)\
    \ digits.reverse\n        else digits.substring(numDigits - shift.toInt) + digits.substring(0,\
    \ numDigits - shift.toInt)\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6ckvii1d.scala:19)\n\tat Problem.main(tmp6ckvii1d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028752
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        var result =\
    \ x.toString\n        if (result.length > shift) {\n            result = result.substring(result.length\
    \ - shift.toInt) + result.substring(0, result.length - shift.toInt)\n        }\
    \ else {\n            result = result.reverse\n        }\n        return result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpibw40j62.scala:22)\n\tat Problem.main(tmpibw40j62.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028753
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        var remainder\
    \ = x\n        var size = 0\n        while (remainder > 0) {\n            remainder\
    \ /= 10\n            size += 1\n        }\n        if (shift == size) return (x.toString)\n\
    \        var digit = remainder = x\n        var i = 0\n        while (i < shift)\
    \ {\n            digit = remainder % 10\n            remainder /= 10\n       \
    \     i += 1\n        }\n        (remainder.toString + digit.toString)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"\
    001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3t6730d_.scala:29)\n\tat Problem.main(tmp3t6730d_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028752
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        def f(x : Long,\
    \ shift : Long, d : Int) : Long = {\n            if (d < shift) {\n          \
    \      val lastDigit = x % 10\n                val rest = x / 10\n           \
    \     f(rest + lastDigit * pow(10, (d + 1)).toLong, shift, d + 1)\n          \
    \  } else x\n        }\n        def g(x : Long, d : Int) : String = {\n      \
    \      if (d > 0) g(x / 10, d - 1) + (x % 10).toString\n            else \"\"\n\
    \        }\n        g(f(x, shift, 0), x.toString.length - shift.toString.length)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptj3imen0.scala:26)\n\tat Problem.main(tmptj3imen0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028752
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        if (shift >\
    \ x.toString.length) {\n            x.toString.reverse\n        } else {\n   \
    \         x.toString.substring(x.toString.length - shift.toInt) + x.toString.substring(0,\
    \ x.toString.length - shift.toInt)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028753
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n      val xStr = x.toString\n\
    \      val strLen = xStr.length\n      if (shift >= strLen) {\n        return\
    \ xStr.reverse\n      }\n      else {\n        return xStr.substring(shift.toInt)\
    \ + xStr.substring(0, shift.toInt)\n      }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqyrte3zx.scala:22)\n\tat Problem.main(tmpqyrte3zx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028752
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        if (shift >=\
    \ log10(x).toLong + 1) return x.toString.reverse\n        else {\n           \
    \ val s = x.toString\n            return s.substring(s.length - shift.toInt) +\
    \ s.substring(0, s.length - shift.toInt)\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n\
    \    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphpspe0yi.scala:20)\n\tat Problem.main(tmphpspe0yi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028753
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val xs = x.toString\n\
    \        if (shift > xs.length) (xs.reverse)\n        else {\n            val\
    \ s = xs.substring(0, (xs.length - shift).toInt)\n            val e = xs.substring((xs.length\
    \ - shift).toInt)\n            (e + s)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028752
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        if (shift ==\
    \ 0) x.toString\n        else {\n            val n = x.toString.length\n     \
    \       if (shift >= n) x.toString.reverse\n            else {\n             \
    \   val y = x.toString.substring(n - shift.toInt) + x.toString.substring(0, n\
    \ - shift.toInt)\n                y\n            }\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"\
    001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4fwrus1b.scala:24)\n\tat Problem.main(tmp4fwrus1b.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028753
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        if (shift >=\
    \ x.toString.length) (x.toString.reverse)\n        else {\n            val s =\
    \ x.toString\n            s.substring(s.length - shift.toInt) + s.substring(0,\
    \ s.length - shift.toInt)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpreekty6h.scala:20)\n\tat Problem.main(tmpreekty6h.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028753
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n      val numOfDigits\
    \ = floor(log10(x)).toInt + 1\n      if (shift == numOfDigits) {\n        val\
    \ temp = x.toString\n        temp.reverse\n      }\n      else {\n        val\
    \ temp = x.toString\n        (temp.substring(temp.length - shift.toInt) + temp.substring(0,\
    \ temp.length - shift.toInt))\n      }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_bscdxhd.scala:24)\n\tat Problem.main(tmp_bscdxhd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028753
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val s = x.toString\n\
    \        val n = s.length\n        val r = x.toString.reverse\n        if (shift\
    \ >= n) {\n            return r\n        }\n        return r.substring(0, n -\
    \ shift.toInt) + r.substring(n - shift.toInt, n)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplqg7v6ml.scala:22)\n\tat Problem.main(tmplqg7v6ml.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028753
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val n = x.toString.length\n\
    \        if (shift == n) return new StringBuffer(x.toString).reverse.toString\n\
    \        if (shift > n) return circularShift(x, shift % n)\n        new StringBuffer(x.toString.substring(shift.toInt)\
    \ + x.toString.substring(0, shift.toInt)).toString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n\
    \    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp34x_46sl.scala:18)\n\tat Problem.main(tmp34x_46sl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028753
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        def circularShift(x\
    \ : Long, shift : Long, size : Long) : String = {\n            if (shift == 0)\
    \ x.toString\n            else if (shift > size) (x / pow(10, shift - size).toLong).toString.reverse\n\
    \            else ((x % pow(10, size - shift).toLong) * pow(10, shift).toLong\
    \ + (x / pow(10, size - shift).toLong)).toString\n        }\n        circularShift(x,\
    \ shift, x.toString.size)\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7c05uffv.scala:20)\n\tat Problem.main(tmp7c05uffv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028753
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val d = x.toString.length\n\
    \        val k = if (shift > d) d else shift\n        val s = x.toString\n   \
    \     s.drop(d - k) + s.take(d - k)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpodz_vgeg.scala:15:17 -----------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        s.drop(d - k) + s.take(d - k)\n\e[31m\e[31m \
    \  |\e[0m               ^^^\e[0m\n\e[31m   |\e[0m None of the overloaded alternatives\
    \ of \e[33mmethod\e[0m \e[35m-\e[0m in \e[33mclass\e[0m \e[35mInt\e[0m with types\n\
    \e[31m   |\e[0m  (x: Double): Double\n\e[31m   |\e[0m  (x: Float): Float\n\e[31m\
    \   |\e[0m  (x: Long): Long\n\e[31m   |\e[0m  (x: Int): Int\n\e[31m   |\e[0m \
    \ (x: Char): Int\n\e[31m   |\e[0m  (x: Short): Int\n\e[31m   |\e[0m  (x: Byte):\
    \ Int\n\e[31m   |\e[0m match arguments ((k : AnyVal))\n\e[31m\e[31m-- [E134] Type\
    \ Error: /tmp/tmpodz_vgeg.scala:15:33 -----------------------------\e[0m\e[0m\n\
    \e[31m15 |\e[0m        s.drop(d - k) + s.take(d - k)\n\e[31m\e[31m   |\e[0m  \
    \                             ^^^\e[0m\n\e[31m   |\e[0m None of the overloaded\
    \ alternatives of \e[33mmethod\e[0m \e[35m-\e[0m in \e[33mclass\e[0m \e[35mInt\e\
    [0m with types\n\e[31m   |\e[0m  (x: Double): Double\n\e[31m   |\e[0m  (x: Float):\
    \ Float\n\e[31m   |\e[0m  (x: Long): Long\n\e[31m   |\e[0m  (x: Int): Int\n\e\
    [31m   |\e[0m  (x: Char): Int\n\e[31m   |\e[0m  (x: Short): Int\n\e[31m   |\e\
    [0m  (x: Byte): Int\n\e[31m   |\e[0m match arguments ((k : AnyVal))\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660028751
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n    \tval digits = x.toString.toList\n\
    \    \tif (shift >= digits.length) digits.reverse.mkString\n    \telse {\n   \
    \ \t\tval (first, second) = digits.splitAt(digits.length - shift.toInt)\n    \t\
    \t(second ++ first).mkString\n    \t}\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp63ivorfd.scala:21)\n\tat Problem.main(tmp63ivorfd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028754
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        if (shift ==\
    \ 0) return x.toString()\n        var digits = x.toString().toList\n        if\
    \ (shift >= digits.length) return digits.reverse.mkString\n        var k = 0\n\
    \        var temp = digits(0)\n        while (k < shift) {\n            var j\
    \ = 0\n            while (j < digits.length - 1) {\n                var t = digits(j)\n\
    \                digits(j) = digits(j + 1)\n                digits(j + 1) = t\n\
    \                j += 1\n            }\n            digits(digits.length - 1)\
    \ = temp\n            k += 1\n        }\n        return digits.mkString\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"\
    001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpjwef3g14.scala:21:16 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                digits(j) = digits(j + \e[31m1\e[0m)\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^\e[0m\n\e[31m   |\e[0mvalue update\
    \ is not a member of List[Char] - did you mean List[Char].updated?\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpjwef3g14.scala:22:16 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                digits(j + \e[31m1\e[0m) = t\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^\e[0m\n\e[31m   |\e[0mvalue update is not a\
    \ member of List[Char] - did you mean List[Char].updated?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpjwef3g14.scala:25:12 ------------------------\e[0m\e\
    [0m\n\e[31m25 |\e[0m            digits(digits.length - \e[31m1\e[0m) = temp\n\e\
    [31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0mvalue update is not\
    \ a member of List[Char] - did you mean List[Char].updated?\n3 errors found\n"
  stdout: ''
  timestamp: 1660028754
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.toList\n        val n = digits.length\n        val shiftDigits =\
    \ if (shift > n) n else shift.toInt\n        (digits.takeRight(shiftDigits) :::\
    \ digits.dropRight(shiftDigits)).mkString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpa5bvk_td.scala:20)\n\tat Problem.main(tmpa5bvk_td.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028755
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val list : ArrayBuffer[Int]\
    \ = x.toString.map(_.asDigit).toBuffer\n        val len = list.length\n      \
    \  val (a, b) = list.splitAt(if (shift > len) len - 1 else len - shift.toInt)\n\
    \        (b ++ a).mkString\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp36zubmc4.scala:12:38\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mlist\e\
    [0m : \e[35mArrayBuffer\e[0m[\e[35mInt\e[0m] = x.toString.map(_.asDigit).toBuffer\n\
    \e[31m\e[31m   |\e[0m                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                          Found:    \e[1m\e[31mscala\e[0m\e\
    [1m\e[31m.\e[0mcollection.mutable.\e[1m\e[31mBuffer\e[0m[Int]\n\e[31m   |\e[0m\
    \                          Required: collection.mutable.\e[1m\e[32mArrayBuffer\e\
    [0m[Int]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028756
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val s = x.toString\n\
    \        val len = s.length\n        val s2 = new StringBuilder\n        for (i\
    \ <- (0l until len)) s2.append(s((i + shift) % len))\n        return s2.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4ar_6uv0.scala:15:46\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m (i <-\
    \ (\e[31m0l\e[0m until len)) s2.append(s((i + shift) % len))\n\e[31m\e[31m   |\e\
    [0m                                              ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                              Found:    Long\n\e[31m\
    \   |\e[0m                                              Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028760
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val n = (x.toString).length\n\
    \        val s = x.toString\n        if (shift > n) {\n            (s.substring(n\
    \ - 1, n) + s.substring(0, n - 1)).toString\n        } else {\n            (s.substring(n\
    \ - shift.toInt, n) + s.substring(0, n - shift.toInt)).toString\n        }\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028760
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        if (shift <\
    \ 1) {\n            return x.toString\n        }\n        val digs = new StringBuilder\n\
    \        var x1 = x\n        while (x1 > 0) {\n            digs.append(x1 % 10)\n\
    \            x1 /= 10\n        }\n        digs.reverse\n        val a = digs.toString.toCharArray\n\
    \        val n = a.length\n        val a2 = new Array[Char](n)\n        for (i\
    \ <- 0 until n) {\n            a2(i) = a((i + shift) % n)\n        }\n       \
    \ new String(a2)\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpeguw8kxg.scala:26:22\
    \ --------------------\e[0m\e[0m\n\e[31m26 |\e[0m            a2(i) = a((i + shift)\
    \ % n)\n\e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Found:    Long\n\e[31m   |\e[0m              \
    \        Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028761
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.map(_.asDigit)\n        if (shift > digits.length) {\n          \
    \  digits.reverse.mkString\n        } else {\n            val split = digits.splitAt(digits.length\
    \ - shift.toInt)\n            (split._2 ++ split._1).mkString\n        }\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"\
    001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028763
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        if (shift ==\
    \ 0) return x.toString\n        val digits = x.toString.length\n        if (shift\
    \ > digits) return x.toString.reverse\n        val endDigits = x.toString.slice(0,\
    \ shift.toInt)\n        val beginDigits = x.toString.slice(shift.toInt, digits)\n\
    \        beginDigits + endDigits\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0uz9w0hx.scala:20)\n\tat Problem.main(tmp0uz9w0hx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028762
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.toList\n        val shift1 = shift % digits.length\n        if (shift1\
    \ == 0) digits.mkString(\"\")\n        else if (shift1 > digits.length) digits.reverse.mkString(\"\
    \")\n        else {\n            val (l1, l2) = digits.splitAt(digits.length -\
    \ shift1)\n            (l2 ::: l1).mkString(\"\")\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n\
    \    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmoz1jb46.scala:17:42\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m            \e[33mval\e[0m (l1,\
    \ l2) = digits.splitAt(digits.length - shift1)\n\e[31m\e[31m   |\e[0m        \
    \                                  ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                          Found:    Long\n\e[31m   |\e[0m   \
    \                                       Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028762
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        var s = x.toString\n\
    \        if (shift > s.length) {\n            s = s.reverse\n        } else {\n\
    \            s = s.substring(s.length - shift.toInt) + s.substring(0, s.length\
    \ - shift.toInt)\n        }\n        s\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028762
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val s = x.toString\n\
    \        val len = s.length\n        val (n1, n2) = s.splitAt(len - (shift % len).toInt)\n\
    \        n2 + n1\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdyfgrawu.scala:20)\n\tat Problem.main(tmpdyfgrawu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028762
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val s = x.toString\n\
    \        val l = s.length\n        if (shift >= l) {\n            s.reverse\n\
    \        } else {\n            val u = shift.toInt\n            val a = s.substring(u,\
    \ l)\n            val b = s.substring(0, u)\n            (a + b)\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmps6r5fx8o.scala:24)\n\tat Problem.main(tmps6r5fx8o.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028763
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val shiftNew\
    \ = if (shift > x.toString.length) x.toString.length - 1 else shift\n        val\
    \ right = x.toString.substring(x.toString.length - shiftNew, x.toString.length)\n\
    \        val left = x.toString.substring(0, x.toString.length - shiftNew)\n  \
    \      (right + left)\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpyl_aw27m.scala:13:59 -----------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mright\e[0m = x.toString.substring(x.toString.length\
    \ - shiftNew, x.toString.length)\n\e[31m\e[31m   |\e[0m                      \
    \                   ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m None of the overloaded\
    \ alternatives of \e[33mmethod\e[0m \e[35m-\e[0m in \e[33mclass\e[0m \e[35mInt\e\
    [0m with types\n\e[31m   |\e[0m  (x: Double): Double\n\e[31m   |\e[0m  (x: Float):\
    \ Float\n\e[31m   |\e[0m  (x: Long): Long\n\e[31m   |\e[0m  (x: Int): Int\n\e\
    [31m   |\e[0m  (x: Char): Int\n\e[31m   |\e[0m  (x: Short): Int\n\e[31m   |\e\
    [0m  (x: Byte): Int\n\e[31m   |\e[0m match arguments ((shiftNew : AnyVal))\n\e\
    [31m\e[31m-- [E134] Type Error: /tmp/tmpyl_aw27m.scala:14:61 -----------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mleft\e[0m = x.toString.substring(\e\
    [31m0\e[0m, x.toString.length - shiftNew)\n\e[31m\e[31m   |\e[0m             \
    \                              ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m None\
    \ of the overloaded alternatives of \e[33mmethod\e[0m \e[35m-\e[0m in \e[33mclass\e\
    [0m \e[35mInt\e[0m with types\n\e[31m   |\e[0m  (x: Double): Double\n\e[31m  \
    \ |\e[0m  (x: Float): Float\n\e[31m   |\e[0m  (x: Long): Long\n\e[31m   |\e[0m\
    \  (x: Int): Int\n\e[31m   |\e[0m  (x: Char): Int\n\e[31m   |\e[0m  (x: Short):\
    \ Int\n\e[31m   |\e[0m  (x: Byte): Int\n\e[31m   |\e[0m match arguments ((shiftNew\
    \ : AnyVal))\n2 errors found\n"
  stdout: ''
  timestamp: 1660028760
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        var s = x.toString.reverse\n\
    \        var digits = s.length\n        if (shift < digits) s = s.substring(0,\
    \ (digits - shift).toInt) + s.substring((digits - shift).toInt)\n        s.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprz7cxd6n.scala:18)\n\tat Problem.main(tmprz7cxd6n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028763
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val num = x.toString\n\
    \        val size = num.size\n        var xs = num.toList\n        for (i <- 1\
    \ to shift.toInt) {\n            xs = xs.tail :+ xs.head\n        }\n        xs.mkString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpaes_j3ps.scala:21)\n\tat Problem.main(tmpaes_j3ps.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028763
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.length\n        if (shift > digits)\n            return x.toString.reverse\n\
    \        return x.toString.substring(digits - shift.toInt) + x.toString.substring(0,\
    \ digits - shift.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028763
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        // The approach\
    \ here is to convert x to a string, and then to reverse it and\n        // take\
    \ the appropriate substrings of it.\n        // O(n) where n is the number of\
    \ digits in x\n        val str = x.toString()\n        val len = str.length\n\
    \        // Note that if shift > len, we simply revert to reversing the string\n\
    \        val start = if (shift < len) len - shift else 0\n        val rev = str.reverse\n\
    \        val (a, b) = rev.splitAt(start)\n        return (b + a).reverse\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"\
    001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_4u65478.scala:20:33\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m (a, b)\
    \ = rev.splitAt(start)\n\e[31m\e[31m   |\e[0m                                \
    \ ^^^^^\e[0m\n\e[31m   |\e[0m                                 Found:    (start\
    \ : Long)\n\e[31m   |\e[0m                                 Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028762
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val strX = x.toString\n\
    \        val digits = strX.length\n        val shiftBuf = shift % digits\n   \
    \     if (shiftBuf == 0) strX\n        else {\n            val head = strX.substring(digits\
    \ - shiftBuf)\n            val tail = strX.substring(0, digits - shiftBuf)\n \
    \           head + tail\n        }\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkl138hn7.scala:17:38\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m            \e[33mval\e[0m \e\
    [36mhead\e[0m = strX.substring(digits - shiftBuf)\n\e[31m\e[31m   |\e[0m     \
    \                                 ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                                  Found:    Long\n\e[31m   |\e[0m           \
    \                           Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpkl138hn7.scala:18:41 --------------------\e[0m\e\
    [0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[36mtail\e[0m = strX.substring(\e\
    [31m0\e[0m, digits - shiftBuf)\n\e[31m\e[31m   |\e[0m                        \
    \                 ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \                     Found:    Long\n\e[31m   |\e[0m                        \
    \                 Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028762
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        if (shift >\
    \ x.toString.length) {\n            return (x.toString.reverse)\n        }\n \
    \       var s = x.toString\n        var right = s.substring(0, s.length - shift.toInt)\n\
    \        var left = s.substring(s.length - shift.toInt, s.length)\n        return\
    \ (left + right)\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028763
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val n = x.toString.length\n\
    \        if (shift >= n) (x.toString).reverse\n        else {\n            val\
    \ y = x.toString\n            y.drop(shift.toInt) + y.take(shift.toInt)\n    \
    \    }\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmuevydmw.scala:20)\n\tat Problem.main(tmpmuevydmw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028763
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n      val s = x.toString\n\
    \      if (shift > s.length) return s.reverse\n      else return s.substring(s.length\
    \ - shift.toInt) + s.substring(0, s.length - shift.toInt)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n\
    \    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028763
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val s = x.toString\n\
    \        if (shift < s.length) (s.substring(shift.toInt) + s.substring(0, shift.toInt))\n\
    \        else (s.reverse)\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpro4btr7d.scala:17)\n\tat Problem.main(tmpro4btr7d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028763
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        var s = x.toString\n\
    \        if (shift >= s.length) {\n            s = s.reverse\n        } else {\n\
    \            s = s.substring(s.length - shift.toInt) + s.substring(0, s.length\
    \ - shift.toInt)\n        }\n        s\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkymrla2w.scala:22)\n\tat Problem.main(tmpkymrla2w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028763
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        def circularShiftRec(x\
    \ : Long, shift : Long, acc : String) : String = {\n            if (x == 0) acc\n\
    \            else {\n                val digit = x % 10\n                val newX\
    \ = (x - digit) / 10\n                val newShift = shift - 1\n             \
    \   if (newShift == 0) circularShiftRec(newX, newShift, digit + acc)\n       \
    \         else circularShiftRec(newX, newShift, acc + digit)\n            }\n\
    \        }\n        def reverse(x : Long) : String = {\n            def reverseRec(x\
    \ : Long, acc : String) : String = {\n                if (x == 0) acc\n      \
    \          else {\n                    val digit = x % 10\n                  \
    \  val newX = (x - digit) / 10\n                    reverseRec(newX, digit + acc)\n\
    \                }\n            }\n            reverseRec(x, \"\")\n        }\n\
    \        val len = x.toString.length\n        if (shift > len) reverse(x)\n  \
    \      else circularShiftRec(x, shift, \"\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7gonutbi.scala:40)\n\tat Problem.main(tmp7gonutbi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028763
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val n = math.pow(10,\
    \ (math.log10(x).toInt + 1)).toLong\n        val s = shift % n\n        val d\
    \ = x / s\n        val r = x % s\n        val rs = r.toString.reverse\n      \
    \  (rs + d).toString\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxj99l32a.scala:20)\n\tat Problem.main(tmpxj99l32a.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028765
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        var s = x.toString\n\
    \        var sLen = s.length\n        var shiftMod = shift % sLen\n        if\
    \ (shiftMod == 0) {\n            return s\n        }\n        else {\n       \
    \     return s.substring(sLen - shiftMod) + s.substring(0, sLen - shiftMod)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp31c0pl2e.scala:19:31\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m            \e[33mreturn\e[0m\
    \ s.substring(sLen - shiftMod) + s.substring(\e[31m0\e[0m, sLen - shiftMod)\n\e\
    [31m\e[31m   |\e[0m                               ^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                               Found:    Long\n\e[31m   |\e[0m     \
    \                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp31c0pl2e.scala:19:65 --------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m            \e[33mreturn\e[0m s.substring(sLen - shiftMod)\
    \ + s.substring(\e[31m0\e[0m, sLen - shiftMod)\n\e[31m\e[31m   |\e[0m        \
    \                                                         ^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                                          Found:\
    \    Long\n\e[31m   |\e[0m                                                   \
    \       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028766
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        if (shift ==\
    \ 0) return x.toString\n        val digitList = new ListBuffer[Int]\n        var\
    \ a = x\n        while (a > 0) {\n            digitList += (a % 10).toInt\n  \
    \          a /= 10\n        }\n        val shiftAmount = shift % digitList.length\n\
    \        for (i <- 0 until shiftAmount) {\n            val temp = digitList(digitList.length\
    \ - 1)\n            digitList.remove(digitList.length - 1)\n            digitList.insert(0,\
    \ temp)\n        }\n        val sb = new StringBuilder\n        for (digit <-\
    \ digitList) sb.append(digit)\n        sb.toString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n\
    \    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpklbw531j.scala:20:26\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until shiftAmount) {\n\e[31m\e[31m   |\e[0m                   \
    \       ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                          Found:    (shiftAmount\
    \ : Long)\n\e[31m   |\e[0m                          Required: Int\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028769
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        if (shift <\
    \ 0) throw new IllegalArgumentException(\"shift\")\n        val xDigits = x.toString.map(_.asDigit).toList\n\
    \        val numDigits = xDigits.length\n        val shiftMod = shift % numDigits\n\
    \        if (shiftMod == 0) {\n            x.toString\n        } else {\n    \
    \        val (a, b) = xDigits.splitAt(numDigits - shiftMod)\n            (b :::\
    \ a).mkString\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5byqzj29.scala:19:41\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m (a,\
    \ b) = xDigits.splitAt(numDigits - shiftMod)\n\e[31m\e[31m   |\e[0m          \
    \                               ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                                      Found:    Long\n\e[31m   |\e[0m       \
    \                                  Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028770
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n      val digits = x.toString.length\n\
    \      val s = shift % digits\n      val r = (x.toString).drop(s.toInt) + (x.toString).take(s.toInt)\n\
    \      return r\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkrxdpr0o.scala:18)\n\tat Problem.main(tmpkrxdpr0o.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028770
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val xs = x.toString\n\
    \        if (shift > xs.length) xs.reverse\n        else xs.substring(xs.length\
    \ - shift.toInt) + xs.substring(0, xs.length - shift.toInt)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n\
    \    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028771
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val numDigits\
    \ = x.toString.length\n        if (shift >= numDigits) {\n            // Just\
    \ reverse\n            return x.toString.reverse\n        }\n        val leftDigits\
    \ = x.toString.substring(0, numDigits - shift.toInt)\n        val rightDigits\
    \ = x.toString.substring(numDigits - shift.toInt, numDigits)\n        return rightDigits\
    \ + leftDigits\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpyflbp9we.scala:23)\n\tat Problem.main(tmpyflbp9we.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028772
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val s = x.toString\n\
    \        if (shift == 0) {\n            return s\n        }\n        val numDigits\
    \ = floor(log10(x)).toInt + 1\n        if (shift >= numDigits) {\n           \
    \ return s.reverse\n        }\n        val prefix = s.substring(0, numDigits -\
    \ shift.toInt)\n        val suffix = s.substring(numDigits - shift.toInt)\n  \
    \      return suffix + prefix\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpla7zhbcz.scala:26)\n\tat Problem.main(tmpla7zhbcz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028772
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n      val len = (math.log10(x.toDouble)\
    \ + 1).toInt\n      if (shift >= len) (x.toString.reverse)\n      else {\n   \
    \     val (pre, post) = x.toString.splitAt(len - shift.toInt)\n        post +\
    \ pre\n      }\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpiv9uanz7.scala:21)\n\tat Problem.main(tmpiv9uanz7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028773
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        if (shift ==\
    \ 0) x.toString\n        else {\n            val digits = x.toString.length\n\
    \            if (shift >= digits) x.toString.reverse\n            else {\n   \
    \             val (a, b) = x.toString.splitAt(digits - shift.toInt)\n        \
    \        b + a\n            }\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpr7m4oqio.scala:24)\n\tat Problem.main(tmpr7m4oqio.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028772
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val s = x.toString\n\
    \        val length = s.length\n        if (shift > length) s.reverse\n      \
    \  else {\n            val shiftlen = s.substring(length - shift.toInt)\n    \
    \        val shiftamount = s.substring(0, length - shift.toInt)\n            shiftlen\
    \ + shiftamount\n        }\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028773
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ math.ceil(math.log10(x)).toInt\n        if (shift >= digits)\n            return\
    \ x.toString.reverse\n        val strX = x.toString\n        val left = strX.slice(strX.length\
    \ - shift.toInt, strX.length)\n        val right = strX.slice(0, strX.length -\
    \ shift.toInt)\n        return left + right\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsmlu_1b4.scala:22)\n\tat Problem.main(tmpsmlu_1b4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028773
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        if (shift ==\
    \ 0)\n            x.toString\n        else if (shift > x.toString.length)\n  \
    \          x.toString.reverse\n        else {\n            val a = x.toString.slice(0,\
    \ x.toString.length - shift.toInt)\n            val b = x.toString.slice(x.toString.length\
    \ - shift.toInt, x.toString.length)\n            b + a\n        }\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"\
    001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028773
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        var digits =\
    \ x.toString.toList\n        var result = \"\"\n        if (shift > digits.length)\
    \ {\n            result = digits.reverse.mkString\n        } else {\n        \
    \    var left = digits.drop(shift.toInt)\n            var right = digits.take(shift.toInt)\n\
    \            result = (left ::: right).mkString\n        }\n        return result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5brpetgy.scala:24)\n\tat Problem.main(tmp5brpetgy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028773
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        if (shift ==\
    \ 0) x.toString else {\n            val digits = x.toString.length\n         \
    \   val shift2 = if (shift > digits) digits else shift\n            val part1\
    \ = x.toString.substring(0, (digits - shift2))\n            val part2 = x.toString.substring((digits\
    \ - shift2), digits)\n            part2 + part1\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n\
    \    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmp0s6a74kl.scala:15:56 -----------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e[0m \e[36mpart1\e[0m = x.toString.substring(\e\
    [31m0\e[0m, (digits - shift2))\n\e[31m\e[31m   |\e[0m                        \
    \                         ^^^^^^^^\e[0m\n\e[31m   |\e[0m None of the overloaded\
    \ alternatives of \e[33mmethod\e[0m \e[35m-\e[0m in \e[33mclass\e[0m \e[35mInt\e\
    [0m with types\n\e[31m   |\e[0m  (x: Double): Double\n\e[31m   |\e[0m  (x: Float):\
    \ Float\n\e[31m   |\e[0m  (x: Long): Long\n\e[31m   |\e[0m  (x: Int): Int\n\e\
    [31m   |\e[0m  (x: Char): Int\n\e[31m   |\e[0m  (x: Short): Int\n\e[31m   |\e\
    [0m  (x: Byte): Int\n\e[31m   |\e[0m match arguments ((shift2 : AnyVal))\n\e[31m\e\
    [31m-- [E134] Type Error: /tmp/tmp0s6a74kl.scala:16:53 -----------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mpart2\e[0m = x.toString.substring((digits\
    \ - shift2), digits)\n\e[31m\e[31m   |\e[0m                                  \
    \            ^^^^^^^^\e[0m\n\e[31m   |\e[0m None of the overloaded alternatives\
    \ of \e[33mmethod\e[0m \e[35m-\e[0m in \e[33mclass\e[0m \e[35mInt\e[0m with types\n\
    \e[31m   |\e[0m  (x: Double): Double\n\e[31m   |\e[0m  (x: Float): Float\n\e[31m\
    \   |\e[0m  (x: Long): Long\n\e[31m   |\e[0m  (x: Int): Int\n\e[31m   |\e[0m \
    \ (x: Char): Int\n\e[31m   |\e[0m  (x: Short): Int\n\e[31m   |\e[0m  (x: Byte):\
    \ Int\n\e[31m   |\e[0m match arguments ((shift2 : AnyVal))\n2 errors found\n"
  stdout: ''
  timestamp: 1660028770
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        var result =\
    \ x.toString\n        for (i <- 0 until shift) {\n            result = result.last\
    \ + result.slice(0, result.length - 1)\n        }\n        return result\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"\
    001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdstgw4vr.scala:13:26\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until shift) {\n\e[31m\e[31m   |\e[0m                         \
    \ ^^^^^\e[0m\n\e[31m   |\e[0m                          Found:    (shift : Long)\n\
    \e[31m   |\e[0m                          Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028773
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val s = x.toString\n\
    \        if (shift == 0) s\n        else if (shift > s.length) s.reverse\n   \
    \     else s.slice(s.length - shift.toInt, s.length) + s.slice(0, s.length - shift.toInt)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028773
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val s = x.toString\n\
    \        val t = if (shift > s.length) (s.reverse) else (s.drop((shift % s.length).toInt)\
    \ + s.take((shift % s.length).toInt))\n        (t)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n\
    \    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4gm6dyub.scala:17)\n\tat Problem.main(tmp4gm6dyub.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028773
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n    \tif (shift == 0)\
    \ return x.toString\n    \tval xStr = x.toString\n    \tval xLen = xStr.length\n\
    \    \tif (shift > xLen) return xStr.reverse\n    \tval r = xStr.substring(0,\
    \ (xLen - shift).toInt)\n    \tval l = xStr.substring((xLen - shift).toInt, xLen.toInt)\n\
    \    \t(l + r)\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028773
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n    \tval str = x.toString\n\
    \    \tval len = str.length\n    \tval rotations = shift % len\n    \tif (rotations\
    \ == 0) str\n    \telse str.substring(len - rotations, len) + str.substring(0,\
    \ len - rotations)\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0l01ec84.scala:16:27\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m    \t\e[33melse\e[0m str.substring(len\
    \ - rotations, len) + str.substring(\e[31m0\e[0m, len - rotations)\n\e[31m\e[31m\
    \   |\e[0m    \t                   ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \t\
    \                   Found:    Long\n\e[31m   |\e[0m    \t                   Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0l01ec84.scala:16:68\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m    \t\e[33melse\e[0m str.substring(len\
    \ - rotations, len) + str.substring(\e[31m0\e[0m, len - rotations)\n\e[31m\e[31m\
    \   |\e[0m    \t                                                            ^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                         \
    \ Found:    Long\n\e[31m   |\e[0m                                            \
    \              Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028773
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val str = x.toString\n\
    \        val n = str.length\n        if (shift > n) str.reverse\n        else\
    \ str.substring(n - shift.toInt) + str.substring(0, n - shift.toInt)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"\
    001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028773
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        def iter(x :\
    \ Long, shift : Long, numberDigits : Long) : String = {\n            if (shift\
    \ > numberDigits) return x.toString.reverse\n            val i = x / pow(10, numberDigits\
    \ - shift).toLong\n            val d = x % pow(10, numberDigits - shift).toLong\n\
    \            iter(d * pow(10, shift).toLong + i, shift, numberDigits)\n      \
    \  }\n        iter(x, shift, floor(log10(x)).toLong + 1)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n\
    \    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660028778
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val s = x.toString()\n\
    \        val n = s.length\n        (s.substring(n - shift.toInt, n) + s.substring(0,\
    \ n - shift.toInt)).reverse\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpppqu2qyw.scala:17)\n\tat Problem.main(tmpppqu2qyw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028773
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val n = x.toString.length\n\
    \        if (shift == n) return x.toString.reverse\n        if (shift == 0) return\
    \ x.toString\n        val ret = x.toString.reverse.substring(0, shift.toInt) +\
    \ x.toString.substring(0, n - shift.toInt)\n        return ret.reverse\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"\
    001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9jgk76bp.scala:19)\n\tat Problem.main(tmp9jgk76bp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028775
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val n = numberOfDigits(x)\n\
    \        val s = if (shift >= n) n else shift\n        val d = digits(x)\n   \
    \     val c = d.slice(n - s, n) ++ d.slice(0, n - s)\n        c.reverse.mkString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpx8c4ivg7.scala:12:16 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mn\e[0m = numberOfDigits(x)\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \            Not found: numberOfDigits\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpx8c4ivg7.scala:14:16 ------------------------\e[0m\e\
    [0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36md\e[0m = digits(x)\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^\e[0m\n\e[31m   |\e[0m                Not found:\
    \ digits\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028773
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val str = x.toString\n\
    \        val n = str.length\n        if (shift >= n) str.reverse\n        else\
    \ {\n            val (a, b) = str.splitAt(str.length - shift.toInt)\n        \
    \    (b + a)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_g56t8dx.scala:22)\n\tat Problem.main(tmp_g56t8dx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028779
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        // Modulo, see\
    \ http://stackoverflow.com/questions/386425/scala-what-is-the-modulus-function-for-long-integers\n\
    \        val count = x.toString.length\n        val mod = shift % count\n    \
    \    if (mod == 0) {\n            x.toString\n        } else {\n            val\
    \ result = (x.toString.substring(count - mod) + x.toString.substring(0, count\
    \ - mod))\n            result\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcaxdccmy.scala:18:47\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e\
    [36mresult\e[0m = (x.toString.substring(count - mod) + x.toString.substring(\e\
    [31m0\e[0m, count - mod))\n\e[31m\e[31m   |\e[0m                             \
    \                  ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                         \
    \                      Found:    Long\n\e[31m   |\e[0m                       \
    \                        Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpcaxdccmy.scala:18:86 --------------------\e[0m\e\
    [0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[36mresult\e[0m = (x.toString.substring(count\
    \ - mod) + x.toString.substring(\e[31m0\e[0m, count - mod))\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \            ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                               \
    \                           Found:    Long\n\e[31m   |\e[0m                  \
    \                                        Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660028779
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        if (shift ==\
    \ 0) x.toString\n        else {\n            val digits = x.toString.length\n\
    \            val shiftd = if (shift > digits) shift % digits else shift\n    \
    \        val shifted = if (shiftd == digits) x else (x / pow(10, shiftd)).toLong\n\
    \            val left = shifted % 10\n            val right = (shifted - left)\
    \ / 10\n            (left.toString + right.toString).reverse\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"\
    001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgv0lv30i.scala:23)\n\tat Problem.main(tmpgv0lv30i.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028780
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n    \tval digits = x.toString.map(_.asDigit)\n\
    \    \tval size = digits.size\n    \tval shiftDigits = digits.slice(size - shift.toInt,\
    \ size)\n    \tval remainderDigits = digits.slice(0, size - shift.toInt)\n   \
    \ \treturn (shiftDigits ++ remainderDigits).mkString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n\
    \    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbhv92fxy.scala:21)\n\tat Problem.main(tmpbhv92fxy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028781
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        if (shift >=\
    \ x.toString.length) return x.toString.reverse\n        val z = x.toString.dropRight(shift.toInt)\n\
    \        val y = x.toString.takeRight(shift.toInt)\n        y + z\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"\
    001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphexvum_r.scala:19)\n\tat Problem.main(tmphexvum_r.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028781
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val length =\
    \ x.toString.length\n        if (shift < length) {\n            val right = x\
    \ % pow(10, shift).toLong\n            (right.toString + x.toString.take((length\
    \ - shift).toInt)).toString\n        } else {\n            x.toString.reverse\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3hnh1gmu.scala:21)\n\tat Problem.main(tmp3hnh1gmu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028782
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        var result =\
    \ \"\"\n        if (shift == 0) {\n            result = x.toString\n        }\
    \ else {\n            var s = x.toString\n            var n = s.length\n     \
    \       if (shift < n) {\n                result = s.substring(n - shift.toInt,\
    \ n) + s.substring(0, n - shift.toInt)\n            } else {\n               \
    \ result = s.reverse\n            }\n        }\n        return result\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"\
    001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxld0x1v1.scala:28)\n\tat Problem.main(tmpxld0x1v1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028782
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val s = x.toString\n\
    \        val n = s.length\n        if (shift > n) s.reverse\n        else s.substring(n\
    \ - shift.toInt) + s.substring(0, n - shift.toInt)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n\
    \    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028783
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        if (shift >\
    \ x.toString.length)\n            x.toString.reverse\n        else {\n       \
    \     val y = x.toString\n            y.substring(shift) + y.substring(0, shift)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9go2gap6.scala:16:24\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m            y.substring(shift)\
    \ + y.substring(\e[31m0\e[0m, shift)\n\e[31m\e[31m   |\e[0m                  \
    \      ^^^^^\e[0m\n\e[31m   |\e[0m                        Found:    (shift : Long)\n\
    \e[31m   |\e[0m                        Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp9go2gap6.scala:16:48 --------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            y.substring(shift) + y.substring(\e[31m0\e\
    [0m, shift)\n\e[31m\e[31m   |\e[0m                                           \
    \     ^^^^^\e[0m\n\e[31m   |\e[0m                                            \
    \    Found:    (shift : Long)\n\e[31m   |\e[0m                               \
    \                 Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028782
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n      if (shift > x.toString.length)\n\
    \        x.toString.reverse\n      else {\n        val (a, b) = x.toString.splitAt(x.toString.length\
    \ - shift.toInt)\n        b + a\n      }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028783
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val s = x.toString\n\
    \        val n = s.length\n        if (shift >= n) s.reverse\n        else s.substring(n\
    \ - shift.toInt) + s.substring(0, n - shift.toInt)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n\
    \    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe4zztwie.scala:19)\n\tat Problem.main(tmpe4zztwie.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028783
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val s = x.toString\n\
    \        val k = s.length\n        val t = if (shift > k) s.reverse else s.drop(shift.toInt)\
    \ + s.take(shift.toInt)\n        t\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpscllgv1n.scala:18)\n\tat Problem.main(tmpscllgv1n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028783
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val chars =\
    \ x.toString.toList\n        if (shift > chars.length) {\n            return chars.reverse.mkString\n\
    \        }\n        else {\n            return (chars.takeRight(shift.toInt) ++\
    \ chars.take(chars.length - shift.toInt)).mkString\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"\
    001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028783
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.toList\n        //println(\"digits: \" + digits)\n        val shiftList\
    \ = List.range(0, digits.length) map (x => (x + shift) % digits.length)\n    \
    \    //println(\"shiftList: \" + shiftList)\n        val shiftedDigits = (shiftList\
    \ map (x => digits(x))).mkString\n        //println(\"shiftedDigits: \" + shiftedDigits)\n\
    \        shiftedDigits\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgcfttr9m.scala:16:56\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mshiftedDigits\e\
    [0m = (shiftList map (\e[36mx\e[0m => digits(x))).mkString\n\e[31m\e[31m   |\e\
    [0m                                                        ^\e[0m\n\e[31m   |\e\
    [0m                                                    Found:    (x : Long)\n\e\
    [31m   |\e[0m                                                    Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028783
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val d = log10(x).toInt\
    \ + 1\n        val s = if (shift > d) {\n            val ds = shift - d\n    \
    \        val ret = new StringBuilder(d)\n            for (i <- (0 until d)) {\n\
    \                ret(i) = ('0' + x.toString()((i + ds) % d).toInt).toChar\n  \
    \          }\n            ret.toString()\n        } else {\n            val ret\
    \ = new StringBuilder(d)\n            for (i <- (0 until d)) {\n             \
    \   ret(i) = ('0' + x.toString()((i + shift) % d).toInt).toChar\n            }\n\
    \            ret.toString()\n        }\n        s\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpo7x0mtkt.scala:17:45\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m                ret(i) = (\e\
    [31m'0'\e[0m + x.toString()((i + ds) % d).toInt).toChar\n\e[31m\e[31m   |\e[0m\
    \                                             ^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                             Found:    Long\n\e[31m   |\e[0m\
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpo7x0mtkt.scala:23:45 --------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                ret(i) = (\e[31m'0'\e[0m + x.toString()((i\
    \ + shift) % d).toInt).toChar\n\e[31m\e[31m   |\e[0m                         \
    \                    ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \                          Found:    Long\n\e[31m   |\e[0m                   \
    \                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028784
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        if (shift ==\
    \ 0) {\n            x.toString\n        } else {\n            val numDigits =\
    \ x.toString.length\n            val shiftRight = if (shift >= numDigits) shift\
    \ % numDigits else shift\n            val shiftLeft = numDigits - shiftRight\n\
    \            val (left, right) = (x / pow(10, shiftLeft), x % pow(10, shiftLeft))\n\
    \            (right.toLong * pow(10, shiftRight).toLong + left).toString\n   \
    \     }\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppb_jb71g.scala:23)\n\tat Problem.main(tmppb_jb71g.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028783
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val s = x.toString\n\
    \        val d = s.length\n        val n = if (shift < d) d - shift else shift\
    \ % d\n        s.takeRight(n) + s.dropRight(n)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpe1r30sk7.scala:15:20\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        s.takeRight(n) + s.dropRight(n)\n\
    \e[31m\e[31m   |\e[0m                    ^\e[0m\n\e[31m   |\e[0m             \
    \       Found:    (n : Long)\n\e[31m   |\e[0m                    Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpe1r30sk7.scala:15:37\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        s.takeRight(n) + s.dropRight(n)\n\
    \e[31m\e[31m   |\e[0m                                     ^\e[0m\n\e[31m   |\e\
    [0m                                     Found:    (n : Long)\n\e[31m   |\e[0m\
    \                                     Required: Int\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660028783
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        // Find the\
    \ number of digits in the integer\n        var digits = 0\n        var num = x\n\
    \        while (num > 0) {\n            digits += 1\n            num /= 10\n \
    \       }\n        // If shift is greater than the number of digits, return the\
    \ reversed digits of x\n        if (shift >= digits) return (x.toString.reverse)\n\
    \        // Otherwise shift right by shift\n        return ((x % pow(10, shift)).toLong.toString\
    \ + (x / pow(10, shift)).toLong.toString)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpr1pr21ww.scala:25)\n\tat Problem.main(tmpr1pr21ww.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028784
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val numString\
    \ = x.toString\n        val numLen = numString.length\n        val shiftMod =\
    \ shift % numLen\n        if (shiftMod == 0) return numString\n        if (shiftMod\
    \ == numLen) return numString.reverse\n        if (shiftMod < numLen / 2) {\n\
    \            return numString.substring(shiftMod) + numString.substring(0, shiftMod)\n\
    \        }\n        return numString.substring(numLen - shiftMod) + numString.substring(0,\
    \ numLen - shiftMod)\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpx0g78wg8.scala:18:39\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m            \e[33mreturn\e[0m\
    \ numString.substring(shiftMod) + numString.substring(\e[31m0\e[0m, shiftMod)\n\
    \e[31m\e[31m   |\e[0m                                       ^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                       Found:    (shiftMod : Long)\n\
    \e[31m   |\e[0m                                       Required: Int\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpx0g78wg8.scala:18:74 --------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mreturn\e[0m numString.substring(shiftMod)\
    \ + numString.substring(\e[31m0\e[0m, shiftMod)\n\e[31m\e[31m   |\e[0m       \
    \                                                                   ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                             Found:    (shiftMod\
    \ : Long)\n\e[31m   |\e[0m                                             Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpx0g78wg8.scala:20:35\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mreturn\e[0m numString.substring(numLen\
    \ - shiftMod) + numString.substring(\e[31m0\e[0m, numLen - shiftMod)\n\e[31m\e\
    [31m   |\e[0m                                   ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                   Found:    Long\n\e[31m   |\e[0m \
    \                                  Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpx0g78wg8.scala:20:79 --------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mreturn\e[0m numString.substring(numLen\
    \ - shiftMod) + numString.substring(\e[31m0\e[0m, numLen - shiftMod)\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \               ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \                                    Found:    Long\n\e[31m   |\e[0m   "
  stdout: ''
  timestamp: 1660028784
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        if (shift ==\
    \ 0) x.toString\n        else {\n            val digits = x.toString.map(digit\
    \ => digit).toList\n            val n = digits.length\n            val res = (digits.takeRight(shift.toInt)\
    \ ::: digits.take(n - shift.toInt)).mkString\n            res\n        }\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"\
    001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8zkerk2w.scala:23)\n\tat Problem.main(tmp8zkerk2w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028784
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n      if (shift == 0)\n\
    \        x.toString\n      else {\n        val numDigits = log10(x).toInt + 1\n\
    \        val digits = x.toString.map(_.asDigit)\n        val shiftDigits = digits.dropRight(shift.toInt\
    \ % numDigits)\n        val shiftedDigits = digits.drop(shift.toInt % numDigits)\
    \ ++ shiftDigits\n        shiftedDigits.mkString\n      }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n\
    \    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt40k2r4i.scala:23)\n\tat Problem.main(tmpt40k2r4i.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028785
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val str = x.toString\n\
    \        if (shift >= str.length) str.reverse\n        else str.substring(str.length\
    \ - shift.toInt) + str.substring(0, str.length - shift.toInt)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"\
    001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfhz4e0d0.scala:18)\n\tat Problem.main(tmpfhz4e0d0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028733
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        if (shift >\
    \ x.toString.length) {\n            return new StringBuilder(x.toString).reverse.toString\n\
    \        }\n        val n = x.toString.length\n        val y = x.toString.substring(n\
    \ - shift.toInt) + x.toString.substring(0, n - shift.toInt)\n        return y\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028785
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        if (shift ==\
    \ 0)\n            x.toString\n        else if (shift > x.toString.length)\n  \
    \          x.toString.reverse\n        else\n            x.toString.dropRight(shift.toInt)\
    \ + x.toString.takeRight(shift.toInt)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5q1_0ax_.scala:20)\n\tat Problem.main(tmp5q1_0ax_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028788
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        if (shift ==\
    \ 0) return (x + \"\")\n        val s = (x + \"\")\n        if (shift > s.length)\
    \ {\n            (s.reverse)\n        } else {\n            s.substring(s.length\
    \ - shift.toInt, s.length) + s.substring(0, s.length - shift.toInt)\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028788
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n      val digits = x.toString.toList\n\
    \      if (shift >= digits.length) digits.reverse.mkString(\"\")\n      else {\n\
    \        val (firstDigits, lastDigits) = digits.splitAt(digits.length - shift.toInt)\n\
    \        (lastDigits ++ firstDigits).mkString(\"\")\n      }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n\
    \    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpk40ys2xk.scala:21)\n\tat Problem.main(tmpk40ys2xk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028789
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        var result =\
    \ \"\"\n        var str = x.toString\n        var reversed = str.reverse\n   \
    \     val d = min(shift, str.length)\n        var (left, right) = reversed.splitAt(d)\n\
    \        var s = left.reverse + right.reverse\n        s\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n\
    \    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzl_ixhgu.scala:16:45\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mvar\e[0m (left,\
    \ right) = reversed.splitAt(d)\n\e[31m\e[31m   |\e[0m                        \
    \                     ^\e[0m\n\e[31m   |\e[0m                                \
    \             Found:    (d : Long)\n\e[31m   |\e[0m                          \
    \                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028788
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val numDigits\
    \ = (1 + log10(x)).toInt\n        val shiftActual = if (shift >= numDigits) numDigits\
    \ - 1 else shift.toInt\n        val remainder = (x % (pow(10, shiftActual).toLong)).toInt\n\
    \        val rest = (x / (pow(10, shiftActual).toLong)).toInt\n        val result\
    \ = (remainder * pow(10, numDigits - shiftActual).toLong) + rest\n        result.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkij62thd.scala:20)\n\tat Problem.main(tmpkij62thd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028789
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val length =\
    \ x.toString.length\n        if (shift > length) {\n            val s = x.toString.reverse\n\
    \            return s\n        }\n        val s = x.toString\n        val right\
    \ = s.substring(length - shift.toInt, length)\n        val left = s.substring(0,\
    \ length - shift.toInt)\n        return right + left\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n\
    \    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028789
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        if (shift ==\
    \ 0) return x.toString\n        else {\n            var result = \"\";\n     \
    \       val length = x.toString.length;\n            val start = length - (shift\
    \ % length);\n            for (i <- start until length) result += x.toString.charAt(i);\n\
    \            for (i <- 0 until start) result += x.toString.charAt(i);\n      \
    \      return result;\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp6pxf6d1g.scala:17:49 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mfor\e[0m (i <- start until length)\
    \ result += x.toString.charAt(i);\n\e[31m\e[31m   |\e[0m                     \
    \                     ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not\
    \ a member of String - did you mean String.!=?\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp6pxf6d1g.scala:17:70 --------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m            \e[33mfor\e[0m (i <- start until length) result += x.toString.charAt(i);\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \              ^\e[0m\n\e[31m   |\e[0m                                       \
    \             Found:    (i : Long)\n\e[31m   |\e[0m                          \
    \                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp6pxf6d1g.scala:18:30 --------------------\e[0m\e\
    [0m\n\e[31m18 |\e[0m            \e[33mfor\e[0m (i <- \e[31m0\e[0m until start)\
    \ result += x.toString.charAt(i);\n\e[31m\e[31m   |\e[0m                     \
    \         ^^^^^\e[0m\n\e[31m   |\e[0m                              Found:    (start\
    \ : Long)\n\e[31m   |\e[0m                              Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660028790
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        if (shift >=\
    \ numDigits(x)) return numToStr(x).reverse\n        numToStr(x).substring(numDigits(x)\
    \ - shift.toInt) + numToStr(x).substring(0, numDigits(x) - shift.toInt)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"\
    001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplj4fsla8.scala:12:21 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mif\e[0m (shift >= numDigits(x)) \e[33mreturn\e\
    [0m numToStr(x).reverse\n\e[31m\e[31m   |\e[0m                     ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: numDigits\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmplj4fsla8.scala:12:42 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mif\e[0m (shift >= numDigits(x)) \e[33mreturn\e\
    [0m numToStr(x).reverse\n\e[31m\e[31m   |\e[0m                               \
    \           ^^^^^^^^\e[0m\n\e[31m   |\e[0m                                   \
    \       Not found: numToStr\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmplj4fsla8.scala:13:8 -------------------------\e[0m\e[0m\n\e[31m13 |\e\
    [0m        numToStr(x).substring(numDigits(x) - shift.toInt) + numToStr(x).substring(\e\
    [31m0\e[0m, numDigits(x) - shift.toInt)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Not found: numToStr\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660028787
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        if (shift >=\
    \ x.toString.length) {\n            val str = x.toString.reverse\n           \
    \ if (str.charAt(0) == '0') {\n                str.drop(1)\n            } else\
    \ {\n                str\n            }\n        } else {\n            val str\
    \ = x.toString\n            val a = str.drop(str.length - shift.toInt)\n     \
    \       val b = str.take(str.length - shift.toInt)\n            a + b\n      \
    \  }\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpebv_lkv3.scala:28)\n\tat Problem.main(tmpebv_lkv3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028790
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val n = x.toString.length\n\
    \        val s = shift % n\n        val a = x.toString.takeRight(s)\n        val\
    \ b = x.toString.dropRight(s)\n        val y = a + b\n        y\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"\
    001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfkqv7dcd.scala:14:37\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36ma\e\
    [0m = x.toString.takeRight(s)\n\e[31m\e[31m   |\e[0m                         \
    \            ^\e[0m\n\e[31m   |\e[0m                                     Found:\
    \    (s : Long)\n\e[31m   |\e[0m                                     Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfkqv7dcd.scala:15:37\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mb\e\
    [0m = x.toString.dropRight(s)\n\e[31m\e[31m   |\e[0m                         \
    \            ^\e[0m\n\e[31m   |\e[0m                                     Found:\
    \    (s : Long)\n\e[31m   |\e[0m                                     Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028790
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        def circularShiftR(x\
    \ : Long, shift : Long, count : Long) : String = {\n            if (count == shift)\
    \ x.toString\n            else circularShiftR((x % 10) * pow(10, count).toLong\
    \ + x / 10, shift, count + 1)\n        }\n        val digits = floor(log10(x)).toLong\
    \ + 1\n        val shiftDigits = if (shift >= digits) digits - 1 else shift\n\
    \        circularShiftR(x, shiftDigits, 0)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqfd2f35o.scala:21)\n\tat Problem.main(tmpqfd2f35o.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028790
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString.length\n        val shifted = if (shift >= digits) {\n          \
    \  x.toString.reverse\n        } else {\n            val end = x.toString.substring(0,\
    \ shift.toInt)\n            val begin = x.toString.substring(shift.toInt)\n  \
    \          begin + end\n        }\n        shifted\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n\
    \    assert(circularShift((12l), (2l)).equals((\"12\")));\n    assert(circularShift((97l),\
    \ (8l)).equals((\"79\")));\n    assert(circularShift((12l), (1l)).equals((\"21\"\
    )));\n    assert(circularShift((11l), (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcj8qhojd.scala:23)\n\tat Problem.main(tmpcj8qhojd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028790
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val digits =\
    \ x.toString\n        val l = digits.length\n        val s = if (shift > l) l\
    \ else (shift % l).toInt\n        if (s == 0) digits else digits.drop(s) + digits.take(s)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnewu5clu.scala:18)\n\tat Problem.main(tmpnewu5clu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028790
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        var digits =\
    \ (x.toString).map(x => x.toString).toList\n        val size = digits.size\n \
    \       if (shift > size) return reverse(digits)\n        else return (digits.drop(size\
    \ - shift.toInt) ::: digits.take(size - shift.toInt)).foldLeft(\"\")((x, y) =>\
    \ x + y)\n    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfz3uzghj.scala:14:33 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mif\e[0m (shift > size) \e[33mreturn\e[0m\
    \ reverse(digits)\n\e[31m\e[31m   |\e[0m                                 ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Not found: reverse\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660028789
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        var len = x.toString.length\n\
    \        if (shift > len) return (x.toString.reverse)\n        x.toString.substring(shift.toInt,\
    \ len) + x.toString.substring(0, shift.toInt)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(circularShift((100l), (2l)).equals((\"001\")));\n    assert(circularShift((12l),\
    \ (2l)).equals((\"12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\"\
    )));\n    assert(circularShift((12l), (1l)).equals((\"21\")));\n    assert(circularShift((11l),\
    \ (101l)).equals((\"11\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprjkg9g8d.scala:17)\n\tat Problem.main(tmprjkg9g8d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028790
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    // and return the result as a string.\n    // If shift > number\
    \ of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n\
    \    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n   \
    \ def circularShift(x : Long, shift : Long) : String = {\n        val s = x.toString\n\
    \        if (shift == 0l) {\n            s\n        } else if (shift > s.length)\
    \ {\n            s.reverse\n        } else {\n            (s.slice(s.length -\
    \ shift.toInt, s.length) + s.slice(0, s.length - shift.toInt))\n        }\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
    \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"\
    12\")));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
    \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"\
    11\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028790
