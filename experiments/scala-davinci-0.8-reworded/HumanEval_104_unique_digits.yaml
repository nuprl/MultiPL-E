name: HumanEval_104_unique_digits
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a list of positive integers x. return a sorted list of all \n    //\
  \ elements that hasn't any even digit.\n    // Note: Returned list should be sorted\
  \ in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
  \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
  \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong,\
  \ 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x : List[Long]) : List[Long]\
  \ = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
  \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
  \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
  \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
  \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
  \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
  \ 135l.toLong))));\n    }\n\n}\n"
completions: ['        return x.sortWith(_ < _).filter(i => i.toString.exists(p =>
    "02468".contains(p)) == false)', "        // Fill up this function body\n    \
    \    // You can add another function as well, if required\n        def a(x : Long)\
    \ : Boolean = {\n            if (x / 10 == 0) {\n                true\n      \
    \      } else {\n                if (x % 2 == 0) {\n                    false\n\
    \                } else {\n                    a(x / 10)\n                }\n\
    \            }\n        }\n        x.filter(a).sorted", "        def hasNoEvenDigit(n\
    \ : Long) : Boolean = {\n            if (n == 0) return true\n            if (n\
    \ % 2 == 0) return false\n            hasNoEvenDigit(n / 10)\n        }\n    \
    \    x.filter(hasNoEvenDigit).sorted", '      ???', "        // Fill up this function\
    \ body\n        // You can add another function as well, if required\n       \
    \ var result:List[Long] = List();\n        for(v <- x) {\n            if(isUniqueDigits(v))\
    \ result = result :+ v;\n        }\n        return result.sorted;", '        x.filter(x
    => (x.toString.count(x => x.isDigit && x.asDigit % 2 == 0) == 0)).sortWith(_ <
    _)', "        val result = new ListBuffer[Long]\n        x.foreach(xx => {\n \
    \           val str = xx.toString\n            if (!str.contains(\"2\") && !str.contains(\"\
    4\") && !str.contains(\"6\") && !str.contains(\"8\") && !str.contains(\"0\"))\
    \ result += xx\n        })\n        result.toList.sorted", "        val f = (i\
    \ : Long) => i.toString.map(_.asDigit % 2 == 0).foldLeft(false)(_ || _)\n    \
    \    val l = x.filter(!f(_))\n        l.sortWith(_ < _)", "        def uniqueDigitsHelper(s\
    \ : List[Long], x : List[Long]) : List[Long] = {\n            if (x.isEmpty) {\n\
    \                s\n            } else {\n                if (!x.head.toString.contains(\"\
    2\") && !x.head.toString.contains(\"4\") && !x.head.toString.contains(\"6\") &&\
    \ !x.head.toString.contains(\"8\")) {\n                    uniqueDigitsHelper(s\
    \ :+ x.head, x.tail)\n                } else {\n                    uniqueDigitsHelper(s,\
    \ x.tail)\n                }\n            }\n        }\n        uniqueDigitsHelper(List[Long](),\
    \ x).sorted", "        // Fill up this function body\n        // You can add another\
    \ function as well, if required\n        var l = new ListBuffer[Long]()\n    \
    \    x.foreach(i => if (check(i)) l.append(i))\n        l.toList.sorted", "  \
    \      var l : List[Long] = Nil\n        for (i <- x) {\n            var flag\
    \ = true\n            var temp = i\n            while (temp > 0) {\n         \
    \       var d = temp % 10\n                if (d % 2 == 0) {\n               \
    \     flag = false\n                    temp = 0\n                }\n        \
    \        temp /= 10\n            }\n            if (flag) l = i :: l\n       \
    \ }\n        return l.sorted", "        val hash = HashMap[Long, Int]()\n    \
    \    val _x = x.sorted\n        for (i <- _x) {\n            val s = i.toString\n\
    \            var flag = false\n            for (j <- s) {\n                if\
    \ (j % 2 == 0) {\n                    flag = true\n                    break\n\
    \                }\n            }\n            if (!flag) hash(i) = 1\n      \
    \  }\n        hash.keySet.toList.sorted", "        def hasEvenDigit(n : Long)\
    \ : Boolean = n match {\n            case n if n < 10 => n % 2 == 0\n        \
    \    case n => (n % 10) % 2 == 0 || hasEvenDigit(n / 10)\n        }\n        x.filter(n\
    \ => !hasEvenDigit(n)).sorted", "        val b = ListBuffer[Long]()\n        for\
    \ (a <- x) {\n            if (a < 10) b += a\n            else {\n           \
    \     var b1 = a\n                var t = false\n                while (b1 > 0)\
    \ {\n                    if (b1 % 2 == 0) {\n                        t = true\n\
    \                        b1 = 0\n                    }\n                    else\
    \ b1 /= 10\n                }\n                if (!t) b += a\n            }\n\
    \        }\n        b.toList.sorted", "        val allDigits = \"0123456789\"\n\
    \        val m = x.map(i => allDigits.map(j => i.toString.count(_ == j.toChar))).\n\
    \            map(i => (i(0) % 2, i(1) % 2, i(2) % 2, i(3) % 2, i(4) % 2, i(5)\
    \ % 2, i(6) % 2, i(7) % 2, i(8) % 2, i(9) % 2)).\n            map(i => i._1 +\
    \ i._2 + i._3 + i._4 + i._5 + i._6 + i._7 + i._8 + i._9 + i._10)\n        (x,\
    \ m).zipped.filter(i => i._2 % 2 == 1)._1.sorted", '        null', "        def\
    \ hasEvenDigit(x : Long) : Boolean = {\n            def loop(x : Long) : Boolean\
    \ = {\n                if (x == 0) false\n                else {\n           \
    \         val digit = x % 10\n                    if (digit % 2 == 0) true\n \
    \                   else loop(x / 10)\n                }\n            }\n    \
    \        loop(x)\n        }\n        x.filter(hasEvenDigit(_) == false).sorted",
  "        // Fill up this function body\n        // You can add another function\
    \ as well, if required\n        x.filter(_.toString.forall(_.asDigit % 2 != 0)).sorted",
  "    \tdef solve(xs : List[Long], answer : List[Long]) : List[Long] = {\n    \t\t\
    xs match {\n    \t\t\tcase Nil => answer\n    \t\t\tcase x :: Nil => if (hasEvenDigit(x))\
    \ answer else x :: answer\n    \t\t\tcase x :: ys => solve(ys, if (hasEvenDigit(x))\
    \ answer else x :: answer)\n    \t\t}\n    \t}\n    \tdef hasEvenDigit(x : Long)\
    \ : Boolean = {\n    \t\tif (x == 0) false\n    \t\telse if (x % 2 == 0) true\n\
    \    \t\telse hasEvenDigit(x / 10)\n    \t}\n    \tsolve(x, List[Long]()).sortWith(_\
    \ < _)", "        def isUnique(x : Long) : Boolean = {\n            x.toString.forall(c\
    \ => c == '1' || c == '3' || c == '5' || c == '7' || c == '9')\n        }\n  \
    \      x.filter(isUnique).sorted", "        // Fill up this function body\n  \
    \      // You can add another function as well, if required\n        val result\
    \ = ListBuffer[Long]()\n        x.foreach(num => {\n            if (num.toString.forall(x\
    \ => (x.toString.toInt % 2) != 0)) {\n                result += num\n        \
    \    }\n        })\n        result.toList.sorted", "        // Fill up this function\
    \ body\n        // You can add another function as well, if required\n       \
    \ val num = x.sorted\n        def isUnique(n: Long): Boolean = {\n           \
    \ var r = n\n            while (r > 0) {\n                val d = r % 10\n   \
    \             if (d % 2 == 0) return false\n                r = r / 10\n     \
    \       }\n            true\n        }\n        num.filter(isUnique)", "     \
    \   // Fill up this function body\n        // You can add another function as\
    \ well, if required\n        null", "        def isOddDigit(y : Long) : Boolean\
    \ = {\n            y match {\n                case 0l => false\n             \
    \   case 2l => false\n                case 4l => false\n                case 6l\
    \ => false\n                case 8l => false\n                case _ => true\n\
    \            }\n        }\n        def isOddDigits(y : Long) : Boolean = {\n \
    \           if (y > 0) {\n                if (isOddDigit(y % 10)) isOddDigits(y\
    \ / 10)\n                else false\n            }\n            else true\n  \
    \      }\n        x.sortWith(_ < _).filter(isOddDigits(_))", "        // Fill\
    \ up this function body\n        // You can add another function as well, if required\n\
    \        var result = List[Long]()\n        for (i <- x) {\n            var status\
    \ = false\n            var num = i\n            while (num > 0) {\n          \
    \      if (num % 10 % 2 == 0) {\n                    status = true\n         \
    \           num = 0\n                }\n                else num /= 10\n     \
    \       }\n            if (!status) result = result :+ i\n        }\n        result.sorted",
  '        x.filter(_.toString.forall(_.asDigit % 2 != 0)).sorted', "        val result\
    \ = ListBuffer[Long]()\n        for (i <- x) {\n            if (i.toString.map(_.asDigit).forall(j\
    \ => j % 2 != 0)) result += i\n        }\n        result.sorted.toList", "\t\t\
    x.filter(y => y.toString.forall(!_.isDigit || _.asDigit % 2 != 0)).sortWith(_\
    \ < _)", '        x.filter(n => !n.toString.exists(i => "02468".contains(i))).sorted',
  "        def hasEvenDigit(num : Long) : Boolean = {\n            var n = num\n \
    \           while (n > 0) {\n                if (n % 2 == 0) return true\n   \
    \             n /= 10\n            }\n            return false\n        }\n  \
    \      x.filter(!hasEvenDigit(_)).sorted", "        // Fill up this function body\n\
    \        // `x` is the list of integers to process\n        // You may assume\
    \ that all the integers in the list is positive\n        var res = List[Long]()\n\
    \        for (v <- x) {\n            if (v < 10l) res = res :+ v\n           \
    \ else {\n                var flag = true\n                var m = v\n       \
    \         while (m > 0) {\n                    if (m % 2 == 0) {\n           \
    \             flag = false\n                        m = 0\n                  \
    \  }\n                    else m /= 10\n                }\n                if\
    \ (flag) res = res :+ v\n            }\n        }\n        res.sorted", "    \
    \    var temp = new ListBuffer[Long]()\n        x.foreach(x => {\n           \
    \ var okay = true\n            x.toString.foreach(digit => {\n               \
    \ if (digit % 2 == 0) {\n                    okay = false\n                }\n\
    \            })\n            if (okay) {\n                temp += x\n        \
    \    }\n        })\n        return temp.toList.sorted", '        return x.filter(e
    => e.toString.forall(c => c.asDigit % 2 != 0)).sorted', "        def isEven(n\
    \ : Int) : Boolean = {\n            if (n % 2 == 0) true else false\n        }\n\
    \        def containsEven(n : Long) : Boolean = {\n            n.toString.split(\"\
    \").filter(s => isEven(s.toInt)).length == 0\n        }\n        x.filter(s =>\
    \ containsEven(s)).sorted", '        x.filter(i => (i.toString.contains("2") ||
    i.toString.contains("4") || i.toString.contains("6") || i.toString.contains("8")
    || i.toString.contains("0")) == false).sorted', "    \tx.filter(x => x.toString.forall(x\
    \ => x % 2 != 0)).sorted", "        var q = new TreeSet[Long]\n        for (item\
    \ <- x) {\n            if (item.toString.forall(_.asDigit % 2 != 0)) q += item\n\
    \        }\n        return q.toList", "        // Fill up this function body\n\
    \        // You can add another function as well, if required\n        var temp\
    \ : List[Long] = List()\n        for (i <- x) {\n            var flag = true\n\
    \            while (i != 0) {\n                if (i % 10 % 2 == 0) flag = false\n\
    \                i /= 10\n            }\n            if (flag) temp = temp :+\
    \ i\n        }\n        temp.sorted", "        def isEven(x : Long) : Boolean\
    \ = {\n            var y = x\n            var z = y % 10\n            while (y\
    \ > 0) {\n                if (z % 2 == 0) return true\n                y = y /\
    \ 10\n                z = y % 10\n            }\n            return false\n  \
    \      }\n        return x.filter(!isEven(_)).sorted", "        var r = List[Long]()\n\
    \        for (i <- x) {\n            var b = true\n            var t = i\n   \
    \         while (t > 0) {\n                if (t % 2 == 0) {\n               \
    \     b = false\n                    t = 0\n                }\n              \
    \  t /= 10\n            }\n            if (b) r = r :+ i\n        }\n        r.sorted",
  "        x.filter(z => {\n            !((z + \"\").exists(y => y.asDigit % 2 ==\
    \ 0))\n        }).sorted", "        // Fill up this function body\n        //\
    \ You can add another function as well, if required\n        var result:List[Long]\
    \ = Nil\n        x.foreach(n => {\n            var m = n\n            var noEvenDigit\
    \ = true\n            while (m > 0) {\n                if (m % 2 == 0) {\n   \
    \                 noEvenDigit = false\n                    m = 0\n           \
    \     }\n                else {\n                    m = m / 10\n            \
    \    }\n            }\n            if (noEvenDigit) {\n                result\
    \ = n :: result\n            }\n        })\n        result.sorted", "        var\
    \ res = List[Long]()\n        for (i <- x) {\n            var isEven = false\n\
    \            var temp = i\n            while (temp > 0) {\n                var\
    \ digit = temp % 10\n                if (digit % 2 == 0) {\n                 \
    \   isEven = true\n                    temp = 0\n                }\n         \
    \       temp /= 10\n            }\n            if (!isEven) res = i :: res\n \
    \       }\n        res.sorted", "    \tval evenDigits = Set('0', '2', '4', '6',\
    \ '8')\n    \tx.filter((num : Long) => !num.toString.map(_.toChar).exists(evenDigits.contains(_))).sorted",
  "        def digits(l : Long) : List[Int] = {\n            if (l == 0) List()\n\
    \            else digits(l / 10) :+ (l % 10).toInt\n        }\n        x.filter(l\
    \ => digits(l).filter(i => i % 2 == 0).isEmpty).sorted", "        val digits =\
    \ x.map(n => n.toString.map(c => c.asDigit).toList)\n        val even = digits.filter(x\
    \ => x.map(n => n%2==0).reduceLeft(_||_))\n        x.filter(n => !even.contains(n.toString.map(c\
    \ => c.asDigit).toList))", "        def check(n : Long) : Boolean = {\n      \
    \      def loop(x : Long) : Boolean = {\n                if (x == 0) true\n  \
    \              else {\n                    val r = x % 10\n                  \
    \  if (r % 2 == 0) false\n                    else loop(x / 10)\n            \
    \    }\n            }\n            loop(n)\n        }\n        x.filter(check(_)).sorted",
  "        // Fill up this function body\n        // You can add another function\
    \ as well, if required\n        var output = List[Long]()\n        for (i <- x)\
    \ {\n          if (uniqueDigitsHelper(i.toString)) {\n            output = output\
    \ :+ i\n          }\n        }\n        return output.sorted", '        for(xx
    <- x; if(!(xx.toString.contains("2") || xx.toString.contains("4") || xx.toString.contains("6")
    || xx.toString.contains("8")))) yield xx', '        x.filter(x => x.toString.split("").filter(x
    => x != "0" && x != "2" && x != "4" && x != "6" && x != "8").length == x.toString.length).sorted',
  "        // Fill up this function body\n        // You can add another function\
    \ as well, if required\n        def helper(m : List[Long], n : List[Long]) : List[Long]\
    \ = {\n            if (m.isEmpty) n\n            else if (!m.head.toString.exists(_.asDigit\
    \ % 2 == 0)) helper(m.tail, n :+ m.head)\n            else helper(m.tail, n)\n\
    \        }\n        x.sortWith(_ < _)\n        x.sortWith(_ < _)\n        helper(x,\
    \ List[Long]())", "        // Fill up this function body\n        // You can add\
    \ another function as well, if required", '        ???', "        x.filter((x\
    \ : Long) => x.toString.toSet.filter(x => x.isDigit && (x - '0') % 2 == 0).size\
    \ == 0).sorted", "        if (x.isEmpty) return x\n        if (x.head.toString.count(c\
    \ => (c - '0') % 2 == 0) > 0) return uniqueDigits(x.tail)\n        return x.head\
    \ :: uniqueDigits(x.tail)", "      x.sorted.filter(i => i.toString.forall(i =>\
    \ i != '0' && i != '2' && i != '4' && i != '6' && i != '8'))", "        // Fill\
    \ up this function body\n        // You can add another function as well, if required\n\
    \        x", "        x.filter(t => t.toString.toList.filter(c => (c != '0' &&\
    \ c != '2' && c != '4' && c != '6' && c != '8')).length == t.toString.length).sorted",
  "        // Fill up this function body\n        // You can add another function\
    \ as well, if required\n        x.filter(y => y.toString.filter(z => z.isDigit\
    \ && z.asDigit % 2 == 0).isEmpty).sorted", '        x.filter(i => !i.toString.exists(_.isDigit)).sorted',
  "        val y = x.sortWith((x, y) => x < y)\n        val z = new ListBuffer[Long]\n\
    \        var i = 0\n        for (i <- 0 until y.length) {\n            var hasEven\
    \ = false\n            for (digit <- y(i).toString) {\n                if (digit.asDigit\
    \ % 2 == 0) {\n                    hasEven = true\n                }\n       \
    \     }\n            if (!hasEven) {\n                z += y(i)\n            }\n\
    \        }\n        return z.toList", "        val x1 = x.filter(n => n.toString.map(y\
    \ => y.toString.toInt).filter(y => y % 2 == 0).length == 0)\n        x1.sortWith(_\
    \ < _)", "        var value: List[Long] = Nil\n        for (i <- x) {\n      \
    \      if (i.toString.split(\"\").exists(char => char.toInt % 2 == 0)) {}\n  \
    \          else value = value :+ i\n        }\n        value.sorted", "      \
    \  if (x.isEmpty) List[Long]()\n        else x.filter(num => (num % 2 != 0)).distinct.sorted",
  "        def div(x : Long, d : Long) : Long = {\n            x % d\n        }\n\
    \        def containsEvenDigit(x : Long) : Boolean = {\n            (div(x, 2)\
    \ == 0 || div(x, 4) == 0 || div(x, 6) == 0 || div(x, 8) == 0)\n        }\n   \
    \     if (x.isEmpty) {\n            return x\n        }\n        val x2 = x.filter(y\
    \ => !containsEvenDigit(y))\n        x2.sorted", '        x.filter(y => y.toString.forall(z
    => (z.toString.toInt % 2 != 0))).sorted', "        var result : List[Long] = Nil\n\
    \        for (y <- x) {\n            if (check(y)) {\n                result =\
    \ result :+ y\n            }\n        }\n        result.sorted", "        def\
    \ isUnique(num : Long) : Boolean = {\n            def helper(num : Long) : Boolean\
    \ = {\n                if (num == 0) true\n                else if (num % 2 ==\
    \ 0) false\n                else helper(num / 10)\n            }\n           \
    \ helper(num)\n        }\n        x.filter(isUnique).sorted", "      var result\
    \ : List[Long] = List();\n      for (i <- x) {\n        var hasEvenDigit : Boolean\
    \ = false;\n        var n : Long = i;\n        while(n > 0) {\n          if ((n\
    \ % 10) % 2 == 0) {\n            hasEvenDigit = true;\n            n = 0;\n  \
    \        }\n          n /= 10;\n        }\n        if (!hasEvenDigit) result =\
    \ result :+ i;\n      }\n      result.sorted;", "        // fill in here.\n  \
    \      return x.filter(n => !n.toString.exists(c => c == '2' || c == '4' || c\
    \ == '6' || c == '8' || c == '0')).sorted", "    \tval xs = for (n <- x; if (n.toString.filter(_\
    \ % 2 == 0).length == 0)) yield n\n    \txs.sorted", "        var list = List[Long]()\n\
    \        for (i <- x) {\n            if (i.toString.toCharArray.filter(y => y\
    \ % 2 == 0).length == 0) {\n                list = list :+ i\n            }\n\
    \        }\n        list.sorted", "        // Fill up this function body\n   \
    \     // You can add another function as well, if required\n        if (x.isEmpty)\
    \ Nil\n        else if (digitsHave(x.head)) uniqueDigits(x.tail)\n        else\
    \ x.head :: uniqueDigits(x.tail)", "        x.filter(digit => {\n            var\
    \ result = true\n            var index = 0\n            var value = digit\n  \
    \          while (value != 0) {\n                val temp = value % 10\n     \
    \           if (temp % 2 == 0) {\n                    result = false\n       \
    \             value = 0\n                }\n                else {\n         \
    \           value = value / 10\n                }\n            }\n           \
    \ result\n        }).sorted", "    \tx.filter(y => (y.toString.map(z => z.asDigit).forall(i\
    \ => (i % 2 == 1)))).sorted", "        var result = new ListBuffer[Long]()\n \
    \       for (num <- x) {\n            var isEvenDigitExist = false\n         \
    \   var digit = num\n            while (digit > 0) {\n                if ((digit\
    \ % 10) % 2 == 0) {\n                    isEvenDigitExist = true\n           \
    \         digit = 0\n                }\n                else digit /= 10\n   \
    \         }\n            if (!isEvenDigitExist) result += num\n        }\n   \
    \     result.toList.sorted", "        // Fill up this function body\n        //\
    \ You can add another function as well, if required\n        List()", "      \
    \  x.filter((i : Long) => (i.toString.filter((c : Char) => (c >= '0' && c <= '9'\
    \ && c % 2 == 1)).distinct.length == i.toString.filter((c : Char) => (c >= '0'\
    \ && c <= '9')).distinct.length)).sorted", "        var res = List[Long]()\n \
    \       for (i <- x) {\n            if (!i.toString.exists(x => x % 2 == 0)) res\
    \ = i :: res\n        }\n        res.sorted", '        x.filter(y => y.toString.forall(z
    => z.asDigit % 2 != 0)).sorted', '        return List()', '        return x.filter(i
    => (i.toString.exists(_.asDigit % 2 == 0) == false)).sorted', "        // This\
    \ is a solution without using tail recursion or mutable list\n        x.filter(i\
    \ => i.toString.forall(j => j.toString.toInt % 2 != 0)).sorted\n        // this\
    \ is a solution using tail recursion and mutable list\n        // var y = ListBuffer[Long]()\n\
    \        // x.foreach(i => if (i.toString.forall(j => j.toString.toInt % 2 !=\
    \ 0)) y += i)\n        // y.sorted.toList", "        val z = x.filter(a => (a.toString.map(_.asDigit).toSet\
    \ & Set(0, 2, 4, 6, 8)).isEmpty).sorted\n        return z", "        var xnew\
    \ = x.filter(a => ((a.toString.filter(b => ((b == '0') || (b == '2') || (b ==\
    \ '4') || (b == '6') || (b == '8')))).length) == 0)\n        xnew.sorted", '        x.filter(!_.toString.exists(_.isDigit)).sorted',
  "        def isUnique(n : Long) : Boolean = {\n            var res = true\n    \
    \        val a = n.toString.map(_.asDigit)\n            for (i <- 0 until a.length)\
    \ {\n                if (a(i) % 2 == 0) res = false\n            }\n         \
    \   res\n        }\n        var res = new ListBuffer[Long]\n        for (i <-\
    \ 0 until x.length) {\n            if (isUnique(x(i))) res += x(i)\n        }\n\
    \        res.toList.sorted", "        val evenDigits = x.flatMap(n => n.toString.toCharArray).filter(x\
    \ => \"02468\".contains(x)).distinct\n        x.filter(n => !evenDigits.exists(x\
    \ => n.toString.contains(x))).sorted", "        var evens = Set[Char]('0','2','4','6','8')\n\
    \        def hasEven(i : Long) : Boolean = {\n            var j = i\n        \
    \    while (j > 0) {\n                if (evens.contains((j % 10).toChar)) {\n\
    \                    return true\n                }\n                j /= 10\n\
    \            }\n            return false\n        }\n        var unique = new\
    \ ListBuffer[Long]\n        for (i <- x) {\n            if (!hasEven(i)) {\n \
    \               unique += i\n            }\n        }\n        unique.toList.sorted",
  "        def hasEvenDigit(n : Long) : Boolean = {\n            if (n <= 0) false\n\
    \            else {\n                val d = n % 10\n                if (d % 2\
    \ == 0) true\n                else hasEvenDigit(n / 10)\n            }\n     \
    \   }\n        x.filter(!hasEvenDigit(_)).sorted", "        // Fill up this function\
    \ body\n        // You can add another function as well, if required\n       \
    \ var list1 : List[Long] = List()\n        for(i <- x) {\n            var list2\
    \ : List[Long] = List()\n            var temp : Long = i\n            var count\
    \ : Int = 0\n            while(temp > 0) {\n                list2 = (temp % 10).toLong\
    \ :: list2\n                temp = temp / 10\n            }\n            var flag\
    \ : Boolean = true\n            for(j <- list2) {\n                if(j % 2 ==\
    \ 0) {\n                    flag = false\n                }\n            }\n \
    \           if(flag) {\n                list1 = i :: list1\n            }\n  \
    \      }\n        list1.sorted", "    \tx.filter((e) => e.toString.find((c) =>\
    \ c == '2' || c == '4' || c == '6' || c == '8' || c == '0') == None).sorted",
  "        def hasEvenDigit(n : Long) : Boolean = n == 0l || (n % 2 == 0 && hasEvenDigit(n\
    \ / 10))\n        def uniqueDigitsIter(x : List[Long], result : List[Long]) :\
    \ List[Long] = {\n            if (x.isEmpty) result\n            else if (hasEvenDigit(x.head))\
    \ uniqueDigitsIter(x.tail, result)\n            else uniqueDigitsIter(x.tail,\
    \ x.head :: result)\n        }\n        uniqueDigitsIter(x, List[Long]()).sorted",
  "        var evenSet = Set[Long]()\n        for (i <- x) {\n            var temp\
    \ = i\n            while (temp > 0) {\n                if (temp % 2 == 0) {\n\
    \                    evenSet += i\n                    temp = 0\n            \
    \    }\n                else temp /= 10\n            }\n        }\n        val\
    \ ret = new ListBuffer[Long]()\n        for (i <- x) {\n            if (!evenSet.contains(i))\
    \ ret += i\n        }\n        return ret.toList.sorted", '        x.filter(_.toString.forall(_.toString.toInt
    % 2 != 0)).sortWith(_ < _)', "        // add your code here\n        var list\
    \ : List[Long] = List()\n        for (i <- x) {\n            var cur = i\n   \
    \         var found = false\n            while (cur > 0) {\n                if\
    \ (cur % 2 == 0) {\n                    found = true\n                    break\n\
    \                }\n                cur /= 10\n            }\n            if (!found)\
    \ {\n                list = list :+ i\n            }\n        }\n        return\
    \ list.sorted", "        def uniqueDigits(x : List[Long], acc : List[Long]) :\
    \ List[Long] = x match {\n            case List() => acc\n            case head\
    \ :: tail => {\n                val ret = head.toString.toCharArray.filter(c =>\
    \ c.asDigit % 2 == 0).toList\n                if (ret.length == 0) uniqueDigits(tail,\
    \ head :: acc)\n                else uniqueDigits(tail, acc)\n            }\n\
    \        }\n        uniqueDigits(x, List()).sortWith(_ < _)", "        // Fill\
    \ up this function body\n        // You can add another function as well, if required\n\
    \        // var list = List(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
    \ 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)\n        // return x.filter(x =>\
    \ !(x.toString.contains(\"2\")) && !(x.toString.contains(\"4\")) && !(x.toString.contains(\"\
    6\")) && !(x.toString.contains(\"8\")) && !(x.toString.contains(\"0\"))).sorted\n\
    \        return x.filter(x => x.toString.forall(x => x % 2 != 0)).sorted", " \
    \       val evenDigits = List(0, 2, 4, 6, 8)\n        val evenDigitsSet = evenDigits.toSet\n\
    \        val sortedList = x.sortWith(_<_)\n        val oddDigitsList = (sortedList.foldLeft(List[Long]())((acc,\
    \ elem) => {\n            if (elem.toString.toCharArray.exists(evenDigitsSet.contains(_)))\
    \ acc\n            else elem :: acc\n        })).reverse\n        oddDigitsList",
  '        ???', '        x.filter(y => y.toString.toList.forall(z => z.toString.toInt
    % 2 != 0)).sorted', "        // Fill up this function body\n        // 'y' is\
    \ a sorted list of all elements that has at least one even digit.\n        var\
    \ y = for (i <- x if x.exists(p => (p % 2 == 0))) yield i\n        var l = List[Long]()\n\
    \        for (i <- x if !y.contains(i)) l = l :+ i\n        return l.sorted",
  "        var list = new ListBuffer[Long]()\n        for (i <- x) {\n           \
    \ var num = i\n            var even = false\n            while (num > 0) {\n \
    \               if (num % 2 == 0) {\n                    even = true\n       \
    \             num = 0\n                }\n                else num /= 10\n   \
    \         }\n            if (!even) list += i\n        }\n        list.sorted.toList",
  "        def noEvenDigits(n : Long) : Boolean = {\n            // Given a positive\
    \ integer x.\n            // Returns true if x doesn't have any even digits.\n\
    \            // For example:\n            // >>> noEvenDigits(15)\n          \
    \  // true\n            // >>> noEvenDigits(152)\n            // false\n     \
    \       n.toString.exists(_.asDigit % 2 == 0) == false\n        }\n        x.filter(noEvenDigits).sorted",
  "        def digits(n : Long) : List[Int] = {\n            n.toString.map(_.asDigit).toList\n\
    \        }\n        def evenDigits(l : List[Int]) : Boolean = {\n            l.find(x\
    \ => x % 2 == 0) != None\n        }\n        x.filter(y => !evenDigits(digits(y))).sorted",
  "      x.filter(x => x.toString.toCharArray.forall(c => c.toInt - '0'.toInt != 0\
    \ && c.toInt - '0'.toInt != 2 && c.toInt - '0'.toInt != 4 && c.toInt - '0'.toInt\
    \ != 6 && c.toInt - '0'.toInt != 8)).sorted", '        x.filter(n => !n.toString.exists(c
    => c.toString.toInt % 2 == 0)).sorted', "        var d = new ArrayBuffer[Long]()\n\
    \        x.foreach(i => if (i.toString.forall(x => (x.toString.toInt % 2 != 0)))\
    \ d += i)\n        d.sorted.toList", "        //recursive function\n        def\
    \ uniqueDigitsRec(x : List[Long], e : List[Long]) : List[Long] = x match {\n \
    \           case Nil => e\n            case x1 :: x2 =>\n                val isUnique\
    \ = x1.toString.map(_.asDigit).forall(_ % 2 != 0)\n                if (isUnique)\
    \ uniqueDigitsRec(x2, e :+ x1)\n                else uniqueDigitsRec(x2, e)\n\
    \        }\n        //guard\n        if (x.isEmpty) return List[Long]()\n    \
    \    else return uniqueDigitsRec(x, List[Long]()).sorted", "        x.filter(y\
    \ => !y.toString.exists(z => z == '0' || z == '2' || z == '4' || z == '6' || z\
    \ == '8')).sorted", "        return x.filter(i => !i.toString.exists(c => c ==\
    \ '2' || c == '4' || c == '6' || c == '8' || c == '0')).sorted", "        x.filter(l\
    \ => l.toString.toList.exists(d => d != '0' && d != '2' && d != '4' && d != '6'\
    \ && d != '8')).sorted", '        x.filter(x => x.toString.filter(y => (y % 2)
    == 0).length == 0).sorted', "        var set : Set[Long] = new HashSet[Long]\n\
    \        var list : List[Long] = new ArrayList[Long]\n        for (i <- x) {\n\
    \            if (unique(i)) list.+=(i)\n        }\n        return list.sortWith((x,\
    \ y) => x < y)", '      x.filter(i => (i.toString.filter(c => c.toString.toInt
    % 2 == 0).length == 0)).sorted', "        x.filter(y => y.toString.filter(z =>\
    \ z == '2' || z == '4' || z == '6' || z == '8').isEmpty).sorted", "        //\
    \ Fill up this function body\n        // You can add another function as well,\
    \ if required\n        x.filter(i => i.toString.forall(c => c.asDigit % 2 != 0)).sorted",
  "        val l = ListBuffer[Long]()\n        for (i <- x) {\n            if (!i.toString.contains(\"\
    2\") && !i.toString.contains(\"4\") && !i.toString.contains(\"6\") && !i.toString.contains(\"\
    8\")) {\n                l += i\n            }\n        }\n        l.sorted.toList",
  "        var result : List[Long] = List[Long]()\n        for (k <- x) {\n      \
    \      var f : Boolean = true\n            for (i <- k.toString()) {\n       \
    \         if (i % 2 == 0) {\n                    f = false\n                 \
    \   break\n                }\n            }\n            if (f) result = k ::\
    \ result\n        }\n        result.sorted", "        var result = List[Long]()\n\
    \        for (i <- x) {\n            var flag = true\n            for (j <- i.toString.toCharArray())\
    \ {\n                if (j == '0' || j == '2' || j == '4' || j == '6' || j ==\
    \ '8') {\n                    flag = false\n                    break\n      \
    \          }\n            }\n            if (flag) result = result :+ i\n    \
    \    }\n        result.sorted", "        val digitArray = x.toArray\n        var\
    \ uniqueDigitList = new ListBuffer[Long]()\n        for (value <- digitArray)\
    \ {\n            val digitString = value.toString\n            var evenFlag =\
    \ false\n            for (c <- digitString) {\n                if (c == '2' ||\
    \ c == '4' || c == '6' || c == '8' || c == '0') evenFlag = true\n            }\n\
    \            if (!evenFlag) uniqueDigitList += value\n        }\n        uniqueDigitList.toList.sorted",
  "      // Fill up this function body\n      // You can add another function as well,\
    \ if required\n      val result = new ListBuffer[Long]\n      for (n <- x) {\n\
    \        if (n.toString.toCharArray.filter(_ % 2 == 0).length == 0) {\n      \
    \    result += n\n        }\n      }\n      result.toList.sorted", "        //\
    \ Fill up this function body\n        // You can add another function as well,\
    \ if required\n        var y = new ListBuffer[Long]()\n        val a = x.sorted\n\
    \        for (i <- a) {\n            if (!i.toString.contains(\"2\") && !i.toString.contains(\"\
    4\") && !i.toString.contains(\"6\") && !i.toString.contains(\"8\") && !i.toString.contains(\"\
    0\")) {\n                y += i\n            }\n        }\n        return y.toList",
  '        ???', "        // your solution here\n        def hasUniqueDigits(number\
    \ : Long) : Boolean = {\n            val digits = number.toString.toList.map(x\
    \ => x.asDigit)\n            digits.find(_ % 2 == 0) match {\n               \
    \ case Some(n) => false\n                case None => true\n            }\n  \
    \      }\n        x.filter(hasUniqueDigits).sorted", "        // Fill up this\
    \ function body\n        // You can add another function as well, if required\n\
    \        val s = x.filter(a => (!a.toString.contains(\"2\")) && (!a.toString.contains(\"\
    4\")) && (!a.toString.contains(\"6\")) && (!a.toString.contains(\"8\")) && (!a.toString.contains(\"\
    0\")))\n        s.sorted", '        x.filter(i => i.toString.forall(i => i.toString.toInt%2
    != 0)).sorted', "        x.filter(x => !x.toString.exists(x => (x.toInt - '0')\
    \ % 2 == 0)).sorted", '        x.filter(i => i.toString.toCharArray.filter(c =>
    c % 2 == 0).length == 0).sorted', "        var result : List[Long] = List[Long]()\n\
    \        for (i <- x) {\n            if (i.toString.map(_.asDigit).forall(j =>\
    \ j % 2 != 0)) {\n                result = result :+ i\n            }\n      \
    \  }\n        result.sorted", "        return x.filter(i => i.toString.forall(c\
    \ => c - '0' != 2 && c - '0' != 4 && c - '0' != 6 && c - '0' != 8)).sorted", " \
    \       var l = scala.collection.mutable.ArrayBuffer[Long]()\n        for (i <-\
    \ x) {\n            if (!i.toString.exists(c => c % 2 == 0)) l += i\n        }\n\
    \        return l.toList.sorted", "        x.filter(i => i.toString.forall(c =>\
    \ (c - '0') % 2 == 1)).sorted", "        x.sorted.filter(i => toString(i).forall(c\
    \ => toString(c.toInt - '0'.toInt).forall(!_.isEven)))", '        x.filter(y =>
    y.toString.toCharArray.map(c => c.toInt).forall(z => z % 2 != 0)).sorted', " \
    \       def evenDigit(num : Long) : Boolean = num match {\n            case 0\
    \ => false\n            case _ => if (num % 2 == 0) true else evenDigit(num /\
    \ 10)\n        }\n        def evenDigitRec(x : List[Long], y : List[Long]) : List[Long]\
    \ = {\n            if (x.isEmpty) y\n            else if (evenDigit(x.head)) evenDigitRec(x.tail,\
    \ y)\n            else evenDigitRec(x.tail, y :+ x.head)\n        }\n        evenDigitRec(x,\
    \ List[Long]()).sorted", "        def helper(s : String) : Boolean = {\n     \
    \       if (s.length == 0) return true\n            else if (s.head % 2 == 0)\
    \ return false\n            else return helper(s.tail)\n        }\n        x.sortWith(_\
    \ < _).filter(y => helper(y.toString))", "        // Your code goes here\n   \
    \     var oddDigits = SortedSet[Long]()\n        for (n <- x) {\n        \tvar\
    \ tmp = n\n        \tvar noEven = true\n        \twhile (tmp > 0) {\n        \t\
    \tif (tmp % 2 == 0) {\n        \t\t\tnoEven = false\n        \t\t\ttmp = 0\n \
    \       \t\t} else {\n        \t\t\ttmp /= 10\n        \t\t}\n        \t}\n  \
    \      \tif (noEven) oddDigits += n\n        }\n        return oddDigits.toList",
  "        var even = Set[Char]()\n        even += '0'\n        even += '2'\n    \
    \    even += '4'\n        even += '6'\n        even += '8'\n        var res =\
    \ List[Long]()\n        for (e <- x) {\n            var str = e.toString\n   \
    \         var found = false\n            for (j <- 0 until str.length) {\n   \
    \             if (even.contains(str(j))) {\n                    found = true\n\
    \                    break\n                }\n            }\n            if (!found)\
    \ res = res :+ e\n        }\n        res.sorted", "        // Fill up this function\
    \ body\n        // 'return List[Long]()' for compilation\n        return List[Long]()",
  "        // This can be improved by removing even numbers from the list first.\n\
    \        // For example, by removing the even number 100, we get rid of the\n\
    \        // even numbers 10, 1, and 0. Then we remove the even number 10 and\n\
    \        // get rid of 1.\n        x.filter(x => x.toString.toList.map(x => (x\
    \ - '0')).forall(x => x % 2 != 0)).sorted", "        def uniqueDigitsHelper(n\
    \ : Long) : Boolean = {\n            def uniqueDigitsHelperHelper(nn : Long) :\
    \ Boolean = {\n                if (nn == 0) true\n                else if (nn\
    \ % 10 % 2 == 0) false\n                else uniqueDigitsHelperHelper(nn / 10)\n\
    \            }\n            uniqueDigitsHelperHelper(n)\n        }\n        x.filter(uniqueDigitsHelper(_)).sorted",
  "        def isUnique(y : Long) : Boolean = {\n            def helper(z : Long)\
    \ : Boolean = {\n                if (z < 10) (z == 1 || z == 3 || z == 5 || z\
    \ == 7 || z == 9)\n                else helper(z / 10) && (z % 10 == 1 || z %\
    \ 10 == 3 || z % 10 == 5 || z % 10 == 7 || z % 10 == 9)\n            }\n     \
    \       helper(y)\n        }\n        x.filter(isUnique).sorted", '        return
    x.filter(i => ("" + i).forall(j => j % 2 != 0)).sorted', "        // your code\
    \ here\n        // x.filter(n => n.toString.forall(c => c != '0' && c != '2' &&\
    \ c != '4' && c != '6' && c != '8')).sorted\n        x.filter(!_.toString.exists(_.asDigit\
    \ % 2 == 0)).sorted", "        def isUnique(s : String) : Boolean = {\n      \
    \      s.toCharArray.map(x => x.asDigit).exists(y => y % 2 == 0)\n        }\n\
    \        x.filter(y => isUnique(y.toString)).sorted", "    \tvar result = List[Long]()\n\
    \    \tfor (i <- x) {\n    \t\tvar isEven = false\n    \t\tvar temp = i\n    \t\
    \twhile (temp > 0) {\n    \t\t\tif ((temp % 10) % 2 == 0) {\n    \t\t\t\tisEven\
    \ = true\n    \t\t\t\ttemp = 0\n    \t\t\t}\n    \t\t\ttemp /= 10\n    \t\t}\n\
    \    \t\tif (!isEven) result = i :: result\n    \t}\n    \tresult.sorted", '        x.filter(y
    => !y.toString.exists(n => (n.toString.toInt % 2 == 0))).sorted', '        ???',
  "        def f(x : Long) : Boolean = x.toString.map(x => x.asDigit).forall(y =>\
    \ y % 2 == 1)\n        // Note that 'x' is not a mutable object, we can use a\
    \ var declaration.\n        var l : List[Long] = List()\n        for (i <- x)\
    \ {\n            if (f(i)) l = l :+ i\n        }\n        l.sorted", '        //
    your solution here', "        // Fill up this function body\n        // You can\
    \ add another function as well, if required\n        x.filter(x => x.toString.map(_.asDigit).forall(i\
    \ => i % 2 != 0)).sorted", "    \tvar result = List[Long]()\n    \tfor (i <- x)\
    \ {\n    \t\tif (isAllDigitsUnique(i)) result = i :: result\n    \t}\n    \tresult.sorted",
  "        val evenDigits = List(0, 2, 4, 6, 8)\n        val filter = x.filter(p =>\
    \ evenDigits.forall(p => p.toString.contains(p.toString)))\n        filter.sortWith(_\
    \ < _)", '        return x.filter(y => !y.toString.contains("2") && !y.toString.contains("4")
    && !y.toString.contains("6") && !y.toString.contains("8")).sorted', "        //\
    \ Type your answer here\n        x.filter(n => n.toString.forall(c => (c - '0')\
    \ % 2 == 1)).sorted", "        def uniqueDigitsR(x : List[Long], acc : List[Long])\
    \ : List[Long] = {\n            if (x.isEmpty) acc.reverse\n            else {\n\
    \                val t = x.head\n                if (isUniq(t)) uniqueDigitsR(x.tail,\
    \ t :: acc)\n                else uniqueDigitsR(x.tail, acc)\n            }\n\
    \        }\n        def isUniq(x : Long) : Boolean = {\n            var n = x\n\
    \            while (n > 0) {\n                if (n % 2 == 0) return false\n \
    \               n /= 10\n            }\n            true\n        }\n        uniqueDigitsR(x,\
    \ List[Long]())", "        var n = x\n        var m = Set[Long]()\n        while\
    \ (n.size > 0) {\n            var c = n.head\n            var d = n.head\n   \
    \         while (c > 0) {\n                d = c % 10\n                if (d %\
    \ 2 == 0) {\n                    m.add(n.head)\n                    c = 0\n  \
    \              }\n                c = c / 10\n            }\n            n = n.tail\n\
    \        }\n        var y = x.filter(!m.contains(_))\n        return y.sorted",
  "    \tdef isOdd(x : Long) : Boolean = {\n    \t\tval str : String = x.toString\n\
    \    \t\tfor (i <- 0 until str.length) if (str(i) % 2 == 0) return false\n   \
    \ \t\treturn true\n    \t}\n    \treturn x.filter(x => isOdd(x)).sorted", "  \
    \      // Fill up this function body\n        // You can add another function\
    \ as well, if required\n        ???", "        // Fill up this function body\n\
    \        // You can add another function as well, if required\n        val list\
    \ = new ListBuffer[Long]()\n        for (i <- x) {\n          if (i.toString.forall(_\
    \ % 2 != 0)) {\n            list += i\n          }\n        }\n        list.toList.sorted",
  "    \tdef hasEvenDigit(n : Long) : Boolean = {\n    \t\tdef hasEvenDigitRec(n :\
    \ Long) : Boolean = {\n    \t\t\tif (n == 0) return false\n    \t\t\tif (n % 2\
    \ == 0) return true\n    \t\t\treturn hasEvenDigitRec(n / 10)\n    \t\t}\n   \
    \ \t\treturn hasEvenDigitRec(n)\n    \t}\n    \tdef sort(x : List[Long]) : List[Long]\
    \ = {\n    \t\tdef merge(xs : List[Long], ys : List[Long]) : List[Long] = {\n\
    \    \t\t\txs match {\n    \t\t\t\tcase List() => ys\n    \t\t\t\tcase x :: xs1\
    \ => ys match {\n    \t\t\t\t\tcase List() => xs\n    \t\t\t\t\tcase y :: ys1\
    \ => if (x < y) x :: merge(xs1, ys) else y :: merge(xs, ys1)\n    \t\t\t\t}\n\
    \    \t\t\t}\n    \t\t}\n    \t\tdef mergeSort(xs : List[Long]) : List[Long] =\
    \ {\n    \t\t\tval n = xs.length / 2\n    \t\t\tif (n == 0) xs\n    \t\t\telse\
    \ {\n    \t\t\t\tval (left, right) = xs splitAt n\n    \t\t\t\tmerge(mergeSort(left),\
    \ mergeSort(right))\n    \t\t\t}\n    \t\t}\n    \t\treturn mergeSort(x)\n   \
    \ \t}\n    \tsort(x.filter(!hasEvenDigit(_)))", "        def isUnique(s : String)\
    \ : Boolean = {\n            if (s.isEmpty) return true\n            else {\n\
    \                if (s.head.isDigit && s.head.asDigit % 2 == 0) return false\n\
    \                return isUnique(s.tail)\n            }\n        }\n        return\
    \ x.filter(s => isUnique(s.toString)).sorted", "        if (x.length == 0) return\
    \ Nil\n        def check(b : Long) : Boolean = {\n            val s = b.toString\n\
    \            for (ch <- s.toCharArray) {\n                if (ch % 2 == 0) return\
    \ false\n            }\n            return true\n        }\n        val y = x.filter(check)\n\
    \        val z = x.filterNot(check)\n        return y ::: uniqueDigits(z)", " \
    \       def allEven(x : List[Long]) : Boolean = {\n            x match {\n   \
    \             case Nil => true\n                case head :: tail => {\n     \
    \               if (head % 2 == 0) false\n                    else allEven(tail)\n\
    \                }\n            }\n        }\n        x.filter((i : Long) => {\n\
    \            allEven(i.toString.map(_.asDigit).toList)\n        }).sorted", " \
    \       def checker(x : Long) : Boolean = {\n            var tmp = x\n       \
    \     while (tmp > 0) {\n                if (tmp % 2 == 0) return false\n    \
    \            tmp /= 10\n            }\n            return true\n        }\n  \
    \      return x.filter(checker).sorted", '        return x.filter(hasUniqueDigits(_)).sorted',
  "        x.filter(i => {\n        \ti.toString.map(j => j.asDigit % 2 == 1).reduceLeft(_\
    \ & _)\n        }).sorted", "        x.filter(y => y.toString.forall(x => (x -\
    \ '0') % 2 != 0)).sorted", "        // Fill up this function body\n        //\
    \ You can add another function as well, if required\n        x.filter(i => i.toString.matches(\"\
    ^(?i)[13579]+$\")).sorted", "\t// your solution to Problem 2 here", "        def\
    \ isUnique(n : Long) : Boolean = {\n        \tdef isEven(d : Long) : Boolean =\
    \ {\n        \t\t(d % 2 == 0)\n        \t}\n        \tvar nn = n\n        \tvar\
    \ isuniq = true\n        \twhile (nn > 0) {\n        \t\tvar d = nn % 10\n   \
    \     \t\tif (isEven(d)) {\n        \t\t\tisuniq = false\n        \t\t\tnn = 0\n\
    \        \t\t}\n        \t\tnn = nn / 10\n        \t}\n        \tisuniq\n    \
    \    }\n        x.filter(isUnique(_)).sorted", "        def check(x : Long) :\
    \ Boolean = {\n        \tif (x < 10) true\n        \telse if (x % 2 == 0) false\n\
    \        \telse check(x / 10)\n        }\n        var result = new ListBuffer[Long]\n\
    \        for (i <- x) {\n        \tif (check(i)) result += i\n        }\n    \
    \    result.toList.sorted", "        def uniqueDigitsHelper(n : Long) : Boolean\
    \ = {\n            def uniqueDigitsHelperHelper(nn : Long) : Boolean = {\n   \
    \             nn match {\n                    case 0 => true\n               \
    \     case _ => (nn % 10) % 2 == 1 && uniqueDigitsHelperHelper(nn / 10)\n    \
    \            }\n            }\n            uniqueDigitsHelperHelper(n)\n     \
    \   }\n        x.filter(uniqueDigitsHelper).sorted", "        val f = (x : Long)\
    \ => x.toString.exists(_.asDigit % 2 == 0)\n        x.filter(!f(_)).sorted", '        return
    List[Long]()', "        def isUnique(x : Long) : Boolean = (x.toString.toList.map(_.asDigit).filter(_\
    \ % 2 == 0)).isEmpty\n        def comp(x : Long, y : Long) : Boolean = x < y\n\
    \        x.filter(isUnique).sortWith(comp)", "        // Define a helper function\
    \ to get the digits of a given number\n        def getDigits(x : Long) : List[Int]\
    \ = {\n            var res = List[Int]()\n            var q = x\n            while\
    \ (q > 0) {\n                res = (q % 10).toInt :: res\n                q /=\
    \ 10\n            }\n            res\n        }\n        // Use the helper function\
    \ to get the digits of each number in \n        // the given list, then sort them\
    \ and eliminate the even numbers.\n        // Then we can get the unique numbers\
    \ in each number's digits.\n        // If a number doesn't contain even number\
    \ in its digits, then \n        // the unique number list of its digits is the\
    \ same as its digit\n        // list, otherwise the unique number list is empty.\n\
    \        val res = new ListBuffer[Long]()\n        for (num <- x) {\n        \
    \    val digits = getDigits(num)\n            val uniqueDigits = digits.filter(_\
    \ % 2 != 0).sorted\n            if (uniqueDigits == digits) res += num\n     \
    \   }\n        res.toList.sorted", "        def hasEvenDigit(num : Long) : Boolean\
    \ = {\n            if (num == 0) return false\n            val d = num % 10\n\
    \            if (d % 2 == 0) return true\n            hasEvenDigit(num / 10)\n\
    \        }\n        x.filter(!hasEvenDigit(_)).sorted", "        // Fill up this\
    \ function body\n        // You can add another function as well, if required\n\
    \        var res = List[Long]()\n        for (n <- x) {\n            var flag\
    \ = true\n            for (i <- n.toString()) {\n                if (i.toString().toInt\
    \ % 2 == 0) {\n                    flag = false\n                    break\n \
    \               }\n            }\n            if (flag) res = res :+ n\n     \
    \   }\n        res.sorted", '        x.filter(a => !a.toString.exists(c => "02468".contains(c))).sorted',
  "        // Fill up this function body\n        // You can add another function\
    \ as well, if required\n        var result = List[Long]()\n        for (i <- x)\
    \ {\n            if (i.toString.forall(c => c.asDigit % 2 != 0)) {\n         \
    \       result = result :+ i\n            }\n        }\n        result.sorted",
  "        // Fill up this function body\n        // You can add another function\
    \ as well, if required\n        def isUnique(num : Long) : Boolean = {\n     \
    \       def loop(num : Long) : Boolean = {\n                if (num == 0) return\
    \ true\n                else if (num % 2 == 0) return false\n                else\
    \ loop(num / 10)\n            }\n            loop(num)\n        }\n        x.filter(num\
    \ => isUnique(num)).sorted", "        if (x.size == 0) {\n            return List[Long]()\n\
    \        }\n        var l = x.filter((i) => i.toString.forall(c => c.asDigit %\
    \ 2 != 0))\n        var list = l.toList\n        list.sortWith(_ < _)", "    \
    \    var ans = x.filter(i => i.toString.count(c => (c.toString.toInt % 2 == 0))\
    \ == 0)\n        ans.sorted", "      x.filter(x => x.toString.forall(y => (y -\
    \ '0') % 2 != 0)).sorted", '        x.filter(l => l.toString.map(x => x.asDigit).toSet.forall(a
    => a % 2 != 0)).sorted', "        var result = List[Long]()\n        for (ele\
    \ <- x) {\n            var hasEven = false\n            var tmp = ele\n      \
    \      while (tmp > 0) {\n                var num = tmp % 10\n               \
    \ if (num % 2 == 0) {\n                    hasEven = true\n                  \
    \  tmp = 0\n                }\n                tmp /= 10\n            }\n    \
    \        if (!hasEven) result = result :+ ele\n        }\n        result.sorted",
  "    \tx.filter(hasUniqueDigits(_)).sorted", "        x.filter(n => n.toString.exists(c\
    \ => (c.toInt - '0') % 2 == 1)).sorted", "        def isEven(n : Long) : Boolean\
    \ = n % 2 == 0\n        def anyEven(x : List[Long]) : Boolean = x.exists(isEven)\n\
    \        x.filter(!anyEven(_)).sorted", "    \tx.filter(x => x.toString.forall(c\
    \ => c % 2 != 0)).sorted", "        val evenDigits = Set(2, 4, 6, 8, 0)\n    \
    \    val y = x.filter(a => {\n            a.toString.map(a => a.asDigit).forall(a\
    \ => !evenDigits.contains(a))\n        })\n        y.sorted", "        // Fill\
    \ up this function body\n        // You can add another function as well, if required\n\
    \        def f(xs : List[Long], acc : List[Long]): List[Long] = {\n        \t\
    if (xs.isEmpty) acc\n        \telse {\n        \t\tval isUnique = xs.head.toString.forall(c\
    \ => c.asDigit % 2 != 0)\n        \t\tif (isUnique) f(xs.tail, xs.head :: acc)\n\
    \        \t\telse f(xs.tail, acc)\n        \t}\n        }\n        f(x, List[Long]()).sorted",
  "\t\tval result = SortedSet[Long]()\n\t\tfor (i <- x) {\n\t\t\tif (!i.toString.exists(_.isDigit\
    \ && _.asDigit % 2 == 0)) {\n\t\t\t\tresult += i\n\t\t\t}\n\t\t}\n\t\tresult.toList",
  "        val result = x.filter(p => {\n            var num = p\n            var\
    \ list = new ListBuffer[Int]()\n            while (num > 0) {\n              \
    \  list += num.toInt % 10\n                num /= 10\n            }\n        \
    \    !list.exists(p => p % 2 == 0)\n        })\n        result.sorted", "    \
    \    val l = x.filter(y => y.toString.toCharArray.forall(z => (z - '0') % 2 !=\
    \ 0))\n        l.sortWith(_ < _)", "        // Fill up this function body\n  \
    \      // `x` is list of positive integers\n        // You have to return sorted\
    \ list of all elements that hasn't any even digit.\n        // Note: Returned\
    \ list should be sorted in increasing order.\n        val e = List(\"0\", \"2\"\
    , \"4\", \"6\", \"8\")\n        val a = ListBuffer[Long]()\n        for (i <-\
    \ x) {\n            var c = 0\n            for (j <- i.toString.toCharArray) {\n\
    \                if (e.contains(j.toString)) {\n                    c = 1\n  \
    \              }\n            }\n            if (c == 0) {\n                a\
    \ += i\n            }\n        }\n        a.toList.sorted", "        val a = x.filter(x\
    \ => x.toString.exists(c => c.toString.toInt % 2 == 0))\n        val b = x.filter(x\
    \ => !a.contains(x))\n        b.sorted", "        def isUnique(l : Long) : Boolean\
    \ = {\n            val r = l.toString\n            for (i <- r) {\n          \
    \      if (i % 2 == 0) return false\n            }\n            return true\n\
    \        }\n        x.filter(isUnique(_)).sorted"]
stop_tokens:
- "\n    }\n"
