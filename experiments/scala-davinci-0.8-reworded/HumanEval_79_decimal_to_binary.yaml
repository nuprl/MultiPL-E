name: HumanEval_79_decimal_to_binary
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // You will be given a number in decimal form and your task is to convert it\
  \ to\n    // binary format. The function should return a string, with each character\
  \ representing a binary\n    // number. Each character in the string will be '0'\
  \ or '1'.\n    // There will be an extra couple of characters 'db' at the beginning\
  \ and at the end of the string.\n    // The extra characters are there to help with\
  \ the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n    // (\"db1111db\"\
  )\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\")\n    def decimalToBinary(decimal\
  \ : Long) : String = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
  db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n    assert(decimalToBinary((103l)).equals((\"\
  db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"db1111db\")));\n\
  \    }\n\n}\n"
completions: ["        val decimalString = decimal.toString\n        val binaryString\
    \ = new StringBuilder(\"db\")\n        for (i <- 0 until decimalString.length)\
    \ {\n            val n = decimalString(i).asDigit\n            if (n == 0) binaryString\
    \ += '0'\n            else {\n                val n2 = pow(2, decimalString.length\
    \ - i - 1).toInt\n                val result = n / n2\n                val result2\
    \ = n % n2\n                binaryString += result.toString\n                if\
    \ (result2 != 0) {\n                    val result2String = decimalToBinary(result2)\n\
    \                    for (i <- 2 until result2String.length - 2) binaryString\
    \ += result2String(i)\n                }\n            }\n        }\n        binaryString\
    \ += \"db\"\n        binaryString.toString", '        return s"db${decimal.toBinaryString}db"',
  '        "db" + decimal.toBinaryString + "db"', "        // Your code goes here...\n\
    \        val binary = new StringBuilder(\"db\")\n        val binary_val = new\
    \ StringBuilder(\"\")\n        var decimal_value = decimal\n        while (decimal_value\
    \ > 0) {\n          binary_val.append(decimal_value % 2)\n          decimal_value\
    \ = decimal_value / 2\n        }\n        for (i <- 0 until binary_val.length)\
    \ {\n          binary.append(binary_val.charAt(binary_val.length - 1 - i))\n \
    \       }\n        binary.append(\"db\")\n        binary.toString", '        "db"
    + BigInt(decimal).toString(2) + "db"', "        val binary = BigInt(decimal).toString(2)\n\
    \        \"db\" + binary + \"db\"", "        \"db\" + decimal.toBinaryString.toSeq.dropWhile(_\
    \ == '0').mkString + \"db\"", "        val negative = if (decimal < 0) 1 else\
    \ 0\n        val binary = for (i <- 31 to 0 by -1 if decimal >= pow(2, i)) yield\
    \ 1\n        val str = \"db\" + (negative.toString + binary.mkString).padTo(33,\
    \ '0') + \"db\"\n        str", '        "db" + decimal.toBinaryString + "db"',
  "        def iter(decimal : Long, res : String) : String = {\n            if (decimal\
    \ == 0) res\n            else {\n                val rem = decimal % 2\n     \
    \           val div = decimal / 2\n                iter(div, rem.toString + res)\n\
    \            }\n        }\n        \"db\" + iter(decimal, \"\") + \"db\"", '        "db"
    + decimal.toBinaryString + "db"', '        "db" + decimal.toBinaryString + "db"',
  "        var binaryStr = \"db\"\n        var temp = decimal\n        while (temp\
    \ != 0) {\n            binaryStr += temp % 2\n            temp /= 2\n        }\n\
    \        binaryStr += \"db\"\n        binaryStr.reverse", '        "db" + decimal.toBinaryString
    + "db"', "\t\t\"db\" + decimal.toBinaryString + \"db\"", "        var result =\
    \ \"\"\n        var d = decimal\n        while (d != 0) {\n            result\
    \ = (d % 2).toString + result\n            d /= 2\n        }\n        \"db\" +\
    \ result + \"db\"", "\t\tvar binary : String = new String(\"db\")\n\t\twhile (decimal\
    \ > 0) {\n\t\t\tbinary += (decimal % 2).toString\n\t\t\tdecimal /= 2\n\t\t}\n\t\
    \tbinary += \"db\"\n\t\tbinary.reverse", "        var str = \"db\"\n        var\
    \ a = decimal\n        while (a != 0) {\n            var b = a % 2\n         \
    \   str = b.toString + str\n            a = a / 2\n        }\n        str = str\
    \ + \"db\"\n        return str", '        "db" + decimal.toBinaryString + "db"',
  "        var binary = new StringBuilder(\"db\")\n        var cur = decimal\n   \
    \     while (cur > 0) {\n            binary += (cur % 2)\n            cur /= 2\n\
    \        }\n        binary.toString.reverse + \"db\"", "        var result = \"\
    db\"\n        if (decimal < 0) result += \"1\"\n        else result += \"0\"\n\
    \        decimal = abs(decimal)\n        var exp = 0\n        while (pow(2, exp).toLong\
    \ <= decimal) exp += 1\n        for (i <- 0 until exp) {\n            if (decimal\
    \ >= pow(2, exp - i - 1).toLong) {\n                result += \"1\"\n        \
    \        decimal -= pow(2, exp - i - 1).toLong\n            }\n            else\
    \ result += \"0\"\n        }\n        while (result.length <= exp + 1) result\
    \ += \"0\"\n        result += \"db\"\n        result", "        val binaryString\
    \ = Long.toBinaryString(decimal)\n        return \"db\" + binaryString + \"db\"",
  '        "db" + decimal.toBinaryString + "db"', '        "db" + decimal.toBinaryString
    + "db"', "        var b = BigInt(decimal)\n        var bin = new StringBuilder(\"\
    db\")\n        while (b > 0) {\n            var digit = b % 2\n            bin.append(digit)\n\
    \            b = b / 2\n        }\n        bin.append(\"db\")\n        bin.reverse.toString",
  '        "db" + decimal.toBinaryString + "db"', "        if (decimal == 0) return\
    \ \"db0db\"\n        var i = ceil(log(decimal) / log(2)).toInt\n        var binary\
    \ = new StringBuilder(\"db\")\n        while (i > 0) {\n            binary.append((decimal\
    \ / pow(2, i - 1)).toInt)\n            decimal = decimal % pow(2, i - 1).toLong\n\
    \            i -= 1\n        }\n        binary.append(\"db\")\n        return\
    \ binary.toString", "        val result = new StringBuilder(\"db\")\n        var\
    \ current : Long = decimal\n        while (current != 0) {\n            result.append(current\
    \ % 2)\n            current /= 2\n        }\n        result.append(\"db\").reverse.toString",
  "        val x = (\"db\" + decimal.toBinaryString.take(64) + \"db\").split(\"\"\
    )\n        x.drop(2).dropRight(2).mkString(\"\")", "        var remainders = List[Char]()\n\
    \        var x = decimal\n        while (x > 0) {\n            remainders = remainders\
    \ :+ ((x % 2) + '0').toChar\n            x /= 2\n        }\n        if (remainders.isEmpty)\
    \ return \"db0db\"\n        var result = \"db\"\n        for (x <- remainders.reverse)\
    \ result += x\n        result += \"db\"\n        return result", "        var\
    \ intString = (decimal.toBinaryString.toInt)\n        if (intString < 0) {\n \
    \           intString = intString + 1\n        }\n        return \"db\" + intString.toString\
    \ + \"db\"", "        var binary = \"\"\n        var i = 0\n        val binaryNumbers\
    \ = \"01\"\n        while (decimal > 0) {\n            val digit = decimal % 2\n\
    \            decimal /= 2\n            binary = binaryNumbers(digit.toInt) + binary\n\
    \        }\n        binary = \"db\" + binary + \"db\"\n        return binary",
  "        var result = \"\"\n        var remainder = decimal\n        while (remainder\
    \ > 0) {\n            result = remainder % 2 + result\n            remainder /=\
    \ 2\n        }\n        \"db\" + result + \"db\"", "        // Write your code\
    \ here\n        return \"\"", "        val binary = decimal.toBinaryString\n \
    \       val extra = \"db\"\n        return extra + binary + extra", "        var\
    \ s = \"db\"\n        var n = decimal\n        while (n > 0) {\n            s\
    \ = s + (n % 2).toString\n            n = n / 2\n        }\n        s = s + \"\
    db\"\n        s.reverse", '        "db" + decimal.toBinaryString + "db"', "  \
    \      def decimalToBinaryR(num : Long, acc : String) : String = {\n         \
    \   if (num == 0) acc\n            else decimalToBinaryR(num / 2, (num % 2).toString\
    \ + acc)\n        }\n        \"db\" + decimalToBinaryR(decimal, \"\") + \"db\"",
  "        val binary = decimal.toBinaryString\n        (\"db\" + binary + \"db\")",
  "        var binary : String = \"db\"\n        var temp : Long = decimal\n     \
    \   while (temp > 0) {\n            binary += temp % 2\n            temp /= 2\n\
    \        }\n        binary += \"db\"\n        return binary.reverse", "      \
    \  val allBinaryDigits = \"db\" + decimal.toBinaryString + \"db\"\n        return\
    \ allBinaryDigits", "    \t\tval result = new StringBuilder(\"db\")\n    \t\t\
    val remains = new ListBuffer[Int]\n    \t\tvar decimal1 = decimal\n    \t\tvar\
    \ remainder = 0\n    \t\twhile (decimal1 > 0) {\n    \t\t  remainder = (decimal1\
    \ % 2).toInt\n    \t\t  remains += remainder\n    \t\t  decimal1 = decimal1 /\
    \ 2\n    \t\t}\n    \t\tremains.reverse.foreach(remain => result.append(remain))\n\
    \    \t\tresult.append(\"db\")\n    \t\tresult.toString", "        val binary\
    \ = BigInt(decimal).toString(2)\n        \"db\" + \"0\" * (32 - binary.length)\
    \ + binary + \"db\"", "    \t\tval bin = new StringBuilder\n    \t\tvar dec =\
    \ decimal\n    \t\twhile (dec > 0) {\n    \t\t\tbin.append(dec % 2)\n    \t\t\t\
    dec /= 2\n    \t\t}\n    \t\tval binStr = bin.toString.reverse\n    \t\t\"db\"\
    \ + binStr + \"db\"", '        return "db" + decimal.toBinaryString + "db"', " \
    \       var result = new StringBuilder\n        result.append(\"db\")\n      \
    \  while (decimal > 0) {\n            result.append(decimal % 2)\n           \
    \ decimal /= 2\n        }\n        result.reverse.append(\"db\").toString", " \
    \       // Fill in the correct value for result\n        var result = \"db\"\n\
    \        for (i <- 0 to 64) {\n            val bit = ((decimal >> i) & 1).toString\n\
    \            result = bit + result\n        }\n        result += \"db\"\n    \
    \    result", "        val db = \"db\"\n        var temp = decimal\n        var\
    \ bin = \"\"\n        while (temp > 0) {\n            if (temp % 2 == 0) {\n \
    \               bin = '0' + bin\n            } else {\n                bin = '1'\
    \ + bin\n            }\n            temp /= 2\n        }\n        db + bin + db",
  '        "db" + decimal.toBinaryString + "db"', "        val result = new StringBuilder(\"\
    db\")\n        var tempDecimal = decimal\n        while (tempDecimal != 0) {\n\
    \            val mod = tempDecimal % 2\n            result.append(mod)\n     \
    \       tempDecimal = tempDecimal / 2\n        }\n        result.append(\"db\"\
    ).reverse.toString", '        return "db" + BigInt(decimal).toString(2) + "db"',
  '        "db" + Integer.toBinaryString(decimal.toInt) + "db"', "        val buffer\
    \ = new StringBuilder()\n        buffer.append(\"db\")\n        var n = decimal\n\
    \        while (n != 0) {\n            buffer.append(n % 2)\n            n /=\
    \ 2\n        }\n        buffer.append(\"db\")\n        buffer.reverse\n      \
    \  buffer.toString", '        "db" + (decimal.toBinaryString) + "db"', "     \
    \   if (decimal == 0) {\n            \"db0db\"\n        } else {\n           \
    \ \"db\" + toBinary(decimal) + \"db\"\n        }", "    \t\"db\" + decimal.toBinaryString\
    \ + \"db\"", "        def it(d : Long, b : String) : String = {\n            if\
    \ (d == 0) b\n            else it(d / 2, (d % 2).toString + b)\n        }\n  \
    \      \"db\" + it(decimal, \"\") + \"db\"", '        return "db" + decimal.toBinaryString
    + "db"', "        val buffer = new StringBuilder(\"db\")\n        def build(d\
    \ : Long) : Unit = {\n            if (d == 0) {\n                buffer.append(\"\
    db\")\n            } else {\n                build(d >> 1)\n                buffer.append((d\
    \ & 1).toString)\n            }\n        }\n        build(decimal)\n        buffer.toString",
  "        var decimalToReturn = decimal\n        var binary : String = \"\"\n   \
    \     while (decimalToReturn > 0) {\n            binary = (decimalToReturn % 2).toString\
    \ + binary\n            decimalToReturn = decimalToReturn / 2\n        }\n   \
    \     \"db\" + binary + \"db\"", "        val string = BigInt(decimal).toString(2)\n\
    \        \"db\" + string + \"db\"", '        "db" + decimal.toBinaryString + "db"',
  '        "db" + decimal.toBinaryString + "db"', '        "db" + java.lang.Long.toBinaryString(decimal)
    + "db"', "        var result = \"db\"\n        var i = decimal\n        while\
    \ (i > 0) {\n            val digit = i % 2\n            result = digit + result\n\
    \            i = i / 2\n        }\n        result + \"db\"", "    \t\"db\" + decimal.toBinaryString\
    \ + \"db\"", "        def r(x : Long, r : String) : String = {\n            if\
    \ (x == 0) return r\n            r(x / 2, if (x % 2 == 0) \"0\" + r else \"1\"\
    \ + r)\n        }\n        \"db\" + r(decimal, \"\") + \"db\"", '        "db"
    + (decimal / 2).toString() + "db"', '        "db" + decimal.toBinaryString + "db"',
  '        ???', "        var num = decimal\n        var result = \"\"\n        while\
    \ (num > 0) {\n            result = ((num % 2) + result)\n            num /= 2\n\
    \        }\n        \"db\" + result + \"db\"", '        "db" + decimal.toBinaryString
    + "db"', '      "db" + decimal.toBinaryString + "db"', "        // Your code goes\
    \ here.\n        var n = BigInt(decimal)\n        var result = \"\"\n        while\
    \ (n > 0) {\n            result = (n % 2).toString + result\n            n = n\
    \ / 2\n        }\n        \"db\" + result + \"db\"", "        // write your code\
    \ here\n        throw new Exception(\"not implemented\")", "        def decimalToBinaryRec(decimal\
    \ : Long, acc : String) : String = {\n            if (decimal == 0) acc\n    \
    \        else decimalToBinaryRec(decimal / 2, (decimal % 2).toString + acc)\n\
    \        }\n        \"db\" + decimalToBinaryRec(decimal, \"\") + \"db\"", "  \
    \      var binary = \"\"\n        var num = decimal\n        while (num > 0) {\n\
    \            binary = (num % 2).toString + binary\n            num /= 2\n    \
    \    }\n        \"db\" + binary + \"db\"", "        var s = \"db\"\n        var\
    \ m = decimal\n        while (m > 0) {\n            s = s + ((m & 1) + '0').toChar\n\
    \            m = m >> 1\n        }\n        s = s + \"db\"\n        s.reverse",
  "        val stringBuilder = new StringBuilder(\"db\")\n        var acc = 0\n  \
    \      while (decimal != 0) {\n            val digit = (decimal % 2).toInt\n \
    \           stringBuilder.append(digit)\n            decimal /= 2\n        }\n\
    \        stringBuilder.append(\"db\").toString.reverse", "        val binary =\
    \ new StringBuilder\n        binary.append(\"db\")\n        var temp = decimal\n\
    \        while (temp > 0) {\n            val remain = temp % 2\n            temp\
    \ = temp / 2\n            binary.append(remain)\n        }\n        binary.append(\"\
    db\")\n        binary.reverse.toString", '        return "db" + decimal.toBinaryString.toString
    + "db"', "        // TODO: Write your code here\n        \"db0000000000db\"",
  "        var num = decimal\n        var res = \"\"\n        while (num != 0) {\n\
    \            res = if (num % 2 == 0) \"0\" + res else \"1\" + res\n          \
    \  num /= 2\n        }\n        \"db\" + res + \"db\"", "        def loop(n :\
    \ Long, acc : String) : String = n match {\n            case 0 => \"db\" + acc\
    \ + \"db\"\n            case _ => {\n                if (n % 2 == 0) loop(n /\
    \ 2, \"0\" + acc)\n                else loop(n / 2, \"1\" + acc)\n           \
    \ }\n        }\n        loop(decimal, \"\")", "        val string = new StringBuilder(\"\
    db\")\n        def binary(decimal : Long) : Unit = {\n            if (decimal\
    \ == 0) return\n            string.append(decimal % 2)\n            binary(decimal\
    \ / 2)\n        }\n        binary(decimal)\n        string.append(\"db\").toString.reverse",
  "        val binary = new StringBuilder(\"db\")\n        var rem = 0\n        var\
    \ quotient = decimal\n        while (quotient > 0) {\n            rem = (quotient\
    \ % 2).toInt\n            quotient = quotient / 2\n            binary.append(rem)\n\
    \        }\n        binary.append(\"db\").reverse.toString", "        // your\
    \ code here.\n        \"db1111db\"", "        var decimalNum = decimal\n     \
    \   var binaryNum = \"\"\n        while (decimalNum != 0) {\n            val num\
    \ = decimalNum % 2\n            binaryNum = num.toString + binaryNum\n       \
    \     decimalNum = decimalNum / 2\n        }\n        return \"db\" + binaryNum\
    \ + \"db\"", '        "db" + java.lang.Long.toBinaryString(decimal) + "db"', " \
    \       val buffer = new StringBuilder()\n        buffer.append(\"db\")\n    \
    \    var n = decimal\n        while (n != 0) {\n            buffer.append(n %\
    \ 2)\n            n /= 2\n        }\n        buffer.append(\"db\")\n        buffer.reverse.toString",
  "        var result = \"\"\n        var d = decimal\n        while (d > 0) {\n \
    \           result = (d % 2).toString + result\n            d /= 2\n        }\n\
    \        \"db\" + result + \"db\"", '        ("db" + decimal.toBinaryString +
    "db")', "        def recursion(decimal : Long, binary : String) : String = {\n\
    \            if (decimal > 0) {\n                recursion(decimal / 2, decimal\
    \ % 2 + binary)\n            } else {\n                \"db\" + binary + \"db\"\
    \n            }\n        }\n        recursion(decimal, \"\")", "        def go(decimal\
    \ : Long, acc : String) : String = {\n            if (decimal < 2) return s\"\
    db${decimal}${acc}db\"\n            else go(decimal / 2, (decimal % 2).toString\
    \ + acc)\n        }\n        go(decimal, \"\")", "        // A regular expression\
    \ is a pattern that the regular expression engine attempts to match in input text.\n\
    \        // A pattern consists of one or more character literals, operators, or\
    \ constructs.\n        // Regular expression pattern syntax details:\n       \
    \ // http://docs.oracle.com/javase/7/docs/api/java/util/regex/Pattern.html\n \
    \       // http://docs.oracle.com/javase/tutorial/essential/regex/index.html\n\
    \        // But first of all you should know how to use a regular expression (like\
    \ in grep).\n        // In this example, we use a regular expression to separate\
    \ the digit part of the string.\n        decimal.toString.split(\"\\\\.\")(0).map(c\
    \ => c.toString.toInt.toBinaryString).mkString", "        val buf = new StringBuilder()\n\
    \        buf.append(\"db\")\n        var mod = 0\n        var tmp = decimal\n\
    \        while (tmp > 0) {\n            mod = (tmp % 2).toInt\n            tmp\
    \ = (tmp / 2).toInt\n            buf.append(mod)\n        }\n        buf.reverse.append(\"\
    db\").toString", '        return "db" + decimal.toBinaryString + "db"', "    \
    \    val binary = new StringBuilder()\n        binary.append(\"db\")\n       \
    \ while (decimal > 0) {\n            binary.append(decimal % 2)\n            decimal\
    \ /= 2\n        }\n        binary.append(\"db\")\n        binary.reverse.toString",
  '        decimal.toBinaryString', "        // Fill in the blanks here:\n       \
    \ val binary = ArrayBuffer[Char]()\n        def toBinaryHelper(num : Long) : Unit\
    \ = {\n            if (num > 0) {\n                binary += (if (num % 2 == 0)\
    \ '0' else '1')\n                toBinaryHelper(num / 2)\n            }\n    \
    \    }\n        toBinaryHelper(decimal)\n        \"db\" + binary.reverse.mkString\
    \ + \"db\"", '        "db" + decimal.toBinaryString + "db"', "        val binary\
    \ = \"db\" + decimal.toBinaryString + \"db\"\n        return binary", '        return
    "db" + decimal.toBinaryString + "db"', '        return "db" + decimal.toBinaryString
    + "db"', "        var binary : String = \"db\"\n        while (decimal != 0) {\n\
    \            binary += (decimal % 2).toString\n            decimal /= 2\n    \
    \    }\n        binary += \"db\"\n        return binary.reverse", "        val\
    \ binary = decimal.toBinaryString\n        \"db\" + binary + \"db\"", '        "db"
    + decimal.toBinaryString + "db"', '        "db" + decimal.toBinaryString + "db"',
  "        val binary = (32 - java.lang.Long.numberOfLeadingZeros(decimal))\n    \
    \    val max = pow(2, binary).toLong\n        var result = \"db\"\n        for\
    \ (i <- (max/2).toInt to 1 by -1) {\n            if (max - i <= decimal) {\n \
    \               result += \"1\"\n                decimal -= (max - i)\n      \
    \      } else result += \"0\"\n        }\n        result += \"db\"\n        result",
  "        val buffer = new StringBuilder\n        var decimal2 = decimal\n      \
    \  while (decimal2 > 0) {\n            val mod = decimal2 % 2\n            buffer.append(mod)\n\
    \            decimal2 = decimal2 / 2\n        }\n        buffer.append(\"db\"\
    )\n        buffer.reverse.toString", "        // Fill in the code\n        val\
    \ s = decimal.toBinaryString\n        val n = s.length\n        if (decimal ==\
    \ 0) \"db0db\"\n        else if (n < 8) \"db\" + (\"0\" * (8 - n)) + s + \"db\"\
    \n        else \"db\" + s + \"db\"", "        val s = new StringBuilder(\"db\"\
    )\n        var d = decimal\n        while (d > 0) {\n            if (d % 2 ==\
    \ 0) s.append(\"0\")\n            else s.append(\"1\")\n            d /= 2\n \
    \       }\n        s.append(\"db\").toString", "        val binary = new StringBuilder(\"\
    db\")\n        var num = decimal\n        while (num > 0) {\n            val mod\
    \ = num % 2\n            binary.append(mod)\n            num = num / 2\n     \
    \   }\n        binary.append(\"db\").reverse.toString", "        // Fill in the\
    \ code here.\n        if (decimal == 0) \"db0db\"\n        else {\n          \
    \  val binary = new StringBuilder\n            binary.append(\"db\")\n       \
    \     var remainder = decimal\n            while (remainder > 0) {\n         \
    \       val div = remainder / 2\n                val mod = remainder % 2\n   \
    \             binary.append(mod)\n                remainder = div\n          \
    \  }\n            binary.append(\"db\")\n            binary.reverse.toString\n\
    \        }", "        var ret = \"db\"\n        var remain = decimal\n       \
    \ while (remain > 0) {\n            ret += (remain % 2).toString\n           \
    \ remain /= 2\n        }\n        ret += \"db\"\n        ret", '        "db" +
    decimal.toBinaryString + "db"', "        var binary = \"db\"\n        var d =\
    \ decimal\n        while (d > 0) {\n            if (d % 2 == 0) {\n          \
    \      binary = \"0\" + binary\n            } else {\n                binary =\
    \ \"1\" + binary\n            }\n            d /= 2\n        }\n        return\
    \ binary + \"db\"", "        var res = \"db\"\n        var n = decimal\n     \
    \   while (n > 0) {\n            res += (n % 2).toString\n            n /= 2\n\
    \        }\n        res += \"db\"\n        res.reverse", "        val stringList\
    \ = ListBuffer[Char]()\n        val stringBuilder = new StringBuilder(\"db\")\n\
    \        var quotient = decimal\n        while (quotient != 0) {\n           \
    \ val remainder = quotient % 2\n            quotient = quotient / 2\n        \
    \    stringList += remainder.toString()(0)\n        }\n        for (c <- stringList.reverse)\
    \ stringBuilder += c\n        stringBuilder.append(\"db\").toString()", "    \
    \    var x = \"db\"\n        var i = decimal\n        while (i != 0) {\n     \
    \       x = (i % 2).toString + x\n            i = i / 2\n        }\n        return\
    \ x + \"db\"", "        val db = \"db\"\n        db + decimal.toBinaryString +\
    \ db", '        ???', '        "db" + "0" * 32 + Long.toBinaryString(decimal)
    + "db"', "        def decimalToBinary(decimal : Long, acc : String) : String =\
    \ decimal match {\n            case x if (x == 0) => \"db\" + acc + \"db\"\n \
    \           case x => decimalToBinary(x / 2, (x % 2).toString + acc)\n       \
    \ }\n        decimalToBinary(decimal, \"\")", '        return "db" + Integer.toBinaryString(decimal.asInstanceOf[Int])
    + "db"', "        var bin = List[Char]()\n        while (decimal > 0) {\n    \
    \        bin = ((decimal % 2).toString).charAt(0) :: bin\n            decimal\
    \ /= 2\n        }\n        val s = \"db\" + bin.reverse.mkString + \"db\"\n  \
    \      println(s)\n        s", '        return "db" + decimal.toBinaryString +
    "db"', '        "db" + decimal.toBinaryString + "db"', "        // Your code here.\n\
    \        null", "        var result = new StringBuilder\n        result.append(\"\
    db\")\n        var dec = decimal\n        while (dec > 0) {\n            result.append(dec\
    \ % 2)\n            dec /= 2\n        }\n        result.append(\"db\")\n     \
    \   result.reverse.toString", "        val s = \"db\" + BigInt(decimal).toString(2)\
    \ + \"db\"\n        s", "        var s = \"db\"\n        for (i <- 0 to (63-Long.numberOfLeadingZeros(decimal)))\
    \ {\n            s += (if ((decimal & (1l << i)) != 0) '1' else '0')\n       \
    \ }\n        s += \"db\"\n        s", "        val s = \"db\" + decimal.toBinaryString\
    \ + \"db\"\n        s", '        "db" + decimal.toBinaryString + "db"', '        "db"
    + decimal.toBinaryString + "db"', "        val binary = new StringBuilder(\"db\"\
    )\n        def inner(value : Long) : Unit = value match {\n            case 0\
    \ =>\n            case _ => {\n                inner(value / 2)\n            \
    \    binary.append(value % 2)\n            }\n        }\n        inner(decimal)\n\
    \        binary.append(\"db\")\n        binary.toString", "        \"db\" + decimal.toBinaryString.reverse.padTo(8,\
    \ '0').reverse + \"db\"", "        val sb = new StringBuilder\n        sb.append(\"\
    db\")\n        for (i <- 0 to 64) {\n            if ((decimal & (1 << i)) > 0)\
    \ sb.append(\"1\")\n            else sb.append(\"0\")\n        }\n        sb.append(\"\
    db\")\n        sb.toString", '        "db" + decimal.toBinaryString + "db"', '        "db"
    + BigInt(decimal).toString(2) + "db"', '        "db" + decimal.toBinaryString
    + "db"', "        def helper(decimal : Long, acc : String) : String = {\n    \
    \        if (decimal == 0) {\n                \"db\" + acc + \"db\"\n        \
    \    } else {\n                val digit = if (decimal % 2 == 0) \"0\" else \"\
    1\"\n                helper(decimal / 2, digit + acc)\n            }\n       \
    \ }\n        helper(decimal, \"\")", '        "db" + decimal.toBinaryString +
    "db"', '        ("db" + decimal.toBinaryString + "db")', "        val base2 =\
    \ BigInt(decimal).toString(2)\n        \"db\" + \"0\" * (15 - base2.length) +\
    \ base2 + \"db\"", "        val array = new ArrayBuffer[Int]\n        var dec\
    \ = decimal\n        while (dec > 0) {\n            array += (dec % 2).toInt\n\
    \            dec /= 2\n        }\n        \"db\" + array.reverse.mkString + \"\
    db\"", "        var binary = \"\"\n        var number = decimal\n        while\
    \ (number != 0) {\n            binary = number % 2 + binary\n            number\
    \ /= 2\n        }\n        \"db\" + binary + \"db\"", "        val binary = new\
    \ StringBuilder\n        binary.append(\"db\")\n        var n = decimal\n    \
    \    while (n > 0) {\n            val rem = n % 2\n            n = n / 2\n   \
    \         binary.append(rem)\n        }\n        binary.append(\"db\")\n     \
    \   binary.reverse.toString", "        val str = \"db\" + decimal.toBinaryString\
    \ + \"db\"\n        str", "        val sb = new StringBuilder\n        sb.append(\"\
    db\")\n        var x = decimal\n        while (x > 0) {\n            sb.append(x\
    \ % 2)\n            x /= 2\n        }\n        sb.append(\"db\")\n        sb.reverse.toString",
  "    \t// error checking\n    \tif (decimal < 0) {\n    \t\treturn \"Error: input\
    \ number is negative\"\n    \t}\n    \tvar binary = new StringBuilder\n    \t\
    var bin = Array.fill(70)(0)\n    \tvar index = 0\n    \twhile (decimal != 0) {\n\
    \    \t\tvar rem = decimal % 2\n    \t\tdecimal = decimal / 2\n    \t\tbin(index)\
    \ = rem\n    \t\tindex += 1\n    \t}\n    \tbinary += \"db\"\n    \tfor (i <-\
    \ (index - 1) to 0 by -1) {\n    \t\tbinary += bin(i)\n    \t}\n    \tbinary +=\
    \ \"db\"\n    \treturn binary.toString", '        "db" + decimal.toBinaryString
    + "db"', "        val db = \"db\"\n        return db + decimal.toBinaryString\
    \ + db", '        return "db" + decimal.toBinaryString + "db"', "        var result\
    \ = \"\"\n        var num = decimal\n        while (num != 0) {\n            result\
    \ = (num % 2).toString + result\n            num /= 2\n        }\n        \"db\"\
    \ + result + \"db\"", "        val bits = ListBuffer[Int]()\n        def calculate(value\
    \ : Long) : Unit = {\n            if (value == 0) {\n                return\n\
    \            }\n            val tmp = value % 2\n            bits += tmp.toInt\n\
    \            calculate(value / 2)\n        }\n        calculate(decimal)\n   \
    \     \"db\" + bits.reverse.mkString + \"db\"", "        if (decimal == 0) {\n\
    \            \"dbdb\"\n        } else {\n            \"db\" + decimalToBinary(decimal\
    \ / 2) + (decimal % 2).toString + \"db\"\n        }", "        val hexString =\
    \ \"0123456789abcdef\"\n        var buffer = new StringBuilder\n        var n\
    \ = decimal\n        while (n > 0) {\n            val d = n % 2\n            buffer\
    \ += hexString(d.toInt)\n            n = n / 2\n        }\n        \"db\" + buffer.reverse.toString\
    \ + \"db\"", '        "db" + decimal.toBinaryString + "db"', "        \"db\" +\n\
    \        Long.toBinaryString(decimal) +\n        \"db\"", '        ???', "   \
    \     def loop(decimal : Long, length : Int) : String = {\n            if (decimal\
    \ < 1) return \"db\"\n            val result = length + 2 - toBinaryString(decimal).length\n\
    \            toBinaryString(decimal) + (\"0\" * result) + \"db\"\n        }\n\
    \        loop(decimal, toBinaryString(decimal).length)", '        "db" + decimal.toBinaryString
    + "db"', "        def doit(decimal : Long, binary : String) : String = {\n   \
    \         if (decimal == 0) binary\n            else {\n                if (decimal\
    \ % 2 == 0) doit(decimal / 2, \"0\" + binary)\n                else doit(decimal\
    \ / 2, \"1\" + binary)\n            }\n        }\n        doit(decimal, \"\")",
  '        "db" + java.lang.Long.toBinaryString(decimal) + "db"', "        val binary\
    \ = decimal.toBinaryString\n        (\"db\" + binary + \"db\")", '        return
    "db" + java.lang.Long.toBinaryString(decimal) + "db"', '        return "db" +
    decimal.toBinaryString + "db"', "        var binary = \"db\"\n        var value\
    \ = decimal\n        while (value > 0) {\n            binary += (value % 2).toString\n\
    \            value /= 2\n        }\n        binary += \"db\"\n        binary",
  "        var temp : Long = decimal\n        var s : String = \"\"\n        while\
    \ (temp > 0) {\n            s = s + (temp % 2).toString\n            temp = temp\
    \ / 2\n        }\n        return \"db\" + s.reverse + \"db\"", "\tif (decimal\
    \ == 0) return \"db0db\"\n\tval first = 'd'\n\tval last = 'b'\n\tval sb = new\
    \ StringBuilder\n\tsb.append(first)\n\tvar current = decimal\n\tvar i = 0\n\t\
    while (current != 0) {\n\t    i += 1\n\t    sb.append(current % 2)\n\t    current\
    \ /= 2\n\t}\n\tsb.reverse.append(last)\n\tsb.toString", '        "db" + (BigInt(decimal)
    toString(2)) + "db"', "        var ret = \"db\"\n        var decimalTmp = decimal\n\
    \        do {\n            val rest = decimalTmp % 2\n            ret = rest +\
    \ ret\n            decimalTmp = decimalTmp / 2\n        } while (decimalTmp !=\
    \ 0)\n        ret = ret + \"db\"\n        return ret", "        val binary = decimal.toBinaryString\n\
    \        \"db\" + binary + \"db\"", '        "db" + decimal.toBinaryString + "db"',
  '        null', "        val binary = \"db\" + decimal.toBinaryString + \"db\"\n\
    \        binary", "        val binary = new StringBuilder(\"db\")\n        var\
    \ value = decimal\n        while (value > 0) {\n            val rem = value %\
    \ 2\n            value = value / 2\n            binary.append(rem)\n        }\n\
    \        binary.append(\"db\").reverse.toString", "        def binaryBuilder(binary\
    \ : List[Char], decimal : Long) : List[Char] = {\n            if (decimal == 0)\
    \ binary\n            else binaryBuilder(((decimal%2) + '0').toChar :: binary,\
    \ decimal / 2)\n        }\n        \"db\" + binaryBuilder(Nil, decimal).mkString\
    \ + \"db\"", '        return "db" + decimal.toBinaryString + "db"', '        "db"
    + decimal.toBinaryString + "db"', '        ""', '        ""', "        var bin\
    \ = BigInt(decimal).toString(2);\n        var binStr = bin.toString();\n     \
    \   var result = \"db\" + binStr + \"db\";\n        return result;", "       \
    \ val buffer = new StringBuilder(\"db\")\n        var m = decimal\n        while\
    \ (m > 0) {\n            buffer.append(m % 2)\n            m /= 2\n        }\n\
    \        buffer.append(\"db\").reverse.toString", "        var binary : String\
    \ = \"\"\n        var n = decimal\n        while (n > 0) {\n            binary\
    \ = n % 2 + binary\n            n /= 2\n        }\n        \"db\" + binary + \"\
    db\"", "        val value = \"db\" + \"%32s\".format(decimal.toBinaryString).replace('\
    \ ', '0') + \"db\"\n        value", "        val c = ('0' to '1').toArray\n  \
    \      val builder = new StringBuilder()\n        def r(x : Long) : Unit = {\n\
    \            if (x != 0) {\n                r(x / 2)\n                builder.append(c(x\
    \ % 2))\n            }\n        }\n        builder.append(\"db\")\n        r(decimal)\n\
    \        builder.append(\"db\")\n        builder.toString", "        val buffer\
    \ = new StringBuilder\n        buffer += 'd'\n        buffer += 'b'\n        var\
    \ c = decimal\n        while (c > 0) {\n            buffer += ('0' + (c % 2).toInt)\n\
    \            c /= 2\n        }\n        buffer += 'd'\n        buffer += 'b'\n\
    \        buffer.toString.reverse", "        val binary = new StringBuilder()\n\
    \        var d = decimal\n        binary += 'd'\n        binary += 'b'\n     \
    \   while (d > 0) {\n            val rem = d % 2\n            binary += rem.toString()(0)\n\
    \            d /= 2\n        }\n        binary += 'd'\n        binary += 'b'\n\
    \        binary.toString().reverse", '        return "db" + Long.toBinaryString(decimal)
    + "db"', "        def binary(n : Long) : String = {\n            val bits = for\
    \ (i <- 0 to log(n) / log(2)) yield if ((n & (1 << i)) > 0) '1' else '0'\n   \
    \         \"db\" + bits.reverse.mkString + \"db\"\n        }\n        binary(decimal)",
  '        return "db" + decimal.toBinaryString + "db"', '        return "db" + decimal.toBinaryString
    + "db"', "        val result = new StringBuilder()\n        var n = decimal\n\
    \        while (n > 0) {\n            val b = (n % 2).toInt\n            n = n\
    \ / 2\n            result.append(b)\n        }\n        \"db\" + result.reverse.toString\
    \ + \"db\"", "\tval dummy = \"db\"\n\tval binaryString = \"%s%s%s\".format(dummy,\
    \ decimal.toBinaryString, dummy)\n\tbinaryString", '        "db" + decimal.toBinaryString
    + "db"', '        "db" + decimal.toBinaryString + "db"', "        \"db\" + decimal.toBinaryString.padTo(64,\
    \ '0').mkString + \"db\"", "\t\tval binary = decimal.toBinaryString\n\t\t\"db\"\
    \ + binary + \"db\""]
stop_tokens:
- "\n    }\n"
