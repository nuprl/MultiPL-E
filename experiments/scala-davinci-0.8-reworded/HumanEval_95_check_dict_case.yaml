name: HumanEval_95_check_dict_case
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a map, return true if all keys are strings in lower \n    // case\
  \ or all keys are strings in upper case, else return false.\n    // The function\
  \ should return false is the given map is empty.\n    // Examples:\n    // >>> checkDictCase((Map[String,String](\"\
  a\" -> \"apple\", \"b\" -> \"banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"\
  a\" -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
  \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
  , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
  Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
  \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" -> \"\
  12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String]) : Boolean\
  \ = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
  p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
  p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
  \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" -> \"\
  banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
  Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
  \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" -> \"\
  12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\" ->\
  \ \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
  \ == (false));\n    }\n\n}\n"
completions: ["      if (dict.size == 0) {\n        return false\n      }\n      var\
    \ keys = dict.keys.toList\n      var allUpper = true\n      var allLower = true\n\
    \      for (key <- keys) {\n        if (key != key.toUpperCase) {\n          allUpper\
    \ = false\n        }\n        if (key != key.toLowerCase) {\n          allLower\
    \ = false\n        }\n      }\n      return allUpper || allLower", '      dict.isEmpty
    || dict.map(_._1).map(x => x.toLowerCase == x).reduceLeft(_ && _) || dict.map(_._1).map(x
    => x.toUpperCase == x).reduceLeft(_ && _)', "        if (dict.isEmpty) return\
    \ false\n        var lower = true\n        var upper = true\n        for (key\
    \ <- dict.keys) {\n            if (key.exists(!_.isUpper)) upper = false\n   \
    \         if (key.exists(!_.isLower)) lower = false\n        }\n        lower\
    \ || upper", "\t\tdict.keys.exists(k => k.toLowerCase != k) && dict.keys.exists(k\
    \ => k.toUpperCase != k)", "        if (dict.isEmpty) false\n        else {\n\
    \            val keys = dict.keys.toList\n            if (keys.head.head.isLower)\
    \ {\n                !(keys.find(s => s.head.isUpper) != None)\n            }\
    \ else {\n                !(keys.find(s => s.head.isLower) != None)\n        \
    \    }\n        }", "        if (dict.keys.exists(k => !k.isInstanceOf[String]))\
    \ return false\n        var flag = true\n        for (k <- dict.keys.iterator)\
    \ {\n            if (k.isUpper) flag = true\n            else if (k.isLower) flag\
    \ = false\n            else return false\n        }\n        flag", "        //\
    \ Implement your solution here\n        true", '        return false', "     \
    \   if (dict.isEmpty) false\n        else {\n            val keys = dict.keys\n\
    \            val caseCheck = keys.head.equals(keys.head.toLowerCase)\n       \
    \     keys.forall((x) => x.equals(x.toLowerCase) == caseCheck)\n        }", " \
    \       if (dict.isEmpty) return false\n        val strs = dict.keys.toList\n\
    \        val bool = strs.head.toLowerCase() == strs.head.toUpperCase()\n     \
    \   bool && strs.forall(str => str.toLowerCase() == str.toUpperCase() == bool)",
  "        //TODO: Implement\n        false", "        var res = true\n        val\
    \ isLower = dict.keySet.head.head.isLower\n        for (k <- dict.keySet) {\n\
    \            if (k.head.isLower != isLower) {\n                res = false\n \
    \               return res\n            }\n        }\n        res", "        //\
    \ check if all lower case\n        val isLower = dict.forall { case (k,v) => k.forall(c\
    \ => Character.isLowerCase(c)) }\n        // check if all upper case\n       \
    \ val isUpper = dict.forall { case (k,v) => k.forall(c => Character.isUpperCase(c))\
    \ }\n        if (isLower) true\n        else if (isUpper) true\n        else false",
  "        // TODO\n        return true", '      dict.filterKeys(key => key.matches("^[a-z]*$")).size
    == dict.size || dict.filterKeys(key => key.matches("^[A-Z]*$")).size == dict.size',
  "        // Write your code here\n        true", '        ???', '        dict.isEmpty
    || (dict.keys.filter { key => key.toLowerCase == key }.size == dict.size || dict.keys.filter
    { key => key.toUpperCase == key }.size == dict.size)', "        // Fill Up this\
    \ function body\n        // `dict` is a Map of String to String\n        // `dict.keys`\
    \ is an Iterable of String\n        // `dict.keys.foreach` is a function that\
    \ takes in a function of type\n        //    `(String) => Unit` and applies it\
    \ to each key of the map `dict`\n        var flag = true\n        var lowerCase\
    \ = 0\n        var upperCase = 0\n        dict.keys.foreach { (x: String) => if\
    \ (x.toLowerCase() == x) lowerCase += 1 else upperCase += 1 }\n        if (lowerCase\
    \ != 0 && upperCase != 0) flag = false\n        return flag", "    \tif (dict.isEmpty)\
    \ {\n    \t\tfalse\n    \t} else {\n    \t\tval values = dict.values\n    \t\t\
    val lower = dict.filter(_._1.toLowerCase() == _._1)\n    \t\tval upper = dict.filter(_._1.toUpperCase()\
    \ == _._1)\n    \t\tif (lower.size == 0 || upper.size == 0) {\n    \t\t\tfalse\n\
    \    \t\t} else {\n    \t\t\tlower.values.equals(values) || upper.values.equals(values)\n\
    \    \t\t}\n    \t}", '        return false;', "        if (dict.keys.forall(key\
    \ => key.toLowerCase() == key)) true\n        else if (dict.keys.forall(key =>\
    \ key.toUpperCase() == key)) true\n        else false", "        if (dict.isEmpty)\
    \ {\n            return false\n        }\n        val lowerCaseKeys = dict.keys.filter(_.forall(_.isLower))\n\
    \        val upperCaseKeys = dict.keys.filter(_.forall(_.isUpper))\n        lowerCaseKeys.isEmpty\
    \ || upperCaseKeys.isEmpty", "        if (dict.isEmpty) false\n        else {\n\
    \            val keys = dict.keys\n            if (keys.exists(x => x.toUpperCase\
    \ != x)) false\n            else if (keys.exists(x => x.toLowerCase != x)) false\n\
    \            else true\n        }", "        // TODO: Implement\n        if (dict.size\
    \ == 0) return false\n        val upperKeys = dict.keys.filter(_.toUpperCase ==\
    \ _)\n        val lowerKeys = dict.keys.filter(_.toLowerCase == _)\n        if\
    \ (upperKeys.size > 0 && lowerKeys.size > 0) return false\n        else return\
    \ true", "        def checkDictCase_iter(dict : Map[String,String], lower : Boolean)\
    \ : Boolean = {\n            if (dict.isEmpty) return true\n            if (lower)\
    \ {\n                if (dict.head._1 == dict.head._1.toLowerCase) return checkDictCase_iter(dict.tail,\
    \ lower)\n                else return false\n            }\n            else {\n\
    \                if (dict.head._1 == dict.head._1.toUpperCase) return checkDictCase_iter(dict.tail,\
    \ lower)\n                else return false\n            }\n        }\n      \
    \  if (dict.isEmpty) return false\n        else {\n            if (dict.head._1\
    \ == dict.head._1.toLowerCase) return checkDictCase_iter(dict.tail, true)\n  \
    \          else if (dict.head._1 == dict.head._1.toUpperCase) return checkDictCase_iter(dict.tail,\
    \ false)\n            else return false\n        }", "        // write your code\
    \ here\n        null", "        var lowercaseKeys = true\n        var uppercaseKeys\
    \ = true\n        if (dict.size == 0)\n        \treturn false\n        for (key\
    \ <- dict.keys) {\n        \tif (key.toLowerCase == key)\n        \t\tuppercaseKeys\
    \ = false\n        \tif (key.toUpperCase == key)\n        \t\tlowercaseKeys =\
    \ false\n        }\n        return (lowercaseKeys || uppercaseKeys)", '        ???',
  "        dict.isEmpty match {\n            case true => false\n            case\
    \ false => dict.forall(x => x._1.toLowerCase == x._1 || x._1.toUpperCase == x._1)\n\
    \        }", '        dict.keys.forall(s => s.toLowerCase == s) || dict.keys.forall(s
    => s.toUpperCase == s)', '        dict.keySet.filter(x => x.matches("[A-Z]+")).size
    * dict.keySet.filter(x => x.matches("[a-z]+")).size == 0', '        false', '        ???',
  "        var result : Boolean = true\n        for (t <- dict) {\n            if\
    \ (t._1.toLowerCase() != t._1) result = false\n        }\n        for (t <- dict)\
    \ {\n            if (t._1.toUpperCase() != t._1) result = false\n        }\n \
    \       return result", "        // Implement a solution here\n        ???", " \
    \   \tvar a, b = 0\n    \tfor (x <- dict.keys) {\n    \t\tif (x.toUpperCase ==\
    \ x) {\n    \t\t\ta += 1\n    \t\t} else if (x.toLowerCase == x) {\n    \t\t\t\
    b += 1\n    \t\t}\n    \t}\n    \tif (a == dict.size || b == dict.size) {\n  \
    \  \t\treturn true\n    \t}\n    \treturn false", "        // Write your code\
    \ here.\n        var upper = 0\n        var lower = 0\n        dict.keys.foreach(i\
    \ => if (i.toUpperCase == i) upper += 1 else lower += 1)\n        if (upper ==\
    \ 0 || lower == 0) true else false", "\t\t//this can be rewritten using the all\
    \ method\n\t\tval keysUpper = dict.keys.forall(x => x.toUpperCase == x)\n\t\t\
    val keysLower = dict.keys.forall(x => x.toLowerCase == x)\n\t\tif(keysUpper ||\
    \ keysLower) true else false", "        if (dict.isEmpty) false\n        else\
    \ {\n            val lower = dict.keySet.forall(s => s.toLowerCase == s)\n   \
    \         val upper = dict.keySet.forall(s => s.toUpperCase == s)\n          \
    \  lower || upper\n        }", "        val (lower, upper) = dict.partition(_._1.toLowerCase\
    \ == _._1)\n        lower.size == 0 || upper.size == 0", "        var lc = 0\n\
    \        var uc = 0\n        for ((k,v) <- dict) {\n            if (k.toLowerCase.equals(k))\
    \ lc += 1\n            else if (k.toUpperCase.equals(k)) uc += 1\n        }\n\
    \        if (lc > 0 && uc > 0) return false\n        return true", "        //\
    \ Fill Up this function body\n        // `dict` contains an empty map `Map()`\n\
    \        if (dict.isEmpty) {\n            false\n        }\n        else {\n \
    \           val lowercase = dict.keys.forall(_.toLowerCase() == _)\n         \
    \   val uppercase = dict.keys.forall(_.toUpperCase() == _)\n            if (lowercase\
    \ || uppercase) {\n                true\n            }\n            else {\n \
    \               false\n            }\n        }", "        var upper = true\n\
    \        var lower = true\n        for (key <- dict.keys) {\n            if (key\
    \ != key.toLowerCase) {\n                lower = false\n            }\n      \
    \      if (key != key.toUpperCase) {\n                upper = false\n        \
    \    }\n        }\n        if (lower || upper) {\n            return true\n  \
    \      }\n        return false", "        val (lowerCaseKeys, upperCaseKeys) =\
    \ dict.keys.partition(_.forall(_.isLower))\n        (lowerCaseKeys.size > 0 &&\
    \ upperCaseKeys.size == 0) || (lowerCaseKeys.size == 0 && upperCaseKeys.size >\
    \ 0)", '        dict.keys.forall(_.toLowerCase == _) || dict.keys.forall(_.toUpperCase
    == _)', "    \tif (dict.size == 0) return false\n    \tval keys = dict.keys\n\
    \    \tval firstKey = keys.head\n    \tvar isAllUpperCase = firstKey.toUpperCase\
    \ == firstKey\n    \tvar isAllLowerCase = firstKey.toLowerCase == firstKey\n \
    \   \tval set = HashSet[String]()\n    \tfor (key <- keys) {\n    \t\tif (isAllUpperCase\
    \ && key.toUpperCase != key) return false\n    \t\tif (isAllLowerCase && key.toLowerCase\
    \ != key) return false\n    \t\tset += key\n    \t}\n    \treturn set.size ==\
    \ keys.size", "        if (dict.isEmpty) false\n        else {\n            val\
    \ keys = dict.keys\n            if (keys.forall(s => s.forall(c => c.isLower))\
    \ || keys.forall(s => s.forall(c => c.isUpper))) true\n            else false\n\
    \        }", '        // your code here', "        // Fill in the blanks.\n  \
    \      dict.isEmpty match {\n            case true => false\n            case\
    \ false =>\n                val r = dict.keys.map { k => k.forall(_.isUpper) }.reduce(_==_)\n\
    \                val b = dict.keys.map { k => k.forall(_.isLower) }.reduce(_==_)\n\
    \                r || b\n        }", "        dict.keys.map(k => k.toUpperCase).toSet.size\
    \ match {\n            case 1 => true\n            case _ => false\n        }",
  '        //Solution goes here..', "        // YOUR CODE HERE\n        if (dict.isEmpty)\
    \ false\n        else{\n          val dic = dict.map(_._1)\n          for (i <-\
    \ dic){\n            if(i.exists(_.isUpper)){\n              for (j <- dic){\n\
    \                if(j.exists(_.isLower)) return false\n              }\n     \
    \         return true\n            }\n            else{\n              for (j\
    \ <- dic){\n                if(j.exists(_.isUpper)) return false\n           \
    \   }\n              return true\n            }\n          }\n          false\n\
    \        }", "        // Fill Up this function body\n        // `dict` is a map\
    \ of type Map[String,String]\n        // use `dict.keys` to get all the keys\n\
    \        // use `key.isUpper` to check if all the keys are in upper case\n   \
    \     // use `key.isLower` to check if all the keys are in lower case\n      \
    \  false", "        for (i <- (0 until dict.keys.toList.length)) {\n         \
    \   if (dict.keys.toList(i).toUpperCase != dict.keys.toList(i) && dict.keys.toList(i).toLowerCase\
    \ != dict.keys.toList(i)) {\n                return false\n            }\n   \
    \     }\n        true", "        var up = 0\n        var down = 0\n        var\
    \ flag = true\n        for ((k,v) <- dict) if (k == k.toUpperCase) up += 1 else\
    \ down += 1\n        if (up == 0 && down == 0) flag = false\n        else if (up\
    \ > 0 && down > 0) flag = false\n        flag", "        if (dict.size == 0) {\n\
    \            false\n        } else {\n            dict.keys.forall(_.toLowerCase\
    \ == _) || dict.keys.forall(_.toUpperCase == _)\n        }", "        val ret\
    \ = dict.map(x => x._1.toLowerCase)\n        return ret == dict.keys", "     \
    \ val isAllUpperCase = dict.keys.filter(k => !k.isUpper).isEmpty\n      val isAllLowerCase\
    \ = dict.keys.filter(k => !k.isLower).isEmpty\n      !dict.isEmpty && (isAllUpperCase\
    \ || isAllLowerCase)", "        if (dict.size == 0) return false\n        else\
    \ {\n            dict.keys.head.head.isUpper match {\n                case true\
    \ => dict.keys.forall(x => x.head.isUpper == true)\n                case false\
    \ => dict.keys.forall(x => x.head.isLower == true)\n            }\n        }",
  "        dict.isEmpty match {\n            case true => return false\n         \
    \   case false => return false\n        }", '      null', "        if (dict.size\
    \ == 0) {\n            return false\n        }\n        var lowerCase = true\n\
    \        var upperCase = true\n        for (key <- dict.keys) {\n            if\
    \ (key.exists(_.isLower)) {\n                upperCase = false\n            }\n\
    \            if (key.exists(_.isUpper)) {\n                lowerCase = false\n\
    \            }\n        }\n        if (lowerCase || upperCase) {\n           \
    \ return true\n        }\n        return false", "        val s = dict.keys.toList.map(k\
    \ => k(0).isUpper).distinct\n        s.length == 1 && s(0) == false || s.length\
    \ == 1 && s(0) == true", '        dict.keys.toList.map(k => k.isUpper).contains(false)',
  '        // Your code goes here', "\t\t// TODO: fill the body of this function\n\
    \t\t// Replace \"true\" with the appropriate code\n\t\tdict.keys.forall(!_.isUpper)\
    \ || dict.keys.forall(!_.isLower)", '        // Fill in the function body below',
  "        if (dict.isEmpty) return false\n        dict.keySet.forall(x => x.toLowerCase\
    \ == x) || dict.keySet.forall(x => x.toUpperCase == x)", "        var case1 =\
    \ true\n        var case2 = true\n        for ((k, v) <- dict) {\n           \
    \ if (k.exists(!_.isUpper)) {\n                case1 = false\n            }\n\
    \            if (k.exists(!_.isLower)) {\n                case2 = false\n    \
    \        }\n        }\n        return case1 || case2", "        // Fill in the\
    \ implementation\n        false", "        // Your code here\n        return false",
  "        if (dict.size == 0) return false\n        var lowerSet = Set[String]()\n\
    \        var upperSet = Set[String]()\n        for (key <- dict.keys) {\n    \
    \        var keyLower = key.toLowerCase\n            var keyUpper = key.toUpperCase\n\
    \            if (keyLower == key) lowerSet += key\n            else if (keyUpper\
    \ == key) upperSet += key\n            else return false\n        }\n        if\
    \ (lowerSet.size == 0 || upperSet.size == 0) return true\n        else return\
    \ false", "        // fill in the implementation\n        return false", "\t\t\
    \n\t}\n}", '        ???', "        val r = dict.filter(x => !x._1.toLowerCase.equals(x._1))\n\
    \        if (r.isEmpty) return true\n        return false", '        dict.forall(_._1.matches("[a-z]+"))
    || dict.forall(_._1.matches("[A-Z]+"))', '        dict.keys.forall(key => key.toLowerCase
    == key || key.toUpperCase == key)', "        // Fill In\n        ???", '        dict.isEmpty
    || dict.forall(x => x._1.toLowerCase == x._1) || dict.forall(x => x._1.toUpperCase
    == x._1)', "      val keysLowerCase = dict.keySet.toList.filter(_.forall(_.isLower))\n\
    \      val keysUpperCase = dict.keySet.toList.filter(_.forall(_.isUpper))\n  \
    \    if (keysLowerCase.size == dict.size || keysUpperCase.size == dict.size)\n\
    \        true\n      else\n        false", "        if (dict.isEmpty) false\n\
    \        else {\n            val lowercase = dict.keySet.forall(_.isLowerCase)\n\
    \            val uppercase = dict.keySet.forall(_.isUpperCase)\n            lowercase\
    \ || uppercase\n        }", "        if (dict.isEmpty) false\n        else {\n\
    \            val isUpper = dict.head._1 == dict.head._1.toUpperCase\n        \
    \    dict.forall(kv => kv._1 == kv._1.toUpperCase) == isUpper\n        }", '        ???',
  '        ???', "        // TODO: Write down your code here\n        if (dict.size\
    \ == 0) return false\n        val str = dict.keys.toList(0)\n        var check\
    \ = true\n        for (i <- 0 until str.length) {\n            val a = str(i)\n\
    \            if (a.isLower) check = false\n        }\n        for (i <- 0 until\
    \ str.length) {\n            val a = str(i)\n            if (a.isUpper) check\
    \ = false\n        }\n        check", '        return false', "        // TODO:\
    \ implement the function here, and return the correct value\n        val allUpper\
    \ = dict.keys.filter(k => k == k.toUpperCase)\n        val allLower = dict.keys.filter(k\
    \ => k == k.toLowerCase)\n        if (allUpper.size == dict.size || allLower.size\
    \ == dict.size)\n            true\n        else\n            false", '      ???',
  "        val upperCase = dict.forall(_._1.toUpperCase == _._1)\n        val lowerCase\
    \ = dict.forall(_._1.toLowerCase == _._1)\n        if (upperCase || lowerCase)\
    \ true else false", '        return true', '        ???', "        if (dict.isEmpty)\
    \ {\n            return false\n        }\n        if (dict.keys.forall(x => x.forall(y\
    \ => y.isUpper))) {\n            true\n        } else if (dict.keys.forall(x =>\
    \ x.forall(y => y.isLower))) {\n            true\n        } else {\n         \
    \   false\n        }", "        if (dict.isEmpty) false\n        else {\n    \
    \        // 1. \u5224\u65AD\u662F\u5927\u5199\u8FD8\u662F\u5C0F\u5199\n      \
    \      val isLower = dict.keys.head.charAt(0).isLower\n            // 2. \u5224\
    \u65AD\u5176\u4ED6\u7684\u952E\u662F\u5426\u90FD\u7B26\u5408\u5927\u5C0F\u5199\
    \u8981\u6C42\n            val isLegal = dict.keys.forall(_.charAt(0).isLower ==\
    \ isLower)\n            // 3. \u8FD4\u56DE\u7ED3\u679C\n            isLegal\n\
    \        }", "\t\tvar key = dict.keys\n\t\tvar upper = key.filter(str => str ==\
    \ str.toUpperCase)\n\t\tvar lower = key.filter(str => str == str.toLowerCase)\n\
    \t\tif (dict.size == 0) false else if (upper.size == key.size || lower.size ==\
    \ key.size) true else false", "        if (dict.isEmpty) false\n        else {\n\
    \            var x = dict.keys.toList\n            var z = true\n            if\
    \ (x.head.apply(0).isUpper) {\n                x.foreach(e => z &&= e.apply(0).isUpper)\n\
    \            }\n            else {\n                x.foreach(e => z &&= e.apply(0).isLower)\n\
    \            }\n            z\n        }", "        if (dict.isEmpty) false\n\
    \        else if (dict.keys.toList.head.head.isLower) {\n            if (dict.keys.toList.forall(c\
    \ => c.head.isLower)) true\n            else false\n        }\n        else if\
    \ (dict.keys.toList.head.head.isUpper) {\n            if (dict.keys.toList.forall(c\
    \ => c.head.isUpper)) true\n            else false\n        }\n        else false",
  '        ???', '        dict.keys.forall(k => k.toLowerCase == k) || dict.keys.forall(k
    => k.toUpperCase == k)', "        // Fill in your code here\n        // dict.keys.toList.exists(x\
    \ => x.toUpperCase == x.toLowerCase)\n        dict.keys.toList.forall(x => x.toUpperCase\
    \ == x.toLowerCase)", "        if (dict.size == 0) false\n        else {\n   \
    \     \tval case0 = dict.keys.head.charAt(0).isUpper\n        \tvar case1 = true\n\
    \        \tfor (key <- dict.keys) {\n        \t    case1 = case1 && (key.charAt(0).isUpper\
    \ == case0)\n        \t}\n        \tcase1\n        }", '        ???', "      \
    \  val keys = dict.keys.toList\n        val keyChars = keys.mkString.toCharArray\n\
    \        val lower = keyChars.forall(c => c.isLower)\n        val upper = keyChars.forall(c\
    \ => c.isUpper)\n        lower || upper", "\t\tdict.isEmpty", "        // Insert\
    \ code here\n        return false", "        // See if first key is upper case.\n\
    \        // If there is no first key, return false.\n        if (dict.size ==\
    \ 0) return false\n        val firstKey : String = dict.head._1\n        val firstUpper\
    \ : Boolean = (firstKey == firstKey.toUpperCase)\n        // Now see if all keys\
    \ are upper or lower case.\n        // If not, return false.\n        for (entry\
    \ <- dict) {\n            val key : String = entry._1\n            if (firstUpper\
    \ != (key == key.toUpperCase)) {\n                return false\n            }\n\
    \        }\n        // All keys match either upper or lower case.\n        return\
    \ true", '        ???', '        true', "        val (lowerKeys, upperKeys) =\
    \ dict.keys.partition(_.matches(\"\"\"[a-z]+\"\"\"))\n        (lowerKeys.size\
    \ == dict.size || upperKeys.size == dict.size) && dict.keys.forall(_.matches(\"\
    \"\"[a-zA-Z]+\"\"\"))", "\t\tval validLower = dict.keys.forall(x => x.exists(y\
    \ => y.isLower))\n\t\tval validUpper = dict.keys.forall(x => x.exists(y => y.isUpper))\n\
    \t\tif (validLower || validUpper)\n\t\t\ttrue\n\t\telse\n\t\t\tfalse", "     \
    \   // Write your code here\n        false", '        dict.keys.forall(key =>
    key.isUpper || key.isLower)', '        dict.keys.forall(key => key.toLowerCase
    == key || key.toUpperCase == key)', "        def go(dict : Map[String,String],\
    \ lowerCase : Boolean) : Boolean = {\n            if (dict.isEmpty)\n        \
    \        true\n            else if (lowerCase)\n                if (dict.head._1.toLowerCase\
    \ == dict.head._1)\n                    go(dict.tail, lowerCase)\n           \
    \     else\n                    false\n            else\n                if (dict.head._1.toUpperCase\
    \ == dict.head._1)\n                    go(dict.tail, lowerCase)\n           \
    \     else\n                    false\n        }\n        if (dict.isEmpty)\n\
    \            false\n        else if (dict.head._1.toLowerCase == dict.head._1)\n\
    \            go(dict.tail, true)\n        else if (dict.head._1.toUpperCase ==\
    \ dict.head._1)\n            go(dict.tail, false)\n        else\n            false",
  "        if (dict.size == 0) return false\n        var upper = false\n        var\
    \ lower = false\n        for (key <- dict.keys) {\n            if (key.toUpperCase\
    \ == key) {\n                upper = true\n            } else if (key.toLowerCase\
    \ == key) {\n                lower = true\n            } else {\n            \
    \    return false\n            }\n        }\n        if (upper && lower) {\n \
    \           return false\n        } else {\n            return true\n        }",
  "        if (dict.isEmpty) return false\n        val allKeysLower = dict.keys.forall(_.isAllLowerCase)\n\
    \        if (allKeysLower) return true\n        val allKeysUpper = dict.keys.forall(_.isAllUpperCase)\n\
    \        if (allKeysUpper) return true\n        return false", "        val keys\
    \ = dict.keys.toList\n        if (keys.isEmpty) return false\n        val regex\
    \ = \"(?i).*[a-z].*\".r\n        val lowerString = dict.keys.map(x => x.matches(regex.toString))\n\
    \        return !lowerString.contains(true) || !lowerString.contains(false)",
  "        def check(items : Map[String,String], checkLower : Boolean) : Boolean =\
    \ {\n            if (items.size == 0) true\n            else {\n             \
    \   val head = items.head\n                if (head._1.forall(c => c.isLower)\
    \ == checkLower)\n                    check(items.tail, checkLower)\n        \
    \        else false\n            }\n        }\n        if (dict.size == 0) false\n\
    \        else {\n            val head = dict.head\n            if (head._1.forall(c\
    \ => c.isLower)) check(dict.tail, true)\n            else if (head._1.forall(c\
    \ => c.isUpper)) check(dict.tail, false)\n            else false\n        }",
  "        if (dict.isEmpty) {\n            return false\n        }\n        if (dict.forall((pair)\
    \ => (pair._1.forall((c) => c.isUpper)) && (pair._2.forall((c) => c.isUpper))))\
    \ {\n            return true\n        }\n        if (dict.forall((pair) => (pair._1.forall((c)\
    \ => c.isLower)) && (pair._2.forall((c) => c.isLower)))) {\n            return\
    \ true\n        }\n        return false", '        dict.keys.forall(s => (s ==
    s.toLowerCase) || (s == s.toUpperCase))', "        // Your code goes here\n  \
    \      return false", "        if (dict.isEmpty) return false\n        var isAllLower\
    \ = true\n        var isAllUpper = true\n        for (e <- dict) {\n         \
    \   isAllLower &= e._1.forall(_.isLower)\n            isAllUpper &= e._1.forall(_.isUpper)\n\
    \        }\n        return isAllLower || isAllUpper", "        val cases = (dict\
    \ map (_._1)) groupBy (_.toUpperCase == _)\n        if (cases.size > 1) false\
    \ else cases.head._1", "        val xs = dict.keys.toList.sortWith((s1, s2) =>\
    \ s1 < s2)\n        if (xs.isEmpty) {\n            false\n        } else {\n \
    \           val c = xs.head(0)\n            xs.foreach(x => if (x(0) != c) return\
    \ false)\n            true\n        }", "        if (dict.size == 0) return false\n\
    \        val fst = dict.keys.head\n        val u = fst.toUpperCase\n        val\
    \ l = fst.toLowerCase\n        if (fst == u)\n            dict.keys.forall(_.toUpperCase\
    \ == _)\n        else if (fst == l)\n            dict.keys.forall(_.toLowerCase\
    \ == _)\n        else\n            false", '      ???', "        var result =\
    \ true\n        val isLower = new HashMap[String, Boolean]\n        val isUpper\
    \ = new HashMap[String, Boolean]\n        if (dict.isEmpty)\n            result\
    \ = false\n        else\n            for ((k, v) <- dict) {\n                if\
    \ (k == k.toLowerCase) {\n                    isLower(k) = true\n            \
    \        isUpper(k) = false\n                }\n                else if (k ==\
    \ k.toUpperCase) {\n                    isLower(k) = false\n                 \
    \   isUpper(k) = true\n                }\n                else {\n           \
    \         result = false\n                    return result\n                }\n\
    \            }\n        for ((k, v) <- isLower) {\n            if (v && isUpper(k))\
    \ {\n                result = false\n                return result\n         \
    \   }\n        }\n        result", "        def checkDictCase0(keys : Iterable[String],\
    \ isKeyUpper : Boolean, isKeyLower : Boolean) : Boolean = {\n            if (keys.isEmpty)\
    \ return false\n            else if (keys.head.toUpperCase == keys.head) {\n \
    \               if (isKeyLower) return false\n                else checkDictCase0(keys.tail,\
    \ true, false)\n            }\n            else if (keys.head.toLowerCase == keys.head)\
    \ {\n                if (isKeyUpper) return false\n                else checkDictCase0(keys.tail,\
    \ false, true)\n            }\n            else return false\n        }\n    \
    \    checkDictCase0(dict.keys, false, false)", "        val n = dict.size\n  \
    \      var allLower = true\n        var allUpper = true\n        dict.foreach(e\
    \ => {\n            if (e._1 != e._1.toLowerCase) allLower = false\n         \
    \   if (e._1 != e._1.toUpperCase) allUpper = false\n        })\n        (allLower\
    \ || allUpper) && (n > 0)", '        return false', "        if (dict.isEmpty)\
    \ {\n            false\n        } else {\n            val lower = dict.keys.forall(_.matches(\"\
    [a-z]+\"))\n            val upper = dict.keys.forall(_.matches(\"[A-Z]+\"))\n\
    \            if (!lower && !upper) false else true\n        }", '        // YOUR
    CODE HERE', "      val s = dict.keys.filter(x => x.charAt(0).isLower).toSet\n\
    \      val S = dict.keys.filter(x => x.charAt(0).isUpper).toSet\n      (s.size\
    \ == 0 && S.size == dict.size) || (S.size == 0 && s.size == dict.size)", "   \
    \     var upperCase = false\n        var lowerCase = false\n        for (key <-\
    \ dict.keys) {\n            if (key.toUpperCase == key) upperCase = true\n   \
    \         if (key.toLowerCase == key) lowerCase = true\n        }\n        if\
    \ (upperCase && lowerCase) return false\n        else return true", "        if\
    \ (dict.isEmpty) return false\n        var lower = true\n        var upper = true\n\
    \        for (key <- dict.keys) {\n            if (key.toLowerCase() != key) lower\
    \ = false\n            if (key.toUpperCase() != key) upper = false\n        }\n\
    \        lower || upper", "        // Fill in the code here\n        val result\
    \ = dict.filter{case (x, y) => x.isInstanceOf[String] && y.isInstanceOf[String]}\n\
    \        val check = result.keys.forall(_.toUpperCase == _)\n        val check2\
    \ = result.keys.forall(_.toLowerCase == _)\n        if(check || check2) {true}\
    \ else {false}", "        val lower = dict.keys.filter { key =>\n            key\
    \ == key.toLowerCase\n        }\n        val upper = dict.keys.filter { key =>\n\
    \            key == key.toUpperCase\n        }\n        dict.keys.size == lower.size\
    \ || dict.keys.size == upper.size", '        return true', "      if (dict.isEmpty)\
    \ {\n        false\n      } else {\n        dict.keySet.forall(x => x.toLowerCase\
    \ == x || x.toUpperCase == x)\n      }", '        true', "        def isUpper(str\
    \ : String) : Boolean = {\n            for (ch <- str) {\n                if (ch.isUpper)\
    \ return true\n            }\n            return false\n        }\n        var\
    \ upper = false\n        var lower = false\n        for (key <- dict.keys) {\n\
    \            if (isUpper(key)) upper = true\n            else lower = true\n \
    \       }\n        return upper ^ lower", "        var (lower, upper) = (true,\
    \ true)\n        for (key <- dict.keys) {\n            if (key.exists(c => c.isLower))\
    \ lower = false\n            if (key.exists(c => c.isUpper)) upper = false\n \
    \       }\n        if (dict.size == 0) false\n        else lower || upper", " \
    \       // Your code goes here...\n        return false", "        if (dict.size\
    \ == 0) return false\n        val firstStr = dict.keys.head\n        if (firstStr.forall(_.isLower))\
    \ {\n            for (s <- dict.keys) {\n                if (!s.forall(_.isLower))\
    \ return false\n            }\n        } else if (firstStr.forall(_.isUpper))\
    \ {\n            for (s <- dict.keys) {\n                if (!s.forall(_.isUpper))\
    \ return false\n            }\n        } else {\n            return false\n  \
    \      }\n        return true", '        ???', '        return false', '        return
    false;', '      return true', '        dict.keys.filter(_.isLowerCase).size ==
    dict.size || dict.keys.filter(_.isUpperCase).size == dict.size', "        val\
    \ upper = dict.keys.forall(k => k.forall(c => c.isUpper))\n        val lower =\
    \ dict.keys.forall(k => k.forall(c => c.isLower))\n        (upper || lower) &&\
    \ !dict.isEmpty", "        if (dict.isEmpty) return false\n        val testValue\
    \ = dict.keys.toList(0)\n        if (testValue.toUpperCase.equals(testValue))\
    \ {\n            return dict.keys.forall(_.toUpperCase.equals(_))\n        } else\
    \ if (testValue.toLowerCase.equals(testValue)) {\n            return dict.keys.forall(_.toLowerCase.equals(_))\n\
    \        } else {\n            return false\n        }", "        // Your code\
    \ here\n        var upper = true\n        var lower = true\n        for (k <-\
    \ dict.keys) {\n            if (!k.equals(k.toUpperCase)) {\n                upper\
    \ = false\n            }\n            if (!k.equals(k.toLowerCase)) {\n      \
    \          lower = false\n            }\n        }\n        if (upper || lower)\
    \ true else false", "    \tdict.isEmpty || dict.keys.forall(s => s.isUpper ||\
    \ s.isLower)", "        var lowerCase = dict.filter(key => key._1.toLowerCase()\
    \ == key._1)\n        var upperCase = dict.filter(key => key._1.toUpperCase()\
    \ == key._1)\n        var isLower = lowerCase.size == dict.size\n        var isUpper\
    \ = upperCase.size == dict.size\n        isLower || isUpper", "        if (dict.isEmpty)\
    \ false\n        else {\n            var case_type = 0\n            for (k <-\
    \ dict.keys) {\n                if (k.toLowerCase == k) {\n                  \
    \  if (case_type == 0) case_type = 1\n                    else if (case_type ==\
    \ 2) return false\n                }\n                else if (k.toUpperCase ==\
    \ k) {\n                    if (case_type == 0) case_type = 2\n              \
    \      else if (case_type == 1) return false\n                }\n            \
    \    else return false\n            }\n            return true\n        }", '        false',
  "        val l = dict.keys.toList\n        if (l.size == 0) false\n        else\
    \ {\n            val x = l(0)\n            if (x.toUpperCase == x) {\n       \
    \         for (key <- l) {\n                    if (key.toUpperCase != key) return\
    \ false\n                }\n                true\n            }\n            else\
    \ {\n                for (key <- l) {\n                    if (key.toLowerCase\
    \ != key) return false\n                }\n                true\n            }\n\
    \        }", "        var result = true\n        var upper = false\n        var\
    \ lower = false\n        if (dict.nonEmpty) {\n            for ((k, v) <- dict)\
    \ {\n                if (k.forall(_.isUpper)) upper = true\n                else\
    \ if (k.forall(_.isLower)) lower = true\n                else { result = false;\
    \ return result }\n            }\n            result = (upper && !lower) || (!upper\
    \ && lower)\n        }\n        result", "        var upper = 0\n        var lower\
    \ = 0\n        for ((k, v) <- dict) {\n            if (k.toUpperCase.equals(k))\
    \ upper += 1\n            else lower += 1\n        }\n        if (upper > 0 &&\
    \ lower > 0) false\n        else true", "        val upperDict = dict.filter(key\
    \ => key._1.forall(_.isUpper))\n        val lowerDict = dict.filter(key => key._1.forall(_.isLower))\n\
    \        upperDict.isEmpty || lowerDict.isEmpty", '        dict.keySet.forall(k
    => k.toLowerCase == k) || dict.keySet.forall(k => k.toUpperCase == k)', '      dict.keys.forall(_.forall(_.isUpper))
    || dict.keys.forall(_.forall(_.isLower))', "        // Your Code Here\n      \
    \  true", "        if (dict.isEmpty) return false\n        val keys = dict.keys\n\
    \        val lowerCase = (keys.forall(s => s.toLowerCase == s))\n        val upperCase\
    \ = (keys.forall(s => s.toUpperCase == s))\n        (lowerCase || upperCase)",
  "      val str = dict.keys.head\n      val ans = dict.keys.foldLeft(str.isUpper)((x,\
    \ y) => if(x != y.isUpper) false else x)\n      if(ans) true else false", "  \
    \  \tif (dict.isEmpty) false\n    \telse {\n    \t\tval t = dict.keys.head\n \
    \   \t\tif (t.head.isUpper) {\n    \t\t\tif (dict.keys.forall(x => x.head.isUpper))\
    \ true\n    \t\t\telse false\n    \t\t}\n    \t\telse {\n    \t\t\tif (dict.keys.forall(x\
    \ => x.head.isLower)) true\n    \t\t\telse false\n    \t\t}\n    \t}", "     \
    \   // Your code here\n        var upperKey = 0\n        var lowerKey = 0\n  \
    \      for ((k,v) <- dict) {\n            if (k == k.toUpperCase) {\n        \
    \        upperKey += 1\n            } else if (k == k.toLowerCase) {\n       \
    \         lowerKey += 1\n            }\n        }\n        if (upperKey == dict.size\
    \ || lowerKey == dict.size) {\n            return true\n        } else {\n   \
    \         return false\n        }", "        if (dict.size == 0) {\n         \
    \   false\n        } else {\n            val check1 = dict.keySet.forall(s =>\
    \ s.equals(s.toLowerCase))\n            val check2 = dict.keySet.forall(s => s.equals(s.toUpperCase))\n\
    \            (check1 || check2)\n        }", "\t\tif (dict.isEmpty) return false\n\
    \t\tvar lower = true\n\t\tvar upper = true\n\t\tfor (t <- dict) {\n\t\t\tlower\
    \ &= t._1.forall(_.isLower)\n\t\t\tupper &= t._1.forall(_.isUpper)\n\t\t}\n\t\t\
    return lower || upper", "        val l = dict.keys.forall(k => k.toLowerCase ==\
    \ k)\n        val u = dict.keys.forall(k => k.toUpperCase == k)\n        l ||\
    \ u", "        // Your code here\n        var lower = false\n        var upper\
    \ = false\n        if (dict.isEmpty) {\n            return false\n        }\n\
    \        for ((k,v) <- dict) {\n            var a = k.toLowerCase\n          \
    \  var b = k.toUpperCase\n            if (k == a) {\n                lower = true\n\
    \            }\n            if (k == b) {\n                upper = true\n    \
    \        }\n        }\n        if (lower ^ upper) {\n            return true\n\
    \        }\n        return false", "        // Fill up this function body\n  \
    \      // You may create other functions as well, if required\n        return\
    \ false", "        var result = true\n        val cases = dict.keys.map(k => {\n\
    \            if (k == k.toLowerCase()) {\n                \"LOWER\"\n        \
    \    } else if (k == k.toUpperCase()) {\n                \"UPPER\"\n         \
    \   } else {\n                \"MIXED\"\n            }\n        })\n        val\
    \ set = cases.toSet\n        if (set.size > 1) result = false\n        result",
  "        dict.foreach(i => if (i._1.toLowerCase != i._1 && i._1.toUpperCase != i._1)\
    \ return false)\n        dict.foreach(i => if (i._1.toLowerCase == i._1) dict.foreach(j\
    \ => if (j._1.toUpperCase == j._1) return false))\n        dict.foreach(i => if\
    \ (i._1.toUpperCase == i._1) dict.foreach(j => if (j._1.toLowerCase == j._1) return\
    \ false))\n        return true", "        if (dict.isEmpty) {\n            false\n\
    \        } else {\n            val keys = dict.keys.toList.map(key => key.toLowerCase\
    \ == key || key.toUpperCase == key)\n            keys.distinct.length == 1\n \
    \       }", "        //your code goes here\n        return false", "        var\
    \ keySet = dict.keySet\n        if (keySet.isEmpty) return false\n        var\
    \ b = true\n        if (keySet.head.exists(_.isLower)) {\n            keySet.foreach(key\
    \ => if (!key.exists(_.isLower)) b = false)\n        } else {\n            keySet.foreach(key\
    \ => if (!key.exists(_.isUpper)) b = false)\n        }\n        b", "        var\
    \ lc = true\n        var uc = true\n        for (k <- dict.keys) {\n         \
    \   lc = lc && k.toLowerCase == k\n            uc = uc && k.toUpperCase == k\n\
    \        }\n        lc || uc", "\t\t// Implement the checkDictCase function.\n\
    \        var flag=true\n        var flag1=false\n        var flag2=false\n   \
    \     var flag3=false\n        var map=dict.keys\n        if(map.isEmpty){\n \
    \           return false\n        }\n        for(x<-map){\n            var s=x.getClass\n\
    \            if(!s.equals(\"String\")){\n                flag=false\n        \
    \    }\n        }\n        if(flag==true){\n            for(x<-map){\n       \
    \         if(x.exists(_.isUpper)){\n                    flag1=true\n         \
    \       }\n                if(x.exists(_.isLower)){\n                    flag2=true\n\
    \                }\n            }\n            if(flag1==true && flag2==true){\n\
    \                flag3=false\n            }\n            else if(flag1==true ||\
    \ flag2==true){\n                flag3=true\n            }\n        }\n      \
    \  return flag3", "        val s = dict.keys.toList(0)\n        val check = s(0).isUpper\n\
    \        dict.keys.forall(a => a(0).isUpper == check)", "        // If given map\
    \ is empty return false\n        if (dict.isEmpty) {\n            return false\n\
    \        }\n        // This flag will be set to true if the first encountered\
    \ key is in lower case\n        var isLowerCase = true\n        // This flag will\
    \ be set to true if the first encountered key is in upper case\n        var isUpperCase\
    \ = true\n        // Iterate over every element of the map and determine if the\
    \ key is in upper case or lower case\n        for (elem <- dict) {\n         \
    \   // If the current element is in lower case and the flag is still true, \n\
    \            // set the lower case flag to true\n            if (elem._1.toLowerCase\
    \ == elem._1 && isLowerCase) {\n                isLowerCase = true\n         \
    \   }\n            // If the current element is in upper case and the flag is\
    \ still true, \n            // set the upper case flag to true\n            else\
    \ if (elem._1.toUpperCase == elem._1 && isUpperCase) {\n                isUpperCase\
    \ = true\n            }\n            // If the current element is in lower case\
    \ and the lower case flag is set to false, \n            // return false\n   \
    \         else if (elem._1.toLowerCase == elem._1 && !isLowerCase) {\n       \
    \         return false\n            }\n            // If the current element is\
    \ in upper case and the upper case flag is set to false, \n            // return\
    \ false\n            else if (elem._1.toUpperCase == elem._1 && !isUpperCase)\
    \ {\n                return false\n            }\n            // If the current\
    \ element is in lower case and the upper case flag is set to true, \n        \
    \    // set the upper case flag to false\n            else if (elem._1.toLowerCase\
    \ == elem._1 && isUpperCase) {\n                isUpperCase = false\n        \
    \    }\n            // If the current element is in upper case and the lower case\
    \ flag is set to true, \n            // set the lower case flag to false\n   \
    \         else if (elem._1.toUpperCase == elem._1 && isLowerCase) {\n        \
    \        isLowerCase = false\n            }\n        }\n        // If the lower\
    \ case flag is set to", "        var lk = false\n        var uk = false\n    \
    \    for (key <- dict.keys) {\n            if (key.charAt(0).isLower) lk = true\n\
    \            else uk = true\n        }\n        if (lk && uk) false\n        else\
    \ true", "        dict.keys.count(x => x.head.isUpper) match {\n            case\
    \ 0 => {\n                return true\n            }\n            case _ => {\n\
    \                dict.keys.count(x => x.head.isLower) match {\n              \
    \      case 0 => {\n                        return true\n                    }\n\
    \                    case _ => {\n                        return false\n     \
    \               }\n                }\n            }\n        }", "        if (dict.isEmpty)\
    \ return false\n        val lower = dict.keys.filter(_ == _.toLowerCase()).size\n\
    \        val upper = dict.keys.filter(_ == _.toUpperCase()).size\n        return\
    \ lower == dict.size || upper == dict.size", "\tdict.keys.forall(_.isLowerCase)\
    \ || dict.keys.forall(_.isUpperCase)", "        if (dict.size == 0) false\n  \
    \      else {\n            var upper = true\n            var lower = true\n  \
    \          dict.foreach(x => {\n                upper = upper && (x._1.toUpperCase\
    \ == x._1)\n                lower = lower && (x._1.toLowerCase == x._1)\n    \
    \        })\n            upper || lower\n        }", "        // Fill in the correct\
    \ code\n        var s = true\n        var u = true\n        for(x <- dict) {\n\
    \            if (x._1.toLowerCase != x._1) s = false\n            if (x._1.toUpperCase\
    \ != x._1) u = false\n        }\n        if (s || u) true else false", "     \
    \   val keys = dict.keys.toList\n        val upper = keys.filter(x => x.toUpperCase()\
    \ == x)\n        val lower = keys.filter(x => x.toLowerCase() == x)\n        (upper.length\
    \ == keys.length || lower.length == keys.length)", "      // we keep track of\
    \ the status of each key (upper/lower) and at\n      // the end compare the size\
    \ of the 2 sets to see if they differ\n      val (lowerCaseSet, upperCaseSet)\
    \ = dict.keys.foldLeft(Set[String](), Set[String]()) { (s, k) =>\n        if (k.toLowerCase\
    \ == k)\n          (s._1 + k, s._2)\n        else if (k.toUpperCase == k)\n  \
    \        (s._1, s._2 + k)\n        else\n          (s._1, s._2)\n      }\n   \
    \   lowerCaseSet.size == 0 || upperCaseSet.size == 0", "      if (dict.isEmpty)\
    \ false\n      else if (dict.forall(_._1.forall(_.isUpper))) true\n      else\
    \ if (dict.forall(_._1.forall(_.isLower))) true\n      else false", '        return
    true', "        // The default comparer works here too\n        // val lc = dict.keys.groupBy(x\
    \ => x.toLowerCase)\n        // val uc = dict.keys.groupBy(x => x.toUpperCase)\n\
    \        // return !lc.values.exists(x => x.size > 1) || !uc.values.exists(x =>\
    \ x.size > 1)\n        return !dict.keys.groupBy(x => x.toLowerCase).values.exists(x\
    \ => x.size > 1) || !dict.keys.groupBy(x => x.toUpperCase).values.exists(x =>\
    \ x.size > 1)", "        var allLower = true\n        var allUpper = true\n  \
    \      for (i <- dict.keys) {\n            if (i == i.toLowerCase) {\n       \
    \         allUpper = false\n            } else if (i == i.toUpperCase) {\n   \
    \             allLower = false\n            } else {\n                return false\n\
    \            }\n        }\n        if (allLower) {\n            return true\n\
    \        } else if (allUpper) {\n            return true\n        } else {\n \
    \           return false\n        }", '        false', '        // Your code here',
  "        //val s = dict.map(x => (x._1(0).isUpper, x._1(0).isLower))\n        //s.toSet.size\
    \ == 1\n        dict.forall(x =>  x._1.matches(\"[a-z]+\") || x._1.matches(\"\
    [A-Z]+\"))", "    \tvar lower = true\n    \tvar upper = true\n    \tfor (key <-\
    \ dict.keys) {\n    \t\tlower = lower && (key == key.toLowerCase)\n    \t\tupper\
    \ = upper && (key == key.toUpperCase)\n    \t}\n    \tlower || upper", "     \
    \   // Your code here\n        false", "        var allUpper = true\n        var\
    \ allLower = true\n        for ((k,v) <- dict) {\n            allUpper &= (k.toUpperCase\
    \ == k)\n            allLower &= (k.toLowerCase == k)\n        }\n        allUpper\
    \ || allLower"]
stop_tokens:
- "\n    }\n"
