language: scala
name: HumanEval_53_add
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        x + y\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l),\
    \ (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l),\
    \ (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l),\
    \ (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979126
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        x + y\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l),\
    \ (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l),\
    \ (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l),\
    \ (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979126
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        return x + y\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(add((0l), (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n  \
    \  assert(add((2l), (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n \
    \   assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979126
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        var sum = x\n        var carryin = y\n        var k = 1l\n    \
    \    var temp_a = x\n        var temp_b = y\n        while (temp_a != 0 || temp_b\
    \ != 0) {\n            val ak = x & k\n            val bk = y & k\n          \
    \  val carryout = (ak & bk) | (ak & carryin) | (bk & carryin)\n            sum\
    \ = sum ^ (ak ^ bk ^ carryin)\n            carryin = carryout << 1\n         \
    \   k = k << 1\n            temp_a = temp_a >> 1\n            temp_b = temp_b\
    \ >> 1\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(add((0l), (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n\
    \    assert(add((2l), (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n\
    \    assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2sqxpv92.scala:28)\n\tat Problem.main(tmp2sqxpv92.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979126
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        var sum : Long = 0\n        var xBit : Long = x\n        var yBit\
    \ : Long = y\n        var carry : Long = 0\n        for (i <- 0 to 63) {\n   \
    \         val carryOut : Long = (xBit & yBit) | (xBit & carry) | (yBit & carry)\n\
    \            sum |= (xBit ^ yBit ^ carry)\n            carry = carryOut << 1\n\
    \            xBit = xBit << 1\n            yBit = yBit << 1\n        }\n     \
    \   return sum\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l),\
    \ (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l),\
    \ (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l),\
    \ (5l)) == (12l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkothmwct.scala:24)\n\tat Problem.main(tmpkothmwct.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979127
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        return x + y\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(add((0l), (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n  \
    \  assert(add((2l), (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n \
    \   assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979126
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        @tailrec\n        def loop(acc : Long, x : Long, y : Long) : Long\
    \ = {\n            if (y == 0) {\n                acc\n            } else {\n\
    \                loop(acc + 1, x, y - 1)\n            }\n        }\n        loop(x,\
    \ x, y)\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l), (1l))\
    \ == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l))\
    \ == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l))\
    \ == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr9mqt6yp.scala:10:9 -------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        @\e[35mtailrec\e[0m\n\e[31m\e[31m   |\e[0m  \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m         Not found: type tailrec\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659979123
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        return x + y\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(add((0l), (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n  \
    \  assert(add((2l), (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n \
    \   assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979126
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        var carry : Long = 0\n        var res : Long = 0\n        var px\
    \ : Long = x\n        var py : Long = y\n        var k : Long = 1\n        while\
    \ (px != 0 || py != 0) {\n            var (xb, xr) = (px >> 1, px & 1)\n     \
    \       var (yb, yr) = (py >> 1, py & 1)\n            var sum = xr + yr + carry\n\
    \            res |= (sum % 2) * k\n            carry = sum / 2\n            px\
    \ = xb\n            py = yb\n            k <<= 1\n        }\n        if (carry\
    \ == 1) res |= k\n        return res\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(add((0l), (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n\
    \    assert(add((2l), (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n\
    \    assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979126
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        (x + y)\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l),\
    \ (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l),\
    \ (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l),\
    \ (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979126
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n      return x + y\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l),\
    \ (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l),\
    \ (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l),\
    \ (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979126
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        (x + y)\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l),\
    \ (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l),\
    \ (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l),\
    \ (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979126
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        if (y == 0) x\n        else add(x ^ y, (x & y) << 1)\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(add((0l), (1l)) == (1l));\n\
    \    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n\
    \    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979126
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        return x + y\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(add((0l), (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n  \
    \  assert(add((2l), (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n \
    \   assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979126
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        x + y\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l),\
    \ (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l),\
    \ (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l),\
    \ (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979126
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        // Use Bit-Shift to perform addition\n        def loop(x : Long,\
    \ y : Long, carry : Long) : Long = {\n            if (x == 0 && y == 0 && carry\
    \ == 0) return 0\n            val sum = x ^ y ^ carry\n            val carry_next\
    \ = (x & y) | (x & carry) | (y & carry)\n            loop(sum, carry_next << 1,\
    \ carry_next << 1)\n        }\n        loop(x, y, 0)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(add((0l), (1l)) == (1l));\n    assert(add((1l),\
    \ (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n    assert(add((5l),\
    \ (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659979130
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        if (y == 0) x\n        else add(x ^ y, (x & y) << 1)\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(add((0l), (1l)) == (1l));\n\
    \    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n\
    \    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979126
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        // ***** begin solution *****\n        x + y\n        // *****\
    \ end solution *****\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l),\
    \ (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l),\
    \ (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l),\
    \ (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979126
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        x + y\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l),\
    \ (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l),\
    \ (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l),\
    \ (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979126
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        return x + y\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(add((0l), (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n  \
    \  assert(add((2l), (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n \
    \   assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979126
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        return x + y\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(add((0l), (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n  \
    \  assert(add((2l), (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n \
    \   assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979126
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        if (y == 0) return x\n        else return add(x ^ y, (x & y) <<\
    \ 1)\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l), (1l))\
    \ == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l))\
    \ == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l))\
    \ == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979126
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n      var carry = x & y\n      var sum = x ^ y\n      while (carry != 0)\
    \ {\n        val shiftedcarry = carry << 1\n        carry = sum & shiftedcarry\n\
    \        sum = sum ^ shiftedcarry\n      }\n      sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(add((0l), (1l)) == (1l));\n    assert(add((1l),\
    \ (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n    assert(add((5l),\
    \ (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979126
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        return x + y\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(add((0l), (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n  \
    \  assert(add((2l), (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n \
    \   assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979126
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        //x + y\n        var sum : Long = 0\n        var carry : Long =\
    \ 0\n        var x1 : Long = x\n        var y1 : Long = y\n        var k : Long\
    \ = 1\n        var temp_x : Long = 0\n        var temp_y : Long = 0\n        while(x1\
    \ != 0 || y1 != 0) {\n            temp_x = x1 & 1\n            temp_y = y1 & 1\n\
    \            var temp_sum : Long = temp_x ^ temp_y ^ carry\n            carry\
    \ = (temp_x & carry) | (temp_y & carry) | (temp_x & temp_y)\n            sum =\
    \ sum | (temp_sum << k)\n            k += 1\n            x1 = x1 >> 1\n      \
    \      y1 = y1 >> 1\n        }\n        sum | (carry << k)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(add((0l), (1l)) == (1l));\n    assert(add((1l),\
    \ (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n    assert(add((5l),\
    \ (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpm9ami50g.scala:31)\n\tat Problem.main(tmpm9ami50g.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979126
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        def iter(carry : Long, x : Long, y : Long) : Long = {\n       \
    \     if (x == 0 && y == 0) carry\n            else iter(((carry ^ x) ^ y), (carry\
    \ & x) << 1, (carry & y) << 1)\n        }\n        iter(0, x, y)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(add((0l), (1l)) == (1l));\n    assert(add((1l),\
    \ (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n    assert(add((5l),\
    \ (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp798dfyc3.scala:19)\n\tat Problem.main(tmp798dfyc3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979126
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        // write your code here\n        var res : Long = 0\n        var\
    \ a : Long = x\n        var b : Long = y\n        while (b != 0) {\n         \
    \   res = a ^ b\n            b = (a & b) << 1\n            a = res\n        }\n\
    \        res\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l),\
    \ (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l),\
    \ (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l),\
    \ (5l)) == (12l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmped25czvw.scala:23)\n\tat Problem.main(tmped25czvw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979126
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        if (y == 0) x\n        else add(x ^ y, (x & y) << 1)\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(add((0l), (1l)) == (1l));\n\
    \    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n\
    \    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979126
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        var z : Long = 0\n        var i : Long = 1\n        var c : Long\
    \ = 0\n        while (x != 0 || y != 0 || c != 0) {\n            z = z | (((x\
    \ & 1) ^ (y & 1) ^ c) << i - 1)\n            c = ((x & 1) & (y & 1)) | ((y & 1)\
    \ & c) | ((x & 1) & c)\n            x = x >> 1\n            y = y >> 1\n     \
    \       i = i + 1\n        }\n        return z\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(add((0l), (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n\
    \    assert(add((2l), (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n\
    \    assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmp_a2o48w9.scala:16:14 -----------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            x = x >> \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment to val\
    \ x\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmp_a2o48w9.scala:17:14\
    \ -----------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            y = y >>\
    \ \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m            Reassignment to val y\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979124
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        @tailrec\n        def go(a : Long, b : Long, acc : Long) : Long\
    \ = {\n            if (b == 0) acc\n            else go(a ^ b, (a & b) << 1, acc\
    \ ^ a ^ b)\n        }\n        go(x, y, 0)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(add((0l), (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n\
    \    assert(add((2l), (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n\
    \    assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpb1xa2xwe.scala:10:9 -------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        @\e[35mtailrec\e[0m\n\e[31m\e[31m   |\e[0m  \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m         Not found: type tailrec\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659979123
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        require(y >= 0)\n        return (if (y == 0) x else add(x+1, y-1))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(add((0l), (1l)) == (1l));\n\
    \    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n\
    \    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979126
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        return x + y\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(add((0l), (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n  \
    \  assert(add((2l), (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n \
    \   assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979126
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        x + y\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l),\
    \ (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l),\
    \ (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l),\
    \ (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979126
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        def iter(x : Long, y : Long, carry : Long) : Long = {\n       \
    \     if (x == 0 && y == 0 && carry == 0) return 0\n            val (low, nextCarry)\
    \ = adder(x % 10, y % 10, carry)\n            val (high, finalCarry) = adder(x\
    \ / 10, y / 10, nextCarry)\n            val result = (low * 10) + high\n     \
    \       if (finalCarry == 0) result\n            else result + (finalCarry * (pow(10,\
    \ (ceil(log10(result + finalCarry))).toInt)).toLong)\n        }\n        def adder(x\
    \ : Long, y : Long, carry : Long) : (Long, Long) = {\n            if (x == 0 &&\
    \ y == 0 && carry == 0) return (0, 0)\n            else if (x == 0 && y == 0 &&\
    \ carry == 1) return (1, 0)\n            else if (x == 0 && y == 1 && carry ==\
    \ 0) return (1, 0)\n            else if (x == 0 && y == 1 && carry == 1) return\
    \ (0, 1)\n            else if (x == 1 && y == 0 && carry == 0) return (1, 0)\n\
    \            else if (x == 1 && y == 0 && carry == 1) return (0, 1)\n        \
    \    else if (x == 1 && y == 1 && carry == 0) return (0, 1)\n            else\
    \ if (x == 1 && y == 1 && carry == 1) return (1, 1)\n            else throw new\
    \ Exception(\"Invalid input\")\n        }\n        iter(x, y, 0)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(add((0l), (1l)) == (1l));\n    assert(add((1l),\
    \ (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n    assert(add((5l),\
    \ (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2f5_cdq_.scala:32)\n\tat Problem.main(tmp2f5_cdq_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979126
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        return x + y\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(add((0l), (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n  \
    \  assert(add((2l), (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n \
    \   assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979126
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        // Implement an efficient algorithm to add two integers\n     \
    \   // For example, the following Scala code adds two long integers using a loop:\n\
    \        var carry = 0l\n        var sum = 0l\n        var x1 = x\n        var\
    \ y1 = y\n        var k = 1l\n        while (x1 > 0 || y1 > 0) {\n           \
    \ val xk = x1 % 10\n            val yk = y1 % 10\n            val zk = xk + yk\
    \ + carry\n            sum += (zk % 10) * k\n            carry = zk / 10\n   \
    \         x1 /= 10\n            y1 /= 10\n            k *= 10\n        }\n   \
    \     if (carry > 0) sum += carry * k\n        sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(add((0l), (1l)) == (1l));\n    assert(add((1l),\
    \ (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n    assert(add((5l),\
    \ (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979126
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        if (y == 0) x\n        else add(x ^ y, (x & y) << 1)\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(add((0l), (1l)) == (1l));\n\
    \    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n\
    \    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979126
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        // TODO\n        return 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(add((0l), (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n\
    \    assert(add((2l), (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n\
    \    assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpd8ksse5_.scala:14)\n\tat Problem.main(tmpd8ksse5_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979126
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n      x + y\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l),\
    \ (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l),\
    \ (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l),\
    \ (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979126
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        x + y\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l),\
    \ (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l),\
    \ (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l),\
    \ (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979126
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        return 0l\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l),\
    \ (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l),\
    \ (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l),\
    \ (5l)) == (12l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp178jk78b.scala:13)\n\tat Problem.main(tmp178jk78b.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979131
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        return (x + y)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(add((0l), (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n\
    \    assert(add((2l), (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n\
    \    assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979133
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        return 0l\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l),\
    \ (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l),\
    \ (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l),\
    \ (5l)) == (12l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp178jk78b.scala:13)\n\tat Problem.main(tmp178jk78b.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979131
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        x + y\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l),\
    \ (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l),\
    \ (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l),\
    \ (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979126
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        val (x, y) = (abs(x), abs(y))\n        if (x == 0) y\n        else\
    \ if (y == 0) x\n        else add(x ^ y, (x & y) << 1)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(add((0l), (1l)) == (1l));\n    assert(add((1l),\
    \ (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n    assert(add((5l),\
    \ (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpvfmtwws9.scala:10:13 ---------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m (x, y) = (abs(x), abs(y))\n\e\
    [31m\e[31m   |\e[0m             ^\e[0m\n\e[31m   |\e[0m             Recursive\
    \ \e[33mvalue\e[0m \e[35m$1$\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpvfmtwws9.scala:10:16 ---------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m (x, y) = (abs(x), abs(y))\n\e\
    [31m\e[31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Recursive\
    \ \e[33mvalue\e[0m \e[35m$1$\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979129
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        return x + y\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(add((0l), (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n  \
    \  assert(add((2l), (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n \
    \   assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979126
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        y match {\n            case 0 => x\n            case y => add(x\
    \ ^ y, (x & y) << 1)\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(add((0l), (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n\
    \    assert(add((2l), (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n\
    \    assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979135
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        return y match {\n            case 0 => x\n            case y if\
    \ y > 0 => add(x+1, y-1)\n            case y if y < 0 => add(x-1, y+1)\n     \
    \   }\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l), (1l))\
    \ == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l))\
    \ == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l))\
    \ == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979135
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        // >>> add((5l), (7l))\n        // (12l)\n        if (y == 0) return\
    \ x\n        else {\n            val sum = x ^ y\n            val carry = (x &\
    \ y) << 1\n            add(sum, carry)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(add((0l), (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n\
    \    assert(add((2l), (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n\
    \    assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979135
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        x + y\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l),\
    \ (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l),\
    \ (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l),\
    \ (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979126
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        // Your code here\n        return 0l\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(add((0l), (1l)) == (1l));\n    assert(add((1l),\
    \ (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n    assert(add((5l),\
    \ (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3ajs_r84.scala:14)\n\tat Problem.main(tmp3ajs_r84.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979135
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        x + y\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l),\
    \ (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l),\
    \ (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l),\
    \ (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979126
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        if (y == 0) return x\n        return add(x ^ y, (x & y) << 1)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(add((0l), (1l)) == (1l));\n\
    \    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n\
    \    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979135
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        val carry = (((x & y) << 1) & 0xFFFFFFFFL)\n        val sum = ((x\
    \ ^ y) & 0xFFFFFFFFL)\n        if (carry == 0) {\n            sum\n        } else\
    \ {\n            add(sum, carry)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(add((0l), (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n\
    \    assert(add((2l), (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n\
    \    assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979135
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        return x + y\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(add((0l), (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n  \
    \  assert(add((2l), (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n \
    \   assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979126
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        x + y\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l),\
    \ (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l),\
    \ (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l),\
    \ (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979126
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        return (x + y)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(add((0l), (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n\
    \    assert(add((2l), (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n\
    \    assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979133
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        if (y == 0) x\n        else add(x ^ y, (x & y) << 1)\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(add((0l), (1l)) == (1l));\n\
    \    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n\
    \    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979126
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        require(x >= 0, \"x must be positive\")\n        require(y >= 0,\
    \ \"y must be positive\")\n        val xbits = new BitSet(128)\n        val ybits\
    \ = new BitSet(128)\n        var zbits = new BitSet(128)\n        var z = 0l\n\
    \        // using built in function toString(int, int)\n        // http://docs.oracle.com/javase/7/docs/api/java/lang/Long.html#toString(long,%20int)\n\
    \        for (i <- 0 until x.toString(2).length) {\n            xbits += (127\
    \ - i)\n        }\n        for (i <- 0 until y.toString(2).length) {\n       \
    \     ybits += (127 - i)\n        }\n        for (i <- 0 until 128) {\n      \
    \      val xi = if (xbits.contains(i)) 1 else 0\n            val yi = if (ybits.contains(i))\
    \ 1 else 0\n            val zi = xi ^ yi\n            zbits += (127 - i)\n   \
    \     }\n        zbits.toArray.foreach { bit =>\n            z += scala.math.pow(2,\
    \ bit).toLong\n        }\n        z\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(add((0l), (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n\
    \    assert(add((2l), (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n\
    \    assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmppjn4rpjc.scala:18:37 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until x.toString(\e\
    [31m2\e[0m).length) {\n\e[31m\e[31m   |\e[0m                                 \
    \    ^\e[0m\n\e[31m   |\e[0m         too many arguments for \e[33mmethod\e[0m\
    \ \e[35mtoString\e[0m in \e[33mclass\e[0m \e[35mAny\e[0m: (): String\n\e[31m\e\
    [31m-- Error: /tmp/tmppjn4rpjc.scala:21:37 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until y.toString(\e\
    [31m2\e[0m).length) {\n\e[31m\e[31m   |\e[0m                                 \
    \    ^\e[0m\n\e[31m   |\e[0m         too many arguments for \e[33mmethod\e[0m\
    \ \e[35mtoString\e[0m in \e[33mclass\e[0m \e[35mAny\e[0m: (): String\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979134
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        return x + y\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(add((0l), (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n  \
    \  assert(add((2l), (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n \
    \   assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979126
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        return x + y\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(add((0l), (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n  \
    \  assert(add((2l), (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n \
    \   assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979126
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        var carry = (x & y) << 1\n        var sum = x ^ y\n        var\
    \ temp : Long = 0\n        while (carry != 0) {\n            temp = sum\n    \
    \        sum = carry ^ sum\n            carry = (carry & temp) << 1\n        }\n\
    \        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l),\
    \ (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l),\
    \ (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l),\
    \ (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979135
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        var x1 = x\n        var y1 = y\n        while (y1 != 0) {\n   \
    \         val carry = x1 & y1\n            x1 = x1 ^ y1\n            y1 = carry\
    \ << 1\n        }\n        x1\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(add((0l), (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n\
    \    assert(add((2l), (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n\
    \    assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979135
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        var sum = x\n        for (i <- 1l to y) sum += 1\n        return\
    \ sum\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l), (1l))\
    \ == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l))\
    \ == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l))\
    \ == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979136
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        return x + y\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(add((0l), (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n  \
    \  assert(add((2l), (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n \
    \   assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979126
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        return x + y\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(add((0l), (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n  \
    \  assert(add((2l), (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n \
    \   assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979126
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        return x + y\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(add((0l), (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n  \
    \  assert(add((2l), (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n \
    \   assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979126
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        ???\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l),\
    \ (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l),\
    \ (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l),\
    \ (5l)) == (12l));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.NotImplementedError: an implementation is missing\n\tat scala.Predef$.$qmark$qmark$qmark(Predef.scala:344)\n\
    \tat Problem$.add(tmpr9te2pza.scala:10)\n\tat Problem$.main(tmpr9te2pza.scala:13)\n\
    \tat Problem.main(tmpr9te2pza.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979135
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n      x + y\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l),\
    \ (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l),\
    \ (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l),\
    \ (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979126
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        return (x + y)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(add((0l), (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n\
    \    assert(add((2l), (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n\
    \    assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979133
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        // ???\n        return x + y\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(add((0l), (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n\
    \    assert(add((2l), (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n\
    \    assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979135
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        // Let us write a function that will add two numbers\n        //\
    \ Start by breaking down the two numbers into individual digits\n        // Then\
    \ add each digit and keep track of the carry\n        // Then return sum of both\
    \ numbers\n        // >>> add((2l), (3l))\n        // (5l)\n        // >>> add((5l),\
    \ (7l))\n        // (12l)\n        def iter(x : Long, y : Long, carry : Long)\
    \ : Long = {\n            // We can add the two numbers x and y, if x = 0 and\
    \ y = 0\n            // Also, x and y can be added, if the carry is 0 and x or\
    \ y is 0\n            if ((x == 0) && (y == 0)) {\n                // x and y\
    \ are 0\n                // Also, the carry is 0\n                // Hence, return\
    \ 0\n                return 0\n            } else if ((x == 0) && (y != 0)) {\n\
    \                // x is 0\n                // Also, y is not 0\n            \
    \    // Also, carry is not 0\n                // Hence, return carry + y\n   \
    \             return carry + y\n            } else if ((x != 0) && (y == 0)) {\n\
    \                // x is not 0\n                // Also, y is 0\n            \
    \    // Also, carry is not 0\n                // Hence, return carry + x\n   \
    \             return carry + x\n            } else {\n                // x and\
    \ y are not 0\n                // Also, carry is not 0\n                // Hence,\
    \ add x and y and the carry\n                // Then return the next level of\
    \ recursion\n                return iter((x / 10), (y / 10), ((x % 10) + (y %\
    \ 10) + carry))\n            }\n        }\n        // We will be computing a +\
    \ b + c\n        // We will use a recursive function to compute a + b\n      \
    \  // Hence, we will call the recursive function with a and b as parameters\n\
    \        return iter(x, y, 0)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(add((0l), (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n\
    \    assert(add((2l), (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n\
    \    assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppcf46h84.scala:54)\n\tat Problem.main(tmppcf46h84.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979135
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        var sum : Long = 0l\n        var carry : Long = 0l\n        var\
    \ i : Long = 0l\n        while (i < 32) {\n            sum = (sum | (((x ^ y)\
    \ & (1l << i)) << i))\n            carry = ((x & y) & (1l << i)) << i\n      \
    \      x = x & (~(1l << i))\n            y = y & (~(1l << i))\n            i =\
    \ i + 1\n        }\n        sum = sum | carry\n        return sum\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(add((0l), (1l)) == (1l));\n  \
    \  assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n  \
    \  assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmp_im0nkgy.scala:16:14 -----------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            x = x & (~(\e[31m1l\e[0m << i))\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \  Reassignment to val x\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error:\
    \ /tmp/tmp_im0nkgy.scala:17:14 -----------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m            y = y & (~(\e[31m1l\e[0m << i))\n\e[31m\e[31m   |\e[0m   \
    \         ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment to\
    \ val y\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659979133
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        var a = x\n        var b = y\n        while (b != 0) {\n      \
    \      val x = a ^ b\n            val y = (a & b) << 1\n            a = x\n  \
    \          b = y\n        }\n        a\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(add((0l), (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n\
    \    assert(add((2l), (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n\
    \    assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979135
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        val (first, second) = (min(x, y), max(x, y))\n        var result\
    \ = second\n        var carry = 0l\n        while (first != 0l) {\n          \
    \  val first0 = first & 1l\n            val second0 = second & 1l\n          \
    \  val remainder = second & 1l\n            val sum = first0 + second0 + carry\n\
    \            result = result & ~1l\n            if (sum % 2 == 1) {\n        \
    \        result |= 1l\n            }\n            carry = sum / 2\n          \
    \  first >>= 1\n            second >>= 1\n        }\n        if (carry == 1) {\n\
    \            result = (result << 1) | 1l\n        }\n        result\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(add((0l), (1l)) == (1l));\n\
    \    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n\
    \    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnpdrql7t.scala:23:18 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            first >>= \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value >>= is not a member\
    \ of Long - did you mean first.>=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnpdrql7t.scala:24:19\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m            second >>= \e\
    [31m1\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \            value >>= is not a member of Long - did you mean second.>=?\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659979136
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        x + y\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l),\
    \ (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l),\
    \ (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l),\
    \ (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979126
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        if (y == 0) return x\n        add(x ^ y, (x & y) << 1)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(add((0l), (1l)) == (1l));\n\
    \    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n\
    \    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979136
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        x + y\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l),\
    \ (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l),\
    \ (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l),\
    \ (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979126
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        if (y == 0) {\n            return x\n        }\n        add(x ^\
    \ y, (x & y) << 1)\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l),\
    \ (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l),\
    \ (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l),\
    \ (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979136
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        if (y == 0) x\n        else add(x ^ y, (x & y) << 1)\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(add((0l), (1l)) == (1l));\n\
    \    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n\
    \    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979126
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        return x + y\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(add((0l), (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n  \
    \  assert(add((2l), (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n \
    \   assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979126
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        return x + y\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(add((0l), (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n  \
    \  assert(add((2l), (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n \
    \   assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979126
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        if (y == 0) {\n            return x\n        }\n        val s =\
    \ x ^ y\n        val c = (x & y) << 1\n        return add(s, c)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(add((0l), (1l)) == (1l));\n    assert(add((1l),\
    \ (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n    assert(add((5l),\
    \ (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979136
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        y match {\n            case 0 => x\n            case y => add(x\
    \ ^ y, (x & y) << 1)\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(add((0l), (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n\
    \    assert(add((2l), (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n\
    \    assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979135
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        if (y == 0) x\n        else add(x ^ y, (x & y) << 1)\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(add((0l), (1l)) == (1l));\n\
    \    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n\
    \    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979126
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        var a = x\n        var b = y\n        while (b != 0) {\n      \
    \      val carry = a & b\n            a = a ^ b\n            b = carry << 1\n\
    \        }\n        a\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l),\
    \ (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l),\
    \ (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l),\
    \ (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979139
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        return x + y\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(add((0l), (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n  \
    \  assert(add((2l), (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n \
    \   assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979126
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        return x + y\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(add((0l), (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n  \
    \  assert(add((2l), (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n \
    \   assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979126
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        var z = x ^ y;\n        var c = x & y;\n        while (c != 0)\
    \ {\n            var t = z;\n            z = z ^ (c << 1);\n            c = t\
    \ & (c << 1);\n        }\n        return z;\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(add((0l), (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n\
    \    assert(add((2l), (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n\
    \    assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979139
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        x + y\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l),\
    \ (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l),\
    \ (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l),\
    \ (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979126
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        return x + y\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(add((0l), (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n  \
    \  assert(add((2l), (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n \
    \   assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979126
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        (x + y)\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l),\
    \ (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l),\
    \ (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l),\
    \ (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979126
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        if (y == 0) x\n        else add(x ^ y, (x & y) << 1)\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(add((0l), (1l)) == (1l));\n\
    \    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n\
    \    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979126
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        if (y == 0) return x\n        val sum = x ^ y\n        val carry\
    \ = (x & y) << 1\n        return add(sum, carry)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(add((0l), (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n\
    \    assert(add((2l), (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n\
    \    assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979141
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        (x + y)\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l),\
    \ (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l),\
    \ (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l),\
    \ (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979126
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        return x + y\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(add((0l), (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n  \
    \  assert(add((2l), (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n \
    \   assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979126
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n      if (y == 0) {\n        return x\n      }\n      else if (x == 0)\
    \ {\n        return y\n      }\n      else {\n        return add(x ^ y, (x & y)\
    \ << 1)\n      }\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l),\
    \ (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l),\
    \ (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l),\
    \ (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979143
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        return x + y\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(add((0l), (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n  \
    \  assert(add((2l), (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n \
    \   assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979126
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        y match {\n            case 0 => x\n            case _ => add(x\
    \ ^ y, (x & y) << 1)\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(add((0l), (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n\
    \    assert(add((2l), (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n\
    \    assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979143
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        var carry = x & y\n        var result = x ^ y\n        while (carry\
    \ != 0) {\n            var shiftedcarry = carry << 1\n            carry = result\
    \ & shiftedcarry\n            result ^= shiftedcarry\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l), (1l))\
    \ == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l))\
    \ == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l))\
    \ == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979144
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        val sum = x + y\n        sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(add((0l), (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n\
    \    assert(add((2l), (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n\
    \    assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979144
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        return y match {\n            case 0 => x\n            case _ =>\
    \ add(x ^ y, (x & y) << 1)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(add((0l), (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n\
    \    assert(add((2l), (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n\
    \    assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979144
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        return x + y\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(add((0l), (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n  \
    \  assert(add((2l), (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n \
    \   assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979126
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        var c = 0\n        var r = 0\n        var i = 0\n        var n\
    \ = max(x.bitLength, y.bitLength)\n        while (i < n) {\n            var m\
    \ = (((x >> i) & 1) + ((y >> i) & 1) + c) % 2\n            var s = (((x >> i)\
    \ & 1) + ((y >> i) & 1) + c) / 2\n            r = r | (m << i)\n            c\
    \ = s\n            i += 1\n        }\n        r\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(add((0l), (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n\
    \    assert(add((2l), (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n\
    \    assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7tflth7m.scala:13:22 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mvar\e[0m \e[36mn\e[0m = max(x.bitLength,\
    \ y.bitLength)\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mvalue bitLength is not a member of Long, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mThe following import\
    \ might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.BigInt.long2bigInt\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7tflth7m.scala:13:35\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mvar\e[0m \e\
    [36mn\e[0m = max(x.bitLength, y.bitLength)\n\e[31m\e[31m   |\e[0m            \
    \                     ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue bitLength is not\
    \ a member of Long, but could be made available as an extension method.\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mThe following import might fix the problem:\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m  import math.BigInt.long2bigInt\n\e[31m   |\e[0m\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7tflth7m.scala:17:16 --------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            r = r | (m << i)\n\e[31m\e[31m   |\e[0m \
    \               ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Found:    Long\n\
    \e[31m   |\e[0m                Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp7tflth7m.scala:18:16 --------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            c = s\n\e[31m\e[31m   |\e[0m            \
    \    ^\e[0m\n\e[31m   |\e[0m                Found:    (s : Long)\n\e[31m   |\e\
    [0m                Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659979145
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        // your answer here\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(add((0l), (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n\
    \    assert(add((2l), (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n\
    \    assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpphxki_6v.scala:9:41\
    \ ---------------------\e[0m\e[0m\n\e[31m 9 |\e[0m    \e[33mdef\e[0m \e[36madd\e\
    [0m(\e[36mx\e[0m : \e[35mLong\e[0m, \e[36my\e[0m : \e[35mLong\e[0m) : \e[35mLong\e\
    [0m = {\n\e[31m\e[31m   |\e[0m                                         ^\e[0m\n\
    \e[31m   |\e[0m                                         Found:    Unit\n\e[31m\
    \   |\e[0m                                         Required: Long\n\e[31m10 |\e\
    [0m        \e[34m// your answer here\e[0m\n\e[31m11 |\e[0m    }\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659979144
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n      return x + y\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l),\
    \ (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l),\
    \ (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l),\
    \ (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979126
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        (((x ^ y) & (x & y) << 1) | (x ^ y))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(add((0l), (1l)) == (1l));\n    assert(add((1l),\
    \ (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n    assert(add((5l),\
    \ (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprdr9kr2i.scala:15)\n\tat Problem.main(tmprdr9kr2i.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979144
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        return (x + y)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(add((0l), (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n\
    \    assert(add((2l), (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n\
    \    assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979133
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        (x + y)\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l),\
    \ (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l),\
    \ (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l),\
    \ (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979126
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        return ((x + y) % 1000000007l)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(add((0l), (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n\
    \    assert(add((2l), (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n\
    \    assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979145
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        if (y == 0) {\n            return x\n        }\n        add(x ^\
    \ y, (x & y) << 1)\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l),\
    \ (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l),\
    \ (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l),\
    \ (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979136
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        def add(x : Long, y : Long, carry : Long) : Long = {\n        \
    \    if (x == 0 && y == 0 && carry == 0) return 0\n            var s = x ^ y ^\
    \ carry\n            var c = (x & y) | (x & carry) | (y & carry)\n           \
    \ add(s, c << 1, c >>> 63)\n        }\n        add(x, y, 0)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(add((0l), (1l)) == (1l));\n    assert(add((1l),\
    \ (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n    assert(add((5l),\
    \ (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659979149
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        y match {\n            case 0 => x\n            case y => add(x\
    \ ^ y, (x & y) << 1)\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(add((0l), (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n\
    \    assert(add((2l), (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n\
    \    assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979135
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        x + y\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l),\
    \ (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l),\
    \ (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l),\
    \ (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979126
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        return x + y\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(add((0l), (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n  \
    \  assert(add((2l), (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n \
    \   assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979126
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        var carry = x & y\n        var result = x ^ y\n        while (carry\
    \ != 0) {\n            var shiftedcarry = carry << 1\n            carry = result\
    \ & shiftedcarry\n            result ^= shiftedcarry\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l), (1l))\
    \ == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l))\
    \ == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l))\
    \ == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979144
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        if (y == 0) {\n            return x\n        }\n        return\
    \ add(x ^ y, (x & y) << 1)\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(add((0l), (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n   \
    \ assert(add((2l), (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n  \
    \  assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979144
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        return 0;\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l),\
    \ (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l),\
    \ (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l),\
    \ (5l)) == (12l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqplbrb0s.scala:13)\n\tat Problem.main(tmpqplbrb0s.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979144
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        return x + y\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(add((0l), (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n  \
    \  assert(add((2l), (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n \
    \   assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979126
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n      if (y == 0) return x\n      val carry = (x & y) << 1\n      val sum\
    \ = x ^ y\n      add(sum, carry)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(add((0l), (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n\
    \    assert(add((2l), (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n\
    \    assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979145
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        // Write your code here\n        return (x + y)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(add((0l), (1l)) == (1l));\n    assert(add((1l),\
    \ (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n    assert(add((5l),\
    \ (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979145
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        return x + y\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(add((0l), (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n  \
    \  assert(add((2l), (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n \
    \   assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979126
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        var carry : Long = 0\n        var x1 : Long = x\n        var y1\
    \ : Long = y\n        var sum : Long = 0\n        for (i <- 0 until 64) {\n  \
    \          val xi : Long = x1 & 1\n            val yi : Long = y1 & 1\n      \
    \      sum |= (xi ^ yi ^ carry) << i\n            carry = ((xi & yi) | (xi & carry)\
    \ | (yi & carry)) << 1\n            x1 >>= 1\n            y1 >>= 1\n        }\n\
    \        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l),\
    \ (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l),\
    \ (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l),\
    \ (5l)) == (12l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpteccsc3o.scala:27)\n\tat Problem.main(tmpteccsc3o.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979147
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        return x + y\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(add((0l), (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n  \
    \  assert(add((2l), (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n \
    \   assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979126
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        @tailrec\n        def f(x : Long, y : Long, c : Long) : Long =\
    \ {\n            if (x == 0 && y == 0) c\n            else if (x == 0) f(0, y\
    \ & 1, c ^ y)\n            else if (y == 0) f(x & 1, 0, c ^ x)\n            else\
    \ f(x >>> 1, y >>> 1, f(x & 1, y & 1, c << 1) ^ c)\n        }\n        f(x, y,\
    \ 0)\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l), (1l))\
    \ == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l))\
    \ == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l))\
    \ == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp897h4ke6.scala:10:9 -------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        @\e[35mtailrec\e[0m\n\e[31m\e[31m   |\e[0m  \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m         Not found: type tailrec\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659979142
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        def add0(x : Long, y : Long, ret : Long) : Long = {\n         \
    \   val z = x ^ y ^ ret\n            val c = (x & y) | (y & ret) | (ret & x)\n\
    \            if (c == 0) {\n                z\n            } else {\n        \
    \        add0(z, c << 1, ret)\n            }\n        }\n        add0(x, y, 0)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(add((0l), (1l)) == (1l));\n\
    \    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n\
    \    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979146
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        return (x + y)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(add((0l), (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n\
    \    assert(add((2l), (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n\
    \    assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979133
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        return x + y\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(add((0l), (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n  \
    \  assert(add((2l), (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n \
    \   assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979126
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        return x + y\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(add((0l), (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n  \
    \  assert(add((2l), (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n \
    \   assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979126
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        def loop(x : Long, y : Long, carry : Long) : Long = {\n       \
    \     if (x == 0 && y == 0 && carry == 0) 0\n            else {\n            \
    \    val value = x ^ y ^ carry\n                val newCarry = (x & y) | (y &\
    \ carry) | (x & carry)\n                loop(value, newCarry << 1, newCarry >>>\
    \ 63)\n            }\n        }\n        loop(x, y, 0)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(add((0l), (1l)) == (1l));\n    assert(add((1l),\
    \ (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n    assert(add((5l),\
    \ (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659979150
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        val r = x + y\n        r\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(add((0l), (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n\
    \    assert(add((2l), (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n\
    \    assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979146
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        x + y\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l),\
    \ (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l),\
    \ (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l),\
    \ (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979126
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        x + y\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l),\
    \ (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l),\
    \ (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l),\
    \ (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979126
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        if (y == 0) x\n        else add(x ^ y, (x & y) << 1)\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(add((0l), (1l)) == (1l));\n\
    \    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n\
    \    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979126
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        var remainder : Long = 0\n        var sum : Long = 0\n        var\
    \ carry : Long = 0\n        var i : Long = 0\n        for (i <- 0 to 63) {\n \
    \           var sum : Long = 0\n            var nx : Long = (x >> i) & 1\n   \
    \         var ny : Long = (y >> i) & 1\n            sum = (nx ^ ny ^ carry)\n\
    \            remainder = (sum << i) | remainder\n            carry = ((nx & ny)\
    \ | (nx & carry) | (ny & carry))\n        }\n        return remainder\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(add((0l), (1l)) == (1l));\n\
    \    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n\
    \    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979148
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        return x + y\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(add((0l), (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n  \
    \  assert(add((2l), (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n \
    \   assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979126
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        x + y\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l),\
    \ (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l),\
    \ (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l),\
    \ (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979126
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        var sum : Long = 0l\n        var c : Long = 0l\n        var xb\
    \ : Long = x\n        var yb : Long = y\n        for (i <- 0 until 32) {\n   \
    \         val a : Long = (xb & 1l)\n            val b : Long = (yb & 1l)\n   \
    \         sum |= ((a ^ b ^ c) << i)\n            c = ((a & b) | (b & c) | (a &\
    \ c)) << 1\n            xb >>= 1\n            yb >>= 1\n        }\n        return\
    \ sum\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l), (1l))\
    \ == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l))\
    \ == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l))\
    \ == (12l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3nd13zlv.scala:27)\n\tat Problem.main(tmp3nd13zlv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979150
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        //return x + y\n        var result = 0l\n        var carry = 0l\n\
    \        var tempX = x\n        var tempY = y\n        while (tempX != 0 || tempY\
    \ != 0) {\n            result = tempX ^ tempY ^ carry\n            carry = (tempX\
    \ & tempY) | (tempX & carry) | (tempY & carry)\n            carry <<= 1\n    \
    \        tempX = result\n            tempY = carry\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l), (1l))\
    \ == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l))\
    \ == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l))\
    \ == (12l));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659979153
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        ???\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l),\
    \ (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l),\
    \ (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l),\
    \ (5l)) == (12l));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.NotImplementedError: an implementation is missing\n\tat scala.Predef$.$qmark$qmark$qmark(Predef.scala:344)\n\
    \tat Problem$.add(tmpr9te2pza.scala:10)\n\tat Problem$.main(tmpr9te2pza.scala:13)\n\
    \tat Problem.main(tmpr9te2pza.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979135
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        return (x + y)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(add((0l), (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n\
    \    assert(add((2l), (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n\
    \    assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979133
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        if (y == 0) x\n        else add(x ^ y, (x & y) << 1)\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(add((0l), (1l)) == (1l));\n\
    \    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n\
    \    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979126
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        x + y\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l),\
    \ (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l),\
    \ (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l),\
    \ (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979126
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        return x + y\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(add((0l), (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n  \
    \  assert(add((2l), (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n \
    \   assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979126
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        return x + y\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(add((0l), (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n  \
    \  assert(add((2l), (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n \
    \   assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979126
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        if (y == 0) x\n        else add(x ^ y, (x & y) << 1)\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(add((0l), (1l)) == (1l));\n\
    \    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n\
    \    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979126
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        // Your code here\n        -1l\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(add((0l), (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n\
    \    assert(add((2l), (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n\
    \    assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpuleiym8a.scala:14)\n\tat Problem.main(tmpuleiym8a.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979150
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        (x + y)\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l),\
    \ (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l),\
    \ (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l),\
    \ (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979126
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        // >>> x\n        // (2l)\n        // >>> y\n        // (3l)\n\
    \        (x + y)\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l),\
    \ (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l),\
    \ (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l),\
    \ (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979151
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        // >>> 1\n        // 1\n        return x + y\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(add((0l), (1l)) == (1l));\n    assert(add((1l),\
    \ (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n    assert(add((5l),\
    \ (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979152
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        x + y\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l),\
    \ (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l),\
    \ (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l),\
    \ (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979126
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n      x + y\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l),\
    \ (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l),\
    \ (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l),\
    \ (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979126
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        (x + y)\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l),\
    \ (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l),\
    \ (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l),\
    \ (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979126
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        x + y\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l),\
    \ (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l),\
    \ (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l),\
    \ (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979126
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        (x + y)\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l),\
    \ (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l),\
    \ (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l),\
    \ (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979126
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        return x + y\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(add((0l), (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n  \
    \  assert(add((2l), (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n \
    \   assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979126
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        // Implement your solution here\n        return x + y\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(add((0l), (1l)) == (1l));\n\
    \    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n\
    \    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979152
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        if (y == 0) x\n        else add(x ^ y, (x & y) << 1)\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(add((0l), (1l)) == (1l));\n\
    \    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n\
    \    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979126
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        return x + y\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(add((0l), (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n  \
    \  assert(add((2l), (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n \
    \   assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979126
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        // only add 1 to the sum if both bits in a digit are 1\n      \
    \  def carry(left : Long, right : Long) : Long = {\n            if (left == 0\
    \ || right == 0) 0\n            else carry(left & (left - 1), right & (right -\
    \ 1)) << 1 | (left & right)\n        }\n        // sum of bits in a digit\n  \
    \      def sum(left : Long, right : Long) : Long = {\n            if (left ==\
    \ 0) right\n            else if (right == 0) left\n            else sum(left ^\
    \ right, (left & right) << 1)\n        }\n        // recurse to add sum of bits\
    \ and carry over each digit\n        val (c, s) = (carry(x, y), sum(x, y))\n \
    \       if (c == 0) s\n        else add(c, s)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(add((0l), (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n\
    \    assert(add((2l), (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n\
    \    assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe6ch3iiq.scala:29)\n\tat Problem.main(tmpe6ch3iiq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979152
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        @tailrec\n        def addTailRec(x : Long, y : Long, carry : Long)\
    \ : Long = {\n            var sum = x ^ y ^ carry\n            var carry1 = (x\
    \ & y) | (x & carry) | (y & carry)\n            if (carry1 == 0) sum\n       \
    \     else addTailRec(sum, carry1 << 1, 0)\n        }\n        addTailRec(x, y,\
    \ 0)\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l), (1l))\
    \ == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l))\
    \ == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l))\
    \ == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphtz26nfr.scala:10:9 -------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        @\e[35mtailrec\e[0m\n\e[31m\e[31m   |\e[0m  \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m         Not found: type tailrec\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659979150
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        return (x + y)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(add((0l), (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n\
    \    assert(add((2l), (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n\
    \    assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979133
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        // Implement this function to pass the test cases\n        0l\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(add((0l), (1l)) == (1l));\n\
    \    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n\
    \    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmq3haut8.scala:14)\n\tat Problem.main(tmpmq3haut8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979153
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        // Fill in your code here\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(add((0l), (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n\
    \    assert(add((2l), (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n\
    \    assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprr5wvtlt.scala:9:41\
    \ ---------------------\e[0m\e[0m\n\e[31m 9 |\e[0m    \e[33mdef\e[0m \e[36madd\e\
    [0m(\e[36mx\e[0m : \e[35mLong\e[0m, \e[36my\e[0m : \e[35mLong\e[0m) : \e[35mLong\e\
    [0m = {\n\e[31m\e[31m   |\e[0m                                         ^\e[0m\n\
    \e[31m   |\e[0m                                         Found:    Unit\n\e[31m\
    \   |\e[0m                                         Required: Long\n\e[31m10 |\e\
    [0m        \e[34m// Fill in your code here\e[0m\n\e[31m11 |\e[0m    }\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659979153
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        return x + y\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(add((0l), (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n  \
    \  assert(add((2l), (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n \
    \   assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979126
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        if (y == 0) x\n        else add(x ^ y, (x & y) << 1)\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(add((0l), (1l)) == (1l));\n\
    \    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n\
    \    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979126
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        var a = x\n        var b = y\n        if (b == 0) return a\n  \
    \      var sum = a ^ b\n        var carry = (a & b) << 1\n        add(sum, carry)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(add((0l), (1l)) == (1l));\n\
    \    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n\
    \    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979153
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        0l\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l),\
    \ (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l),\
    \ (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l),\
    \ (5l)) == (12l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpj5xl4m_o.scala:13)\n\tat Problem.main(tmpj5xl4m_o.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979153
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        // ...\n        x + y\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(add((0l), (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n\
    \    assert(add((2l), (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n\
    \    assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979153
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        y match {\n            case 0 => x\n            case _ => add(x\
    \ ^ y, (x & y) << 1)\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(add((0l), (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n\
    \    assert(add((2l), (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n\
    \    assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979143
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        // Implement this function\n        x + y\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(add((0l), (1l)) == (1l));\n    assert(add((1l),\
    \ (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n    assert(add((5l),\
    \ (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979153
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        return x + y\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(add((0l), (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n  \
    \  assert(add((2l), (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n \
    \   assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979126
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        // Implement this function to pass the test cases.\n        x +\
    \ y\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l), (1l))\
    \ == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l))\
    \ == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l))\
    \ == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979153
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        return x + y\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(add((0l), (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n  \
    \  assert(add((2l), (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n \
    \   assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979126
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        return x + y\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(add((0l), (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n  \
    \  assert(add((2l), (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n \
    \   assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979126
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        return (x + y)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(add((0l), (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n\
    \    assert(add((2l), (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n\
    \    assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979133
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        return x + y\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(add((0l), (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n  \
    \  assert(add((2l), (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n \
    \   assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979126
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        (x + y)\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l),\
    \ (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l),\
    \ (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l),\
    \ (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979126
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n      return x + y\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l),\
    \ (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l),\
    \ (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l),\
    \ (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979126
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        return x + y\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(add((0l), (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n  \
    \  assert(add((2l), (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n \
    \   assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979126
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        x + y\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l),\
    \ (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l),\
    \ (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l),\
    \ (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979126
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        return x + y\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(add((0l), (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n  \
    \  assert(add((2l), (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n \
    \   assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979126
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        return x + y\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(add((0l), (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n  \
    \  assert(add((2l), (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n \
    \   assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979126
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        y match {\n            case 0 => x\n            case y => add(x\
    \ ^ y, (x & y) << 1)\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(add((0l), (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n\
    \    assert(add((2l), (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n\
    \    assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979135
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        return x + y\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(add((0l), (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n  \
    \  assert(add((2l), (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n \
    \   assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979126
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        var sum : Long = 0\n        var carry : Long = 0\n        var xb\
    \ : Long = x\n        var yb : Long = y\n        for (i <- (0 to 63)) {\n    \
    \        var sb : Long = xb & yb\n            var cb : Long = carry | sb\n   \
    \         var tb : Long = xb ^ yb\n            var zb : Long = cb ^ tb\n     \
    \       sum = sum | zb\n            carry = (cb & tb) << 1\n            xb = xb\
    \ >> 1\n            yb = yb >> 1\n        }\n        return sum\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(add((0l), (1l)) == (1l));\n    assert(add((1l),\
    \ (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n    assert(add((5l),\
    \ (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpyk723v8k.scala:29)\n\tat Problem.main(tmpyk723v8k.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979154
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        ???\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l),\
    \ (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l),\
    \ (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l),\
    \ (5l)) == (12l));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.NotImplementedError: an implementation is missing\n\tat scala.Predef$.$qmark$qmark$qmark(Predef.scala:344)\n\
    \tat Problem$.add(tmpr9te2pza.scala:10)\n\tat Problem$.main(tmpr9te2pza.scala:13)\n\
    \tat Problem.main(tmpr9te2pza.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979135
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        x + y\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l),\
    \ (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l),\
    \ (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l),\
    \ (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979126
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        def add_iter(a : Long, b : Long, c : Long) : Long = {\n       \
    \     if (b == 0) a\n            else add_iter(a ^ b, (a & b) << 1, c)\n     \
    \   }\n        add_iter(x, y, 0)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(add((0l), (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n\
    \    assert(add((2l), (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n\
    \    assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979153
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        (x + y)\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l),\
    \ (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l),\
    \ (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l),\
    \ (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979126
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        var sum : Long = 0\n        var carryin : Long = 0\n        var\
    \ k : Long = 1\n        var temp_x : Long = x\n        var temp_y : Long = y\n\
    \        while (temp_x != 0 || temp_y != 0) {\n            var xk : Long = x &\
    \ k\n            var yk : Long = y & k\n            var carryout : Long = (xk\
    \ & yk) | (xk & carryin) | (yk & carryin)\n            sum |= (xk ^ yk ^ carryin)\n\
    \            carryin = carryout << 1\n            k <<= 1\n            temp_x\
    \ = temp_x >> 1\n            temp_y = temp_y >> 1\n        }\n        sum | carryin\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(add((0l), (1l)) == (1l));\n\
    \    assert(add((1l), (0l)) == (1l));\n    assert(add((2l), (3l)) == (5l));\n\
    \    assert(add((5l), (7l)) == (12l));\n    assert(add((7l), (5l)) == (12l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979153
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        (x + y)\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l),\
    \ (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l),\
    \ (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l),\
    \ (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979126
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n      0\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l),\
    \ (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l),\
    \ (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l),\
    \ (5l)) == (12l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1amzzepu.scala:13)\n\tat Problem.main(tmp1amzzepu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979153
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        return x + y\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(add((0l), (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n  \
    \  assert(add((2l), (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n \
    \   assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979126
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        y match {\n            case 0 => x\n            case _ => add(x\
    \ ^ y, (x & y) << 1)\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(add((0l), (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n\
    \    assert(add((2l), (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n\
    \    assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979143
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        // This is the \"add\" function.\n        // If you add 0 the sum\
    \ stays the same\n        if (x == 0) {\n            return y\n        } else\
    \ if (y == 0) {\n            return x\n        }\n        // If you add a positive\
    \ number (x) and a negative number (y)\n        // you actually subtract the negative\
    \ number (y)\n        else if (x > 0 && y < 0) {\n            return subtract(x,\
    \ -y)\n        } else if (x < 0 && y > 0) {\n            return subtract(y, -x)\n\
    \        }\n        // If you add a negative number (x) and a negative number\
    \ (y)\n        // you actually add two positive numbers (-x) and (-y)\n      \
    \  else if (x < 0 && y < 0) {\n            return add(-x, -y)\n        }\n   \
    \     // If you have two numbers the same sign and their sum is still the same\
    \ sign\n        // you can use bitwise operators to add\n        else if ((x &\
    \ y) < 0) {\n            return x ^ y\n        }\n        // If you have two numbers\
    \ the same sign and their sum is different sign\n        // you need to do the\
    \ addition one bit at a time\n        else {\n            var sum : Long = 0\n\
    \            var carry : Long = 0\n            var i : Long = 0\n            while\
    \ (i < 63) {\n                if (((x & (1l << i)) >> i) == 1 && ((y & (1l <<\
    \ i)) >> i) == 1) {\n                    if (carry == 1) {\n                 \
    \       sum = sum | (1l << i)\n                    }\n                    carry\
    \ = 1\n                } else if (((x & (1l << i)) >> i) == 1 && ((y & (1l <<\
    \ i)) >> i) == 0) {\n                    if (carry == 1) {\n                 \
    \       carry = 1\n                    } else {\n                        sum =\
    \ sum | (1l << i)\n                    }\n                } else if (((x & (1l\
    \ << i)) >> i) == 0 && ((y & (1l << i)) >> i) == 1) {\n                    if\
    \ (carry == 1) {\n                        carry = 1\n                    } else\
    \ {\n                       \n    }\n    def main(args: Array[String]) = {\n \
    \   assert(add((0l), (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n \
    \   assert(add((2l), (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n\
    \    assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpymsgdaxt.scala:67:0 ----------------------------\e\
    [0m\e[0m\n\e[31m67 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpymsgdaxt.scala:20:19\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            \e[33mreturn\e\
    [0m subtract(x, -y)\n\e[31m\e[31m   |\e[0m                   ^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                   Not found: subtract\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpymsgdaxt.scala:22:19 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mreturn\e[0m subtract(y, -x)\n\e[31m\e\
    [31m   |\e[0m                   ^^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \    Not found: subtract\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpymsgdaxt.scala:40:12 --------------------\e[0m\e[0m\n\e[31m40\
    \ |\e[0m            \e[33mwhile\e[0m (i < \e[31m63\e[0m) {\n\e[31m\e[31m   |\e\
    [0m            ^\e[0m\n\e[31m   |\e[0m            Found:    Unit\n\e[31m   |\e\
    [0m            Required: Long\n\e[31m41 |\e[0m                \e[33mif\e[0m (((x\
    \ & (\e[31m1l\e[0m << i)) >> i) == \e[31m1\e[0m && ((y & (\e[31m1l\e[0m << i))\
    \ >> i) == \e[31m1\e[0m) {\n\e[31m42 |\e[0m                    \e[33mif\e[0m (carry\
    \ == \e[31m1\e[0m) {\n\e[31m43 |\e[0m                        sum = sum | (\e[31m1l\e\
    [0m << i)\n\e[31m44 |\e[0m                    }\n\e[31m45 |\e[0m             \
    \       carry = \e[31m1\e[0m\n\e[31m46 |\e[0m                } \e[33melse\e[0m\
    \ \e[33mif\e[0m (((x & (\e[31m1l\e[0m << i)) >> i) == \e[31m1\e[0m && ((y & (\e\
    [31m1l\e[0m << i)) >> i) == \e[31m0\e[0m) {\n\e[31m47 |\e[0m                 \
    \   \e[33mif\e[0m (carry == \e[31m1\e[0m) {\n\e[31m48 |\e[0m                 \
    \       carry = \e[31m1\e[0m\n\e[31m49 |\e[0m                    } \e[33melse\e\
    [0m {\n\e[31m50 |\e[0m                        sum = sum | (\e[31m1l\e[0m << i)\n\
    \e[31m51 |\e[0m                    }\n\e[31m52 |\e[0m                } \e[33melse\e\
    [0m \e[33mif\e[0m (((x & (\e[31m1l\e[0m << i)) >> i) == \e[31m0\e[0m "
  stdout: ''
  timestamp: 1659979154
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        return x + y\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(add((0l), (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n  \
    \  assert(add((2l), (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n \
    \   assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979126
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        if (y == 0) return x\n        val sum = x ^ y\n        val carry\
    \ = (x & y) << 1\n        return add(sum, carry)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(add((0l), (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n\
    \    assert(add((2l), (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n\
    \    assert(add((7l), (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979141
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        0l\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l),\
    \ (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l),\
    \ (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l),\
    \ (5l)) == (12l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpj5xl4m_o.scala:13)\n\tat Problem.main(tmpj5xl4m_o.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659979153
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n\
    \    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long\
    \ = {\n        (x + y)\n    }\n    def main(args: Array[String]) = {\n    assert(add((0l),\
    \ (1l)) == (1l));\n    assert(add((1l), (0l)) == (1l));\n    assert(add((2l),\
    \ (3l)) == (5l));\n    assert(add((5l), (7l)) == (12l));\n    assert(add((7l),\
    \ (5l)) == (12l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979126
