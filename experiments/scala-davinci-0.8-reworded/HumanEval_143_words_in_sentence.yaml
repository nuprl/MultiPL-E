name: HumanEval_143_words_in_sentence
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // You are given a string representing a sentence,\n    // the sentence contains\
  \ some words separated by a space,\n    // and you have to return a string that\
  \ contains the words from the original sentence,\n    // whose lengths are prime\
  \ numbers,\n    // the order of the words in the new string should be the same as\
  \ the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"This is a\
  \ test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"lets\
  \ go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)\
  \ <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
  \ : String) : String = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
  This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
  \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is no\
  \ place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
  Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
  go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\
  \")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n\
  }\n"
completions: ["        def isPrime(n : Int) : Boolean = {\n            if (n <= 1)\
    \ return false\n            val sqrt = Math.sqrt(n)\n            var i = 2\n \
    \           while (i <= sqrt) {\n                if (n % i == 0) return false\n\
    \                i += 1\n            }\n            return true\n        }\n \
    \       sentence.split(\" \").filter(x => isPrime(x.length)).mkString(\" \")",
  "        /**\n        val res = for (w <- sentence.split(\" \"); if (isPrime(w.length)))\
    \ yield w\n        println(res.mkString(\" \"))\n        **/\n        sentence.split(\"\
    \ \").filter(w => isPrime(w.length)).mkString(\" \")", "        def isPrime(x\
    \ : Int) : Boolean = (2 to ceil(sqrt(x)).toInt).forall(x % _ != 0)\n        sentence.split(\"\
    \ \").filter(word => isPrime(word.length)).mkString(\" \")", "    \tval words\
    \ = sentence.split(\" \")\n    \twords.filter(x => isPrime(x.length)).mkString(\"\
    \ \")", "        // Fill up this function body\n        // 'primeWords' contains\
    \ the output as described above\n        \"\"", "        val words = sentence.split(\"\
    \ \")\n        val str = new StringBuilder\n        for (word <- words) {\n  \
    \          if (word.length >= 2 && isPrime(word.length)) {\n                str\
    \ ++= word\n                str += ' '\n            }\n        }\n        return\
    \ str.toString.trim", "        val splitted = sentence.split(\" \")\n        val\
    \ sb = new StringBuilder\n        var flag = false\n        for (word <- splitted)\
    \ {\n            if (isPrime(word.length)) {\n                if (flag) sb.append(\"\
    \ \")\n                sb.append(word)\n                flag = true\n        \
    \    }\n        }\n        sb.toString", "        val result = new StringBuilder\n\
    \        val words = sentence.split(\" \")\n        for (word <- words) {\n  \
    \          if (isPrime(word.length)) result ++= word + \" \"\n        }\n    \
    \    result.toString.trim", "        val words = sentence.split(\" \")\n     \
    \   words.filter(w => isPrime(w.length)).mkString(\" \")", "        def isPrime(n\
    \ : Int) : Boolean = {\n            if (n <= 1) return false\n            if (n\
    \ == 2) return true\n            for (i <- 2 to sqrt(n).toInt if n % i == 0) return\
    \ false\n            true\n        }\n        sentence.split(\" \").filter(word\
    \ => isPrime(word.length)).mkString(\" \")", '        sentence.split(" ").filter(x
    => isPrime(x.length)).mkString(" ")', "        val words = sentence.split(\" \"\
    )\n        val wordsWithPrimeLength = words.filter(word => isPrime(word.length))\n\
    \        wordsWithPrimeLength.mkString(\" \")", "        def isPrime(n : Int)\
    \ : Boolean = {\n            if (n <= 1) return false\n            if (n == 2)\
    \ return true\n            var i = 2\n            while (i <= sqrt(n).toInt) {\n\
    \                if (n % i == 0) return false\n                i += 1\n      \
    \      }\n            return true\n        }\n        var result = ArrayBuffer[String]()\n\
    \        for (word <- sentence.split(\" \")) {\n            if (isPrime(word.length))\
    \ result += word\n        }\n        return result.mkString(\" \")", "       \
    \ // Write your code here\n        return \"\"", "        // Define a function\
    \ to check whether a number is prime or not\n        def isPrime(num : Int) :\
    \ Boolean = {\n            if (num == 1) return false\n            else {\n  \
    \              val sqrtNum = sqrt(num)\n                for (factor <- 2 to sqrtNum.toInt)\
    \ {\n                    if (num % factor == 0) return false\n               \
    \ }\n                return true\n            }\n        }\n        // If a word\
    \ is made of prime length characters,\n        // then we can conclude that it\
    \ contains prime length substrings\n        // for example, \"abcdefg\" contains:\n\
    \        // * \"a\"\n        // * \"b\"\n        // * \"c\"\n        // * \"d\"\
    \n        // * \"e\"\n        // * \"f\"\n        // * \"g\"\n        // * \"\
    ab\"\n        // * \"bc\"\n        // * \"cd\"\n        // * \"de\"\n        //\
    \ * \"ef\"\n        // * \"fg\"\n        // * \"abc\"\n        // * \"bcd\"\n\
    \        // * \"cde\"\n        // * \"def\"\n        // * \"efg\"\n        //\
    \ * \"abcd\"\n        // * \"bcde\"\n        // * \"cdef\"\n        // * \"defg\"\
    \n        // * \"abcde\"\n        // * \"bcdef\"\n        // * \"cdefg\"\n   \
    \     // * \"abcdef\"\n        // * \"bcdefg\"\n        // * \"abcdefg\"\n   \
    \     // all of which are prime numbers\n        val words : Array[String] = sentence.split(\"\
    \ \")\n        val result = new StringBuilder\n        for (word <- words) {\n\
    \            if (isPrime(word.length)) {\n                if (result.length !=\
    \ 0) result.append(\" \")\n                result.append(word)\n            }\n\
    \        }\n        return result.toString", "        val split = sentence.split(\"\
    \ \")\n        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37,\
    \ 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val result = new\
    \ ArrayBuffer[String]\n        for (i <- 0 until split.length) {\n           \
    \ if (primes.contains(split(i).length)) {\n                result += split(i)\n\
    \            }\n        }\n        result.mkString(\" \")", "        val words\
    \ = sentence.split(\" \")\n        var ret = \"\"\n        for (word <- words)\
    \ {\n            if (isPrime(word.length)) {\n                ret += word + \"\
    \ \"\n            }\n        }\n        return ret.trim", "        val words =\
    \ sentence.split(\" \")\n        var res = \"\"\n        for (word <- words) {\n\
    \            if (word.length > 1 && isPrime(word.length)) {\n                res\
    \ += word + \" \"\n            }\n        }\n        return res.trim", "     \
    \   val words = sentence.split(\" \")\n        var isPrime = new HashMap[Int,\
    \ Boolean]\n        def isPrimeNumber(num : Int) : Boolean = {\n            if\
    \ (num == 2) return true\n            if (num % 2 == 0) return false\n       \
    \     for (x <- 3 to num) {\n                if (num % x == 0) return false\n\
    \            }\n            return true\n        }\n        var primeWords = new\
    \ ArrayBuffer[String]\n        for (word <- words) {\n            if (isPrime.contains(word.length))\
    \ {\n                if (isPrime(word.length)) primeWords += word\n          \
    \  } else {\n                if (isPrimeNumber(word.length)) {\n             \
    \       isPrime(word.length) = true\n                    primeWords += word\n\
    \                } else {\n                    isPrime(word.length) = false\n\
    \                }\n            }\n        }\n        return primeWords.mkString(\"\
    \ \")", "        val words = sentence.split(\" \")\n        return words.filter(x\
    \ => isPrime(x.length)).mkString(\" \")", "        def isPrime(num : Int) : Boolean\
    \ = {\n            for (i <- 2 to sqrt(num).toInt) {\n                if (num\
    \ % i == 0) return false\n            }\n            true\n        }\n       \
    \ def isPrimeCheck(x : (Int, String)) : Boolean = {\n            isPrime(x._1)\n\
    \        }\n        val words = sentence.split(\" \")\n        val wordSize =\
    \ words.map(x => (x.length, x))\n        wordSize.filter(isPrimeCheck).map(x =>\
    \ x._2).mkString(\" \")", "        // Your code here\n        val s = sentence.split(\"\
    \ \")\n        val length = s.length\n        var res = List[String]()\n     \
    \   for (i <- 0 until length) {\n            if (isPrime(s(i).length)) res = s(i)\
    \ :: res\n        }\n        res.reverse.mkString(\" \")", "        def isPrime(n\
    \ : Int) : Boolean = {\n            if (n == 1) return false\n            for\
    \ (i <- 2 to sqrt(n).toInt) {\n                if (n % i == 0) return false\n\
    \            }\n            return true\n        }\n        val words = sentence.split(\"\
    \ \")\n        val arr = new ArrayBuffer[String]\n        for (i <- 0 until words.length)\
    \ {\n            if (isPrime(words(i).length)) arr += words(i)\n        }\n  \
    \      return arr.mkString(\" \")", "      val primes = ArrayBuffer(2, 3, 5, 7,\
    \ 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97)\n      val words = sentence.split(\" \")\n      var primeWords = \"\"\
    \n      for (i <- 0 until words.length) {\n        if (primes.contains(words(i).length))\
    \ {\n          primeWords += words(i) + \" \"\n        }\n      }\n      primeWords.substring(0,\
    \ primeWords.length - 1)", "        def isPrime(num : Int) : Boolean = {\n   \
    \         num == 2 || (2 to sqrt(num).toInt).forall(x => num % x != 0)\n     \
    \   }\n        sentence.split(\" \").filter(word => isPrime(word.length)).mkString(\"\
    \ \")", "        val words = sentence.split(\" \")\n        words.filter(x =>\
    \ {\n            val len = x.length\n            if (len == 1) return false\n\
    \            var isPrime = true\n            (2 to (len - 1)).foreach(y => if\
    \ (len % y == 0) isPrime = false)\n            isPrime\n        }).mkString(\"\
    \ \")", "        val words = sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n\
    \        for (i <- 2 to words.map(_.length).max) {\n            var isPrime =\
    \ true\n            for (j <- 2 to floor(sqrt(i)).toInt) {\n                if\
    \ (i % j == 0) {\n                    isPrime = false\n                    break\n\
    \                }\n            }\n            if (isPrime) primes += i\n    \
    \    }\n        var result = \"\"\n        for (i <- 0 until words.length) {\n\
    \            if (primes.contains(words(i).length)) {\n                result +=\
    \ words(i) + \" \"\n            }\n        }\n        result.dropRight(1)", " \
    \       // Write your code here\n        null", "        // get all words from\
    \ the sentence\n        val words = sentence.split(\" \")\n        // get the\
    \ lengths of all words from the sentence\n        val wordLengths = words.map(_.length)\n\
    \        // get the prime numbers from all word lengths\n        val primes =\
    \ wordLengths.filter(isPrime)\n        // return the words having length of a\
    \ prime\n        words.zip(wordLengths).filter(x => primes.contains(x._2)).map(_._1).mkString(\"\
    \ \")", "        val words = sentence.split(\" \")\n        def isPrime(x : Int)\
    \ : Boolean = {\n            if (x <= 1) false\n            else if (x == 2) true\n\
    \            else !(2 to (x - 1)).exists(i => x % i == 0)\n        }\n       \
    \ words.filter(word => isPrime(word.length)).mkString(\" \")", '        sentence.split("
    ").filter(x => isPrime(x.length)).mkString(" ")', "        // Fill up this function\
    \ body\n        // 'sentence' is a sentence where all the letters are lower-case\n\
    \        // 'return' a string that contains all words separated by space\n   \
    \     // whose lengths are prime numbers in the same order of the words in the\
    \ original sentence\n        val ps = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29,\
    \ 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        sentence.split(\"\
    \ \").filter(s => ps.contains(s.length)).mkString(\" \")", '        null', " \
    \       def isPrime(n : Int) : Boolean = {\n            if (n == 1) false\n  \
    \          else if (n == 2) true\n            else !(2 to (sqrt(n).toInt)).exists(n\
    \ % _ == 0)\n        }\n        val words = sentence.split(\" \")\n        words.filter(isPrime(_)).mkString(\"\
    \ \")", "        // Write your code here\n        // return \"\"\n        sentence.split(\"\
    \ \").filter(x => {\n            val length = x.length\n            if (length\
    \ == 1) return false\n            var factor = 2\n            while (factor <=\
    \ ceil(sqrt(length)).toInt) {\n                if (length % factor == 0) return\
    \ false\n                factor += 1\n            }\n            true\n      \
    \  }).mkString(\" \")", "        // your code here\n        if (sentence.isEmpty)\
    \ return sentence\n        val words = sentence.split(\" \")\n        words.filter(w\
    \ => isPrime(w.length)).mkString(\" \")", "        val words = sentence.split(\"\
    \ \")\n        def isPrime(x : Int) : Boolean = {\n            if (x <= 1) return\
    \ false\n            if (x == 2) return true\n            if (x % 2 == 0) return\
    \ false\n            for (i <- 3 to sqrt(x).toInt by 2) {\n                if\
    \ (x % i == 0) return false\n            }\n            return true\n        }\n\
    \        val result = words.filter(word => isPrime(word.length))\n        if (result.length\
    \ == 0) return \"\"\n        return result.reduce((str1, str2) => str1 + \" \"\
    \ + str2)", "        /**\n         * The approach here is to split the sentence\
    \ into an array of words,\n         * and then find the words whose length is\
    \ a prime number.\n         * To check whether a number is prime or not,\n   \
    \      * we use the formula(more of a theorem) that if a number > 2 is not divisible\
    \ by any number < sqrt(number),\n         * it is a prime number.\n         *\
    \ We could have used a Sieve of Eratosthenes algorithm too,\n         * but I\
    \ think this is a much better approach.\n         */\n        var words = sentence.split(\"\
    \ \")\n        var output = new ArrayBuffer[String]()\n        for (i <- 0 until\
    \ words.length) {\n            var word = words(i)\n            var prime = true\n\
    \            for (j <- 2 until sqrt(word.length).toInt) {\n                if\
    \ (word.length % j == 0) {\n                    prime = false\n              \
    \      break\n                }\n            }\n            if (prime) output\
    \ += word\n        }\n        output.mkString(\" \")", "        // Write your\
    \ code here\n        null", "        if (sentence.length > 100)\n            throw\
    \ new IllegalArgumentException(\"Please provide a sentence that is less than 100\
    \ characters\")\n        if (!sentence.matches(\"[a-zA-Z ]+\"))\n            throw\
    \ new IllegalArgumentException(\"Please provide a sentence that only contains\
    \ letters\")\n        sentence.split(\" \").filter(word => isPrime(word.length)).mkString(\"\
    \ \")", "      val chars = sentence.toCharArray.filter(x => Character.isLetter(x))\n\
    \      val words = new ArrayBuffer[String]\n      val primeWords = new ArrayBuffer[String]\n\
    \      var word = new StringBuilder\n      for (i <- 0 until chars.length) {\n\
    \        if (chars(i) == ' ') {\n          words += word.toString\n          word\
    \ = new StringBuilder\n        } else {\n          word += chars(i)\n        }\n\
    \      }\n      words += word.toString\n      def isPrime(n : Int) : Boolean =\
    \ {\n        if (n <= 1) return false\n        for (i <- 2 until (sqrt(n).toInt\
    \ + 1)) {\n          if (n % i == 0) return false\n        }\n        true\n \
    \     }\n      for (word <- words) {\n        if (isPrime(word.length)) primeWords\
    \ += word\n      }\n      return primeWords.mkString(\" \")", '        sentence.split("
    ").filter(x => isPrime(x.length)).mkString(" ")', "        val words = sentence.split(\"\
    \ \")\n        val primeWords = for (w <- words if isPrime(w.length)) yield w\n\
    \        primeWords.mkString(\" \")", "        var isPrime = (2 to 100).toList\n\
    \        isPrime = isPrime.filter(x => x % 2 != 0 || x == 2)\n        isPrime\
    \ = isPrime.filter(x => x % 3 != 0 || x == 3)\n        isPrime = isPrime.filter(x\
    \ => x % 5 != 0 || x == 5)\n        isPrime = isPrime.filter(x => x % 7 != 0 ||\
    \ x == 7)\n        val s = sentence.split(\" \")\n        val result = s.filter(x\
    \ => isPrime.contains(x.length))\n        result.mkString(\" \")", "        val\
    \ s : Array[String] = sentence.split(\" \")\n        val primeLengthWords : StringBuilder\
    \ = new StringBuilder\n        for (i <- 0 until s.length) {\n            if (isPrime(s(i).length))\
    \ {\n                primeLengthWords.append(s(i) + \" \")\n            }\n  \
    \      }\n        primeLengthWords.toString", "        def isPrime(n : Int) :\
    \ Boolean = {\n            val m = sqrt(n).toInt\n            var flag = true\n\
    \            for (i <- 2 to m) {\n                if (n % i == 0) {\n        \
    \            flag = false\n                    return flag\n                }\n\
    \            }\n            flag\n        }\n        var words = sentence.split(\"\
    \ \")\n        var res = new ArrayBuffer[String]()\n        for (i <- 0 until\
    \ words.length) {\n            if (isPrime(words(i).length)) res += words(i)\n\
    \        }\n        res.mkString(\" \")", "        // Your code here\n       \
    \ // Put your solution here\n        def isPrime(n : Int) : Boolean = {\n    \
    \        if (n <= 1) return false\n            for (i <- 2 to n/2 if n % i ==\
    \ 0) return false\n            true\n        }\n        sentence.split(\" \").filter(isPrime(_)).mkString(\"\
    \ \")", "        val str = sentence.split(\" \")\n        val list = new ListBuffer[String]\n\
    \        for (i <- 0 until str.length) {\n            if (isPrime(str(i).length))\
    \ {\n                list += str(i)\n            }\n        }\n        return\
    \ list.mkString(\" \")", "        val words = sentence.split(\" \")\n        var\
    \ s = new StringBuilder\n        for (i <- 0 until words.length) {\n         \
    \   if (isPrime(words(i).length)) {\n                s.append(words(i))\n    \
    \            s.append(\" \")\n            }\n        }\n        if (s.length ==\
    \ 0) \"\" else s.toString.trim", "        if(sentence.length > 100) return \"\"\
    \n        var words : Array[String] = sentence.split(\" \")\n        var wordLength\
    \ : Array[Int] = new Array[Int](words.length)\n        var primeWordLength : ArrayBuffer[Int]\
    \ = new ArrayBuffer[Int]()\n        var result : String = \"\"\n        for(i\
    \ <- 0 until words.length) {\n            wordLength(i) = words(i).length\n  \
    \          if(isPrime(wordLength(i))) primeWordLength += wordLength(i)\n     \
    \   }\n        for(i <- 0 until words.length) {\n            if(primeWordLength.contains(wordLength(i)))\
    \ result += words(i) + \" \"\n        }\n        result.trim", "        val words\
    \ = sentence.split(\" \")\n        var ret = \"\"\n        for (word <- words)\
    \ {\n            if (Prime.isPrime(word.length)) {\n                ret += word\
    \ + \" \"\n            }\n        }\n        return ret.dropRight(1)", "     \
    \   val sp = sentence.split(\" \")\n        val primes = Set(2, 3, 5, 7, 11, 13,\
    \ 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n\
    \        var result = \"\"\n        for (s <- sp) {\n            if (primes.contains(s.length))\
    \ result += s + \" \"\n        }\n        result.trim", "        val words = sentence.split(\"\
    \ \")\n        val primeCount = for(word <- words if isPrime(word.length)) yield\
    \ word\n        return primeCount.mkString(\" \")", "        // Write your code\
    \ here\n        return null;", "        // Write your code here\n        \"\"",
  "        // 1. Calculate length of the sentence\n        // 2. Parse the string\
    \ by a space\n        // 3. for each word get the length\n        // 4. check\
    \ if it is prime number\n        // 5. if prime then add to buffer\n        //\
    \ 6. return the buffer\n        val splited = sentence.split(\" \")\n        val\
    \ buffer = Buffer[String]()\n        splited.foreach {\n            word => if\
    \ (isPrime(word.length)) buffer += word\n        }\n        buffer.mkString(\"\
    \ \")", '        sentence.split(" ").filter(x => isPrime(x.length)).mkString("
    ")', "        val words = sentence.split(\" \")\n        val primes = words.map(_.length).filter(isPrime)\n\
    \        words.zipWithIndex.filter(t => primes.contains(t._1.length)).map(_._1).mkString(\"\
    \ \")", "        // Write your code here\n        val s = sentence.split(\" \"\
    )\n        val result = new StringBuilder\n        for (w <- s) {\n          \
    \  if (isPrime(w.length)) {\n                result.append(w + \" \")\n      \
    \      }\n        }\n        result.toString.trim", "        val s = sentence.split(\"\
    \ \")\n        s.filter(w => isPrime(w.length)).mkString(\" \")", "        val\
    \ words = sentence.split(\" \")\n        val result = new ListBuffer[String]\n\
    \        for (word <- words) {\n            if (isPrime(word.length)) result +=\
    \ word\n        }\n        result.mkString(\" \")", '        return null', " \
    \       val primes = sieveOfEratosthenes(100)\n        val wordList = sentence.split(\"\
    \ \")\n        val result = new ListBuffer[String]\n        for (word <- wordList)\
    \ {\n            if (primes.contains(word.length)) result += word\n        }\n\
    \        result.mkString(\" \")", "        var isPrime = new Array[Boolean](102)\n\
    \        isPrime(0) = false\n        isPrime(1) = false\n        for (i <- 2 to\
    \ 101) {\n            isPrime(i) = true\n        }\n        for (i <- 2 to 10)\
    \ {\n            if (isPrime(i)) {\n                for (j <- 2 * i to 101 by\
    \ i) {\n                    isPrime(j) = false\n                }\n          \
    \  }\n        }\n        sentence.split(\" \").filter(x => isPrime(x.length)).mkString(\"\
    \ \")", "        def isPrime(x : Int) : Boolean = {\n            if (x == 1) return\
    \ false\n            for (i <- 2 to floor(sqrt(x)).toInt) {\n                if\
    \ (x % i == 0) return false\n            }\n            return true\n        }\n\
    \        val words = sentence.split(\" \")\n        val buffer = new ListBuffer[String]\n\
    \        for (word <- words) {\n            if (isPrime(word.length)) buffer +=\
    \ word\n        }\n        return buffer.mkString(\" \")", "        var result\
    \ = ArrayBuffer[String]()\n        val pattern = \"\\\\w+\".r\n        for (m\
    \ <- pattern.findAllIn(sentence)) {\n            if (isPrime(m.length)) result\
    \ += m\n        }\n        result.mkString(\" \")", "        val words = sentence.split(\"\
    \ \")\n        words.filter(x => isPrime(x.length)).mkString(\" \")", "      \
    \  val array = sentence.split(\" \")\n        var output = \"\"\n        array.foreach(x\
    \ => if (isPrime(x.length)) {\n            output += x + \" \"\n        })\n \
    \       output.trim", "        /**\n          * Returns true if n is prime\n \
    \         */\n        def isPrime(n : Int) : Boolean = {\n            if (n <=\
    \ 1) {\n                return false\n            }\n            if (n == 2) {\n\
    \                return true\n            }\n            if (n % 2 == 0) {\n \
    \               return false\n            }\n            val limit = sqrt(n).toInt\n\
    \            for (i <- 3 to limit by 2) {\n                if (n % i == 0) {\n\
    \                    return false\n                }\n            }\n        \
    \    return true\n        }\n        val words = sentence.split(\" \")\n     \
    \   val primeWords = new ArrayBuffer[String]\n        for (word <- words) {\n\
    \            if (isPrime(word.length)) {\n                primeWords += word\n\
    \            }\n        }\n        return primeWords.mkString(\" \")", "     \
    \   val list = sentence.split(\" \").toList\n        //scala.collection.mutable.ListBuffer[Int]()\n\
    \        val primes = ListBuffer[Int]()\n        for (i <- list) {\n         \
    \   if (isPrime(i.length)) {\n                primes += i.length\n           \
    \ }\n        }\n        primes.toList.sortWith(_<_).map { x => list(list.indexWhere(_.length\
    \ == x)) }.mkString(\" \")", "        var words : Array[String] = sentence.split(\"\
    \ \")\n        var result : StringBuilder = new StringBuilder\n        for (i\
    \ <- 0 until words.length) {\n            if (isPrime(words(i).length)) {\n  \
    \              result.append(words(i) + \" \")\n            }\n        }\n   \
    \     return result.toString.trim", "        // Write your code here\n       \
    \ \"\"", "        // Write your code here\n        var counter = 0\n        var\
    \ found = false\n        val primes = ArrayBuffer(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  def isPrime(number : Int) : Boolean = {\n            primes.contains(number)\n\
    \        }\n        val words = sentence.split(\" \")\n        words.filter(isPrime(_)).mkString(\"\
    \ \")", "        def isPrime(n : Int) : Boolean = {\n            if (n <= 1) false\n\
    \            else if (n == 2) true\n            else !(2 to sqrt(n).toInt).exists(x\
    \ => n % x == 0)\n        }\n        sentence.split(\" \").filter(x => isPrime(x.length)).mkString(\"\
    \ \")", '        sentence.split(" ").filter(x => primes.contains(x.length)).mkString("
    ")', "        // Your code here\n        val words = sentence.split(\" \")\n \
    \       val primes = new HashSet[Int]\n        for (i <- 1 to sqrt(words.map(_.length).max).toInt)\
    \ {\n            if (words.map(_.length).max % i == 0) {\n                primes\
    \ += i\n                primes += words.map(_.length).max / i\n            }\n\
    \        }\n        words.filter(primes.contains(_)).mkString(\" \")", "     \
    \   def isPrime(n : Int) : Boolean = {\n            if (n == 2) true\n       \
    \     else if (n < 2 || n % 2 == 0) false\n            else !(3 to sqrt(n).toInt\
    \ by 2).exists(n % _ == 0)\n        }\n        sentence.split(\" \").filter(w\
    \ => isPrime(w.length)).mkString(\" \")", "        // the input sentence\n   \
    \     val s = sentence\n        // split the sentence into words\n        val\
    \ words = s.split(\" \")\n        // define a new string builder\n        val\
    \ newString = new StringBuilder()\n        // for each word, if its length is\
    \ a prime number\n        // append the word to the string builder\n        for\
    \ (w <- words) {\n            if (isPrime(w.length)) {\n                newString.append(w\
    \ + \" \")\n            }\n        }\n        // return the string builder\n \
    \       newString.toString.trim", "        var sb = new StringBuilder\n      \
    \  var isFirst = true\n        sentence.split(\" \").foreach(word => {\n     \
    \       if(word.length > 0 && isPrime(word.length)) {\n                if(isFirst)\n\
    \                    isFirst = false\n                else\n                 \
    \   sb.append(\" \")\n                sb.append(word)\n            }\n       \
    \ })\n        sb.toString", '        sentence.split(" ").filter(x => (2 to x.length
    - 1).filter(y => x.length % y == 0).length == 0).mkString(" ")', "        val\
    \ s = sentence.split(\" \")\n        def isPrime(n : Int) : Boolean = {\n    \
    \        if (n == 1) return false\n            for (i <- 2 to n / 2) if (n % i\
    \ == 0) return false\n            true\n        }\n        var result = \"\"\n\
    \        for (i <- 0 until s.length) {\n            if (isPrime(s(i).length))\
    \ {\n                if (result == \"\") result = s(i)\n                else result\
    \ += \" \" + s(i)\n            }\n        }\n        result", "        // Write\
    \ your code here\n        var res = \"\"\n        for (word <- sentence.split(\"\
    \ \")) {\n            var prime = true\n            for (i <- 2 to word.length)\
    \ {\n                if (word.length % i == 0) {\n                    prime =\
    \ false\n                    break\n                }\n            }\n       \
    \     if (prime) res += word + \" \"\n        }\n        res.dropRight(1)", " \
    \       // Write your code here\n        return \"\"", "      var arrayOfWords\
    \ = sentence.split(\" \")\n      var wordsOfInterest = new ListBuffer[String]()\n\
    \      var primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      for (word <- arrayOfWords) {\n\
    \        if (primes.contains(word.length)) {\n          wordsOfInterest += word\n\
    \        }\n      }\n      return wordsOfInterest.mkString(\" \")", "        val\
    \ words = sentence.split(\" \")\n        def isPrime(x : Int) : Boolean = {\n\
    \            var i = 2\n            while (i <= sqrt(x)) {\n                if\
    \ (x % i == 0) return false\n                i += 1\n            }\n         \
    \   true\n        }\n        words.filter(word => isPrime(word.length)).mkString(\"\
    \ \")", "        val words = sentence.split(\" \")\n        val primeLengthWords\
    \ = words.filter(word => isPrime(word.length))\n        primeLengthWords.mkString(\"\
    \ \")", "        val words = sentence.split(\" \")\n        val primes = ArrayBuffer(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97)\n        val answer = for (word <- words if primes.contains(word.length))\
    \ yield word\n        answer.mkString(\" \")", '        sentence.split(" ").filter(isPrime(_)).mkString("
    ")', "        val primeNumbers = sieve(300)\n        def isPrime(x : Int) = primeNumbers.contains(x)\n\
    \        sentence.split(\" \").filter(x => isPrime(x.length)).mkString(\" \")",
  '        return sentence.split(" ").filter(word => word.size.isPrime).mkString("
    ")', "        var sentenceList = sentence.split(\" \")\n        var primeSentence\
    \ = new ListBuffer[String]()\n        for (word <- sentenceList) {\n         \
    \   if (List(2, 3, 5, 7).contains(word.length)) primeSentence += word\n      \
    \  }\n        primeSentence.mkString(\" \")", "        def isPrime(n : Int) :\
    \ Boolean = {\n            (2 to sqrt(n).toInt).map(n % _).foldLeft(true)(_ &&\
    \ _ != 0)\n        }\n        sentence.split(\" \").filter(word => isPrime(word.length)).mkString(\"\
    \ \")", "        val s = sentence.split(\" \")\n        val primes = Array(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97)\n        var result = List[String]()\n        for (i <- 0 until\
    \ s.length) {\n            if (primes.contains(s(i).length)) {\n             \
    \   result = result :+ s(i)\n            }\n        }\n        result.mkString(\"\
    \ \")", "        def isPrime(n : Int) : Boolean = {\n            if (n <= 1) return\
    \ false\n            if (n == 2) return true\n            if (n % 2 == 0) return\
    \ false\n            val m = sqrt(n).toInt\n            for (i <- 3 to m by 2)\
    \ {\n                if (n % i == 0) return false\n            }\n           \
    \ return true\n        }\n        val words = sentence.split(\" \")\n        val\
    \ builder = new StringBuilder\n        for (i <- 0 until words.length) {\n   \
    \         if (isPrime(words(i).length)) {\n                builder.append(words(i))\n\
    \                builder.append(\" \")\n            }\n        }\n        builder.toString.trim",
  "        val words = sentence.split(\" \")\n        val primes = Prime.generatePrimes(100)\n\
    \        val results = ListBuffer[String]()\n        for (word <- words) if (primes.contains(word.length))\
    \ results += word\n        results.mkString(\" \")", "        // your code here\n\
    \        val sentenceSplit = sentence.split(\" \")\n        val arr = sentenceSplit.map(_.length)\n\
    \        val prime = arr.filter(isPrime)\n        val result = arr.zipWithIndex.filter(t\
    \ => prime.contains(t._1)).map(t => sentenceSplit(t._2))\n        result.mkString(\"\
    \ \")", "        def isPrime(n : Int) : Boolean = {\n            if (n <= 1) return\
    \ false\n            if (n == 2) return true\n            if (n % 2 == 0) return\
    \ false\n            for (i <- 3 to n / 2 by 2) if (n % i == 0) return false\n\
    \            return true\n        }\n        sentence.split(\" \").filter(x =>\
    \ isPrime(x.length)).mkString(\" \")", "        // Write your code here\n    \
    \    // Return the answer\n        ???", "        def isPrime(n : Int) : Boolean\
    \ = {\n            val boundary = sqrt(n).toInt\n            if (n % 2 == 0) return\
    \ false\n            for (i <- 3 to boundary by 2) {\n                if (n %\
    \ i == 0) return false\n            }\n            return true\n        }\n  \
    \      val res = new ListBuffer[String]\n        val words = sentence.split(\"\
    \ \")\n        for (i <- 0 until words.length) {\n            if (isPrime(words(i).length))\
    \ res += words(i)\n        }\n        return res.mkString(\" \")", "        //\
    \ Write your code here\n        \"\".toString", "        def isPrime(n : Int)\
    \ : Boolean = {\n            if (n <= 1) return false\n            val sqrt =\
    \ Math.sqrt(n).toInt\n            for (i <- 2 to sqrt) if (n % i == 0) return\
    \ false\n            true\n        }\n        sentence.split(\" \").filter(word\
    \ => isPrime(word.length)).mkString(\" \")", "        def isPrime(i : Int) : Boolean\
    \ = {\n            if (i == 1) return false\n            for (j <- 2 to sqrt(i).toInt)\
    \ if (i % j == 0) return false\n            return true\n        }\n        val\
    \ words = sentence.split(\" \")\n        val newWords = ArrayBuffer[String]()\n\
    \        for (word <- words) if (isPrime(word.length)) newWords += word\n    \
    \    return newWords.mkString(\" \")", "        val words = sentence.split(\"\
    \ \")\n        val words2 = words.filter(word => isPrime(word.length))\n     \
    \   words2.mkString(\" \")", '        return sentence.split(" ").filter(x => (2
    to sqrt(x.length).toInt).forall(y => x.length % y != 0)).mkString(" ")', "   \
    \     val s = sentence.split(\" \")\n        def isPrime(n : Int) : Boolean =\
    \ (n > 1) && !(2 to (sqrt(n).toInt)).exists(n % _ == 0)\n        val l = s.map(x\
    \ => (x, x.length)).filter(x => isPrime(x._2)).map(_._1)\n        l.mkString(\"\
    \ \")", "        def isPrime(n : Int) : Boolean = {\n            if (n <= 1) return\
    \ false\n            if (n == 2) return true\n            if (n % 2 == 0) return\
    \ false\n            for (i <- 3 to (sqrt(n).toInt + 1) by 2) {\n            \
    \    if (n % i == 0) return false\n            }\n            return true\n  \
    \      }\n        sentence.split(\" \").filter(x => isPrime(x.length)).mkString(\"\
    \ \")", "        var res = List[String]()\n        for (word <- sentence.split(\"\
    \ \")) {\n            if (isPrime(word.length)) res = word :: res\n        }\n\
    \        res.reverse.mkString(\" \")", "        // your solution here\n      \
    \  return \"\"", "        var words = sentence.split(\" \")\n        var res =\
    \ new StringBuilder\n        for (word <- words) {\n            if (isPrime(word.length))\
    \ {\n                res.append(word)\n                res.append(\" \")\n   \
    \         }\n        }\n        return res.toString", "        // check whether\
    \ x is prime or not\n        def isPrime(x : Int) : Boolean = {\n            if\
    \ (x == 1) return false\n            for (i <- 2 to x / 2) {\n               \
    \ if (x % i == 0) return false\n            }\n            return true\n     \
    \   }\n        val array = sentence.split(\" \")\n        val builder = new StringBuilder\n\
    \        for (word <- array) {\n            if (isPrime(word.length)) {\n    \
    \            builder.append(word + \" \")\n            }\n        }\n        return\
    \ builder.toString", "        // your code goes here\n        sentence.split(\"\
    \ \").filter(word => isPrime(word.length)).mkString(\" \")", "        val s =\
    \ sentence.split(\" \")\n        val primes = (2 #:: Stream.from(3, 2)).takeWhile(_\
    \ <= s.map(_.length).max).toSet\n        s.filter(x => primes.contains(x.length)).mkString(\"\
    \ \")", "        sentence.split(\" \").filter(word => {\n            (word.length\
    \ >= 2 && word.length <= 100) &&\n            \"2579\".contains(word.length.toString.last)\n\
    \        }).mkString(\" \")", "        // Write your code here\n        null",
  "        def isPrime(x : Int) : Boolean = {\n            if (x == 2) true\n    \
    \        else if (x < 2 || x % 2 == 0) false\n            else {\n           \
    \     var i = 3\n                while (i * i <= x) {\n                    if\
    \ (x % i == 0) return false\n                    i += 2\n                }\n \
    \               true\n            }\n        }\n        val result = new StringBuilder\n\
    \        for (x <- sentence.split(\" \")) {\n            if (isPrime(x.length))\
    \ {\n                if (result.isEmpty) result.append(x)\n                else\
    \ result.append(\" \" + x)\n            }\n        }\n        result.toString",
  '        sentence.split(" ").filter(s => s.length > 1 && !isPrime(s.length)).mkString("
    ")', "        // Write your code here\n        // To print results to the standard\
    \ output you can use Console.println\n        // Example:\n        // Console.println(\"\
    Hello world\")\n        var result : String = \"\"\n        val words = sentence.split(\"\
    \ \")\n        words.foreach(word => {\n            if (isPrime(word.length))\
    \ {\n                result += word + \" \"\n            }\n        })\n     \
    \   result", "        val words = sentence.split(\" \")\n        val primeWords\
    \ = words.filter(w => isPrime(w.length))\n        primeWords.mkString(\" \")",
  "        // Write your code here\n        val primes = sieve(sentence.length)\n\
    \        val inds = (for (i <- 0 until sentence.length if primes(i)) yield i).toList\n\
    \        val list = sentence.split(\" \").toList\n        val res = new StringBuilder\n\
    \        list.zipWithIndex.foreach(x => if (inds.contains(x._2)) res.append(x._1\
    \ + \" \"))\n        res.toString.trim", "        val words = sentence.split(\"\
    \ \")\n        val isPrime = Array.fill(101)(true)\n        isPrime(0) = false\n\
    \        isPrime(1) = false\n        for (i <- 2 to 100) {\n            if (isPrime(i))\
    \ for (j <- 2 to 100 / i) isPrime(i * j) = false\n        }\n        words.filter(w\
    \ => isPrime(w.length)).mkString(\" \")", "        val array = sentence.split(\"\
    \ \")\n        val primes = primeSet(array.map(_.length).max)\n        val res\
    \ = array.filter(x => primes.contains(x.length))\n        res.mkString(\" \")",
  "        // Write your code here\n        // Return \"Not Implemented\" as default\n\
    \        \"Not Implemented\"", "        // Write your solution here\n        var\
    \ result = new StringBuilder()\n        val strs = sentence.split(\" \")\n   \
    \     strs.foreach(i => {\n            if (isPrime(i.length)) {\n            \
    \    result.append(i + \" \")\n            }\n        })\n        result.toString.stripSuffix(\"\
    \ \")", "        val words = sentence.split(\" \")\n        var result = List[String]()\n\
    \        for (word <- words) {\n            if (isPrime(word.length)) result ::=\
    \ word\n        }\n        result.reverse.mkString(\" \")", "        def isPrime(n\
    \ : Int) : Boolean = {\n            var bound = floor(sqrt(n)).toInt\n       \
    \     for (i <- 2 to bound) {\n                if (n % i == 0) return false\n\
    \            }\n            return true\n        }\n        val words = sentence.split(\"\
    \ \")\n        val filtered = words.filter(word => isPrime(word.length))\n   \
    \     return filtered.mkString(\" \")", '        return sentence.split(" ").filter(x
    => isPrime(x.length)).mkString(" ")', "        var words = sentence.split(\" \"\
    )\n        var result = new StringBuilder\n        var first = true\n        for\
    \ (word <- words) {\n            if (isPrime(word.length)) {\n               \
    \ if (first) {\n                    first = false\n                } else {\n\
    \                    result ++= \" \"\n                }\n                result\
    \ ++= word\n            }\n        }\n        result.toString", "        // calculate\
    \ the length of each word\n        // 1. split the sentence to list of words\n\
    \        // 2. create a list of tuples (word, lengthOfWord)\n        // 3. get\
    \ the list of prime numbers with maximum length\n        val primeNumbers = PrimeNumbersList(100)\n\
    \        val maxPrime = primeNumbers.max\n        val words = sentence.split(\"\
    \ \")\n        val wordLengths = words.map(s => (s, s.length))\n        val wordLengthsAsPrime\
    \ = wordLengths.filter(w => primeNumbers.contains(w._2) && w._2 < maxPrime)\n\
    \        val maxPrimeLength = wordLengthsAsPrime.map(w => w._2).max\n        val\
    \ wordsWithMaxPrimeLength = wordLengthsAsPrime.filter(w => w._2 == maxPrimeLength)\n\
    \        val wordsWithMaxPrimeLengthSorted = wordsWithMaxPrimeLength.sortBy(w\
    \ => w._1)\n        wordsWithMaxPrimeLengthSorted.map(w => w._1).mkString(\" \"\
    )", "        val primes = HashSet(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37,\
    \ 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val words = sentence.split(\"\
    \ \")\n        val p = words.filter(x => primes.contains(x.length))\n        p.mkString(\"\
    \ \")", "        if (sentence.length == 0) return \"\"\n        // else\n    \
    \    var words = sentence.split(\" \")\n        val isPrime = Array.fill(25)(true)\n\
    \        for (i <- 2 until isPrime.length) {\n            if (isPrime(i))\n  \
    \              for (j <- i until isPrime.length) {\n                    if (j\
    \ % i == 0)\n                        isPrime(j) = false\n                }\n \
    \       }\n        var output = \"\"\n        for (word <- words) {\n        \
    \    if (isPrime(word.length)) {\n                if (output == \"\")\n      \
    \              output += word\n                else\n                    output\
    \ += \" \" + word\n            }\n        }\n        output", "        // fill\
    \ in this code\n        \"\"", "        var words = sentence.split(\" \")\n  \
    \      var res = ListBuffer[String]()\n        for (i <- 0 until words.length)\
    \ {\n            if (isPrime(words(i).length)) res += words(i)\n        }\n  \
    \      var result = res.mkString(\" \")\n        if (result.isEmpty) \"\" else\
    \ result", "        def isPrime(n : Int) : Boolean = {\n            def isPrime_n(i\
    \ : Int) : Boolean = {\n                if (i <= 1) true\n                else\
    \ n % i != 0 && isPrime_n(i - 1)\n            }\n            isPrime_n(n / 2)\n\
    \        }\n        var result = \"\";\n        for (word <- sentence.split(\"\
    \ \")) {\n            if (isPrime(word.length)) {\n                result += \"\
    \ \" + word\n            }\n        }\n        result.trim", "        def isPrime(n\
    \ : Int) : Boolean = {\n            if (n == 1) {\n                return false\n\
    \            }\n            for (i <- 2 to n / 2) {\n                if (n % i\
    \ == 0) {\n                    return false\n                }\n            }\n\
    \            return true\n        }\n        var arr = sentence.split(\" \")\n\
    \        var res = \"\"\n        for (i <- 0 until arr.length) {\n           \
    \ var tmp = arr(i)\n            if (isPrime(tmp.length)) {\n                res\
    \ += tmp + \" \"\n            }\n        }\n        return res.trim", "      \
    \  def isPrime(x : Int) : Boolean = (2 to x/2).forall(x % _ != 0)\n        sentence.split(\"\
    \ \").filter(x => isPrime(x.length)).mkString(\" \")", "        // Fill in the\
    \ code here\n        return \"\"", "        def isPrime(n : Int) : Boolean = if\
    \ (n < 2) false else if (n == 2) true else !(2 until n).exists(x => n % x == 0)\n\
    \        sentence.split(\" \").filter(x => isPrime(x.length)).mkString(\" \")",
  "        val strs = sentence.split(\" \")\n        var list : List[String] = List()\n\
    \        for (i <- 0 until strs.length) {\n            if (isPrime(strs(i).length))\
    \ list = list :+ strs(i)\n        }\n        list.mkString(\" \")", "        //\
    \ For each word in sentence,\n        // Check if its length is prime.\n     \
    \   // Add the word to string if it is prime.\n        val words = sentence.split(\"\
    \ \")\n        val lengthPrime = isLengthPrime(words)\n        val result = new\
    \ StringBuilder()\n        for (i <- 0 until words.length) {\n            if (lengthPrime(i))\
    \ {\n                result.append(words(i))\n                result.append(\"\
    \ \")\n            }\n        }\n        if (result.isEmpty) \"\" else result.toString.trim",
  "        // Write your code here\n        val words = sentence.split(\" \")\n  \
    \      val result = new StringBuilder\n        for (word <- words) {\n       \
    \     if (isPrime(word.length)) {\n                result.append(word)\n     \
    \           result.append(\" \")\n            }\n        }\n        result.toString.trim",
  "        // Given a string, returns a string that contains only prime length words\
    \ from the input string.\n        // The order of the words is maintained.\n \
    \       // * primeLengthWords(\"This is a test\") -> \"is\"\n        // * primeLengthWords(\"\
    lets go for swimming\") -> \"go for\"\n        def primeLengthWords(str : String)\
    \ : String = {\n            // Given a string, returns a string that contains\
    \ only prime length words from the input string.\n            // The order of\
    \ the words is maintained.\n            // * primeLengthWords(\"This is a test\"\
    ) -> \"is\"\n            // * primeLengthWords(\"lets go for swimming\") -> \"\
    go for\"\n            def primeLengthWords(str : String) : String = {\n      \
    \          // Given a string, returns a string that contains only prime length\
    \ words from the input string.\n                // The order of the words is maintained.\n\
    \                // * primeLengthWords(\"This is a test\") -> \"is\"\n       \
    \         // * primeLengthWords(\"lets go for swimming\") -> \"go for\"\n    \
    \            def primeLengthWords(str : String) : String = {\n               \
    \     // Given a string, returns a string that contains only prime length words\
    \ from the input string.\n                    // The order of the words is maintained.\n\
    \                    // * primeLengthWords(\"This is a test\") -> \"is\"\n   \
    \                 // * primeLengthWords(\"lets go for swimming\") -> \"go for\"\
    \n                    def primeLengthWords(str : String) : String = {\n      \
    \                  // Given a string, returns a string that contains only prime\
    \ length words from the input string.\n                        // The order of\
    \ the words is maintained.\n                        // * primeLengthWords(\"This\
    \ is a test\") -> \"is\"\n                        // * primeLengthWords(\"lets\
    \ go for swimming\") -> \"go for\"\n                        def primeLengthWords(str\
    \ : String) : String = {\n                            // Given a string, returns\
    \ a string that contains only prime length words from the input string.\n    \
    \                        // The order of the words is maintained.\n          \
    \                  // * primeLengthWords(\"This is a test\") -> \"is\"\n     \
    \                       // * primeLengthWords(\"lets go for swimming\") -> \"\
    go for\"\n                            def primeLengthWords(str : String) : String\
    \ = {\n                                // Given a string, returns a string that\
    \ contains only prime", "        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  sentence.split(\" \").filter(x => primes.contains(x.length)).mkString(\" \"\
    )", "        var result = new StringBuilder\n        val words = sentence.split(\"\
    \ \")\n        for (i <- 0 until words.length) {\n            if (isPrime(words(i).length))\
    \ {\n                result.append(words(i))\n                result.append(\"\
    \ \")\n            }\n        }\n        result.toString", "        // Write your\
    \ code here\n        return \"\"", "        val words = sentence.split(\" \")\n\
    \        //println(words.mkString(\" \"))\n        words.filter(x => isPrime(x.length)).mkString(\"\
    \ \")", "        val isPrime = (x : Int) => {\n            if (x < 2) return false\n\
    \            if (x == 2) return true\n            val m = sqrt(x).toInt\n    \
    \        (2 to m).foreach(i => if (x % i == 0) return false)\n            true\n\
    \        }\n        return sentence.split(\" \").filter(x => isPrime(x.length)).mkString(\"\
    \ \")", "        val words = sentence.split(\" \")\n        words.filter { x =>\
    \ isPrime(x.length) }.mkString(\" \")", "        // Write your code here\n   \
    \     // Return \"not implemented\" as a string.\n        \"not implemented\"",
  "        // Write your code here\n        val primes = for(i <- 1 to 101 if isPrime(i))\
    \ yield i\n        val words = sentence.split(\" \")\n        words.filter(x =>\
    \ primes.contains(x.length)).mkString(\" \")", "        val words = sentence.split(\"\
    \ \")\n        val isPrime = Array.fill(words.maxBy(_.length).length + 1)(true)\n\
    \        isPrime(0) = false\n        isPrime(1) = false\n        for (i <- 2 to\
    \ sqrt(isPrime.length).toInt) {\n            if (isPrime(i)) {\n             \
    \   for (j <- i * i to isPrime.length - 1 by i) {\n                    isPrime(j)\
    \ = false\n                }\n            }\n        }\n        val results =\
    \ new ArrayBuffer[String]\n        for (word <- words) {\n            if (isPrime(word.length))\
    \ results += word\n        }\n        results.mkString(\" \")", '        sentence.split("
    ").filter(w => w.length.isPrime).mkString(" ")', "        var primeLengthWords\
    \ = ArrayBuffer[String]()\n        for (word <- sentence.split(\" \")) {\n   \
    \         if (isPrime(word.length)) primeLengthWords += word\n        }\n    \
    \    primeLengthWords.mkString(\" \")", "        // Write your code here\n   \
    \     null", "        // Write your code here\n        var result = ListBuffer[String]()\n\
    \        for (word <- sentence.split(\" \")) {\n            if (word.length >\
    \ 1 && isPrime(word.length)) {\n                result += word\n            }\n\
    \        }\n        result.mkString(\" \")", "        var result = \"\";\n   \
    \     for (word <- sentence.split(\" \")) {\n            if (isPrime(word.length))\
    \ result += word + \" \";\n        }\n        return result.trim();", '        return
    sentence.split(" ").filter(word => word.length % (2 to sqrt(word.length).toInt).forall(i
    => word.length % i != 0)).mkString(" ")', "        val words = sentence.split(\"\
    \ \")\n        val primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,\
    \ 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val result = new StringBuilder\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ {\n                result.append(word + \" \")\n            }\n        }\n \
    \       result.toString.trim", "        // Implement this function\n        \"\
    Not yet implemented\"", "        def isPrime(n : Int) : Boolean = {\n        \
    \    if (n <= 1) false\n            else if (n == 2) true\n            else !(2\
    \ to (sqrt(n).toInt + 1)).exists(x => n % x == 0)\n        }\n        val word_lengths\
    \ = sentence.split(\" \").map(_.length)\n        val prime_indices = word_lengths.zipWithIndex.filter(p\
    \ => isPrime(p._1)).map(_._2)\n        val result = (for (i <- prime_indices)\
    \ yield sentence.split(\" \")(i)).mkString(\" \")\n        result", "        val\
    \ words = sentence.split(\" \")\n        words.filter(isPrime).mkString(\" \")",
  '        return "";', "        def isPrime(x : Int) : Boolean = {\n            var\
    \ i = 2\n            while (i <= sqrt(x)) {\n                if (x % i == 0) return\
    \ false\n                i += 1\n            }\n            true\n        }\n\
    \        val words = sentence.split(\" \")\n        val primeWords = words.filter(x\
    \ => isPrime(x.length))\n        return primeWords.mkString(\" \")", '        sentence.split("
    ").filter(x => x.length > 1 && List.range(2, sqrt(x.length).toInt + 1).forall(y
    => x.length % y != 0)).mkString(" ")', "        // Write your code here\n    \
    \    \"Write your code here\"", "        val primes = Stream.from(2).filter(n\
    \ => (2 to (sqrt(n).toInt)).forall(n % _ != 0)).take(5)\n        sentence.split(\"\
    \ \").filter(w => primes.contains(w.length)).mkString(\" \")", "        val words\
    \ = sentence.split(\" \")\n        var result = new StringBuilder\n        for\
    \ (word <- words) {\n            if (isPrime(word.length)) {\n               \
    \ result ++= word\n                result += ' '\n            }\n        }\n \
    \       result.toString", "        // Write your code here\n        def isPrime(n\
    \ : Int) : Boolean = {\n            if (n == 1) return false\n            if (n\
    \ == 2) return true\n            var f = 2\n            while (f <= sqrt(n).toInt)\
    \ {\n                if (n % f == 0) return false\n                f += 1\n  \
    \          }\n            return true\n        }\n        val words = sentence.split(\"\
    \ \")\n        val prime_words = words.filter(word => isPrime(word.length))\n\
    \        prime_words.mkString(\" \")", "        def isPrime(n : Int) : Boolean\
    \ = {\n            if (n == 1) false\n            else if (n == 2) true\n    \
    \        else !(2 to (sqrt(n).toInt)).exists(n % _ == 0)\n        }\n        sentence.split(\"\
    \ \").filter(w => isPrime(w.length)).mkString(\" \")", "        // Your Implementation\
    \ Here\n        var result : String = \"\"\n        var words : Array[String]\
    \ = sentence.split(\" \")\n        for (i <- 0 until words.length) {\n       \
    \     if (isPrime(words(i).length)) result += words(i) + \" \"\n        }\n  \
    \      return result.trim", "        // Write your code here\n        var answer\
    \ = \"\"\n        sentence.split(\" \").foreach(word => {\n            if (isPrime(word.length))\
    \ {\n                answer += \" \" + word\n            }\n        })\n     \
    \   return answer.substring(1)", '        ???', "        // Write your code here\n\
    \        // Return the result string\n        sentence.split(\" \").filter(x =>\
    \ isPrime(x.length)).reduceLeft(_ + \" \" + _)", "        def primes = 2 #:: Stream.from(3).filter(i\
    \ => primes.takeWhile(j => j * j <= i).forall(i % _ > 0))\n        sentence.split(\"\
    \ \").filter(x => primes.takeWhile(_ <= x.length).contains(x.length)).mkString(\"\
    \ \")", "        def isPrime(n : Int) : Boolean = {\n            if (n <= 1) false\n\
    \            else if (n == 2) true\n            else !(2 to (n - 1)).exists(x\
    \ => n % x == 0)\n        }\n        sentence.split(\" \").map(x => (x, x.length)).filter(x\
    \ => isPrime(x._2)).map(_._1).mkString(\" \")", "        // Implementation here\n\
    \        sentence.split(\" \").filter(isPrime _).mkString(\" \")", "        val\
    \ words = sentence.split(\" \")\n        def checkPrime(n : Int) : Boolean = {\n\
    \            if (n < 2) return false\n            for (i <- 2 to sqrt(n).toInt)\
    \ {\n                if (n % i == 0) return false\n            }\n           \
    \ return true\n        }\n        val res = new StringBuilder\n        for (i\
    \ <- 0 until words.length) {\n            if (checkPrime(words(i).length)) {\n\
    \                res.append(words(i))\n                res.append(\" \")\n   \
    \         }\n        }\n        return res.toString.trim", "        var splitSentence\
    \ = sentence.split(\" \")\n        var answer : String = \"\"\n        for (word\
    \ <- splitSentence) {\n            if (isPrime(word.length)) {\n             \
    \   answer += word + \" \"\n            }\n        }\n        return answer.trim()",
  '        sentence.split(" ").filter(x => isPrime(x.length)).mkString(" ")', "  \
    \      val primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val b = sentence.split(\" \"\
    ).filter(w => primes.contains(w.length)).mkString(\" \")\n        return b", " \
    \       def isPrime(x : Int) : Boolean = {\n            if (x <= 1) false\n  \
    \          else if (x == 2) true\n            else !(2 to (sqrt(x).toInt + 1)).exists(x\
    \ % _ == 0)\n        }\n        sentence.split(\" \").filter(x => isPrime(x.length)).mkString(\"\
    \ \")", "        def isPrime(n : Int) : Boolean = {\n            if (n == 1) return\
    \ false\n            else if (n == 2) return true\n            else {\n      \
    \          val upperBound = sqrt(n).toInt\n                for (i <- 2 to upperBound)\
    \ if (n % i == 0) return false\n                return true\n            }\n \
    \       }\n        def generatePrimes(upperBound : Int) : Array[Int] = {\n   \
    \         val primes = new ArrayBuffer[Int]\n            for (i <- 1 to upperBound)\
    \ if (isPrime(i)) primes += i\n            return primes.toArray\n        }\n\
    \        val primes = generatePrimes(101)\n        val words = sentence.split(\"\
    \ \")\n        val filteredWords = new ArrayBuffer[String]\n        for (word\
    \ <- words) if (primes.contains(word.length)) filteredWords += word\n        return\
    \ filteredWords.mkString(\" \")", "        val words = sentence.split(\" \")\n\
    \        val primes = Seq(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101)\n        val buffer = new ListBuffer[String]\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ buffer += word\n        }\n        buffer.mkString(\" \")", "    \tval words\
    \ = sentence.split(\" \")\n    \tval primeWords = words.filter(isPrime(_))\n \
    \   \tprimeWords.mkString(\" \")", "        val words = sentence.split(\" \")\n\
    \        words.filter(word => word.length > 1 && word.length % 2 != 0).mkString(\"\
    \ \")", "        val isPrime = new Array[Boolean](100)\n        for (i <- 2 to\
    \ 100) {\n            isPrime(i) = true\n            for (j <- 2 to sqrt(i).toInt)\
    \ {\n                if (i % j == 0) {\n                    isPrime(i) = false\n\
    \                }\n            }\n        }\n        val words = sentence.split(\"\
    \ \")\n        val sb = new StringBuilder\n        words.foreach(word => if (isPrime(word.length))\
    \ sb.append(word + \" \"))\n        sb.toString.stripSuffix(\" \")", "       \
    \ // split sentence into words\n        val words = sentence.split(\" \")\n  \
    \      // filter out words whose length is not prime\n        val primeLengthWords\
    \ = words.filter(w => isPrime(w.length))\n        // join all words with one space\n\
    \        primeLengthWords.mkString(\" \")", "        // Write your code here\n\
    \        val primes = 2 #:: Stream.from(3, 2).filter(isPrime)\n        def isPrime(n:\
    \ Int) = (2 until n).forall(x => n % x != 0)\n        val words = sentence.split(\"\
    \ \")\n        words.filter(x => primes.takeWhile(_ <= x.length).toList.contains(x.length)).mkString(\"\
    \ \")", "        // Write your code here\n        // return (...complete this\
    \ line...)\n        val words = sentence.split(\" \")\n        val primes = List(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97, 101)\n        return words.filter(w => primes.contains(w.length)).mkString(\"\
    \ \")", "        val sieve = Sieve(100)\n        sentence.split(\" \").filter(s\
    \ => sieve.isPrime(s.length)).mkString(\" \")", '        return ""', "       \
    \ var result = ArrayBuffer[String]()\n        for (s <- sentence.split(\" \"))\
    \ {\n            if (isPrime(s.length)) result += s\n        }\n        result.mkString(\"\
    \ \")", "        def isPrime(num : Int) : Boolean = (2 to sqrt(num).toInt).forall(num\
    \ % _ != 0)\n        sentence.split(\" \").filter(isPrime(_.length)).mkString(\"\
    \ \")", "        // Write your code here\n        val words = sentence.split(\"\
    \ \")\n        val res = words.filter(x => isPrime(x.length))\n        return\
    \ res.mkString(\" \")", "        // *************************\n        // Iterate\
    \ through the list of words and create a list of the words that have prime length\n\
    \        // Then iterate through that list and create a return string using the\
    \ words in the list\n        // *************************\n        val words =\
    \ sentence.split(\" \")\n        var primes = List[String]()\n        for (word\
    \ <- words) {\n            if (isPrime(word.length)) {\n                primes\
    \ = word :: primes\n            }\n        }\n        var ret = \"\"\n       \
    \ for (word <- primes) {\n            ret += word + \" \"\n        }\n       \
    \ ret.substring(0, ret.length - 1)", "        val words = sentence.split(\" \"\
    )\n        words.filter(word => isPrime(word.length)).mkString(\" \")", '        return
    sentence.split(" ").filter(word => (1 to word.length).filter(word.length % _ ==
    0).length == 2).mkString(" ")', "        val words = sentence.split(\" \")\n \
    \       def isPrime(x : Int) : Boolean = {\n            for (i <- 2 to math.sqrt(x).toInt)\
    \ {\n                if (x % i == 0) return false\n            }\n           \
    \ true\n        }\n        return words.filter(word => isPrime(word.length)).mkString(\"\
    \ \")", "        val s : List[String] = sentence.split(\" \").toList\n       \
    \ val ss : List[Int] = s.map(x => x.length)\n        val candidates : List[Int]\
    \ = s.filter(x => x.length == 2 || x.length == 3 || x.length == 5 || x.length\
    \ == 7 || x.length == 11 || x.length == 13 || x.length == 17 || x.length == 19\
    \ || x.length == 23 || x.length == 29 || x.length == 31)\n        candidates.mkString(\"\
    \ \")", "        val s = sentence.split(\" \")\n        val p = new ArrayBuffer[Int]\n\
    \        for (i <- 2 to s.map(_.length).max) {\n            var isPrime = true\n\
    \            for (j <- 2 to sqrt(i).toInt) {\n                if (i % j == 0)\
    \ {\n                    isPrime = false\n                    break\n        \
    \        }\n            }\n            if (isPrime) p += i\n        }\n      \
    \  (for (w <- s; if (p.contains(w.length))) yield w).mkString(\" \")", "     \
    \   val words = sentence.split(\" \")\n        words.filter(isPrime).mkString(\"\
    \ \")"]
stop_tokens:
- "\n    }\n"
