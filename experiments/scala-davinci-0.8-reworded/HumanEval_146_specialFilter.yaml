name: HumanEval_146_specialFilter
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Write a function that takes a list of numbers as input and returns \n  \
  \  // the number of elements in the list that are greater than 10 and both \n  \
  \  // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For example:\n\
  \    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong, 14l.toLong, -15l.toLong)))\n\
  \    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong, -2l.toLong, -3l.toLong,\
  \ 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n    def specialFilter(nums\
  \ : List[Long]) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
  \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
  \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
  \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n   \
  \ assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
  \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
  \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n   \
  \ assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
  \ == (0l));\n    }\n\n}\n"
completions: ["        // Fill Up this function body\n        // `nums` is a List\
    \ of numbers\n        // Compute and return the number of elements in the `nums`\
    \ list that are greater than 10 and both \n        // first and last digits of\
    \ a number are odd (1, 3, 5, 7, 9). \n        nums.count(n => n >= 10 && n % 2\
    \ == 1 && (n / 10 == 0 || n / 10 % 2 == 1))", "        var count = 0l\n      \
    \  for (num <- nums) {\n            if (num > 10 && abs(num) % 10 % 2 == 1 &&\
    \ num / 10 == 0) {\n                count += 1\n            }\n        }\n   \
    \     return count", "        //fill this\n        return 0l;", "        // Fill\
    \ Up this function body\n        // `nums` contains all test cases\n        //\
    \ Return a single number as output\n        // Do not modify the existing code\n\
    \        var c:Long = 0;\n        var a:Long = 0;\n        var b:Long = 0;\n \
    \       var d:Long = 0;\n        var g:Long = 0;\n        for(i <- 0 to nums.length-1)\n\
    \        {\n          a = nums(i);\n          c = a%10;\n          g = 0;\n  \
    \        while(a != 0)\n          {\n            b = a%10;\n            a = a/10;\n\
    \            g = g+1;\n          }\n          d = nums(i)/pow(10,(g-1)).toLong;\n\
    \          if(abs(nums(i)) > 10 && d%2 != 0 && c%2 != 0)\n          {\n      \
    \      nums(i) = 1;\n          }\n          else\n          {\n            nums(i)\
    \ = 0;\n          }\n        }\n        for(i <- 0 to nums.length-1)\n       \
    \ {\n          c = c+nums(i);\n        }\n        return c;", "        var count\
    \ = 0l;\n        for (num <- nums) {\n            val numStr = num.toString;\n\
    \            if (num > 10 && (numStr(0) % 2 == 1) && (numStr(numStr.length - 1)\
    \ % 2 == 1)) {\n                count += 1;\n            }\n        }\n      \
    \  return count;", '        nums.filter(x => x > 10 && (x % 2 == 1) && (x / pow(10,
    floor(log10(x)))).toInt % 2 == 1).length', '        0', "        // Fill Up this\
    \ function body\n        // `nums` is list of numbers\n        // do not change\
    \ function name, return type, and parameters\n        if (nums.length == 0) 0\n\
    \        else if (abs(nums.head) > 10 && firstDigit(nums.head) % 2 != 0 && lastDigit(nums.head)\
    \ % 2 != 0) 1 + specialFilter(nums.tail)\n        else specialFilter(nums.tail)",
  '        0', '        nums.filter(n => (abs(n) > 10) && ((abs(n) % 10) % 2 == 1)
    && (abs(n) / (math.pow(10, math.floor(math.log10(abs(n))).toInt)) % 2 == 1)).length',
  "        // Fill Up this function body\n        // `nums`  list of numbers\n   \
    \     // return the number of elements in the list that are greater than 10 and\
    \ both first and last digits of a number are odd (1, 3, 5, 7, 9).\n        //\
    \ Should return a value of type `Long`\n        nums.filter(x => x > 10 && (x\
    \ / 1000000 % 10 % 2 == 1 || x / 1000000 % 10 % 2 == -1) && (x % 10 % 2 == 1 ||\
    \ x % 10 % 2 == -1)).length", "        // Fill Up this function body\n       \
    \ // You can add another function as well, if required\n        nums.count((num\
    \ : Long) => abs(num) > 10 && isOdd(num) && isOdd(num % 10))", "        var result\
    \ = 0l\n        nums.foreach(n => {\n            if (n > 10) {\n             \
    \   var c = n.toString().toList\n                if (n.toString.charAt(0).toInt\
    \ % 2 != 0 && n.toString.charAt(n.toString.length - 1).toInt % 2 != 0) result\
    \ += 1\n            }\n        })\n        result", '        nums.filter(x =>
    x >= 10 && isOdd(x % 10) && isOdd(x / pow(10, floor(log10(x)).toInt).toLong)).length',
  "        def isSpecial(num : Long) : Boolean = {\n            num > 10 &&\n    \
    \        num.toString.length > 1 &&\n            num.toString.length < 10 &&\n\
    \            (num.toString.take(1).toInt % 2 != 0) &&\n            (num.toString.takeRight(1).toInt\
    \ % 2 != 0)\n        }\n        nums.count(isSpecial)", "        // Fill Up this\
    \ function body\n                // List(1l)\n        nums.filter(i => i > 10\
    \ && (i.toString.head.toInt - '0') % 2 == 1 && (i.toString.last.toInt - '0') %\
    \ 2 == 1).size.toLong", "        var count = 0\n        for (i <- nums) {\n  \
    \          if (i.toString.length > 1 && abs(i) > 10 && i.toString.head.toInt %\
    \ 2 != 0 && i.toString.last.toInt % 2 != 0) count += 1\n        }\n        count",
  "\t\tval firstNumber = nums.head\n\t\tval lastNumber = nums.last\n\t\tval numDigits\
    \ = nums.length\n\t\tval firstOdd = firstNumber % 2 == 1\n\t\tval lastOdd = lastNumber\
    \ % 2 == 1\n\t\tnums.filter(x => x > 10 && firstOdd && lastOdd).length", "   \
    \   var count = 0l;\n      var fd = 0l;\n      var ld = 0l;\n      for (num <-\
    \ nums) {\n        if (num > 10) {\n          fd = num / 10;\n          ld = num\
    \ % 10;\n          if (fd % 2 != 0 && ld % 2 != 0) {\n            count += 1;\n\
    \          }\n        }\n      }\n      return count;", "        // Fill Up this\
    \ function body\n        // `nums` is a list of numbers\n        // `return` should\
    \ be a number\n        if (nums.length == 0) return 0\n        def isSpecial(x\
    \ : Long) : Boolean = {\n            val str = abs(x).toString\n            val\
    \ first = str.charAt(0).toInt - '0'.toInt\n            val last = str.charAt(str.length\
    \ - 1).toInt - '0'.toInt\n            (x > 10) && (first % 2 == 1) && (last %\
    \ 2 == 1)\n        }\n        if (isSpecial(nums.head)) 1 + specialFilter(nums.tail)\
    \ else specialFilter(nums.tail)", "        def l1 = List[Int](1, 3, 5, 7, 9)\n\
    \        def l2 = List[Int](1, 3, 5, 7, 9)\n        // 10 - 5, 11 - 6\n      \
    \  def specialFilterHelper(nums : List[Long], curr : Long, acc : Long) : Long\
    \ = {\n            if (nums.isEmpty) acc\n            else {\n               \
    \ if (curr % 10 >= 5) {\n                    if (l1.contains(curr.toString.head.asDigit)\
    \ && l2.contains(curr.toString.last.asDigit))\n                        specialFilterHelper(nums.tail,\
    \ nums.head, acc + 1)\n                    else specialFilterHelper(nums.tail,\
    \ nums.head, acc)\n                }\n                else {\n               \
    \     if (l1.contains(curr.toString.head.asDigit) && l2.contains(curr.toString.last.asDigit))\n\
    \                        specialFilterHelper(nums.tail, nums.head, acc + 1)\n\
    \                    else specialFilterHelper(nums.tail, nums.head, acc)\n   \
    \             }\n            }\n        }\n        specialFilterHelper(nums.tail,\
    \ nums.head, 0)", "        def digits(num : Long) : List[Long] = {\n         \
    \   if (num < 10) List(num)\n            else digits(num / 10) :+ (num % 10)\n\
    \        }\n        def isOdd(n : Long) : Boolean = n % 2 == 1\n        nums.count\
    \ { x =>\n            val lst = digits(x.abs)\n            x.abs > 10 && lst.head.abs\
    \ % 2 == 1 && lst.last.abs % 2 == 1\n        }", "        val stringNums = nums.map(x\
    \ => x.toString)\n        val greaterThanTen = stringNums.filter(x => x.toInt\
    \ > 10)\n        greaterThanTen.filter(x => (x.head.toString.toInt % 2 != 0) &&\
    \ (x.last.toString.toInt % 2 != 0)).size.toLong", "        val biggerThan10 =\
    \ nums.filter((x) => x > 10)\n        val firstAndLast = biggerThan10.filter((x)\
    \ => {\n            val s = x.toString\n            ((s(0) - '0') % 2 == 1) &&\
    \ ((s(s.length - 1) - '0') % 2 == 1)\n        })\n        firstAndLast.length",
  "        // Fill up this function body\n        // You have to return a Long value\n\
    \        nums.filter(x => x > 10 && (x.toString.head.toString.toInt % 2 != 0)\
    \ && (x.toString.last.toString.toInt % 2 != 0)).length", "        // Fill Up this\
    \ function body\n        // `nums` Inpute List\n        // Should return output\
    \ List\n        // For Example\n        // specialFilter(List(15, -73, 14, -15))\
    \ == List(15, -15)\n        // specialFilter(List(33, -2, -3, 45, 21, 109)) ==\
    \ List(33, -3, 45, 21, 109)\n        def countDigits(n : Long) : Int = {\n   \
    \         var len = 0\n            var n1 = n\n            while (n1 > 0) {\n\
    \                len += 1\n                n1 /= 10\n            }\n         \
    \   len\n        }\n        var cnt = 0\n        for (num <- nums) {\n       \
    \     if (num < 10 && num % 2 == 1) cnt += 1\n            else if (num >= 10)\
    \ {\n                var isSpecial = true\n                val len = countDigits(num)\n\
    \                var n = num\n                var last = n % 10\n            \
    \    if (last % 2 == 0) isSpecial = false\n                n /= 10\n         \
    \       for (i <- 1 to len - 2) {\n                    val dig = n % 10\n    \
    \                if (dig % 2 == 0) isSpecial = false\n                    n /=\
    \ 10\n                }\n                val first = n % 10\n                if\
    \ (first % 2 == 0) isSpecial = false\n                if (isSpecial) cnt += 1\n\
    \            }\n        }\n        cnt", "        def firstDigit(num : Long) :\
    \ Long = {\n            if (num > 0) {\n                num / pow(10, ceil(log10(num)).toInt).toLong\n\
    \            } else {\n                num / pow(10, ceil(log10(-num)).toInt).toLong\n\
    \            }\n        }\n        def lastDigit(num : Long) : Long = {\n    \
    \        if (num > 0) {\n                num % 10\n            } else {\n    \
    \            (-num) % 10\n            }\n        }\n        def isFirstAndLastDigitOdd(num\
    \ : Long) : Boolean = {\n            firstDigit(num) % 2 == 1 && lastDigit(num)\
    \ % 2 == 1\n        }\n        nums.foldLeft(0l)((acc, num) => {\n           \
    \ if (abs(num) > 10 && isFirstAndLastDigitOdd(num)) {\n                acc + 1\n\
    \            } else {\n                acc\n            }\n        })", "    \
    \    var counter = 0l\n        for (num <- nums) {\n            val n = abs(num)\n\
    \            val firstDigit = n / pow(10, floor(log10(n)).toInt).toLong\n    \
    \        val lastDigit = n % 10\n            if (n > 10 && firstDigit % 2 == 1\
    \ && lastDigit % 2 == 1) {\n                counter += 1\n            }\n    \
    \    }\n        counter", '        nums.filter(n => n > 10 && n.toString.head.toString.toInt
    % 2 == 1 && n.toString.last.toString.toInt % 2 == 1).length', "      var numOfSpecialNums\
    \ = 0\n      for (num <- nums) {\n        if (abs(num) > 10 && isOdd(num.toString.charAt(0))\
    \ && isOdd(num.toString.charAt(num.toString.length() - 1))) {\n          numOfSpecialNums\
    \ += 1\n        }\n      }\n      return numOfSpecialNums", "        return nums.filter(n\
    \ => (n > 10 && isOdd(n % 10) && isOdd(n / pow(10, floor(log10(n))))))\n     \
    \                                           .map(n => 1l)\n                  \
    \                              .sum", "        def firstDigit(num : Long) : Int\
    \ = {\n            num.toString.head.asDigit\n        }\n        def lastDigit(num\
    \ : Long) : Int = {\n            num.toString.last.asDigit\n        }\n      \
    \  nums.filter(num => num > 10 && firstDigit(num) % 2 == 1 && lastDigit(num) %\
    \ 2 == 1).length", "        val nStr = nums.map(x => x.toString)\n        nStr.filter(x\
    \ => x.toLong > 10 && x.head.toString.toInt % 2 == 1 && x.last.toString.toInt\
    \ % 2 == 1).size", "        var count = 0\n        for (num <- nums) {\n     \
    \       if (num > 10 && (num % 10) % 2 == 1 && num / 10 == 0) count += 1\n   \
    \     }\n        count", '        nums.filter(n => (n.toString().head.toString().toInt
    % 2 != 0) && (n.toString().last.toString().toInt % 2 != 0) && (n > 10)).length',
  "        var result = 0l\n        for (num <- nums) {\n            if (num.toString.length\
    \ > 1 && num.toString.head.toString.toInt % 2 != 0 && num.toString.last.toString.toInt\
    \ % 2 != 0 && num > 10) {\n                result += 1\n            }\n      \
    \  }\n        result", "        // Fill Up this function body\n        // `nums`\
    \ In case you do not remember, `List` is a type which takes one type parameter\
    \ (Int, String, ...)\n        // For example to declare a `List` of `Long` type:\n\
    \        // var x = List[Long](1l,2l,3l)\n        nums.foldLeft(0l)((acc, x) =>\
    \ if (10 < x && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt\
    \ % 2 == 1) acc + 1 else acc)", "        // Fill Up this function body\n     \
    \   // `nums` In your implementation, consider `nums` as input\n        // Do\
    \ not hardcode %10 or /10\n        // It is expected that you use % and /\n  \
    \      // Your solution will be evaluated on the basis of correctness and \n \
    \       // performance\n        nums.filter(x => x > 10 && x % 2 == 1 && x % 10\
    \ == 1).length", '        return nums.filter(num => abs(num) > 10 && abs(num)%10%2
    != 0 && num%10%2 != 0).length', "        def firstDigit(n : Long) : Long = {\n\
    \            if (n > -10 && n < 10) n else firstDigit(n / 10)\n        }\n   \
    \     def lastDigit(n : Long) : Long = {\n            n % 10\n        }\n    \
    \    nums.filter(n => abs(n) > 10 && firstDigit(n) % 2 == 1 && lastDigit(n) %\
    \ 2 == 1).length", "\tnums.map(n => n.toString).filter(n => ((n.length > 1) &&\
    \ \n\t\t\t\t\t      (n.charAt(0).toString.toInt % 2 != 0) && \n\t\t\t\t\t    \
    \  (n.charAt(n.length - 1).toString.toInt % 2 != 0) && \n\t\t\t\t\t      (n.toLong\
    \ > 10l))).size", "        var i = 0\n        var count = 0\n        while (i\
    \ < nums.length) {\n            if (nums(i) > 10 && nums(i).toString.head.toString.toInt\
    \ % 2 == 1 && nums(i).toString.last.toString.toInt % 2 == 1) count += 1\n    \
    \        i += 1\n        }\n        count", '      nums.filter(x => x > 10).filter(x
    => x.toString().startsWith("1") || x.toString().startsWith("3") || x.toString().startsWith("5")
    || x.toString().startsWith("7") || x.toString().startsWith("9")).filter(x => x.toString().endsWith("1")
    || x.toString().endsWith("3") || x.toString().endsWith("5") || x.toString().endsWith("7")
    || x.toString().endsWith("9")).length', "        var ret : Long = 0\n        var\
    \ stk : Stack[Char] = new Stack[Char]\n        for (x <- nums) {\n           \
    \ var s = x.toString\n            if (s.length > 1) {\n                var t =\
    \ s.toCharArray\n                if (t(0) % 2 != 0 && t(t.length - 1) % 2 != 0)\
    \ {\n                    if (x > 10) ret += 1\n                }\n           \
    \ }\n        }\n        return ret", "        def firstDigit(n : Long) : Int =\
    \ {\n            var nn = n\n            while (nn >= 10) nn /= 10\n         \
    \   nn.toInt\n        }\n        def lastDigit(n : Long) : Int = {\n         \
    \   n % 10\n        }\n        nums.filter(n => n > 10 && firstDigit(n) % 2 ==\
    \ 1 && lastDigit(n) % 2 == 1).length", "        var filter = 0l\n        for (num\
    \ <- nums) {\n            if (num > 10 && (num % 10) % 2 == 1 && num / 10 > 0\
    \ && num / pow(10, (num.toString.length - 1).toInt) % 2 == 1) filter += 1\n  \
    \      }\n        filter", "      // x is the currently checked number\n     \
    \ // xh is the first digit of the currently checked number\n      // xt is the\
    \ last digit of the currently checked number\n      // count is the number of\
    \ numbers that satisfy the conditions\n      var count = 0\n      for (x <- nums)\
    \ {\n        var xh = 0\n        var xt = 0\n        var y = x\n        if (y\
    \ >= 0) {\n          while (y > 0) {\n            xh = y % 10\n            y =\
    \ y / 10\n          }\n          xt = x % 10\n        } else {\n          y =\
    \ -y\n          while (y > 0) {\n            xh = y % 10\n            y = y /\
    \ 10\n          }\n          xt = -(x % 10)\n        }\n        if (x > 10 &&\
    \ (xh % 2 == 1 || xh % 2 == -1) && (xt % 2 == 1 || xt % 2 == -1)) {\n        \
    \  count += 1\n        }\n      }\n      count", "        def isGreaterThan10(num\
    \ : Long) : Boolean = if (num > 10) true else false\n        def isFirstAndLastDigitOdd(num\
    \ : Long) : Boolean = {\n            val str = num.toString\n            if (str.length\
    \ == 1) {\n                if (num % 2 == 1) true else false\n            } else\
    \ {\n                if (str.head % 2 == 1 && str.last % 2 == 1) true else false\n\
    \            }\n        }\n        nums.filter(x => isGreaterThan10(x) && isFirstAndLastDigitOdd(x)).length",
  "        var count = 0l\n        for (i <- nums) {\n            if (abs(i) > 10)\
    \ {\n                val j = abs(i)\n                val first = (j - j % 10)\
    \ / 10\n                val last = j % 10\n                if (first % 2 == 1\
    \ && last % 2 == 1) count += 1\n            }\n        }\n        count", "  \
    \      var cnt = 0\n        for (num <- nums) {\n            if (abs(num) > 10\
    \ && num % 2 == 1 && toString(num).last == toString(num).head) cnt += 1\n    \
    \    }\n        cnt", '        return nums.filter(n => n > 10 && n.toString.charAt(0).toInt
    % 2 == 1 && n.toString.charAt(n.toString.length - 1).toInt % 2 == 1).length',
  "        // Fill Up this function body\n        // `nums` can be assigned to `nums`\
    \ again\n        // `specialFilter` should return the number of elements in the\
    \ list that are greater than 10 and both \n        // first and last digits of\
    \ a number are odd (1, 3, 5, 7, 9).\n        val number = nums.filter(x => x.toString.head.toString.toInt\
    \ % 2 != 0 && x.toString.last.toString.toInt % 2 != 0)\n        val num = number.filter(x\
    \ => x > 10)\n        num.length", "        // Fill Up this function body\n  \
    \      // `nums` is a list of integers\n        // You have to return number of\
    \ integers in `nums` list\n        // which are both greater than 10 and have\
    \ odd first digit\n        // as well as odd last digit.\n        return 0l",
  "        // Fill Up this function body\n        // `nums` is a list of numbers\n\
    \        // `nums.length` is the number of elements\n        // `nums(i)` is the\
    \ ith element of the list\n        // Return the number of elements that match\
    \ the required property\n        var ans : Long = 0l\n        for (i <- 0 until\
    \ nums.length) {\n            val n = nums(i)\n            if (n > 10) {\n   \
    \             val s = n.toString\n                val last = s(s.length - 1).toString.toInt\n\
    \                val first = s(0).toString.toInt\n                if (last % 2\
    \ == 1 && first % 2 == 1) ans += 1\n            }\n        }\n        ans", '        nums.filter(x
    => math.abs(x) > 10 && math.abs(x) % 2 == 1 && (math.abs(x) / pow(10, math.log10(math.abs(x)).toInt)).toInt
    % 2 == 1).length', "        // Fill Up this function body\n        // `nums` is\
    \ List[Long]\n        // The function should return Long\n        def isSpecial(n\
    \ : Long) : Boolean = {\n            if (n < 10 || n > 10) {\n               \
    \ val fd = n % 10\n                val sd = n / 10 % 10\n                ((fd\
    \ + sd) % 2 != 0)\n            } else {\n                false\n            }\n\
    \        }\n        nums.filter(isSpecial(_)).length", "        nums.filter(x\
    \ => x.toString.length >= 2 && x.toString.head.toString.toInt % 2 == 1 && \n \
    \           x.toString.last.toString.toInt % 2 == 1 && x > 10).length", "    \
    \    // Fill Up this function body\n        // `nums` contains the list of numbers\
    \ passed\n        // Return the number of elements that satisfy the given conditions\n\
    \        // Implement the algorithm using Scala\n        def isFirstAndLastDigitOdd(num\
    \ : Long) : Boolean = {\n            val lastDigit = num % 10\n            var\
    \ num1 = num\n            while (num1 >= 10) {\n                num1 /= 10\n \
    \           }\n            return (num1 % 2 == 1 && lastDigit % 2 == 1)\n    \
    \    }\n        def filter(nums : List[Long]) : List[Long] = {\n            if\
    \ (nums.isEmpty) return List()\n            if (nums.head > 10 && isFirstAndLastDigitOdd(nums.head))\n\
    \                return nums.head :: filter(nums.tail)\n            else\n   \
    \             return filter(nums.tail)\n        }\n        return filter(nums).length",
  "    \t// Fill Up this function body\n        // `nums` is a list of numbers\n \
    \       // return the number of elements in the list that are greater than 10\
    \ and both \n        // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n        var curr_num : Long = 0\n        var first_digit : Long = 0\n \
    \       var last_digit : Long = 0\n        var count : Long = 0\n        var flag\
    \ : Boolean = false\n        for (curr_num <- nums) {\n            first_digit\
    \ = curr_num / 10\n            last_digit = curr_num % 10\n            if (curr_num\
    \ > 10) {\n                if (first_digit % 2 != 0) {\n                    if\
    \ (last_digit % 2 != 0) {\n                        count += 1\n              \
    \      }\n                }\n            }\n        }\n        return count",
  "        val even : Long = 2\n        val odd : Long = 1\n        var count : Long\
    \ = 0\n        for (num <- nums) {\n            if (num > 10) {\n            \
    \    val last : Long = num % 10\n                var num2 : Long = num\n     \
    \           while (num2 > 10) {\n                    num2 = num2 / 10\n      \
    \          }\n                val first : Long = num2\n                if (last\
    \ % even != 0 && first % even != 0) {\n                    count += 1\n      \
    \          }\n            }\n        }\n        return count", "        nums.filter(x\
    \ => {\n            (x > 10) && (x % 2 == 1) && (x.toString().last.toInt % 2 ==\
    \ 1)\n        }).length", "        val firstDigitOdd = (x : Long) => x.toString.head.toString.toInt\
    \ % 2 == 1\n        val lastDigitOdd = (x : Long) => x.toString.last.toString.toInt\
    \ % 2 == 1\n        val greaterThanTen = (x : Long) => x > 10\n        nums.filter(firstDigitOdd).filter(lastDigitOdd).filter(greaterThanTen).length",
  "        val n = nums.filter(n => n > 10 && (n % 2 == 1) && (n.toString.head.toString.toInt\
    \ % 2 == 1) && (n.toString.last.toString.toInt % 2 == 1)).size\n        return\
    \ n", "        if (nums.length == 0) 0\n        else {\n            if (nums.head\
    \ > 10 && isFirstAndLastDigitOdd(nums.head)) 1 + specialFilter(nums.tail)\n  \
    \          else specialFilter(nums.tail)\n        }", "        val low : Long\
    \ = 10\n        nums.filter(\n            num => (num >= low) && (firstDigit(num)\
    \ % 2 == 1) && (lastDigit(num) % 2 == 1)\n        ).length", "      def firstDigit(n\
    \ : Long) : Int = {\n        return n.toString().toList.head.toString().toInt\n\
    \      }\n      def lastDigit(n : Long) : Int = {\n        return n.toString().toList.last.toString().toInt\n\
    \      }\n      return nums.filter(x => (x > 10) && (firstDigit(x) % 2 == 1) &&\
    \ (lastDigit(x) % 2 == 1)).length", '        nums.filter(x => abs(x) >= 10 &&
    abs(x).toString.init.last.toInt % 2 == 1 && abs(x).toString.last.toInt % 2 ==
    1).length', "        // Fill Up this function body\n        // `nums` is a list\
    \ of integers\n        // remember you can use multiline statements if you need\
    \ to\n        var count = 0l\n        for (num <- nums) {\n            if (num\
    \ > 10 && (num % 10).abs % 2 == 1 && num.abs / 10 % 10 % 2 == 1) count += 1\n\
    \        }\n        count", "        nums.filter((num : Long) => num.toString.length\
    \ > 1 && \n            abs(num) > 10 && (num.toString.head.toString.toInt % 2\
    \ == 1) &&\n            (num.toString.last.toString.toInt % 2 == 1)).length",
  '        nums.count(x => x > 10 && (x % 2 != 0) && (x / 10 % 2 != 0))', "      \
    \  var acc = 0l\n        for (i <- nums) {\n            if (i > 10 && i.toString.size\
    \ > 1 && (i.toString.last - '0') % 2 == 1 && (i.toString.head - '0') % 2 == 1)\
    \ acc += 1\n        }\n        acc", "        nums.filter(x => {\n           \
    \ val str = x.toString\n            val first = str.charAt(0).toString.toInt\n\
    \            val last = str.charAt(str.length - 1).toString.toInt\n          \
    \  (first % 2 != 0) && (last % 2 != 0) && (x > 10)\n        }).length", "    \
    \    def isGreaterThan10(num : Long) : Boolean = num > 10\n        def isFirstLastDigitOdd(num\
    \ : Long) : Boolean = {\n            val firstDigit = num.toString.head.asDigit\n\
    \            val lastDigit = num.toString.last.asDigit\n            firstDigit\
    \ % 2 == 1 && lastDigit % 2 == 1\n        }\n        val greaterThan10 = nums.filter(isGreaterThan10)\n\
    \        greaterThan10.filter(isFirstLastDigitOdd).length", '        nums.filter(x
    => x.toString.length > 1 && x > 10 && x.toString.head.toString.toInt % 2 != 0
    && x.toString.last.toString.toInt % 2 != 0).length', "        var count = 0l\n\
    \        for (num <- nums) {\n            if (num > 10 && Math.abs(num) % 10 %\
    \ 2 == 1 && num / pow(10, Math.log10(Math.abs(num)).toInt) % 2 == 1) count +=\
    \ 1\n        }\n        count", "        var firstDigitIsOdd = false\n       \
    \ var lastDigitIsOdd = false\n        var result = 0\n        for (num <- nums)\
    \ {\n            if (num > 10) {\n                firstDigitIsOdd = num % 10 >\
    \ 0 && num % 10 < 8\n                lastDigitIsOdd = (num / pow(10, floor(log10(num)).toInt)).toInt\
    \ % 2 == 1\n                if (firstDigitIsOdd && lastDigitIsOdd) {\n       \
    \             result += 1\n                }\n            }\n        }\n     \
    \   result", "        def digits(n : Long) : List[Long] = {\n            if (n\
    \ == 0) List[Long]()\n            else (n % 10) :: digits(n / 10)\n        }\n\
    \        def isFirstLastDigitOdd(n : Long) : Boolean = {\n            val l =\
    \ digits(n)\n            l.size > 0 && l.size > 1 && l(0) % 2 == 1 && l(l.size\
    \ - 1) % 2 == 1\n        }\n        def isSpecial(n : Long) : Boolean = {\n  \
    \          n > 10 && isFirstLastDigitOdd(n)\n        }\n        nums.count(n =>\
    \ isSpecial(n))", '        nums.filter(i => i > 10 && {(i % 10) % 2 == 1 && (i
    / pow(10, log10(i).toInt)).toInt % 2 == 1}).length', '        nums.count(x =>
    x.toString.size > 1 && x > 10 && (x.toString.head.toString.toInt % 2 == 1) &&
    (x.toString.last.toString.toInt % 2 == 1))', "        def recurse(num : Long)\
    \ : Boolean = {\n            num < 10 && num % 2 == 1\n        }\n        nums.filter((num)\
    \ => {\n            num >= 10 && recurse(num % 10) && recurse(num / (pow(10, num.toString.length\
    \ - 1).toLong))\n        }).length", "    \tnums.filter(x => x.toString.length\
    \ > 1 && x > 10 && x.toString.last.toInt % 2 == 1 && x.toString.take(1).toInt\
    \ % 2 == 1).length", "        // Fill Up this function body\n        // `nums`\
    \ are the input numbers and are of type `List[Long]`\n        // The output should\
    \ be a `Long`\n        nums.filter(x => (x > 10) && (x % 2 == 1) && ((x % 10)\
    \ % 2 == 1)).length", "        nums.filter(p => {\n            var count = 0\n\
    \            var x = p\n            while (x > 0) {\n                x /= 10\n\
    \                count += 1\n            }\n            var first = p / pow(10,\
    \ count - 1).toLong\n            var last = p % 10\n            p > 10 && (first\
    \ % 2 == 1 && last % 2 == 1)\n        }).length", "        // Fill Up this function\
    \ body\n        // `nums` is a List of Long\n        // use pattern matching and\
    \ for loop to solve this problem\n        nums.filter(x => x > 10 && x.toString().head.toString().toInt\
    \ % 2 != 0 && x.toString().last.toString().toInt % 2 != 0).length", "        var\
    \ sum = 0l\n        for (num <- nums) {\n            if (num > 10 && num.toString.head.toInt\
    \ % 2 == 1 && num.toString.last.toInt % 2 == 1) {\n                sum += 1\n\
    \            }\n        }\n        sum", "        // Fill Up this function body\n\
    \        // `nums` is list of long\n        // output should be a long\n     \
    \   var count = 0L\n        for (e <- nums) {\n            if (abs(e) > 10 &&\
    \ e % 2 != 0 && e / 10 % 2 != 0) count += 1\n        }\n        count", "    \
    \    // Fill up this function body\n        // It should return the number of\
    \ elements that satisfy the given property\n        var count = 0\n        for\
    \ (i <- nums) {\n            if (i >= 10 && isOdd(i.toString.head) && isOdd(i.toString.last))\
    \ {\n                count += 1\n            }\n        }\n        count", " \
    \       def isValid(n : Long) : Boolean = {\n            if (n < 10) return false\n\
    \            var current = n\n            while (current != 0) {\n           \
    \     val digit = current % 10\n                if (digit % 2 == 0) return false\n\
    \                current /= 10\n            }\n            true\n        }\n \
    \       nums.filter(x => isValid(x)).length", "    \tnums.count(x => x > 10 &&\
    \ hasOddFirstLastDigit(x))", "        // Fill Up this function body\n        //\
    \ `nums` In case you do not remember is a list of all the numbers\n        //\
    \ For example: if `nums` is (1, 2, 3, 4, 5)\n        // This means: there are\
    \ 5 numbers\n        // 1, 2, 3, 4, 5\n        var count = 0l;\n        nums.foreach(num\
    \ => {\n            var x = num.toString\n            if (x.toLong > 10 && (x.charAt(0).toString.toInt\
    \ % 2 != 0) && (x.charAt(x.length - 1).toString.toInt % 2 != 0)) {\n         \
    \       count += 1\n            }\n        })\n        count", "        // Fill\
    \ Up this function body\n        // `nums` = List[Long]\n        // Do Not Write\
    \ anything outside this function\n        // Implementation Goes Here\n      \
    \  var count = 0\n        for (i <- nums) {\n            var p = abs(i)\n    \
    \        var s = 0\n            var r = 0\n            var r1 = 0\n          \
    \  var r2 = 0\n            if (p > 10) {\n                while (p != 0) {\n \
    \                   var k = p % 10\n                    s = s + k\n          \
    \          p = p / 10\n                    r1 = r1 + 1\n                }\n  \
    \              p = s\n                while (p != 0) {\n                    var\
    \ k = p % 10\n                    r = r + k\n                    p = p / 10\n\
    \                    r2 = r2 + 1\n                }\n                if (r1 ==\
    \ r2) {\n                    if (r % 2 != 0) {\n                        if (s\
    \ % 2 != 0) {\n                            count = count + 1\n               \
    \         }\n                    }\n                }\n            }\n       \
    \ }\n        count", "        // Your code here\n        nums.filter(x => x >\
    \ 10 && x.toString.charAt(0).toString.toInt % 2 != 0 && x.toString.charAt(x.toString.length\
    \ - 1).toString.toInt % 2 != 0).length", "        val f = (x : Long) => x.toString\n\
    \        val g = (x : String) => x.substring(1, x.length - 1)\n        val h =\
    \ (x : String) => x.split(\"\")\n        val k = (x : Array[String]) => x.filter(_\
    \ != \"\").filter(_.toInt % 2 == 1)\n        nums.filter(_ > 10).filter(x => {\n\
    \            val y = g(f(x))\n            k(h(y)).length == 2\n        }).length",
  "        val res = nums.filter(x => x > 10 && x.toString.length > 1 && (x.toString.head.toString.toInt\
    \ % 2 == 1) && (x.toString.last.toString.toInt % 2 == 1))\n        return res.length.toLong",
  "        // Fill Up this function body\n        // `nums` contains all the numbers\n\
    \        // Compute and return the number of elements in `nums` that satisfy the\
    \ condition\n        // **count of all the numbers > 10 such that 1st and last\
    \ digits are odd.\n        nums.filter(x => x > 10 && x % 2 != 0 && (x % 10) %\
    \ 2 != 0).size", "        // Fill Up this function body\n        // `nums` is\
    \ a list of numbers\n        // return the number of elements greater than 10\
    \ and both first and last digits are odd\n        var cnt = 0\n        for (n\
    \ <- nums) {\n            if (n > 10 && abs(n) % 10 % 2 == 1 && n / pow(10, n.toString.length\
    \ - 1).toLong % 2 == 1) {\n                cnt += 1\n            }\n        }\n\
    \        cnt", '        nums.filter(n => (n % 2 != 0) && (abs(n) > 10)).map(n
    => (n / 10) % 10 != 0).filter(n => n).size', '        return nums.filter(x =>
    abs(x) > 10 && abs(x) % 10 % 2 == 1 && x / abs(x / 10) % 10 % 2 == 1).length',
  '        return nums.filter(x => x > 10 && abs(x).toString.charAt(0).toInt % 2 ==
    1 && abs(x).toString.charAt(abs(x).toString.length - 1).toInt % 2 == 1).length',
  "\t\tval s = nums.filter(x => x >= 10 && x.toString.head.toString.toInt % 2 == 1\
    \ && x.toString.last.toString.toInt % 2 == 1)\n\t\treturn s.length.toLong", " \
    \       // Fill Up this function body\n        // `nums` In case you do not know\
    \ what it means, look it up in google.\n        return -1", "        var count\
    \ = 0\n        for (i <- nums) {\n            if (i > 10 && firstIsOdd(i) && lastIsOdd(i))\
    \ count += 1\n        }\n        count", "        def isValid(n : Long) : Boolean\
    \ = {\n            val s = n.toString\n            (n > 10) && (s(0).toString.toInt\
    \ % 2 == 1) && (s(s.length - 1).toString.toInt % 2 == 1)\n        }\n        nums.filter(isValid).length",
  "        val nums2 = for(i <- nums; if(i > 10)) yield i\n        val nums3 = for(i\
    \ <- nums2; if(i.toString.length > 1)) yield i\n        val nums4 = for(i <- nums3;\
    \ if(i.toString.charAt(0).asDigit % 2 == 1 && i.toString.charAt(i.toString.length\
    \ - 1).asDigit % 2 == 1)) yield i\n        nums4.length", "        // Fill Up\
    \ this function body\n        // `nums` is a list containing some integers\n \
    \       // Calculate and return the number of integers in `nums` that are\n  \
    \      // greater than 10, and both first and last digits of a number are odd.\n\
    \        // For example:\n        // >>> specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong)))\n        // (1l)\n        // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n        // (2l)\n\
    \        // -15 % 10 = -5\n        //  15 % 10 =  5\n        // 15 / 10 = 1\n\
    \        // -15 / 10 = -1\n        def isFirstAndLastOdd(num : Long) : Boolean\
    \ = {\n            if (num < 0) {\n                if (abs(num) % 10 % 2 == 1\
    \ && abs(num) / 10 % 2 == 1) true\n                else false\n            }\n\
    \            else {\n                if (num % 10 % 2 == 1 && num / 10 % 2 ==\
    \ 1) true\n                else false\n            }\n        }\n        var count\
    \ = 0\n        for (num <- nums) {\n            if (num > 10 && isFirstAndLastOdd(num))\
    \ count += 1\n        }\n        count", '        return nums.filter(x => x >
    10 && x.toString.charAt(0).asDigit % 2 == 1 && x.toString.charAt(x.toString.length
    - 1).asDigit % 2 == 1).length', '        nums.filter(x => (abs(x) > 10l && (abs(x)
    % 10l % 2l != 0l) && ((abs(x) / pow(10l, floor(log10(abs(x))))).toLong % 2l !=
    0l))).length', "        var result = 0\n        for (num <- nums) {\n        \
    \    if (num > 10 && num.toString.charAt(0).asDigit % 2 == 1 && num.toString.charAt(num.toString.length\
    \ - 1).asDigit % 2 == 1) result += 1\n        }\n        result", "    \tval digitCount\
    \ = (floor(log10(abs(nums.max))) + 1).toInt\n    \tnums.filter(x => abs(x) > 10\
    \ && \n    \t\t\t\t\tx.toString.substring(0, 1).toInt % 2 != 0 && \n    \t\t\t\
    \t\tx.toString.substring(digitCount - 1, digitCount).toInt % 2 != 0).size", " \
    \       // Your code goes here.\n        // Replace 0 with your answer.\n    \
    \    def isGood(x : Long) : Boolean = {\n            val xStr = x.toString\n \
    \           if (x < 10) {\n                return false\n            }\n     \
    \       if (xStr.head.toString.toInt % 2 == 0 || xStr.last.toString.toInt % 2\
    \ == 0) {\n                return false\n            }\n            return true\n\
    \        }\n        nums.filter(isGood(_)).length.toLong", "        var count\
    \ = 0\n        for (num <- nums) {\n            if (num > 10 && num.toString.length\
    \ > 1 && num.toString.charAt(0).asDigit % 2 == 1 && num.toString.charAt(num.toString.length\
    \ - 1).asDigit % 2 == 1) count += 1\n        }\n        count", "        val result\
    \ = nums.filter(x => isBothFirstAndLastDigitsOdd(x)).count(x => x > 10)\n    \
    \    return result", "        nums.filter(x => {\n            val s = x.toString()\n\
    \            (x > 10) && (s(0).toString.toInt % 2 == 1) && (s(s.length - 1).toString.toInt\
    \ % 2 == 1)\n        }).length", "\t\tnums.filter(x => x > 10 && x % 2 == 1 &&\
    \ x % 10 == 1).length", '        nums.filter(n => n > 10 && (n % 2 == 1) && (n.toString.last.toString.toInt
    % 2 == 1)).length', "        var count = 0l\n        for (num <- nums) {\n   \
    \         if (num > 10) {\n                val firstDigit = num.toString.substring(0,\
    \ 1).toInt\n                val lastDigit = num.toString.substring(num.toString.length\
    \ - 1, num.toString.length).toInt\n                if (firstDigit % 2 == 1 &&\
    \ lastDigit % 2 == 1) count += 1\n            }\n        }\n        count", " \
    \       // Fill up this function body\n        // You can add another function\
    \ as well, if required\n        def bothOdd(num : Long) : Boolean = {\n      \
    \      var s = num.toString.map(x => x.asDigit)\n            return (s(0) % 2\
    \ != 0 && s(s.length - 1) % 2 != 0)\n        }\n        var r = nums.filter(x\
    \ => x > 10 && bothOdd(x))\n        return r.length", "        nums.count(n =>\
    \ n > 10 &&\n        n.toString.head.toString.toInt % 2 == 1 &&\n        n.toString.last.toString.toInt\
    \ % 2 == 1)", '        nums.map(x => if (x > 10 && x % 2 == 1 && (x / 10) % 2
    == 1) 1 else 0).reduce(_ + _)', "        // Fill Up this function body\n     \
    \           // To print the output to the screen\n                // Console.println(\"\
    Hello World\")\n                var count = 0\n                nums.foreach{ n\
    \ => if (n > 10 && n % 2 == 1 && n / 10 % 2 == 1) count += 1}\n              \
    \  count", "        // Fill up this function body\n        // You can add another\
    \ function as well, if required\n        0", "        def isGreaterThan10(n :\
    \ Long) : Boolean = {\n            if (n > 10) true else false\n        }\n  \
    \      def firstAndLastDigits(n : Long) : Boolean = {\n            val strN =\
    \ n.toString\n            if (strN.length == 1) {\n                true\n    \
    \        } else {\n                val firstDigit = strN.substring(0, 1).toInt\n\
    \                val lastDigit = strN.substring(strN.length - 1, strN.length).toInt\n\
    \                if (firstDigit % 2 == 1 && lastDigit % 2 == 1) true else false\n\
    \            }\n        }\n        val filteredNums = nums.filter(x => isGreaterThan10(x)\
    \ && firstAndLastDigits(x))\n        filteredNums.length.toLong", "        var\
    \ count = 0l\n        for (num <- nums) {\n            if (num > 10 && isDigitOdd(num)\
    \ && isDigitOdd(num / 10)) count += 1\n        }\n        count", '        nums.filter(x
    => (x > 10) && ((x % 10) % 2 != 0) && ((x / 10) % 2 != 0)).length', "        def\
    \ helper(nums : List[Long], cnt : Long) : Long = {\n            if (nums.length\
    \ == 0) cnt\n            else {\n                if (nums.head > 10 && abs(nums.head)\
    \ % 2 == 1 && abs(nums.head % 10) % 2 == 1) helper(nums.tail, cnt + 1)\n     \
    \           else helper(nums.tail, cnt)\n            }\n        }\n        helper(nums,\
    \ 0)", "        val filtered = nums.filter(s => {\n            val str = s.toString\n\
    \            str.length > 1 && (abs(s) > 10) && (str.head.toString.toInt % 2 ==\
    \ 1) && (str.last.toString.toInt % 2 == 1)\n        })\n        return filtered.length.toLong",
  "        def reverseLong(n : Long) : Long = {\n            var m = n\n         \
    \   var result = 0l\n            while (m > 0) {\n                result = result\
    \ * 10 + m % 10\n                m /= 10\n            }\n            result\n\
    \        }\n        nums.filter((n : Long) => n > 10 && n % 2 == 1 && (n / 10)\
    \ % 2 == 1 && reverseLong(n) % 2 == 1).length", '        nums.filter(n => (n >
    10 && n % 2 == 1 && n.toString.charAt(0).toInt % 2 == 1 && n.toString.charAt(n.toString.length
    - 1).toInt % 2 == 1)).length', "        // Fill Up this function body\n      \
    \  // `nums` is List[Long] type\n        // `return` should be Long type\n   \
    \     nums.count(n => n > 10 && n % 2 == 1 && (n % 10) % 2 == 1)", '        nums.filter(n
    => (n > 10) && (n % 2 == 1) && (n % 10 == n / pow(10, n.toString.length - 1).toLong)).length',
  '        nums.map(x => x.toString).filter(x => x.length >= 2 && x.length <= 9).filter(x
    => x.head.toString.toInt % 2 == 1 && x.last.toString.toInt % 2 == 1).map(x =>
    x.toLong).filter(x => x > 10).size', '        return nums.filter(x => x > 10 &&
    x.toString.charAt(0).toString.toInt % 2 == 1 && x.toString.charAt(x.toString.length
    - 1).toString.toInt % 2 == 1).length', "        // Fill Up this function body\n\
    \        // `nums` is a list of `Long`\n        // The return type of this function\
    \ must be `Long`\n        if (nums.isEmpty) 0l\n        else {\n          if (nums.head\
    \ >= 10 && isOdd(nums.head) && isOdd(nums.last)) 1l + specialFilter(nums.tail)\n\
    \          else specialFilter(nums.tail)\n        }", "        def isSpecial(n\
    \ : Long) : Boolean = {\n            val s = n.toString\n            val last\
    \ = s.last\n            val first = s.head\n            n > 10 && last.toInt %\
    \ 2 == 1 && first.toInt % 2 == 1\n        }\n        return nums.filter(isSpecial).length",
  "        // Fill Up this function body\n        // `nums` List of integers\n   \
    \     // To return the number of elements in `nums` that satisfy a predicate\n\
    \        nums.filter(t => t > 10 && t.toString.length == 2 && t.toString.head.toString.toInt\
    \ % 2 != 0 && t.toString.last.toString.toInt % 2 != 0).length", "        // Fill\
    \ Up this function body\n        // `nums` is a list containing integers, e.g.\
    \ (1l, -1l, 1l, 6l, 5l, 7l)\n        // `return` should return the number of elements\
    \ in the list that\n        //  are greater than 10 and both first and last digits\
    \ of a number are odd (1, 3, 5, 7, 9).\n        var count = 0l\n        for (num\
    \ <- nums) {\n            if (num > 10) {\n                val digits = num.toString.split(\"\
    \").toList.map(x => x.toLong)\n                if (digits.head % 2 != 0 && digits.last\
    \ % 2 != 0) {\n                    count += 1\n                }\n           \
    \ }\n        }\n        count", '        nums.map(x => if (x > 10 && x % 2 ==
    1 && (x % 10) % 2 == 1) 1 else 0).sum', "        // Fill up this function body\n\
    \        // You can add another function as well, if required\n        nums.filter(x\
    \ => abs(x) > 10 && (abs(x) % 10) % 2 == 1 && abs(x) / 10 % 2 == 1).length", '        nums.filter(n
    => n > 10 && getFirstDigit(n) % 2 == 1 && getLastDigit(n) % 2 == 1).length', " \
    \       def firstDigit(n : Long) : Long = {\n            var tmp = n\n       \
    \     while (tmp >= 10) tmp /= 10\n            tmp\n        }\n        def lastDigit(n\
    \ : Long) : Long = n % 10\n        val l = nums.filter(n => n >= 10 && firstDigit(n)\
    \ % 2 == 1 && lastDigit(n) % 2 == 1)\n        l.length", "        def isSpecial(n\
    \ : Long) : Boolean = {\n            if (n < 10) return false\n            val\
    \ len = n.toString.length\n            val ld = n % 10\n            val fd = n\
    \ / pow(10, len - 1).toLong\n            ((fd % 2 != 0) && (ld % 2 != 0) && (n\
    \ > 10))\n        }\n        return nums.filter(isSpecial).length", "        var\
    \ count = 0l\n        for (num <- nums) {\n            if (num > 10 && Math.abs(num)\
    \ % 10 % 2 == 1 && num / pow(10, floor(log10(abs(num))).toInt) % 2 == 1) {\n \
    \               count += 1\n            }\n        }\n        count", "      \
    \  var cnt = 0\n        for (i <- nums) {\n            if (i > 10 && i.toString.length\
    \ > 1 && i.toString.head.toString.toInt % 2 == 1 && i.toString.last.toString.toInt\
    \ % 2 == 1) {\n                cnt += 1\n            }\n        }\n        cnt",
  "        def isGreaterThan10(n : Long) : Boolean = n > 10\n        def isSpecial(n\
    \ : Long) : Boolean = {\n            val sn = n.toString\n            val len\
    \ = sn.length\n            val first = sn.head.toString.toInt\n            val\
    \ last = sn.last.toString.toInt\n            if (first % 2 == 1 && last % 2 ==\
    \ 1) true else false\n        }\n        nums.filter(n => isGreaterThan10(n) &&\
    \ isSpecial(n)).length", "        val filtered = nums.filter(n => n > 10 && n\
    \ % 2 == 1 && (n / 10) % 2 == 1 && (n % 10) % 2 == 1)\n        println(filtered)\n\
    \        filtered.length", "\t\t// Fill Up this function body\n        // `nums`\
    \ contains only positive integers\n        // Do not change the signature of this\
    \ function\n        -1", "        nums.count(x => x > 10 && x.toString.length\
    \ > 1 && List(x.toString.charAt(0), x.toString.charAt(x.toString.length - 1)).forall(y\
    \ => List('1', '3', '5', '7', '9').contains(y)))", '        nums.filter(x => (x
    > 10) && (x % 2 == 1) && (x / 10 % 2 == 1)).length', "        val s = nums.filter(x\
    \ => (x > 10) && (x % 2 == 1)).map(x => (x / 10, x % 10)).filter(x => (x._1 %\
    \ 2 == 1) && (x._2 % 2 == 1)).map(x => 1l).foldLeft(0l)(_ + _)\n        s", '      nums.filter(p
    => (p > 10) && (p.toString.head.toInt % 2 == 1) && (p.toString.last.toInt % 2
    == 1)).length', "        var cnt = 0l\n        for (num <- nums) {\n         \
    \   if (num > 10 && math.abs(num % 10) % 2 == 1 && math.abs(num / math.pow(10,\
    \ math.floor(math.log10(math.abs(num)))) % 10) % 2 == 1) cnt += 1\n        }\n\
    \        cnt", '      nums.filter(x => x > 10 && (x % 2 == 1) && ((x % 10) % 2
    == 1)).length', "        // Fill Up this function body\n        // `nums` is a\
    \ list of integers\n        // Do your magic here\n        if (nums.length ==\
    \ 0) {\n            return 0\n        }\n        val first = nums.head\n     \
    \   val second = specialFilter(nums.tail)\n        if (isBigEnough(first) && isOdd(first)\
    \ && isOdd(lastDigit(first))) {\n            return 1 + second\n        }\n  \
    \      second", "        // Fill Up this function body\n        // `nums` list\
    \ consists of numbers that are Long type\n        // To access the individual\
    \ element of `nums`, you need to use `nums.apply(0)`\n        // If you want to\
    \ return the number of elements in the list that are greater than 10 and both\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9), you need to return\
    \ `Long`\n        def isDivisibleBy(num : Long, div : Long) : Boolean = {\n  \
    \          num % div == 0\n        }\n        def isOdd(num : Long) : Boolean\
    \ = {\n            num % 2 == 1\n        }\n        def firstDigit(num : Long)\
    \ : Long = {\n            return num.toString.charAt(0).toLong - '0'.toLong\n\
    \        }\n        def lastDigit(num : Long) : Long = {\n            return num.toString.charAt(num.toString.length\
    \ - 1).toLong - '0'.toLong\n        }\n        var count = 0l\n        for (num\
    \ <- nums) {\n            if (num > 10 && isOdd(firstDigit(num)) && isOdd(lastDigit(num)))\
    \ {\n                count += 1\n            }\n        }\n        return count",
  "\t\tval numDigits = nums.map(x => x.toString.length)\n\t\tval numDigitsFiltered\
    \ = numDigits.map(x => if (x <= 2) 1 else x - 2)\n\t\tval oddDigits = nums.zip(numDigitsFiltered).map(x\
    \ => x._1 * x._2)\n\t\tval digitsFiltered = oddDigits.filter(x => abs(x) % 2 ==\
    \ 1)\n\t\tval result = digitsFiltered.filter(x => x > 10)\n\t\tresult.length",
  "        nums.filter(x => abs(x) > 10).count(x => {\n            val xs = x.toString\n\
    \            xs.head.toString.toInt % 2 == 1 && xs.last.toString.toInt % 2 ==\
    \ 1\n        })", "        var count = 0l\n        for (n <- nums) {\n       \
    \     if (n >= 10) {\n                val fd = n.toString.take(1).toInt\n    \
    \            val ld = n.toString.takeRight(1).toInt\n                if (fd %\
    \ 2 == 1 && ld % 2 == 1) {\n                    count += 1\n                }\n\
    \            }\n        }\n        count", "        var result = 0l;\n       \
    \ for (n <- nums) {\n            if (n > 10) {\n                var nn = n;\n\
    \                if (nn < 0) nn = nn * -1;\n                var firstDigit = nn\
    \ % 10;\n                while (nn > 10) nn = nn / 10;\n                if (firstDigit\
    \ % 2 == 1 && nn % 2 == 1) result += 1;\n            }\n        }\n        return\
    \ result;", "        // Fill Up this function body\n        // `nums`  argument\
    \ is a List[Long]\n        // Do not modify the return type of this function\n\
    \        var count = 0l\n        for (num <- nums) {\n            if (num.abs\
    \ > 10) {\n                var val1 = num\n                var val2 = num.abs\n\
    \                while (val1 > 10) {\n                    val1 /= 10\n       \
    \         }\n                while (val2 > 10) {\n                    val2 /=\
    \ 10\n                }\n                if (val1 % 2 != 0 && val2 % 2 != 0) count\
    \ += 1\n            }\n        }\n        count", "        nums.filter(x => {\n\
    \            x > 10 && x % 2 == 1 && (x % 10 == 1 || x % 10 == 3 || x % 10 ==\
    \ 5 || x % 10 == 7 || x % 10 == 9)\n        }).length", '        nums.filter(n
    => n > 10 && n.toString.head.toInt % 2 == 1 && n.toString.last.toInt % 2 == 1).length',
  "        def isOdd(num : Int) : Boolean = {\n            if (num == -1) true\n \
    \           else if (num % 2 == 0) false\n            else isOdd(num / 10)\n \
    \       }\n        def specialFilter(nums : List[Long], acc : Long) : Long = {\n\
    \            if (nums.isEmpty) acc\n            else if (abs(nums.head) > 10 &&\
    \ isOdd(nums.head.toInt) && isOdd(nums.head.toString.last.toInt - '0')) specialFilter(nums.tail,\
    \ acc + 1)\n            else specialFilter(nums.tail, acc)\n        }\n      \
    \  specialFilter(nums, 0)", '        nums.filter(a => a > 10 && (a % 2 != 0) &&
    a.toString.head.toString.toInt % 2 != 0 && a.toString.last.toString.toInt % 2
    != 0).length', '        nums.filter(x => abs(x) > 10 && abs(x) % 10 % 2 == 1 &&
    x % 10 % 2 == 1).length', "        // Have a function that converts a long to\
    \ a list of its digits\n        def longToDigits(num : Long) : List[Int] = {\n\
    \            if (num == 0) List[Int]()\n            else {\n                val\
    \ x = num % 10\n                x :: longToDigits(num / 10)\n            }\n \
    \       }\n        // Have a function that checks if a long is \"valid\"\n   \
    \     def checkValid(num : Long) : Boolean = {\n            if (num < 10) num\
    \ % 2 == 1\n            else {\n                val digits = longToDigits(num)\n\
    \                digits.head % 2 == 1 && digits.last % 2 == 1\n            }\n\
    \        }\n        // Have a function that filters a list of longs\n        def\
    \ filter(nums : List[Long]) : List[Long] = {\n            if (nums.isEmpty) nums\n\
    \            else {\n                val x = nums.head\n                if (x\
    \ > 10 && checkValid(x)) x :: filter(nums.tail)\n                else filter(nums.tail)\n\
    \            }\n        }\n        // Filter the list\n        filter(nums).length",
  "        var result = 0l\n        for (num <- nums) {\n            if (num > 10)\
    \ {\n                var first = num.toString.charAt(0).toString.toInt\n     \
    \           var last = num.toString.charAt(num.toString.length - 1).toString.toInt\n\
    \                if (first % 2 == 1 && last % 2 == 1) result += 1\n          \
    \  }\n        }\n        result", "        def isAllowed(num : Long) : Boolean\
    \ = {\n            val firstDigit = num.toString.toList.head.toString.toInt\n\
    \            val lastDigit = num.toString.toList.last.toString.toInt\n       \
    \     (num > 10 && firstDigit % 2 == 1 && lastDigit % 2 == 1)\n        }\n   \
    \     nums.filter(isAllowed).length", "    \tdef even(x : Long) : Boolean = (x\
    \ % 2 == 0)\n    \tdef first(x : Long) : Long = {\n    \t\tvar first = x\n   \
    \ \t\twhile (first > 9) first /= 10\n    \t\tfirst\n    \t}\n    \tdef last(x\
    \ : Long) : Long = {\n    \t\tvar last = x\n    \t\twhile (last % 10 == 0) last\
    \ /= 10\n    \t\tlast % 10\n    \t}\n    \tnums.filter(x => x > 10 && !even(first(x))\
    \ && !even(last(x))).length", "        def isValid(n : Long) : Boolean = {\n \
    \           if (n > 10) {\n                val firstDigit = n.toString()(0).asDigit\n\
    \                val lastDigit = n.toString()(n.toString().length - 1).asDigit\n\
    \                if (firstDigit % 2 == 1 && lastDigit % 2 == 1) true\n       \
    \         else false\n            }\n            else false\n        }\n     \
    \   nums.filter(isValid(_)).length", "        // Fill up this function body\n\
    \        // You can add another function as well, if required\n        var result\
    \ = 0l\n        for (num <- nums) {\n            if (num > 10) {\n           \
    \     val strNum = num.toString\n                val fst = strNum.charAt(0).toString.toInt\n\
    \                val last = strNum.charAt(strNum.length - 1).toString.toInt\n\
    \                if (fst % 2 != 0 && last % 2 != 0) result += 1\n            }\n\
    \        }\n        result", "        //\n        // Fill in the implementation\
    \ here.\n        //\n        var res : Long = 0\n        for (i <- nums) {\n \
    \           if (i > 10 && i.toString.head.toString.toInt % 2 != 0 && i.toString.last.toString.toInt\
    \ % 2 != 0) res += 1\n        }\n        res", "        var result = List[Long]()\n\
    \        for (n <- nums) {\n            if (n > 10 && (n % 10 % 2 == 1) && (n.toString.head.toString.toInt\
    \ % 2 == 1)) result = n :: result\n        }\n        result.length", "      \
    \  var count = 0l\n        for (num <- nums) {\n            val str = num.toString\n\
    \            val first = str.charAt(0).toString.toInt\n            val last =\
    \ str.charAt(str.length - 1).toString.toInt\n            if (num > 10 && first\
    \ % 2 != 0 && last % 2 != 0) count += 1\n        }\n        count", '        nums.filter(x
    => x > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt
    % 2 == 1).length', "        // Fix me\n        0l", '        nums.filter(x =>
    x > 10 && x.toString.last.toString.toInt % 2 == 1 && x.toString.head.toString.toInt
    % 2 == 1).length', "        var count = 0\n        for (num <- nums) {\n     \
    \       if (num >= 10 && (num % 10) % 2 == 1 && num / pow(10, floor(log10(num)).toInt)\
    \ % 2 == 1) {\n                count += 1\n            }\n        }\n        count",
  "        val result = ListBuffer[Long]()\n        for (num <- nums) {\n        \
    \    val s = num.toString\n            if (s.length > 1 && s.head.toString.toInt\
    \ % 2 != 0 && s.last.toString.toInt % 2 != 0 && num > 10) {\n                result\
    \ += num\n            }\n        }\n        result.size", "        def toDigits(n\
    \ : Long) : List[Long] = {\n            if (n < 0) -n :: toDigits(-n / 10)\n \
    \           else if (n < 10) List(n)\n            else n % 10 :: toDigits(n /\
    \ 10)\n        }\n        nums.filter(num => (num >= 10) && ((num % 10) % 2 ==\
    \ 1) && (toDigits(num).last % 2 == 1)).length", "        nums.count(x => {\n \
    \           if (x >= 10) {\n                val first = x.toString.charAt(0).asDigit\n\
    \                val last = x.toString.charAt(x.toString.length - 1).asDigit\n\
    \                (first % 2 == 1) && (last % 2 == 1)\n            } else false\n\
    \        })", "        def check(n : Long) : Boolean = {\n            def helper(p\
    \ : Long) : Boolean = {\n                if (p == 0) true\n                else\
    \ if (p % 10 == 0) false\n                else if (p % 2 == 0) false\n       \
    \         else helper(p / 10)\n            }\n            if (n > 10) helper(n)\n\
    \            else false\n        }\n        return nums.map(n => if (check(n))\
    \ 1 else 0).sum", '        nums.filter(n => (n > 10 && n.toString.reverse.take(1).toInt
    % 2 == 1 && n.toString.take(1).toInt % 2 == 1)).length', "        var result =\
    \ 0l\n        for (num <- nums) {\n            val lastDigit = num % 10\n    \
    \        val firstDigit = num / pow(10, num.toString.length - 1).toLong\n    \
    \        if (num > 10 && firstDigit % 2 == 1 && lastDigit % 2 == 1) result +=\
    \ 1\n        }\n        result", "        val filteredNums = nums.filter(num =>\
    \ (abs(num) > 10) && (num.toString()(0).toInt % 2 != 0) && (num.toString()(num.toString().length\
    \ - 1).toInt % 2 != 0))\n        return filteredNums.length", '        nums.filter(n
    => n.toString.length() > 1 && n.toString.head.toString.toInt % 2 != 0 && n.toString.last.toString.toInt
    % 2 != 0 && n > 10).length', '      nums.filter(x => x > 10 && x.toString.charAt(0).toString.toInt
    % 2 == 1 && x.toString.charAt(x.toString.length - 1).toString.toInt % 2 == 1).length',
  '        nums.filter(num => abs(num) > 10 && num.toString.charAt(0).asDigit % 2
    == 1 && num.toString.charAt(num.toString.length - 1).asDigit % 2 == 1).length',
  '        0l', "        def helper(nums : List[Long], acc : Long) : Long = {\n  \
    \          if (nums.isEmpty) acc\n            else {\n                val head\
    \ = nums.head\n                if (head > 10 && head.toString.take(1).toInt %\
    \ 2 == 1 && head.toString.takeRight(1).toInt % 2 == 1) helper(nums.tail, acc +\
    \ 1)\n                else helper(nums.tail, acc)\n            }\n        }\n\
    \        helper(nums, 0)", "        // Fill Up this function body\n        //\
    \ `nums` is a List[Long] type\n        // `nums` will contain only one digit.\n\
    \        // For example, [-73l, 14l, -15l]\n        nums.count(x => x > 10 &&\
    \ x % 2 == 1 && (x % 10 == 1 || x % 10 == 3 || x % 10 == 5 || x % 10 == 7 || x\
    \ % 10 == 9))", "        var count = 0l\n        for (i <- nums) {\n         \
    \   if (i > 10 && i.toString.charAt(0).toInt % 2 == 1 && i.toString.charAt(i.toString.length\
    \ - 1).toInt % 2 == 1) count += 1\n        }\n        count", '        nums.filter(x
    => x > 10 && isFirstAndLastDigitOdd(x)).length', '        ???', "        def helper(nums\
    \ : List[Long], count : Long) : Long = {\n            if (nums.isEmpty) {\n  \
    \              count\n            } else {\n                if (abs(nums.head)\
    \ > 10 && abs(nums.head).toString.length > 1 && abs(nums.head).toString.head.toString.toInt\
    \ % 2 == 1 && abs(nums.head).toString.last.toString.toInt % 2 == 1) {\n      \
    \              helper(nums.tail, count + 1)\n                } else {\n      \
    \              helper(nums.tail, count)\n                }\n            }\n  \
    \      }\n        helper(nums, 0)", "        // Fill Up this function body\n \
    \       // `nums` contains a list of integers\n        // `return` the number\
    \ of elements in `nums` that are greater than 10 \n        // and both first and\
    \ last digits of a number are odd (1, 3, 5, 7, 9).\n        // Do not modify the\
    \ function signature\n        def firstDigit(n : Long) : Long = {\n          \
    \  if (n < 0) return firstDigit(-n)\n            if (n < 10) return n\n      \
    \      firstDigit(n / 10)\n        }\n        def lastDigit(n : Long) : Long =\
    \ {\n            if (n < 0) return lastDigit(-n)\n            n % 10\n       \
    \ }\n        var count = 0l\n        for (n <- nums) {\n            if (n > 10\
    \ && firstDigit(n) % 2 == 1 && lastDigit(n) % 2 == 1) count += 1\n        }\n\
    \        count", "        nums.map(x => x.toString).filter(x => {\n          \
    \  x.size >= 2 && abs(x.head.toString.toInt) % 2 == 1 && x.last.toString.toInt\
    \ % 2 == 1\n        }).size", "        // Fill up this function body\n       \
    \ // `nums` is a list of numbers and\n        // you should return the count of\
    \ numbers that satisfy the constraints\n        0l", "    \tvar num = 0\n    \t\
    for (x <- nums) {\n    \t\tif (x >= 10 && x.toString.charAt(0).asDigit % 2 ==\
    \ 1 && x.toString.charAt(x.toString.length - 1).asDigit % 2 == 1) num += 1\n \
    \   \t}\n    \tnum", "        // Fill Up this function body\n        // `nums`\
    \ is a list of numbers\n        // Do the computation here and return the output\n\
    \        var count = 0l\n        for (i <- nums) {\n            if (abs(i) > 10)\
    \ {\n                var n = abs(i)\n                var lastDigit = n % 10\n\
    \                while (n >= 10) n /= 10\n                if (n % 2 != 0 && lastDigit\
    \ % 2 != 0) count += 1\n            }\n        }\n        count", '        return
    nums.filter((n : Long) => (n.toString().charAt(0).toString().toInt % 2 != 0) &&
    (n.toString().charAt(n.toString().length() - 1).toString().toInt % 2 != 0) &&
    (n > 10)).length.toLong']
stop_tokens:
- "\n    }\n"
