name: HumanEval_47_median
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong,\
  \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong,\
  \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n\
  \    def median(l : List[Long]) : Float = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(median((List[Long](3l.toLong,\
  \ 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == 3l);\n    assert(median((List[Long](-10l.toLong,\
  \ 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong))) == (8.0f));\n  \
  \  assert(median((List[Long](5l.toLong))) == 5l);\n    assert(median((List[Long](6l.toLong,\
  \ 5l.toLong))) == (5.5f));\n    assert(median((List[Long](8l.toLong, 1l.toLong,\
  \ 3l.toLong, 9l.toLong, 9l.toLong, 2l.toLong, 7l.toLong))) == 7l);\n    }\n\n}\n"
completions: ["        val sorted = l.sorted\n        val size = sorted.size\n   \
    \     if (size % 2 == 0) {\n            val middle = size / 2\n            (sorted(middle\
    \ - 1) + sorted(middle)).toFloat / 2.0f\n        } else {\n            sorted(size\
    \ / 2).toFloat\n        }", "        val m = l.sorted\n        if (m.length %\
    \ 2 == 0) (m(m.length / 2 - 1) + m(m.length / 2)) / 2f\n        else m(m.length\
    \ / 2)", "        val n = l.length;\n        if (n == 0) return 0f;\n        val\
    \ sortedL = l.sorted;\n        if (n % 2 == 1) return sortedL(n / 2).toFloat;\n\
    \        val mid2 = n / 2;\n        return (sortedL(mid2 - 1) + sortedL(mid2)).toFloat\
    \ / 2f;", "        val s = l.sorted\n        val mid = l.length / 2\n        if\
    \ (l.length % 2 == 0) {\n            (s(mid) + s(mid - 1)).toFloat / 2\n     \
    \   } else {\n            s(mid).toFloat\n        }", "        val sorted = l.sorted\n\
    \        if (sorted.length % 2 == 0) {\n            (sorted(sorted.length / 2\
    \ - 1) + sorted(sorted.length / 2)).toFloat / 2\n        } else {\n          \
    \  sorted(sorted.length / 2).toFloat\n        }", "        val s = l.sortWith((x,\
    \ y) => x < y)\n        val n = s.length\n        if (n % 2 == 0) {\n        \
    \    ((s(n / 2) + s(n / 2 - 1)).toFloat / 2.0f)\n        } else {\n          \
    \  s(n / 2).toFloat\n        }", "        val lSorted = l.sorted\n        val\
    \ size = lSorted.size\n        if (size % 2 == 0) {\n            (lSorted(size\
    \ / 2) + lSorted(size / 2 - 1)).toFloat / 2\n        } else {\n            lSorted(size\
    \ / 2).toFloat\n        }", '        l.sortWith(_<_).drop(l.length / 2).head.toFloat',
  "        val (count, sum) = l.foldLeft((0, 0l))((acc, x) => (acc._1 + 1, acc._2\
    \ + x))\n        if (count % 2 == 0) {\n            val m = count / 2\n      \
    \      (l(m - 1) + l(m)).toFloat / 2\n        } else {\n            l(count /\
    \ 2)\n        }", "        val len = l.length\n        val sorted = l.sorted\n\
    \        if (len % 2 == 0)\n            (sorted(len / 2) + sorted(len / 2 - 1)).toFloat\
    \ / 2.0f\n        else\n            sorted(len / 2).toFloat", "        val sorted\
    \ = l.sorted\n        if (sorted.length % 2 == 0) {\n            (sorted(sorted.length\
    \ / 2) + sorted(sorted.length / 2 - 1)).toFloat / 2\n        } else {\n      \
    \      sorted(sorted.length / 2).toFloat\n        }", "        val n = l.length\n\
    \        val m = n / 2\n        if (n % 2 == 0) {\n            val x = l(m - 1)\n\
    \            val y = l(m)\n            (x + y).toFloat / 2.0f\n        } else\
    \ {\n            l(m).toFloat\n        }", "        val lSorted = l.sorted\n \
    \       return if (lSorted.length % 2 == 0) (lSorted(lSorted.length / 2 - 1) +\
    \ lSorted(lSorted.length / 2)) / 2f else lSorted(lSorted.length / 2)", "     \
    \   val L = l.sortWith((x, y) => x < y)\n        val n = L.length\n        if\
    \ (n % 2 == 0) {\n            val m = (L(n / 2) + L(n / 2 - 1)) / 2.0f\n     \
    \       return m\n        }\n        L(n / 2).toFloat", "        if (l.length\
    \ % 2 == 0) ((l.sortWith(_ < _)(l.length / 2 - 1) + l.sortWith(_ < _)(l.length\
    \ / 2)) / 2.0f)\n        else (l.sortWith(_ < _)(l.length / 2).toFloat)", "  \
    \      val sl = l.sorted\n        val n = sl.length\n        val n2 = n / 2\n\
    \        if (n % 2 == 0) (sl(n2 - 1) + sl(n2)) / 2.0f else sl(n2)", "        val\
    \ a = l.sorted\n        val n = a.length\n        if (n % 2 == 0) {\n        \
    \    return ((a(n / 2) + a(n / 2 - 1)).toFloat / 2)\n        } else {\n      \
    \      return a(n / 2).toFloat\n        }", "        // median of five numbers\
    \ a, b, c, d, e is\n        // a + b + c + d + e - max(a, b, c, d, e) - min(a,\
    \ b, c, d, e)\n        var array = l.toArray\n        var a = array(0)\n     \
    \   var b = array(1)\n        var c = array(2)\n        var d = array(3)\n   \
    \     var e = array(4)\n        var min = min(a, min(b, min(c, min(d, e))))\n\
    \        var max = max(a, max(b, max(c, max(d, e))))\n        return (a + b +\
    \ c + d + e - min - max) / 3.0f", "        val (l2, m) = l.sortWith(_ < _).splitAt(l.length\
    \ / 2)\n        if (l.length % 2 == 0) (l2.last + m.head).toFloat / 2 else m.head.toFloat",
  "        val sorted = l.sorted\n        if (sorted.length % 2 == 0) {\n        \
    \    val len = sorted.length\n            (sorted(len / 2 - 1) + sorted(len /\
    \ 2)).toFloat / 2\n        } else {\n            sorted(sorted.length / 2).toFloat\n\
    \        }", "        val lSorted = l.sorted\n        val n = lSorted.length\n\
    \        if (n % 2 == 0) ((lSorted(n / 2 - 1).toFloat + lSorted(n / 2).toFloat)\
    \ / 2.0f)\n        else lSorted(n / 2).toFloat", "      val sortedList = l.sorted\n\
    \      val size = sortedList.size\n      if (size % 2 == 0) {\n        (sortedList(size\
    \ / 2) + sortedList(size / 2 - 1)).toFloat / 2\n      } else {\n        sortedList(size\
    \ / 2).toFloat\n      }", "        var temp = l.sortWith(_ < _)\n        if (temp.length\
    \ % 2 == 0) {\n            return ((temp(temp.length / 2) + temp(temp.length /\
    \ 2 - 1)).toFloat / 2)\n        } else {\n            return temp(temp.length\
    \ / 2).toFloat\n        }", "        val m = l.length / 2\n        val (x, y)\
    \ = l.sorted.splitAt(m)\n        if (l.length % 2 == 0) {\n            (x.last\
    \ + y.head) / 2.0f\n        } else {\n            y.head\n        }", "      \
    \  val l1 = l.sorted\n        if (l1.length % 2 == 0) {\n            ((l1(l1.length\
    \ / 2) + l1(l1.length / 2 - 1)).toFloat / 2)\n        } else {\n            l1(l1.length\
    \ / 2).toFloat\n        }", "        val sorted = l.sorted;\n        val n = sorted.length;\n\
    \        if (n % 2 == 0) {\n            ((sorted(n / 2) + sorted(n / 2 - 1)).toFloat\
    \ / 2f);\n        } else {\n            sorted(n / 2).toFloat;\n        }", " \
    \       val n = l.length;\n        val sorted = l.sorted;\n        if (n % 2 ==\
    \ 0) (sorted(n / 2) + sorted(n / 2 - 1)).toFloat / 2 else sorted(n / 2).toFloat",
  "        val n = l.length\n        val m = n / 2\n        if (n % 2 == 0) {\n  \
    \          val (left, right) = l.sortWith(_ < _).splitAt(m)\n            (left.last\
    \ + right.head) / 2.0f\n        } else {\n            l.sortWith(_ < _)(m)\n \
    \       }", "      if (l.length % 2 == 0) {\n        val x = (l.length / 2) -\
    \ 1\n        val y = l.length / 2\n        return ((l(x) + l(y)) / 2.0f)\n   \
    \   }\n      return l(l.length / 2)", "        val ls = l.sorted\n        val\
    \ m = ls.length / 2\n        if (ls.length % 2 == 0) (ls(m) + ls(m-1)) / 2f else\
    \ ls(m)", "        var sortedList = l.sorted\n        var len = sortedList.length\n\
    \        if (len % 2 == 0) {\n            return ((sortedList(len / 2) + sortedList(len\
    \ / 2 - 1)).toFloat / 2)\n        } else {\n            return sortedList(len\
    \ / 2).toFloat\n        }", "        val l2 = l.sorted\n        (l2(l2.length\
    \ / 2) + l2(l2.length / 2 - 1)) / 2.0f", "        val n = l.length;\n        val\
    \ s = l.sorted;\n        if (n % 2 == 0) (s(n / 2 - 1) + s(n / 2)) / 2 else s(n\
    \ / 2);", "        val m = l.length / 2\n        if (l.length % 2 == 0) ((l(m-1)\
    \ + l(m)).toFloat / 2) else l(m).toFloat", "        val sorted = l.sorted\n  \
    \      val len = sorted.length\n        if (len % 2 == 0) {\n            (sorted(len\
    \ / 2 - 1) + sorted(len / 2)).toFloat / 2\n        } else {\n            sorted(len\
    \ / 2).toFloat\n        }", "        val sorted = l.sorted\n        val len =\
    \ sorted.length\n        if (len % 2 == 0) {\n            val m = len / 2\n  \
    \          ((sorted(m - 1) + sorted(m)).toFloat / 2)\n        } else sorted(len\
    \ / 2)", "        val n = l.length\n        val c = l.sortWith(_ < _)\n      \
    \  if (n % 2 == 0) ((c(n / 2 - 1) + c(n / 2)).toFloat / 2) else c(n / 2).toFloat",
  "        val sorted = l.sorted\n        val middle = sorted.length / 2\n       \
    \ if (sorted.length % 2 == 0) {\n            val n = sorted(middle - 1) + sorted(middle)\n\
    \            ((n / 2f) + (n % 2) / 2f)\n        } else sorted(middle)", "    \
    \    val len = l.length\n        if (len % 2 == 0) {\n            val firstMid\
    \ = l(len / 2 - 1)\n            val secondMid = l(len / 2)\n            (firstMid\
    \ + secondMid).toFloat / 2\n        } else {\n            l(len / 2).toFloat\n\
    \        }", "        val n = l.length\n        val (lower, upper) = l.sortWith(_<_).splitAt(n\
    \ / 2)\n        if (n % 2 == 0) (lower.last + upper.head) / 2.0f else upper.head",
  "        val n = l.length\n        if (n % 2 == 0) ((l(n / 2 - 1) + l(n / 2)) /\
    \ 2.0f)\n        else l(n / 2)", "        val n = l.length\n        val sorted\
    \ = l.sorted\n        if (n % 2 == 0) {\n            ((sorted(n / 2 - 1) + sorted(n\
    \ / 2)) / 2.0f)\n        } else {\n            sorted(n / 2)\n        }", "  \
    \      var sortedList = l.sorted\n        var len = sortedList.length\n      \
    \  if (len % 2 == 0) (sortedList(len / 2) + sortedList(len / 2 - 1)).toFloat /\
    \ 2\n        else sortedList(len / 2).toFloat", "        var s = 0l\n        l.foreach((x\
    \ : Long) => s += x)\n        (s / l.length.toFloat)", "        var l2 = l.sortWith(_\
    \ < _)\n        var n = l2.length\n        var mid = (n - 1) / 2\n        var\
    \ median = 0f\n        if (n % 2 == 0) {\n            median = (l2(mid) + l2(mid\
    \ + 1)) / 2.0f\n        } else {\n            median = l2(mid)\n        }\n  \
    \      return median", "        val n = l.length\n        val odd = n % 2 != 0\n\
    \        if (odd) {\n            (l(n / 2)).toFloat\n        } else {\n      \
    \      (l(n / 2 - 1) + l(n / 2)).toFloat / 2\n        }", '        l.sortWith((x,
    y) => x < y).toArray[Long](l.length / 2)', "        val sortedList = l.sorted\n\
    \        if (sortedList.length % 2 == 0) (sortedList(sortedList.length / 2) +\
    \ sortedList(sortedList.length / 2 - 1)).toFloat / 2\n        else sortedList(sortedList.length\
    \ / 2).toFloat", "        def merge(l1 : List[Long], l2 : List[Long]) : List[Long]\
    \ = {\n            var n1 = l1\n            var n2 = l2\n            var n3 =\
    \ List[Long]()\n            while (n1 != Nil && n2 != Nil) {\n               \
    \ if (n1.head < n2.head) {\n                    n3 = n3 :+ n1.head\n         \
    \           n1 = n1.tail\n                } else {\n                    n3 = n3\
    \ :+ n2.head\n                    n2 = n2.tail\n                }\n          \
    \  }\n            if (n1 != Nil) n3 = n3 ::: n1\n            if (n2 != Nil) n3\
    \ = n3 ::: n2\n            n3\n        }\n        def sort(l : List[Long]) : List[Long]\
    \ = {\n            if (l.size == 1) return l\n            else {\n           \
    \     var n = l.size / 2\n                var l1 = l.take(n)\n               \
    \ var l2 = l.drop(n)\n                return merge(sort(l1), sort(l2))\n     \
    \       }\n        }\n        def halfindex(l : List[Long]) : Int = {\n      \
    \      var i = l.size / 2\n            if (l.size % 2 == 0) i = i - 1\n      \
    \      return i\n        }\n        val sl = sort(l)\n        if (sl.size % 2\
    \ == 0) {\n            val i = halfindex(sl)\n            val v1 = sl(i)\n   \
    \         val v2 = sl(i + 1)\n            return (v1 + v2).toFloat / 2\n     \
    \   } else {\n            val i = halfindex(sl)\n            return sl(i).toFloat\n\
    \        }", "        val s = l.sorted\n        val n = s.length\n        if (n\
    \ % 2 == 0) (s(n / 2 - 1) + s(n / 2)) / 2.0f else s(n / 2)", "        val len\
    \ = l.length\n        if(len % 2 == 0) (l(len / 2) + l(len / 2 - 1)).toFloat /\
    \ 2\n        else l(len / 2).toFloat", '        l.sorted.apply(l.length / 2) +
    (if (l.length % 2 == 0) l.sorted.apply(l.length / 2 - 1) else 0) / 2.0f', "  \
    \      val s = l.sorted\n        if (s.length % 2 == 0) ((s(s.length / 2) + s(s.length\
    \ / 2 - 1)) / 2.0f)\n        else s(s.length / 2)", "        val size = l.size\n\
    \        val sorted = l.sorted\n        val median = if (size % 2 == 0) (sorted(size\
    \ / 2) + sorted(size / 2 - 1)) / 2.0f else sorted(size / 2)\n        median",
  "        val n = l.length\n        var m = n / 2\n        val sorted = l.sorted\n\
    \        if (n % 2 == 0) (sorted(m - 1) + sorted(m)).toFloat / 2 else sorted(m).toFloat",
  "        // Median is the middle element of sorted list.\n        val sortedList\
    \ = l.sorted\n        var median : Float = -1.0f\n        if (sortedList.length\
    \ % 2 == 0) {\n            // Even list\n            median = ((sortedList(sortedList.length\
    \ / 2).toFloat) + (sortedList(sortedList.length / 2 - 1).toFloat)) / 2.0f\n  \
    \      } else {\n            // Odd list\n            median = sortedList(sortedList.length\
    \ / 2).toFloat\n        }\n        return median", "        var sorted = l.sorted\n\
    \        if (sorted.length % 2 == 0) {\n            var i = sorted.length / 2\
    \ - 1\n            return (sorted(i) + sorted(i + 1)) / 2.0f\n        } else {\n\
    \            return sorted(sorted.length / 2)\n        }", "        val n = l.length\n\
    \        val sl = l.sorted\n        if (n % 2 == 0) (sl(n / 2) + sl(n / 2 - 1))\
    \ / 2.0f\n        else sl(n / 2)", "        val size = l.size\n        val half\
    \ = size / 2\n        val sorted = l.sorted\n        val a = if (size % 2 == 0)\n\
    \            (sorted(half) + sorted(half - 1)) / 2f\n        else\n          \
    \  sorted(half)\n        a", "        val n = l.length\n        if (n == 0) {\n\
    \            return 0f\n        }\n        else if (n % 2 == 1) {\n          \
    \  return l(n / 2).toFloat\n        }\n        else {\n            return (l(n\
    \ / 2 - 1) + l(n / 2)).toFloat / 2f\n        }", "        var list = l.sortWith(_\
    \ < _)\n        if (list.length % 2 == 0) {\n            return ((list(list.length\
    \ / 2 - 1) + list(list.length / 2)).toFloat / 2.0f)\n        } else {\n      \
    \      return list(list.length / 2).toFloat\n        }", "        if (l.size %\
    \ 2 == 0) (l(l.size / 2 - 1) + l(l.size / 2)) / 2.0f\n        else l(l.size /\
    \ 2).toFloat", "        if (l.length % 2 == 0) (l(l.length / 2 - 1) + l(l.length\
    \ / 2)) / 2.0f\n        else l(l.length / 2).toFloat", "        val n = l.length;\n\
    \        val middle = n / 2;\n        if (n % 2 == 0) {\n            (l(middle\
    \ - 1) + l(middle)).toFloat / 2\n        } else {\n            l(middle).toFloat\n\
    \        }", "        var a = l.sortWith(_ < _).toArray\n        if (a.length\
    \ % 2 == 0) {\n            (a(a.length / 2) + a(a.length / 2 - 1)).toFloat / 2\n\
    \        } else {\n            a(a.length / 2).toFloat\n        }", "        def\
    \ quickSort(l : List[Long]) : List[Long] = {\n            l match {\n        \
    \        case Nil => l\n                case x :: Nil => l\n                case\
    \ _ =>\n                    val pivot = l(0)\n                    quickSort(l.filter(_\
    \ < pivot)) ::: List(pivot) ::: quickSort(l.filter(_ > pivot))\n            }\n\
    \        }\n        val sorted = quickSort(l)\n        val len = sorted.length\n\
    \        if (len % 2 == 0) (sorted(len / 2 - 1) + sorted(len / 2)).toFloat / 2\n\
    \        else sorted(len / 2).toFloat", "      val s = l.sortWith((a, b) => a\
    \ < b)\n      val m = s.length / 2\n      s.length % 2 match {\n        case 0\
    \ => (s(m - 1) + s(m)).toFloat / 2\n        case _ => s(m).toFloat\n      }",
  "        if (l.length % 2 == 0) (l(l.length / 2 - 1) + l(l.length / 2)) / 2.0f\n\
    \        else l(l.length / 2).toFloat", "        var result : Float = 0f\n   \
    \     var temp : List[Long] = l.sortWith(_ < _)\n        var s : Long = 0l\n \
    \       if (temp.length % 2 == 0) {\n            var left : Long = temp((temp.length\
    \ / 2) - 1)\n            var right : Long = temp(temp.length / 2)\n          \
    \  s = left + right\n            result = s.toFloat / 2\n        } else {\n  \
    \          result = temp(temp.length / 2).toFloat\n        }\n        return result",
  "        val n = l.length\n        val m = (n + 1) / 2\n        if (n % 2 == 1)\
    \ l(m - 1) else (l(m - 1) + l(m)) / 2f", "        if (l.length == 0) return 0\n\
    \        l.sortWith(_ < _).apply(l.length / 2) match {\n            case e if\
    \ l.length % 2 == 1 => e.toFloat\n            case e => (e + l.sortWith(_ < _).apply(l.length\
    \ / 2 - 1)).toFloat / 2\n        }", '        l.sortWith((a, b) => a < b).apply(l.length
    / 2)', "        var median = 0.0f\n        if(l.length % 2 == 0) {\n         \
    \   var index = l.length / 2\n            median = ((l(index - 1) + l(index))\
    \ / 2.0f)\n        } else {\n            var index = l.length / 2\n          \
    \  median = l(index).toFloat\n        }\n        return median", "        val\
    \ ll = l.sortWith((a, b) => a < b)\n        if (ll.length % 2 == 0) {\n      \
    \      ((ll(ll.length / 2) + ll(ll.length / 2 - 1)).toFloat / 2.0f)\n        }\
    \ else ll(ll.length / 2).toFloat", "        // Sorting the list\n        val sortedL\
    \ = l.sorted\n        // Getting the median\n        val size = sortedL.size\n\
    \        if (size % 2 == 0) {\n            (sortedL(size / 2 - 1) + sortedL(size\
    \ / 2)) / 2.0f\n        } else {\n            sortedL(size / 2)\n        }", " \
    \       var sortedList = l.sorted\n        if (sortedList.length % 2 == 0) {\n\
    \            var median = sortedList.length / 2\n            return ((sortedList(median)\
    \ + sortedList(median - 1)) / 2f)\n        }\n        else return sortedList(sortedList.length\
    \ / 2)", "        val s = l.sorted\n        val n = s.length\n        if (n %\
    \ 2 == 0) {\n            val h = n / 2\n            ((s(h) + s(h-1)) / 2.0f)\n\
    \        } else {\n            s(n / 2)\n        }", "        val sorted = l.sorted\n\
    \        if (sorted.length % 2 == 0) {\n            val left = sorted(sorted.length\
    \ / 2 - 1)\n            val right = sorted(sorted.length / 2)\n            ((left\
    \ + right) / 2).toFloat\n        } else {\n            sorted(sorted.length /\
    \ 2).toFloat\n        }", "        var s = l.sorted\n        if (s.length % 2\
    \ == 0) (s(s.length / 2) + s(s.length / 2 - 1)).toFloat / 2 else s(s.length /\
    \ 2).toFloat", "        val sorted = l.sorted\n        val n = sorted.length\n\
    \        if (n % 2 == 0) (sorted(n / 2 - 1) + sorted(n / 2)) / 2.0f\n        else\
    \ sorted(n / 2)", "        val sortedList = l.sorted\n        val mid : Int =\
    \ sortedList.length / 2\n        if (sortedList.length % 2 == 0)\n           \
    \ (sortedList(mid) + sortedList(mid - 1)).toFloat / 2\n        else\n        \
    \    sortedList(mid).toFloat", "        if (l.length % 2 == 0)\n            (l(l.length\
    \ / 2) + l(l.length / 2 - 1)).toFloat / 2\n        else\n            l(l.length\
    \ / 2).toFloat", "        val n = l.length\n        val median = {\n         \
    \   if (n % 2 == 0)\n                (l(n / 2 - 1) + l(n / 2)) / 2.0f\n      \
    \      else\n                l(n / 2)\n        }\n        median", "        if\
    \ (l.length == 0) return 0\n        var s : List[Long] = l.sortWith((a, b) =>\
    \ (a < b))\n        return (s(s.length / 2 - 1) + s(s.length / 2)) / 2.0f", " \
    \       l.sorted match {\n            case ls if ls.size % 2 == 0 => (ls(ls.size\
    \ / 2 - 1) + ls(ls.size / 2)).toFloat / 2\n            case ls => ls(ls.size /\
    \ 2).toFloat\n        }", "        val sorted = l.sorted\n        val len = sorted.length\n\
    \        val half = len / 2\n        val median = if (len % 2 == 0) (sorted(half\
    \ - 1) + sorted(half)) / 2.0f else sorted(half)\n        median", "        val\
    \ sorted = l.sorted\n        if (sorted.length % 2 == 0) {\n            val mid\
    \ = sorted.length / 2\n            (sorted(mid) + sorted(mid - 1)) / 2.0f\n  \
    \      } else {\n            sorted(sorted.length / 2)\n        }", "        val\
    \ sorted = l.sorted\n        val size = sorted.size\n        if (size % 2 == 0)\
    \ {\n            return (sorted(size / 2 - 1) + sorted(size / 2)).toFloat / 2\n\
    \        } else {\n            return sorted(size / 2).toFloat\n        }", " \
    \       val s = l.sorted\n        val (l1, l2) = s.splitAt(s.length / 2)\n   \
    \     if (s.length % 2 == 0) {\n            (l1.last + l2.head).toFloat / 2\n\
    \        } else {\n            l2.head.toFloat\n        }", "        val sortedList\
    \ = l.sorted\n        if (sortedList.length % 2 == 0)\n            (sortedList(sortedList.length\
    \ / 2) + sortedList(sortedList.length / 2 - 1)).toFloat / 2\n        else\n  \
    \          sortedList(sortedList.length / 2).toFloat", "        var sortedList\
    \ = l.sorted\n        if(sortedList.length == 0)\n            0f\n        else\
    \ if(sortedList.length % 2 == 0)\n            (sortedList(sortedList.length /\
    \ 2 - 1) + sortedList(sortedList.length / 2)).toFloat / 2\n        else\n    \
    \        sortedList(sortedList.length / 2).toFloat", "        val sl = l.sorted\n\
    \        (sl(sl.length / 2) + sl((sl.length - 1) / 2)) / 2.0f", "        val sorted\
    \ = l.sorted\n        val mid = (sorted.length - 1) / 2\n        if (sorted.length\
    \ % 2 == 0) (sorted(mid) + sorted(mid + 1)) / 2.0f else sorted(mid)", "      \
    \  val s = l.sortWith(_<_)\n        val n = s.length\n        if (n % 2 == 0)\
    \ {\n            val m1 = s(n / 2 - 1)\n            val m2 = s(n / 2)\n      \
    \      (m1 + m2).toFloat / 2\n        } else {\n            s(n / 2).toFloat\n\
    \        }", "        val s = l.sorted\n        val length = s.length\n      \
    \  if (length % 2 == 0) {\n            val x = length / 2\n            (s(x -\
    \ 1) + s(x)).toFloat / 2.0f\n        } else {\n            s(length / 2).toFloat\n\
    \        }", "        val n = l.length\n        if (n == 0) return 0.0f\n    \
    \    if (n % 2 == 1) return l(n / 2).toFloat\n        val p = l(n / 2 - 1)\n \
    \       val q = l(n / 2)\n        (p + q).toFloat / 2", "        if (l.length\
    \ % 2 == 0) {\n            val m1 = l.sortWith(_<_)(l.length / 2 - 1)\n      \
    \      val m2 = l.sortWith(_<_)(l.length / 2)\n            (m1 + m2).toFloat /\
    \ 2.0f\n        } else {\n            l.sortWith(_<_)(l.length / 2).toFloat\n\
    \        }", "        val l_ = l.sorted\n        val len = l_.length\n       \
    \ if (len % 2 == 0)\n            (l_(len / 2) + l_(len / 2 - 1)).toFloat / 2\n\
    \        else\n            l_(len / 2).toFloat", "        val sorted = l.sorted\n\
    \        if (sorted.length % 2 == 0) {\n            val x = sorted(sorted.length\
    \ / 2)\n            val y = sorted(sorted.length / 2 - 1)\n            (x + y).toFloat\
    \ / 2\n        } else {\n            sorted(sorted.length / 2).toFloat\n     \
    \   }", "        val length = l.length\n        val (l1, l2) = l.sorted.splitAt(length\
    \ / 2)\n        length % 2 match {\n            case 0 => (l1.last + l2.head)\
    \ / 2f\n            case 1 => l2.head\n        }", "        val l1 = l.sortWith((x\
    \ : Long, y : Long) => x < y)\n        val s = l1.size\n        val m = s / 2\n\
    \        s % 2 match {\n            case 0 => (l1(m - 1) + l1(m)) / 2.0f\n   \
    \         case 1 => l1(m)\n        }", "        val sorted = l.sorted\n      \
    \  if (sorted.length % 2 == 0) {\n            ((sorted(sorted.length / 2) + sorted(sorted.length\
    \ / 2 - 1)).toFloat / 2.0f)\n        } else {\n            sorted(sorted.length\
    \ / 2).toFloat\n        }", "        val sorted = l.sorted\n        val size =\
    \ sorted.size\n        (sorted(size / 2) + sorted((size - 1) / 2)) / 2.0f", " \
    \       val l2 = l.sorted\n        val midIndex = (l2.length - 1) / 2\n      \
    \  if (l2.length % 2 == 0) {\n            (l2(midIndex) + l2(midIndex + 1)).toFloat\
    \ / 2\n        } else {\n            l2(midIndex).toFloat\n        }", "     \
    \   // Return mid of the list if length is odd, otherwise return mean of two mid\
    \ points.\n        def getMid(l : List[Long]) : Float = {\n            l.sortWith(_\
    \ < _)\n            if (l.length % 2 == 1) l(l.length / 2).toFloat\n         \
    \   else ((l(l.length / 2) + l(l.length / 2 - 1)).toFloat / 2)\n        }\n  \
    \      // TODO: assert l is not empty\n        if (l.length == 1) return l(0).toFloat\n\
    \        else return getMid(l)", "        // @TODO : implement\n        return\
    \ (0.0f)", "        val sorted = l.sorted\n        val size = sorted.size\n  \
    \      if (size % 2 == 0) {\n            val m = size / 2\n            (sorted(m\
    \ - 1) + sorted(m)).toFloat / 2\n        } else {\n            sorted(size / 2).toFloat\n\
    \        }", "        if (l.length % 2 == 0) {\n            ((l(l.length / 2 -\
    \ 1) + l(l.length / 2)) / 2.0f)\n        } else {\n            l(l.length / 2)\n\
    \        }", "        val sorted = l.sorted\n        val n = sorted.length\n \
    \       if (n % 2 == 0) {\n            return (sorted(n / 2 - 1) + sorted(n /\
    \ 2)).toFloat / 2.0f\n        } else {\n            return sorted(n / 2).toFloat\n\
    \        }", "        val length = l.length\n        if (length == 0)\n      \
    \      return 0\n        val index = if (length % 2 == 0) length / 2 - 1 else\
    \ length / 2\n        val (left, right) = l.sortWith(_<_).splitAt(index + 1)\n\
    \        if (length % 2 == 0) (left.last + right.head) / 2.0f else right.head",
  "        var sortedList = l.sorted\n        val midIndex = (sortedList.length -\
    \ 1) / 2\n        if (sortedList.length % 2 == 0) {\n            ((sortedList(midIndex).toFloat\
    \ + sortedList(midIndex + 1).toFloat) / 2)\n        } else {\n            sortedList(midIndex).toFloat\n\
    \        }", "        var sorted = l.sorted\n        if (sorted.length % 2 ==\
    \ 0) {\n            ((sorted(sorted.length / 2) + sorted(sorted.length / 2 - 1)).toFloat\
    \ / 2)\n        } else {\n            sorted(sorted.length / 2).toFloat\n    \
    \    }", "        var s = l.sort((a : Long, b : Long) => a < b)\n        var n\
    \ = s.length\n        if (n % 2 == 0) (s(n / 2) + s(n / 2 - 1)) / 2f\n       \
    \ else s(n / 2)", "        if (l.size == 0) return 0f\n        if (l.size == 1)\
    \ return l(0)\n        var ll = l.sorted\n        if (ll.size % 2 == 0) (ll(ll.size\
    \ / 2) + ll(ll.size / 2 - 1)) / 2f\n        else ll(ll.size / 2)", "        val\
    \ l2 = l.sorted\n        val count = l2.length\n        if (count % 2 == 0) {\n\
    \            val pos = count / 2\n            (l2(pos - 1) + l2(pos)) / 2.0f\n\
    \        } else {\n            l2(count / 2)\n        }", '        l.sorted.drop(l.length
    / 2).head.toFloat', "        val size = l.size\n        if (size == 0) return\
    \ 0.0f\n        val sorted = l.sorted\n        if (size % 2 == 0) {\n        \
    \    (sorted(size / 2 - 1) + sorted(size / 2)).toFloat / 2\n        } else {\n\
    \            sorted(size / 2).toFloat\n        }", "        val count = l.size\n\
    \        val sorted = l.sorted\n        if (count % 2 == 0) (sorted(count / 2\
    \ - 1) + sorted(count / 2)) / 2.0f\n        else sorted(count / 2)", "       \
    \ val a = l.sortWith(_ < _)\n        if (a.length % 2 == 0) {\n            ((a(a.length\
    \ / 2) + a(a.length / 2 - 1)).toFloat / 2f)\n        } else {\n            a(a.length\
    \ / 2).toFloat\n        }", "        val n = l.length\n        val m = n / 2\n\
    \        val o = n % 2\n        val p = m + o\n        val s = l.sorted\n    \
    \    if (o == 0) {\n            return ((s(m) + s(p)) / 2.0f)\n        } else\
    \ {\n            return s(p)\n        }", "        val sorted = l.sorted\n   \
    \     val mid = sorted.length / 2\n        if (sorted.length % 2 == 0) (sorted(mid\
    \ - 1) + sorted(mid)) / 2.0f else sorted(mid)", "        val sorted = l.sorted\n\
    \        if (sorted.length % 2 == 0) {\n            val half = (sorted.length\
    \ / 2) - 1\n            val a = sorted(half)\n            val b = sorted(half\
    \ + 1)\n            (a + b) / 2f\n        } else {\n            val half = sorted.length\
    \ / 2\n            sorted(half)\n        }", "        if (l.size % 2 == 0) {\n\
    \            val m = l.size / 2\n            (l(m) + l(m - 1)).toFloat / 2\n \
    \       } else {\n            l(l.size / 2).toFloat\n        }", "        val\
    \ s = l.sorted\n        val n = s.length\n        if (n % 2 == 0) ((s(n / 2) +\
    \ s(n / 2 - 1)).toFloat / 2) else s(n / 2).toFloat", "        if (l.length % 2\
    \ == 0) (l(l.length / 2) + l(l.length / 2 - 1)).toFloat / 2\n        else l(l.length\
    \ / 2).toFloat", "        // Runtime: O(N)\n        if (l.length == 0) return\
    \ 0f\n        val s = l.sorted\n        if (s.length % 2 == 0) return (s(s.length\
    \ / 2) + s(s.length / 2 - 1)).toFloat / 2\n        else return s(s.length / 2).toFloat",
  "        // >>> sorted(List(8, 2, 5, 2, 6, 1, 5, 2, 2, 2, 2, 8, 6, 9, 4))\n    \
    \    // List(1, 2, 2, 2, 2, 2, 2, 4, 5, 5, 6, 6, 8, 8, 9)\n        val s = l.sorted\n\
    \        s.length match {\n            case 0 => 0\n            case 1 => s(0)\n\
    \            case n => n % 2 match {\n                case 0 => ((s(n / 2 - 1)\
    \ + s(n / 2)) / 2).toFloat\n                case 1 => s(n / 2).toFloat\n     \
    \       }\n        }", "        if (l.length % 2 == 0) {\n            var a =\
    \ (l.length / 2) - 1\n            var b = l.length / 2\n            ((l(a) + l(b))\
    \ / 2).toFloat\n        } else {\n            var a = floor(l.length / 2).toInt\n\
    \            l(a).toFloat\n        }", "        if (l.size == 0) {\n         \
    \   return 0f\n        }\n        else if (l.size % 2 == 1) {\n            return\
    \ l.sorted.apply(l.size / 2).toFloat\n        }\n        else {\n            return\
    \ (l.sorted.apply(l.size / 2) + l.sorted.apply(l.size / 2 - 1)).toFloat / 2\n\
    \        }", "        if (l.length % 2 == 0) ((l(l.length / 2) + l(l.length /\
    \ 2 - 1)).toFloat / 2)\n        else (l(l.length / 2).toFloat)", "        if (l.length\
    \ % 2 == 0) {\n            val m1 = l.sorted.apply(l.length / 2 - 1)\n       \
    \     val m2 = l.sorted.apply(l.length / 2)\n            return (m1 + m2).toFloat\
    \ / 2\n        } else {\n            return l.sorted.apply(l.length / 2).toFloat\n\
    \        }", "        val s = l.sortWith((a, b) => a < b)\n        val n = s.length\n\
    \        return (s(n / 2) + s(n / 2 - 1)) / 2.0f", "        if (l.size % 2 ==\
    \ 0) ((l.sortWith(_ < _))(l.size / 2 - 1) + (l.sortWith(_ < _))(l.size / 2)) /\
    \ 2f\n        else (l.sortWith(_ < _))(l.size / 2)", "        val n = l.length\n\
    \        if (n % 2 == 0) {\n            val a = l(n / 2 - 1)\n            val\
    \ b = l(n / 2)\n            ((a + b) / 2.0f)\n        } else {\n            l(n\
    \ / 2)\n        }", "        if (l.length == 0) 0\n        else if (l.length %\
    \ 2 == 1) {\n            var sorted = l.sortWith(_ < _)\n            sorted(sorted.length\
    \ / 2).toFloat\n        }\n        else {\n            var sorted = l.sortWith(_\
    \ < _)\n            (sorted(sorted.length / 2) + sorted(sorted.length / 2 - 1)).toFloat\
    \ / 2\n        }", "        val sorted = l.sorted\n        val n = sorted.length\n\
    \        if (n % 2 == 0) {\n            (sorted(n / 2) + sorted(n / 2 - 1)).toFloat\
    \ / 2\n        } else {\n            sorted(n / 2).toFloat\n        }", "    \
    \    var l2 = l.sortWith(_ < _)\n        if(l2.length % 2 == 0) (l2(l2.length\
    \ / 2) + l2(l2.length / 2 - 1)) / 2f\n        else l2(l2.length / 2)", "     \
    \ val m = l.sortWith((a, b) => a < b)\n      val len = m.length\n      if (len\
    \ % 2 == 0) {\n        ((m(len / 2 - 1) + m(len / 2)) / 2.0f)\n      } else {\n\
    \        m(len / 2)\n      }", "        var sortedList = l.sorted\n        var\
    \ n = sortedList.length\n        if (n % 2 == 0) {\n            return ((sortedList(n\
    \ / 2 - 1) + sortedList(n / 2)) / 2.0f)\n        } else {\n            return\
    \ sortedList(n / 2)\n        }", '        l.sortWith((a, b) => a < b).drop(l.length
    / 2).head.toFloat', "        val lm = l.sortWith(_ < _).toArray\n        val ln\
    \ = lm.length\n        val m = ln / 2\n        val r = ln % 2\n        if (r ==\
    \ 0) (lm(m - 1) + lm(m)) / 2f else lm(m)", "        val sorted = l.sorted\n  \
    \      val len = sorted.length\n        val (med, next) = (sorted(len / 2), sorted(len\
    \ / 2 + 1))\n        if (len % 2 == 0) ((med + next) / 2f) else med", "      \
    \  // Build a heap\n        val maxHeap = new collection.mutable.PriorityQueue[Long]()(Ordering.by(-_))\n\
    \        val minHeap = new collection.mutable.PriorityQueue[Long]()(Ordering.by(_))\n\
    \        for (n <- l) {\n            // Insert in the heap\n            if (maxHeap.size\
    \ == 0 || maxHeap.head > n) {\n                maxHeap.enqueue(n)\n          \
    \  } else {\n                minHeap.enqueue(n)\n            }\n            //\
    \ Balance the heaps\n            if (maxHeap.size - minHeap.size > 1) {\n    \
    \            minHeap.enqueue(maxHeap.dequeue)\n            } else if (minHeap.size\
    \ - maxHeap.size > 1) {\n                maxHeap.enqueue(minHeap.dequeue)\n  \
    \          }\n        }\n        // Return the median\n        val size = maxHeap.size\
    \ + minHeap.size\n        if (size % 2 == 0) {\n            (maxHeap.head + minHeap.head)\
    \ / 2.0f\n        } else if (maxHeap.size > minHeap.size) {\n            maxHeap.head\n\
    \        } else {\n            minHeap.head\n        }", "        val l2 = l.sort(_\
    \ < _)\n        if (l2.length % 2 == 0) ((l2(l2.length / 2).toFloat + l2(l2.length\
    \ / 2 - 1).toFloat) / 2.0f)\n        else l2(l2.length / 2).toFloat", "      \
    \  val lsorted = l.sorted\n        if (lsorted.length % 2 == 0)\n            (lsorted(lsorted.length\
    \ / 2) + lsorted(lsorted.length / 2 - 1)).toFloat / 2\n        else\n        \
    \    lsorted(lsorted.length / 2).toFloat", "        val l2 = l.sorted\n      \
    \  if (l2.length % 2 == 0) {\n            (l2(l2.length / 2) + l2(l2.length /\
    \ 2 - 1)).toFloat / 2.0f\n        } else {\n            l2(l2.length / 2).toFloat\n\
    \        }", "        val z = l.sorted\n        if (z.length % 2 == 0) {\n   \
    \         val t = z.slice(z.length / 2 - 1, z.length / 2 + 1)\n            (t(0)\
    \ + t(1)) / 2f\n        } else {\n            z(z.length / 2)\n        }", " \
    \       def insertionSort(l: List[Long]) : List[Long] = {\n            if (l.isEmpty)\
    \ l\n            else insert(l.head, insertionSort(l.tail))\n        }\n     \
    \   def insert(x: Long, l: List[Long]) : List[Long] = {\n            if (l.isEmpty\
    \ || x <= l.head) x :: l\n            else l.head :: insert(x, l.tail)\n     \
    \   }\n        def mid(l: List[Long]) : Float = {\n            if (l.length %\
    \ 2 == 0) {\n                val (a, b) = (l(l.length / 2 - 1), l(l.length / 2))\n\
    \                ((a + b).toFloat / 2)\n            }\n            else l(l.length\
    \ / 2).toFloat\n        }\n        mid(insertionSort(l))", "        var m = List[Long]()\n\
    \        m = m ::: l\n        var n = l.length\n        var r = true\n       \
    \ while (r) {\n            r = false\n            for (i <- 0 until n - 1) {\n\
    \                if (m(i) > m(i + 1)) {\n                    var t = m(i)\n  \
    \                  m(i) = m(i + 1)\n                    m(i + 1) = t\n       \
    \             r = true\n                }\n            }\n        }\n        val\
    \ m2 = n / 2\n        if (n % 2 == 0) {\n            (m(m2 - 1) + m(m2)).toFloat\
    \ / 2\n        } else {\n            m(m2).toFloat\n        }", "        l.sorted.toList\
    \ match {\n            case l if (l.length % 2 == 0) => ((l(l.length / 2 - 1)\
    \ + l(l.length / 2)) / 2.0f)\n            case l => l(l.length / 2)\n        }",
  "        val t = l.sortWith(_ < _)\n        val n = t.length\n        if (n % 2\
    \ == 0) (t(n / 2) + t(n / 2 - 1)) / 2.0f else t(n / 2)", "        def median2(s\
    \ : List[Long]) : Float = {\n            def median3(m : List[Long]) : Float =\
    \ {\n                def median4(n : List[Long]) : Float = {\n               \
    \     val sum = s.sum\n                    val count = s.length\n            \
    \        val sorted = s.sorted\n                    // System.out.println(sorted)\n\
    \                    if (count % 2 == 0) {\n                        val m1 = sorted(count\
    \ / 2 - 1)\n                        val m2 = sorted(count / 2)\n             \
    \           val med = (m1 + m2) / 2.0f\n                        med\n        \
    \            } else {\n                        val med = sorted(count / 2)\n \
    \                       med\n                    }\n                }\n      \
    \          n match {\n                    case Nil => 0.0f\n                 \
    \   case hd :: tl => median4(tl)\n                }\n            }\n         \
    \   m match {\n                case Nil => 0.0f\n                case hd :: tl\
    \ => median3(tl)\n            }\n        }\n        l match {\n            case\
    \ Nil => 0.0f\n            case hd :: tl => median2(tl)\n        }", "       \
    \ var v = l.sorted\n        if (v.length % 2 == 0) (v(v.length / 2) + v(v.length\
    \ / 2 - 1)) / 2.0f\n        else v(v.length / 2)", "        val mid = l.length\
    \ / 2\n        if (l.length % 2 == 0) (l(mid - 1) + l(mid)) / 2.0f else l(mid)",
  "        val sorted = l.sorted\n        val length = sorted.length\n        if (length\
    \ % 2 == 0) {\n            ((sorted(length / 2) + sorted(length / 2 - 1)).toFloat\
    \ / 2)\n        } else {\n            sorted(length / 2).toFloat\n        }",
  "        if (l.length == 0) return 0f\n        val l2 = l.sorted\n        if (l2.length\
    \ % 2 == 0) (l2(l2.length / 2 - 1) + l2(l2.length / 2)) / 2f\n        else l2(l2.length\
    \ / 2)", "        // Sort the list\n        val sorted_l = l.sorted\n        //\
    \ Get the length of sorted_l\n        val n = sorted_l.length\n        // If length\
    \ is odd, we get the median by accessing the middle element\n        if (n % 2\
    \ == 1)\n            sorted_l(n / 2).toFloat\n        // Otherwise, we average\
    \ the middle two elements\n        else\n            (sorted_l(n / 2 - 1) + sorted_l(n\
    \ / 2)).toFloat / 2", "        val ordered = l.sorted\n        val len = ordered.length\n\
    \        val middle = len / 2\n        val even = len % 2 == 0\n        if (even)\
    \ ((ordered(middle - 1) + ordered(middle)).toFloat / 2) else ordered(middle).toFloat",
  "        var rl = l.sorted\n        var mid = (rl.length - 1) / 2\n        var result\
    \ = 0.0f\n        if(rl.length % 2 == 0) {\n            result = (rl(mid) + rl(mid\
    \ + 1)) / 2.0f\n        } else {\n            result = rl(mid).toFloat\n     \
    \   }\n        return result", "        val l1 = l.sorted\n        val (a, b)\
    \ = l1.splitAt(l1.length / 2)\n        if (l1.length % 2 == 0) (a.last + b.head)\
    \ / 2.0f else b.head", "        def quickSort(l : List[Long]) : List[Long] = {\n\
    \            if (l.length == 0) {\n                List[Long]()\n            }\
    \ else {\n                val (left, right) = l.tail.partition(x => x < l.head)\n\
    \                quickSort(left) ::: (l.head :: quickSort(right))\n          \
    \  }\n        }\n        if (l.length % 2 == 0) {\n            (l(l.length / 2\
    \ - 1) + l(l.length / 2)).toFloat / 2\n        } else {\n            l(l.length\
    \ / 2).toFloat\n        }", "        val sorted = l.sorted\n        val len =\
    \ sorted.length\n        if (len % 2 == 0) {\n            val a = sorted(len /\
    \ 2 - 1)\n            val b = sorted(len / 2)\n            (a + b).toFloat / 2.0f\n\
    \        } else {\n            sorted(len / 2).toFloat\n        }", "        var\
    \ sorted = l.sorted\n        if (sorted.length % 2 == 0) {\n            var m1\
    \ = sorted((sorted.length / 2) - 1)\n            var m2 = sorted(sorted.length\
    \ / 2)\n            ((m1 + m2) / 2.0f)\n        } else {\n            sorted(sorted.length\
    \ / 2)\n        }", "        val sorted = l.sorted\n        if (sorted.length\
    \ % 2 == 0) {\n            ((sorted(sorted.length / 2) + sorted(sorted.length\
    \ / 2 - 1)).toFloat / 2)\n        } else {\n            sorted(sorted.length /\
    \ 2).toFloat\n        }", "        if (l.length == 0) return 0f\n        if (l.length\
    \ == 1) return l(0)\n        val l2 = l.sorted\n        if (l2.length % 2 == 0)\
    \ {\n            val l3 = l2.slice(l2.length / 2 - 1, l2.length / 2 + 1)\n   \
    \         (l3(0) + l3(1)) / 2.0f\n        } else {\n            l2(l2.length /\
    \ 2)\n        }", "        var list : List[Long] = l.sort((x, y) => x < y)\n \
    \       val n = list.length\n        if (n % 2 == 0) (list(n / 2 - 1) + list(n\
    \ / 2)) / 2.0f\n        else list(n / 2).toFloat", "        val (lower, upper)\
    \ = l.sortWith(_<_).splitAt(l.size / 2)\n        if (l.size % 2 == 0) (lower.last\
    \ + upper.head) / 2.0f else upper.head", "        val n = l.length\n        if\
    \ (n % 2 == 0) {\n            (l(n / 2 - 1) + l(n / 2)) / 2.0f\n        } else\
    \ {\n            l(n / 2)\n        }", "        val (x, y) = l.sortWith(_ < _).splitAt(l.length\
    \ / 2)\n        if (l.length % 2 == 0) (x.last + y.head) / 2.0f else y.head",
  "        val n = l.length\n        val p = l.sorted\n        val q = n % 2\n   \
    \     if (q == 0) {\n            val m = n / 2\n            (p(m - 1) + p(m))\
    \ / 2.0f\n        } else {\n            p(n / 2)\n        }", "        if (l.length\
    \ == 0) {\n            return 0f\n        }\n        val sorted = l.sorted\n \
    \       val n = sorted.length\n        if (n % 2 == 0) {\n            return (sorted(n\
    \ / 2) + sorted(n / 2 - 1)).toFloat / 2\n        } else {\n            return\
    \ sorted(n / 2).toFloat\n        }", "        def sorted(l : List[Long]) : List[Long]\
    \ = {\n            if (l.length == 0) {\n                return List[Long]()\n\
    \            }\n            val min = l.min\n            val max = l.max\n   \
    \         val mid = (min + max) / 2\n            val l1 = sorted(l.filter((el)\
    \ => el < mid))\n            val l2 = sorted(l.filter((el) => el == mid))\n  \
    \          val l3 = sorted(l.filter((el) => el > mid))\n            return l1\
    \ ::: l2 ::: l3\n        }\n        val sortedList = sorted(l)\n        if (sortedList.length\
    \ % 2 == 0) {\n            return ((sortedList(sortedList.length / 2 - 1) + sortedList(sortedList.length\
    \ / 2)) / 2.0f)\n        } else {\n            return sortedList(sortedList.length\
    \ / 2)\n        }", "        val sortedList = l.sorted\n        if (sortedList.length\
    \ % 2 == 0) (sortedList(sortedList.length / 2) + sortedList(sortedList.length\
    \ / 2 - 1)).toFloat / 2\n        else sortedList(sortedList.length / 2).toFloat",
  "        val x = l.sorted\n        if (x.length % 2 == 0) (x(x.length / 2 - 1) +\
    \ x(x.length / 2)) / 2.0f\n        else x(x.length / 2)", "        // TODO\n \
    \       if (l.length == 0) {\n            return 0.0f\n        }\n        val\
    \ sorted = l.sorted\n        if (sorted.length % 2 == 0) {\n            val first\
    \ = sorted(sorted.length / 2 - 1)\n            val second = sorted(sorted.length\
    \ / 2)\n            ((first + second) / 2.0f)\n        } else {\n            sorted(sorted.length\
    \ / 2)\n        }", "        var n = l.size\n        if (n % 2 == 1)\n       \
    \     return l(n / 2).toFloat\n        var i = n / 2\n        return (l(i - 1)\
    \ + l(i)).toFloat / 2", "        def sort(l : List[Long]) : List[Long] = {\n \
    \           if (l.length == 0) {\n                return l\n            }\n  \
    \          if (l.length == 1) {\n                return l\n            }\n   \
    \         val pivot = l(0)\n            val less = l.filter(x => x < pivot)\n\
    \            val more = l.filter(x => x > pivot)\n            val equal = l.filter(x\
    \ => x == pivot)\n            sort(less) ::: equal ::: sort(more)\n        }\n\
    \        val sorted = sort(l)\n        if (sorted.length % 2 == 0) {\n       \
    \     return ((sorted(sorted.length / 2 - 1) + sorted(sorted.length / 2)) / 2.0f)\n\
    \        }\n        return sorted(sorted.length / 2)", "        val length = l.length\n\
    \        if (length == 0) return 0\n        val sl = l.sorted\n        if (length\
    \ % 2 == 0) {\n            (sl(length / 2) + sl(length / 2 - 1)).toFloat / 2\n\
    \        } else {\n            sl(length / 2).toFloat\n        }", "        l.sortWith(_\
    \ < _).map(_.toFloat) match {\n            case (left :: right :: rest) => (left\
    \ + right) / 2\n            case (single :: Nil) => single\n            case Nil\
    \ => 0\n        }", "        val m = l.length / 2\n        val ls = l.sorted\n\
    \        if (l.length % 2 == 0) (ls(m) + ls(m - 1)) / 2.0f else ls(m)", "    \
    \    val ll = l.sortWith((a, b) => a < b)\n        if (ll.length % 2 == 0) {\n\
    \            val index1 = (ll.length - 1) / 2\n            val index2 = ll.length\
    \ / 2\n            (ll(index1) + ll(index2)).toFloat / 2\n        } else {\n \
    \           val index = (ll.length - 1) / 2\n            ll(index).toFloat\n \
    \       }", "        val n = l.length\n        if (n == 0) return 0f\n       \
    \ val sorted = l.sorted\n        val m = n / 2\n        if (n % 2 == 1) return\
    \ sorted(m).toFloat\n        else return (sorted(m) + sorted(m - 1)).toFloat /\
    \ 2", "        val m = (l.length - 1) / 2;\n        val s = l.sorted\n       \
    \ if (l.length % 2 == 0) {\n            (s(m) + s(m + 1)).toFloat / 2\n      \
    \  } else {\n            s(m).toFloat\n        }", "        if (l.length % 2 ==\
    \ 0) ((l.sortWith(_<_))(l.length / 2 - 1) + (l.sortWith(_<_))(l.length / 2)) /\
    \ 2.0f\n        else (l.sortWith(_<_))(l.length / 2)", "        val sorted = l.sorted\n\
    \        if (sorted.length % 2 == 0) {\n            val center = sorted.length\
    \ / 2\n            (sorted(center - 1) + sorted(center)).toFloat / 2\n       \
    \ } else {\n            sorted(sorted.length / 2).toFloat\n        }", "     \
    \   val n = l.length\n        val (x, y) = l.sorted.splitAt(n / 2)\n        if\
    \ (n % 2 == 0) (x.last + y.head) / 2.0f else y.head", '        l.sortWith((x,
    y) => x <= y).toArray.apply(l.length / 2)', "        def median(l : List[Long],\
    \ size : Int) : Float = {\n            if (size % 2 == 0) {\n                val\
    \ left = size / 2 - 1\n                val right = size / 2\n                (l(left)\
    \ + l(right)) / 2f\n            } else {\n                l(size / 2)\n      \
    \      }\n        }\n        if (l.size == 0) {\n            0f\n        } else\
    \ {\n            val sorted = l.sorted\n            median(sorted, sorted.size)\n\
    \        }", "        val a = l.sortWith((a, b) => a < b)\n        val len = a.length\n\
    \        if (len % 2 == 0) {\n            return ((a(len / 2 - 1) + a(len / 2))\
    \ / 2.0f)\n        } else {\n            return a(len / 2)\n        }", "    \
    \    val sortedList = l.sorted\n        val n = sortedList.length\n        if\
    \ (n % 2 == 0)\n            (sortedList(n / 2 - 1) + sortedList(n / 2)).toFloat\
    \ / 2\n        else\n            sortedList(n / 2).toFloat", "        var m :\
    \ Float = 0\n        var n : List[Long] = l.sorted\n        if (n.length % 2 ==\
    \ 0) {\n            m = ((n(n.length / 2) + n(n.length / 2 - 1)).toFloat / 2)\n\
    \        } else {\n            m = n(n.length / 2).toFloat\n        }\n      \
    \  return m", "        val n = l.length\n        val m = n / 2 + n % 2\n     \
    \   val sorted = l.sorted\n        if (n % 2 == 1) sorted(m) else (sorted(m -\
    \ 1) + sorted(m)) / 2.0f", "        val n = l.length\n        val m = (l.sortWith(_\
    \ < _)).drop(n / 2).head\n        if (n % 2 == 0) (m + (l.sortWith(_ < _)).drop(n\
    \ / 2 - 1).head) / 2.0f else m", "        val orderedList = l.sorted\n       \
    \ val halfSize = orderedList.size / 2\n        return if (orderedList.size % 2\
    \ == 0)\n            (orderedList(halfSize) + orderedList(halfSize - 1)).toFloat\
    \ / 2\n        else\n            orderedList(halfSize).toFloat", "        val\
    \ sorted = l.sorted\n        var length = sorted.length\n        if (length %\
    \ 2 == 0) {\n            ((sorted(length / 2 - 1) + sorted(length / 2)) / 2.0f)\n\
    \        } else {\n            sorted(length / 2)\n        }", "        val ll\
    \ = l.sorted\n        if (ll.length % 2 == 0) {\n            (ll(ll.length / 2)\
    \ + ll(ll.length / 2 - 1)).toFloat / 2\n        } else {\n            ll(ll.length\
    \ / 2).toFloat\n        }", "        val sorted = l.sorted\n        val length\
    \ = sorted.length\n        val median = if (length % 2 == 0) {\n            val\
    \ m = length / 2\n            (sorted(m - 1) + sorted(m)) / 2.0f\n        } else\
    \ sorted(length / 2)\n        median", "        var newList = l.sortWith(_ < _)\n\
    \        val medianIndex = (newList.length - 1) / 2\n        if (newList.length\
    \ % 2 == 0) ((newList(medianIndex).toFloat + newList(medianIndex + 1).toFloat)\
    \ / 2)\n        else newList(medianIndex).toFloat", "        var m : Long = l.sum\
    \ / l.length\n        var t : Long = 0l\n        var c : Long = 0l\n        for\
    \ (x <- l) {\n            val d : Long = abs(x - m)\n            t += x\n    \
    \        c += d\n        }\n        m = t / l.length\n        c /= l.length\n\
    \        return (m + c) / 2", "        val n = l.length\n        val median_index\
    \ = (n / 2).toInt\n        val l_sorted = l.sorted\n        if (n % 2 == 0) (l_sorted(median_index\
    \ - 1) + l_sorted(median_index)) / 2.0f\n        else l_sorted(median_index).toFloat"]
stop_tokens:
- "\n    }\n"
