name: HumanEval_18_how_many_times
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Find how many times a given substring can be found in the original string.\
  \ Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n\
  \    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"\
  aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string : String, substring\
  \ : String) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(howManyTimes((\"\"\
  ), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
  \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
  john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
completions: ["        var count = 0l\n        var i = 0\n        while (i + substring.length\
    \ <= string.length) {\n            if (string.substring(i, i + substring.length)\
    \ == substring) {\n                count += 1\n                i += substring.length\n\
    \            }\n            else i += 1\n        }\n        count", "        var\
    \ result = 0l\n        for (index <- 0 to string.length - substring.length) if\
    \ (string.substring(index, index + substring.length) == substring) result += 1\n\
    \        return result", "        var count = 0l\n        var index = 0\n    \
    \    while (index != -1) {\n            index = string.indexOf(substring, index)\n\
    \            if (index != -1) {\n                count += 1\n                index\
    \ += 1\n            }\n        }\n        return count", "        def count(string\
    \ : String, substring : String, n : Long, i : Int) : Long = {\n            if\
    \ (i == string.length) n\n            else {\n                val s = string.substring(i)\n\
    \                if (s.startsWith(substring)) count(string, substring, n + 1,\
    \ i + substring.length)\n                else count(string, substring, n, i +\
    \ 1)\n            }\n        }\n        count(string, substring, 0, 0)", '        string.sliding(substring.length).count(substring.equals)',
  '      (string.zipWithIndex.filter(x => x._1 == substring(0)).map(x => (string.drop(x._2),
    substring))).filter(x => x._1.startsWith(x._2)).length', "      val pattern =\
    \ substring.r\n      val matches = pattern.findAllIn(string)\n      val times\
    \ = matches.length\n      times", "        val matcher = string.r\n        val\
    \ occurrences = matcher.findAllIn(string)\n        occurrences.map {\n       \
    \     case x => (string.indexOf(x), string.indexOf(x) + x.length)\n        }.toList.distinct.length",
  "        if (string.size < substring.size) return 0\n        var count = 0\n   \
    \     for (i <- 0 to string.size - substring.size) {\n            if (string.substring(i,\
    \ i + substring.size) == substring) count += 1\n        }\n        return count",
  "        def rec(string : String, substring : String, count : Long) : Long = string\
    \ match {\n            case \"\" => count\n            case _ =>\n           \
    \     rec(string.drop(1), substring, count + (if (string.startsWith(substring))\
    \ 1 else 0))\n        }\n        rec(string, substring, 0)", "        var total\
    \ = 0l\n        var i = 0\n        var j = 0\n        var next = 0\n        for\
    \ (i <- 0 until string.length - substring.length + 1) {\n            for (j <-\
    \ 0 until substring.length) {\n                if (string(i + j) != substring(j))\
    \ {\n                    if (j == 0) next = 1\n                    else next =\
    \ j\n                    break\n                }\n            }\n           \
    \ if (j == substring.length) total += 1\n            i += next\n        }\n  \
    \      return total", "        def loop(i : Int, acc : Long) : Long = {\n    \
    \        if (i + substring.length > string.length) acc\n            else {\n \
    \               val substr = string.substring(i, i + substring.length)\n     \
    \           if (substr == substring) loop(i + 1, acc + 1)\n                else\
    \ loop(i + 1, acc)\n            }\n        }\n        loop(0, 0)", "        var\
    \ counter = 0\n        var i = 0\n        while (i < string.length - substring.length\
    \ + 1) {\n            if (string.substring(i, i + substring.length) == substring)\
    \ {\n                counter += 1\n                i += substring.length\n   \
    \         } else {\n                i += 1\n            }\n        }\n       \
    \ counter", "        var j = 0\n        var i = 0\n        var count = 0l\n  \
    \      while (i + substring.length <= string.length) {\n            if (string.substring(i,\
    \ i + substring.length) == substring) {\n                count += 1\n        \
    \        i += substring.length\n            }\n            else i += 1\n     \
    \   }\n        return count", "        def substringToArray(str : String) : Array[Char]\
    \ = {\n            val array = new Array[Char](str.length)\n            for (index\
    \ <- 0 until str.length) array(index) = str(index)\n            array\n      \
    \  }\n        val stringArray = substringToArray(string)\n        val substringArray\
    \ = substringToArray(substring)\n        var count = 0l\n        for (index <-\
    \ 0 until stringArray.length - substringArray.length + 1) {\n            var isSubstring\
    \ = true\n            for (index2 <- 0 until substringArray.length) {\n      \
    \          if (stringArray(index + index2) != substringArray(index2)) {\n    \
    \                isSubstring = false\n                    index2 = substringArray.length\n\
    \                }\n            }\n            if (isSubstring) count += 1\n \
    \       }\n        count", "        val initialLength = string.length\n      \
    \  val processedString = string.replaceAll(substring, \"\")\n        initialLength\
    \ - processedString.length", "        val n = string.length\n        val m = substring.length\n\
    \        var count = 0l\n        for (i <- 0 until n) {\n            if (string.substring(i,\
    \ min(i + m, n)) == substring) count += 1\n        }\n        return count", " \
    \       val n = string.length\n        val m = substring.length\n        if (m\
    \ > n) 0l\n        else if (m == n) if (string == substring) 1l else 0l\n    \
    \    else if (m == 1) string.count(_ == substring(0))\n        else {\n      \
    \      val stringArray = string.toCharArray\n            val substringArray =\
    \ substring.toCharArray\n            var i = 0\n            var result = 0l\n\
    \            while (i <= n - m) {\n                var k = 0\n               \
    \ while (k < m && stringArray(i + k) == substringArray(k)) k += 1\n          \
    \      if (k == m) {\n                    result += 1\n                    i +=\
    \ k\n                }\n                else i += 1\n            }\n         \
    \   result\n        }", "        var count = 0l\n        var i = 0\n        while\
    \ (true) {\n            val index = string.indexOf(substring, i)\n           \
    \ if (index == -1) {\n                return count\n            }\n          \
    \  count += 1\n            i = index + 1\n        }\n        return -1", "   \
    \     if (string.size < substring.size) 0\n        else string.sliding(substring.size).filter(s\
    \ => s == substring).size", "        if (string.length < substring.length)\n \
    \           return 0l\n        var r = 0l\n        for (i <- 0 to string.length\
    \ - substring.length) {\n            if (string.substring(i, i + substring.length)\
    \ == substring)\n                r += 1\n        }\n        return r", "     \
    \   var count = 0l\n        for (i <- 0 to string.length - substring.length) {\n\
    \            val s = string.substring(i, i + substring.length)\n            if\
    \ (s == substring) {\n                count += 1\n            }\n        }\n \
    \       count", "        var count = 0l\n        var i = string.indexOf(substring)\n\
    \        while (i != -1) {\n            count += 1\n            i = string.indexOf(substring,\
    \ i + 1)\n        }\n        return count", "        var index = 0\n        var\
    \ count = 0\n        while (index <= string.length - substring.length) {\n   \
    \         if (string.slice(index, index + substring.length) == substring) {\n\
    \                count += 1\n                index += substring.length\n     \
    \       }\n            else index += 1\n        }\n        count", "        var\
    \ count = 0l\n        for (i <- 0 to string.length - substring.length) if (string.substring(i,\
    \ i + substring.length) == substring) count += 1\n        count", "        val\
    \ stringSize = string.size\n        val substringSize = substring.size\n     \
    \   var count = 0\n        for (i <- 0 to stringSize - substringSize) {\n    \
    \        if (string.substring(i, i + substringSize) == substring) count += 1\n\
    \        }\n        count", "      var count = 0l\n      for (i <- 0 to string.length\
    \ - substring.length) {\n        if (string.substring(i, i + substring.length)\
    \ == substring) {\n          count += 1\n        }\n      }\n      count", " \
    \       def howManyTimesInner(string : String, substring : String, itr : Long)\
    \ : Long = {\n            if (string.contains(substring)) howManyTimesInner(string.substring(string.indexOf(substring)\
    \ + 1), substring, itr + 1)\n            else itr\n        }\n        howManyTimesInner(string,\
    \ substring, 0)", "        def howManyTimesRec(string : String, substring : String,\
    \ index : Int, count : Long) : Long = {\n            if (index + substring.length\
    \ > string.length) count\n            else {\n                if (string.substring(index,\
    \ index + substring.length) == substring) howManyTimesRec(string, substring, index\
    \ + 1, count + 1)\n                else howManyTimesRec(string, substring, index\
    \ + 1, count)\n            }\n        }\n        howManyTimesRec(string, substring,\
    \ 0, 0)", "        if (string.length < substring.length) 0\n        else if (string.startsWith(substring))\
    \ 1 + howManyTimes(string.tail, substring)\n        else howManyTimes(string.tail,\
    \ substring)", "        val n = string.length()\n        val m = substring.length()\n\
    \        var cnt = 0\n        for (i <- 0 to n - m) {\n            if (string.substring(i,\
    \ i + m) == substring) cnt += 1\n        }\n        return cnt", "        def\
    \ search(index : Int, count : Long) : Long = {\n            val ind = string.indexOf(substring,\
    \ index)\n            if (ind == -1) count\n            else search(ind + 1, count\
    \ + 1)\n        }\n        search(0, 0)", "        // How many times substring\
    \ appears in the string.\n        var count = 0l\n        // Consider every consecutive\
    \ substring of length substring.length starting at index 0.\n        var index\
    \ = 0\n        while (index + substring.length <= string.length) {\n         \
    \   // Get the substring at the current index.\n            val current = string.substring(index,\
    \ index + substring.length)\n            // If it is a substring, increment the\
    \ count.\n            if (current == substring) {\n                count += 1\n\
    \            }\n            // Advance to the next substring.\n            index\
    \ += 1\n        }\n        count", "        def getSubstringCount(string : String,\
    \ substring : String, substringIndex : Int) : Long = {\n            if (substringIndex\
    \ == -1) {\n                var count = 0l\n                while (string.indexOf(substring,\
    \ count) != -1) {\n                    count += 1\n                }\n       \
    \         count\n            } else {\n                var count = 0l\n      \
    \          while (string.indexOf(substring, substringIndex + count) != -1) {\n\
    \                    count += 1\n                }\n                count\n  \
    \          }\n        }\n        getSubstringCount(string, substring, -1)", " \
    \       var ans = 0l\n        var start = 0\n        val length = substring.length\n\
    \        while (start < string.length) {\n            if (string.substring(start,\
    \ start + length) == substring) {\n                ans += 1\n                start\
    \ += length\n            }\n            else start += 1\n        }\n        ans",
  "        def iter(string : String, substring : String, count : Long) : Long = {\n\
    \            if (string.isEmpty) count\n            else {\n                if\
    \ (string.startsWith(substring)) iter(string.substring(substring.length), substring,\
    \ count + 1)\n                else iter(string.substring(1), substring, count)\n\
    \            }\n        }\n        iter(string, substring, 0)", "        var count\
    \ = 0l\n        for (i <- 0 to string.length - substring.length) {\n         \
    \   if (string.substring(i, i + substring.length) == substring) count += 1\n \
    \       }\n        return count", "        val l = substring.length\n        var\
    \ count = 0\n        for (i <- 0 to string.length - l) if (string.substring(i,\
    \ i + l) == substring) count += 1\n        count", "        val start = substring.length\n\
    \        var count = 0l\n        for (i <- 0 until string.length - start + 1)\
    \ {\n            val substring = string.substring(i, i + start)\n            if\
    \ (substring == substring) count += 1\n        }\n        count", "        val\
    \ stringLength = string.length\n        val substringLength = substring.length\n\
    \        var count = 0l\n        for (i <- 0 to stringLength - substringLength)\
    \ {\n            val temp = string.substring(i, i + substringLength)\n       \
    \     if (temp == substring) count += 1\n        }\n        count", "        def\
    \ helper(string : String, substring : String, current : Long) : Long = {\n   \
    \         if (string.length() < substring.length()) return current\n         \
    \   if (string.substring(0, substring.length()) == substring) {\n            \
    \    helper(string.substring(1), substring, current + 1)\n            } else {\n\
    \                helper(string.substring(1), substring, current)\n           \
    \ }\n        }\n        return helper(string, substring, 0)", "        if (string.isEmpty)\
    \ return 0l\n        if (substring.isEmpty) return 0l\n        if (string.size\
    \ < substring.size) return 0l\n        if (string.size == substring.size) {\n\
    \            if (string == substring) return 1l\n            else return 0l\n\
    \        }\n        val indexes = string.zipWithIndex.collect { case (ch, index)\
    \ if ch == substring(0) => index }\n        val substrings = indexes.map(i =>\
    \ string.slice(i, min(i + substring.size, string.size)))\n        val substringsWithEquals\
    \ = substrings.map(s => (s, substring))\n        substringsWithEquals.filter(t\
    \ => t._1 == t._2).size.toLong", "        var count = 0l\n        var i = 0\n\
    \        while (i <= string.length - substring.length) {\n            if (string.substring(i,\
    \ i + substring.length) == substring) {\n                count += 1\n        \
    \        i += substring.length\n            }\n            else i += 1\n     \
    \   }\n        count", "        var p = 0\n        var l = 0\n        while (p\
    \ < string.length && l < substring.length) {\n            if (string(p) == substring(l))\
    \ {\n                p += 1\n                l += 1\n            } else {\n  \
    \              p += 1\n                l = 0\n            }\n        }\n     \
    \   if (l == substring.length) l else 0", "        var times = 0\n        var\
    \ index = string.indexOf(substring)\n        while (index != -1) {\n         \
    \   times += 1\n            index = string.indexOf(substring, index + 1)\n   \
    \     }\n        times", "        var count = 0l\n        var sb = new StringBuilder(string)\n\
    \        while (sb.toString().contains(substring)) {\n            sb = sb.delete(sb.indexOf(substring),\
    \ sb.indexOf(substring) + substring.length)\n            count += 1\n        }\n\
    \        count", "        var total = 0\n        for (i <- 0 to string.length\
    \ - substring.length) {\n            if (string.substring(i, i + substring.length)\
    \ == substring) total += 1\n        }\n        total", "        var result = 0L\n\
    \        for (i <- 0 to string.length - substring.length) {\n            if (string.substring(i,\
    \ i + substring.length) == substring) result += 1\n        }\n        return result",
  "        def howManyTimes(string : String, substring : String, index : Int) : Long\
    \ = {\n            if (index == string.length) 0l\n            else {\n      \
    \          val i = string.indexOf(substring, index)\n                if (i ==\
    \ -1) 0l\n                else 1l + howManyTimes(string, substring, i + 1)\n \
    \           }\n        }\n        howManyTimes(string, substring, 0)", "     \
    \   var result = 0l\n        var i = 0\n        while (i + substring.length <=\
    \ string.length) {\n            if (string.substring(i, i + substring.length)\
    \ == substring) {\n                result += 1\n                i += substring.length\n\
    \            }\n            else i += 1\n        }\n        return result", " \
    \       // substring.length must be larger than string.length\n        val l =\
    \ string.length\n        val s = substring.length\n        var result = 0l\n \
    \       for (i <- 0 to (l - s)) {\n            for (j <- 0 to (s - 1)) {\n   \
    \             if (string(i + j) != substring(j)) {\n                    j = s\n\
    \                }\n                else if (j == s - 1) {\n                 \
    \   result += 1\n                }\n            }\n        }\n        return result",
  "        var count = 0L\n        val s = string.toCharArray\n        val p = substring.toCharArray\n\
    \        val dp = Array.ofDim[Int](s.length, p.length)\n        for (i <- 0 until\
    \ s.length; j <- 0 until p.length) {\n            if (s(i) == p(j)) {\n      \
    \          if (i == 0 || j == 0) dp(i)(j) = 1\n                else dp(i)(j) =\
    \ dp(i - 1)(j - 1) + 1\n                if (dp(i)(j) == p.length) count += 1\n\
    \            }\n        }\n        return count", "        if (string.isEmpty\
    \ || substring.isEmpty) {\n            return 0l\n        }\n        var start\
    \ : Int = 0\n        var count : Long = 0l\n        while (start < string.length)\
    \ {\n            val index : Int = string.indexOf(substring, start)\n        \
    \    if (index == -1) {\n                return count\n            }\n       \
    \     count += 1l\n            start = index + 1\n        }\n        return count",
  "        val substringLength = substring.length\n        val array = string.toCharArray\n\
    \        var count = 0l\n        for (i <- 0 until array.length - substringLength\
    \ + 1) {\n            if (string.substring(i, i + substringLength) == substring)\
    \ count += 1\n        }\n        count", "        var c = 0\n        var index\
    \ = 0\n        while (index < string.length) {\n            if (string.indexOf(substring,\
    \ index) != -1) {\n                c += 1\n                index = string.indexOf(substring,\
    \ index) + 1\n            }\n            else index = string.length\n        }\n\
    \        return c", "        return ((0 to string.length - substring.length).map(i\
    \ => \n            if (string.substring(i, i + substring.length) == substring)\
    \ 1 else 0\n        ).foldLeft(0l)(_ + _))", "        def nextIndex(string : String,\
    \ index : Int, substring : String) : Int = {\n            var i = index\n    \
    \        while (i + substring.length <= string.length) {\n                if (string.substring(i,\
    \ i + substring.length) == substring) return i\n                i += 1\n     \
    \       }\n            return -1\n        }\n        def loop(string : String,\
    \ index : Int, substring : String, count : Long) : Long = {\n            val i\
    \ = nextIndex(string, index, substring)\n            if (i == -1) return count\n\
    \            return loop(string, i + 1, substring, count + 1)\n        }\n   \
    \     loop(string, 0, substring, 0)", "        var count = 0\n        for (i <-\
    \ 0 to string.length - substring.length) {\n            if (string.substring(i,\
    \ i + substring.length) == substring) {\n                count += 1\n        \
    \    }\n        }\n        return count", "        val n = string.length; val\
    \ m = substring.length\n        var count = 0l\n        for (i <- 0 until n -\
    \ m + 1) {\n            if (string.substring(i, i + m) == substring) count +=\
    \ 1\n        }\n        count", "        var count = 0\n        val reg = \"\"\
    \"(?=(%s))\"\"\".format(substring).r\n        string match {\n            case\
    \ reg(s) => {\n                count += 1\n                count + howManyTimes(s,\
    \ substring)\n            }\n            case _ => count\n        }", "      \
    \  var count = 0l\n        for (i <- 0 to string.length - substring.length) if\
    \ (string.substring(i, i + substring.length) == substring) count += 1\n      \
    \  count", "        def loop(i : Int, count : Long) : Long = {\n            if\
    \ (i + substring.length > string.length) {\n                count\n          \
    \  } else {\n                if (string.substring(i, i + substring.length) ==\
    \ substring) {\n                    loop(i + 1, count + 1)\n                }\
    \ else {\n                    loop(i + 1, count)\n                }\n        \
    \    }\n        }\n        loop(0, 0)", "      var result = 0l\n      var lastStart\
    \ = 0\n      while (true) {\n        val index = string.indexOf(substring, lastStart)\n\
    \        if (index != -1) {\n          result += 1\n          lastStart = index\
    \ + 1\n        } else {\n          return result\n        }\n      }\n      return\
    \ result", "        val subLength = substring.length\n        var count = 0\n\
    \        var stringIndex = 0\n        var substringIndex = 0\n        while (stringIndex\
    \ < string.length) {\n            if (string(stringIndex) == substring(substringIndex))\
    \ {\n                substringIndex += 1\n                if (substringIndex ==\
    \ subLength) {\n                    count += 1\n                    substringIndex\
    \ = 0\n                }\n            }\n            else substringIndex = 0\n\
    \            stringIndex += 1\n        }\n        count", "        var count =\
    \ 0l\n        for (i <- 0 to string.length - substring.length) {\n           \
    \ if (string.substring(i, i + substring.length) == substring) count += 1\n   \
    \     }\n        return count", "        if (string.length == 0 || substring.length\
    \ == 0) return 0l\n        var amount = 0l\n        for (i <- 0 until string.length\
    \ - substring.length + 1) {\n            val sub = string.substring(i, i + substring.length)\n\
    \            if (sub == substring) amount += 1\n        }\n        return amount",
  "        var count = 0l\n        for (i <- 0 to string.length - substring.length)\
    \ {\n            if (string.substring(i, i + substring.length) == substring) {\n\
    \                count += 1\n            }\n        }\n        return count",
  "        var counter = 0l\n        var i = 0\n        while (i < string.length -\
    \ substring.length + 1) {\n            val substring_ = string.substring(i, i\
    \ + substring.length)\n            if (substring_.equals(substring)) {\n     \
    \           counter += 1\n                i += substring.length\n            }\
    \ else {\n                i += 1\n            }\n        }\n        return counter",
  "        val substringSize = substring.size\n        if (substringSize == 0) return\
    \ 0\n        var count = 0\n        for (i <- 0 to string.size - substringSize)\
    \ {\n            if (string.substring(i, i + substringSize) == substring) count\
    \ += 1\n        }\n        return count", "        def helper(pos : Int, count\
    \ : Long) : Long = {\n            if (pos > string.length - substring.length)\
    \ count\n            else if (string.substring(pos, pos + substring.length) ==\
    \ substring) helper(pos + 1, count + 1)\n            else helper(pos + 1, count)\n\
    \        }\n        helper(0, 0)", "        var count = 0\n        for (i <- 0\
    \ to string.length() - substring.length()) {\n            if (string.substring(i,\
    \ i + substring.length()) == substring) {\n                count += 1\n      \
    \      }\n        }\n        return count", "        val lsub = substring.length\n\
    \        var a = string.indexOf(substring)\n        var i = 0l\n        while\
    \ (a != -1) {\n            i += 1\n            a = string.indexOf(substring, a\
    \ + lsub)\n        }\n        return i", "        var count = 0l\n        var\
    \ end = string.length\n        while (end > 0) {\n            if (string.indexOf(substring,\
    \ end - substring.length) != -1) count += 1\n            end -= 1\n        }\n\
    \        count", "        var count = 0l\n        var index = 0\n        while\
    \ ((index = string.indexOf(substring, index)) >= 0) {\n            count += 1\n\
    \            index += 1\n        }\n        return count", "        var result\
    \ = 0l\n        for (i <- 0 to string.length - substring.length) {\n         \
    \   val s = string.substring(i, i + substring.length)\n            if (s == substring)\
    \ {\n                result += 1\n            }\n        }\n        result", " \
    \       if (string.length < substring.length) {\n            return 0\n      \
    \  }\n        else if (string.length == substring.length) {\n            if (string\
    \ == substring) {\n                return 1\n            }\n            else {\n\
    \                return 0\n            }\n        }\n        var currentString\
    \ = string\n        var currentCount = 0\n        var totalCount = 0\n       \
    \ while (currentString.length >= substring.length) {\n            if (currentString.startsWith(substring))\
    \ {\n                currentCount += 1\n                totalCount += 1\n    \
    \            currentString = currentString.substring(1)\n            }\n     \
    \       else {\n                totalCount += currentCount\n                currentString\
    \ = currentString.substring(1)\n            }\n        }\n        return totalCount",
  "        def recur(index : Int, count : Long) : Long = {\n            if (index\
    \ >= string.length) count\n            else {\n                var i = 0\n   \
    \             while (i < substring.length && index + i < string.length && string(index\
    \ + i) == substring(i)) i += 1\n                if (i == substring.length) recur(index\
    \ + i, count + 1)\n                else recur(index + 1, count)\n            }\n\
    \        }\n        recur(0, 0)", "        var count = 0l\n        for (i <- 0\
    \ to string.length - substring.length) {\n            if (string.substring(i,\
    \ i + substring.length) == substring) {\n                count += 1\n        \
    \    }\n        }\n        return count", "        // >>> howManyTimes((\"aaa\"\
    ), (\"aa\"))\n        // (2l)\n        var count = 0l\n        var index = string.indexOf(substring)\n\
    \        while (index != -1) {\n            count += 1\n            index = string.indexOf(substring,\
    \ index + 1)\n        }\n        return count", "        var count = 0l\n    \
    \    for (i <- 0 to string.length - substring.length) {\n            if (string.substring(i,\
    \ i + substring.length) == substring) count += 1\n        }\n        return count",
  "        var count = 0l\n        var l = string.length\n        var s = substring.length\n\
    \        for (i <- 0 to l - s) {\n            if (string.substring(i, i + s) ==\
    \ substring) {\n                count += 1\n            }\n        }\n       \
    \ return count", "      var result = 0l\n      for (i <- 0 to string.length -\
    \ substring.length) {\n        if (string.substring(i, i + substring.length) ==\
    \ substring) {\n          result += 1\n        }\n      }\n      result", "  \
    \      def search(s : String, sub : String, count : Long) : Long = {\n       \
    \     if (s.indexOf(sub) == -1) count\n            else search(s.substring(s.indexOf(sub)\
    \ + 1), sub, count + 1)\n        }\n        search(string, substring, 0)", " \
    \       if (string.size == 0 || substring.size == 0) 0l\n        else {\n    \
    \        val pairs = string.sliding(substring.size).zipWithIndex.filter(pair =>\
    \ pair._1 == substring)\n            pairs.size + howManyTimes(string.tail, substring)\n\
    \        }", "    \t(string.length() / substring.length()).toLong", "        //\
    \ >>> howManyTimes((\"aa\"), (\"a\"))\n        // (2l)\n        if (substring.length()\
    \ == 1) return string.length().toLong\n        val pat = substring.toCharArray()\n\
    \        val str = string.toCharArray()\n        var i = 0\n        var cnt =\
    \ 0\n        while (i <= str.length - pat.length) {\n            var j = 0\n \
    \           while (j < pat.length && str(i + j) == pat(j)) j += 1\n          \
    \  if (j == pat.length) {\n                cnt += 1\n                i += j\n\
    \            } else i += 1\n        }\n        cnt", "        val startPosition\
    \ = -1\n        def nextPosition(position : Int) : Int = {\n            string.indexOf(substring,\
    \ position + 1)\n        }\n        def loop(position : Int, count : Long) : Long\
    \ = {\n            if (position == -1) count\n            else loop(nextPosition(position),\
    \ count + 1)\n        }\n        loop(startPosition, 0)", "        def indexOf(text\
    \ : String, index : Int, pattern : String) : Int = {\n            var j = 0\n\
    \            for (i <- index until text.length) {\n                if (text(i)\
    \ == pattern(j)) {\n                    j += 1\n                    if (j == pattern.length)\
    \ return i - pattern.length + 1\n                } else {\n                  \
    \  j = 0\n                }\n            }\n            -1\n        }\n      \
    \  def loop(index : Int, count : Long) : Long = {\n            val i = indexOf(string,\
    \ index, substring)\n            if (i == -1) return count\n            loop(i\
    \ + 1, count + 1)\n        }\n        loop(0, 0)", "        var count = 0\n  \
    \      var index = string.indexOf(substring)\n        while (index != -1) {\n\
    \            count += 1\n            index = string.indexOf(substring, index +\
    \ 1)\n        }\n        return count", "        var cnt = 0\n        var i =\
    \ 0\n        while (i <= string.length - substring.length) {\n            if (string.substring(i,\
    \ i + substring.length) == substring) {\n                cnt += 1\n          \
    \      i += substring.length\n            }\n            else i += 1\n       \
    \ }\n        cnt", "        var count = 0l\n        for (i <- 0 to string.length\
    \ - substring.length) if (string.substring(i, i + substring.length) == substring)\
    \ count += 1\n        count", "        val occ = new Array[Long](string.length)\n\
    \        for (i <- 0 until string.length - substring.length + 1) {\n         \
    \   occ(i) = if (string.substring(i, i + substring.length) == substring) 1 else\
    \ 0\n        }\n        for (i <- 1 until string.length - substring.length + 1)\
    \ {\n            occ(i) += occ(i - 1)\n        }\n        occ(string.length -\
    \ substring.length)", "        var k = 0l\n        var i = 0\n        while (i\
    \ <= string.length - substring.length) {\n            if (string.substring(i,\
    \ i + substring.length) == substring) {\n                k += 1\n            \
    \    i += substring.length\n            }\n            else i += 1\n        }\n\
    \        k", "        if (string.length < substring.length) return 0\n       \
    \ var count = 0\n        for (i <- 0 to string.length - substring.length) if (string.substring(i,\
    \ i + substring.length) == substring) count += 1\n        return count", "   \
    \     def iter(string : String, substring : String, count : Long) : Long = {\n\
    \            if (string.length < substring.length) return count\n            if\
    \ (string.substring(0, substring.length) == substring) iter(string.substring(1),\
    \ substring, count + 1)\n            else iter(string.substring(1), substring,\
    \ count)\n        }\n        iter(string, substring, 0)", "        if (string.length\
    \ < substring.length) return 0\n        if (string.length == substring.length)\
    \ return (if (string == substring) 1 else 0)\n        var result = 0l\n      \
    \  for (i <- 0 to string.length - substring.length) {\n            if (string.substring(i,\
    \ i + substring.length) == substring) result += 1\n        }\n        return result",
  "        def recurse(string : String, substring : String, count : Long) : Long =\
    \ {\n            if (string.length == 0) return count\n            else {\n  \
    \              val index = string.indexOf(substring)\n                if (index\
    \ == -1) return count\n                else return recurse(string.substring(index\
    \ + 1), substring, count + 1)\n            }\n        }\n        recurse(string,\
    \ substring, 0)", "      val initial = 0l\n      val res = string.foldLeft(initial)((acc,\
    \ c) => {\n        if (c == substring(0)) {\n          val l = string.length -\
    \ string.indexOf(c)\n          val s = substring.length\n          if (l < s)\
    \ 0l\n          else if (string.substring(string.indexOf(c), min(string.indexOf(c)\
    \ + s, string.length)) == substring) 1l + acc\n          else 0l\n        }\n\
    \        else acc\n      })\n      res", "        def howManyTimesIter(string\
    \ : String, substring : String, total : Long) : Long = {\n            val index\
    \ = string.indexOf(substring)\n            if (index == -1) {\n              \
    \  total\n            } else {\n                howManyTimesIter(string.drop(index\
    \ + 1), substring, total + 1)\n            }\n        }\n        howManyTimesIter(string,\
    \ substring, 0)", "        val stringLen = string.length\n        val substringLen\
    \ = substring.length\n        if (stringLen == 0 || substringLen == 0) return\
    \ 0\n        var count = 0l\n        for (i <- 0 until stringLen - substringLen\
    \ + 1) {\n            val sub = string.substring(i, i + substringLen)\n      \
    \      if (sub.equals(substring)) count += 1\n        }\n        count", "   \
    \     var n = 0l\n        if (string.length > 0 && substring.length > 0) {\n \
    \           var index = 0\n            while (index <= string.length - substring.length)\
    \ {\n                if (string.substring(index, index + substring.length) ==\
    \ substring) {\n                    n += 1\n                    index += substring.length\n\
    \                }\n                else index += 1\n            }\n        }\n\
    \        n", "        var found = 0\n        if (string.length < substring.length)\
    \ return 0\n        if (string.length == substring.length) return if (string ==\
    \ substring) 1 else 0\n        var i = 0\n        while (i < string.length - substring.length\
    \ + 1) {\n            if (string.substring(i, i + substring.length) == substring)\
    \ {\n                found += 1\n                i += substring.length - 1\n \
    \           }\n            i += 1\n        }\n        found", "        if (string.length\
    \ < substring.length) return 0\n        var count = 0\n        var index = string.indexOf(substring)\n\
    \        while (index != -1) {\n            count += 1\n            index = string.indexOf(substring,\
    \ index + 1)\n        }\n        return count", "        var count = 0l\n    \
    \    for (i <- 0 to string.length - substring.length) {\n            if (string.substring(i,\
    \ i + substring.length) == substring) count += 1\n        }\n        return count",
  "        var buffer = string\n        var result = 0l\n        var index = 0\n \
    \       while (buffer.indexOf(substring, index) != -1) {\n            result +=\
    \ 1\n            index = buffer.indexOf(substring, index) + 1\n        }\n   \
    \     return result", "        var result = 0l\n        var index = string.indexOf(substring)\n\
    \        while (index != -1) {\n            result += 1\n            index = string.indexOf(substring,\
    \ index + 1)\n        }\n        return result", "      if (string.length == 0\
    \ || substring.length == 0) {\n        return 0\n      }\n      if (string.length\
    \ < substring.length) {\n        return 0\n      }\n      val a = string.indexOf(substring)\n\
    \      if (a == -1) {\n        return 0\n      }\n      val left = string.substring(0,\
    \ a)\n      val right = string.substring(a + substring.length)\n      howManyTimes(left,\
    \ substring) + howManyTimes(right, substring) + 1", "        if (string.length\
    \ < substring.length) 0\n        else if (string.substring(0, substring.length)\
    \ == substring) 1 + howManyTimes(string.substring(1), substring)\n        else\
    \ howManyTimes(string.substring(1), substring)", "        def helper(str : String,\
    \ sub : String, acc : Long) : Long = str match {\n            case \"\" => acc\n\
    \            case _ => if (str.startsWith(sub)) helper(str.drop(sub.length), sub,\
    \ acc + 1) else helper(str.drop(1), sub, acc)\n        }\n        helper(string,\
    \ substring, 0)", "        var result = 0l\n        var index = string.indexOf(substring)\n\
    \        while (index != -1) {\n            result += 1\n            index = string.indexOf(substring,\
    \ index + 1)\n        }\n        return result", "        var result = 0l\n  \
    \      var j = 0\n        for (i <- 0 until string.length) {\n            if (string(i)\
    \ == substring(j)) {\n                j += 1\n                if (j == substring.length)\
    \ {\n                    result += 1\n                    j = 0\n            \
    \    }\n            } else j = 0\n        }\n        result", "        var count\
    \ = 0l\n        var current_index = string.indexOf(substring)\n        while (current_index\
    \ != -1) {\n            count += 1\n            current_index = string.indexOf(substring,\
    \ current_index + 1)\n        }\n        return count", "        if (string.isEmpty\
    \ || substring.isEmpty) 0\n        else string.sliding(substring.length).toList.count(_\
    \ == substring)", '        string.sliding(substring.length).filter(l => l == substring).size',
  "        var count = 0l\n        var i = 0\n        while (i <= string.length -\
    \ substring.length) {\n            if (string.substring(i, i + substring.length)\
    \ == substring) {\n                count += 1\n                i += substring.length\n\
    \            }\n            else i += 1\n        }\n        count", "        if\
    \ (string.length < substring.length) return 0\n        var (index, count) = (0,\
    \ 0)\n        while (index < string.length - substring.length + 1) {\n       \
    \     if (string.substring(index, index + substring.length) == substring) {\n\
    \                count += 1\n                index += substring.length\n     \
    \       }\n            else index += 1\n        }\n        return count", '        string.sliding(substring.length).count(_
    == substring)', "        var count = 0l\n        for (i <- 0 to string.length\
    \ - substring.length) if (string.substring(i, i + substring.length) == substring)\
    \ count += 1\n        count", "        val stringLength = string.length\n    \
    \    val substringLength = substring.length\n        if (stringLength == 0 ||\
    \ substringLength == 0) 0\n        else if (stringLength == substringLength) 1\n\
    \        else {\n            var counter = 0\n            for (i <- 0 to stringLength\
    \ - substringLength) {\n                var index = i\n                var count\
    \ = 0\n                while (index < stringLength && string(index) == substring(count))\
    \ {\n                    index += 1\n                    count += 1\n        \
    \            if (count == substringLength) {\n                        counter\
    \ += 1\n                        break\n                    }\n               \
    \ }\n            }\n            counter\n        }", "        var result = 0l\n\
    \        var s = string\n        var i = 0\n        while (s.contains(substring))\
    \ {\n            result += 1\n            s = s.substring(s.indexOf(substring)\
    \ + 1)\n        }\n        return result", "        var count = 0l\n        for\
    \ (i <- 0 to string.length - substring.length) {\n            if (string.substring(i,\
    \ i + substring.length) == substring) count += 1\n        }\n        return count",
  "        var index = string.indexOf(substring)\n        var result = 0l\n      \
    \  while (index != -1) {\n            result += 1\n            index = string.indexOf(substring,\
    \ index + 1)\n        }\n        return result", "        def find(currentIndex\
    \ : Int, count : Long) : Long = {\n            val index = string.indexOf(substring,\
    \ currentIndex)\n            if (index == -1) count\n            else find(index\
    \ + 1, count + 1)\n        }\n        find(0, 0)", "        def howManyTimesAcc(string\
    \ : String, substring : String, position : Int, count : Long) : Long = {\n   \
    \         if (position + substring.length > string.length) count\n           \
    \ else {\n                if (string.substring(position, position + substring.length)\
    \ == substring) howManyTimesAcc(string, substring, position + 1, count + 1)\n\
    \                else howManyTimesAcc(string, substring, position + 1, count)\n\
    \            }\n        }\n        howManyTimesAcc(string, substring, 0, 0)",
  "        var length = substring.length\n        var s = string\n        var result\
    \ = 0\n        while (s.length >= length) {\n            if (s.startsWith(substring))\
    \ {\n                result += 1\n                s = s.substring(1)\n       \
    \     } else {\n                s = s.substring(1)\n            }\n        }\n\
    \        return result", "        if (string.length < substring.length) return\
    \ 0\n        val x = string.split(substring)\n        return x.length - 1", " \
    \       def howManyTimes(string : String, substring : String, i : Int) : Long\
    \ = {\n            if (i > string.length - substring.length) 0\n            else\
    \ if (string.substring(i, i + substring.length) == substring) 1 + howManyTimes(string,\
    \ substring, i + 1)\n            else howManyTimes(string, substring, i + 1)\n\
    \        }\n        howManyTimes(string, substring, 0)", "        var result =\
    \ 0l\n        var index = 0\n        while (true) {\n            index = string.indexOf(substring,\
    \ index)\n            if (index == -1) return result\n            result += 1\n\
    \            index += 1\n        }\n        return result", "        var count\
    \ = 0l\n        var i = 0\n        while (i < string.length) {\n            if\
    \ (string.substring(i).startsWith(substring)) {\n                count += 1\n\
    \                i += substring.length\n            } else {\n               \
    \ i += 1\n            }\n        }\n        return count", "        val n = string.length\n\
    \        val m = substring.length\n        var count = 0\n        for (i <- 0\
    \ to n - m) {\n            if (string.substring(i, i + m) == substring) count\
    \ += 1\n        }\n        count", "        if (string.length < substring.length)\
    \ {\n            return 0l\n        }\n        else if (string.length == substring.length)\
    \ {\n            if (string == substring) {\n                return 1l\n     \
    \       }\n            else {\n                return 0l\n            }\n    \
    \    }\n        else {\n            val first = substring(0)\n            val\
    \ c = string.count(_ == first)\n            return c + howManyTimes(string.drop(1),\
    \ substring) + howManyTimes(string.drop(1), substring.drop(1))\n        }", " \
    \       var result = 0l\n        var index = string.indexOf(substring)\n     \
    \   while (index != -1) {\n            result += 1\n            index = string.indexOf(substring,\
    \ index + 1)\n        }\n        return result", "        var lastIndex = 0\n\
    \        var count = 0\n        while (lastIndex != -1) {\n            lastIndex\
    \ = string.indexOf(substring, lastIndex)\n            if (lastIndex != -1) {\n\
    \                count += 1\n                lastIndex += substring.length\n \
    \           }\n        }\n        return count", "        var count = 0l\n   \
    \     for (i <- (0 to string.length - substring.length)) {\n            if (string.substring(i,\
    \ i + substring.length) == substring) count += 1\n        }\n        return count",
  "      val pattern = (substring + \"$\").r\n      pattern.findAllIn(string).length",
  "        var count = 0l\n        for (i <- 0 to string.length - substring.length)\
    \ if (string.substring(i, i + substring.length) == substring) count += 1\n   \
    \     count", "        val (n, m) = (string.length, substring.length)\n      \
    \  val (index, counter) = string.foldLeft((0, 0))((r, c) => {\n            val\
    \ (i, cnt) = r\n            if (i < m && c == substring(i))\n                if\
    \ (i == m - 1)\n                    (0, cnt + 1)\n                else\n     \
    \               (i + 1, cnt)\n            else\n                (0, cnt)\n   \
    \     })\n        counter", "        var ret : Long = 0l\n        var i : Int\
    \ = 0\n        val sublen : Int = substring.length\n        val strlen : Int =\
    \ string.length\n        while (i + sublen <= strlen) {\n            if (string.substring(i,\
    \ i + sublen) == substring) {\n                ret += 1\n                i +=\
    \ sublen\n            } else {\n                i += 1\n            }\n      \
    \  }\n        return ret", "        var count = 0l\n        val n = string.length\n\
    \        val m = substring.length\n        for (i <- 0 to n - m) {\n         \
    \   var matchCnt = 0\n            for (j <- 0 to m - 1) if (string(i + j) == substring(j))\
    \ matchCnt += 1\n            if (matchCnt == m) count += 1\n        }\n      \
    \  return count", "        var count = 0l\n        var index = string.indexOf(substring)\n\
    \        while (index != -1) {\n            count += 1\n            index = string.indexOf(substring,\
    \ index + 1)\n        }\n        return count", '      string.toSeq.sliding(substring.length).map(x
    => (x.mkString == substring)).filter(x => x).length', "        if (string.length\
    \ == 0 || substring.length == 0) return 0\n        return howManyTimes(string.tail,\
    \ substring, (if (string.startsWith(substring)) 1 else 0))", "        var count\
    \ = 0l\n        var index = 0\n        do {\n            index = string.indexOf(substring,\
    \ index)\n            if (index != -1) {\n                count += 1\n       \
    \         index += 1\n            }\n        } while (index != -1)\n        return\
    \ count", "        def loop(string : String, substring : String, count : Long)\
    \ : Long = string match {\n            case \"\" => count\n            case _\
    \ => loop(string.drop(string.indexOf(substring) + 1), substring, count + 1)\n\
    \        }\n        if (string.indexOf(substring) == -1) 0 else loop(string, substring,\
    \ 0)", "        var size = substring.size\n        var occurrences = 0l\n    \
    \    for (i <- 0 to string.size - size) {\n            if (string.substring(i,\
    \ i + size) == substring) occurrences += 1\n        }\n        occurrences", " \
    \       if (string.isEmpty || substring.isEmpty) return 0l\n        var i = 0\n\
    \        var j = 0\n        var count = 0\n        while (i < string.length &&\
    \ j < substring.length) {\n            if (string(i) == substring(j)) {\n    \
    \            i += 1\n                j += 1\n            } else {\n          \
    \      j = 0\n                i += 1\n            }\n            if (j == substring.length)\
    \ {\n                count += 1\n                j = 0\n            }\n      \
    \  }\n        count", "        var count = 0l\n        for (i <- 0 to string.length\
    \ - substring.length) {\n            if (string.substring(i, i + substring.length)\
    \ == substring) {\n                count += 1\n            }\n        }\n    \
    \    return count", "        def count(n : Int, k : Int) : Long = if (n < k) 0l\
    \ else 1l + count(n - 1, k)\n        def go(start : Int, end : Int) : Long = if\
    \ (end > string.length) 0l else count(end - start, substring.length) + go(start\
    \ + 1, end + 1)\n        go(0, substring.length)", "        if (string.length\
    \ < substring.length) {\n            return 0\n        }\n        var count =\
    \ 0\n        for (i <- 0 to string.length - substring.length) {\n            var\
    \ found = true\n            for (j <- 0 to substring.length - 1) {\n         \
    \       if (string(i + j) != substring(j)) {\n                    found = false\n\
    \                }\n            }\n            if (found) {\n                count\
    \ += 1\n            }\n        }\n        return count", "        var count =\
    \ 0l\n        var i = 0\n        while (i <= string.length - substring.length)\
    \ {\n            if (string.substring(i, i + substring.length) == substring) {\n\
    \                count += 1\n                i += substring.length\n         \
    \   }\n            else i += 1\n        }\n        count", "    \tvar temp = string\n\
    \    \tvar count = 0l\n    \twhile (temp.length >= substring.length) {\n    \t\
    \tif (temp.substring(0, substring.length) == substring) {\n    \t\t\tcount +=\
    \ 1\n    \t\t\ttemp = temp.substring(1)\n    \t\t}\n    \t\telse temp = temp.substring(1)\n\
    \    \t}\n    \tcount", "    \tval strArray = string.toArray\n    \tval subArray\
    \ = substring.toArray\n    \tval len = substring.length\n    \tvar count = 0l\n\
    \    \tfor (i <- 0 until strArray.length - len + 1) {\n    \t\tvar flag = true\n\
    \    \t\tfor (j <- 0 until len) {\n    \t\t\tif (strArray(i + j) != subArray(j))\
    \ {\n    \t\t\t\tflag = false\n    \t\t\t\tbreak\n    \t\t\t}\n    \t\t}\n   \
    \ \t\tif (flag) count += 1\n    \t}\n    \tcount", "        val N = string.length;\
    \ val M = substring.length\n        if (M > N) return 0l\n        var n = N -\
    \ M + 1\n        var i = 0; var count = 0l\n        while (i < n) {\n        \
    \    if (string.substring(i, i + M) == substring) {\n                count +=\
    \ 1\n                i += M\n            }\n            else i += 1\n        }\n\
    \        return count", "        def helper(string : String, substring : String,\
    \ count : Long, i : Int) : Long = if (i + substring.length() <= string.length())\
    \ {\n            if (string.substring(i, i + substring.length()) == substring)\
    \ helper(string, substring, count + 1, i + 1)\n            else helper(string,\
    \ substring, count, i + 1)\n        } else count\n        helper(string, substring,\
    \ 0, 0)", "        var answer = 0l\n        for (i <- 0 to string.length - substring.length)\
    \ if (string.substring(i, i + substring.length) == substring) answer += 1\n  \
    \      return answer", "        def findCount(string : String, substring : String,\
    \ count : Long) : Long = {\n            if (string.length() < substring.length())\
    \ count\n            else {\n                if (string.startsWith(substring))\
    \ findCount(string.substring(1), substring, count + 1)\n                else findCount(string.substring(1),\
    \ substring, count)\n            }\n        }\n        findCount(string, substring,\
    \ 0)", "        val t = substring.length\n        val p = string.length\n    \
    \    val tp = t * p\n        val top = min(t, p)\n        if (tp <= 1) 0\n   \
    \     else {\n            val xs = (0 until top).map(i => string.substring(0,\
    \ i + 1) == substring.substring(0, i + 1)).reverse\n            val m = xs.takeWhile(e\
    \ => e).length\n            val e = xs.dropWhile(e => e).length\n            val\
    \ r = xs.dropWhile(e => e).dropWhile(e => !e).length\n            if (e == 0)\
    \ 1 + howManyTimes(string.substring(1), substring)\n            else if (m ==\
    \ e) {\n                val skip = m - r\n                howManyTimes(string.substring(skip),\
    \ substring.substring(skip))\n            }\n            else 1 + howManyTimes(string.substring(1),\
    \ substring)\n        }", '      string.sliding(substring.length).filter(_ ==
    substring).length', "        if (string.length < substring.length) return 0\n\
    \        var counter = 0\n        for (i <- 0 to string.length - substring.length)\
    \ {\n            if (string.substring(i, i + substring.length) == substring) counter\
    \ += 1\n        }\n        return counter", "        var count = 0l\n        for\
    \ (i <- 0 to string.length - substring.length) {\n            var flag = true\n\
    \            for (j <- 0 to substring.length - 1) {\n                if (string(i\
    \ + j) != substring(j)) {\n                    flag = false\n                \
    \    break\n                }\n            }\n            if (flag) count += 1\n\
    \        }\n        return count", "        val pattern = substring.toLowerCase.toList\n\
    \        val text = string.toLowerCase.toList\n        def howManyTimes0(text\
    \ : List[Char], pattern : List[Char], count : Long) : Long = {\n            val\
    \ index = text.indexOfSlice(pattern)\n            if (index != -1) {\n       \
    \         val newCount = count + 1\n                howManyTimes0(text.drop(index\
    \ + 1), pattern, newCount)\n            } else count\n        }\n        howManyTimes0(text,\
    \ pattern, 0)", "        var count = 0l\n        for (i <- 0 to string.length\
    \ - substring.length) {\n            if (string.substring(i, i + substring.length)\
    \ == substring) {\n                count += 1\n            }\n        }\n    \
    \    return count", "        val strlen = string.length\n        val substrlen\
    \ = substring.length\n        var result = 0l\n        for (i <- 0 to strlen -\
    \ substrlen) {\n            val current = string.substring(i, i + substrlen)\n\
    \            if (current == substring) result += 1\n        }\n        return\
    \ result", "        val sub = substring.toArray\n        val str = string.toArray\n\
    \        val lenSub = sub.length\n        val lenStr = str.length\n        var\
    \ count = 0l\n        if (lenSub > lenStr) return 0l\n        var arrayPos = 0\n\
    \        while (arrayPos < lenStr) {\n            var subStrPos = 0\n        \
    \    while (subStrPos < lenSub && arrayPos + subStrPos < lenStr && sub(subStrPos)\
    \ == str(arrayPos + subStrPos)) {\n                subStrPos += 1\n          \
    \  }\n            if (subStrPos == lenSub) count += 1\n            arrayPos +=\
    \ 1\n        }\n        count", "        if (string.length < substring.length)\
    \ return 0l\n        if (string.length == substring.length) return (if (string\
    \ == substring) 1l else 0l)\n        var count = 0l\n        var i = 0\n     \
    \   var stringPrefix = string.substring(0, substring.length)\n        while (stringPrefix\
    \ == substring) {\n            i += substring.length\n            count += 1\n\
    \            if (i == string.length) return count\n            stringPrefix =\
    \ string.substring(i, i + substring.length)\n        }\n        var stringSuffix\
    \ = string.substring(string.length - substring.length, string.length)\n      \
    \  i = string.length - substring.length\n        while (stringSuffix == substring)\
    \ {\n            i -= substring.length\n            count += 1\n            if\
    \ (i < 0) return count\n            stringSuffix = string.substring(i, i + substring.length)\n\
    \        }\n        var j = 0\n        while (i + substring.length < string.length)\
    \ {\n            var k = 0\n            while (string(i + k) == substring(k))\
    \ {\n                k += 1\n                if (k == substring.length) {\n  \
    \                  count += 1\n                    break\n                }\n\
    \            }\n            i += 1\n        }\n        return count", "      \
    \  var count = 0\n        var index = string.indexOf(substring)\n        while\
    \ (index != -1) {\n            count += 1\n            index = string.indexOf(substring,\
    \ index + 1)\n        }\n        return count", "        var result = 0l\n   \
    \     var current = 0\n        while (current < string.length) {\n           \
    \ val index = string.indexOf(substring, current)\n            if (index != -1)\
    \ {\n                result += 1\n                current = index + 1\n      \
    \      } else current = string.length\n        }\n        result", '        return
    string.sliding(substring.length).filter(_ == substring).size', "        // Greedy\
    \ solution. It always works when the substring is a prefix of the string.\n  \
    \      // This one is not the case.\n        // However, here is another algorithm\
    \ based on dynamic programming.\n        // It is guaranteed to work when the\
    \ substring is a prefix of the string.\n        // >>> howManyTimes2((\"\"), (\"\
    a\"))\n        // (0l)\n        // >>> howManyTimes2((\"aaa\"), (\"a\"))\n   \
    \     // (3l)\n        // >>> howManyTimes2((\"aaaa\"), (\"aa\"))\n        //\
    \ (3l)\n        // >>> howManyTimes2((\"\"), (\"\"))\n        // (1l)\n      \
    \  // >>> howManyTimes2((\"\"), (\"aaaa\"))\n        // (0l)\n        // >>> howManyTimes2((\"\
    aaaa\"), (\"\"))\n        // (5l)\n        // >>> howManyTimes2((\"aaaaa\"), (\"\
    \"))\n        // (6l)\n        howManyTimes2(string, substring)", "        var\
    \ count = 0\n        var i = 0\n        while (i < string.length - substring.length\
    \ + 1) {\n            if (string.substring(i, i + substring.length) == substring)\
    \ {\n                count += 1\n                i += substring.length\n     \
    \       }\n            else i += 1\n        }\n        count", "        var count\
    \ = 0l\n        for (i <- 0 to string.length - substring.length) {\n         \
    \   if (string.substring(i, i + substring.length) == substring) count += 1\n \
    \       }\n        return count", "        // \"ab\" --> \"ababababab\" --> \"\
    ababab\"\n        // \"ab\" --> \"abababab\"\n        var times = 0l\n       \
    \ if (string.length > substring.length) {\n            var suffix = string.takeRight(substring.length)\n\
    \            if (suffix == substring) times += 1\n            for (c <- string.dropRight(substring.length).toCharArray)\
    \ {\n                suffix = suffix.drop(1) + c\n                if (suffix ==\
    \ substring) times += 1\n            }\n        }\n        times", "        val\
    \ index = string.indexOf(substring)\n        if (index == -1) {\n            return\
    \ 0l\n        }\n        return 1l + howManyTimes(string.drop(index + 1), substring)",
  "        var c = 0l\n        for (i <- 0 to string.length - substring.length) if\
    \ (string.substring(i, i + substring.length) == substring) c += 1\n        return\
    \ c", "        if (string.length < substring.length) 0l\n        else if (string.length\
    \ == substring.length) {\n            if (string == substring) 1l\n          \
    \  else 0l\n        }\n        else if (string.length == substring.length + 1)\
    \ {\n            if (string.startsWith(substring) || string.endsWith(substring))\
    \ 1l\n            else 0l\n        }\n        else {\n            val mid = (string.length\
    \ - substring.length + 1) / 2\n            var l = 0l\n            for (i <- 0\
    \ until mid) {\n                val flag = true\n                for (j <- 0 until\
    \ substring.length) {\n                    if (string(i + j) != substring(j))\
    \ {\n                        l += 1\n                        val flag = false\n\
    \                        break\n                    }\n                }\n   \
    \             if (flag) l += 1\n            }\n            l + howManyTimes(string.substring(1,\
    \ string.length), substring)\n        }", "        if (string.length < substring.length)\
    \ {\n            return 0\n        }\n        var count = 0\n        for (i <-\
    \ 0 to string.length - substring.length) {\n            if (string.substring(i,\
    \ i + substring.length) == substring) {\n                count += 1\n        \
    \    }\n        }\n        return count", "        var prev = 0\n        var count\
    \ = 0\n        var times = 0\n        for (i <- 1 to string.length) {\n      \
    \      if (string.substring(prev, i).contains(substring)) {\n                count\
    \ += 1\n                prev = i\n            }\n            times += count\n\
    \        }\n        times", "        var count = 0l\n        var i = 0\n     \
    \   while (i < string.length - substring.length + 1) {\n            if (string.substring(i,\
    \ i + substring.length) == substring) {\n                count += 1\n        \
    \        i += substring.length\n            }\n            else i += 1\n     \
    \   }\n        count", "        if (string.length < substring.length) 0l\n   \
    \     else if (string.substring(0, substring.length) == substring) 1l + howManyTimes(string.substring(1),\
    \ substring)\n        else howManyTimes(string.substring(1), substring)", "  \
    \      val lenSub = substring.length\n        val lenStr = string.length\n   \
    \     if (lenSub == 0) 0\n        else if (lenSub > lenStr) 0\n        else {\n\
    \            var ans = 0l\n            var i = 0\n            while (i <= lenStr\
    \ - lenSub) {\n                if (string.substring(i, i + lenSub) == substring)\
    \ {\n                    ans += 1\n                    i += lenSub\n         \
    \       }\n                else i += 1\n            }\n            ans\n     \
    \   }", "        if (string.length == 0 || substring.length == 0) return 0l\n\
    \        var result = 0l\n        var i = 0\n        while (i < string.length\
    \ - substring.length + 1) {\n            if (string.substring(i, i + substring.length)\
    \ == substring) {\n                result += 1\n                i += substring.length\n\
    \            } else i += 1\n        }\n        return result", "        val originalLength\
    \ = string.length\n        val substringLength = substring.length\n        var\
    \ stringIndex = 0\n        var substringIndex = 0\n        var total = 0l\n  \
    \      while (stringIndex < originalLength) {\n            if (string(stringIndex)\
    \ == substring(substringIndex)) {\n                substringIndex += 1\n     \
    \           if (substringIndex == substringLength) {\n                    total\
    \ += 1\n                    substringIndex = 0\n                }\n          \
    \  }\n            else substringIndex = 0\n            stringIndex += 1\n    \
    \    }\n        total", "        def howManyTimesHelper(from : Int, to : Int,\
    \ acc : Long) : Long = {\n            if (from + substring.length <= to) howManyTimesHelper(from\
    \ + 1, to, acc + 1)\n            else acc\n        }\n        howManyTimesHelper(0,\
    \ string.length - substring.length + 1, 0)", '        (string.length() - substring.length()
    + 1).toLong', "        var count = 0l\n        for (i <- 0 to string.length -\
    \ substring.length) {\n            if (string.substring(i, i + substring.length)\
    \ == substring) {\n                count += 1\n            }\n        }\n    \
    \    return count", "        var count = 0l\n        val n = string.length\n \
    \       val m = substring.length\n        for (i <- 0 to n - m) {\n          \
    \  var j = 0\n            while (j < m && string(i + j) == substring(j)) j +=\
    \ 1\n            if (j == m) count += 1\n        }\n        count", "        var\
    \ i = 0\n        var count = 0\n        while (i + substring.length <= string.length)\
    \ {\n            if (string.substring(i, i + substring.length) == substring) {\n\
    \                count += 1\n                i += substring.length\n         \
    \   }\n            else i += 1\n        }\n        count", "        var i = 0\n\
    \        var count = 0\n        while (i < string.length) {\n            if (string.startsWith(substring,\
    \ i)) {\n                count += 1\n                i += substring.length\n \
    \           }\n            else i += 1\n        }\n        count", "        var\
    \ count = 0l\n        var index = 0\n        while (index != -1) {\n         \
    \   index = string.indexOf(substring, index)\n            if (index != -1) {\n\
    \                count += 1\n                index += 1\n            }\n     \
    \   }\n        return count", "        var count = 0l\n        var index = 0\n\
    \        while (index < string.length) {\n            if (string.startsWith(substring,\
    \ index)) {\n                count += 1\n                index += substring.length\n\
    \            }\n            else index += 1\n        }\n        count", "    \
    \    val length = substring.length\n        if (length == 0) {\n            return\
    \ 0\n        }\n        var result = 0\n        for (i <- 0 to string.length -\
    \ length) {\n            if (string.substring(i, i + length) == substring) {\n\
    \                result += 1\n            }\n        }\n        return result",
  "        val n = string.length\n        val m = substring.length\n        val dp\
    \ = Array.fill(n + 1, m + 1)(0l)\n        for (i <- 1 to n) {\n            for\
    \ (j <- 1 to m) {\n                if (string(i - 1) == substring(j - 1)) dp(i)(j)\
    \ = dp(i - 1)(j - 1) + 1\n                else dp(i)(j) = dp(i - 1)(j)\n     \
    \       }\n        }\n        return dp(n)(m)", "        var count = 0l\n    \
    \    for (i <- 0 to string.length - substring.length) {\n            if (string.substring(i,\
    \ i + substring.length) == substring) count += 1\n        }\n        return count",
  '        return string.sliding(substring.length).count(x => x == substring)', '        string.grouped(substring.length).filter(x
    => x == substring).length', "        def howManyTimes(string : String, substring\
    \ : String, index : Int) : Long = {\n            if (index > string.length - substring.length)\
    \ 0\n            else if (string.substring(index, index + substring.length) ==\
    \ substring) 1 + howManyTimes(string, substring, index + 1)\n            else\
    \ howManyTimes(string, substring, index + 1)\n        }\n        howManyTimes(string,\
    \ substring, 0)", "        if (string.length < substring.length) return 0\n  \
    \      var count = 0l\n        for (i <- 0 to string.length - substring.length)\
    \ {\n            if (string.substring(i, i + substring.length) == substring) count\
    \ += 1\n        }\n        return count", "      val lastIndex = string.lastIndexOf(substring)\n\
    \      var count = if (lastIndex == -1) 0 else 1\n      val index = string.indexOf(substring)\n\
    \      if (index != -1) {\n        var position = index + substring.length\n \
    \       while (position < lastIndex) {\n          count += 1\n          position\
    \ += substring.length\n        }\n      }\n      count", "        def howManyTimes(string\
    \ : String, substring : String, count : Long) : Long = {\n            val index\
    \ = string.indexOf(substring)\n            if (index == -1) {\n              \
    \  count\n            } else {\n                howManyTimes(string.substring(index\
    \ + 1), substring, count + 1)\n            }\n        }\n        howManyTimes(string,\
    \ substring, 0)", "    \tif (string.length == 0 || substring.length == 0) return\
    \ 0\n    \tval n = string.length\n    \tval m = substring.length\n    \tval dp\
    \ = Array.ofDim[Int](n, m)\n    \tif (string(0) == substring(0)) dp(0)(0) = 1\n\
    \    \tfor (i <- 1 until n) {\n    \t\tif (string(i) == substring(0)) dp(i)(0)\
    \ = dp(i - 1)(0) + 1\n    \t\telse dp(i)(0) = dp(i - 1)(0)\n    \t}\n    \tfor\
    \ (i <- 1 until n) {\n    \t\tfor (j <- 1 until m) {\n    \t\t\tif (string(i)\
    \ == substring(j)) dp(i)(j) = dp(i - 1)(j) + dp(i - 1)(j - 1)\n    \t\t\telse\
    \ dp(i)(j) = dp(i - 1)(j)\n    \t\t}\n    \t}\n    \tdp(n - 1)(m - 1)"]
stop_tokens:
- "\n    }\n"
