name: HumanEval_157_right_angle_triangle
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given the lengths of the three sides of a triangle. Return true if the three\n\
  \    // sides form a right-angled triangle, false otherwise.\n    // A right-angled\
  \ triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n\
  \    // Example:\n    // >>> rightAngleTriangle((3l), (4l), (5l))\n    // (true)\n\
  \    // >>> rightAngleTriangle((1l), (2l), (3l))\n    // (false)\n    def rightAngleTriangle(a\
  \ : Long, b : Long, c : Long) : Boolean = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
  \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n\
  \    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l),\
  \ (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) ==\
  \ (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
  \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) ==\
  \ (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n   \
  \ assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
  \ (2l), (10l)) == (false));\n    }\n\n}\n"
completions: ["        val x = a * a\n        val y = b * b\n        val z = c * c\n\
    \        if (x + y == z || x + z == y || y + z == x) return true\n        return\
    \ false", "        var t = Array(a, b, c).sorted\n        t(0) * t(0) + t(1) *\
    \ t(1) == t(2) * t(2)", "        val list = List(a, b, c)\n        val sqrlist\
    \ = list.map(x => x * x)\n        if (sqrlist.reduceLeft(_ + _) == sqrlist.sort(_\
    \ < _).dropRight(1).reduceLeft(_ + _)) true else false", "        // (a * a) +\
    \ (b * b) == (c * c)\n        val max = List(a, b, c).max\n        val min = List(a,\
    \ b, c).min\n        val mid = List(a, b, c).filter(x => x != max && x != min).head\n\
    \        max * max == mid * mid + min * min", "        if (a == 0 || b == 0 ||\
    \ c == 0) return false\n        var (x, y, z) = (a, b, c)\n        if (a > b)\
    \ {\n            x = b\n            y = a\n        }\n        if (y > c) {\n \
    \           z = y\n            y = c\n        }\n        if (x > y) {\n      \
    \      var tmp = x\n            x = y\n            y = tmp\n        }\n      \
    \  (x * x + y * y == z * z) || (x * x + z * z == y * y) || (z * z + y * y == x\
    \ * x)", "        val ll = List(a, b, c).sorted\n        ll(0) * ll(0) + ll(1)\
    \ * ll(1) == ll(2) * ll(2)", "        val sides = List(a, b, c).sorted\n     \
    \   val a2 = pow(sides(0), 2)\n        val b2 = pow(sides(1), 2)\n        val\
    \ c2 = pow(sides(2), 2)\n        return a2 + b2 == c2", "        val list = List(a,\
    \ b, c)\n        val hypotenuse = list.max\n        if (hypotenuse == 0) return\
    \ false\n        val square = list.map(x => x * x).sum\n        square == hypotenuse\
    \ * hypotenuse", "        if (a < b) {\n            if (a < c) {\n           \
    \     // a is the smallest\n                return a * a + b * b == c * c\n  \
    \          } else {\n                // c is the smallest\n                return\
    \ c * c + b * b == a * a\n            }\n        } else {\n            if (b <\
    \ c) {\n                // b is the smallest\n                return b * b + a\
    \ * a == c * c\n            } else {\n                // c is the smallest\n \
    \               return c * c + a * a == b * b\n            }\n        }", "  \
    \      val sides = List(a, b, c).sorted\n        val x = sides(0)\n        val\
    \ y = sides(1)\n        val z = sides(2)\n        x * x + y * y == z * z", " \
    \       if (a == 0 || b == 0 || c == 0) return false\n        if (a == b && b\
    \ == c) return false\n        if (a == b && sqrt(a.toDouble * a.toDouble + b.toDouble\
    \ * b.toDouble) == c) return true\n        if (a == c && sqrt(a.toDouble * a.toDouble\
    \ + c.toDouble * c.toDouble) == b) return true\n        if (b == c && sqrt(b.toDouble\
    \ * b.toDouble + c.toDouble * c.toDouble) == a) return true\n        return false",
  "        // Fill Up this function body\n        // `a`, `b`, `c` represents the\
    \ length of three sides of a triangle.\n        val l = List(a, b, c)\n      \
    \  l.map(pow(_, 2)).sorted match {\n            case x :: y :: z :: Nil => z ==\
    \ x + y\n            case _ => false\n        }", "        val sides = List(a,\
    \ b, c).sorted\n        val x = sides(0)\n        val y = sides(1)\n        val\
    \ z = sides(2)\n        x * x + y * y == z * z", "        // The Pythagorean theorem\
    \ states that in a right-angled triangle, \n        // the square of the hypotenuse\
    \ (the side opposite the right angle) is \n        // equal to the sum of the\
    \ squares of the other two sides.\n        val squareSum = a * a + b * b\n   \
    \     val c2 = c * c\n        if (squareSum == c2) true\n        else if (squareSum\
    \ < c2) false\n        else rightAngleTriangle(b, c, a)", "        if (a > b &&\
    \ a > c)\n            return pow(a, 2) == pow(b, 2) + pow(c, 2)\n        else\
    \ if (b > a && b > c)\n            return pow(b, 2) == pow(a, 2) + pow(c, 2)\n\
    \        else\n            return pow(c, 2) == pow(a, 2) + pow(b, 2)", "     \
    \   if(a > b && a > c) {\n            a*a == b*b + c*c\n        } else if(b >\
    \ a && b > c) {\n            b*b == a*a + c*c\n        } else {\n            c*c\
    \ == a*a + b*b\n        }", '        return ((a * a + b * b == c * c) || (a *
    a + c * c == b * b) || (b * b + c * c == a * a))', "        // hint: if a^2 +\
    \ b^2 = c^2 then the triangle has a right angle\n        return false", '        return
    (a + b > c && a + c > b && b + c > a) && (a * a + b * b == c * c || a * a + c
    * c == b * b || b * b + c * c == a * a)', "        val l = List(a, b, c)\n   \
    \     l.max == l.sum - l.max && l.max * l.max == l.filter(_ != l.max).map(_ *\
    \ _).sum", "        // BEGIN SOLUTION\n        if (a <= 0 || b <= 0 || c <= 0)\
    \ return false\n        val sides = List(a, b, c).sorted\n        sides(0) * sides(0)\
    \ + sides(1) * sides(1) == sides(2) * sides(2)\n        // END SOLUTION", '        (a
    * a) + (b * b) == (c * c)', "        // Fill Up this function body\n        //\
    \ `a`, `b`, `c` are the lengths of the three sides of a triangle\n        // return\
    \ true if the three sides form a right-angled triangle, false otherwise\n    \
    \    // Assume all parameters are positive integers\n        val sides = List(a,\
    \ b, c).sorted\n        sides(0) * sides(0) + sides(1) * sides(1) == sides(2)\
    \ * sides(2)", '        (a*a + b*b == c*c) || (a*a + c*c == b*b) || (b*b + c*c
    == a*a)', "        // Fill up this function body\n        // `a`, `b` and `c`\
    \ are lengths of the three sides of a triangle.\n        if (a == 0 || b == 0\
    \ || c == 0) return false\n        if (a + b <= c || a + c <= b || b + c <= a)\
    \ return false\n        val maxSide = max(a, max(b, c))\n        if (maxSide ==\
    \ a) (a*a == b*b + c*c)\n        else if (maxSide == b) (b*b == a*a + c*c)\n \
    \       else (c*c == a*a + b*b)", "        // Your code here!\n        return\
    \ false", "    \t(a*a + b*b == c*c) || (a*a + c*c == b*b) || (b*b + c*c == a*a)",
  "        // Your Answer Here\n        var list = List(a, b, c)\n        list = list.sortWith(_\
    \ > _)\n        if (pow(list(0), 2).toLong == pow(list(1), 2).toLong + pow(list(2),\
    \ 2).toLong) return true\n        else return false", "        // Your code goes\
    \ here...\n        var list = List(a, b, c)\n        list = list.sorted\n    \
    \    var a1 = list(0)\n        var b1 = list(1)\n        var c1 = list(2)\n  \
    \      return a1 * a1 + b1 * b1 == c1 * c1", "        var c2 = List(pow(a, 2).toLong,\
    \ pow(b, 2).toLong, pow(c, 2).toLong)\n        var c2_map = HashMap[Long, Long]()\n\
    \        for (e <- c2) {\n            if (c2_map.contains(e)) c2_map(e) += 1\n\
    \            else c2_map += (e -> 1)\n        }\n        var kv = c2_map.toList.sortBy(_._1)\n\
    \        if (kv(2)._2 == 2) return true\n        else return false", "       \
    \ val x = pow(a, 2)\n        val y = pow(b, 2)\n        val z = pow(c, 2)\n  \
    \      (x + y == z) || (x + z == y) || (y + z == x)", "        val arr = Array(a,\
    \ b, c)\n        if (arr.sorted(Ordering.Long.reverse).head == arr.sorted(Ordering.Long.reverse)(1)\
    \ + arr.sorted(Ordering.Long.reverse)(2)) true else false", "      val s = Array(a,\
    \ b, c).sorted\n      s(0) * s(0) + s(1) * s(1) == s(2) * s(2)", "        // Fill\
    \ up this function body\n        // You can add another function as well, if required\n\
    \        var right : Boolean = false\n        if(a*a + b*b == c*c)\n        {\n\
    \            right = true\n        }\n        else if(a*a + c*c == b*b)\n    \
    \    {\n            right = true\n        }\n        else if(b*b + c*c == a*a)\n\
    \        {\n            right = true\n        }\n        return right", '        return
    (pow(a, 2) + pow(b, 2) == pow(c, 2))', "        // Fill Up this function body\n\
    \        // `0` is a placeholder for your solution\n        if(pow(a, 2) + pow(b,\
    \ 2) == pow(c, 2)) true\n        else if(pow(a, 2) + pow(c, 2) == pow(b, 2)) true\n\
    \        else if(pow(b, 2) + pow(c, 2) == pow(a, 2)) true\n        else false",
  "        val sides = List(a, b, c).sorted\n        val square = (x : Long) => x\
    \ * x\n        square(sides(0)) + square(sides(1)) == square(sides(2))", "   \
    \     var result = false\n        val set = ArrayBuffer[Long]()\n        set +=\
    \ a\n        set += b\n        set += c\n        set.sorted\n        if (set(0)\
    \ * set(0) + set(1) * set(1) == set(2) * set(2)) {\n            result = true\n\
    \        }\n        return result", "        // Precondition: a, b, c > 0\n  \
    \      val small = if (a < b) {if (a < c) a else c} else {if (b < c) b else c}\n\
    \        val medium = if (a > b) {if (a < c) a else c} else {if (b < c) b else\
    \ c}\n        val large = if (a > b) {if (a > c) a else c} else {if (b > c) b\
    \ else c}\n        small*small + medium*medium == large*large", '        (pow(a,
    2) + pow(b, 2) == pow(c, 2)) || (pow(b, 2) + pow(c, 2) == pow(a, 2)) || (pow(c,
    2) + pow(a, 2) == pow(b, 2))', "        // your code here\n        val l = List(a,\
    \ b, c)\n        l.sum - l.max < l.max && l.sum - l.max - l.min >= l.min && l.sum\
    \ - l.max - l.min - l.max >= l.max", '        return (a * a + b * b == c * c)',
  '        return true', "        val largest = List(a, b, c).max\n        val rest\
    \ = List(a, b, c).filter(_ != largest)\n        val zipped = rest.map(x => List(x,\
    \ x))\n        val minus = zipped.map(x => List(x(0) - x(1), x(0) - x(1)))\n \
    \       val squares = minus.map(x => List(x(0) * x(0), x(1) * x(1)))\n       \
    \ val sum = squares.map(x => x(0) + x(1))\n        val largestSquare = List(largest\
    \ * largest).map(x => List(x, x))\n        val minusLargest = largestSquare.map(x\
    \ => List(x(0) - x(1), x(0) - x(1)))\n        val squaresLargest = minusLargest.map(x\
    \ => List(x(0) * x(0), x(1) * x(1)))\n        val sumLargest = squaresLargest.map(x\
    \ => x(0) + x(1))\n        sum == sumLargest", '        return (a * a + b * b
    == c * c || b * b + c * c == a * a || c * c + a * a == b * b)', "        // Your\
    \ code goes here\n        return false", "        val x = List(a, b, c)\n    \
    \    x.max == Math.sqrt(x.min * x.min + x.filter(e => e != x.max && e != x.min).head\
    \ * x.filter(e => e != x.max && e != x.min).head)", '        return a*a + b*b
    == c*c', "        var sides = ListBuffer[Long]()\n        sides += a\n       \
    \ sides += b\n        sides += c\n        sides = sides.sorted\n        sides(0)\
    \ * sides(0) + sides(1) * sides(1) == sides(2) * sides(2)", "        // Fill Up\
    \ this function body\n        // `a` `b` `c` are the sides of the triangle\n \
    \       def squared(l : Long) = l * l\n        squared(a) + squared(b) == squared(c)",
  "        var array = Array(a, b, c)\n        var maxIndex = array.indexOf(array.max)\n\
    \        array(maxIndex) = 0\n        var sum = array.sum\n        return maxIndex\
    \ match {\n            case 0 => a == sum\n            case 1 => b == sum\n  \
    \          case 2 => c == sum\n        }", '        return ((a + b > c) && (a
    + c > b) && (b + c > a) && (pow(a, 2) + pow(b, 2) == pow(c, 2)) || (pow(a, 2)
    + pow(c, 2) == pow(b, 2)) || (pow(b, 2) + pow(c, 2) == pow(a, 2)))', "       \
    \ // Write your code here\n        var arr = List(a, b, c)\n        arr = arr.sorted\n\
    \        val x = arr(0)\n        val y = arr(1)\n        val z = arr(2)\n    \
    \    return x * x + y * y == z * z", "        var A = List(a, b, c)\n        A\
    \ = A.sorted\n        return A(0) * A(0) + A(1) * A(1) == A(2) * A(2)", "    \
    \    // Fill Up this function body\n        // `a` represents the length of side\
    \ a\n        // `b` represents the length of side b\n        // `c` represents\
    \ the length of side c\n        return false", "        def pow2(x : Long) = x\
    \ * x\n        if (pow2(a) + pow2(b) == pow2(c)) true\n        else if (pow2(a)\
    \ + pow2(c) == pow2(b)) true\n        else if (pow2(b) + pow2(c) == pow2(a)) true\n\
    \        else false", "        var x = a.toInt\n        var y = b.toInt\n    \
    \    var z = c.toInt\n        var lst = List(x, y, z)\n        lst = lst.sorted\n\
    \        if (lst(0)*lst(0) + lst(1)*lst(1) == lst(2)*lst(2)) return true\n   \
    \     else return false", "        // Fill Up this function body\n        // `a`,\
    \ `b`, `c` are the side lengths of the triangle\n        // Your code here\n \
    \       val d = List(a, b, c).sorted\n        val x = d(0)\n        val y = d(1)\n\
    \        val z = d(2)\n        z * z == x * x + y * y", "    \tval sides = List(a,\
    \ b, c).sorted;\n    \tsides(0) * sides(0) + sides(1) * sides(1) == sides(2) *\
    \ sides(2)", "      if (a <= 0 || b <= 0 || c <= 0) return false\n      // If\
    \ a^2 + b^2 = c^2, then it is a right-angled triangle.\n      if (pow(a, 2) +\
    \ pow(b, 2) == pow(c, 2)) return true\n      if (pow(b, 2) + pow(c, 2) == pow(a,\
    \ 2)) return true\n      if (pow(c, 2) + pow(a, 2) == pow(b, 2)) return true\n\
    \      return false", "        // Fill Up this function body\n        // `a` is\
    \ the largest side\n        val sorted_l = List(a, b, c).sorted\n        val a\
    \ = sorted_l(2)\n        val b = sorted_l(1)\n        val c = sorted_l(0)\n  \
    \      val cond = ((a * a) == (b * b) + (c * c))\n        cond", "        var\
    \ array = new Array[Long](3)\n        array(0) = a\n        array(1) = b\n   \
    \     array(2) = c\n        array = array.sortWith(_ < _)\n        if (array(0)\
    \ + array(1) > array(2)) {\n            val a = array(0)\n            val b =\
    \ array(1)\n            val c = array(2)\n            if (a * a + b * b == c *\
    \ c) true else false\n        } else false", "        val (x, y, z) = if (a >\
    \ b) {\n            if (a > c) (a, b, c) else (c, b, a)\n        } else {\n  \
    \          if (b > c) (b, a, c) else (c, a, b)\n        }\n        if (x * x ==\
    \ y * y + z * z) true else false", "        // Write your code here\n        val\
    \ angleA = acos((b * b + c * c - a * a) / (2 * b * c)) * 180 / Pi\n        val\
    \ angleB = acos((a * a + c * c - b * b) / (2 * a * c)) * 180 / Pi\n        val\
    \ angleC = acos((a * a + b * b - c * c) / (2 * a * b)) * 180 / Pi\n        val\
    \ maxAngle = List(angleA, angleB, angleC).max\n        maxAngle == 90", "    \
    \    // No square root needed\n        //a*a + b*b == c*c\n        a*a + b*b ==\
    \ c*c", "        val lst = List(a, b, c).sorted\n        lst(0) * lst(0) + lst(1)\
    \ * lst(1) == lst(2) * lst(2)", "        var sl = List[Long](a, b, c)\n      \
    \  sl = sl.sorted\n        val a2 = sl(0) * sl(0)\n        val b2 = sl(1) * sl(1)\n\
    \        val c2 = sl(2) * sl(2)\n        a2 + b2 == c2", "        // Write your\
    \ code here\n        return true", "        if (pow(a, 2) + pow(b, 2) == pow(c,\
    \ 2)) return true\n        if (pow(a, 2) + pow(c, 2) == pow(b, 2)) return true\n\
    \        if (pow(b, 2) + pow(c, 2) == pow(a, 2)) return true\n        return false",
  "        // Your Code Here\n        return false", "        // Your code here\n\
    \        false", "        if (a + b > c && a + c > b && b + c > a)\n         \
    \   a * a + b * b == c * c || b * b + c * c == a * a || c * c + a * a == b * b\n\
    \        else false", "        val x = List(a, b, c)\n        val l = x.max\n\
    \        x.filter(_ != l).foldLeft(l)((x, y) => {\n            val v = sqrt(pow(x,\
    \ 2.0) - pow(y, 2.0))\n            if (v % 1.0 == 0.0) return true\n         \
    \   v\n        })\n        false", "        // Fill in definition here\n     \
    \   return a*a + b*b == c*c || b*b + c*c == a*a || c*c + a*a == b*b", "      \
    \  val list = List(a, b, c)\n        if (list.contains(0)) false\n        else\
    \ if (list.max > list.min * 2) false\n        else {\n            val list2 =\
    \ list.sorted\n            val c2 = list2(2)\n            val a2 = list2(0)\n\
    \            val b2 = list2(1)\n            if (a2 * a2 + b2 * b2 == c2 * c2)\
    \ true\n            else false\n        }", "        val x = a * a\n        val\
    \ y = b * b\n        val z = c * c\n        (x + y == z) || (x + z == y) || (y\
    \ + z == x)", "        // Fill Up this function body\n        // `0` is the code\
    \ for false\n        // `1` is the code for true\n        1 - ((pow(a, 2) + pow(b,\
    \ 2)) - pow(c, 2)).toInt", "        if (a < 0 || b < 0 || c < 0) return false\n\
    \        if (a > b && a > c)\n            return a * a == b * b + c * c\n    \
    \    else if (b > a && b > c)\n            return b * b == a * a + c * c\n   \
    \     else if (c > a && c > b)\n            return c * c == a * a + b * b\n  \
    \      else return false", "        // Implement this placeholder.\n        return\
    \ true", "        val sides = Vector(a, b, c).sorted\n        val c2 = sides(2)\n\
    \        val c1 = sides(1)\n        val c0 = sides(0)\n        c2 * c2 == c1 *\
    \ c1 + c0 * c0", "        val nums = Array(a, b, c)\n        val nums2 = nums.sorted\n\
    \        nums2(0) * nums2(0) + nums2(1) * nums2(1) == nums2(2) * nums2(2)", " \
    \       if (a * a + b * b == c * c) return true\n        if (a * a + c * c ==\
    \ b * b) return true\n        if (b * b + c * c == a * a) return true\n      \
    \  return false", "        // Fill in the missing code here.\n        var S =\
    \ List(a, b, c).sorted\n        var d = S(0)\n        var e = S(1)\n        var\
    \ f = S(2)\n        if (d * d + e * e == f * f) true else false", "        val\
    \ s : Array[Long] = Array(a, b, c).sorted\n        return (s(0) * s(0) + s(1)\
    \ * s(1) == s(2) * s(2))", "        val sorted = List(a, b, c).sorted\n      \
    \  sorted(0) * sorted(0) + sorted(1) * sorted(1) == sorted(2) * sorted(2)", " \
    \   \t(a * a + b * b == c * c) || (b * b + c * c == a * a) || (c * c + a * a ==\
    \ b * b)", '        // Fill in the missing code', "        val list = List(a,\
    \ b, c)\n        val sorted = list.sorted\n        val a2 = sorted(0)\n      \
    \  val b2 = sorted(1)\n        val c2 = sorted(2)\n        val c2max = b2 * b2\
    \ + a2 * a2\n        return c2 * c2 == c2max", "        if (a + b > c && a + c\
    \ > b && b + c > a) {\n            if (a * a + b * b == c * c || a * a + c * c\
    \ == b * b || b * b + c * c == a * a) true else false\n        } else false",
  "        val s : List[Long] = List(a, b, c).sorted;\n        return (s(0) * s(0)\
    \ + s(1) * s(1) == s(2) * s(2));", '        return (a * a + b * b == c * c ||
    a * a + c * c == b * b || b * b + c * c == a * a)', "        val side = List(a,\
    \ b, c).sorted\n        return side(0) * side(0) + side(1) * side(1) == side(2)\
    \ * side(2)", "        // Your code here\n        if (a < 0 || b < 0 || c < 0)\
    \ {\n            false\n        } else {\n            val max = List(a, b, c).max\n\
    \            if (a != max && b != max && c != max) {\n                if (a *\
    \ a + b * b == c * c) {\n                    true\n                } else if (a\
    \ * a + c * c == b * b) {\n                    true\n                } else if\
    \ (b * b + c * c == a * a) {\n                    true\n                } else\
    \ {\n                    false\n                }\n            } else {\n    \
    \            false\n            }\n        }", '        return a*a + b*b == c*c',
  "        val nums = List(a, b, c).sorted\n        (nums(0) + nums(1)) > nums(2)\
    \ && (nums(0) * nums(0) + nums(1) * nums(1)) == nums(2) * nums(2)", "        //\
    \ Check whether the given triangle is right-angled or not.\n        def rightAngleTriangleCheck(num1\
    \ : Long, num2 : Long, num3 : Long) : Boolean = {\n            // The number of\
    \ inputs must be three.\n            if (num1 == 0l || num2 == 0l || num3 == 0l)\
    \ {\n                false\n            } else {\n                val (max, _,\
    \ _) = maxTuple(num1, num2, num3)\n                val maxSquare = max * max\n\
    \                val sumSquare = num1 * num1 + num2 * num2 + num3 * num3 - maxSquare\n\
    \                maxSquare == sumSquare\n            }\n        }\n        //\
    \ Find the maximum value and return the result.\n        def maxTuple(num1 : Long,\
    \ num2 : Long, num3 : Long) : (Long, Long, Long) = {\n            val maxNum =\
    \ max(num1, max(num2, num3))\n            val minNum1 = min(num1, num2)\n    \
    \        val minNum2 = min(num2, num3)\n            val minNum3 = min(num1, num3)\n\
    \            val minNum = min(minNum1, min(minNum2, minNum3))\n            val\
    \ midNum = (num1 + num2 + num3) - maxNum - minNum\n            (maxNum, midNum,\
    \ minNum)\n        }\n        // Main operation.\n        val (x, y, z) = maxTuple(a,\
    \ b, c)\n        rightAngleTriangleCheck(x, y, z)", "        // >>> Write Your\
    \ Code Here <<<\n        return if (a * a + b * b == c * c) true else false",
  "        var maxLeng = max(a, max(b, c))\n        var minLeng = min(a, min(b, c))\n\
    \        var midLeng = a + b + c - maxLeng - minLeng\n        maxLeng * maxLeng\
    \ == minLeng * minLeng + midLeng * midLeng", "      var (s1, s2, s3) = (a, b,\
    \ c)\n      if (s1 > s2) {\n        val temp = s1\n        s1 = s2\n        s2\
    \ = temp\n      }\n      if (s2 > s3) {\n        val temp = s2\n        s2 = s3\n\
    \        s3 = temp\n      }\n      if (s1 > s2) {\n        val temp = s1\n   \
    \     s1 = s2\n        s2 = temp\n      }\n      (s1*s1 + s2*s2 == s3*s3)", " \
    \     if (a + b < c || a + c < b || b + c < a) false\n      else if (a == 0 ||\
    \ b == 0 || c == 0) false\n      else {\n        val s = List(a, b, c).sorted\n\
    \        val x = pow(s(0), 2)\n        val y = pow(s(1), 2)\n        val z = pow(s(2),\
    \ 2)\n        if (x + y == z) true\n        else false\n      }", "        val\
    \ seq = List(a, b, c).sorted\n        val hyp = seq(2)\n        val side = (seq(0)\
    \ * seq(0)) + (seq(1) * seq(1))\n        if (hyp * hyp == side) true else false",
  "        if (a > b && a > c) a*a == b*b + c*c\n        else if (b > a && b > c)\
    \ b*b == a*a + c*c\n        else c*c == a*a + b*b", "        // Fill in your code\
    \ here\n        val sides = Array(a, b, c)\n        sides.sortWith((a, b) => a\
    \ < b)\n        val max = sides(2)\n        val mid = sides(1)\n        val min\
    \ = sides(0)\n        max * max == mid * mid + min * min", "        var arr =\
    \ List(a, b, c).sorted\n        return arr(0) * arr(0) + arr(1) * arr(1) == arr(2)\
    \ * arr(2)", "        val arr = List(a, b, c).sorted\n        (arr(0) * arr(0)\
    \ + arr(1) * arr(1)) == arr(2) * arr(2)", "    \tvar s = Array(a, b, c)\n    \t\
    s.sortWith(_ < _)\n    \tif (s(0) * s(0) + s(1) * s(1) == s(2) * s(2)) {\n   \
    \ \t\ttrue\n    \t} else {\n    \t\tfalse\n    \t}", "        // Your Answer Here\n\
    \        val lst = List(a, b, c).sorted\n        val lst2 = lst.map(n => n * n)\n\
    \        lst2(0) + lst2(1) == lst2(2)", "        // Your Code Here.\n        return\
    \ false", "        var a2 = a * a\n        var b2 = b * b\n        var c2 = c\
    \ * c\n        if (a2 + b2 == c2 || a2 + c2 == b2 || b2 + c2 == a2) true else\
    \ false", "        // Your code goes here\n        return true", "        // Your\
    \ code goes here\n        false", "        var (a2, b2, c2) = (a * a, b * b, c\
    \ * c)\n        if (a2 + b2 == c2 || a2 + c2 == b2 || b2 + c2 == a2)\n       \
    \     return true\n        return false", "        val sides = Seq(a, b, c).sorted\n\
    \        sides(0) * sides(0) + sides(1) * sides(1) == sides(2) * sides(2)", '        (a*a
    + b*b == c*c) || (a*a + c*c == b*b) || (b*b + c*c == a*a)', "        val max =\
    \ List(a, b, c).max\n        val rest = List(a, b, c).filter(_ != max)\n     \
    \   max * max == rest(0) * rest(0) + rest(1) * rest(1)", "        var aa = a *\
    \ a\n        var bb = b * b\n        var cc = c * c\n        var ret = false\n\
    \        if(aa == bb + cc) ret = true\n        if(bb == aa + cc) ret = true\n\
    \        if(cc == aa + bb) ret = true\n        return ret", '        true', '        if(a
    * a + b * b == c * c) true else false', "        val sorted = List(a, b, c).sorted\n\
    \        val hypotenuse = sorted(2)\n        val opposite = sorted(1)\n      \
    \  val adjacent = sorted(0)\n        hypotenuse * hypotenuse == opposite * opposite\
    \ + adjacent * adjacent", "        // Fill in the code to implement the function\n\
    \        // Fill in the code to implement the function\n\t  if(a*a+b*b==c*c||a*a+c*c==b*b||b*b+c*c==a*a)\n\
    \t    return true\n\t  else\n\t    return false", "        val arr = Array(a,\
    \ b, c)\n        val x = arr.sorted\n        if(pow(x(0), 2) + pow(x(1), 2) ==\
    \ pow(x(2), 2)) true else false", "        // Make use of the pythagorean theorem\n\
    \        return pow(a, 2.0) + pow(b, 2.0) == pow(c, 2.0)", "        // Your code\
    \ goes here\n        // Fill up this function body\n        // It should return\
    \ a boolean value \n        // If a right-angled triangle of three given lengths\
    \ is formable, return true\n        // If not, return false\n        //\n    \
    \    if(a > b)\n        {\n            if(a > c)\n            {\n            \
    \    if(a*a == b*b + c*c)\n                {\n                    return true\n\
    \                }\n                else\n                {\n                \
    \    return false\n                }\n            }\n            else\n      \
    \      {\n                if(c*c == a*a + b*b)\n                {\n          \
    \          return true\n                }\n                else\n            \
    \    {\n                    return false\n                }\n            }\n \
    \       }\n        else\n        {\n            if(b > c)\n            {\n   \
    \             if(b*b == a*a + c*c)\n                {\n                    return\
    \ true\n                }\n                else\n                {\n         \
    \           return false\n                }\n            }\n            else\n\
    \            {\n                if(c*c == a*a + b*b)\n                {\n    \
    \                return true\n                }\n                else\n      \
    \          {\n                    return false\n                }\n          \
    \  }\n        }", '        ???', '        return false', "        if (a + b <=\
    \ c || a + c <= b || b + c <= a) return false\n        if (a == b && b == c) return\
    \ false\n        val max = if (a >= b && a >= c) a else if (b >= a && b >= c)\
    \ b else c\n        val maxIndex = if (a == max) 0 else if (b == max) 1 else 2\n\
    \        val sumOfSquares = pow(a, 2) + pow(b, 2) + pow(c, 2)\n        val maxSquare\
    \ = pow(max, 2)\n        sumOfSquares - maxSquare == maxSquare", "        // your\
    \ code here\n        return true", "        val sides = List(a, b, c).sorted\n\
    \        sides.last == sqrt(sides.head * sides.head + sides(1) * sides(1))", " \
    \     val l = List(a, b, c).sorted\n      val c2 = l(2)\n      val c1 = l(1)\n\
    \      val c0 = l(0)\n      val result = c2 * c2 == c1 * c1 + c0 * c0\n      result",
  "        // Fill up this function body\n        // `a` for the length of the first\
    \ side\n        // `b` for the length of the second side\n        // `c` for the\
    \ length of the third side\n        // You can declare other local variables\n\
    \        // Note that the function signature is\n        // `rightAngleTriangle(a\
    \ : Long, b : Long, c : Long) : Boolean`\n        // i.e. the function name is\
    \ `rightAngleTriangle`\n        // the arguments are all of type `Long`\n    \
    \    // and it returns a value of type `Boolean`\n        val A = a*a\n      \
    \  val B = b*b\n        val C = c*c\n        return (A == B + C) || (B == A +\
    \ C) || (C == A + B)", '        return (a * a + b * b == c * c)', "        //\
    \ A triangle can never be considered a right-angled triangle if any of its\n \
    \       // sides are of a smaller length than the sum of the other two.\n    \
    \    if ((a + b < c) || (a + c < b) || (b + c < a)) {\n            return false\n\
    \        }\n        // The Pythagorean theorem specifies that the square of the\
    \ length of the \n        // hypotenuse of a right-angled triangle is equal to\
    \ the sum of the squares \n        // of the lengths of the other two sides. We\
    \ can use this fact to determine\n        // whether the given triangle is a right-angled\
    \ triangle.\n        if ((a * a + b * b == c * c) || (a * a + c * c == b * b)\
    \ || (b * b + c * c == a * a)) {\n            return true\n        }\n       \
    \ return false", "        // The sum of the squares of the lengths of the two\
    \ shorter sides of a triangle\n        // is equal to the square of the length\
    \ of the hypotenuse.\n        (a*a + b*b == c*c) || (a*a + c*c == b*b) || (b*b\
    \ + c*c == a*a)", '        return c == sqrt(a * a + b * b)', "        val sorted\
    \ = List(a, b, c).sorted\n        sorted(0) * sorted(0) + sorted(1) * sorted(1)\
    \ == sorted(2) * sorted(2)", "        //if((pow(a, 2) + pow(b, 2)) == pow(c, 2))\
    \ true else false\n        // if a^2 + b^2 = c^2 it is a right angled triangle\n\
    \        val ab : Long = pow(a, 2).toLong + pow(b, 2).toLong\n        ab == pow(c,\
    \ 2).toLong", "        // Fill Up this function body\n        // `a`, `b`, `c`\
    \ are the sides of a triangle\n        val l = List(a, b, c)\n        val (small,\
    \ big) = l.sorted.splitAt(2)\n        small.map(x => x * x).sum == big.map(x =>\
    \ x * x).sum", '        return true', "        // Your Code Here\n        var\
    \ list = List(a, b, c)\n        var max = list.max\n        list.remove(list.indexOf(max))\n\
    \        max = max * max\n        var sum = 0l\n        for (i <- list) {\n  \
    \          sum += i * i\n        }\n        if (sum == max) return true\n    \
    \    else return false", '        return (a * a + b * b == c * c || a * a + c
    * c == b * b || b * b + c * c == a * a)', "        val m = Map[Long, Long](a ->\
    \ a * a, b -> b * b, c -> c * c)\n        val sorted = m.toList.sortBy(-_._2)\n\
    \        val x = sorted(0)._2\n        val y = sorted(1)._2\n        val z = sorted(2)._2\n\
    \        x == y + z", "        // Your code here\n        null", "        // Your\
    \ answer here\n        return false", '        a * a + b * b == c * c', "    \
    \    // Find the longest side.\n        val max = List(a, b, c).max\n        //\
    \ Find the length of the other two sides.\n        val rest = List(a, b, c).sorted.slice(0,\
    \ 2)\n        // Return true if (x ^ 2 + y ^ 2 == z ^ 2).\n        rest(0) * rest(0)\
    \ + rest(1) * rest(1) == max * max", "        val sorted = List(a, b, c).sorted\n\
    \        sorted(0) * sorted(0) + sorted(1) * sorted(1) == sorted(2) * sorted(2)",
  "        var A = a\n        var B = b\n        var C = c\n        if (A > B) {\n\
    \            val t = A\n            A = B\n            B = t\n        }\n    \
    \    if (A > C) {\n            val t = A\n            A = C\n            C = t\n\
    \        }\n        if (B > C) {\n            val t = B\n            B = C\n \
    \           C = t\n        }\n        (A * A + B * B == C * C)", "        // The\
    \ Pythagorean theorem:\n        // a^2 + b^2 = c^2\n        val sides = List(a,\
    \ b, c)\n        val sortedSides = sides.sorted\n        val a = sortedSides(0)\n\
    \        val b = sortedSides(1)\n        val c = sortedSides(2)\n        val isRightAngleTriangle\
    \ = a * a + b * b == c * c\n        return isRightAngleTriangle", "        val\
    \ l = List(a, b, c)\n        val max = l.max\n        l.filter(e => e != max).reduce(_\
    \ + _) == max", "        if (a == 0 || b == 0 || c == 0) {\n            return\
    \ false\n        }\n        val numbers = List(a, b, c).sorted\n        val x\
    \ = numbers(0)\n        val y = numbers(1)\n        val z = numbers(2)\n     \
    \   x * x + y * y == z * z", '        return a * a + b * b == c * c', "      \
    \  val x = List(a, b, c)\n        var x1 = 0l\n        var x2 = 0l\n        if\
    \ (x.max == a) {\n            x1 = b\n            x2 = c\n        } else if (x.max\
    \ == b) {\n            x1 = a\n            x2 = c\n        } else {\n        \
    \    x1 = a\n            x2 = b\n        }\n        x1 * x1 + x2 * x2 == x.max\
    \ * x.max", "        // Edit this line to return the correct result.\n       \
    \ false", '        return ((a * a) + (b * b) == (c * c))', "        // Fill in\
    \ the code for this function.\n        // You are allowed to use the predefined\
    \ function: sqrt\n        if (a > 0 && b > 0 && c > 0)\n            if (a * a\
    \ + b * b == c * c || b * b + c * c == a * a || c * c + a * a == b * b) true\n\
    \            else false\n        else false", '        if (a * a + b * b == c
    * c) true else false', "        val sides = ArrayBuffer(a, b, c)\n        sides.sort((x,\
    \ y) => x.compareTo(y))\n        val hyp = sides(2)\n        val cat1 = sides(0)\n\
    \        val cat2 = sides(1)\n        if (hyp * hyp == cat1 * cat1 + cat2 * cat2)\
    \ true else false", "        var s:Array[Long] = Array(a, b, c)\n        s = s.sorted\n\
    \        var p = s(0) * s(0) + s(1) * s(1)\n        p == s(2) * s(2)", '        throw
    new NotImplementedError()', "        var max : Long = a max b max c\n        var\
    \ min : Long = a min b min c\n        var mid : Long = (a + b + c) - (max + min)\n\
    \        if(min * min + mid * mid == max * max) return true\n        return false",
  "        // Fill in the body of this function\n        if ((a == 0) || (b == 0)\
    \ || (c == 0)) {\n            false\n        } else {\n            if ((a >= b)\
    \ && (a >= c)) {\n                a*a == b*b + c*c\n            } else if ((b\
    \ >= a) && (b >= c)) {\n                b*b == a*a + c*c\n            } else {\n\
    \                c*c == a*a + b*b\n            }\n        }", "        if (a >=\
    \ b && a >= c) return (a*a == b*b + c*c)\n        if (b >= a && b >= c) return\
    \ (b*b == a*a + c*c)\n        if (c >= a && c >= b) return (c*c == a*a + b*b)\n\
    \        return false", "        // Your Code Here\n        val lst = List(a,\
    \ b, c).sorted\n        lst(0) * lst(0) + lst(1) * lst(1) == lst(2) * lst(2)",
  "        val (x, y, z) = (a, b, c)\n        // x^2 + y^2 = z^2\n        z * z ==\
    \ x * x + y * y", "        var x = new Array[Long](3)\n        x(0) = a\n    \
    \    x(1) = b\n        x(2) = c\n        x = x.sorted\n        if (x(0) * x(0)\
    \ + x(1) * x(1) == x(2) * x(2)) true else false", "        val mm : List[Long]\
    \ = List(a, b, c).sorted\n        if (mm(0) + mm(1) <= mm(2)) false\n        else\
    \ if (mm(0) * mm(0) + mm(1) * mm(1) == mm(2) * mm(2)) true\n        else false",
  '        return (a * a + b * b == c * c)', "        var (A, B, C) = (a, b, c)\n\
    \        if (A > B) {\n            val t = A; A = B; B = t\n        }\n      \
    \  if (A > C) {\n            val t = A; A = C; C = t\n        }\n        if (B\
    \ > C) {\n            val t = B; B = C; C = t\n        }\n        if (A + B <=\
    \ C) return false\n        A * A + B * B == C * C", "        // Your code goes\
    \ here.\n        return true", "        // Fill in the code.\n        val s =\
    \ Array(a, b, c).sorted\n        val (x, y, z) = (s(0), s(1), s(2))\n        x\
    \ * x + y * y == z * z", "        val sides = List(a, b, c).sorted\n        val\
    \ hypotenuse = sides(2)\n        val catheti = sides(0) + sides(1)\n        hypotenuse\
    \ * hypotenuse == catheti * catheti", "        if (a == 0l || b == 0l || c ==\
    \ 0l) return false\n        if (a < 0l || b < 0l || c < 0l) return false\n   \
    \     if (a > b + c || b > a + c || c > a + b) return false\n        if (a*a +\
    \ b*b == c*c || a*a + c*c == b*b || b*b + c*c == a*a) true else false", "    \
    \    val x = Array(a, b, c)\n        x.sort(_ < _)\n        return (x(0) * x(0)\
    \ + x(1) * x(1) == x(2) * x(2))", "        // Fill Up this function body\n   \
    \     // `a` represents the length of side `a`\n        // `b` represents the\
    \ length of side `b`\n        // `c` represents the length of side `c`\n     \
    \   val res = if (a < b && a < c) a*a + (b*b+c*c) == b*b+c*c\n        else if\
    \ (b < a && b < c) b*b + (a*a+c*c) == a*a+c*c\n        else c*c + (a*a+b*b) ==\
    \ a*a+b*b\n        res", "        // Write your code here\n        false", " \
    \       var l = List(a, b, c)\n        l = l.sorted\n        l(0) * l(0) + l(1)\
    \ * l(1) == l(2) * l(2)", '        a * a + b * b == c * c', '        false', '        return
    a*a + b*b == c*c', "        var sides = List(a, b, c)\n        var largest = sides.max\n\
    \        sides = sides.map(x => x * x)\n        var sum = sides.reduce((x, y)\
    \ => x + y)\n        largest * largest == sum", "        // Your code here\n \
    \       return true", "        // Your code here\n        false", '        //
    Write your code here.', "      if (a > b && a > c) {\n        a * a == b * b +\
    \ c * c\n      } else if (b > a && b > c) {\n        b * b == a * a + c * c\n\
    \      } else {\n        c * c == a * a + b * b\n      }", "        var big_length\
    \ = max(a, max(b, c))\n        var small_length1 = min(a, min(b, c))\n       \
    \ var small_length2 = a + b + c - big_length - small_length1\n        return big_length\
    \ * big_length == small_length1 * small_length1 + small_length2 * small_length2",
  '        return (a * a + b * b == c * c || a * a + c * c == b * b || b * b + c *
    c == a * a)', '        return (pow(a, 2) + pow(b, 2) == pow(c, 2) || pow(b, 2)
    + pow(c, 2) == pow(a, 2) || pow(c, 2) + pow(a, 2) == pow(b, 2))', "        //\
    \ Your Implementation Here\n        return false", "        // Your answer here\n\
    \        var list = List(a, b, c)\n        var result = list.sortWith(_ > _)\n\
    \        if(result(0) * result(0) == result(1) * result(1) + result(2) * result(2))\
    \ {\n            return true\n        }\n        return false", "        val l\
    \ = List(a, b, c)\n        // sorted.\n        val sl = l.sorted\n        // min,\
    \ mid, max\n        val (x, y, z) = (sl(0), sl(1), sl(2))\n        return (z *\
    \ z == x * x + y * y)", "        if (a * a + b * b == c * c) return true\n   \
    \     if (a * a + c * c == b * b) return true\n        if (b * b + c * c == a\
    \ * a) return true\n        return false", "        // your code here\n      \
    \  false", "        // Your Code Here\n        return true", "        // Fill\
    \ up this function body\n        // `a` represents the side of length 3\n    \
    \    // `b` represents the side of length 4\n        // `c` represents the side\
    \ of length 5\n        // You have to return the boolean value\n        true",
  "        // Put your code here\n        (a * a + b * b == c * c) || (a * a + c *\
    \ c == b * b) || (b * b + c * c == a * a)", "        val s = Array(a, b, c).sorted\n\
    \        val a2 = s(0) * s(0)\n        val b2 = s(1) * s(1)\n        val c2 =\
    \ s(2) * s(2)\n        if (s(0) <= 0 || s(1) <= 0 || s(2) <= 0) return false\n\
    \        else if (s(0) + s(1) <= s(2)) return false\n        else if (a2 + b2\
    \ == c2) return true\n        else return false", "        val sides = Seq(a,\
    \ b, c).sorted\n        val Seq(x, y, z) = sides\n        pow(x, 2) + pow(y, 2)\
    \ == pow(z, 2)", "        if (a + b < c || a + c < b || b + c < a) return false\n\
    \        if (a > b && a > c) {\n            if (a * a == b * b + c * c) return\
    \ true\n        } else if (b > a && b > c) {\n            if (b * b == a * a +\
    \ c * c) return true\n        } else {\n            if (c * c == a * a + b * b)\
    \ return true\n        }\n        return false", "        val numbers = List(a,\
    \ b, c)\n        numbers.sortWith((x, y) => x < y) match {\n            case List(n1,\
    \ n2, n3) => {\n                if (n1 * n1 + n2 * n2 == n3 * n3) true\n     \
    \           else false\n            }\n        }", "        // Write your code\
    \ here\n        throw new NotImplementedError()"]
stop_tokens:
- "\n    }\n"
