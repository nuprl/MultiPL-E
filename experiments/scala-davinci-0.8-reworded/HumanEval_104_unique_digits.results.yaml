language: scala
name: HumanEval_104_unique_digits
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        return x.sortWith(_ < _).filter(i => i.toString.exists(p\
    \ => \"02468\".contains(p)) == false)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978586
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        def a(x : Long)\
    \ : Boolean = {\n            if (x / 10 == 0) {\n                true\n      \
    \      } else {\n                if (x % 2 == 0) {\n                    false\n\
    \                } else {\n                    a(x / 10)\n                }\n\
    \            }\n        }\n        x.filter(a).sorted\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong,\
    \ 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978585
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        def hasNoEvenDigit(n : Long) : Boolean\
    \ = {\n            if (n == 0) return true\n            if (n % 2 == 0) return\
    \ false\n            hasNoEvenDigit(n / 10)\n        }\n        x.filter(hasNoEvenDigit).sorted\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978585
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n      ???\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "scala.NotImplementedError: an implementation is missing\n\tat scala.Predef$.$qmark$qmark$qmark(Predef.scala:344)\n\
    \tat Problem$.uniqueDigits(tmp5fina6dj.scala:13)\n\tat Problem$.main(tmp5fina6dj.scala:16)\n\
    \tat Problem.main(tmp5fina6dj.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978585
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        var result:List[Long]\
    \ = List();\n        for(v <- x) {\n            if(isUniqueDigits(v)) result =\
    \ result :+ v;\n        }\n        return result.sorted;\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong,\
    \ 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmkl7lbrs.scala:17:15 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mif\e[0m(isUniqueDigits(v)) result =\
    \ result :+ v;\n\e[31m\e[31m   |\e[0m               ^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m               Not found: isUniqueDigits\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659978582
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        x.filter(x => (x.toString.count(x => x.isDigit\
    \ && x.asDigit % 2 == 0) == 0)).sortWith(_ < _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978586
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val result = new ListBuffer[Long]\n  \
    \      x.foreach(xx => {\n            val str = xx.toString\n            if (!str.contains(\"\
    2\") && !str.contains(\"4\") && !str.contains(\"6\") && !str.contains(\"8\") &&\
    \ !str.contains(\"0\")) result += xx\n        })\n        result.toList.sorted\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978586
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val f = (i : Long) => i.toString.map(_.asDigit\
    \ % 2 == 0).foldLeft(false)(_ || _)\n        val l = x.filter(!f(_))\n       \
    \ l.sortWith(_ < _)\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978586
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        def uniqueDigitsHelper(s : List[Long],\
    \ x : List[Long]) : List[Long] = {\n            if (x.isEmpty) {\n           \
    \     s\n            } else {\n                if (!x.head.toString.contains(\"\
    2\") && !x.head.toString.contains(\"4\") && !x.head.toString.contains(\"6\") &&\
    \ !x.head.toString.contains(\"8\")) {\n                    uniqueDigitsHelper(s\
    \ :+ x.head, x.tail)\n                } else {\n                    uniqueDigitsHelper(s,\
    \ x.tail)\n                }\n            }\n        }\n        uniqueDigitsHelper(List[Long](),\
    \ x).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpentna77g.scala:28)\n\tat Problem.main(tmpentna77g.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978585
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        var l = new ListBuffer[Long]()\n\
    \        x.foreach(i => if (check(i)) l.append(i))\n        l.toList.sorted\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpw5zwo952.scala:16:27 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        x.foreach(\e[36mi\e[0m => \e[33mif\e[0m (check(i))\
    \ l.append(i))\n\e[31m\e[31m   |\e[0m                           ^^^^^\e[0m\n\e\
    [31m   |\e[0m                           Not found: check\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659978582
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        var l : List[Long] = Nil\n        for\
    \ (i <- x) {\n            var flag = true\n            var temp = i\n        \
    \    while (temp > 0) {\n                var d = temp % 10\n                if\
    \ (d % 2 == 0) {\n                    flag = false\n                    temp =\
    \ 0\n                }\n                temp /= 10\n            }\n          \
    \  if (flag) l = i :: l\n        }\n        return l.sorted\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong,\
    \ 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978586
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val hash = HashMap[Long, Int]()\n    \
    \    val _x = x.sorted\n        for (i <- _x) {\n            val s = i.toString\n\
    \            var flag = false\n            for (j <- s) {\n                if\
    \ (j % 2 == 0) {\n                    flag = true\n                    break\n\
    \                }\n            }\n            if (!flag) hash(i) = 1\n      \
    \  }\n        hash.keySet.toList.sorted\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpz4aaew_t.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978583
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        def hasEvenDigit(n : Long) : Boolean =\
    \ n match {\n            case n if n < 10 => n % 2 == 0\n            case n =>\
    \ (n % 10) % 2 == 0 || hasEvenDigit(n / 10)\n        }\n        x.filter(n =>\
    \ !hasEvenDigit(n)).sorted\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 15l.toLong, 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong,\
    \ 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978586
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val b = ListBuffer[Long]()\n        for\
    \ (a <- x) {\n            if (a < 10) b += a\n            else {\n           \
    \     var b1 = a\n                var t = false\n                while (b1 > 0)\
    \ {\n                    if (b1 % 2 == 0) {\n                        t = true\n\
    \                        b1 = 0\n                    }\n                    else\
    \ b1 /= 10\n                }\n                if (!t) b += a\n            }\n\
    \        }\n        b.toList.sorted\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978586
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val allDigits = \"0123456789\"\n     \
    \   val m = x.map(i => allDigits.map(j => i.toString.count(_ == j.toChar))).\n\
    \            map(i => (i(0) % 2, i(1) % 2, i(2) % 2, i(3) % 2, i(4) % 2, i(5)\
    \ % 2, i(6) % 2, i(7) % 2, i(8) % 2, i(9) % 2)).\n            map(i => i._1 +\
    \ i._2 + i._3 + i._4 + i._5 + i._6 + i._7 + i._8 + i._9 + i._10)\n        (x,\
    \ m).zipped.filter(i => i._2 % 2 == 1)._1.sorted\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmph63enfiu.scala:17:31 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        (x, m).zipped.filter(\e[36mi\e[0m => i._2 % \e\
    [31m2\e[0m == \e[31m1\e[0m)._1.sorted\n\e[31m\e[31m   |\e[0m                 \
    \            ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \     Wrong number of parameters, expected: 2\n1 error found\n"
  stdout: ''
  timestamp: 1659978582
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.collection.immutable.List.equals(Object)\"\
    \ because the return value of \"Problem$.uniqueDigits(scala.collection.immutable.List)\"\
    \ is null\n\tat Problem$.main(tmpxrvppph3.scala:16)\n\tat Problem.main(tmpxrvppph3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978585
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        def hasEvenDigit(x : Long) : Boolean =\
    \ {\n            def loop(x : Long) : Boolean = {\n                if (x == 0)\
    \ false\n                else {\n                    val digit = x % 10\n    \
    \                if (digit % 2 == 0) true\n                    else loop(x / 10)\n\
    \                }\n            }\n            loop(x)\n        }\n        x.filter(hasEvenDigit(_)\
    \ == false).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978585
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        x.filter(_.toString.forall(_.asDigit\
    \ % 2 != 0)).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978586
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n    \tdef solve(xs : List[Long], answer : List[Long])\
    \ : List[Long] = {\n    \t\txs match {\n    \t\t\tcase Nil => answer\n    \t\t\
    \tcase x :: Nil => if (hasEvenDigit(x)) answer else x :: answer\n    \t\t\tcase\
    \ x :: ys => solve(ys, if (hasEvenDigit(x)) answer else x :: answer)\n    \t\t\
    }\n    \t}\n    \tdef hasEvenDigit(x : Long) : Boolean = {\n    \t\tif (x == 0)\
    \ false\n    \t\telse if (x % 2 == 0) true\n    \t\telse hasEvenDigit(x / 10)\n\
    \    \t}\n    \tsolve(x, List[Long]()).sortWith(_ < _)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong,\
    \ 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978586
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        def isUnique(x : Long) : Boolean = {\n\
    \            x.toString.forall(c => c == '1' || c == '3' || c == '5' || c == '7'\
    \ || c == '9')\n        }\n        x.filter(isUnique).sorted\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong,\
    \ 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978586
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        val result =\
    \ ListBuffer[Long]()\n        x.foreach(num => {\n            if (num.toString.forall(x\
    \ => (x.toString.toInt % 2) != 0)) {\n                result += num\n        \
    \    }\n        })\n        result.toList.sorted\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978586
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        val num = x.sorted\n\
    \        def isUnique(n: Long): Boolean = {\n            var r = n\n         \
    \   while (r > 0) {\n                val d = r % 10\n                if (d % 2\
    \ == 0) return false\n                r = r / 10\n            }\n            true\n\
    \        }\n        num.filter(isUnique)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978586
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        null\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.collection.immutable.List.equals(Object)\"\
    \ because the return value of \"Problem$.uniqueDigits(scala.collection.immutable.List)\"\
    \ is null\n\tat Problem$.main(tmpint3t34w.scala:18)\n\tat Problem.main(tmpint3t34w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978585
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        def isOddDigit(y : Long) : Boolean = {\n\
    \            y match {\n                case 0l => false\n                case\
    \ 2l => false\n                case 4l => false\n                case 6l => false\n\
    \                case 8l => false\n                case _ => true\n          \
    \  }\n        }\n        def isOddDigits(y : Long) : Boolean = {\n           \
    \ if (y > 0) {\n                if (isOddDigit(y % 10)) isOddDigits(y / 10)\n\
    \                else false\n            }\n            else true\n        }\n\
    \        x.sortWith(_ < _).filter(isOddDigits(_))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978593
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        var result =\
    \ List[Long]()\n        for (i <- x) {\n            var status = false\n     \
    \       var num = i\n            while (num > 0) {\n                if (num %\
    \ 10 % 2 == 0) {\n                    status = true\n                    num =\
    \ 0\n                }\n                else num /= 10\n            }\n      \
    \      if (!status) result = result :+ i\n        }\n        result.sorted\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978594
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        x.filter(_.toString.forall(_.asDigit %\
    \ 2 != 0)).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978594
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val result = ListBuffer[Long]()\n    \
    \    for (i <- x) {\n            if (i.toString.map(_.asDigit).forall(j => j %\
    \ 2 != 0)) result += i\n        }\n        result.sorted.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978595
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n\t\tx.filter(y => y.toString.forall(!_.isDigit\
    \ || _.asDigit % 2 != 0)).sortWith(_ < _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpf1fb6iho.scala:14:4 ------------------------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m   Incompatible combinations of tabs and spaces in indentation prefixes.\n\e\
    [31m   |\e[0m   Previous indent : 2 tabs\n\e[31m   |\e[0m   Latest indent   :\
    \ 4 spaces\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpf1fb6iho.scala:13:32 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m\t\tx.filter(\e[36my\e[0m => y.toString.forall(!_.isDigit\
    \ || _.asDigit % \e[31m2\e[0m != \e[31m0\e[0m)).sortWith(_ < _)\n\e[31m\e[31m\
    \   |\e[0m\t\t                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 1\n2 errors found\n"
  stdout: ''
  timestamp: 1659978592
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        x.filter(n => !n.toString.exists(i =>\
    \ \"02468\".contains(i))).sorted\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 15l.toLong, 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong,\
    \ 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978596
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        def hasEvenDigit(num : Long) : Boolean\
    \ = {\n            var n = num\n            while (n > 0) {\n                if\
    \ (n % 2 == 0) return true\n                n /= 10\n            }\n         \
    \   return false\n        }\n        x.filter(!hasEvenDigit(_)).sorted\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978596
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // `x` is the list of integers to process\n        // You may assume that all\
    \ the integers in the list is positive\n        var res = List[Long]()\n     \
    \   for (v <- x) {\n            if (v < 10l) res = res :+ v\n            else\
    \ {\n                var flag = true\n                var m = v\n            \
    \    while (m > 0) {\n                    if (m % 2 == 0) {\n                \
    \        flag = false\n                        m = 0\n                    }\n\
    \                    else m /= 10\n                }\n                if (flag)\
    \ res = res :+ v\n            }\n        }\n        res.sorted\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978597
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        var temp = new ListBuffer[Long]()\n  \
    \      x.foreach(x => {\n            var okay = true\n            x.toString.foreach(digit\
    \ => {\n                if (digit % 2 == 0) {\n                    okay = false\n\
    \                }\n            })\n            if (okay) {\n                temp\
    \ += x\n            }\n        })\n        return temp.toList.sorted\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978596
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        return x.filter(e => e.toString.forall(c\
    \ => c.asDigit % 2 != 0)).sorted\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 15l.toLong, 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong,\
    \ 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978596
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        def isEven(n : Int) : Boolean = {\n  \
    \          if (n % 2 == 0) true else false\n        }\n        def containsEven(n\
    \ : Long) : Boolean = {\n            n.toString.split(\"\").filter(s => isEven(s.toInt)).length\
    \ == 0\n        }\n        x.filter(s => containsEven(s)).sorted\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978596
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        x.filter(i => (i.toString.contains(\"\
    2\") || i.toString.contains(\"4\") || i.toString.contains(\"6\") || i.toString.contains(\"\
    8\") || i.toString.contains(\"0\")) == false).sorted\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong,\
    \ 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978596
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n    \tx.filter(x => x.toString.forall(x => x %\
    \ 2 != 0)).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978596
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        var q = new TreeSet[Long]\n        for\
    \ (item <- x) {\n            if (item.toString.forall(_.asDigit % 2 != 0)) q +=\
    \ item\n        }\n        return q.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978596
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        var temp : List[Long]\
    \ = List()\n        for (i <- x) {\n            var flag = true\n            while\
    \ (i != 0) {\n                if (i % 10 % 2 == 0) flag = false\n            \
    \    i /= 10\n            }\n            if (flag) temp = temp :+ i\n        }\n\
    \        temp.sorted\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpcmr5uar5.scala:20:18 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                i /= \e[31m10\e[0m\n\e[31m\e[31m   |\e\
    [0m                ^^^^\e[0m\n\e[31m   |\e[0m                value /= is not a\
    \ member of Long - did you mean i.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659978595
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        def isEven(x : Long) : Boolean = {\n \
    \           var y = x\n            var z = y % 10\n            while (y > 0) {\n\
    \                if (z % 2 == 0) return true\n                y = y / 10\n   \
    \             z = y % 10\n            }\n            return false\n        }\n\
    \        return x.filter(!isEven(_)).sorted\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978596
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        var r = List[Long]()\n        for (i <-\
    \ x) {\n            var b = true\n            var t = i\n            while (t\
    \ > 0) {\n                if (t % 2 == 0) {\n                    b = false\n \
    \                   t = 0\n                }\n                t /= 10\n      \
    \      }\n            if (b) r = r :+ i\n        }\n        r.sorted\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978597
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        x.filter(z => {\n            !((z + \"\
    \").exists(y => y.asDigit % 2 == 0))\n        }).sorted\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong,\
    \ 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978596
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        var result:List[Long]\
    \ = Nil\n        x.foreach(n => {\n            var m = n\n            var noEvenDigit\
    \ = true\n            while (m > 0) {\n                if (m % 2 == 0) {\n   \
    \                 noEvenDigit = false\n                    m = 0\n           \
    \     }\n                else {\n                    m = m / 10\n            \
    \    }\n            }\n            if (noEvenDigit) {\n                result\
    \ = n :: result\n            }\n        })\n        result.sorted\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978596
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        var res = List[Long]()\n        for (i\
    \ <- x) {\n            var isEven = false\n            var temp = i\n        \
    \    while (temp > 0) {\n                var digit = temp % 10\n             \
    \   if (digit % 2 == 0) {\n                    isEven = true\n               \
    \     temp = 0\n                }\n                temp /= 10\n            }\n\
    \            if (!isEven) res = i :: res\n        }\n        res.sorted\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978597
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n    \tval evenDigits = Set('0', '2', '4', '6',\
    \ '8')\n    \tx.filter((num : Long) => !num.toString.map(_.toChar).exists(evenDigits.contains(_))).sorted\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978597
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        def digits(l : Long) : List[Int] = {\n\
    \            if (l == 0) List()\n            else digits(l / 10) :+ (l % 10).toInt\n\
    \        }\n        x.filter(l => digits(l).filter(i => i % 2 == 0).isEmpty).sorted\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978596
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val digits = x.map(n => n.toString.map(c\
    \ => c.asDigit).toList)\n        val even = digits.filter(x => x.map(n => n%2==0).reduceLeft(_||_))\n\
    \        x.filter(n => !even.contains(n.toString.map(c => c.asDigit).toList))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpigjjfc5c.scala:18)\n\tat Problem.main(tmpigjjfc5c.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978596
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        def check(n : Long) : Boolean = {\n  \
    \          def loop(x : Long) : Boolean = {\n                if (x == 0) true\n\
    \                else {\n                    val r = x % 10\n                \
    \    if (r % 2 == 0) false\n                    else loop(x / 10)\n          \
    \      }\n            }\n            loop(n)\n        }\n        x.filter(check(_)).sorted\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978603
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        var output =\
    \ List[Long]()\n        for (i <- x) {\n          if (uniqueDigitsHelper(i.toString))\
    \ {\n            output = output :+ i\n          }\n        }\n        return\
    \ output.sorted\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0iwxa5f9.scala:17:14 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m          \e[33mif\e[0m (uniqueDigitsHelper(i.toString))\
    \ {\n\e[31m\e[31m   |\e[0m              ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m              Not found: uniqueDigitsHelper\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978599
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        for(xx <- x; if(!(xx.toString.contains(\"\
    2\") || xx.toString.contains(\"4\") || xx.toString.contains(\"6\") || xx.toString.contains(\"\
    8\")))) yield xx\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9p57ko3j.scala:16)\n\tat Problem.main(tmp9p57ko3j.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978605
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        x.filter(x => x.toString.split(\"\").filter(x\
    \ => x != \"0\" && x != \"2\" && x != \"4\" && x != \"6\" && x != \"8\").length\
    \ == x.toString.length).sorted\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 15l.toLong, 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong,\
    \ 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978606
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        def helper(m\
    \ : List[Long], n : List[Long]) : List[Long] = {\n            if (m.isEmpty) n\n\
    \            else if (!m.head.toString.exists(_.asDigit % 2 == 0)) helper(m.tail,\
    \ n :+ m.head)\n            else helper(m.tail, n)\n        }\n        x.sortWith(_\
    \ < _)\n        x.sortWith(_ < _)\n        helper(x, List[Long]())\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpew5ac5e1.scala:25)\n\tat Problem.main(tmpew5ac5e1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978606
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong,\
    \ 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvsmb8mw_.scala:12:52\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m    \e[33mdef\e[0m \e[36muniqueDigits\e\
    [0m(\e[36mx\e[0m : \e[35mList\e[0m[\e[35mLong\e[0m]) : \e[35mList\e[0m[\e[35mLong\e\
    [0m] = {\n\e[31m\e[31m   |\e[0m                                              \
    \      ^\e[0m\n\e[31m   |\e[0m                                               \
    \     Found:    Unit\n\e[31m   |\e[0m                                        \
    \            Required: List[Long]\n\e[31m13 |\e[0m        \e[34m// Fill up this\
    \ function body\e[0m\n\e[31m14 |\e[0m        \e[34m// You can add another function\
    \ as well, if required\e[0m\n\e[31m15 |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978604
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        ???\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "scala.NotImplementedError: an implementation is missing\n\tat scala.Predef$.$qmark$qmark$qmark(Predef.scala:344)\n\
    \tat Problem$.uniqueDigits(tmp924cr4m_.scala:13)\n\tat Problem$.main(tmp924cr4m_.scala:16)\n\
    \tat Problem.main(tmp924cr4m_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978606
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        x.filter((x : Long) => x.toString.toSet.filter(x\
    \ => x.isDigit && (x - '0') % 2 == 0).size == 0).sorted\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong,\
    \ 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978607
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        if (x.isEmpty) return x\n        if (x.head.toString.count(c\
    \ => (c - '0') % 2 == 0) > 0) return uniqueDigits(x.tail)\n        return x.head\
    \ :: uniqueDigits(x.tail)\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpa_rkwjvq.scala:18)\n\tat Problem.main(tmpa_rkwjvq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978607
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n      x.sorted.filter(i => i.toString.forall(i\
    \ => i != '0' && i != '2' && i != '4' && i != '6' && i != '8'))\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978607
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        x\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpx4rohu7k.scala:18)\n\tat Problem.main(tmpx4rohu7k.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978606
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        x.filter(t => t.toString.toList.filter(c\
    \ => (c != '0' && c != '2' && c != '4' && c != '6' && c != '8')).length == t.toString.length).sorted\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978607
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        x.filter(y =>\
    \ y.toString.filter(z => z.isDigit && z.asDigit % 2 == 0).isEmpty).sorted\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978607
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        x.filter(i => !i.toString.exists(_.isDigit)).sorted\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvf5jhx3q.scala:16)\n\tat Problem.main(tmpvf5jhx3q.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978607
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val y = x.sortWith((x, y) => x < y)\n\
    \        val z = new ListBuffer[Long]\n        var i = 0\n        for (i <- 0\
    \ until y.length) {\n            var hasEven = false\n            for (digit <-\
    \ y(i).toString) {\n                if (digit.asDigit % 2 == 0) {\n          \
    \          hasEven = true\n                }\n            }\n            if (!hasEven)\
    \ {\n                z += y(i)\n            }\n        }\n        return z.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978607
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val x1 = x.filter(n => n.toString.map(y\
    \ => y.toString.toInt).filter(y => y % 2 == 0).length == 0)\n        x1.sortWith(_\
    \ < _)\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978607
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        var value: List[Long] = Nil\n        for\
    \ (i <- x) {\n            if (i.toString.split(\"\").exists(char => char.toInt\
    \ % 2 == 0)) {}\n            else value = value :+ i\n        }\n        value.sorted\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978607
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        if (x.isEmpty) List[Long]()\n        else\
    \ x.filter(num => (num % 2 != 0)).distinct.sorted\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpeaw0hg_1.scala:18)\n\tat Problem.main(tmpeaw0hg_1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978607
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        def div(x : Long, d : Long) : Long = {\n\
    \            x % d\n        }\n        def containsEvenDigit(x : Long) : Boolean\
    \ = {\n            (div(x, 2) == 0 || div(x, 4) == 0 || div(x, 6) == 0 || div(x,\
    \ 8) == 0)\n        }\n        if (x.isEmpty) {\n            return x\n      \
    \  }\n        val x2 = x.filter(y => !containsEvenDigit(y))\n        x2.sorted\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn0pawgj9.scala:27)\n\tat Problem.main(tmpn0pawgj9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978607
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        x.filter(y => y.toString.forall(z => (z.toString.toInt\
    \ % 2 != 0))).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978608
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        var result : List[Long] = Nil\n      \
    \  for (y <- x) {\n            if (check(y)) {\n                result = result\
    \ :+ y\n            }\n        }\n        result.sorted\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong,\
    \ 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn2wpb7nw.scala:15:16 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (check(y)) {\n\e[31m\e[31m\
    \   |\e[0m                ^^^^^\e[0m\n\e[31m   |\e[0m                Not found:\
    \ check\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978604
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        def isUnique(num : Long) : Boolean = {\n\
    \            def helper(num : Long) : Boolean = {\n                if (num ==\
    \ 0) true\n                else if (num % 2 == 0) false\n                else\
    \ helper(num / 10)\n            }\n            helper(num)\n        }\n      \
    \  x.filter(isUnique).sorted\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 15l.toLong, 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong,\
    \ 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978607
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n      var result : List[Long] = List();\n    \
    \  for (i <- x) {\n        var hasEvenDigit : Boolean = false;\n        var n\
    \ : Long = i;\n        while(n > 0) {\n          if ((n % 10) % 2 == 0) {\n  \
    \          hasEvenDigit = true;\n            n = 0;\n          }\n          n\
    \ /= 10;\n        }\n        if (!hasEvenDigit) result = result :+ i;\n      }\n\
    \      result.sorted;\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978607
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // fill in here.\n        return x.filter(n\
    \ => !n.toString.exists(c => c == '2' || c == '4' || c == '6' || c == '8' || c\
    \ == '0')).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978611
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n    \tval xs = for (n <- x; if (n.toString.filter(_\
    \ % 2 == 0).length == 0)) yield n\n    \txs.sorted\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong,\
    \ 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978615
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        var list = List[Long]()\n        for (i\
    \ <- x) {\n            if (i.toString.toCharArray.filter(y => y % 2 == 0).length\
    \ == 0) {\n                list = list :+ i\n            }\n        }\n      \
    \  list.sorted\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978615
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        if (x.isEmpty)\
    \ Nil\n        else if (digitsHave(x.head)) uniqueDigits(x.tail)\n        else\
    \ x.head :: uniqueDigits(x.tail)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 15l.toLong, 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong,\
    \ 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptlcbhb59.scala:16:17 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (digitsHave(x.head))\
    \ uniqueDigits(x.tail)\n\e[31m\e[31m   |\e[0m                 ^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                 Not found: digitsHave\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659978611
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        x.filter(digit => {\n            var result\
    \ = true\n            var index = 0\n            var value = digit\n         \
    \   while (value != 0) {\n                val temp = value % 10\n            \
    \    if (temp % 2 == 0) {\n                    result = false\n              \
    \      value = 0\n                }\n                else {\n                \
    \    value = value / 10\n                }\n            }\n            result\n\
    \        }).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978616
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n    \tx.filter(y => (y.toString.map(z => z.asDigit).forall(i\
    \ => (i % 2 == 1)))).sorted\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 15l.toLong, 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong,\
    \ 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978616
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        var result = new ListBuffer[Long]()\n\
    \        for (num <- x) {\n            var isEvenDigitExist = false\n        \
    \    var digit = num\n            while (digit > 0) {\n                if ((digit\
    \ % 10) % 2 == 0) {\n                    isEvenDigitExist = true\n           \
    \         digit = 0\n                }\n                else digit /= 10\n   \
    \         }\n            if (!isEvenDigitExist) result += num\n        }\n   \
    \     result.toList.sorted\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 15l.toLong, 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong,\
    \ 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978616
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        List()\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsc4lxl8x.scala:18)\n\tat Problem.main(tmpsc4lxl8x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978617
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        x.filter((i : Long) => (i.toString.filter((c\
    \ : Char) => (c >= '0' && c <= '9' && c % 2 == 1)).distinct.length == i.toString.filter((c\
    \ : Char) => (c >= '0' && c <= '9')).distinct.length)).sorted\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978617
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        var res = List[Long]()\n        for (i\
    \ <- x) {\n            if (!i.toString.exists(x => x % 2 == 0)) res = i :: res\n\
    \        }\n        res.sorted\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 15l.toLong, 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong,\
    \ 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978618
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        x.filter(y => y.toString.forall(z => z.asDigit\
    \ % 2 != 0)).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978617
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        return List()\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong,\
    \ 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpo6xtesof.scala:16)\n\tat Problem.main(tmpo6xtesof.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978617
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        return x.filter(i => (i.toString.exists(_.asDigit\
    \ % 2 == 0) == false)).sorted\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 15l.toLong, 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong,\
    \ 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978618
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // This is a solution without using tail\
    \ recursion or mutable list\n        x.filter(i => i.toString.forall(j => j.toString.toInt\
    \ % 2 != 0)).sorted\n        // this is a solution using tail recursion and mutable\
    \ list\n        // var y = ListBuffer[Long]()\n        // x.foreach(i => if (i.toString.forall(j\
    \ => j.toString.toInt % 2 != 0)) y += i)\n        // y.sorted.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978618
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val z = x.filter(a => (a.toString.map(_.asDigit).toSet\
    \ & Set(0, 2, 4, 6, 8)).isEmpty).sorted\n        return z\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong,\
    \ 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978618
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        var xnew = x.filter(a => ((a.toString.filter(b\
    \ => ((b == '0') || (b == '2') || (b == '4') || (b == '6') || (b == '8')))).length)\
    \ == 0)\n        xnew.sorted\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 15l.toLong, 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong,\
    \ 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978618
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        x.filter(!_.toString.exists(_.isDigit)).sorted\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp910gv4xw.scala:16)\n\tat Problem.main(tmp910gv4xw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978618
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        def isUnique(n : Long) : Boolean = {\n\
    \            var res = true\n            val a = n.toString.map(_.asDigit)\n \
    \           for (i <- 0 until a.length) {\n                if (a(i) % 2 == 0)\
    \ res = false\n            }\n            res\n        }\n        var res = new\
    \ ListBuffer[Long]\n        for (i <- 0 until x.length) {\n            if (isUnique(x(i)))\
    \ res += x(i)\n        }\n        res.toList.sorted\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong,\
    \ 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978618
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val evenDigits = x.flatMap(n => n.toString.toCharArray).filter(x\
    \ => \"02468\".contains(x)).distinct\n        x.filter(n => !evenDigits.exists(x\
    \ => n.toString.contains(x))).sorted\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978619
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        var evens = Set[Char]('0','2','4','6','8')\n\
    \        def hasEven(i : Long) : Boolean = {\n            var j = i\n        \
    \    while (j > 0) {\n                if (evens.contains((j % 10).toChar)) {\n\
    \                    return true\n                }\n                j /= 10\n\
    \            }\n            return false\n        }\n        var unique = new\
    \ ListBuffer[Long]\n        for (i <- x) {\n            if (!hasEven(i)) {\n \
    \               unique += i\n            }\n        }\n        unique.toList.sorted\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_a9u_v9w.scala:33)\n\tat Problem.main(tmp_a9u_v9w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978618
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        def hasEvenDigit(n : Long) : Boolean =\
    \ {\n            if (n <= 0) false\n            else {\n                val d\
    \ = n % 10\n                if (d % 2 == 0) true\n                else hasEvenDigit(n\
    \ / 10)\n            }\n        }\n        x.filter(!hasEvenDigit(_)).sorted\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978617
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        var list1 : List[Long]\
    \ = List()\n        for(i <- x) {\n            var list2 : List[Long] = List()\n\
    \            var temp : Long = i\n            var count : Int = 0\n          \
    \  while(temp > 0) {\n                list2 = (temp % 10).toLong :: list2\n  \
    \              temp = temp / 10\n            }\n            var flag : Boolean\
    \ = true\n            for(j <- list2) {\n                if(j % 2 == 0) {\n  \
    \                  flag = false\n                }\n            }\n          \
    \  if(flag) {\n                list1 = i :: list1\n            }\n        }\n\
    \        list1.sorted\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978618
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n    \tx.filter((e) => e.toString.find((c) => c\
    \ == '2' || c == '4' || c == '6' || c == '8' || c == '0') == None).sorted\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978618
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        def hasEvenDigit(n : Long) : Boolean =\
    \ n == 0l || (n % 2 == 0 && hasEvenDigit(n / 10))\n        def uniqueDigitsIter(x\
    \ : List[Long], result : List[Long]) : List[Long] = {\n            if (x.isEmpty)\
    \ result\n            else if (hasEvenDigit(x.head)) uniqueDigitsIter(x.tail,\
    \ result)\n            else uniqueDigitsIter(x.tail, x.head :: result)\n     \
    \   }\n        uniqueDigitsIter(x, List[Long]()).sorted\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong,\
    \ 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpg_j2dspo.scala:22)\n\tat Problem.main(tmpg_j2dspo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978621
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        var evenSet = Set[Long]()\n        for\
    \ (i <- x) {\n            var temp = i\n            while (temp > 0) {\n     \
    \           if (temp % 2 == 0) {\n                    evenSet += i\n         \
    \           temp = 0\n                }\n                else temp /= 10\n   \
    \         }\n        }\n        val ret = new ListBuffer[Long]()\n        for\
    \ (i <- x) {\n            if (!evenSet.contains(i)) ret += i\n        }\n    \
    \    return ret.toList.sorted\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 15l.toLong, 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong,\
    \ 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978622
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        x.filter(_.toString.forall(_.toString.toInt\
    \ % 2 != 0)).sortWith(_ < _)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 15l.toLong, 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong,\
    \ 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978625
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // add your code here\n        var list\
    \ : List[Long] = List()\n        for (i <- x) {\n            var cur = i\n   \
    \         var found = false\n            while (cur > 0) {\n                if\
    \ (cur % 2 == 0) {\n                    found = true\n                    break\n\
    \                }\n                cur /= 10\n            }\n            if (!found)\
    \ {\n                list = list :+ i\n            }\n        }\n        return\
    \ list.sorted\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0tqxn7sf.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978622
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        def uniqueDigits(x : List[Long], acc :\
    \ List[Long]) : List[Long] = x match {\n            case List() => acc\n     \
    \       case head :: tail => {\n                val ret = head.toString.toCharArray.filter(c\
    \ => c.asDigit % 2 == 0).toList\n                if (ret.length == 0) uniqueDigits(tail,\
    \ head :: acc)\n                else uniqueDigits(tail, acc)\n            }\n\
    \        }\n        uniqueDigits(x, List()).sortWith(_ < _)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong,\
    \ 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978628
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        // var list =\
    \ List(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong,\
    \ 8l.toLong, 9l.toLong)\n        // return x.filter(x => !(x.toString.contains(\"\
    2\")) && !(x.toString.contains(\"4\")) && !(x.toString.contains(\"6\")) && !(x.toString.contains(\"\
    8\")) && !(x.toString.contains(\"0\"))).sorted\n        return x.filter(x => x.toString.forall(x\
    \ => x % 2 != 0)).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978628
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val evenDigits = List(0, 2, 4, 6, 8)\n\
    \        val evenDigitsSet = evenDigits.toSet\n        val sortedList = x.sortWith(_<_)\n\
    \        val oddDigitsList = (sortedList.foldLeft(List[Long]())((acc, elem) =>\
    \ {\n            if (elem.toString.toCharArray.exists(evenDigitsSet.contains(_)))\
    \ acc\n            else elem :: acc\n        })).reverse\n        oddDigitsList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcj3pm5x8.scala:23)\n\tat Problem.main(tmpcj3pm5x8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978627
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        ???\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "scala.NotImplementedError: an implementation is missing\n\tat scala.Predef$.$qmark$qmark$qmark(Predef.scala:344)\n\
    \tat Problem$.uniqueDigits(tmp924cr4m_.scala:13)\n\tat Problem$.main(tmp924cr4m_.scala:16)\n\
    \tat Problem.main(tmp924cr4m_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978606
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        x.filter(y => y.toString.toList.forall(z\
    \ => z.toString.toInt % 2 != 0)).sorted\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978628
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // 'y' is a sorted list of all elements that has at least one even digit.\n\
    \        var y = for (i <- x if x.exists(p => (p % 2 == 0))) yield i\n       \
    \ var l = List[Long]()\n        for (i <- x if !y.contains(i)) l = l :+ i\n  \
    \      return l.sorted\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpud8zatp1.scala:21)\n\tat Problem.main(tmpud8zatp1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978629
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        var list = new ListBuffer[Long]()\n  \
    \      for (i <- x) {\n            var num = i\n            var even = false\n\
    \            while (num > 0) {\n                if (num % 2 == 0) {\n        \
    \            even = true\n                    num = 0\n                }\n   \
    \             else num /= 10\n            }\n            if (!even) list += i\n\
    \        }\n        list.sorted.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978629
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        def noEvenDigits(n : Long) : Boolean =\
    \ {\n            // Given a positive integer x.\n            // Returns true if\
    \ x doesn't have any even digits.\n            // For example:\n            //\
    \ >>> noEvenDigits(15)\n            // true\n            // >>> noEvenDigits(152)\n\
    \            // false\n            n.toString.exists(_.asDigit % 2 == 0) == false\n\
    \        }\n        x.filter(noEvenDigits).sorted\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978629
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        def digits(n : Long) : List[Int] = {\n\
    \            n.toString.map(_.asDigit).toList\n        }\n        def evenDigits(l\
    \ : List[Int]) : Boolean = {\n            l.find(x => x % 2 == 0) != None\n  \
    \      }\n        x.filter(y => !evenDigits(digits(y))).sorted\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978629
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n      x.filter(x => x.toString.toCharArray.forall(c\
    \ => c.toInt - '0'.toInt != 0 && c.toInt - '0'.toInt != 2 && c.toInt - '0'.toInt\
    \ != 4 && c.toInt - '0'.toInt != 6 && c.toInt - '0'.toInt != 8)).sorted\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978629
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        x.filter(n => !n.toString.exists(c =>\
    \ c.toString.toInt % 2 == 0)).sorted\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978629
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        var d = new ArrayBuffer[Long]()\n    \
    \    x.foreach(i => if (i.toString.forall(x => (x.toString.toInt % 2 != 0))) d\
    \ += i)\n        d.sorted.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 15l.toLong, 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong,\
    \ 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978629
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        //recursive function\n        def uniqueDigitsRec(x\
    \ : List[Long], e : List[Long]) : List[Long] = x match {\n            case Nil\
    \ => e\n            case x1 :: x2 =>\n                val isUnique = x1.toString.map(_.asDigit).forall(_\
    \ % 2 != 0)\n                if (isUnique) uniqueDigitsRec(x2, e :+ x1)\n    \
    \            else uniqueDigitsRec(x2, e)\n        }\n        //guard\n       \
    \ if (x.isEmpty) return List[Long]()\n        else return uniqueDigitsRec(x, List[Long]()).sorted\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978629
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        x.filter(y => !y.toString.exists(z =>\
    \ z == '0' || z == '2' || z == '4' || z == '6' || z == '8')).sorted\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978629
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        return x.filter(i => !i.toString.exists(c\
    \ => c == '2' || c == '4' || c == '6' || c == '8' || c == '0')).sorted\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978630
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        x.filter(l => l.toString.toList.exists(d\
    \ => d != '0' && d != '2' && d != '4' && d != '6' && d != '8')).sorted\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe3hhoo86.scala:16)\n\tat Problem.main(tmpe3hhoo86.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978629
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        x.filter(x => x.toString.filter(y => (y\
    \ % 2) == 0).length == 0).sorted\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 15l.toLong, 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong,\
    \ 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978630
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        var set : Set[Long] = new HashSet[Long]\n\
    \        var list : List[Long] = new ArrayList[Long]\n        for (i <- x) {\n\
    \            if (unique(i)) list.+=(i)\n        }\n        return list.sortWith((x,\
    \ y) => x < y)\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmepxadon.scala:14:36 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mvar\e[0m \e[36mlist\e[0m : \e[35mList\e\
    [0m[\e[35mLong\e[0m] = \e[33mnew\e[0m \e[35mArrayList\e[0m[\e[35mLong\e[0m]\n\e\
    [31m\e[31m   |\e[0m                                    ^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                    Not found: type ArrayList\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmepxadon.scala:16:16 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mif\e[0m (unique(i)) list.+=(i)\n\e\
    [31m\e[31m   |\e[0m                ^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \  Not found: unique\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpmepxadon.scala:16:32\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            \e[33mif\e[0m\
    \ (unique(i)) list.+=(i)\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m    value += is not a member of List[Long] - did you mean\
    \ List[Long].!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1659978628
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n      x.filter(i => (i.toString.filter(c => c.toString.toInt\
    \ % 2 == 0).length == 0)).sorted\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 15l.toLong, 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong,\
    \ 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978630
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        x.filter(y => y.toString.filter(z => z\
    \ == '2' || z == '4' || z == '6' || z == '8').isEmpty).sorted\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprhi7s7uf.scala:17)\n\tat Problem.main(tmprhi7s7uf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978630
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        x.filter(i =>\
    \ i.toString.forall(c => c.asDigit % 2 != 0)).sorted\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong,\
    \ 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978633
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val l = ListBuffer[Long]()\n        for\
    \ (i <- x) {\n            if (!i.toString.contains(\"2\") && !i.toString.contains(\"\
    4\") && !i.toString.contains(\"6\") && !i.toString.contains(\"8\")) {\n      \
    \          l += i\n            }\n        }\n        l.sorted.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxwz1b6bb.scala:23)\n\tat Problem.main(tmpxwz1b6bb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978632
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        var result : List[Long] = List[Long]()\n\
    \        for (k <- x) {\n            var f : Boolean = true\n            for (i\
    \ <- k.toString()) {\n                if (i % 2 == 0) {\n                    f\
    \ = false\n                    break\n                }\n            }\n     \
    \       if (f) result = k :: result\n        }\n        result.sorted\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdpcnbu2g.scala:19:20 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978629
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        var result = List[Long]()\n        for\
    \ (i <- x) {\n            var flag = true\n            for (j <- i.toString.toCharArray())\
    \ {\n                if (j == '0' || j == '2' || j == '4' || j == '6' || j ==\
    \ '8') {\n                    flag = false\n                    break\n      \
    \          }\n            }\n            if (flag) result = result :+ i\n    \
    \    }\n        result.sorted\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 15l.toLong, 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong,\
    \ 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_bpa1b5g.scala:19:20 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978632
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val digitArray = x.toArray\n        var\
    \ uniqueDigitList = new ListBuffer[Long]()\n        for (value <- digitArray)\
    \ {\n            val digitString = value.toString\n            var evenFlag =\
    \ false\n            for (c <- digitString) {\n                if (c == '2' ||\
    \ c == '4' || c == '6' || c == '8' || c == '0') evenFlag = true\n            }\n\
    \            if (!evenFlag) uniqueDigitList += value\n        }\n        uniqueDigitList.toList.sorted\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978639
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n      // Fill up this function body\n      //\
    \ You can add another function as well, if required\n      val result = new ListBuffer[Long]\n\
    \      for (n <- x) {\n        if (n.toString.toCharArray.filter(_ % 2 == 0).length\
    \ == 0) {\n          result += n\n        }\n      }\n      result.toList.sorted\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978639
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        var y = new ListBuffer[Long]()\n\
    \        val a = x.sorted\n        for (i <- a) {\n            if (!i.toString.contains(\"\
    2\") && !i.toString.contains(\"4\") && !i.toString.contains(\"6\") && !i.toString.contains(\"\
    8\") && !i.toString.contains(\"0\")) {\n                y += i\n            }\n\
    \        }\n        return y.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978639
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        ???\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "scala.NotImplementedError: an implementation is missing\n\tat scala.Predef$.$qmark$qmark$qmark(Predef.scala:344)\n\
    \tat Problem$.uniqueDigits(tmp924cr4m_.scala:13)\n\tat Problem$.main(tmp924cr4m_.scala:16)\n\
    \tat Problem.main(tmp924cr4m_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978606
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // your solution here\n        def hasUniqueDigits(number\
    \ : Long) : Boolean = {\n            val digits = number.toString.toList.map(x\
    \ => x.asDigit)\n            digits.find(_ % 2 == 0) match {\n               \
    \ case Some(n) => false\n                case None => true\n            }\n  \
    \      }\n        x.filter(hasUniqueDigits).sorted\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong,\
    \ 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978640
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        val s = x.filter(a\
    \ => (!a.toString.contains(\"2\")) && (!a.toString.contains(\"4\")) && (!a.toString.contains(\"\
    6\")) && (!a.toString.contains(\"8\")) && (!a.toString.contains(\"0\")))\n   \
    \     s.sorted\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978640
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        x.filter(i => i.toString.forall(i => i.toString.toInt%2\
    \ != 0)).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978640
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        x.filter(x => !x.toString.exists(x =>\
    \ (x.toInt - '0') % 2 == 0)).sorted\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978640
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        x.filter(i => i.toString.toCharArray.filter(c\
    \ => c % 2 == 0).length == 0).sorted\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978640
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        var result : List[Long] = List[Long]()\n\
    \        for (i <- x) {\n            if (i.toString.map(_.asDigit).forall(j =>\
    \ j % 2 != 0)) {\n                result = result :+ i\n            }\n      \
    \  }\n        result.sorted\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 15l.toLong, 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong,\
    \ 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978640
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        return x.filter(i => i.toString.forall(c\
    \ => c - '0' != 2 && c - '0' != 4 && c - '0' != 6 && c - '0' != 8)).sorted\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3xhrlaqs.scala:17)\n\tat Problem.main(tmp3xhrlaqs.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978640
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        var l = scala.collection.mutable.ArrayBuffer[Long]()\n\
    \        for (i <- x) {\n            if (!i.toString.exists(c => c % 2 == 0))\
    \ l += i\n        }\n        return l.toList.sorted\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong,\
    \ 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978640
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        x.filter(i => i.toString.forall(c => (c\
    \ - '0') % 2 == 1)).sorted\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 15l.toLong, 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong,\
    \ 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978640
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        x.sorted.filter(i => toString(i).forall(c\
    \ => toString(c.toInt - '0'.toInt).forall(!_.isEven)))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong,\
    \ 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpriv4tkbw.scala:13:38 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        x.sorted.filter(\e[36mi\e[0m => toString(i).forall(\e\
    [36mc\e[0m => toString(c.toInt - \e[31m'0'\e[0m.toInt).forall(!_.isEven)))\n\e\
    [31m\e[31m   |\e[0m                                      ^\e[0m\n\e[31m   |\e\
    [0m         too many arguments for \e[33mmethod\e[0m \e[35mtoString\e[0m in \e\
    [33mclass\e[0m \e[35mAny\e[0m: (): String\n1 error found\n"
  stdout: ''
  timestamp: 1659978637
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        x.filter(y => y.toString.toCharArray.map(c\
    \ => c.toInt).forall(z => z % 2 != 0)).sorted\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978640
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        def evenDigit(num : Long) : Boolean =\
    \ num match {\n            case 0 => false\n            case _ => if (num % 2\
    \ == 0) true else evenDigit(num / 10)\n        }\n        def evenDigitRec(x :\
    \ List[Long], y : List[Long]) : List[Long] = {\n            if (x.isEmpty) y\n\
    \            else if (evenDigit(x.head)) evenDigitRec(x.tail, y)\n           \
    \ else evenDigitRec(x.tail, y :+ x.head)\n        }\n        evenDigitRec(x, List[Long]()).sorted\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978640
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        def helper(s : String) : Boolean = {\n\
    \            if (s.length == 0) return true\n            else if (s.head % 2 ==\
    \ 0) return false\n            else return helper(s.tail)\n        }\n       \
    \ x.sortWith(_ < _).filter(y => helper(y.toString))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong,\
    \ 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978640
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Your code goes here\n        var oddDigits\
    \ = SortedSet[Long]()\n        for (n <- x) {\n        \tvar tmp = n\n       \
    \ \tvar noEven = true\n        \twhile (tmp > 0) {\n        \t\tif (tmp % 2 ==\
    \ 0) {\n        \t\t\tnoEven = false\n        \t\t\ttmp = 0\n        \t\t} else\
    \ {\n        \t\t\ttmp /= 10\n        \t\t}\n        \t}\n        \tif (noEven)\
    \ oddDigits += n\n        }\n        return oddDigits.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong,\
    \ 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978641
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        var even = Set[Char]()\n        even +=\
    \ '0'\n        even += '2'\n        even += '4'\n        even += '6'\n       \
    \ even += '8'\n        var res = List[Long]()\n        for (e <- x) {\n      \
    \      var str = e.toString\n            var found = false\n            for (j\
    \ <- 0 until str.length) {\n                if (even.contains(str(j))) {\n   \
    \                 found = true\n                    break\n                }\n\
    \            }\n            if (!found) res = res :+ e\n        }\n        res.sorted\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjwz330wf.scala:26:20 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978638
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // 'return List[Long]()' for compilation\n        return List[Long]()\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdwiqm7xe.scala:18)\n\tat Problem.main(tmpdwiqm7xe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978640
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // This can be improved by removing even\
    \ numbers from the list first.\n        // For example, by removing the even number\
    \ 100, we get rid of the\n        // even numbers 10, 1, and 0. Then we remove\
    \ the even number 10 and\n        // get rid of 1.\n        x.filter(x => x.toString.toList.map(x\
    \ => (x - '0')).forall(x => x % 2 != 0)).sorted\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978642
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        def uniqueDigitsHelper(n : Long) : Boolean\
    \ = {\n            def uniqueDigitsHelperHelper(nn : Long) : Boolean = {\n   \
    \             if (nn == 0) true\n                else if (nn % 10 % 2 == 0) false\n\
    \                else uniqueDigitsHelperHelper(nn / 10)\n            }\n     \
    \       uniqueDigitsHelperHelper(n)\n        }\n        x.filter(uniqueDigitsHelper(_)).sorted\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978643
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        def isUnique(y : Long) : Boolean = {\n\
    \            def helper(z : Long) : Boolean = {\n                if (z < 10) (z\
    \ == 1 || z == 3 || z == 5 || z == 7 || z == 9)\n                else helper(z\
    \ / 10) && (z % 10 == 1 || z % 10 == 3 || z % 10 == 5 || z % 10 == 7 || z % 10\
    \ == 9)\n            }\n            helper(y)\n        }\n        x.filter(isUnique).sorted\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978643
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        return x.filter(i => (\"\" + i).forall(j\
    \ => j % 2 != 0)).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978644
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // your code here\n        // x.filter(n\
    \ => n.toString.forall(c => c != '0' && c != '2' && c != '4' && c != '6' && c\
    \ != '8')).sorted\n        x.filter(!_.toString.exists(_.asDigit % 2 == 0)).sorted\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978648
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        def isUnique(s : String) : Boolean = {\n\
    \            s.toCharArray.map(x => x.asDigit).exists(y => y % 2 == 0)\n     \
    \   }\n        x.filter(y => isUnique(y.toString)).sorted\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong,\
    \ 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwo43b53q.scala:19)\n\tat Problem.main(tmpwo43b53q.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978649
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n    \tvar result = List[Long]()\n    \tfor (i\
    \ <- x) {\n    \t\tvar isEven = false\n    \t\tvar temp = i\n    \t\twhile (temp\
    \ > 0) {\n    \t\t\tif ((temp % 10) % 2 == 0) {\n    \t\t\t\tisEven = true\n \
    \   \t\t\t\ttemp = 0\n    \t\t\t}\n    \t\t\ttemp /= 10\n    \t\t}\n    \t\tif\
    \ (!isEven) result = i :: result\n    \t}\n    \tresult.sorted\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978650
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        x.filter(y => !y.toString.exists(n =>\
    \ (n.toString.toInt % 2 == 0))).sorted\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978650
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        ???\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "scala.NotImplementedError: an implementation is missing\n\tat scala.Predef$.$qmark$qmark$qmark(Predef.scala:344)\n\
    \tat Problem$.uniqueDigits(tmp924cr4m_.scala:13)\n\tat Problem$.main(tmp924cr4m_.scala:16)\n\
    \tat Problem.main(tmp924cr4m_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978606
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        def f(x : Long) : Boolean = x.toString.map(x\
    \ => x.asDigit).forall(y => y % 2 == 1)\n        // Note that 'x' is not a mutable\
    \ object, we can use a var declaration.\n        var l : List[Long] = List()\n\
    \        for (i <- x) {\n            if (f(i)) l = l :+ i\n        }\n       \
    \ l.sorted\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978650
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // your solution here\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcjqg9pz5.scala:12:52\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m    \e[33mdef\e[0m \e[36muniqueDigits\e\
    [0m(\e[36mx\e[0m : \e[35mList\e[0m[\e[35mLong\e[0m]) : \e[35mList\e[0m[\e[35mLong\e\
    [0m] = {\n\e[31m\e[31m   |\e[0m                                              \
    \      ^\e[0m\n\e[31m   |\e[0m                                               \
    \     Found:    Unit\n\e[31m   |\e[0m                                        \
    \            Required: List[Long]\n\e[31m13 |\e[0m        \e[34m// your solution\
    \ here\e[0m\n\e[31m14 |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978649
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        x.filter(x =>\
    \ x.toString.map(_.asDigit).forall(i => i % 2 != 0)).sorted\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong,\
    \ 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978651
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n    \tvar result = List[Long]()\n    \tfor (i\
    \ <- x) {\n    \t\tif (isAllDigitsUnique(i)) result = i :: result\n    \t}\n \
    \   \tresult.sorted\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3d3mbib5.scala:15:12 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m    \t\t\e[33mif\e[0m (isAllDigitsUnique(i)) result =\
    \ i :: result\n\e[31m\e[31m   |\e[0m    \t\t    ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m    \t\t    Not found: isAllDigitsUnique\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659978648
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val evenDigits = List(0, 2, 4, 6, 8)\n\
    \        val filter = x.filter(p => evenDigits.forall(p => p.toString.contains(p.toString)))\n\
    \        filter.sortWith(_ < _)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 15l.toLong, 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong,\
    \ 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4x_b8gfr.scala:18)\n\tat Problem.main(tmp4x_b8gfr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978650
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        return x.filter(y => !y.toString.contains(\"\
    2\") && !y.toString.contains(\"4\") && !y.toString.contains(\"6\") && !y.toString.contains(\"\
    8\")).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv1plur0d.scala:17)\n\tat Problem.main(tmpv1plur0d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978650
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Type your answer here\n        x.filter(n\
    \ => n.toString.forall(c => (c - '0') % 2 == 1)).sorted\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong,\
    \ 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978651
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        def uniqueDigitsR(x : List[Long], acc\
    \ : List[Long]) : List[Long] = {\n            if (x.isEmpty) acc.reverse\n   \
    \         else {\n                val t = x.head\n                if (isUniq(t))\
    \ uniqueDigitsR(x.tail, t :: acc)\n                else uniqueDigitsR(x.tail,\
    \ acc)\n            }\n        }\n        def isUniq(x : Long) : Boolean = {\n\
    \            var n = x\n            while (n > 0) {\n                if (n % 2\
    \ == 0) return false\n                n /= 10\n            }\n            true\n\
    \        }\n        uniqueDigitsR(x, List[Long]())\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong,\
    \ 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmy1coi1k.scala:32)\n\tat Problem.main(tmpmy1coi1k.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978650
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        var n = x\n        var m = Set[Long]()\n\
    \        while (n.size > 0) {\n            var c = n.head\n            var d =\
    \ n.head\n            while (c > 0) {\n                d = c % 10\n          \
    \      if (d % 2 == 0) {\n                    m.add(n.head)\n                \
    \    c = 0\n                }\n                c = c / 10\n            }\n   \
    \         n = n.tail\n        }\n        var y = x.filter(!m.contains(_))\n  \
    \      return y.sorted\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978651
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n    \tdef isOdd(x : Long) : Boolean = {\n    \t\
    \tval str : String = x.toString\n    \t\tfor (i <- 0 until str.length) if (str(i)\
    \ % 2 == 0) return false\n    \t\treturn true\n    \t}\n    \treturn x.filter(x\
    \ => isOdd(x)).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978651
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        ???\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.NotImplementedError: an implementation is missing\n\tat scala.Predef$.$qmark$qmark$qmark(Predef.scala:344)\n\
    \tat Problem$.uniqueDigits(tmpemr57qkj.scala:15)\n\tat Problem$.main(tmpemr57qkj.scala:18)\n\
    \tat Problem.main(tmpemr57qkj.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978651
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        val list = new\
    \ ListBuffer[Long]()\n        for (i <- x) {\n          if (i.toString.forall(_\
    \ % 2 != 0)) {\n            list += i\n          }\n        }\n        list.toList.sorted\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978651
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n    \tdef hasEvenDigit(n : Long) : Boolean = {\n\
    \    \t\tdef hasEvenDigitRec(n : Long) : Boolean = {\n    \t\t\tif (n == 0) return\
    \ false\n    \t\t\tif (n % 2 == 0) return true\n    \t\t\treturn hasEvenDigitRec(n\
    \ / 10)\n    \t\t}\n    \t\treturn hasEvenDigitRec(n)\n    \t}\n    \tdef sort(x\
    \ : List[Long]) : List[Long] = {\n    \t\tdef merge(xs : List[Long], ys : List[Long])\
    \ : List[Long] = {\n    \t\t\txs match {\n    \t\t\t\tcase List() => ys\n    \t\
    \t\t\tcase x :: xs1 => ys match {\n    \t\t\t\t\tcase List() => xs\n    \t\t\t\
    \t\tcase y :: ys1 => if (x < y) x :: merge(xs1, ys) else y :: merge(xs, ys1)\n\
    \    \t\t\t\t}\n    \t\t\t}\n    \t\t}\n    \t\tdef mergeSort(xs : List[Long])\
    \ : List[Long] = {\n    \t\t\tval n = xs.length / 2\n    \t\t\tif (n == 0) xs\n\
    \    \t\t\telse {\n    \t\t\t\tval (left, right) = xs splitAt n\n    \t\t\t\t\
    merge(mergeSort(left), mergeSort(right))\n    \t\t\t}\n    \t\t}\n    \t\treturn\
    \ mergeSort(x)\n    \t}\n    \tsort(x.filter(!hasEvenDigit(_)))\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        def isUnique(s : String) : Boolean = {\n\
    \            if (s.isEmpty) return true\n            else {\n                if\
    \ (s.head.isDigit && s.head.asDigit % 2 == 0) return false\n                return\
    \ isUnique(s.tail)\n            }\n        }\n        return x.filter(s => isUnique(s.toString)).sorted\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978652
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        if (x.length == 0) return Nil\n      \
    \  def check(b : Long) : Boolean = {\n            val s = b.toString\n       \
    \     for (ch <- s.toCharArray) {\n                if (ch % 2 == 0) return false\n\
    \            }\n            return true\n        }\n        val y = x.filter(check)\n\
    \        val z = x.filterNot(check)\n        return y ::: uniqueDigits(z)\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat scala.util.control.ControlThrowable.<init>(ControlThrowable.scala:44)\n\
    \tat scala.util.control.ControlThrowable.<init>(ControlThrowable.scala:46)\n\t\
    at scala.runtime.NonLocalReturnControl.<init>(NonLocalReturnControl.scala:19)\n\
    \tat Problem$.check$1$$anonfun$1(tmpn4m3w2x7.scala:17)\n\tat Problem$.check$1$$anonfun$adapted$1(tmpn4m3w2x7.scala:18)\n\
    \tat scala.collection.ArrayOps$.foreach$extension(ArrayOps.scala:1333)\n\tat Problem$.check$1(tmpn4m3w2x7.scala:18)\n\
    \tat Problem$.$anonfun$1(tmpn4m3w2x7.scala:21)\n\tat scala.runtime.java8.JFunction1$mcZJ$sp.apply(JFunction1$mcZJ$sp.scala:17)\n\
    \tat scala.collection.immutable.List.filter(List.scala:515)\n\tat Problem$.uniqueDigits(tmpn4m3w2x7.scala:21)\n\
    \tat Problem$.uniqueDigits(tmpn4m3w2x7.scala:23)\n\tat Problem$.uniqueDigits(tmpn4m3w2x7.scala:23)\n\
    \tat Problem$.uniqueDigits(tmpn4m3w2x7.scala:23)\n\tat Problem$.uniqueDigits(tmpn4m3w2x7.scala:23)\n\
    \tat Problem$.uniqueDigits(tmpn4m3w2x7.scala:23)\n\tat Problem$.uniqueDigits(tmpn4m3w2x7.scala:23)\n\
    \tat Problem$.uniqueDigits(tmpn4m3w2x7.scala:23)\n\tat Problem$.uniqueDigits(tmpn4m3w2x7.scala:23)\n\
    \tat Problem$.uniqueDigits(tmpn4m3w2x7.scala:23)\n\tat Problem$.uniqueDigits(tmpn4m3w2x7.scala:23)\n\
    \tat Problem$.uniqueDigits(tmpn4m3w2x7.scala:23)\n\tat Problem$.uniqueDigits(tmpn4m3w2x7.scala:23)\n\
    \tat Problem$.uniqueDigits(tmpn4m3w2x7.scala:23)\n\tat Problem$.uniqueDigits(tmpn4m3w2x7.scala:23)\n\
    \tat Problem$.uniqueDigits(tmpn4m3w2x7.scala:23)\n\tat Problem$.uniqueDigits(tmpn4m3w2x7.scala:23)\n\
    \tat Problem$.uniqueDigits(tmpn4m3w2x7.scala:23)\n\tat Problem$.uniqueDigits(tmpn4m3w2x7.scala:23)\n\
    \tat Problem$.uniqueDigits(tmpn4m3w2x7.scala:23)\n\tat Problem$.uniqueDigits(tmpn4m3w2x7.scala:23)\n\
    \tat Problem$.uniqueDigits(tmpn4m3w2x7.scala:23)\n\tat Problem$.uniqueDigits(tmpn4m3w2x7.scala:23)\n\
    \tat Problem$.uniqueDigits(tmpn4m3w2x7.scala:23)\n\tat Problem$.uniqueDigits(tmpn4m3w2x7.scala:23)\n\
    \tat Problem$.uniqueDigits(tmpn4m3w2x7.scala:23)\n\tat Problem$.uniqueDigits(tmpn4m3w2x7.scala:23)\n\
    \tat Problem$.uniqueDigits(tmpn4m3w2x7.scala:23)\n\tat Probl"
  stdout: ''
  timestamp: 1659978652
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        def allEven(x : List[Long]) : Boolean\
    \ = {\n            x match {\n                case Nil => true\n             \
    \   case head :: tail => {\n                    if (head % 2 == 0) false\n   \
    \                 else allEven(tail)\n                }\n            }\n     \
    \   }\n        x.filter((i : Long) => {\n            allEven(i.toString.map(_.asDigit).toList)\n\
    \        }).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcfxs3hr2.scala:23:46\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m            allEven(i.toString.map(_.asDigit).toList)\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                    Found:    List[\e[1m\e[31mInt\e[0m]\n\e[31m\
    \   |\e[0m                    Required: List[\e[1m\e[32mLong\e[0m]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659978651
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        def checker(x : Long) : Boolean = {\n\
    \            var tmp = x\n            while (tmp > 0) {\n                if (tmp\
    \ % 2 == 0) return false\n                tmp /= 10\n            }\n         \
    \   return true\n        }\n        return x.filter(checker).sorted\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978654
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        return x.filter(hasUniqueDigits(_)).sorted\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6jzqh7w8.scala:13:24 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mreturn\e[0m x.filter(hasUniqueDigits(_)).sorted\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                        Not found: hasUniqueDigits\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659978651
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        x.filter(i => {\n        \ti.toString.map(j\
    \ => j.asDigit % 2 == 1).reduceLeft(_ & _)\n        }).sorted\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978657
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        x.filter(y => y.toString.forall(x => (x\
    \ - '0') % 2 != 0)).sorted\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 15l.toLong, 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong,\
    \ 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978659
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        x.filter(i =>\
    \ i.toString.matches(\"^(?i)[13579]+$\")).sorted\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978659
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n\t// your solution to Problem 2 here\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgba6tvn_.scala:12:52\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m    \e[33mdef\e[0m \e[36muniqueDigits\e\
    [0m(\e[36mx\e[0m : \e[35mList\e[0m[\e[35mLong\e[0m]) : \e[35mList\e[0m[\e[35mLong\e\
    [0m] = {\n\e[31m\e[31m   |\e[0m                                              \
    \      ^\e[0m\n\e[31m   |\e[0m                                               \
    \     Found:    Unit\n\e[31m   |\e[0m                                        \
    \            Required: List[Long]\n\e[31m13 |\e[0m\t\e[34m// your solution to\
    \ Problem 2 here\e[0m\n\e[31m14 |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978658
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        def isUnique(n : Long) : Boolean = {\n\
    \        \tdef isEven(d : Long) : Boolean = {\n        \t\t(d % 2 == 0)\n    \
    \    \t}\n        \tvar nn = n\n        \tvar isuniq = true\n        \twhile (nn\
    \ > 0) {\n        \t\tvar d = nn % 10\n        \t\tif (isEven(d)) {\n        \t\
    \t\tisuniq = false\n        \t\t\tnn = 0\n        \t\t}\n        \t\tnn = nn /\
    \ 10\n        \t}\n        \tisuniq\n        }\n        x.filter(isUnique(_)).sorted\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978660
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        def check(x : Long) : Boolean = {\n  \
    \      \tif (x < 10) true\n        \telse if (x % 2 == 0) false\n        \telse\
    \ check(x / 10)\n        }\n        var result = new ListBuffer[Long]\n      \
    \  for (i <- x) {\n        \tif (check(i)) result += i\n        }\n        result.toList.sorted\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978662
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        def uniqueDigitsHelper(n : Long) : Boolean\
    \ = {\n            def uniqueDigitsHelperHelper(nn : Long) : Boolean = {\n   \
    \             nn match {\n                    case 0 => true\n               \
    \     case _ => (nn % 10) % 2 == 1 && uniqueDigitsHelperHelper(nn / 10)\n    \
    \            }\n            }\n            uniqueDigitsHelperHelper(n)\n     \
    \   }\n        x.filter(uniqueDigitsHelper).sorted\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong,\
    \ 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978661
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val f = (x : Long) => x.toString.exists(_.asDigit\
    \ % 2 == 0)\n        x.filter(!f(_)).sorted\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978661
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        return List[Long]()\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong,\
    \ 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp79cm9mrd.scala:16)\n\tat Problem.main(tmp79cm9mrd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978662
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        def isUnique(x : Long) : Boolean = (x.toString.toList.map(_.asDigit).filter(_\
    \ % 2 == 0)).isEmpty\n        def comp(x : Long, y : Long) : Boolean = x < y\n\
    \        x.filter(isUnique).sortWith(comp)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978662
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Define a helper function to get the\
    \ digits of a given number\n        def getDigits(x : Long) : List[Int] = {\n\
    \            var res = List[Int]()\n            var q = x\n            while (q\
    \ > 0) {\n                res = (q % 10).toInt :: res\n                q /= 10\n\
    \            }\n            res\n        }\n        // Use the helper function\
    \ to get the digits of each number in \n        // the given list, then sort them\
    \ and eliminate the even numbers.\n        // Then we can get the unique numbers\
    \ in each number's digits.\n        // If a number doesn't contain even number\
    \ in its digits, then \n        // the unique number list of its digits is the\
    \ same as its digit\n        // list, otherwise the unique number list is empty.\n\
    \        val res = new ListBuffer[Long]()\n        for (num <- x) {\n        \
    \    val digits = getDigits(num)\n            val uniqueDigits = digits.filter(_\
    \ % 2 != 0).sorted\n            if (uniqueDigits == digits) res += num\n     \
    \   }\n        res.toList.sorted\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 15l.toLong, 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong,\
    \ 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbicjdi9z.scala:40)\n\tat Problem.main(tmpbicjdi9z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978662
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        def hasEvenDigit(num : Long) : Boolean\
    \ = {\n            if (num == 0) return false\n            val d = num % 10\n\
    \            if (d % 2 == 0) return true\n            hasEvenDigit(num / 10)\n\
    \        }\n        x.filter(!hasEvenDigit(_)).sorted\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong,\
    \ 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978661
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        var res = List[Long]()\n\
    \        for (n <- x) {\n            var flag = true\n            for (i <- n.toString())\
    \ {\n                if (i.toString().toInt % 2 == 0) {\n                    flag\
    \ = false\n                    break\n                }\n            }\n     \
    \       if (flag) res = res :+ n\n        }\n        res.sorted\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpc1rm6an4.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978658
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        x.filter(a => !a.toString.exists(c =>\
    \ \"02468\".contains(c))).sorted\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 15l.toLong, 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong,\
    \ 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978662
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        var result =\
    \ List[Long]()\n        for (i <- x) {\n            if (i.toString.forall(c =>\
    \ c.asDigit % 2 != 0)) {\n                result = result :+ i\n            }\n\
    \        }\n        result.sorted\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978662
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        def isUnique(num\
    \ : Long) : Boolean = {\n            def loop(num : Long) : Boolean = {\n    \
    \            if (num == 0) return true\n                else if (num % 2 == 0)\
    \ return false\n                else loop(num / 10)\n            }\n         \
    \   loop(num)\n        }\n        x.filter(num => isUnique(num)).sorted\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978662
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        if (x.size == 0) {\n            return\
    \ List[Long]()\n        }\n        var l = x.filter((i) => i.toString.forall(c\
    \ => c.asDigit % 2 != 0))\n        var list = l.toList\n        list.sortWith(_\
    \ < _)\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978662
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        var ans = x.filter(i => i.toString.count(c\
    \ => (c.toString.toInt % 2 == 0)) == 0)\n        ans.sorted\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong,\
    \ 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978663
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n      x.filter(x => x.toString.forall(y => (y\
    \ - '0') % 2 != 0)).sorted\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 15l.toLong, 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong,\
    \ 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978662
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        x.filter(l => l.toString.map(x => x.asDigit).toSet.forall(a\
    \ => a % 2 != 0)).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978663
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        var result = List[Long]()\n        for\
    \ (ele <- x) {\n            var hasEven = false\n            var tmp = ele\n \
    \           while (tmp > 0) {\n                var num = tmp % 10\n          \
    \      if (num % 2 == 0) {\n                    hasEven = true\n             \
    \       tmp = 0\n                }\n                tmp /= 10\n            }\n\
    \            if (!hasEven) result = result :+ ele\n        }\n        result.sorted\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978663
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n    \tx.filter(hasUniqueDigits(_)).sorted\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpc21phruk.scala:13:17 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m    \tx.filter(hasUniqueDigits(_)).sorted\n\e[31m\e[31m\
    \   |\e[0m    \t         ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \t         Not\
    \ found: hasUniqueDigits\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978661
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        x.filter(n => n.toString.exists(c => (c.toInt\
    \ - '0') % 2 == 1)).sorted\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 15l.toLong, 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong,\
    \ 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpg4ve7qs5.scala:16)\n\tat Problem.main(tmpg4ve7qs5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978664
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        def isEven(n : Long) : Boolean = n % 2\
    \ == 0\n        def anyEven(x : List[Long]) : Boolean = x.exists(isEven)\n   \
    \     x.filter(!anyEven(_)).sorted\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprvdssfj9.scala:15:26\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        x.filter(!anyEven(_)).sorted\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (_$1 : Long)\n\e[31m   |\e[0m                  \
    \        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978665
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n    \tx.filter(x => x.toString.forall(c => c %\
    \ 2 != 0)).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978666
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val evenDigits = Set(2, 4, 6, 8, 0)\n\
    \        val y = x.filter(a => {\n            a.toString.map(a => a.asDigit).forall(a\
    \ => !evenDigits.contains(a))\n        })\n        y.sorted\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong,\
    \ 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978666
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        def f(xs : List[Long],\
    \ acc : List[Long]): List[Long] = {\n        \tif (xs.isEmpty) acc\n        \t\
    else {\n        \t\tval isUnique = xs.head.toString.forall(c => c.asDigit % 2\
    \ != 0)\n        \t\tif (isUnique) f(xs.tail, xs.head :: acc)\n        \t\telse\
    \ f(xs.tail, acc)\n        \t}\n        }\n        f(x, List[Long]()).sorted\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978666
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n\t\tval result = SortedSet[Long]()\n\t\tfor (i\
    \ <- x) {\n\t\t\tif (!i.toString.exists(_.isDigit && _.asDigit % 2 == 0)) {\n\t\
    \t\t\tresult += i\n\t\t\t}\n\t\t}\n\t\tresult.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong,\
    \ 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpmkwtdmby.scala:20:4 ------------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m   Incompatible combinations of tabs and spaces in indentation prefixes.\n\e\
    [31m   |\e[0m   Previous indent : 2 tabs\n\e[31m   |\e[0m   Latest indent   :\
    \ 4 spaces\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpmkwtdmby.scala:15:23 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m\t\t\t\e[33mif\e[0m (!i.toString.exists(_.isDigit &&\
    \ _.asDigit % \e[31m2\e[0m == \e[31m0\e[0m)) {\n\e[31m\e[31m   |\e[0m\t\t\t  \
    \                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\t\t\
    \t                       Wrong number of parameters, expected: 1\n2 errors found\n"
  stdout: ''
  timestamp: 1659978664
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val result = x.filter(p => {\n       \
    \     var num = p\n            var list = new ListBuffer[Int]()\n            while\
    \ (num > 0) {\n                list += num.toInt % 10\n                num /=\
    \ 10\n            }\n            !list.exists(p => p % 2 == 0)\n        })\n \
    \       result.sorted\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978667
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val l = x.filter(y => y.toString.toCharArray.forall(z\
    \ => (z - '0') % 2 != 0))\n        l.sortWith(_ < _)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong,\
    \ 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978667
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // `x` is list of positive integers\n        // You have to return sorted list\
    \ of all elements that hasn't any even digit.\n        // Note: Returned list\
    \ should be sorted in increasing order.\n        val e = List(\"0\", \"2\", \"\
    4\", \"6\", \"8\")\n        val a = ListBuffer[Long]()\n        for (i <- x) {\n\
    \            var c = 0\n            for (j <- i.toString.toCharArray) {\n    \
    \            if (e.contains(j.toString)) {\n                    c = 1\n      \
    \          }\n            }\n            if (c == 0) {\n                a += i\n\
    \            }\n        }\n        a.toList.sorted\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong,\
    \ 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978667
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        val a = x.filter(x => x.toString.exists(c\
    \ => c.toString.toInt % 2 == 0))\n        val b = x.filter(x => !a.contains(x))\n\
    \        b.sorted\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978667
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        def isUnique(l : Long) : Boolean = {\n\
    \            val r = l.toString\n            for (i <- r) {\n                if\
    \ (i % 2 == 0) return false\n            }\n            return true\n        }\n\
    \        x.filter(isUnique(_)).sorted\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978667
