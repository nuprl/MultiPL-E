name: HumanEval_36_fizz_buzz
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Return the number of times the digit 7 appears in integers less than n which\
  \ are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n    // >>>\
  \ fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n    def\
  \ fizzBuzz(n : Long) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(fizzBuzz((50l)) ==\
  \ (0l));\n    assert(fizzBuzz((78l)) == (2l));\n    assert(fizzBuzz((79l)) == (3l));\n\
  \    assert(fizzBuzz((100l)) == (3l));\n    assert(fizzBuzz((200l)) == (6l));\n\
  \    assert(fizzBuzz((4000l)) == (192l));\n    assert(fizzBuzz((10000l)) == (639l));\n\
  \    assert(fizzBuzz((100000l)) == (8026l));\n    }\n\n}\n"
completions: ["        def fizzBuzz(n : Long, divisor : Long, remainder : Long, result\
    \ : Long) : Long = {\n            if (n < divisor) result\n            else {\n\
    \                if (n % divisor == remainder) fizzBuzz(n - 1, divisor, remainder,\
    \ if (n % 10 == 7) result + 1 else result)\n                else fizzBuzz(n -\
    \ 1, divisor, remainder, result)\n            }\n        }\n        fizzBuzz(n\
    \ - 1, 11, 0, 0) + fizzBuzz(n - 1, 13, 2, 0)", "        var counter = 0l\n   \
    \     var x = 11l\n        while (x < n) {\n            if (x % 11 == 0 || x %\
    \ 13 == 0) {\n                val xStr = x.toString\n                for (d <-\
    \ xStr) {\n                    if (d == '7') counter += 1\n                }\n\
    \            }\n            x += 1\n        }\n        counter", "        def\
    \ fizzBuzz0(n : Long, a : Int, b : Int) : Long = {\n            if (n == 0) 0\n\
    \            else if (n % (a * b) == 0) fizzBuzz0(n / 10, a, b) + ((n % 10) ==\
    \ 7).toLong\n            else if (n % a == 0) fizzBuzz0(n / 10, a, b) + ((n %\
    \ 10) == 7).toLong\n            else if (n % b == 0) fizzBuzz0(n / 10, a, b) +\
    \ ((n % 10) == 7).toLong\n            else fizzBuzz0(n / 10, a, b)\n        }\n\
    \        fizzBuzz0(n, 11, 13)", "        // Fill in the logic here\n        return\
    \ 1l", "        // Define a function that takes a number, a divisor, and a limit,\
    \ and returns how many times the divisor\n        // divides the number.\n   \
    \     def countFactors(number : Long, divisor : Long, limit : Long) : Long = {\n\
    \            def loop(number : Long, divisor : Long, count : Long) : Long = if\
    \ (number % divisor == 0) loop(number / divisor, divisor, count + 1) else count\n\
    \            loop(number, divisor, 0)\n        }\n        // Use the above function\
    \ to compute the number of times 2 and 5 divide n.\n        val twos = countFactors(n,\
    \ 2, n)\n        val fives = countFactors(n, 5, n)\n        // Numerator is the\
    \ number of multiples of 11 or 13 less than n.\n        val numerator = n / 11\
    \ + n / 13 - n / (11 * 13)\n        // Denominator is the number of multiples\
    \ of 5 less than n.\n        val denominator = n / 5 - n / (5 * 11) - n / (5 *\
    \ 13) + n / (5 * 11 * 13)\n        // The numerator of the answer is the numerator\
    \ of the problem times the number of factors of 2 or 5.\n        val numeratorAnswer\
    \ = numerator * (twos - fives)\n        // The denominator of the answer is the\
    \ denominator of the problem times the number of factors of 5.\n        val denominatorAnswer\
    \ = denominator * fives\n        // Return the final result.\n        numeratorAnswer\
    \ - denominatorAnswer", "        var l = 0l\n        var c = 0l\n        while\
    \ (l < n) {\n            if (l % 11 == 0 || l % 13 == 0) {\n                var\
    \ l2 = l\n                while (l2 > 0) {\n                    if (l2 % 10 ==\
    \ 7) c += 1\n                    l2 /= 10\n                }\n            }\n\
    \            l += 1\n        }\n        return c", '        ((1l to n - 1).filter(x
    => (x % 11 == 0 || x % 13 == 0)).map(x => toDigits(x)).flatten.filter(x => x ==
    7).length)', "        var count = 0l\n        var i = 1l\n        var b = 0l\n\
    \        while (i < n) {\n            if (i % 11 == 0) {\n                count\
    \ += i.toString.count(c => c == '7')\n            }\n            if (i % 13 ==\
    \ 0) {\n                count += i.toString.count(c => c == '7')\n           \
    \ }\n            i += 1\n        }\n        return count", "        return (1l\
    \ to n).filter(x => x % 11 == 0 || x % 13 == 0).map(x => x.toString).map(x =>\
    \ x.count(c => c == '7')).sum", "        var count = 0\n        for (i <- 1 to\
    \ n.toInt - 1) {\n            if (i % 11 == 0 || i % 13 == 0) {\n            \
    \    var j = i\n                while (j > 0) {\n                    if (j % 10\
    \ == 7) count += 1\n                    j /= 10\n                }\n         \
    \   }\n        }\n        return count", "        // Let m be the smallest number\
    \ divisible by both 11 and 13.\n        // Then m = 11 * 13 = 143.\n        //\
    \ Let r = 143 - 7 = 136.\n        // Then the range of valid numbers is the range\
    \ from [0, n - 7), and the number of multiples\n        // of 11 and 13 in that\
    \ range is floor(n / m) = floor((n - 7) / 136).\n        // However, this answer\
    \ is off by 1 for multiples of 7 * 11 * 13.\n        // We can fix this by adding\
    \ a check to see if n is a multiple of 7 * 11 * 13, and if so, subtracting 1.\n\
    \        var m = 11 * 13\n        var r = m - 7\n        var multiple = n / m\n\
    \        if (n % m >= r) multiple += 1\n        multiple -= n / (7 * m)\n    \
    \    return multiple", "        var count = 0l\n        for (i <- 0l until n)\
    \ {\n            if (i % 11 == 0 || i % 13 == 0) {\n                count += i.toString.count(_\
    \ == '7')\n            }\n        }\n        return count", "        def gcd(a\
    \ : Long, b : Long) : Long = {\n            if (b == 0) a else gcd(b, a % b)\n\
    \        }\n        def lcm(a : Long, b : Long) : Long = {\n            val g\
    \ = gcd(a, b)\n            if (g == 0) 0 else (a / g) * b\n        }\n       \
    \ var x = n\n        var ans = 0l\n        while (x > 0) {\n            x -= lcm(11,\
    \ 13)\n            ans += 1\n        }\n        ans", "        var count = 0l\n\
    \        val numbers = (11l to n - 1l by 11l).toList ::: (13l to n - 1l by 13l).toList\n\
    \        for (i <- numbers) count += i.toString.filter(_ == '7').length\n    \
    \    count", "        var list = List[Long]()\n        for (i <- 11 to n by 11)\
    \ {\n            list = i :: list\n        }\n        for (i <- 13 to n by 13)\
    \ {\n            list = i :: list\n        }\n        val c = list.distinct.filter(x\
    \ => {\n            x % 11 == 0 || x % 13 == 0\n        }).map(x => {\n      \
    \      x.toString.filter(y => y == '7').length\n        }).sum\n        return\
    \ c", "        var result = 0l\n        for (i <- (1l to n).filter(i => i % 11\
    \ == 0 || i % 13 == 0)) {\n            result += i.toString.count(_ == '7')\n\
    \        }\n        result", "        def f(n : Long, acc : Long) : Long = {\n\
    \            val s = n.toString\n            if (n < 1) acc\n            else\
    \ if (n % 11 == 0 || n % 13 == 0) {\n                var a = acc\n           \
    \     for (i <- 0 until s.length) if (s(i) == '7') a += 1\n                f(n\
    \ - 1, a)\n            }\n            else f(n - 1, acc)\n        }\n        f(n\
    \ - 1, 0)", "        var c = 0l\n        for (i <- 1l to n - 1l) if (i % 11 ==\
    \ 0l || i % 13 == 0l) {\n            var a = i\n            while (a > 0l) {\n\
    \                if (a % 10 == 7l) c += 1l\n                a /= 10l\n       \
    \     }\n        }\n        c", "        if (n == 1) return 0;\n        var m\
    \ = max(n, 78l);\n        var (fizz, buzz) = (0l, 0l);\n        if (m >= 11l)\
    \ fizz = (m / 11) * 7;\n        if (m >= 13l) buzz = (m / 13) * 7;\n        if\
    \ (m >= 143l) fizzBuzz(143l) + (m / 143) * 7 - 7;\n        return fizz + buzz;",
  "        var total = 0l\n        for (i <- 1l to n - 1) if (i % 11 == 0 || i % 13\
    \ == 0) {\n            var c = i\n            while (c > 0) {\n              \
    \  if (c % 10 == 7) total += 1\n                c /= 10\n            }\n     \
    \   }\n        total", "        var result = 0l\n        var i = 0l\n        while\
    \ (i < n) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                result\
    \ += i.toString.filter(_ == '7').length\n            }\n            i += 1\n \
    \       }\n        return result", "        val xs = for (i <- 1 to n.toInt if\
    \ i % 11 == 0 || i % 13 == 0) yield i\n        xs.map(_.toString.count(_ == '7')).sum",
  "        def loop(n : Long, soFar : Long) : Long = {\n            if (n <= 0) soFar\n\
    \            else if (n % 11 == 0 || n % 13 == 0) loop(n / 10, soFar + 1)\n  \
    \          else loop(n / 10, soFar)\n        }\n        loop(n, 0)", "       \
    \ var x = n\n        var count = 0l\n        var arr = ArrayBuffer[Long]()\n \
    \       var flag = false\n        while(x > 0) {\n            var digit = x %\
    \ 10\n            if(digit == 7) {\n                flag = true\n            \
    \    count += 1\n            }\n            arr += digit\n            x /= 10\n\
    \        }\n        if(flag) {\n            var sum = 0l\n            for(i <-\
    \ 0 until arr.length) {\n                sum += pow(10, i).toLong * arr(i)\n \
    \           }\n            if(sum % 11 == 0 || sum % 13 == 0) count += 1\n   \
    \     }\n        count", "        var sum = 0l\n        var i = 11l\n        while\
    \ (i < n) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                var\
    \ string = i.toString\n                var j = 0\n                while (j < string.length)\
    \ {\n                    if (string(j) == '7') sum += 1\n                    j\
    \ += 1\n                }\n            }\n            i += 1\n        }\n    \
    \    return sum", '        0l', "        var s : Long = 0l\n        var m : Long\
    \ = 0l\n        for (i <- (1l) to (n)) {\n            var t : Long = i\n     \
    \       while (t % 7 == 0) {\n                t /= 7\n                s += 1\n\
    \            }\n            while (t % 11 == 0) {\n                t /= 11\n \
    \               m += 1\n            }\n            while (t % 13 == 0) {\n   \
    \             t /= 13\n                m += 1\n            }\n        }\n    \
    \    return min(s, m)", "        def divisible(x : Long, y : Long) = x % y ==\
    \ 0\n        val luckyNums = {\n            val nums = (1 to log10(n).toInt).map(10).reduce(_\
    \ * _)\n            (1 until n).toList.filter(x => divisible(x, 11) || divisible(x,\
    \ 13)).map(x => nums + x)\n        }\n        luckyNums.foldLeft(0l)((a, b) =>\
    \ if (b.toString.indexOf(\"7\") == -1) a else a + 1)", "        //val x = n /\
    \ 11\n        //val y = n / 13\n        //val a = (n - 1) / 11\n        //val\
    \ b = (n - 1) / 13\n        //val c = (n - 1) / 11 + (n - 1) / 13 - (n - 1) /\
    \ (11 * 13)\n        //val d = (a * b - a * c - b * c) / 2 + c\n        //d +\
    \ c\n        val k = n / 11\n        val m = n / 13\n        val h = n / (11 *\
    \ 13)\n        val c = (k * m - k * h - m * h) / 2 + h\n        val d = (n - 1)\
    \ / 11 + (n - 1) / 13 - (n - 1) / (11 * 13)\n        d + c", "        // Define\
    \ your function here\n        var ans = 0\n        for (i <- 1 to (n - 1).toInt)\
    \ {\n            var cnt = 0\n            for (j <- i.toString) {\n          \
    \      if (j == '7') cnt += 1\n            }\n            if (i % 11 == 0 || i\
    \ % 13 == 0) ans += cnt\n        }\n        ans", "        def helper(n : Long,\
    \ res : Long) : Long = {\n            if (n < 0) res\n            else if (n %\
    \ 11 == 0 || n % 13 == 0) helper(n - 1, res + (\"\" + n).count(_ == '7'))\n  \
    \          else helper(n - 1, res)\n        }\n        helper(n - 1, 0)", "  \
    \    if (n < 1) return 0\n      // 1. find all the numbers up to n that are divisible\
    \ by 11 or 13\n      val list : List[Long] = (1l to n).filter(i => (i % 11 ==\
    \ 0) || (i % 13 == 0)).toList\n      // 2. now find the number of times each number\
    \ has 7\n      // 3. for each number in list, count the number of times 7 appears\n\
    \      val result : Long = list.map(num => countDigit(num, 7)).sum\n      // 4.\
    \ return result\n      result", "        def _fizzBuzz(i : Long, c : Long) : Long\
    \ = {\n            if (i >= n) c\n            else if (i % 11 == 0 || i % 13 ==\
    \ 0) {\n                var d = i\n                var c2 = c\n              \
    \  while (d > 0) {\n                    if (d % 10 == 7) c2 += 1\n           \
    \         d /= 10\n                }\n                _fizzBuzz(i + 1, c2)\n \
    \           }\n            else _fizzBuzz(i + 1, c)\n        }\n        _fizzBuzz(0,\
    \ 0)", '        (1 to n.toInt).count(x => (x % 11 == 0 || x % 13 == 0) && x.toString.contains("7"))',
  "        // This is not a very efficient algorithm, but will work for the problem.\n\
    \        var count = 0l\n        for (x <- 11 to n.toInt by 11) {\n          \
    \  if (x % 13 == 0) {\n                count += x.toString.count(_ == '7')\n \
    \           }\n        }\n        for (x <- 13 to n.toInt by 13) {\n         \
    \   if (x % 11 == 0) {\n                count += x.toString.count(_ == '7')\n\
    \            }\n        }\n        count", "        def gcd(x : Long, y : Long)\
    \ : Long = if (y == 0) x else gcd(y, x % y)\n        var count = 0l\n        for\
    \ (i <- 1l to n - 1) if (gcd(i, 110l) % 10 == 7l) count += 1\n        return count",
  "    \t\tif (n < 0) throw new Exception(\"Negative numbers not allowed.\")\n   \
    \ \t\tif (n == 0) return 0\n    \t\tif (n < 10) return if (n == 7) 1 else 0\n\
    \    \t\tvar s = new StringBuilder()\n    \t\tvar m = n\n    \t\twhile (m > 0)\
    \ {\n    \t\t\ts += m % 10\n    \t\t\tm /= 10\n    \t\t}\n    \t\tval num = s.toString.reverse.toLong\n\
    \    \t\tval num7s = if (num % 10 == 7) 1 else 0\n    \t\tnum7s + fizzBuzz(n /\
    \ 10)", "        var divisible : Long = 0\n        var fb : Long = 0\n       \
    \ if (n % 11 == 0) divisible += n / 11\n        if (n % 13 == 0) divisible +=\
    \ n / 13\n        if (n % 11 == 0 && n % 13 == 0) divisible -= n / (11 * 13)\n\
    \        for (i <- 1l to n) {\n            if (i % 11 == 0 || i % 13 == 0) {\n\
    \                fb += i.toString.filter(_ == '7').length\n            }\n   \
    \     }\n        divisible - fb", "        val list = (for(i <- 1 to 9) yield\
    \ (i * 11, i * 13)).toList\n        var count = 0l\n        for(i <- 1l to n -\
    \ 1) {\n            if(i % 11 == 0 || i % 13 == 0) {\n                val l =\
    \ i.toString.toList\n                for(j <- l) if(j == '7') count += 1\n   \
    \         }\n        }\n        return count", "        if (n < 10) 0\n      \
    \  else if (n % 11 == 0) (1 + fizzBuzz(n / 10))\n        else if (n % 13 == 0)\
    \ (1 + fizzBuzz(n / 10))\n        else fizzBuzz(n / 10)", "        n match {\n\
    \            case n if n <= 0 => 0\n            case n if n <= 7 => 0\n      \
    \      case n if n < 11 => if(n % 11 == 0) 1 else 0\n            case n if n <\
    \ 13 => if(n % 11 == 0) 1 else 0\n            case n if n < 17 => if(n % 11 ==\
    \ 0) 1 else 0\n            case n if n < 21 => if(n % 11 == 0) 1 else 0\n    \
    \        case n if n < 31 => if(n % 11 == 0) 1 else 0\n            case n if n\
    \ < 37 => if(n % 11 == 0) 1 else 0\n            case n if n < 41 => if(n % 11\
    \ == 0) 1 else 0\n            case n if n < 47 => if(n % 11 == 0) 1 else 0\n \
    \           case n if n < 51 => if(n % 11 == 0) 1 else 0\n            case n if\
    \ n < 61 => if(n % 11 == 0) 1 else 0\n            case n if n < 67 => if(n % 11\
    \ == 0) 1 else 0\n            case n if n < 71 => if(n % 11 == 0) 1 else 0\n \
    \           case n if n < 77 => if(n % 11 == 0) 1 else 0\n            case n if\
    \ n < 83 => if(n % 11 == 0) 1 else 0\n            case n if n < 91 => if(n % 11\
    \ == 0) 1 else 0\n            case n if n < 97 => if(n % 11 == 0) 1 else 0\n \
    \           case n if n % 11 == 0 => fizzBuzz(n / 10) + fizzBuzz(n % 10)\n   \
    \         case n if n % 11 == 7 => fizzBuzz(n / 10) + fizzBuzz(n % 10) + 1\n \
    \           case n if n % 13 == 0 => fizzBuzz(n / 10) + fizzBuzz(n % 10)\n   \
    \         case n if n % 13 == 7 => fizzBuzz(n / 10) + fizzBuzz(n % 10) + 1\n \
    \           case n => fizzBuzz(n / 10) + fizzBuzz(n % 10)\n        }", '        n
    / 11 * 2 + n / 13 * 2 - n / 11 * 13 * 2', "        def hasDigit7(x : Long) : Boolean\
    \ = x.toString.contains(\"7\")\n        (1l to n).filter(x => x % 11 == 0 || x\
    \ % 13 == 0).filter(x => hasDigit7(x)).size", "        val k = n / 7l\n      \
    \  val k1 = n / 77l\n        val k2 = n / 11l\n        val k3 = n / 13l\n    \
    \    val m1 = k * 2l\n        val m2 = k * 4l\n        val m3 = k * 5l\n     \
    \   val m4 = k * 6l\n        val m5 = k * 8l\n        val m6 = k * 9l\n      \
    \  val m7 = k * 10l\n        val m8 = k * 12l\n        val m9 = k * 14l\n    \
    \    val m10 = k * 15l\n        val m11 = k * 16l\n        val m12 = k * 18l\n\
    \        val m13 = k * 19l\n        val m14 = k * 20l\n        val m15 = k * 22l\n\
    \        val m16 = k * 23l\n        val m17 = k * 24l\n        val m18 = k * 26l\n\
    \        val m19 = k * 27l\n        val m20 = k * 28l\n        val m21 = k * 30l\n\
    \        val m22 = k * 31l\n        val m23 = k * 32l\n        val m24 = k * 34l\n\
    \        val m25 = k * 35l\n        val m26 = k * 36l\n        val m27 = k * 38l\n\
    \        val m28 = k * 39l\n        val m29 = k * 40l\n        val m30 = k * 42l\n\
    \        val m31 = k * 43l\n        val m32 = k * 44l\n        val m33 = k * 46l\n\
    \        val m34 = k * 47l\n        val m35 = k * 48l\n        val m36 = k * 50l\n\
    \        val m37 = k * 51l\n        val m38 = k * 52l\n        val m39 = k * 54l\n\
    \        val m40 = k * 55l\n        val m41 = k * 56l\n        val m42 = k * 58l\n\
    \        val m43 = k * 59l\n        val m44 = k * 60l\n        val m45 = k * 62l\n\
    \        val m46 = k * 63l\n        val m47 = k * 64l\n        val", "       \
    \ var result = 0L\n        for (i <- 1L to n - 1L) {\n            if (i % 11 ==\
    \ 0 || i % 13 == 0) {\n                var temp = i\n                while (temp\
    \ > 0) {\n                    if (temp % 10 == 7) result += 1\n              \
    \      temp /= 10\n                }\n            }\n        }\n        result",
  "        var r = 0\n        for (i <- 1l to n - 1l) {\n            if (i % 11 ==\
    \ 0 || i % 13 == 0) {\n                r += i.toString.count(_ == '7')\n     \
    \       }\n        }\n        return r", "        var r = 0l\n        for (i <-\
    \ 1l to n-1) {\n            if (i % 11 == 0 || i % 13 == 0) {\n              \
    \  r += i.toString.count(p => p == '7')\n            }\n        }\n        return\
    \ r", "        var a = 0l\n        for (i <- 1l to n - 1) {\n            if (i\
    \ % 11 == 0 || i % 13 == 0) {\n                a += i.toString.split(\"\").map(_.toInt).count(_\
    \ == 7)\n            }\n        }\n        return a", "        var count = 0l\n\
    \        for (i <- 0l until n) {\n            if (i % 11 == 0 || i % 13 == 0)\
    \ {\n                val si = i.toString\n                count += si.count(_\
    \ == '7')\n            }\n        }\n        count", "      var c = 0\n      for\
    \ (i <- 1 to n.toInt - 1) if (i % 11 == 0 || i % 13 == 0) c += i.toString.count(_\
    \ == '7')\n      c", "        var dp = Array.fill(n.toInt + 1)(0)\n        dp(0)\
    \ = 1\n        for (i <- 1 to n.toInt) {\n            var q = i\n            while\
    \ (q > 0) {\n                if (q % 10 == 7) dp(i) += 1\n                q /=\
    \ 10\n            }\n        }\n        var c = 0l\n        for (i <- 1 to n.toInt)\
    \ {\n            if (i % 11 == 0 || i % 13 == 0) c += dp(i)\n        }\n     \
    \   return c", "        var p = 1l\n        var count = 0l\n        while (p <\
    \ n) {\n            if (p % 11 == 0 || p % 13 == 0) {\n                var r =\
    \ p\n                while (r > 0) {\n                    if (r % 10 == 7) count\
    \ += 1\n                    r /= 10\n                }\n            }\n      \
    \      p += 1\n        }\n        return count", "        // implementation\n\
    \        var p = 0l\n        var q = 0l\n        var r = 0l\n        if (n > 99)\
    \ {\n            p = n / 100l\n            q = n / 10l - p * 10l\n           \
    \ r = n - p * 100l - q * 10l\n        } else if (n > 9) {\n            q = n /\
    \ 10l\n            r = n - q * 10l\n        } else {\n            r = n\n    \
    \    }\n        if (p == 7 || q == 7 || r == 7) {\n            1l\n        } else\
    \ {\n            0l\n        }", '        0l', "        def count(x : Long, n\
    \ : Long) : Long = {\n            if (x >= n) 0\n            else if (x % 11 ==\
    \ 0 || x % 13 == 0) (if (x % 10 == 7) 1 else 0) + count(x + 1, n)\n          \
    \  else count(x + 1, n)\n        }\n        count(0, n)", "        var count =\
    \ 0l\n        for (i <- 1l to n - 1) if (i % 11 == 0 || i % 13 == 0) count +=\
    \ i.toString.count(_ == '7')\n        count", "        val base : Long = pow(10,\
    \ Math.floor(log10(n) / 2).toLong).toLong\n        val (p1, p2) = (n / base, n\
    \ % base)\n        val (q1, q2) = (p1 / base, p1 % base)\n        val (r1, r2)\
    \ = (q1 / base, q1 % base)\n        val (s1, s2) = (r1 / base, r1 % base)\n  \
    \      val (t1, t2) = (s1 / base, s1 % base)\n        val (u1, u2) = (t1 / base,\
    \ t1 % base)\n        val (v1, v2) = (u1 / base, u1 % base)\n        val (w1,\
    \ w2) = (v1 / base, v1 % base)\n        val (x1, x2) = (w1 / base, w1 % base)\n\
    \        val (y1, y2) = (x1 / base, x1 % base)\n        val (z1, z2) = (y1 / base,\
    \ y1 % base)\n        val (a1, a2) = (z1 / base, z1 % base)\n        val (b1,\
    \ b2) = (a1 / base, a1 % base)\n        val (c1, c2) = (b1 / base, b1 % base)\n\
    \        val (d1, d2) = (c1 / base, c1 % base)\n        val (e1, e2) = (d1 / base,\
    \ d1 % base)\n        val (f1, f2) = (e1 / base, e1 % base)\n        val (g1,\
    \ g2) = (f1 / base, f1 % base)\n        val (h1, h2) = (g1 / base, g1 % base)\n\
    \        val (i1, i2) = (h1 / base, h1 % base)\n        val (j1, j2) = (i1 / base,\
    \ i1 % base)\n        val (k1, k2) = (j1 / base, j1 % base)\n       ", "     \
    \   var count = 0l\n        for (i <- 1 to (n - 1).toInt) {\n            if (i\
    \ % 11 == 0 || i % 13 == 0) {\n                val iStr = i.toString\n       \
    \         count += iStr.filter(_ == '7').length\n            }\n        }\n  \
    \      count", "        var count = 0l\n        for (i <- 2l to n - 1) {\n   \
    \         if (i % 11 == 0 || i % 13 == 0) {\n                val s = i.toString\n\
    \                for (j <- 0 to s.length - 1) {\n                    if (s(j)\
    \ == '7') count += 1\n                }\n            }\n        }\n        count",
  "        var answer = 0l\n        var i = 1l\n        while (i < n) {\n        \
    \    if (i % 11 == 0 || i % 13 == 0) answer += i.toString.count(_ == '7')\n  \
    \          i += 1\n        }\n        return answer", "        var count : Long\
    \ = 0\n        for (i <- 1l to n) {\n            var str : String = i.toString\n\
    \            if (str.contains(\"7\")) {\n                if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                    count += 1\n                }\n          \
    \  }\n        }\n        return count", "        val maxDigit = log10(n).toInt\n\
    \        val base = 10l\n        val baseDigit = pow(base, maxDigit).toLong\n\
    \        val memo = new Memo[Long, Long]\n        memo(0) = 0\n        memo(1)\
    \ = 0\n        memo(2) = 0\n        memo(3) = 0\n        memo(4) = 0\n       \
    \ memo(5) = 0\n        memo(6) = 0\n        memo(7) = 0\n        memo(8) = 0\n\
    \        memo(9) = 0\n        def f(digit : Int, n : Long) : Long = {\n      \
    \      if (digit == maxDigit) {\n                var result = 0l\n           \
    \     var i = 1l\n                while (i < n) {\n                    if (i %\
    \ 11 == 0 || i % 13 == 0) {\n                        var j = i\n             \
    \           while (j > 0) {\n                            if (j % 10 == 7) result\
    \ += 1\n                            j /= 10\n                        }\n     \
    \               }\n                    i += 1\n                }\n           \
    \     result\n            } else {\n                val nextDigit = digit + 1\n\
    \                memo(0) = f(nextDigit, min(n, base))\n                var m =\
    \ 1\n                while (m < 10) {\n                    memo(m) = memo(m -\
    \ 1) + f(nextDigit, min(n, m * baseDigit + base - 1))\n                    m +=\
    \ 1\n                }\n                memo(n / baseDigit % 10)\n           \
    \ }\n        }\n        f(0, n)", "        var count = 0l\n        for (i <- 0l\
    \ until n) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                var\
    \ iCopy = i\n                while (iCopy > 0) {\n                    if (iCopy\
    \ % 10 == 7) count += 1\n                    iCopy /= 10\n                }\n\
    \            }\n        }\n        return count", "        n match {\n       \
    \     case n if n < 0 => 0\n            case n if n < 1 => 0\n            case\
    \ n if n < 2 => 0\n            case n if n < 7 => 0\n            case n if n <\
    \ 8 => 0\n            case n if n < 11 => 0\n            case n if n < 13 => 0\n\
    \            case n if n < 14 => 0\n            case n if n < 17 => 0\n      \
    \      case n if n < 18 => 0\n            case n if n < 21 => 0\n            case\
    \ n if n < 22 => 0\n            case n if n < 27 => 0\n            case n if n\
    \ < 28 => 0\n            case n if n < 31 => 0\n            case n if n < 32 =>\
    \ 0\n            case n if n < 37 => 0\n            case n if n < 38 => 0\n  \
    \          case n if n < 41 => 0\n            case n if n < 42 => 0\n        \
    \    case n if n < 47 => 0\n            case n if n < 48 => 0\n            case\
    \ n if n < 50 => 0\n            case n if n < 51 => 0\n            case n if n\
    \ < 56 => 0\n            case n if n < 57 => 0\n            case n if n < 60 =>\
    \ 0\n            case n if n < 61 => 0\n            case n if n < 66 => 0\n  \
    \          case n if n < 67 => 0\n            case n if n < 70 => 0\n        \
    \    case n if n < 71 => 0\n            case n if n < 76 => 0\n            case\
    \ n if n < 77 => 0\n            case n if n < 78 => 0\n            case n if n\
    \ < 79 => 0\n            case n if n < 82 => 0\n            case n if n < 83 =>\
    \ 0\n            case n if n < 88 => 0\n            case n if n < 89 => 0\n  \
    \          case n if n < 92 => 0\n            case n if n < 93 => 0\n        \
    \    case n if n < 98 => 0\n            case n if n < 99 => 0\n            case\
    \ n if n % 11 == 0 => 1 + fizzBuzz(n / 10)\n            case n if n % 13 == 0\
    \ => 1 + fizzBuzz(n / 10)\n            case n => fizzBuzz(n / 10)\n        }",
  "        (1l to n).filter(x => x % 11 == 0 || x % 13 == 0).map(x => x.toString.count(y\
    \ => y == '7')).sum", "        var m = 0l\n        for (i <- 0 to (n.toInt - 1))\
    \ {\n            if (i % 11 == 0 || i % 13 == 0) {\n                m += math.abs(i.toString.count(_\
    \ == '7'))\n            }\n        }\n        return m", "        // Define the\
    \ count of digit 7 in x.\n        def digit7(x : Long) : Long = if (x % 10 ==\
    \ 7) 1 else 0\n        // Define the sum of digits 7 in x.\n        def sumDigit7(x\
    \ : Long) : Long = {\n            var sum = 0l\n            var m = x\n      \
    \      while (m > 0) {\n                sum += digit7(m)\n                m /=\
    \ 10\n            }\n            sum\n        }\n        var total = 0l\n    \
    \    for (i <- 1 to (n-1).toInt) {\n            if (i % 11 == 0 || i % 13 == 0)\
    \ {\n                total += sumDigit7(i)\n            }\n        }\n       \
    \ total", "        def gcd(a : Long, b : Long) : Long = if (b == 0) a else gcd(b,\
    \ a % b)\n        var result = 0\n        for (i <- 1 to n.toInt - 1) {\n    \
    \        if (i % 11 == 0 || i % 13 == 0) {\n                var tmp = i\n    \
    \            while (tmp > 0) {\n                    if (tmp % 10 == 7) result\
    \ += 1\n                    tmp /= 10\n                }\n            }\n    \
    \    }\n        return result", "        def f(m : Long, num : Long, acc : Long)\
    \ : Long = {\n            if (m == n) acc\n            else {\n              \
    \  if (m % 11 == 0 || m % 13 == 0) {\n                    val count = num.toString.toCharArray.filter(x\
    \ => x.toString.toInt == 7).length\n                    f(m + 1, m + 1, acc +\
    \ count)\n                }\n                else f(m + 1, m + 1, acc)\n     \
    \       }\n        }\n        f(1, 1, 0)", "        val e = toString(n).toCharArray\n\
    \        var count = 0\n        for (i <- 0 until e.length) {\n            if\
    \ (e(i) == '7') count += 1\n        }\n        return count", '        return
    n', '        return n', "        var count = 0l\n        for (i <- 1l to n if\
    \ i % 11 == 0 || i % 13 == 0) {\n            if (i % 100 == 77) count += 3\n \
    \           else if (i % 10 == 7) count += 1\n        }\n        return count",
  "    \treturn (0l /: (11l to n).filter(x => x % 11 == 0 || x % 13 == 0)) { (x, y)\
    \ => x + (y.toString.filter(_ == '7').size.toLong) }", "        var count = 0l\n\
    \        for (i <- 1l to n) {\n            if (i % 11 == 0 || i % 13 == 0) {\n\
    \                count += i.toString.count(_ == '7')\n            }\n        }\n\
    \        return count", "        def count(n : Long, r : Long) : Long = {\n  \
    \          if (n == 0) r\n            else {\n                if (n % 11 == 0\
    \ || n % 13 == 0) {\n                    val x = n.toString\n                \
    \    val y = x.replace(\"7\", \"\")\n                    count(n - 1, r + (x.length\
    \ - y.length))\n                }\n                else count(n - 1, r)\n    \
    \        }\n        }\n        count(n - 1, 0)", "        var count = 0l\n   \
    \     for (i <- 1l to n - 1) {\n            if (i % 11 == 0 || i % 13 == 0) {\n\
    \                val s = i.toString\n                for (c <- s) {\n        \
    \            if (c == '7') count += 1\n                }\n            }\n    \
    \    }\n        count", "      var a = n/11\n      var b = n/13\n      if (a <\
    \ 0) a = 0\n      if (b < 0) b = 0\n      val ab = a * b\n      var ret = a +\
    \ b - ab\n      if (ret < 0) ret = 0\n      a = ab/11\n      b = ab/13\n     \
    \ if (a < 0) a = 0\n      if (b < 0) b = 0\n      ret += a + b - a * b\n     \
    \ if (ret < 0) ret = 0\n      return ret", "        var total = 0l\n        for\
    \ (i <- 1l to n - 1) {\n            if (i % 11 == 0 || i % 13 == 0) {\n      \
    \          var check = i\n                while (check > 0) {\n              \
    \      if (check % 10 == 7) total += 1\n                    check /= 10\n    \
    \            }\n            }\n        }\n        return total", "    \trequire(n\
    \ > 0)\n    \tvar count = 0l\n    \tfor (i <- 1l to n if i % 11 == 0 || i % 13\
    \ == 0) {\n    \t\tvar j = i\n    \t\twhile (j > 0) {\n    \t\t\tif (j % 10 ==\
    \ 7) count += 1\n    \t\t\tj /= 10\n    \t\t}\n    \t}\n    \tcount", "      \
    \  def countDigit(n : Long, d : Int) : Long = {\n            if (n <= 0) 0\n \
    \           else {\n                countDigit(n / 10, d) + (if (n % 10 == d)\
    \ 1 else 0)\n            }\n        }\n        countDigit(n - 1, 7) + countDigit(n\
    \ / 11, 7) + countDigit(n / 13, 7)", "        val buf = scala.collection.mutable.ArrayBuffer[Int]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 3 == 0 && i % 5 == 0)\
    \ buf += 1\n        }\n        return buf.length.toLong", "        def go(i :\
    \ Long, c : Long) : Long = {\n            if (i == n) c\n            else {\n\
    \                if (i % 11 == 0 || i % 13 == 0) go(i + 1, c + i.toString.count(_\
    \ == '7'))\n                else go(i + 1, c)\n            }\n        }\n    \
    \    go(1, 0)", "        var l = List[Long]()\n        for (i <- 1l to n - 1l)\
    \ {\n            if (i % 11l == 0l || i % 13l == 0l) {\n                l = i\
    \ :: l\n            }\n        }\n        var count = 0l\n        l.foreach(i\
    \ => {\n            var j = i.toString\n            for (c <- j) {\n         \
    \       if (c == '7') {\n                    count += 1l\n                }\n\
    \            }\n        })\n        return count", "        // Define the list\
    \ of digits which we are counting up to.\n        val targetDigits = List(7)\n\
    \        // Define the list of bases which we are checking divisibility for.\n\
    \        val bases = List(11, 13)\n        // Initialize the result.\n       \
    \ var result = 0l\n        // For each digit in the target digits.\n        for\
    \ (digit <- targetDigits) {\n            // For each base in the list of bases.\n\
    \            for (base <- bases) {\n                // Add to the result the number\
    \ of times the base fits into the number,\n                // and then remove\
    \ the count of numbers which are divisible by 10.\n                result += (n\
    \ / (pow(10, (log10(base.toDouble)).toInt + 1).toLong) - n / base)\n         \
    \   }\n        }\n        return result", "        var result = 0l\n        for\
    \ (i <- 1l to n) {\n            if (i % 11 == 0 || i % 13 == 0) {\n          \
    \      val i_string = i.toString\n                for (c <- i_string) {\n    \
    \                if (c == '7') result += 1\n                }\n            }\n\
    \        }\n        return result", "        val dp = new Array[Array[Long]](11)\n\
    \        dp(0) = Array(0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l)\n        for\
    \ (i <- 1 to 10) {\n            dp(i) = new Array[Long](11)\n            for (j\
    \ <- 0 to 9) dp(i)(j) = dp(i - 1)(j)\n            dp(i)(i % 11) += 1\n       \
    \ }\n        val b = Array.fill(11)(0l)\n        val ones = Array.fill(11)(1l)\n\
    \        for (i <- 1 to 10) b(i) = dp(10)(i)\n        var res = 0l\n        var\
    \ t = n\n        var carry = 0\n        var level = 0\n        while (t > 0) {\n\
    \            val digit = (t % 10).toInt\n            for (i <- 0 to 10) b(i) +=\
    \ dp(digit)(i)\n            if (digit == 7) {\n                val sum = b.reduceLeft(_\
    \ + _)\n                if (level % 2 == 0) res += sum\n                else res\
    \ -= sum\n            }\n            level += 1\n            t /= 10\n       \
    \ }\n        val f = Array.fill(11)(0l)\n        var p = 11\n        while (p\
    \ <= n) {\n            var ok = true\n            for (i <- 0 to 10) {\n     \
    \           f(i) += b(i)\n                if (p % 11 == i) {\n               \
    \     if (level % 2 == 0) res += f(i)\n                    else res -= f(i)\n\
    \                }\n                if (f(i) > n / p) ok = false\n           \
    \ }\n            if (ok) p *= 11\n            else {\n                p /= 11\n\
    \                for (i <- 0 to 10) f(i) -= b(i)\n                for (i <- 0\
    \ to 10) b(i) += ones(i)\n                if (p * 11 <= n) {\n               \
    \     for (i <- 0 to 10) f(i) += b(i)\n                    p *", "        var\
    \ count = 0l\n        for (i <- 0l until n) {\n            if (i % 11 == 0 ||\
    \ i % 13 == 0) count += i.toString.count(_ == '7')\n        }\n        count",
  "        var count = 0l\n        for (i <- 1l to n) {\n            if (i % 11 ==\
    \ 0 || i % 13 == 0) {\n                var temp = i\n                while (temp\
    \ > 0) {\n                    if (temp % 10 == 7) count += 1\n               \
    \     temp /= 10\n                }\n            }\n        }\n        return\
    \ count", "        (1 until n.toInt).filter(x => (x % 11 == 0 || x % 13 == 0)).map(x\
    \ => x.toString.count(c => c == '7')).sum", "      val divisors = List(7, 11,\
    \ 13)\n      val result = divisors.map(d => (n-1)/d).reduceLeft(_ + _)\n     \
    \ result - fizzBuzzHelper(n, 2) - fizzBuzzHelper(n, 3)", "    \tval ones = List(7l,\
    \ 17l, 27l, 37l, 47l, 57l, 67l, 77l)\n    \tval tens = List(7l, 70l, 71l, 72l,\
    \ 73l, 74l, 75l, 76l, 77l, 78l, 79l)\n    \tif (n <= 99)\n    \t\treturn tens.filter(x\
    \ => x < n).length\n    \telse {\n    \t\tval nDigits = n.toString.length\n  \
    \  \t\tvar count = 0l\n    \t\tfor (i <- 1 to (nDigits - 2))\n    \t\t\tcount\
    \ += ones.length * pow(9, i - 1).toLong\n    \t\tval nDigitsMinusOne = pow(10,\
    \ nDigits - 1).toLong\n    \t\tval nDigitsMinusTwo = pow(10, nDigits - 2).toLong\n\
    \    \t\tval nTens = n / nDigitsMinusTwo\n    \t\tval nOnes = (n - nTens * nDigitsMinusTwo)\
    \ / nDigitsMinusOne\n    \t\tcount += ones.filter(x => x < nOnes).length\n   \
    \ \t\tcount += tens.filter(x => x < nTens).length\n    \t\tcount += (nTens - tens.last)\
    \ * ones.length\n    \t\treturn count\n    \t}", "        val digits = toDigits(n\
    \ - 1)\n        val number = new Array[Int](digits.length)\n        for (i <-\
    \ digits.length - 1 to 0 by -1) {\n            if (i == digits.length - 1) number(i)\
    \ = 1\n            else {\n                var count = 0\n                for\
    \ (j <- 0 to 9) {\n                    count += number(i + 1) * if (i == digits.length\
    \ - 2 && j > digits(i)) 0 else if (j == 3 || j == 7) 1 else 0\n              \
    \  }\n                number(i) = count\n            }\n        }\n        var\
    \ result = 0\n        for (i <- 0 to digits.length - 1) {\n            if (i ==\
    \ digits.length - 1) result += number(i) * if (digits(i) == 3 || digits(i) ==\
    \ 7) 1 else 0\n            else {\n                var count = 0\n           \
    \     for (j <- digits(i) + 1 to 9) {\n                    count += number(i +\
    \ 1) * if (i == digits.length - 2 && j > digits(i)) 0 else if (j == 3 || j ==\
    \ 7) 1 else 0\n                }\n                result += count\n          \
    \  }\n        }\n        result", '        return 0l', "        val n2 = ((n -\
    \ 1) / 11 + 1) * 11\n        val n3 = ((n - 1) / 13 + 1) * 13\n        val n6\
    \ = ((n - 1) / (11 * 13) + 1) * (11 * 13)\n        val r2 = n2 - (11 - (n2 % 11))\n\
    \        val r3 = n3 - (13 - (n3 % 13))\n        val r6 = n6 - (11 * 13 - (n6\
    \ % (11 * 13)))\n        val k = (r2 + r3 + r6) * 2 / (11 + 13 + 11 * 13) * 3\n\
    \        val g = n - 11 * 13\n        val a = (n2 - r2) / 11\n        val b =\
    \ (n3 - r3) / 13\n        val c = (n6 - r6) / (11 * 13)\n        val d = a + b\
    \ - c\n        k - a - b + d + countDigit7(g, 0)", "        val s = n / 11 * 2\n\
    \        val m = n / 13 * 2\n        val k = gcd(11, 13)\n        val l = lcm(11,\
    \ 13)\n        val t = n / l * 2\n        val res = s + m - t\n        (if (n\
    \ % 11 == 0) 1 else 0) + (if (n % 13 == 0) 1 else 0) + res", "        val m =\
    \ n + 1\n        var x = 10l\n        var y = 11l\n        var z = 13l\n     \
    \   var c = 0l\n        if (n == 0) return 0\n        while (x < m) {\n      \
    \      if (x % y == 0 || x % z == 0) {\n                var t = x\n          \
    \      while (t > 0) {\n                    if (t % 10 == 7) c += 1\n        \
    \            t /= 10\n                }\n            }\n            x += 1\n \
    \       }\n        return c", "        var count = 0l\n        for (i <- 1 to\
    \ n.toInt) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                val\
    \ str = i.toString\n                for (ch <- str) {\n                    if\
    \ (ch == '7') count += 1\n                }\n            }\n        }\n      \
    \  count", "        var count = 0l\n        var i = 1l\n        while (i < n)\
    \ {\n            if (i % 11 == 0 || i % 13 == 0) {\n                if (i.toString.contains(\"\
    7\")) count += 1\n            }\n            i += 1\n        }\n        return\
    \ count", "        var total : Long = 0\n        for (i <- 1 to n.toInt-1) {\n\
    \            if (i % 11 == 0 || i % 13 == 0) {\n                val s = i.toString\n\
    \                for (c <- s) {\n                    if (c == '7') total += 1\n\
    \                }\n            }\n        }\n        return total", "       \
    \ var count = 0l\n        for (i <- 11l to n - 1 by 11) if (i % 13 != 0) {\n \
    \           var s = i.toString\n            for (c <- s) if (c == '7') count +=\
    \ 1\n        }\n        for (i <- 13l to n - 1 by 13) {\n            var s = i.toString\n\
    \            for (c <- s) if (c == '7') count += 1\n        }\n        return\
    \ count", '        return 0', "        var count = 0\n        for (i <- 1 to n.toInt-1)\
    \ {\n            if (i % 11 == 0 || i % 13 == 0) {\n                var iStr =\
    \ i.toString()\n                for (char <- iStr) {\n                    if (char\
    \ == '7') count += 1\n                }\n            }\n        }\n        return\
    \ count", "        var count = 0l\n        for (i <- 2l to n - 1l) {\n       \
    \     var x = i.toString\n            if (i % 11 == 0 || i % 13 == 0) {\n    \
    \            for (c <- x) {\n                    if (c == '7') count += 1\n  \
    \              }\n            }\n        }\n        return count", "        def\
    \ count(acc : Long, cur : Long) : Long = {\n            if (cur == n) acc\n  \
    \          else {\n                if (cur % 11 == 0 || cur % 13 == 0) {\n   \
    \                 var str = \"\" + cur\n                    var c = 0l\n     \
    \               for (c <- str) {\n                        if (c == '7') {\n  \
    \                          count(acc + 1, cur + 1)\n                        }\n\
    \                    }\n                    count(acc, cur + 1)\n            \
    \    }\n                else count(acc, cur + 1)\n            }\n        }\n \
    \       count(0, 1)", "        // >>> numDigits(123l)\n        // 3\n        def\
    \ numDigits(n : Long) : Int = {\n            var count = 0\n            var copy\
    \ = n\n            while (copy > 0) {\n                count += 1\n          \
    \      copy /= 10\n            }\n            count\n        }\n        // >>>\
    \ getDigit(123l, 2)\n        // 3\n        def getDigit(n : Long, digit : Int)\
    \ : Int = {\n            (n % pow(10, digit + 1).toLong) / pow(10, digit).toLong\
    \ toInt\n        }\n        // >>> lastDigit(123l)\n        // 3\n        def\
    \ lastDigit(n : Long) : Int = {\n            getDigit(n, 0)\n        }\n     \
    \   // >>> sumDigits(123l)\n        // 6\n        def sumDigits(n : Long) : Int\
    \ = {\n            var sum = 0\n            var copy = n\n            while (copy\
    \ > 0) {\n                sum += lastDigit(copy)\n                copy /= 10\n\
    \            }\n            sum\n        }\n        var count = 0\n        for\
    \ (i <- 1 to numDigits(n)) {\n            count += lastDigit(n) match {\n    \
    \            case 7 => 1\n                case _ => 0\n            }\n       \
    \     n /= 10\n        }\n        count.toLong", "        return (1l to n).filter(x\
    \ => x % 11 == 0 || x % 13 == 0).foldLeft(0l)((acc, x) => acc + x.toString.count(_\
    \ == '7'))", "        var r = 0\n        for (i <- 11l to n by 11l) {\n      \
    \      if (i % 13 == 0) r += 2\n            else r += 1\n        }\n        for\
    \ (i <- 11l to n by 13l) {\n            if (i % 11 == 0) {}\n            else\
    \ r += 1\n        }\n        return r", '        0', "        // >>> fizzBuzz(50)\n\
    \        // 0\n        // >>> fizzBuzz(78)\n        // 2\n        // >>> fizzBuzz(79)\n\
    \        // 3\n        if (n < 100) {\n            var c = 0l\n            if\
    \ (n % 11 == 0) {\n                c += n.toString.filter(_ == '7').length\n \
    \           }\n            if (n % 13 == 0) {\n                c += n.toString.filter(_\
    \ == '7').length\n            }\n            c\n        } else {\n           \
    \ var s = 0l\n            var c = 1l\n            while (c < (n + 1) / 100) {\n\
    \                s += 10\n                c *= 10\n            }\n           \
    \ if (n % 11 == 0) {\n                s += n.toString.filter(_ == '7').length\n\
    \            }\n            if (n % 13 == 0) {\n                s += n.toString.filter(_\
    \ == '7').length\n            }\n            s + fizzBuzz(n % 100)\n        }",
  '        0', "        // println(\"n = \" + n)\n        val m = n - 1\n        val\
    \ d2 = m / 2\n        val d3 = m / 3\n        val d6 = m / 6\n        val d11\
    \ = m / 11\n        val d13 = m / 13\n        val d22 = m / 22\n        val d26\
    \ = m / 26\n        val d33 = m / 33\n        val d39 = m / 39\n        val d66\
    \ = m / 66\n        val d78 = m / 78\n        val f1 = (n + d2 - d3 - d6 - d11\
    \ - d13 - d22 - d26 - d33 - d39 - d66 - d78) / 10\n        val f2 = d11 + d13\
    \ + d22 + d26 + d33 + d39 + d66 + d78\n        val f3 = d11 + d13 + d33 + d39\
    \ + d66 + d78\n        val f4 = d11 + d13 + d33 + d39 + d66 + d78\n        val\
    \ f5 = d11 + d13 + d33 + d39 + d66 + d78\n        val f6 = d13 + d33 + d39 + d66\
    \ + d78\n        val f7 = d13 + d33 + d39 + d66 + d78\n        val f8 = d13 +\
    \ d33 + d39 + d66 + d78\n        val f9 = d13 + d33 + d39 + d66 + d78\n      \
    \  val f10 = d13 + d33 + d39 + d66 + d78\n        val f11 = d13 + d33 + d39 +\
    \ d66 + d78\n        val f12 = d13 + d33 + d39 + d66 + d78\n        val f13 =\
    \ d13 + d33 + d39 + d66 + d78\n        val f14 = d13 + d33 + d39 + d66 + d78\n\
    \        val f15 = d13 + d33 + d39 + d66 + d78\n        val f16 = d13 + d33 +\
    \ d39 + d66 + d78\n        val f17 = d13 + d33 + d39 + d66 + d78\n        val\
    \ f18 = d13 + d33 +", "        if (n <= 0) {\n            return 0\n        }\n\
    \        val mod11 = n % 11\n        val mod13 = n % 13\n        val l = n - mod11\
    \ + (if (mod11 == 0) 0 else 11) - (if (mod13 == 0) 0 else mod13)\n        val\
    \ h = n - mod11 + (if (mod11 == 0) 0 else 11)\n        var count = 0\n       \
    \ for (i <- l to h by 11) {\n            count += count7(i)\n        }\n     \
    \   return count", "        var divisor = List[Long](11l, 13l)\n        var result\
    \ = 0l\n        for (x <- 1l until n) {\n            for (y <- divisor) {\n  \
    \              if (x % y == 0 && x.toString.contains(\"7\")) {\n             \
    \       result += 1\n                }\n            }\n        }\n        return\
    \ result", "        var count = 0l\n        for (i <- 1l to n - 1) {\n       \
    \     if (i % 11 == 0 || i % 13 == 0) {\n                var t = i\n         \
    \       while (t > 0) {\n                    if (t % 10 == 7) count += 1\n   \
    \                 t /= 10\n                }\n            }\n        }\n     \
    \   count", "        def f(x : Long) : Long = {\n            if (x % 11 == 0 ||\
    \ x % 13 == 0) {\n                val s = x.toString.replaceAll(\"[^7]\", \"\"\
    )\n                s.length + f(x - 1)\n            } else {\n               \
    \ f(x - 1)\n            }\n        }\n        f(n - 1)", "        var s = 0l\n\
    \        for (i <- 1l to n - 1) {\n            if (i % 11 == 0 || i % 13 == 0)\
    \ s += i.toString.count(_ == '7')\n        }\n        s", "        var count =\
    \ 0l\n        var x = 0l\n        while (x < n) {\n            if (x % 11 == 0\
    \ || x % 13 == 0) {\n                val digits = x.toString\n               \
    \ for (i <- 0 until digits.length) {\n                    if (digits(i) == '7')\
    \ count += 1\n                }\n            }\n            x += 1\n        }\n\
    \        count", "        // The given code is incomplete.\n        // You are\
    \ required to complete the following code:\n        var count = 0l\n        for\
    \ (i <- 1 to n) {\n            if (i % 11 == 0 || i % 13 == 0) {\n           \
    \     val num = i.toString()\n                for (i <- 0 until num.length) {\n\
    \                    if (num(i) == '7') {\n                        count += 1\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ count", "        def get(d : Long) : Long = (n / (d * 10)).toLong\n        def\
    \ getLength(d : Long) : Long = 1 + log10(d).toLong\n        val l1 = getLength(11)\n\
    \        val l2 = getLength(13)\n        val L = l1 + l2\n        val f = 7 *\
    \ 11 * 13\n        val x = new Array[Long](L.toInt)\n        x(0) = get(7)\n \
    \       x(1) = get(11)\n        x(2) = get(13)\n        for (i <- 3 until L.toInt)\
    \ {\n            val p = pow(10, i).toLong\n            val d = p / 7\n      \
    \      val t = x(i - 1) * d / 10 + get(p) - x(i - 1) * d / 10\n            x(i)\
    \ = t\n        }\n        var l7 = 0l\n        for (i <- 0 until L.toInt) {\n\
    \            val p = pow(10, i).toLong\n            if (p % f == 0) l7 += x(i)\n\
    \        }\n        l7", "        return (1l to n).map(i => if (i % 11 == 0 ||\
    \ i % 13 == 0) i.toString.count(_ == '7') else 0).sum", "        if (n <= 0) return\
    \ 0\n        var count = 0\n        if (n / 13 % 10 == 7) count += 1\n       \
    \ if (n / 11 % 10 == 7) count += 1\n        count + fizzBuzz(n / 10)", "     \
    \   var cnt : Long = 0\n        for (i <- 11 to n - 1 by 22) cnt += i.toString.count(_\
    \ == '7')\n        for (i <- 13 to n - 1 by 26) cnt += i.toString.count(_ == '7')\n\
    \        cnt", "        def isFizzBuzz(x : Long) = x % 11 == 0 || x % 13 == 0\n\
    \        n.toString.foldLeft(0)((b, a) => if (a == '7' && isFizzBuzz(n - b - 1))\
    \ b + 1 else b)", "        var count = 0l\n        for (i <- 0 to n.toInt) {\n\
    \            if (i % 11 == 0 || i % 13 == 0) {\n                for (ch <- i.toString)\
    \ {\n                    if (ch == '7') {\n                        count += 1\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ count", '        return 0l', "        var k : Long = 0l\n        var nn : Long\
    \ = n\n        while (nn != 0) {\n            if (nn % 10 == 7 && (nn % 11 ==\
    \ 0 || nn % 13 == 0)) k += 1\n            nn /= 10\n        }\n        k", " \
    \       def fizzBuzz(n : Long, fizz : Long, buzz : Long, count : Long) : Long\
    \ = {\n            if (n == 0) count\n            else if (n % 11 == 0 || n %\
    \ 13 == 0) {\n                val fizzNew = n * 10 + 3\n                val buzzNew\
    \ = n * 10 + 5\n                if (fizzNew % 11 == 0 || fizzNew % 13 == 0) fizzBuzz(n\
    \ - 1, fizzNew, buzz, count + 2)\n                else if (buzzNew % 11 == 0 ||\
    \ buzzNew % 13 == 0) fizzBuzz(n - 1, fizz, buzzNew, count + 2)\n             \
    \   else fizzBuzz(n - 1, fizz, buzz, count + 1)\n            }\n            else\
    \ {\n                val fizzNew = n * 10 + 3\n                val buzzNew = n\
    \ * 10 + 5\n                if (fizzNew % 11 == 0 || fizzNew % 13 == 0) fizzBuzz(n\
    \ - 1, fizzNew, buzz, count + 1)\n                else if (buzzNew % 11 == 0 ||\
    \ buzzNew % 13 == 0) fizzBuzz(n - 1, fizz, buzzNew, count + 1)\n             \
    \   else fizzBuzz(n - 1, fizz, buzz, count)\n            }\n        }\n      \
    \  fizzBuzz(n, 0, 0, 0)", "        var s = 0l\n        for (i <- 1l to n - 1)\
    \ {\n            val t = i.toString\n            val b = t.contains(\"7\")\n \
    \           val c = i % 11 == 0 || i % 13 == 0\n            if (b && c) s += 1\n\
    \        }\n        s", "        n match {\n            case n if n < 0 => 0\n\
    \            case n if n < 7 => 0\n            case n if n % 11 == 0 => 1 + fizzBuzz(n\
    \ - 1)\n            case n if n % 13 == 0 => 1 + fizzBuzz(n - 1)\n           \
    \ case n if (n - 11) % 13 == 0 => 1 + fizzBuzz(n - 1)\n            case n if (n\
    \ - 13) % 11 == 0 => 1 + fizzBuzz(n - 1)\n            case n if (n % 100) / 10\
    \ == 7 => 1 + fizzBuzz(n - 1)\n            case n if n % 10 == 7 => 1 + fizzBuzz(n\
    \ - 1)\n            case n => fizzBuzz(n - 1)\n        }", '        return 0l',
  "        require(n >= 0)\n        var base = 0l\n        if (n >= 78) base += 2\n\
    \        if (n >= 79) base += 1\n        base += ((n - (n % 11)) / 11) + ((n -\
    \ (n % 13)) / 13) - ((n - (n % 143)) / 143)\n        if (n % 11 == 0 || n % 13\
    \ == 0) {\n            base += (n.toString.count(_ == '7') * 1)\n        }\n \
    \       return base", "        // Let's find the number of digits of n.\n    \
    \    val d = Math.floor(Math.log10(n.toDouble)).toInt + 1\n        // x is the\
    \ number of 7s.\n        var x = 0\n        var i = 1\n        while (i <= d)\
    \ {\n            // We just want the number of 7s.\n            x += (n.toString.charAt(i\
    \ - 1) - '0') * i * 10 / 7\n            i += 1\n        }\n        // Now remove\
    \ numbers that are not divisible by 11 or 13.\n        x -= (n / 11 - 11 * Math.floor(n\
    \ / 11.0 / 11)).toInt * Math.floor(Math.log10(11.0)).toInt + 1\n        x -= (n\
    \ / 13 - 13 * Math.floor(n / 13.0 / 13)).toInt * Math.floor(Math.log10(13.0)).toInt\
    \ + 1\n        x", "        // We solve the problem recursively by looking at\
    \ the first and last digit of the input number.\n        // Let x be the last\
    \ digit of the input number, and y be the first digit.\n        // We represent\
    \ the number as yy...y1, where 1 is the last digit,\n        // and there are\
    \ (n - 1) y's.\n        // If x is even, then the last digit of n! is not 7, so\n\
    \        // we can ignore the last digit when counting the appearances of 7.\n\
    \        // If x is odd, then the last digit of n! is 7, and we will have\n  \
    \      // (x - 1) more appearances of 7 in the number.\n        def f(n : Long)\
    \ : Long = {\n            if (n < 100) {\n                if (n < 11) 0\n    \
    \            else f(n / 10) + (if (n % 10 == 7) 1 else 0)\n            }\n   \
    \         else {\n                val y = n / pow(10, (n.toString.length - 1).toInt).toLong\n\
    \                val x = n % 10\n                (y / 10) * f(pow(10, (n.toString.length\
    \ - 1).toInt).toLong - 1) + (y % 10) * f(pow(10, (n.toString.length - 2).toInt).toLong\
    \ - 1) + ((y % 10) * pow(10, (n.toString.length - 2).toInt).toLong).toLong + (if\
    \ (x % 2 == 0) 0 else 1)\n            }\n        }\n        if (n % 11 == 0 ||\
    \ n % 13 == 0) f(n)\n        else if (n > 11 && n % 11 < n % 13) f(n - n % 11)\n\
    \        else if (n > 13 && n % 13 < n % 11) f(n - n % 13)\n        else 0", " \
    \       var x = 0l\n        var y = 0l\n        for (i <- 1l to n) {\n       \
    \     var divBy11 = false\n            var divBy13 = false\n            if (i\
    \ % 11 == 0) divBy11 = true\n            if (i % 13 == 0) divBy13 = true\n   \
    \         if (divBy11 || divBy13) {\n                var str = i.toString\n  \
    \              for (c <- str) {\n                    if (c == '7') x += 1\n  \
    \              }\n            }\n        }\n        return x", "        return\
    \ (1l to n - 1).map(x => x.toString.toList.filter(d => d == '7').length).filter(x\
    \ => (x % 11 == 0) || (x % 13 == 0)).sum", "        val t = (n - 1) / 11 / 13\n\
    \        val s = (n - 1) / 11 % 13\n        val t1 = (n - 1) / 13 % 11\n     \
    \   val f = max(s, t1)\n        val s1 = min(s, t1)\n        val y = (s1 + (s1\
    \ + 1) / 2 + s1 * 4 + (s1 + 1) / 2 + f) * 7\n        if (n % 11 == 0) (y - 1)\
    \ else if (n % 13 == 0) (y - 1) else y", "        var r = 0l\n        for (x <-\
    \ 0 to n.toInt - 1) {\n            if (x % 11 == 0 || x % 13 == 0) {\n       \
    \         var f = x.toString\n                for (i <- 0 to f.length - 1) {\n\
    \                    if (f(i) == '7') r += 1\n                }\n            }\n\
    \        }\n        return r", "        // Since each number is divisible by at\
    \ most one of 11 and 13, it suffices to count the number of times\n        //\
    \ the digit 7 appears in integers less than n which are divisible by 11 and 13\
    \ separately.\n        val numDigits : Long = Math.floor(Math.log10(n)).toLong\
    \ + 1;\n        // Every number < n will be divisible by 11 with some remainder\
    \ less than 11.\n        // If remainder is 7, the number contains a 7.\n    \
    \    // There are [n / 11] numbers whose remainder is 7 when divided by 11.\n\
    \        // Since we are considering numbers < n, the remainder must be < 10.\
    \ Hence, the first digit of these numbers will always be the digit 7.\n      \
    \  // We first count the number of times the digit 7 appears in the first digit\
    \ of numbers < n which are divisible by 11.\n        val numTens : Long = n /\
    \ 11;\n        // Now we must count the number of times the digit 7 appears in\
    \ the remaining digits of numbers < n which are divisible by 11.\n        // There\
    \ are 10 * 9 * 8 * ... * 1 permutations of numbers with the digits 0 to 9, in\
    \ which the first digit is 7.\n        // Each of these numbers will be divisible\
    \ by 11, and of the remaining digits, at most 9 of them can be 7.\n        //\
    \ Therefore there are exactly (10 * 9 * 8 * ... * 1) / 11 = 9! numbers which are\
    \ divisible by 11 and start with 7.\n        // These numbers have exactly numDigits\
    \ - 1 digits.\n        // Therefore there are 9! * (numDigits - 1) numbers which\
    \ are divisible by 11 and contain 7, but not as the first digit.\n        // We\
    \ must account for the fact that n may be less than the largest such number.\n\
    \        val numSevensNonFirstDigitDivisibleByEleven : Long = min(numDigits -\
    \ 1, numDigits - 2) * 9 * factorial(9);\n        // Now we similarly count the\
    \ number of times the digit 7 appears in integers < n which are divisible by 13.\n\
    \        val numSevensDivisibleByThirteen : Long = numTens + numSevensNonFirstDigitDivisibleByEleven;\n\
    \        val numSevensDivisibleByEleven : Long = numTens", "        //if (n ==\
    \ 0) 0 else (1 to n / 11).filter(x => x % 11 == 0 || x % 13 == 0).toList.filter(x\
    \ => x.toString.contains(\"7\")).size\n        if (n == 0) 0 else (0 to n / 11).filter(x\
    \ => x % 11 == 0 || x % 13 == 0).filter(x => x.toString.contains(\"7\")).size",
  '        return 0l', "        var sum = 0\n        for (i <- 0 to n.toInt - 1) {\n\
    \            if (i % 11 == 0 || i % 13 == 0) {\n                var temp = i\n\
    \                while (temp > 0) {\n                    if (temp % 10 == 7) sum\
    \ += 1\n                    temp /= 10\n                }\n            }\n   \
    \     }\n        return sum", "        var result = 0l\n        for (i <- 0l until\
    \ n) {\n            if (i % 11 == 0 || i % 13 == 0) result += i.toString.count(_\
    \ == '7')\n        }\n        result", "        var count = 0l\n        for (i\
    \ <- 1l to n) {\n            if (i % 11 == 0 || i % 13 == 0) {\n             \
    \   var x = i\n                while (x > 0) {\n                    val d = x\
    \ % 10\n                    if (d == 7) count += 1\n                    x /= 10\n\
    \                }\n            }\n        }\n        count", "        val cnt11\
    \ = ((n-1)/11).toInt + 1\n        val cnt13 = ((n-1)/13).toInt + 1\n        val\
    \ cnt143 = ((n-1)/143).toInt + 1\n        val cnt11b = cnt11/10\n        val cnt13b\
    \ = cnt13/10\n        val cnt143b = cnt143/10\n        (cnt11%10) + (cnt13%10)\
    \ - (cnt143%10) + cnt11b + cnt13b - cnt143b", "        def fb(x : Long, acc :\
    \ Long) : Long = {\n            if (x >= n) acc\n            else if (x % 11 ==\
    \ 0 || x % 13 == 0) {\n                var acc2 = acc\n                var tmp\
    \ = x\n                while (tmp > 0) {\n                    if (tmp % 10 ==\
    \ 7) acc2 += 1\n                    tmp /= 10\n                }\n           \
    \     fb(x + 1, acc2)\n            }\n            else fb(x + 1, acc)\n      \
    \  }\n        fb(0, 0)", "        def fizzBuzzAux(n : Long, f : Long, b : Long,\
    \ s : Long) : Long = {\n            if (n == 0) return s\n            else {\n\
    \                val newF = ((10l * f) + 7l) % 11l\n                val newB =\
    \ ((10l * b) + 7l) % 13l\n                val newS = if (newF == 0 || newB ==\
    \ 0) s + 1 else s\n                fizzBuzzAux(n / 10, newF, newB, newS)\n   \
    \         }\n        }\n        fizzBuzzAux(n, 0, 0, 0)", "        var res = 0l\n\
    \        for (i <- 11l to n - 1l by 11) {\n            if (i % 13 == 0) {\n  \
    \              res += 3l\n            } else {\n                var rem = i\n\
    \                while (rem > 0) {\n                    if (rem % 10 == 7) {\n\
    \                        res += 1l\n                    }\n                  \
    \  rem /= 10\n                }\n            }\n        }\n        return res",
  '        return (11l to n - 1l).filter(x => x % 11 == 0 || x % 13 == 0).map(x =>
    x.toString.map(c => c.asDigit).filter(d => d == 7).length).sum', "        val\
    \ digits = n.toString.map(_.asDigit)\n        def fizzBuzzSub(digits : List[Int],\
    \ depth : Int, acc : Long) : Long = {\n            if (digits.isEmpty) acc\n \
    \           else {\n                val d = digits.head\n                if (d\
    \ == 7) fizzBuzzSub(digits.tail, depth - 1, acc + (11 * 11 * pow(10, depth - 1)).toLong\
    \ + (13 * 13 * pow(10, depth - 1)).toLong)\n                else if (d == 2 ||\
    \ d == 3 || d == 5 || d == 6 || d == 8 || d == 9) fizzBuzzSub(digits.tail, depth\
    \ - 1, acc)\n                else fizzBuzzSub(digits.tail, depth - 1, acc + (11\
    \ * pow(10, depth - 1)).toLong + (13 * pow(10, depth - 1)).toLong)\n         \
    \   }\n        }\n        fizzBuzzSub(digits.toList, digits.length, 0)", "   \
    \   val n1 = (n - 1) / 11\n      val n2 = (n - 1) / 13\n      val n3 = (n - 1)\
    \ / (11 * 13)\n      val count1 = (1 to n1.toInt).filter(x => x % 11 == 0).map(x\
    \ => x.toString.filter(x => x == '7').size).sum\n      val count2 = (1 to n2.toInt).filter(x\
    \ => x % 13 == 0).map(x => x.toString.filter(x => x == '7').size).sum\n      val\
    \ count3 = (1 to n3.toInt).filter(x => x % (11 * 13) == 0).map(x => x.toString.filter(x\
    \ => x == '7').size).sum\n      count1 + count2 - count3", "        if (n == 0)\
    \ return 0\n        var count = 0l\n        var k = 1l\n        while (k <= n)\
    \ {\n            if (k % 11 == 0) count += countDigit(k, 7)\n            if (k\
    \ % 13 == 0) count += countDigit(k, 7)\n            k += 1\n        }\n      \
    \  return count", "        (1l to n).filter(i => i % 11 == 0 || i % 13 == 0).map(i\
    \ => i.toString.count(c => c == '7')).sum", "        if (n == 0) 0\n        else\
    \ if (n % 11 == 0 || n % 13 == 0) n.toString.filter(c => c == '7').length + fizzBuzz(n\
    \ - 1)\n        else fizzBuzz(n - 1)", "        if (n < 10) 0\n        else {\n\
    \            val lastDigit = n % 10\n            val restDigits = n / 10\n   \
    \         fizzBuzz(restDigits) + (if (n % 11 == 0 || n % 13 == 0) (if (lastDigit\
    \ == 7) 1 else 0) else 0)\n        }", "        def gcd(a : Long, b : Long) :\
    \ Long = {\n            var x = min(a, b)\n            var y = max(a, b)\n   \
    \         while (x != 0) {\n                val t = x\n                x = y %\
    \ x\n                y = t\n            }\n            y\n        }\n        def\
    \ search(x : Long, y : Long, d : Long, a : Long, b : Long, ans : Long) : Long\
    \ = {\n            if (a * b > n) ans\n            else if (a % 11 == 0 && b %\
    \ 13 == 0) search(x, y, d, a, b + 1, ans + x * (a % 10 == 7) + y * (b % 10 ==\
    \ 7))\n            else if (a % 11 == 0) search(x, y, d, a, b + 1, ans + x * (a\
    \ % 10 == 7))\n            else if (b % 13 == 0) search(x, y, d, a, b + 1, ans\
    \ + y * (b % 10 == 7))\n            else search(x, y, d, a, b + 1, ans)\n    \
    \    }\n        if (n < 10) n / 7 else {\n            val x = n / 11\n       \
    \     val y = n / 13\n            val d = n / (11 * 13)\n            val g = gcd(11,\
    \ 13)\n            val a = n / g\n            val b = n / (11 * 13 / g)\n    \
    \        search(x, y, d, a, b, 0)\n        }", "        var result = 0l\n    \
    \    var count = 0l\n        var z : Long = 1l\n        var count7 : Long = 0l\n\
    \        while (z < n) {\n            if (z % 11 == 0 || z % 13 == 0) {\n    \
    \            var k = z\n                while (k > 0) {\n                    if\
    \ (k % 10 == 7) {\n                        count7 += 1\n                    }\n\
    \                    k /= 10\n                }\n                count += count7\n\
    \                count7 = 0\n            }\n            z += 1\n        }\n  \
    \      return count", "    \tdef iter(v : Long, acc : Long) : Long = {\n    \t\
    \tif (v >= n) acc\n    \t\telse if (v % 11 == 0 || v % 13 == 0) {\n    \t\t\t\
    val d = v.toString.map(_.asDigit).filter(_ == 7).length\n    \t\t\titer(v + 1,\
    \ acc + d)\n    \t\t}\n    \t\telse iter(v + 1, acc)\n    \t}\n    \titer(7, 0)",
  "        var ans = 0\n        for (i <- 1 to n.toInt - 1) {\n            if (i %\
    \ 11 == 0) ans += 1\n            else if (i % 13 == 0) ans += 1\n            else\
    \ if (i % 11 == 0 && i % 13 == 0) ans += 2\n        }\n        ans", "       \
    \ // Binary search for the largest integer m in the range [0, n) such that m is\
    \ divisible by either 11 or 13.\n        def binarySearch(low : Long, high : Long)\
    \ : Long = {\n            if (low == high) return low\n            val mid = (low\
    \ + high) / 2\n            if (mid % 11 == 0 || mid % 13 == 0) binarySearch(mid\
    \ + 1, high)\n            else binarySearch(low, mid)\n        }\n        // Count\
    \ the number of times the digit 7 appears in the last digit of all numbers in\
    \ the range [1, m].\n        def count(m : Long) : Long = {\n            if (m\
    \ < 10) return if (m == 7) 1 else 0\n            return (m / 10).toLong * count(10)\
    \ + count(m % 10)\n        }\n        // The largest integer m in the range [0,\
    \ n) such that m is divisible by either 11 or 13.\n        val m = binarySearch(0,\
    \ n)\n        // Count the number of times the digit 7 appears in the last digit\
    \ of all numbers in the range [1, m].\n        return count(m)", "        // The\
    \ digit 7 can only appear in numbers divisible by 11 or 13.\n        // For example,\
    \ the number 17 is divisible by 17, but it does not end in 7.\n        // For\
    \ each number divisible by 11 or 13, we can find how many times the digit 7 appears.\n\
    \        val digits = new Array[Long](2)\n        digits(0) = floor(log10(n)).toLong\n\
    \        digits(1) = digits(0)\n        var result = 0l\n        var counter =\
    \ 0\n        var mult = 1\n        while (counter < digits.length) {\n       \
    \     if (digits(counter) > 0) {\n                result += (n / (mult * 11))\
    \ - ((n / (mult * 11)) % 10)\n                if (digits(counter) > 1) {\n   \
    \                 result += n / (mult * 110)\n                    if (digits(counter)\
    \ > 2) {\n                        result += n / (mult * 1100)\n              \
    \          if (digits(counter) > 3) {\n                            result += n\
    \ / (mult * 11000)\n                            if (digits(counter) > 4) {\n \
    \                               result += n / (mult * 110000)\n              \
    \                  if (digits(counter) > 5) {\n                              \
    \      result += n / (mult * 1100000)\n                                    if\
    \ (digits(counter) > 6) {\n                                        result += n\
    \ / (mult * 11000000)\n                                        if (digits(counter)\
    \ > 7) {\n                                            result += n / (mult * 110000000)\n\
    \                                            if (digits(counter) > 8) {\n    \
    \                                            result += n / (mult * 1100000000)\n\
    \                                                if (digits(counter) > 9) {\n\
    \                                                    result += n / (mult * 11000000000)\n\
    \                                                    if (digits(counter) > 10)\
    \ {\n                                                        result += n / (mult\
    \ * 110000000000)\n                                                        if\
    \ (digits(counter) > 11) {\n                                                 \
    \           result += n / (mult * 1100000000000)\n                           \
    \                                 if (digits(counter) > 12) {\n              \
    \                                                  result += n / (mult * 11000000000000)\n\
    \                                                                if", "      \
    \  var count = 0l\n        for (i <- 11 to n.toInt by 11) {\n            if (i\
    \ % 77 == 0) count += 6\n            else if (i % 7 == 0) count += 1\n       \
    \ }\n        for (i <- 13 to n.toInt by 13) {\n            if (i % 77 == 0) count\
    \ += 6\n            else if (i % 7 == 0) count += 1\n        }\n        count",
  "        (1l to n)\n        .filter(x => x % 11 == 0 || x % 13 == 0)\n        .map(x\
    \ => x.toString)\n        .map(x => x.split(\"\"))\n        .flatten\n       \
    \ .filter(x => x == \"7\")\n        .size", "        var count = 0l\n        for\
    \ (i <- 1l to n if i % 11 == 0 || i % 13 == 0) {\n            var j = i\n    \
    \        while (j > 0) {\n                count += (j % 10 == 7)\n           \
    \     j /= 10\n            }\n        }\n        count", "        var count =\
    \ 0\n        for (i <- 0 to n.toInt - 1) {\n            val i13 = i % 13\n   \
    \         val i11 = i % 11\n            if (i13 == 0 || i11 == 0) {\n        \
    \        if (i.toString.contains(\"7\")) {\n                    count += 1\n \
    \               }\n            }\n        }\n        return count", "        var\
    \ result = 0l\n        var i = 1l\n        while (i < n) {\n            val b1\
    \ = i % 11 == 0\n            val b2 = i % 13 == 0\n            if (b1 || b2) {\n\
    \                val s = i.toString\n                for (j <- 0 until s.length)\
    \ {\n                    if (s(j) == '7') result += 1\n                }\n   \
    \         }\n            i += 1\n        }\n        result", '        return 0',
  "    \t(11l to n by 11).filter(i => i % 13 == 0 || i % 11 == 0).toList.filter(i\
    \ => i.toString.contains(\"7\")).length", "        val digits : List[Int] = n.toString.map(_.asDigit).toList\n\
    \        val previous : Int = digits.head\n        val merged : List[Int] = digits.tail.foldLeft(List[Int](previous))\
    \ {\n                (acc : List[Int], value : Int) =>\n                    if\
    \ (acc.last < value)\n                        acc :+ value\n                 \
    \   else\n                        acc.init :+ (acc.last + value)\n           \
    \ }\n        merged.filter(x => ((x % 11 == 0) || (x % 13 == 0)) && (x % 7 ==\
    \ 0)).size", "        def f(n : Long, acc : Long) : Long = {\n            if (n\
    \ == 0) acc\n            else if (n % 11 == 0) f(n / 10, acc + (if (n % 10 ==\
    \ 7) 1 else 0))\n            else if (n % 13 == 0) f(n / 10, acc + (if (n % 10\
    \ == 7) 1 else 0))\n            else f(n / 10, acc)\n        }\n        f(n, 0)",
  "        def loop(acc : Long, l : List[Long]) : Long = {\n            l match {\n\
    \                case h :: t => {\n                    if (h >= n) acc\n     \
    \               else {\n                        val a = if (h % 11 == 0 || h %\
    \ 13 == 0) acc + (h.toString.count(_ == '7')) else acc\n                     \
    \   loop(a, t)\n                    }\n                }\n                case\
    \ _ => acc\n            }\n        }\n        loop(0, ((2 to 3).map(_ * 10).toList.map(_.toLong)).flatMap(i\
    \ => (1 to 9).map(_ * i).toList))", "        def f(i : Long, divisor : Long, count\
    \ : Long) : Long = {\n            if (i >= n) count\n            else {\n    \
    \            val a = if (i % divisor == 0) i.toString.count(_ == '7') else 0\n\
    \                f(i + 1, divisor, count + a)\n            }\n        }\n    \
    \    f(1, 11, 0) + f(1, 13, 0)", "        var count = 0l\n        for (i <- (1l\
    \ to n)) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                count\
    \ += i.toString.count(_ == '7')\n            }\n        }\n        return count",
  "        // Fix this function.\n        0l", "        val ns = new NumberSystem\n\
    \        var c = 0l\n        for (i <- 1 to n.toInt) {\n            if (i % 11\
    \ == 0 || i % 13 == 0) {\n                val b = ns.base(i, 7)\n            \
    \    c += b.count(_ == '1')\n            }\n        }\n        c", "        var\
    \ i = 11l\n        var total = 0l\n        while (i < n) {\n            if (i\
    \ % 11 == 0 || i % 13 == 0) {\n                val temp = i.toString\n       \
    \         for (c <- temp) {\n                    if (c == '7') total += 1\n  \
    \              }\n            }\n            i += 1\n        }\n        total",
  "        val normal = (floor(n / 10)).toLong\n        val ten = normal / 10\n  \
    \      val eleven = normal / 11\n        val thirteen = normal / 13\n        val\
    \ a = normal - ten - eleven - thirteen\n        val b = ten - eleven - thirteen\n\
    \        val c = eleven - thirteen\n        val d = thirteen\n        return a\
    \ * 2 + b * 1 + c * 2 + d * 2", '        0', "        var c = 0l\n        for\
    \ (i <- 1 to n.toInt) if (i % 11 == 0 || i % 13 == 0) c += i.toString.count(_\
    \ == '7')\n        c", "        if (n <= 0) return 0\n        var num : Long =\
    \ 0\n        var x : Long = 1\n        while (x < n) {\n            if (x % 11\
    \ == 0 || x % 13 == 0) {\n                var y : Long = x\n                while\
    \ (y > 0) {\n                    if (y % 10 == 7) num += 1\n                 \
    \   y /= 10\n                }\n            }\n            x += 1\n        }\n\
    \        return num", "        def isDigit7Appeared(n : Long) : Boolean = {\n\
    \            var m = n\n            while (m > 0) {\n                if (m % 10\
    \ == 7) return true\n                m /= 10\n            }\n            return\
    \ false\n        }\n        var s = 0l\n        var i = 1l\n        while (i <\
    \ n) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                if (isDigit7Appeared(i))\
    \ s += 1\n            }\n            i += 1\n        }\n        return s", " \
    \       (1l to n).filter(x => x % 11 == 0 || x % 13 == 0).map(x => x.toString).map(x\
    \ => x.count(x => x == '7')).sum", "      val a = fizz(n)\n      val b = buzz(n)\n\
    \      val c = fizzBuzz(n)\n      a + b - c", "        def aux(d : Long, r1 :\
    \ Long, r2 : Long, cnt : Long) : Long = {\n            if (d < 0) cnt\n      \
    \      else if (d % 11 == 0 || d % 13 == 0) aux(d - 1, r1, r2, cnt + 1)\n    \
    \        else aux(d - 1, r1, r2, cnt)\n        }\n        aux(n - 1, 0, 0, 0)",
  "      def fb(x : Long, y : Long) : Long = {\n        if (x % 11 == 0 || x % 13\
    \ == 0) y + (\"\" + x).filter(_ == '7').length\n        else y\n      }\n    \
    \  (1 to n.toInt).foldLeft(0l)(fb)", "        if (n < 11) return 0\n        val\
    \ divisors = (11 to (n / 11).toInt by 11).toSet ++ (13 to (n / 13).toInt by 13).toSet\n\
    \        val digits = divisors.map(x => (\"\" + x).toList).flatten\n        digits.filter(x\
    \ => x == '7').size", "    \tif (n < 7) return 0\n    \tval fizzes = n / 11\n\
    \    \tval buzzes = n / 13\n    \tvar fizzBuzzes = n / 11 * 13\n    \tif (n %\
    \ 11 == 0 && n % 13 == 0) fizzBuzzes -= 1\n    \tvar result = fizzes + buzzes\
    \ - fizzBuzzes\n    \tvar f = 3l\n    \twhile (f < n) {\n    \t\tif (f % 11 ==\
    \ 0 && f % 13 == 0) {\n    \t\t\tresult += 3\n    \t\t} else if (f % 11 == 0 ||\
    \ f % 13 == 0) {\n    \t\t\tresult += 2\n    \t\t} else result += 1\n    \t\t\
    f = f * 10 + 3\n    \t}\n    \tf = 7l\n    \twhile (f < n) {\n    \t\tif (f %\
    \ 11 == 0 && f % 13 == 0) {\n    \t\t\tresult += 3\n    \t\t} else if (f % 11\
    \ == 0 || f % 13 == 0) {\n    \t\t\tresult += 2\n    \t\t} else result += 1\n\
    \    \t\tf = f * 10 + 7\n    \t}\n    \tresult", "        var index = 1l\n   \
    \     var res = 0l\n        while (index < n) {\n            if (index % 11 ==\
    \ 0 || index % 13 == 0) {\n                res += index.toString.filter(c => c\
    \ == '7').length\n            }\n            index += 1\n        }\n        res",
  "        var count = 0l\n        for (i <- 1l to n - 1) if (i % 11 == 0 || i % 13\
    \ == 0) count += i.toString.count(_ == '7')\n        count", "        var cnt\
    \ = 0l\n        for (i <- 0l until n) if (i % 11 == 0 || i % 13 == 0) cnt += i.toString.count(_\
    \ == '7')\n        cnt", "        val digits = n.toString.map(_.asDigit)\n   \
    \     val hasF = if (digits.contains(3)) true else false\n        val hasB = if\
    \ (digits.contains(5)) true else false\n        val fizz = if (hasF) \"Fizz\"\
    \ else \"\"\n        val buzz = if (hasB) \"Buzz\" else \"\"\n        if (hasF\
    \ || hasB) {\n            fizz + buzz\n        } else {\n            n.toString\n\
    \        }", "        val f = ((n - 1) / 11).toInt + 1\n        val t = ((n -\
    \ 1) / 13).toInt + 1\n        val s = ((n - 1) / (11 * 13)).toInt + 1\n      \
    \  val divs = (11 * f + 13 * t - 11 * 13 * s) / 2\n        var res = divs\n  \
    \      var g : Long = 1\n        while (g < n) {\n            if (g % 11 == 0\
    \ || g % 13 == 0) {\n                var h : Long = g\n                while (h\
    \ > 0) {\n                    if (h % 10 == 7) res += 1\n                    h\
    \ /= 10\n                }\n            }\n            g += 1\n        }\n   \
    \     res", "    \t\t0l", "        var f = 0\n        var b = 0\n        var res\
    \ = 0\n        while (f < n) {\n            res += f.toString.count(_ == '7')\n\
    \            f += 11\n        }\n        while (b < n) {\n            res += b.toString.count(_\
    \ == '7')\n            b += 13\n        }\n        res", "        val max : Long\
    \ = n - 1l\n        val max11 : Long = max / 11l\n        val max13 : Long = max\
    \ / 13l\n        var sum11 : Long = 0l\n        var sum13 : Long = 0l\n      \
    \  var inc : Long = 1l\n        var count : Long = 0l\n        while (inc <= max11)\
    \ {\n            count += (inc * 7l)\n            inc += 1l\n        }\n     \
    \   inc = 1l\n        while (inc <= max13) {\n            count += (inc * 7l)\n\
    \            inc += 1l\n        }\n        val max1113 : Long = max / (11l * 13l)\n\
    \        inc = 1l\n        while (inc <= max1113) {\n            count -= (inc\
    \ * 7l)\n            inc += 1l\n        }\n        count", "        def fizzBuzz(n\
    \ : Long, accum : Long) : Long = {\n            if (n <= 0) accum\n          \
    \  else {\n                val d = n % 10\n                val next = n / 10\n\
    \                fizzBuzz(next, if (d == 7 && (n % 11 == 0 || n % 13 == 0)) accum\
    \ + 1 else accum)\n            }\n        }\n        fizzBuzz(n, 0)", "      \
    \  var x = 0\n        for (i <- 11l to n - 1 by 11) {\n            for (c <- i.toString())\
    \ {\n                if (c == '7') x += 1\n            }\n        }\n        for\
    \ (i <- 13l to n - 1 by 13) {\n            for (c <- i.toString()) {\n       \
    \         if (c == '7') x += 1\n            }\n        }\n        x", "      \
    \  var cnt = 0l\n        for (i <- (1l until n).view) if (i % 11 == 0 || i % 13\
    \ == 0) for (c <- i.toString.toList) if (c == '7') cnt += 1\n        cnt", " \
    \       var count = 0l\n        var p = 0l\n        var q = 0l\n        var r\
    \ = 0l\n        for (i <- 0l to n) {\n            if (i % 11 == 0 || i % 13 ==\
    \ 0) {\n                for (j <- i.toString()) {\n                    if (j ==\
    \ '7') count += 1\n                }\n            }\n        }\n        return\
    \ count", "        def count(n : Long, acc : Long) : Long = {\n            if\
    \ (n <= 0) acc\n            else if (n % 11 == 0 || n % 13 == 0) count(n - 1,\
    \ acc + n.toString.count(_ == '7'))\n            else count(n - 1, acc)\n    \
    \    }\n        count(n - 1, 0)"]
stop_tokens:
- "\n    }\n"
