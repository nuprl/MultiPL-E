language: scala
name: HumanEval_105_by_length
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        // your\
    \ solution goes here\n        return null\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n   \
    \ assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.collection.immutable.List.equals(Object)\"\
    \ because the return value of \"Problem$.byLength(scala.collection.immutable.List)\"\
    \ is null\n\tat Problem$.main(tmptga41g53.scala:21)\n\tat Problem.main(tmptga41g53.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009984
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        // This\
    \ one is a crazy one, we have to use int for the index\n        var map : Map[Int,\
    \ Int] = Map()\n        for (i <- arr) {\n            if (i > 0 && i < 10) {\n\
    \                if (map.contains(i.toInt)) {\n                    map(i.toInt)\
    \ += 1\n                } else {\n                    map(i.toInt) = 1\n     \
    \           }\n            }\n        }\n        var list : List[Int] = List()\n\
    \        for (i <- map.keys) {\n            list = i :: list\n        }\n    \
    \    list = list.sorted.reverse\n        var result : List[String] = List()\n\
    \        for (i <- list) {\n            for (j <- 0 until map(i)) {\n        \
    \        result = i.toString :: result\n            }\n        }\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpyyr5ta62.scala:42)\n\tat Problem.main(tmpyyr5ta62.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009985
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        def numToString(num\
    \ : Long) : String = {\n            num match {\n                case 1 => \"\
    One\"\n                case 2 => \"Two\"\n                case 3 => \"Three\"\n\
    \                case 4 => \"Four\"\n                case 5 => \"Five\"\n    \
    \            case 6 => \"Six\"\n                case 7 => \"Seven\"\n        \
    \        case 8 => \"Eight\"\n                case 9 => \"Nine\"\n           \
    \     case _ => \"\"\n            }\n        }\n        val validValues = arr.filter(x\
    \ => x >= 1 && x <= 9)\n        val sortedValues = validValues.sorted\n      \
    \  val reverseSortedValues = sortedValues.reverse\n        val result = for (value\
    \ <- reverseSortedValues) yield numToString(value)\n        result\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009985
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val digits\
    \ = List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\",\
    \ \"Eight\", \"Nine\")\n        val result = arr.filter(i => i > 0 && i < 10).sorted.reverse.map(i\
    \ => digits(i.toInt - 1))\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n   \
    \ assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009984
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val s\
    \ = arr.filter(x => (x >= 1) && (x <= 9)).sorted.reverse.map(x => x match {\n\
    \            case 1 => \"One\"\n            case 2 => \"Two\"\n            case\
    \ 3 => \"Three\"\n            case 4 => \"Four\"\n            case 5 => \"Five\"\
    \n            case 6 => \"Six\"\n            case 7 => \"Seven\"\n           \
    \ case 8 => \"Eight\"\n            case 9 => \"Nine\"\n        })\n        s\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009984
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        // Fill\
    \ up this function body\n        // You can add another function as well, if required\n\
    \        val alist = new ArrayList[String]\n        for (i <- arr) {\n       \
    \   i match {\n            case 1 => alist.add(\"One\")\n            case 2 =>\
    \ alist.add(\"Two\")\n            case 3 => alist.add(\"Three\")\n           \
    \ case 4 => alist.add(\"Four\")\n            case 5 => alist.add(\"Five\")\n \
    \           case 6 => alist.add(\"Six\")\n            case 7 => alist.add(\"Seven\"\
    )\n            case 8 => alist.add(\"Eight\")\n            case 9 => alist.add(\"\
    Nine\")\n            case _ => \n          }\n        }\n        java.util.Collections.sort(alist)\n\
    \        val newlist = new ArrayList[String]\n        val itr = alist.iterator()\n\
    \        while (itr.hasNext()) {\n          newlist.add(0, itr.next())\n     \
    \   }\n        newlist.toArray().toList.asInstanceOf[List[String]]\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfdcswj2q.scala:19:24 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36malist\e[0m = \e[33mnew\e\
    [0m \e[35mArrayList\e[0m[\e[35mString\e[0m]\n\e[31m\e[31m   |\e[0m           \
    \             ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                        Not found:\
    \ type ArrayList\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfdcswj2q.scala:35:26\
    \ ------------------------\e[0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e\
    [36mnewlist\e[0m = \e[33mnew\e[0m \e[35mArrayList\e[0m[\e[35mString\e[0m]\n\e\
    [31m\e[31m   |\e[0m                          ^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                         Not found: type ArrayList\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009980
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val nummap\
    \ = Map(1 -> \"One\", 2 -> \"Two\", 3 -> \"Three\", 4 -> \"Four\", 5 -> \"Five\"\
    , 6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\", 9 -> \"Nine\")\n        return\
    \ arr.filter(p => p > 0 && p < 10).sorted.reverse.map(p => nummap(p.toInt))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009984
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        // your\
    \ code here\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp__jk4mx2.scala:16:52\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m    \e[33mdef\e[0m \e[36mbyLength\e\
    [0m(\e[36marr\e[0m : \e[35mList\e[0m[\e[35mLong\e[0m]) : \e[35mList\e[0m[\e[35mString\e\
    [0m] = {\n\e[31m\e[31m   |\e[0m                                              \
    \      ^\e[0m\n\e[31m   |\e[0m                                               \
    \   Found:    Unit\n\e[31m   |\e[0m                                          \
    \        Required: List[String]\n\e[31m17 |\e[0m        \e[34m// your code here\e\
    [0m\n\e[31m18 |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009982
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        // Write\
    \ your code here\n        var result = List[String]()\n        for (x <- arr)\
    \ {\n            var num = x\n            if (num <= 9 && num >= 1) {\n      \
    \          if (num == 1) result = result :+ \"One\"\n                if (num ==\
    \ 2) result = result :+ \"Two\"\n                if (num == 3) result = result\
    \ :+ \"Three\"\n                if (num == 4) result = result :+ \"Four\"\n  \
    \              if (num == 5) result = result :+ \"Five\"\n                if (num\
    \ == 6) result = result :+ \"Six\"\n                if (num == 7) result = result\
    \ :+ \"Seven\"\n                if (num == 8) result = result :+ \"Eight\"\n \
    \               if (num == 9) result = result :+ \"Nine\"\n            }\n   \
    \     }\n        result = result.sortWith((a, b) => a < b)\n        result = result.reverse\n\
    \        result\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpco7xkcjr.scala:38)\n\tat Problem.main(tmpco7xkcjr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009984
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val list\
    \ = arr.filter(x => (x >= 1 && x <= 9)).sorted.reverse\n        list.map(x =>\
    \ x match {\n            case 1 => \"One\"\n            case 2 => \"Two\"\n  \
    \          case 3 => \"Three\"\n            case 4 => \"Four\"\n            case\
    \ 5 => \"Five\"\n            case 6 => \"Six\"\n            case 7 => \"Seven\"\
    \n            case 8 => \"Eight\"\n            case 9 => \"Nine\"\n        })\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009984
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        // Fill\
    \ up this function body\n        // You can add another function as well, if required\n\
    \        var results = new ArrayBuffer[String]\n        for (i <- 0 until arr.length)\
    \ {\n            if (arr(i) == 1) {\n                results += \"One\"\n    \
    \        } else if (arr(i) == 2) {\n                results += \"Two\"\n     \
    \       } else if (arr(i) == 3) {\n                results += \"Three\"\n    \
    \        } else if (arr(i) == 4) {\n                results += \"Four\"\n    \
    \        } else if (arr(i) == 5) {\n                results += \"Five\"\n    \
    \        } else if (arr(i) == 6) {\n                results += \"Six\"\n     \
    \       } else if (arr(i) == 7) {\n                results += \"Seven\"\n    \
    \        } else if (arr(i) == 8) {\n                results += \"Eight\"\n   \
    \         } else if (arr(i) == 9) {\n                results += \"Nine\"\n   \
    \         }\n        }\n        results.sorted.reverse.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1x10xe_p.scala:44)\n\tat Problem.main(tmp1x10xe_p.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009984
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        var map:Map[Long,\
    \ String] = Map()\n        var i:Int = 1\n        map += (1l.toLong -> \"One\"\
    )\n        map += (2l.toLong -> \"Two\")\n        map += (3l.toLong -> \"Three\"\
    )\n        map += (4l.toLong -> \"Four\")\n        map += (5l.toLong -> \"Five\"\
    )\n        map += (6l.toLong -> \"Six\")\n        map += (7l.toLong -> \"Seven\"\
    )\n        map += (8l.toLong -> \"Eight\")\n        map += (9l.toLong -> \"Nine\"\
    )\n        var ret:List[String] = List()\n        for (x <- arr) {\n         \
    \   if (map.contains(x)) ret = ret :+ map(x)\n        }\n        ret.sortWith(_\
    \ < _).reverse\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpy62d38an.scala:35)\n\tat Problem.main(tmpy62d38an.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009984
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        if (arr.isEmpty)\
    \ {\n            return List[String]()\n        }\n        arr.filter(x => x >\
    \ 0 && x < 10).map(x => x.toInt).sorted.reverse.map(x => x match {\n         \
    \   case 1 => \"One\"\n            case 2 => \"Two\"\n            case 3 => \"\
    Three\"\n            case 4 => \"Four\"\n            case 5 => \"Five\"\n    \
    \        case 6 => \"Six\"\n            case 7 => \"Seven\"\n            case\
    \ 8 => \"Eight\"\n            case 9 => \"Nine\"\n        })\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009984
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        arr.map(x\
    \ => toString(x)).filter(x => x != \"\").sorted.reverse\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp96li0snh.scala:17:30 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        arr.map(\e[36mx\e[0m => toString(x)).filter(\e\
    [36mx\e[0m => x != \e[31m\"\"\e[0m).sorted.reverse\n\e[31m\e[31m   |\e[0m    \
    \                          ^\e[0m\n\e[31m   |\e[0m         too many arguments\
    \ for \e[33mmethod\e[0m \e[35mtoString\e[0m in \e[33mclass\e[0m \e[35mAny\e[0m:\
    \ (): String\n1 error found\n"
  stdout: ''
  timestamp: 1660009980
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        // Ignore\
    \ odd numbers.\n        val list = arr.filter(x => x >= 1 && x <= 9 && x % 2 ==\
    \ 0)\n        val newList = list.sortWith((x, y) => x < y)\n        val reversedList\
    \ = newList.reverse\n        var result = new ListBuffer[String]()\n        reversedList.foreach(x\
    \ => {\n            x match {\n                case 1 => result += \"One\"\n \
    \               case 2 => result += \"Two\"\n                case 3 => result\
    \ += \"Three\"\n                case 4 => result += \"Four\"\n               \
    \ case 5 => result += \"Five\"\n                case 6 => result += \"Six\"\n\
    \                case 7 => result += \"Seven\"\n                case 8 => result\
    \ += \"Eight\"\n                case 9 => result += \"Nine\"\n            }\n\
    \        })\n        result.toList\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n   \
    \ assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0e1d7916.scala:38)\n\tat Problem.main(tmp0e1d7916.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009984
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        // Start\
    \ coding here\n        val output : ListBuffer[String] = ListBuffer()\n      \
    \  for (elem <- arr) {\n            if (elem >= 1 && elem <= 9) {\n          \
    \      elem match {\n                    case 1 => output += \"One\"\n       \
    \             case 2 => output += \"Two\"\n                    case 3 => output\
    \ += \"Three\"\n                    case 4 => output += \"Four\"\n           \
    \         case 5 => output += \"Five\"\n                    case 6 => output +=\
    \ \"Six\"\n                    case 7 => output += \"Seven\"\n               \
    \     case 8 => output += \"Eight\"\n                    case 9 => output += \"\
    Nine\"\n                }\n            }\n        }\n        output.reverse.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf71srncd.scala:37)\n\tat Problem.main(tmpf71srncd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009984
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val m\
    \ = Map(1l.toLong -> \"One\", 2l.toLong -> \"Two\", 3l.toLong -> \"Three\", 4l.toLong\
    \ -> \"Four\", 5l.toLong -> \"Five\", 6l.toLong -> \"Six\", 7l.toLong -> \"Seven\"\
    , 8l.toLong -> \"Eight\", 9l.toLong -> \"Nine\")\n        val l = ArrayBuffer[String]()\n\
    \        for (i <- 0 until arr.length) {\n            val n = arr(i)\n       \
    \     if (n >= 1 && n <= 9) {\n                l += m(n)\n            }\n    \
    \    }\n        return l.reverse.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n   \
    \ assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpubmelbv2.scala:28)\n\tat Problem.main(tmpubmelbv2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009985
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        var l\
    \ = new ListBuffer[String]\n        for (i <- arr if i > 0 && i < 10) l += i.toString\n\
    \        l.reverse.toList\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7b1gcsyh.scala:22)\n\tat Problem.main(tmp7b1gcsyh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009984
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        // Solution\n\
    \        // Hint: Look at filter, find, sortBy, reverse, map, toInt, toString,\
    \ string interpolation\n        arr.filter(elem => elem >= 1 && elem <= 9).sortBy(elem\
    \ => elem).reverse.map(elem => {\n            val s = elem.toInt\n           \
    \ s match {\n                case 1 => \"One\"\n                case 2 => \"Two\"\
    \n                case 3 => \"Three\"\n                case 4 => \"Four\"\n  \
    \              case 5 => \"Five\"\n                case 6 => \"Six\"\n       \
    \         case 7 => \"Seven\"\n                case 8 => \"Eight\"\n         \
    \       case 9 => \"Nine\"\n                case _ => \"\"\n            }\n  \
    \      })\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009984
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        // your\
    \ code goes here\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmk_g5j3x.scala:16:52\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m    \e[33mdef\e[0m \e[36mbyLength\e\
    [0m(\e[36marr\e[0m : \e[35mList\e[0m[\e[35mLong\e[0m]) : \e[35mList\e[0m[\e[35mString\e\
    [0m] = {\n\e[31m\e[31m   |\e[0m                                              \
    \      ^\e[0m\n\e[31m   |\e[0m                                               \
    \   Found:    Unit\n\e[31m   |\e[0m                                          \
    \        Required: List[String]\n\e[31m17 |\e[0m        \e[34m// your code goes\
    \ here\e[0m\n\e[31m18 |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009983
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        return\
    \ arr.filter(_ < 10).sortWith(_ > _).map((x : Long) => x match {\n           \
    \ case 1 => \"One\"\n            case 2 => \"Two\"\n            case 3 => \"Three\"\
    \n            case 4 => \"Four\"\n            case 5 => \"Five\"\n           \
    \ case 6 => \"Six\"\n            case 7 => \"Seven\"\n            case 8 => \"\
    Eight\"\n            case 9 => \"Nine\"\n            case _ => \"\"\n        })\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppfd7beww.scala:33)\n\tat Problem.main(tmppfd7beww.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009985
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n      def toEnglish(x\
    \ : Long) : String = {\n        val lm = Map(\n          1l.toLong -> \"One\"\
    ,\n          2l.toLong -> \"Two\",\n          3l.toLong -> \"Three\",\n      \
    \    4l.toLong -> \"Four\",\n          5l.toLong -> \"Five\",\n          6l.toLong\
    \ -> \"Six\",\n          7l.toLong -> \"Seven\",\n          8l.toLong -> \"Eight\"\
    ,\n          9l.toLong -> \"Nine\")\n        lm.get(x) match {\n          case\
    \ Some(s) => s\n          case None => \"\"\n        }\n      }\n      arr.sorted.map(toEnglish(_)).reverse.filter(x\
    \ => x != \"\")\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009984
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        var wordList\
    \ = ArrayBuffer[String]()\n        arr.filter((x : Long) => x >= 1 && x <= 9).sortBy((x\
    \ : Long) => x).reverse.foreach((x : Long) => wordList += numToWord(x))\n    \
    \    wordList.toList\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpy7qcmff7.scala:18:117 -----------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        arr.filter((\e[36mx\e[0m : \e[35mLong\e[0m) =>\
    \ x >= \e[31m1\e[0m && x <= \e[31m9\e[0m).sortBy((\e[36mx\e[0m : \e[35mLong\e\
    [0m) => x).reverse.foreach((\e[36mx\e[0m : \e[35mLong\e[0m) => wordList += numToWord(x))\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                             ^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                                    Not found:\
    \ numToWord\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009981
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        var strs\
    \ = List[String]()\n        var set = HashSet[Long]()\n        for (num <- arr)\
    \ {\n            if (num >= 1 && num <= 9) {\n                set += num\n   \
    \         }\n        }\n        for (num <- set.toList.sorted.reverse) {\n   \
    \         strs = byNumber(num) :: strs\n        }\n        strs\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmj88uolf.scala:25:19 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            strs = byNumber(num) :: strs\n\e[31m\e[31m\
    \   |\e[0m                   ^^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \ Not found: byNumber\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009987
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val names\
    \ = List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\",\
    \ \"Eight\", \"Nine\")\n        val numbers = List(1, 2, 3, 4, 5, 6, 7, 8, 9)\n\
    \        var m = arr.filter(x => numbers.contains(x)).sorted.reverse\n       \
    \ m.map(x => names(numbers.indexOf(x)))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n   \
    \ assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009992
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        arr.sorted.filter(i\
    \ => i <= 9 && i >= 1).reverse.map(i => {\n            if (i == 1) \"One\"\n \
    \           else if (i == 2) \"Two\"\n            else if (i == 3) \"Three\"\n\
    \            else if (i == 4) \"Four\"\n            else if (i == 5) \"Five\"\n\
    \            else if (i == 6) \"Six\"\n            else if (i == 7) \"Seven\"\n\
    \            else if (i == 8) \"Eight\"\n            else if (i == 9) \"Nine\"\
    \n            else \"Unknown\"\n        })\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n   \
    \ assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009993
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n    //\n    //\
    \ This stub will be replaced during annotation processing.\n    //\n        var\
    \ res = List[String]()\n        for (x <- arr) {\n            if (x > 0 && x <\
    \ 10) {\n                res = res :+ x.toString\n            }\n        }\n \
    \       res = res.sorted.reverse\n        for (i <- 0 until res.length) {\n  \
    \          res(i) = res(i).replace(\"1\", \"One\").replace(\"2\", \"Two\").replace(\"\
    3\", \"Three\").replace(\"4\", \"Four\").replace(\"5\", \"Five\").replace(\"6\"\
    , \"Six\").replace(\"7\", \"Seven\").replace(\"8\", \"Eight\").replace(\"9\",\
    \ \"Nine\")\n        }\n        res\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n   \
    \ assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9yhm8dhx.scala:28:12 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m            res(i) = res(i).replace(\e[31m\"1\"\e[0m,\
    \ \e[31m\"One\"\e[0m).replace(\e[31m\"2\"\e[0m, \e[31m\"Two\"\e[0m).replace(\e\
    [31m\"3\"\e[0m, \e[31m\"Three\"\e[0m).replace(\e[31m\"4\"\e[0m, \e[31m\"Four\"\
    \e[0m).replace(\e[31m\"5\"\e[0m, \e[31m\"Five\"\e[0m).replace(\e[31m\"6\"\e[0m,\
    \ \e[31m\"Six\"\e[0m).replace(\e[31m\"7\"\e[0m, \e[31m\"Seven\"\e[0m).replace(\e\
    [31m\"8\"\e[0m, \e[31m\"Eight\"\e[0m).replace(\e[31m\"9\"\e[0m, \e[31m\"Nine\"\
    \e[0m)\n\e[31m\e[31m   |\e[0m            ^^^\e[0m\n\e[31m   |\e[0mvalue update\
    \ is not a member of List[String] - did you mean List[String].updated?\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660009991
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        // your\
    \ code here\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp__jk4mx2.scala:16:52\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m    \e[33mdef\e[0m \e[36mbyLength\e\
    [0m(\e[36marr\e[0m : \e[35mList\e[0m[\e[35mLong\e[0m]) : \e[35mList\e[0m[\e[35mString\e\
    [0m] = {\n\e[31m\e[31m   |\e[0m                                              \
    \      ^\e[0m\n\e[31m   |\e[0m                                               \
    \   Found:    Unit\n\e[31m   |\e[0m                                          \
    \        Required: List[String]\n\e[31m17 |\e[0m        \e[34m// your code here\e\
    [0m\n\e[31m18 |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009982
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        var list\
    \ = List[String]()\n        arr.foreach(n => if (n >= 1 && n <= 9) list = n.toString\
    \ :: list)\n        list.map(n => n match {\n            case \"1\" => \"One\"\
    \n            case \"2\" => \"Two\"\n            case \"3\" => \"Three\"\n   \
    \         case \"4\" => \"Four\"\n            case \"5\" => \"Five\"\n       \
    \     case \"6\" => \"Six\"\n            case \"7\" => \"Seven\"\n           \
    \ case \"8\" => \"Eight\"\n            case \"9\" => \"Nine\"\n        }).sorted\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsx1cetg5.scala:32)\n\tat Problem.main(tmpsx1cetg5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009994
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        var mapping\
    \ = Map[Int, String]()\n        mapping += (1 -> \"One\")\n        mapping +=\
    \ (2 -> \"Two\")\n        mapping += (3 -> \"Three\")\n        mapping += (4 ->\
    \ \"Four\")\n        mapping += (5 -> \"Five\")\n        mapping += (6 -> \"Six\"\
    )\n        mapping += (7 -> \"Seven\")\n        mapping += (8 -> \"Eight\")\n\
    \        mapping += (9 -> \"Nine\")\n        var result = List[String]()\n   \
    \     for (item <- arr) {\n            if (item <= 9 && item >= 1) result ::=\
    \ mapping(item.toInt)\n        }\n        result.sorted.reverse\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpog0wg38d.scala:34)\n\tat Problem.main(tmpog0wg38d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009996
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        def loop(l\
    \ : List[Long], i : Int, m : Map[Long, String]) : List[String] = {\n         \
    \   l match {\n                case Nil => Nil\n                case x :: xs =>\
    \ if (i >= 1 && i <= 9) m(x) :: loop(xs, i + 1, m) else loop(xs, i + 1, m)\n \
    \           }\n        }\n        val m = Map(1l.toLong -> \"One\", 2l.toLong\
    \ -> \"Two\", 3l.toLong -> \"Three\", 4l.toLong -> \"Four\", 5l.toLong -> \"Five\"\
    , 6l.toLong -> \"Six\", 7l.toLong -> \"Seven\", 8l.toLong -> \"Eight\", 9l.toLong\
    \ -> \"Nine\")\n        val s = arr.sortWith(_ < _)\n        loop(s.reverse, 1,\
    \ m)\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: key not found: 55\n\tat scala.collection.MapOps.default(Map.scala:274)\n\
    \tat scala.collection.MapOps.default$(Map.scala:273)\n\tat scala.collection.AbstractMap.default(Map.scala:405)\n\
    \tat scala.collection.mutable.HashMap.apply(HashMap.scala:425)\n\tat Problem$.loop$1(tmp1hd0td16.scala:20)\n\
    \tat Problem$.byLength(tmp1hd0td16.scala:25)\n\tat Problem$.main(tmp1hd0td16.scala:30)\n\
    \tat Problem.main(tmp1hd0td16.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009997
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        var result\
    \ = new ListBuffer[String]\n        var dict = Map(1l.toLong -> \"One\", 2l.toLong\
    \ -> \"Two\", 3l.toLong -> \"Three\", 4l.toLong -> \"Four\", 5l.toLong -> \"Five\"\
    , 6l.toLong -> \"Six\", 7l.toLong -> \"Seven\", 8l.toLong -> \"Eight\", 9l.toLong\
    \ -> \"Nine\")\n        for (number <- arr) {\n            if (number >= 1 &&\
    \ number <= 9) {\n                result += dict(number)\n            }\n    \
    \    }\n        result.toList.reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n   \
    \ assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpuitjx8ge.scala:27)\n\tat Problem.main(tmpuitjx8ge.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009996
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val a\
    \ = arr.filter((x : Long) => (x >= 1) && (x <= 9))\n        val b = a.sorted.reverse\n\
    \        val c = b.map((x : Long) => (x match {\n            case 1 => \"One\"\
    \n            case 2 => \"Two\"\n            case 3 => \"Three\"\n           \
    \ case 4 => \"Four\"\n            case 5 => \"Five\"\n            case 6 => \"\
    Six\"\n            case 7 => \"Seven\"\n            case 8 => \"Eight\"\n    \
    \        case 9 => \"Nine\"\n        }))\n        c\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009996
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val nums\
    \ = List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\",\
    \ \"Eight\", \"Nine\")\n        val list : List[String] = arr.filter(_ > 0).filter(_\
    \ < 10).sortWith(_ > _).map(x => nums(x.toInt - 1))\n        list\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009996
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val map\
    \ = Map(1l.toLong -> \"One\", 2l.toLong -> \"Two\", 3l.toLong -> \"Three\", 4l.toLong\
    \ -> \"Four\", 5l.toLong -> \"Five\", 6l.toLong -> \"Six\", 7l.toLong -> \"Seven\"\
    , 8l.toLong -> \"Eight\", 9l.toLong -> \"Nine\")\n        arr.filter(e => e >\
    \ 0 && e < 10).sorted.reverse.map(map(_))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n   \
    \ assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009996
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        if (arr.isEmpty)\
    \ List[String]()\n        else {\n            val res = ListBuffer[String]()\n\
    \            val sorted = arr.filter(e => e >= 1 && e <= 9).sorted\n         \
    \   for (i <- sorted.reverse) {\n                i match {\n                 \
    \   case 1 => res += \"One\"\n                    case 2 => res += \"Two\"\n \
    \                   case 3 => res += \"Three\"\n                    case 4 =>\
    \ res += \"Four\"\n                    case 5 => res += \"Five\"\n           \
    \         case 6 => res += \"Six\"\n                    case 7 => res += \"Seven\"\
    \n                    case 8 => res += \"Eight\"\n                    case 9 =>\
    \ res += \"Nine\"\n                }\n            }\n            res.toList\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009996
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val a\
    \ = List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\",\
    \ \"Eight\", \"Nine\")\n        val b = arr.filter(e => e > 0 && e < 10).sorted.reverse\n\
    \        b.map(e => a(e.toInt - 1))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n   \
    \ assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009996
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        var digitToStr\
    \ = new HashMap[Long, String]\n        digitToStr += 1l.toLong -> \"One\"\n  \
    \      digitToStr += 2l.toLong -> \"Two\"\n        digitToStr += 3l.toLong ->\
    \ \"Three\"\n        digitToStr += 4l.toLong -> \"Four\"\n        digitToStr +=\
    \ 5l.toLong -> \"Five\"\n        digitToStr += 6l.toLong -> \"Six\"\n        digitToStr\
    \ += 7l.toLong -> \"Seven\"\n        digitToStr += 8l.toLong -> \"Eight\"\n  \
    \      digitToStr += 9l.toLong -> \"Nine\"\n        var res = List[String]()\n\
    \        for (a <- arr) {\n            if (digitToStr.contains(a)) res ::= digitToStr(a)\n\
    \        }\n        res.sorted.reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n   \
    \ assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpddkkwyoo.scala:34)\n\tat Problem.main(tmpddkkwyoo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009996
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        def toString(num\
    \ : Long) : String = num match {\n            case 1 => \"One\"\n            case\
    \ 2 => \"Two\"\n            case 3 => \"Three\"\n            case 4 => \"Four\"\
    \n            case 5 => \"Five\"\n            case 6 => \"Six\"\n            case\
    \ 7 => \"Seven\"\n            case 8 => \"Eight\"\n            case 9 => \"Nine\"\
    \n            case _ => \"\"\n        }\n        val p = \"([1-9])\".r\n     \
    \   (arr.map(_.toString).filter(p.findFirstIn(_).isDefined).map(toString(_)).sorted.reverse)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptboiw2i2.scala:30:77\
    \ --------------------\e[0m\e[0m\n\e[31m30 |\e[0m        (arr.map(_.toString).filter(p.findFirstIn(_).isDefined).map(toString(_)).sorted.reverse)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                     ^\e[0m\n\e[31m   |\e[0m                                \
    \                Found:    (_$3 : String)\n\e[31m   |\e[0m                   \
    \                             Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009994
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        def toName(i\
    \ : Long) : String = {\n          if (i >= 1 && i <= 9) {\n            i match\
    \ {\n              case 1 => \"One\"\n              case 2 => \"Two\"\n      \
    \        case 3 => \"Three\"\n              case 4 => \"Four\"\n             \
    \ case 5 => \"Five\"\n              case 6 => \"Six\"\n              case 7 =>\
    \ \"Seven\"\n              case 8 => \"Eight\"\n              case 9 => \"Nine\"\
    \n            }\n          } else \"\"\n        }\n        val ret = ArrayBuffer[String]()\n\
    \        for (i <- arr) {\n          val str = toName(i)\n          if (str !=\
    \ \"\") ret += str\n        }\n        ret.sortWith(_ < _).reverse.toList\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpaekaj5zp.scala:40)\n\tat Problem.main(tmpaekaj5zp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009997
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        var list\
    \ = new ArrayList[Long]\n        var itr = arr.iterator\n        while (itr.hasNext)\
    \ {\n            val x = itr.next\n            if (x >= 1 && x <= 9) list.add(x)\n\
    \        }\n        Collections.sort(list)\n        val len = list.size\n    \
    \    for (i <- 0 until len / 2) {\n            val temp = list.get(i)\n      \
    \      list.set(i, list.get(len - i - 1))\n            list.set(len - i - 1, temp)\n\
    \        }\n        val ret = new ArrayList[String]\n        for (i <- 0 until\
    \ len) {\n            val x = list.get(i)\n            if (x == 1) ret.add(\"\
    One\")\n            else if (x == 2) ret.add(\"Two\")\n            else if (x\
    \ == 3) ret.add(\"Three\")\n            else if (x == 4) ret.add(\"Four\")\n \
    \           else if (x == 5) ret.add(\"Five\")\n            else if (x == 6) ret.add(\"\
    Six\")\n            else if (x == 7) ret.add(\"Seven\")\n            else if (x\
    \ == 8) ret.add(\"Eight\")\n            else if (x == 9) ret.add(\"Nine\")\n \
    \       }\n        ret\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4b_5q4t2.scala:17:23 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mvar\e[0m \e[36mlist\e[0m = \e[33mnew\e\
    [0m \e[35mArrayList\e[0m[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m             \
    \          ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: type\
    \ ArrayList\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4b_5q4t2.scala:23:8\
    \ -------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        Collections.sort(list)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Not found:\
    \ Collections\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4b_5q4t2.scala:30:22\
    \ ------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e\
    [36mret\e[0m = \e[33mnew\e[0m \e[35mArrayList\e[0m[\e[35mString\e[0m]\n\e[31m\e\
    [31m   |\e[0m                      ^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \           Not found: type ArrayList\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009992
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val input\
    \ = for(i <- 0 until arr.length if arr(i) > 0 && arr(i) < 10) yield arr(i)\n \
    \       input.sortWith((x, y) => x < y).reverse.map(x => x match {\n         \
    \   case 1 => \"One\"\n            case 2 => \"Two\"\n            case 3 => \"\
    Three\"\n            case 4 => \"Four\"\n            case 5 => \"Five\"\n    \
    \        case 6 => \"Six\"\n            case 7 => \"Seven\"\n            case\
    \ 8 => \"Eight\"\n            case 9 => \"Nine\"\n        })\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpszqzhgnx.scala:18:51\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        input.sortWith((\e[36mx\e\
    [0m, \e[36my\e[0m) => x < y).reverse.map(\e[36mx\e[0m => x \e[33mmatch\e[0m {\n\
    \e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m        Found:    \e[1m\e\
    [31mIndexedSeq\e[0m[String]\n\e[31m   |\e[0m        Required: \e[1m\e[32mList\e\
    [0m[String]\n\e[31m19 |\e[0m            \e[33mcase\e[0m \e[31m1\e[0m => \e[31m\"\
    One\"\e[0m\n\e[31m20 |\e[0m            \e[33mcase\e[0m \e[31m2\e[0m => \e[31m\"\
    Two\"\e[0m\n\e[31m21 |\e[0m            \e[33mcase\e[0m \e[31m3\e[0m => \e[31m\"\
    Three\"\e[0m\n\e[31m22 |\e[0m            \e[33mcase\e[0m \e[31m4\e[0m => \e[31m\"\
    Four\"\e[0m\n\e[31m23 |\e[0m            \e[33mcase\e[0m \e[31m5\e[0m => \e[31m\"\
    Five\"\e[0m\n\e[31m24 |\e[0m            \e[33mcase\e[0m \e[31m6\e[0m => \e[31m\"\
    Six\"\e[0m\n\e[31m25 |\e[0m            \e[33mcase\e[0m \e[31m7\e[0m => \e[31m\"\
    Seven\"\e[0m\n\e[31m26 |\e[0m            \e[33mcase\e[0m \e[31m8\e[0m => \e[31m\"\
    Eight\"\e[0m\n\e[31m27 |\e[0m            \e[33mcase\e[0m \e[31m9\e[0m => \e[31m\"\
    Nine\"\e[0m\n\e[31m28 |\e[0m        })\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009995
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        // TODO:\
    \ implement this\n        List(\"todo\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n   \
    \ assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpui1sqcqk.scala:21)\n\tat Problem.main(tmpui1sqcqk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009996
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val length\
    \ = arr.length\n        var result = new Array[String](length)\n        arr.foreach((i\
    \ : Long) => {\n            if (1 <= i && i <= 9) {\n                var string\
    \ = i match {\n                    case 1 => \"One\"\n                    case\
    \ 2 => \"Two\"\n                    case 3 => \"Three\"\n                    case\
    \ 4 => \"Four\"\n                    case 5 => \"Five\"\n                    case\
    \ 6 => \"Six\"\n                    case 7 => \"Seven\"\n                    case\
    \ 8 => \"Eight\"\n                    case 9 => \"Nine\"\n                }\n\
    \                result = result :+ string\n            }\n        })\n      \
    \  result.toList.sorted.reverse\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n\
    \    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"\
    One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong,\
    \ 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong,\
    \ 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"String.compareTo(String)\"\
    \ because \"x\" is null\n\tat scala.math.Ordering$StringOrdering.compare(Ordering.scala:575)\n\
    \tat scala.math.Ordering$StringOrdering.compare$(Ordering.scala:575)\n\tat scala.math.Ordering$String$.compare(Ordering.scala:577)\n\
    \tat scala.math.Ordering$String$.compare(Ordering.scala:577)\n\tat java.base/java.util.TimSort.countRunAndMakeAscending(TimSort.java:355)\n\
    \tat java.base/java.util.TimSort.sort(TimSort.java:220)\n\tat java.base/java.util.Arrays.sort(Arrays.java:1233)\n\
    \tat scala.collection.SeqOps.sorted(Seq.scala:700)\n\tat scala.collection.SeqOps.sorted$(Seq.scala:692)\n\
    \tat scala.collection.immutable.List.scala$collection$immutable$StrictOptimizedSeqOps$$super$sorted(List.scala:79)\n\
    \tat scala.collection.immutable.StrictOptimizedSeqOps.sorted(StrictOptimizedSeqOps.scala:78)\n\
    \tat scala.collection.immutable.StrictOptimizedSeqOps.sorted$(StrictOptimizedSeqOps.scala:78)\n\
    \tat scala.collection.immutable.List.sorted(List.scala:79)\n\tat Problem$.byLength(tmphxvxwq5c.scala:35)\n\
    \tat Problem$.main(tmphxvxwq5c.scala:38)\n\tat Problem.main(tmphxvxwq5c.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools."
  stdout: ''
  timestamp: 1660009997
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val nums\
    \ = \"Nine Eight Seven Six Five Four Three Two One\".split(\" \").reverse\n  \
    \      val res = new ListBuffer[String]\n        for (x <- arr if x <= 9 && x\
    \ >= 1) res += nums(x.toInt - 1)\n        res.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw46_tqzd.scala:23)\n\tat Problem.main(tmpw46_tqzd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009996
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        arr.filter(i\
    \ => i > 0 && i < 10).sorted.reverse.map(x => x match {\n            case 1 =>\
    \ \"One\"\n            case 2 => \"Two\"\n            case 3 => \"Three\"\n  \
    \          case 4 => \"Four\"\n            case 5 => \"Five\"\n            case\
    \ 6 => \"Six\"\n            case 7 => \"Seven\"\n            case 8 => \"Eight\"\
    \n            case 9 => \"Nine\"\n        })\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n   \
    \ assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009997
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n    // Write your\
    \ solution here\n    val validNum = (1 to 9).toList\n    arr.filter(i => validNum.contains(i)).sorted.reverse.map(i\
    \ => \"One\" * (i - 1) + i.toString)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n   \
    \ assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpx125u1ci.scala:19:75\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m    arr.filter(\e[36mi\e[0m =>\
    \ validNum.contains(i)).sorted.reverse.map(\e[36mi\e[0m => \e[31m\"One\"\e[0m\
    \ * (i - \e[31m1\e[0m) + i.toString)\n\e[31m\e[31m   |\e[0m                  \
    \                                                         ^^^^^\e[0m\n\e[31m \
    \  |\e[0m                                                          Found:    Long\n\
    \e[31m   |\e[0m                                                          Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009995
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val arr1\
    \ = arr.filter(i => i < 10 && i > 0).sorted\n        val arr2 = arr1.reverse\n\
    \        val arr3 = arr2.map(i => \n            i match {\n                case\
    \ 1 => \"One\"\n                case 2 => \"Two\"\n                case 3 => \"\
    Three\"\n                case 4 => \"Four\"\n                case 5 => \"Five\"\
    \n                case 6 => \"Six\"\n                case 7 => \"Seven\"\n   \
    \             case 8 => \"Eight\"\n                case 9 => \"Nine\"\n      \
    \      }\n        )\n        arr3\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n   \
    \ assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010000
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        // write\
    \ your code here\n        arr.filter(n => n >= 1 && n <= 9).sorted.reverse.map(n\
    \ => n match {\n            case 1 => \"One\"\n            case 2 => \"Two\"\n\
    \            case 3 => \"Three\"\n            case 4 => \"Four\"\n           \
    \ case 5 => \"Five\"\n            case 6 => \"Six\"\n            case 7 => \"\
    Seven\"\n            case 8 => \"Eight\"\n            case 9 => \"Nine\"\n   \
    \     })\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010005
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        def convert(x\
    \ : Long) : String = {\n            if (x == 1) \"One\"\n            else if (x\
    \ == 2) \"Two\"\n            else if (x == 3) \"Three\"\n            else if (x\
    \ == 4) \"Four\"\n            else if (x == 5) \"Five\"\n            else if (x\
    \ == 6) \"Six\"\n            else if (x == 7) \"Seven\"\n            else if (x\
    \ == 8) \"Eight\"\n            else if (x == 9) \"Nine\"\n            else \"\"\
    \n        }\n        if (arr.length == 0) List[String]()\n        else arr.filter(e\
    \ => e >= 1 && e <= 9).sorted.reverse.map(e => convert(e))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010004
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        arr.filter(x\
    \ => x >= 1 && x <= 9).sorted.reverse.map(x => numberName(x.toInt))\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8fdzo0ts.scala:17:66 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        arr.filter(\e[36mx\e[0m => x >= \e[31m1\e[0m\
    \ && x <= \e[31m9\e[0m).sorted.reverse.map(\e[36mx\e[0m => numberName(x.toInt))\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \          ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                  \
    \                 Not found: numberName\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009999
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val m\
    \ = Map(\"1\" -> \"One\", \"2\" -> \"Two\", \"3\" -> \"Three\", \"4\" -> \"Four\"\
    , \"5\" -> \"Five\", \"6\" -> \"Six\", \"7\" -> \"Seven\", \"8\" -> \"Eight\"\
    , \"9\" -> \"Nine\")\n        val s = arr.map(x => (x + \"\").toList.map(x =>\
    \ m(x + \"\"))).filter(x => x.forall(y => y.size == 4)).flatten.sortWith(_ < _).reverse\n\
    \        s\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpp6l2e2gs.scala:22)\n\tat Problem.main(tmpp6l2e2gs.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010006
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        arr.filter(i\
    \ => i <= 9 && i >= 1).sorted.reverse.map(i => i match {\n            case 1 =>\
    \ \"One\"\n            case 2 => \"Two\"\n            case 3 => \"Three\"\n  \
    \          case 4 => \"Four\"\n            case 5 => \"Five\"\n            case\
    \ 6 => \"Six\"\n            case 7 => \"Seven\"\n            case 8 => \"Eight\"\
    \n            case 9 => \"Nine\"\n        })\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n   \
    \ assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010006
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        // your\
    \ code here\n        if (arr.isEmpty) Nil\n        else\n          arr.map(i =>\
    \ i.toString)\n            .filter(i => i.length == 1 && i.toInt >= 1 && i.toInt\
    \ <= 9)\n            .sorted\n            .reverse\n            .map(i => i match\
    \ {\n                case \"1\" => \"One\"\n                case \"2\" => \"Two\"\
    \n                case \"3\" => \"Three\"\n                case \"4\" => \"Four\"\
    \n                case \"5\" => \"Five\"\n                case \"6\" => \"Six\"\
    \n                case \"7\" => \"Seven\"\n                case \"8\" => \"Eight\"\
    \n                case \"9\" => \"Nine\"\n            })\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010006
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        // your\
    \ code here\n        var n = ListBuffer[String]()\n        for (i <- arr) {\n\
    \            if (i == 1l) n += \"One\"\n            if (i == 2l) n += \"Two\"\n\
    \            if (i == 3l) n += \"Three\"\n            if (i == 4l) n += \"Four\"\
    \n            if (i == 5l) n += \"Five\"\n            if (i == 6l) n += \"Six\"\
    \n            if (i == 7l) n += \"Seven\"\n            if (i == 8l) n += \"Eight\"\
    \n            if (i == 9l) n += \"Nine\"\n        }\n        n.toList.sorted.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpyzgtcqu8.scala:33)\n\tat Problem.main(tmpyzgtcqu8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010006
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        def f(n\
    \ : Long) : String = n match {\n            case 1 => \"One\"\n            case\
    \ 2 => \"Two\"\n            case 3 => \"Three\"\n            case 4 => \"Four\"\
    \n            case 5 => \"Five\"\n            case 6 => \"Six\"\n            case\
    \ 7 => \"Seven\"\n            case 8 => \"Eight\"\n            case 9 => \"Nine\"\
    \n            case _ => \"\"\n        }\n        arr.filter(1 <= _ && _ <= 9).sorted.reverse.map(f(_))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmp19az_1pl.scala:29:19 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        arr.filter(\e[31m1\e[0m <= _ && _ <= \e[31m9\e\
    [0m).sorted.reverse.map(f(_))\n\e[31m\e[31m   |\e[0m                   ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                   Wrong number of parameters, expected: 1\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010002
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        var a\
    \ = List[String]()\n        var b = arr.sorted.map(v => LongToString(v)).reverse\n\
    \        for (i <- b) {\n            if (i == \"Zero\") a = a :+ \"One\"\n   \
    \         else if (i == \"One\") a = a :+ \"Two\"\n            else if (i == \"\
    Two\") a = a :+ \"Three\"\n            else if (i == \"Three\") a = a :+ \"Four\"\
    \n            else if (i == \"Four\") a = a :+ \"Five\"\n            else if (i\
    \ == \"Five\") a = a :+ \"Six\"\n            else if (i == \"Six\") a = a :+ \"\
    Seven\"\n            else if (i == \"Seven\") a = a :+ \"Eight\"\n           \
    \ else if (i == \"Eight\") a = a :+ \"Nine\"\n            else if (i == \"Nine\"\
    ) a = a :+ \"Ten\"\n        }\n        a\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n   \
    \ assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgsszfs5o.scala:18:36 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mvar\e[0m \e[36mb\e[0m = arr.sorted.map(\e\
    [36mv\e[0m => LongToString(v)).reverse\n\e[31m\e[31m   |\e[0m                \
    \                    ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \              Not found: LongToString\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010003
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        // write\
    \ your solution here\n        if (arr.length == 0) List()\n        else {\n  \
    \          var list = new ListBuffer[String]()\n            for (n <- arr) {\n\
    \                if (n >= 1 && n <= 9) {\n                    if (n == 1) list\
    \ += \"One\"\n                    else if (n == 2) list += \"Two\"\n         \
    \           else if (n == 3) list += \"Three\"\n                    else if (n\
    \ == 4) list += \"Four\"\n                    else if (n == 5) list += \"Five\"\
    \n                    else if (n == 6) list += \"Six\"\n                    else\
    \ if (n == 7) list += \"Seven\"\n                    else if (n == 8) list +=\
    \ \"Eight\"\n                    else if (n == 9) list += \"Nine\"\n         \
    \       }\n            }\n            list.sortWith(_ < _).reverse.toList\n  \
    \      }\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxzc1fna5.scala:38)\n\tat Problem.main(tmpxzc1fna5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010008
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        def name(i\
    \ : Long) : String = i match {\n            case 1 => \"One\"\n            case\
    \ 2 => \"Two\"\n            case 3 => \"Three\"\n            case 4 => \"Four\"\
    \n            case 5 => \"Five\"\n            case 6 => \"Six\"\n            case\
    \ 7 => \"Seven\"\n            case 8 => \"Eight\"\n            case 9 => \"Nine\"\
    \n            case _ => \"\"\n        }\n        arr.filter(e => e >= 1 && e <=\
    \ 9).sortWith(_ < _).reverse.map(e => name(e))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n   \
    \ assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val list1\
    \ = arr.filter(x => x > 0 && x < 10)\n        list1.sorted.reverse.map(x => x\
    \ match {\n            case 1 => \"One\"\n            case 2 => \"Two\"\n    \
    \        case 3 => \"Three\"\n            case 4 => \"Four\"\n            case\
    \ 5 => \"Five\"\n            case 6 => \"Six\"\n            case 7 => \"Seven\"\
    \n            case 8 => \"Eight\"\n            case 9 => \"Nine\"\n        })\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010008
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        var result\
    \ : List[String] = List()\n        for (i <- arr) if (i >= 1 && i <= 9) result\
    \ = result :+ i.toString\n        result = result.sortWith(_ < _)\n        var\
    \ arr1 : List[String] = List()\n        for (i <- result.reverse) {\n        \
    \    i match {\n                case \"1\" => arr1 = arr1 :+ \"One\"\n       \
    \         case \"2\" => arr1 = arr1 :+ \"Two\"\n                case \"3\" =>\
    \ arr1 = arr1 :+ \"Three\"\n                case \"4\" => arr1 = arr1 :+ \"Four\"\
    \n                case \"5\" => arr1 = arr1 :+ \"Five\"\n                case\
    \ \"6\" => arr1 = arr1 :+ \"Six\"\n                case \"7\" => arr1 = arr1 :+\
    \ \"Seven\"\n                case \"8\" => arr1 = arr1 :+ \"Eight\"\n        \
    \        case \"9\" => arr1 = arr1 :+ \"Nine\"\n            }\n        }\n   \
    \     arr1\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010008
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val names\
    \ = List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\",\
    \ \"Eight\", \"Nine\")\n        val numbers = (1 to 9).toList\n        // Map\
    \ the integers to the names.\n        val m = numbers.zip(names).toMap\n     \
    \   // Use a list buffer to build the output.\n        val list = ListBuffer[String]()\n\
    \        // Only keep the numbers 1 to 9.\n        for (x <- arr) {\n        \
    \    if (x >= 1 && x <= 9) list += m(x.toInt)\n        }\n        // Sort the\
    \ list then reverse it.\n        list.sorted.reverse.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpb57wxv_f.scala:31)\n\tat Problem.main(tmpb57wxv_f.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010008
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        // Do\
    \ not edit this function.\n        arr.filter(_ >= 1).filter(_ <= 9).sortWith(_\
    \ > _).map(value => {\n            value match {\n                case 1 => \"\
    One\"\n                case 2 => \"Two\"\n                case 3 => \"Three\"\n\
    \                case 4 => \"Four\"\n                case 5 => \"Five\"\n    \
    \            case 6 => \"Six\"\n                case 7 => \"Seven\"\n        \
    \        case 8 => \"Eight\"\n                case 9 => \"Nine\"\n           \
    \     case _ => \"???????\"\n            }\n        })\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010008
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val oneTwoThreeFourFiveSixSevenEightNine\
    \ = List[String](\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"\
    Seven\", \"Eight\", \"Nine\")\n        var list  = new ListBuffer[String]()\n\
    \        for (j <- 0 to oneTwoThreeFourFiveSixSevenEightNine.length - 1) {\n \
    \           var count = 0\n            for (i <- 0 to arr.length - 1) {\n    \
    \            if (oneTwoThreeFourFiveSixSevenEightNine(j) == arr(i).toString())\
    \ {\n                    count += 1\n                }\n            }\n      \
    \      for (l <- 0 to count - 1) {\n                list += oneTwoThreeFourFiveSixSevenEightNine(j)\n\
    \            }\n        }\n        list.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n   \
    \ assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw_x11k3u.scala:33)\n\tat Problem.main(tmpw_x11k3u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010009
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        var intToString\
    \ = new HashMap[Int, String]()\n        intToString += (1 -> \"One\")\n      \
    \  intToString += (2 -> \"Two\")\n        intToString += (3 -> \"Three\")\n  \
    \      intToString += (4 -> \"Four\")\n        intToString += (5 -> \"Five\")\n\
    \        intToString += (6 -> \"Six\")\n        intToString += (7 -> \"Seven\"\
    )\n        intToString += (8 -> \"Eight\")\n        intToString += (9 -> \"Nine\"\
    )\n        var validList = new ListBuffer[Int]()\n        for (i <- arr) {\n \
    \           if (i >= 1 && i <= 9) validList += i.toInt\n        }\n        var\
    \ validArr = validList.toList\n        var sortedList = validArr.sorted\n    \
    \    var resList = new ListBuffer[String]()\n        for (i <- sortedList) {\n\
    \            resList += intToString(i)\n        }\n        var res = resList.toList\n\
    \        res.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010009
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        // return\
    \ \"Replace this string with the code you want!\"\n        val set = Set(1l, 2l,\
    \ 3l, 4l, 5l, 6l, 7l, 8l, 9l)\n        arr.filter(set.contains(_)).sorted.reverse.map(x\
    \ => {\n            x match {\n                case 1l => \"One\"\n          \
    \      case 2l => \"Two\"\n                case 3l => \"Three\"\n            \
    \    case 4l => \"Four\"\n                case 5l => \"Five\"\n              \
    \  case 6l => \"Six\"\n                case 7l => \"Seven\"\n                case\
    \ 8l => \"Eight\"\n                case 9l => \"Nine\"\n            }\n      \
    \  })\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010009
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val lookup\
    \ = Map(1 -> \"One\", 2 -> \"Two\", 3 -> \"Three\", 4 -> \"Four\", 5 -> \"Five\"\
    , 6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\", 9 -> \"Nine\")\n        arr.filter(e\
    \ => lookup.contains(e)).map(e => lookup(e)).sortWith(_.length < _.length).reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1knz9q8v.scala:18:40\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        arr.filter(\e[36me\e\
    [0m => lookup.contains(e)).map(\e[36me\e[0m => lookup(e)).sortWith(_.length <\
    \ _.length).reverse\n\e[31m\e[31m   |\e[0m                                   \
    \     ^\e[0m\n\e[31m   |\e[0m                                        Found:  \
    \  (e : Long)\n\e[31m   |\e[0m                                        Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1knz9q8v.scala:18:60\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        arr.filter(\e[36me\e\
    [0m => lookup.contains(e)).map(\e[36me\e[0m => lookup(e)).sortWith(_.length <\
    \ _.length).reverse\n\e[31m\e[31m   |\e[0m                                   \
    \                         ^\e[0m\n\e[31m   |\e[0m                            \
    \                        Found:    (e : Long)\n\e[31m   |\e[0m               \
    \                                     Required: Int\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010008
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        def f(l\
    \ : List[Long]) : List[Long] = {\n            l match {\n                case\
    \ Nil => Nil\n                case x :: xs => if (x >= 1 && x <= 9) x :: f(xs)\
    \ else f(xs)\n            }\n        }\n        def s(l : List[Long]) : List[Long]\
    \ = {\n            l match {\n                case Nil => Nil\n              \
    \  case x :: xs => s(xs) ::: List(x)\n            }\n        }\n        def r(l\
    \ : List[Long]) : List[String] = {\n            l match {\n                case\
    \ Nil => Nil\n                case x :: xs => x match {\n                    case\
    \ 1 => \"One\" :: r(xs)\n                    case 2 => \"Two\" :: r(xs)\n    \
    \                case 3 => \"Three\" :: r(xs)\n                    case 4 => \"\
    Four\" :: r(xs)\n                    case 5 => \"Five\" :: r(xs)\n           \
    \         case 6 => \"Six\" :: r(xs)\n                    case 7 => \"Seven\"\
    \ :: r(xs)\n                    case 8 => \"Eight\" :: r(xs)\n               \
    \     case 9 => \"Nine\" :: r(xs)\n                }\n            }\n        }\n\
    \        def g(l : List[Long]) : List[String] = {\n            r(s(f(l)))\n  \
    \      }\n        g(arr)\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8hfo0ovv.scala:51)\n\tat Problem.main(tmp8hfo0ovv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010009
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        // Put\
    \ your code here\n        // nums = List(2345,123,6789)\n        val nums = arr\n\
    \        // nums = List(2345,123,6789)\n        val digits = nums.flatMap(n =>\
    \ n.toString.map(_.asDigit))\n        // digits = List(2, 3, 4, 5, 1, 2, 3, 6,\
    \ 7, 8, 9)\n        val validDigits = digits.filter(n => n > 0 && n < 10)\n  \
    \      // validDigits = List(2, 3, 4, 5, 1, 2, 3, 6, 7, 8, 9)\n        val digitsInAscendingOrder\
    \ = validDigits.sorted\n        // digitsInAscendingOrder = List(1, 1, 2, 2, 3,\
    \ 3, 4, 5, 6, 7, 8, 9)\n        val digitsInDescendingOrder = digitsInAscendingOrder.reverse\n\
    \        // digitsInDescendingOrder = List(9, 8, 7, 6, 5, 4, 3, 3, 2, 2, 1, 1)\n\
    \        digitsInDescendingOrder.map(n => n match {\n            case 1 => \"\
    One\"\n            case 2 => \"Two\"\n            case 3 => \"Three\"\n      \
    \      case 4 => \"Four\"\n            case 5 => \"Five\"\n            case 6\
    \ => \"Six\"\n            case 7 => \"Seven\"\n            case 8 => \"Eight\"\
    \n            case 9 => \"Nine\"\n        })\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n   \
    \ assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzy3lyjl2.scala:44)\n\tat Problem.main(tmpzy3lyjl2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010009
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        def toStr(l\
    \ : Long) : String = l match {\n            case 1 => \"One\"\n            case\
    \ 2 => \"Two\"\n            case 3 => \"Three\"\n            case 4 => \"Four\"\
    \n            case 5 => \"Five\"\n            case 6 => \"Six\"\n            case\
    \ 7 => \"Seven\"\n            case 8 => \"Eight\"\n            case 9 => \"Nine\"\
    \n            case _ => \"\"\n        }\n        arr.filter(x => x >= 1 && x <=\
    \ 9).sorted.reverse.map(toStr)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n\
    \    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"\
    One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong,\
    \ 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong,\
    \ 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010009
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        // Fill\
    \ up this function body\n        // You can add another function as well, if required\n\
    \        val list = arr.map(x => x.toString).filter(_.matches(\"\"\"[1-9]\"\"\"\
    ))\n        val myMap = Map(\"1\" -> \"One\", \"2\" -> \"Two\", \"3\" -> \"Three\"\
    , \"4\" -> \"Four\", \"5\" -> \"Five\", \"6\" -> \"Six\", \"7\" -> \"Seven\",\
    \ \"8\" -> \"Eight\", \"9\" -> \"Nine\")\n        list.sortWith(_.length > _.length).map(x\
    \ => myMap(x))\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprgecz052.scala:24)\n\tat Problem.main(tmprgecz052.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010012
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        def toString(x\
    \ : Long) : String = x match {\n            case 1 => \"One\"\n            case\
    \ 2 => \"Two\"\n            case 3 => \"Three\"\n            case 4 => \"Four\"\
    \n            case 5 => \"Five\"\n            case 6 => \"Six\"\n            case\
    \ 7 => \"Seven\"\n            case 8 => \"Eight\"\n            case 9 => \"Nine\"\
    \n            case _ => \"\"\n        }\n        arr.filter(x => x >= 1 && x <=\
    \ 9).sorted.reverse.map(x => toString(x))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n   \
    \ assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010013
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n      arr.filter(x\
    \ => (x > 0) && (x < 10)).sorted.reverse.map(x => x match {\n        case 1 =>\
    \ \"One\"\n        case 2 => \"Two\"\n        case 3 => \"Three\"\n        case\
    \ 4 => \"Four\"\n        case 5 => \"Five\"\n        case 6 => \"Six\"\n     \
    \   case 7 => \"Seven\"\n        case 8 => \"Eight\"\n        case 9 => \"Nine\"\
    \n      })\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010014
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val m\
    \ = Map(\"1\" -> \"One\", \"2\" -> \"Two\", \"3\" -> \"Three\", \"4\" -> \"Four\"\
    , \"5\" -> \"Five\", \"6\" -> \"Six\", \"7\" -> \"Seven\", \"8\" -> \"Eight\"\
    , \"9\" -> \"Nine\")\n        val numbers = arr.filter(x => x >= 1 && x <= 9).sorted.reverse.map(x\
    \ => x.toString)\n        numbers.map(x => m(x))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n   \
    \ assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010016
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        // Write\
    \ your code here\n        val result = new ListBuffer[String]\n        val sortedlist\
    \ = arr.sorted\n        for (num <- sortedlist) {\n            if (num >= 1 &&\
    \ num <= 9) {\n                result += num.toString\n            }\n       \
    \ }\n        result.toList.reverse.map{\n            case \"1\" => \"One\"\n \
    \           case \"2\" => \"Two\"\n            case \"3\" => \"Three\"\n     \
    \       case \"4\" => \"Four\"\n            case \"5\" => \"Five\"\n         \
    \   case \"6\" => \"Six\"\n            case \"7\" => \"Seven\"\n            case\
    \ \"8\" => \"Eight\"\n            case \"9\" => \"Nine\"\n        }\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010016
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        def getWord(i\
    \ : Long) : String = i match {\n          case 1 => \"One\"\n          case 2\
    \ => \"Two\"\n          case 3 => \"Three\"\n          case 4 => \"Four\"\n  \
    \        case 5 => \"Five\"\n          case 6 => \"Six\"\n          case 7 =>\
    \ \"Seven\"\n          case 8 => \"Eight\"\n          case 9 => \"Nine\"\n   \
    \       case _ => \"\"\n        }\n        arr.sortWith((a, b) => a < b).reverse.map(getWord(_)).filter(_\
    \ != \"\")\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010016
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        // For\
    \ each number, map it to the corresponding number if it is between 1 and 9 inclusive,\n\
    \        // otherwise map it to None.\n        // For example:\n        // >>>\
    \ arr.map(((x : Long) => { if ((1l.toLong <= x) && (x <= 9l.toLong)) { (Some(x))\
    \ } else { (None) } }))\n        // (List[Option[Long]](Some(2l.toLong), Some(1l.toLong),\
    \ Some(1l.toLong), Some(4l.toLong), Some(5l.toLong), Some(8l.toLong), Some(2l.toLong),\
    \ Some(3l.toLong)))\n        // Then, flatten the list.\n        // For example:\n\
    \        // >>> arr.map(((x : Long) => { if ((1l.toLong <= x) && (x <= 9l.toLong))\
    \ { (Some(x)) } else { (None) } })).flatten\n        // (List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))\n\
    \        // Now, sort the resulting list.\n        // For example:\n        //\
    \ >>> arr.map(((x : Long) => { if ((1l.toLong <= x) && (x <= 9l.toLong)) { (Some(x))\
    \ } else { (None) } })).flatten.sorted\n        // (List[Long](1l.toLong, 1l.toLong,\
    \ 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 8l.toLong))\n       \
    \ // Then, reverse the resulting list.\n        // For example:\n        // >>>\
    \ arr.map(((x : Long) => { if ((1l.toLong <= x) && (x <= 9l.toLong)) { (Some(x))\
    \ } else { (None) } })).flatten.sorted.reverse\n        // (List[Long](8l.toLong,\
    \ 5l.toLong, 4l.toLong,\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp95grjao9.scala:16:52\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m    \e[33mdef\e[0m \e[36mbyLength\e\
    [0m(\e[36marr\e[0m : \e[35mList\e[0m[\e[35mLong\e[0m]) : \e[35mList\e[0m[\e[35mString\e\
    [0m] = {\n\e[31m\e[31m   |\e[0m                                              \
    \      ^\e[0m\n\e[31m   |\e[0m                                               \
    \   Found:    Unit\n\e[31m   |\e[0m                                          \
    \        Required: List[String]\n\e[31m17 |\e[0m        \e[34m// For each number,\
    \ map it to the corresponding number if it is between 1 and 9 inclusive,\e[0m\n\
    \e[31m18 |\e[0m        \e[34m// otherwise map it to None.\e[0m\n\e[31m19 |\e[0m\
    \        \e[34m// For example:\e[0m\n\e[31m20 |\e[0m        \e[34m// >>> arr.map(((x\
    \ : Long) => { if ((1l.toLong <= x) && (x <= 9l.toLong)) { (Some(x)) } else {\
    \ (None) } }))\e[0m\n\e[31m21 |\e[0m        \e[34m// (List[Option[Long]](Some(2l.toLong),\
    \ Some(1l.toLong), Some(1l.toLong), Some(4l.toLong), Some(5l.toLong), Some(8l.toLong),\
    \ Some(2l.toLong), Some(3l.toLong)))\e[0m\n\e[31m22 |\e[0m        \e[34m// Then,\
    \ flatten the list.\e[0m\n\e[31m23 |\e[0m        \e[34m// For example:\e[0m\n\e\
    [31m24 |\e[0m        \e[34m// >>> arr.map(((x : Long) => { if ((1l.toLong <= x)\
    \ && (x <= 9l.toLong)) { (Some(x)) } else { (None) } })).flatten\e[0m\n\e[31m25\
    \ |\e[0m        \e[34m// (List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))\e[0m\n\e[31m26 |\e[0m        \e\
    [34m// Now, sort the resulting list.\e[0m\n\e[31m27 |\e[0m        \e[34m// For\
    \ example:\e[0m\n\e[31m28 |\e[0m        \e[34m// >>> arr.map(((x : Long) => {\
    \ if ((1l.toLong <= x) && (x <= 9l.toLong)) { (Some(x)) } else { (None) } })).flatten.sorted\e\
    [0m\n\e[31m29 |\e[0m        \e[34m// (List[Long](1l.toLong, 1l.toLong, 2l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 8l.toLong))\e[0m\n\e[31m30 |\e[0m\
    \        \e[34m// Then, reverse the resulting list.\e[0m\n\e[31m31 |\e[0m    \
    \    \e[34m// For example:\e[0m\n\e[31m32 |\e[0m        \e[34m// >>> arr.map(((x\
    \ : Long) => { if ((1l.toLong <= x) && (x <= 9l.toLong)) { (Some(x)) } else {\
    \ (None) } }))"
  stdout: ''
  timestamp: 1660010015
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        // Write\
    \ your code here\n        val numbers = List(\"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n        val filteredArr\
    \ = arr.filter(x => x >= 1 && x <= 9)\n        val sortedArr = filteredArr.sorted\n\
    \        val replacedArr = sortedArr.map(x => numbers(x.toInt - 1))\n        replacedArr.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010018
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val list\
    \ = new ListBuffer[String]\n        for (i <- arr) {\n            if (i > 0 &&\
    \ i < 10) list += (i match {\n                case 1 => \"One\"\n            \
    \    case 2 => \"Two\"\n                case 3 => \"Three\"\n                case\
    \ 4 => \"Four\"\n                case 5 => \"Five\"\n                case 6 =>\
    \ \"Six\"\n                case 7 => \"Seven\"\n                case 8 => \"Eight\"\
    \n                case 9 => \"Nine\"\n            })\n        }\n        list.toList.sortWith(_\
    \ < _).reverse\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9ucqelnz.scala:34)\n\tat Problem.main(tmp9ucqelnz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010019
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val numToName\
    \ = Map(1l.toLong -> \"One\", 2l.toLong -> \"Two\", 3l.toLong -> \"Three\", 4l.toLong\
    \ -> \"Four\", 5l.toLong -> \"Five\", 6l.toLong -> \"Six\", 7l.toLong -> \"Seven\"\
    , 8l.toLong -> \"Eight\", 9l.toLong -> \"Nine\")\n        val withinOneToNine\
    \ = arr.filter(num => (num >= 1l.toLong && num <= 9l.toLong))\n        val sortedWithinOneToNine\
    \ = withinOneToNine.sorted\n        val reversedWithinOneToNine = sortedWithinOneToNine.reverse\n\
    \        reversedWithinOneToNine.map(num => numToName(num))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010018
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        // write\
    \ your code below\n        var l : List[String] = List[String]()\n        if (arr.length\
    \ > 0) {\n            var tmp : List[Long] = arr.filter(i => i >= 1 && i <= 9)\n\
    \            var tmp2 : List[Long] = tmp.reverse\n            tmp2.foreach(i =>\
    \ {\n                i match {\n                    case 1 => l :+= \"One\"\n\
    \                    case 2 => l :+= \"Two\"\n                    case 3 => l\
    \ :+= \"Three\"\n                    case 4 => l :+= \"Four\"\n              \
    \      case 5 => l :+= \"Five\"\n                    case 6 => l :+= \"Six\"\n\
    \                    case 7 => l :+= \"Seven\"\n                    case 8 =>\
    \ l :+= \"Eight\"\n                    case 9 => l :+= \"Nine\"\n            \
    \    }\n            })\n        }\n        l\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n   \
    \ assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp61y_peid.scala:39)\n\tat Problem.main(tmp61y_peid.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010019
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        // write\
    \ your code here\n        null\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n\
    \    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"\
    One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong,\
    \ 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong,\
    \ 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.collection.immutable.List.equals(Object)\"\
    \ because the return value of \"Problem$.byLength(scala.collection.immutable.List)\"\
    \ is null\n\tat Problem$.main(tmpronn_s5j.scala:21)\n\tat Problem.main(tmpronn_s5j.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010018
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        // This\
    \ is your job. ;)\n        null\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n\
    \    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"\
    One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong,\
    \ 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong,\
    \ 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.collection.immutable.List.equals(Object)\"\
    \ because the return value of \"Problem$.byLength(scala.collection.immutable.List)\"\
    \ is null\n\tat Problem$.main(tmpo3e_fc8i.scala:21)\n\tat Problem.main(tmpo3e_fc8i.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010018
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        // your\
    \ code here\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp__jk4mx2.scala:16:52\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m    \e[33mdef\e[0m \e[36mbyLength\e\
    [0m(\e[36marr\e[0m : \e[35mList\e[0m[\e[35mLong\e[0m]) : \e[35mList\e[0m[\e[35mString\e\
    [0m] = {\n\e[31m\e[31m   |\e[0m                                              \
    \      ^\e[0m\n\e[31m   |\e[0m                                               \
    \   Found:    Unit\n\e[31m   |\e[0m                                          \
    \        Required: List[String]\n\e[31m17 |\e[0m        \e[34m// your code here\e\
    [0m\n\e[31m18 |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009982
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n      // your\
    \ implementation of this method goes here\n      List[String]()\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzzg2_q8l.scala:21)\n\tat Problem.main(tmpzzg2_q8l.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010019
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        return\
    \ arr.filter(x => x > 0 && x < 10).sortBy(x => x).reverse.map(x => {\n       \
    \     x match {\n                case 1 => \"One\"\n                case 2 =>\
    \ \"Two\"\n                case 3 => \"Three\"\n                case 4 => \"Four\"\
    \n                case 5 => \"Five\"\n                case 6 => \"Six\"\n    \
    \            case 7 => \"Seven\"\n                case 8 => \"Eight\"\n      \
    \          case 9 => \"Nine\"\n            }\n        })\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010020
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        if (arr.length\
    \ == 0) return arr.map(x => (\"\"))\n        val max = arr.reduce(math.max(_,\
    \ _))\n        val min = arr.reduce(math.min(_, _))\n        val res = if (max\
    \ > 10 || min < 1) arr.filter(x => (x >= 1 && x <= 9)) else arr\n        res.sorted.reverse.map(x\
    \ => {\n            x match {\n                case 1 => \"One\"\n           \
    \     case 2 => \"Two\"\n                case 3 => \"Three\"\n               \
    \ case 4 => \"Four\"\n                case 5 => \"Five\"\n                case\
    \ 6 => \"Six\"\n                case 7 => \"Seven\"\n                case 8 =>\
    \ \"Eight\"\n                case 9 => \"Nine\"\n                case _ => \"\"\
    \n            }\n        })\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n\
    \    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"\
    One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong,\
    \ 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong,\
    \ 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010019
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        // A map\
    \ of integers to their corresponding names\n        val digitMap = Map(1 -> \"\
    One\", 2 -> \"Two\", 3 -> \"Three\", 4 -> \"Four\", 5 -> \"Five\", 6 -> \"Six\"\
    , 7 -> \"Seven\", 8 -> \"Eight\", 9 -> \"Nine\")\n        // A map of integers\
    \ to their corresponding names\n        val digitMap2 = Array(\"One\", \"Two\"\
    , \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n  \
    \      // A list that contains numbers between 1 and 9 inclusive\n        val\
    \ validNumbers = List(1, 2, 3, 4, 5, 6, 7, 8, 9)\n        // This function checks\
    \ if the given number is in the validNumbers list\n        def isValidNumber(n\
    \ : Long) : Boolean = {\n            if (validNumbers.exists(x => x == n)) true\
    \ else false\n        }\n        // This function takes a digit and returns the\
    \ corresponding name of the number\n        def digitToName(n : Long) : String\
    \ = {\n            digitMap(n.toInt)\n        }\n        // This function takes\
    \ a digit and returns the corresponding name of the number\n        def digitToName2(n\
    \ : Long) : String = {\n            digitMap2(n.toInt - 1)\n        }\n      \
    \  // Takes a number and returns its digit to name representation\n        def\
    \ applyOnEachDigit(n : Long) : String = {\n            val str = n.toString\n\
    \            val strarr = str.toCharArray\n            var result = \"\"\n   \
    \         for (c <- strarr) {\n                val ci = c.toInt - 48\n       \
    \         if (isValidNumber(ci)) {\n                    result += digitToName(ci)\n\
    \                }\n            }\n            result\n        }\n        // This\
    \ function takes a number and returns its digit to name representation\n     \
    \   def applyOnEachDigit2(n : Long) : String = {\n            val str = n.toString\n\
    \            val strarr = str.toCharArray\n            var result = \"\"\n   \
    \         for (c <- strarr) {\n                val ci = c.toInt - 48\n       \
    \         if (isValidNumber(ci)) {\n                    result += digitToName2(ci)\n\
    \                }\n\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmplbnehsik.scala:69:0 ----------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplbnehsik.scala:68:1\
    \ ---------------------\e[0m\e[0m\n\e[31m68 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e\
    [0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m   |\e[0m Required: String\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[33m\e[33m-- Warning: /tmp/tmplbnehsik.scala:60:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m60 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n2 errors found\n"
  stdout: ''
  timestamp: 1660010019
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        arr.filter(x\
    \ => (x >= 1 && x <= 9)).sortWith(_ < _).reverse.map(x => (x match {\n       \
    \     case 1 => \"One\"\n            case 2 => \"Two\"\n            case 3 =>\
    \ \"Three\"\n            case 4 => \"Four\"\n            case 5 => \"Five\"\n\
    \            case 6 => \"Six\"\n            case 7 => \"Seven\"\n            case\
    \ 8 => \"Eight\"\n            case 9 => \"Nine\"\n        }))\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010020
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        var s\
    \ = List[String]()\n        for (i <- arr) {\n            if (i >= 1 && i <= 9)\
    \ {\n                s = s :+ (i + \"\").toString\n            }\n        }\n\
    \        s.sorted.reverse.map(i => i match {\n            case \"1\" => \"One\"\
    \n            case \"2\" => \"Two\"\n            case \"3\" => \"Three\"\n   \
    \         case \"4\" => \"Four\"\n            case \"5\" => \"Five\"\n       \
    \     case \"6\" => \"Six\"\n            case \"7\" => \"Seven\"\n           \
    \ case \"8\" => \"Eight\"\n            case \"9\" => \"Nine\"\n        })\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010020
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        def toWord(l\
    \ : Long) : String = l match {\n            case 1 => \"One\"\n            case\
    \ 2 => \"Two\"\n            case 3 => \"Three\"\n            case 4 => \"Four\"\
    \n            case 5 => \"Five\"\n            case 6 => \"Six\"\n            case\
    \ 7 => \"Seven\"\n            case 8 => \"Eight\"\n            case 9 => \"Nine\"\
    \n            case _ => \"Zero\"\n        }\n        arr.filter(a => a > 0 &&\
    \ a < 10).sorted.reverse.map(a => toWord(a))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n   \
    \ assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010021
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val map\
    \ = Map(\n            1 -> \"One\",\n            2 -> \"Two\",\n            3\
    \ -> \"Three\",\n            4 -> \"Four\",\n            5 -> \"Five\",\n    \
    \        6 -> \"Six\",\n            7 -> \"Seven\",\n            8 -> \"Eight\"\
    ,\n            9 -> \"Nine\"\n        )\n        val tmp = arr.filter(i => i >=\
    \ 1 && i <= 9).sorted\n        tmp.map(i => map(i.toInt)).reverse\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010021
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        arr.filter(e\
    \ => e > 0 && e < 10).map(e => e.toInt).sortWith(_ < _).reverse.map(e => e match\
    \ {\n          case 1 => \"One\"\n          case 2 => \"Two\"\n          case\
    \ 3 => \"Three\"\n          case 4 => \"Four\"\n          case 5 => \"Five\"\n\
    \          case 6 => \"Six\"\n          case 7 => \"Seven\"\n          case 8\
    \ => \"Eight\"\n          case 9 => \"Nine\"\n        })\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010020
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val nums\
    \ = arr.filter((x : Long) => x >= 1 && x <= 9)\n        if (nums.isEmpty) return\
    \ List()\n        val ans = nums.sorted.reverse.map((x : Long) => x match {\n\
    \                    case 1 => \"One\"\n                    case 2 => \"Two\"\n\
    \                    case 3 => \"Three\"\n                    case 4 => \"Four\"\
    \n                    case 5 => \"Five\"\n                    case 6 => \"Six\"\
    \n                    case 7 => \"Seven\"\n                    case 8 => \"Eight\"\
    \n                    case 9 => \"Nine\"\n                })\n        ans\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010021
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        // Fill\
    \ up this function body\n        // You may create other functions as you wish\n\
    \        // to organize your code.\n        // println(arr.filter(x => x >= 1\
    \ && x <= 9).sortWith(_ < _).reverse.toString)\n        // println(\"One\")\n\
    \        var str = List[String]()\n        if(arr.length != 0) {\n           \
    \ val lst = arr.filter(x => x >= 1 && x <= 9).sortWith(_ < _).reverse\n      \
    \      str = lst.map(x => {\n                if(x == 1) {\n                  \
    \  \"One\"\n                } else if(x == 2) {\n                    \"Two\"\n\
    \                } else if(x == 3) {\n                    \"Three\"\n        \
    \        } else if(x == 4) {\n                    \"Four\"\n                }\
    \ else if(x == 5) {\n                    \"Five\"\n                } else if(x\
    \ == 6) {\n                    \"Six\"\n                } else if(x == 7) {\n\
    \                    \"Seven\"\n                } else if(x == 8) {\n        \
    \            \"Eight\"\n                } else if(x == 9) {\n                \
    \    \"Nine\"\n                } else {\n                    \"\"\n          \
    \      }\n            })\n        }\n        str\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n   \
    \ assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010024
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        arr.filter(num\
    \ => num >= 1 && num <= 9).sorted.reverse.map(x => {\n            x match {\n\
    \                case 1 => \"One\"\n                case 2 => \"Two\"\n      \
    \          case 3 => \"Three\"\n                case 4 => \"Four\"\n         \
    \       case 5 => \"Five\"\n                case 6 => \"Six\"\n              \
    \  case 7 => \"Seven\"\n                case 8 => \"Eight\"\n                case\
    \ 9 => \"Nine\"\n            }\n        })\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n   \
    \ assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010024
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        // Solution\
    \ 1\n        // val sorted = arr.filter(x => x >= 1 && x <= 9).sortWith(_ < _)\n\
    \        // val reversed = sorted.reverse\n        // val m = Map(1l.toLong ->\
    \ \"One\", 2l.toLong -> \"Two\", 3l.toLong -> \"Three\", 4l.toLong -> \"Four\"\
    , 5l.toLong -> \"Five\", 6l.toLong -> \"Six\", 7l.toLong -> \"Seven\", 8l.toLong\
    \ -> \"Eight\", 9l.toLong -> \"Nine\")\n        // var res = List[String]()\n\
    \        // for (v <- reversed) res = res :+ m(v)\n        // res\n        //\
    \ Solution 2\n        val m = Map(1l.toLong -> \"One\", 2l.toLong -> \"Two\",\
    \ 3l.toLong -> \"Three\", 4l.toLong -> \"Four\", 5l.toLong -> \"Five\", 6l.toLong\
    \ -> \"Six\", 7l.toLong -> \"Seven\", 8l.toLong -> \"Eight\", 9l.toLong -> \"\
    Nine\")\n        arr.filter(x => x >= 1 && x <= 9).sortWith(_ < _).reverse.map(x\
    \ => m(x))\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010026
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        // your\
    \ code here\n        val lst = new ListBuffer[String]()\n        for (i <- arr)\
    \ {\n            if (i >= 1 && i <= 9) {\n                lst += i.toString\n\
    \            }\n        }\n        lst.toList.sorted.reverse.map(x => x match\
    \ {\n            case \"1\" => \"One\"\n            case \"2\" => \"Two\"\n  \
    \          case \"3\" => \"Three\"\n            case \"4\" => \"Four\"\n     \
    \       case \"5\" => \"Five\"\n            case \"6\" => \"Six\"\n          \
    \  case \"7\" => \"Seven\"\n            case \"8\" => \"Eight\"\n            case\
    \ \"9\" => \"Nine\"\n        })\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n\
    \    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"\
    One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong,\
    \ 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong,\
    \ 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010027
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        // Your\
    \ Code Here\n        return List[String]()\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n   \
    \ assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9hk91zji.scala:21)\n\tat Problem.main(tmp9hk91zji.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010027
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n    arr.filter(x\
    \ => x >= 1 && x <= 9).map(x => x.toString).sorted.reverse.map(x => returnDigit(x.toInt))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpeq_eiciq.scala:17:83 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m    arr.filter(\e[36mx\e[0m => x >= \e[31m1\e[0m && x\
    \ <= \e[31m9\e[0m).map(\e[36mx\e[0m => x.toString).sorted.reverse.map(\e[36mx\e\
    [0m => returnDigit(x.toInt))\n\e[31m\e[31m   |\e[0m                          \
    \                                                         ^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                                  Not found: returnDigit\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010024
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val map\
    \ = Map(1l.toLong -> \"One\", 2l.toLong -> \"Two\", 3l.toLong -> \"Three\", 4l.toLong\
    \ -> \"Four\", 5l.toLong -> \"Five\", 6l.toLong -> \"Six\", 7l.toLong -> \"Seven\"\
    , 8l.toLong -> \"Eight\", 9l.toLong -> \"Nine\")\n        val result = for (a\
    \ <- arr.filter(x => x >= 1 && x <= 9)) yield map(a)\n        result.sortWith(_.length\
    \ < _.length).reverse\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphak1fqwg.scala:22)\n\tat Problem.main(tmphak1fqwg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010028
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val l\
    \ = List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\",\
    \ \"Eight\", \"Nine\")\n        val res = ListBuffer[String]()\n        for (i\
    \ <- arr) {\n            if (i >= 1 && i <= 9) res += l(i.toInt - 1)\n       \
    \ }\n        res.toList.sortWith(_ < _).reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n   \
    \ assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfzomkw09.scala:25)\n\tat Problem.main(tmpfzomkw09.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010029
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        // Fill\
    \ up this function body\n        // You can add another function as well, if required\n\
    \        var temp : List[String] = List()\n        for (i <- arr.sorted) {\n \
    \           if (i > 0 && i < 10) {\n                temp = temp :+ i.toString\n\
    \            }\n        }\n        var temp2 : List[String] = List()\n       \
    \ for (i <- temp.reverse) {\n            i match {\n                case \"1\"\
    \ => temp2 = temp2 :+ \"One\"\n                case \"2\" => temp2 = temp2 :+\
    \ \"Two\"\n                case \"3\" => temp2 = temp2 :+ \"Three\"\n        \
    \        case \"4\" => temp2 = temp2 :+ \"Four\"\n                case \"5\" =>\
    \ temp2 = temp2 :+ \"Five\"\n                case \"6\" => temp2 = temp2 :+ \"\
    Six\"\n                case \"7\" => temp2 = temp2 :+ \"Seven\"\n            \
    \    case \"8\" => temp2 = temp2 :+ \"Eight\"\n                case \"9\" => temp2\
    \ = temp2 :+ \"Nine\"\n            }\n        }\n        temp2\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010030
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        // Write\
    \ your solution here\n        // val arr = List(1, 2, 3, 4, 5, 6, 7, 8, 9)\n \
    \       var filterArr = arr.filter(_ > 0)\n                            .filter(_\
    \ < 10)\n                            .sortWith(_ < _)\n                      \
    \      .map(v => v.toInt)\n                            .map(v => v match {\n \
    \                               case 1 => \"One\"\n                          \
    \      case 2 => \"Two\"\n                                case 3 => \"Three\"\n\
    \                                case 4 => \"Four\"\n                        \
    \        case 5 => \"Five\"\n                                case 6 => \"Six\"\
    \n                                case 7 => \"Seven\"\n                      \
    \          case 8 => \"Eight\"\n                                case 9 => \"Nine\"\
    \n                            })\n                            .reverse\n     \
    \   filterArr\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010029
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        arr.filter(v\
    \ => v >= 1 && v <= 9).sorted.reverse.map(v => {\n            if (v == 1) \"One\"\
    \n            else if (v == 2) \"Two\"\n            else if (v == 3) \"Three\"\
    \n            else if (v == 4) \"Four\"\n            else if (v == 5) \"Five\"\
    \n            else if (v == 6) \"Six\"\n            else if (v == 7) \"Seven\"\
    \n            else if (v == 8) \"Eight\"\n            else if (v == 9) \"Nine\"\
    \n            else \"\"\n        })\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n   \
    \ assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010030
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        arr.filter(i\
    \ => i > 0 && i < 10).sorted.reverse.map(i => i match {\n            case 1 =>\
    \ \"One\"\n            case 2 => \"Two\"\n            case 3 => \"Three\"\n  \
    \          case 4 => \"Four\"\n            case 5 => \"Five\"\n            case\
    \ 6 => \"Six\"\n            case 7 => \"Seven\"\n            case 8 => \"Eight\"\
    \n            case 9 => \"Nine\"\n        })\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n   \
    \ assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010030
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val numToWord\
    \ = List(\"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\")\n        var result = new ListBuffer[String]\n        for\
    \ (x <- arr) {\n            if (x >= 1 && x <= 9) result += numToWord(x.toInt)\n\
    \        }\n        result.toList.sortWith(_ < _).reverse\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnsvhv4ti.scala:25)\n\tat Problem.main(tmpnsvhv4ti.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010031
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        // Fill\
    \ up this function body\n        // You may also define new auxiliary functions\
    \ as needed\n        val m = Map(1l.toLong -> \"One\", 2l.toLong -> \"Two\", 3l.toLong\
    \ -> \"Three\", 4l.toLong -> \"Four\", 5l.toLong -> \"Five\", 6l.toLong -> \"\
    Six\", 7l.toLong -> \"Seven\", 8l.toLong -> \"Eight\", 9l.toLong -> \"Nine\")\n\
    \        val t = arr.filter(x => m.get(x) != None)\n        t.map(x => m.get(x).get).sorted.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_66imz4i.scala:24)\n\tat Problem.main(tmp_66imz4i.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010031
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        var ans\
    \ = new ListBuffer[String]()\n        for (i <- arr) {\n            if (i < 10\
    \ && i > 0) {\n                ans += i.toString()\n            }\n        }\n\
    \        ans.toList.sortWith(_ < _).reverse.map(s => {\n            if (s == \"\
    1\") \"One\"\n            else if (s == \"2\") \"Two\"\n            else if (s\
    \ == \"3\") \"Three\"\n            else if (s == \"4\") \"Four\"\n           \
    \ else if (s == \"5\") \"Five\"\n            else if (s == \"6\") \"Six\"\n  \
    \          else if (s == \"7\") \"Seven\"\n            else if (s == \"8\") \"\
    Eight\"\n            else if (s == \"9\") \"Nine\"\n            else s\n     \
    \   })\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010031
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        // your\
    \ code here\n        val list = ListBuffer[String]()\n        for (num <- arr)\
    \ {\n            if (num > 0 && num < 10) {\n                list += num.toString.charAt(0).toUpper\
    \ + num.toString.substring(1)\n            }\n        }\n        return list.sorted.reverse.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnabeko9a.scala:27)\n\tat Problem.main(tmpnabeko9a.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010031
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        // Fill\
    \ up this function body\n        // You can add another function as well, if required\n\
    \        def sortAsc(arr : List[Long]) : List[Long] = {\n            if (arr.length\
    \ < 2) arr\n            else {\n                val pivot = arr(arr.length / 2)\n\
    \                sortAsc(arr.filter(_ < pivot)) ::: arr.filter(_ == pivot) :::\
    \ sortAsc(arr.filter(_ > pivot))\n            }\n        }\n        def numToWord(x\
    \ : Long) : String = {\n            if (x == 1) \"One\"\n            else if (x\
    \ == 2) \"Two\"\n            else if (x == 3) \"Three\"\n            else if (x\
    \ == 4) \"Four\"\n            else if (x == 5) \"Five\"\n            else if (x\
    \ == 6) \"Six\"\n            else if (x == 7) \"Seven\"\n            else if (x\
    \ == 8) \"Eight\"\n            else if (x == 9) \"Nine\"\n            else \"\
    NaN\"\n        }\n        val arrSorted = sortAsc(arr.filter(x => x > 0 && x <\
    \ 10))\n        arrSorted.map(x => numToWord(x)).reverse\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010032
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        def toString(n\
    \ : Long) : String = {\n            n match {\n                case 1 => \"One\"\
    \n                case 2 => \"Two\"\n                case 3 => \"Three\"\n   \
    \             case 4 => \"Four\"\n                case 5 => \"Five\"\n       \
    \         case 6 => \"Six\"\n                case 7 => \"Seven\"\n           \
    \     case 8 => \"Eight\"\n                case 9 => \"Nine\"\n              \
    \  case _ => \"\"\n            }\n        }\n        val res = new ListBuffer[String]()\n\
    \        arr.foreach(x => if (x >= 1 && x <= 9) res += toString(x))\n        res.toList.sorted.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9z0cpyk0.scala:36)\n\tat Problem.main(tmp9z0cpyk0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010032
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val map\
    \ : Map[Long, String] = Map(1l.toLong -> \"One\", 2l.toLong -> \"Two\", 3l.toLong\
    \ -> \"Three\", 4l.toLong -> \"Four\", 5l.toLong -> \"Five\", 6l.toLong -> \"\
    Six\", 7l.toLong -> \"Seven\", 8l.toLong -> \"Eight\", 9l.toLong -> \"Nine\")\n\
    \        val result = ArrayBuffer[String]()\n        arr.filter(p => p >= 1 &&\
    \ p <= 9).sorted.reverse.foreach(i => result += map(i))\n        result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010032
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        var r\
    \ = List[String]()\n        for (i <- arr) {\n            if (i == 1) r = \"One\"\
    \ :: r\n            else if (i == 2) r = \"Two\" :: r\n            else if (i\
    \ == 3) r = \"Three\" :: r\n            else if (i == 4) r = \"Four\" :: r\n \
    \           else if (i == 5) r = \"Five\" :: r\n            else if (i == 6) r\
    \ = \"Six\" :: r\n            else if (i == 7) r = \"Seven\" :: r\n          \
    \  else if (i == 8) r = \"Eight\" :: r\n            else if (i == 9) r = \"Nine\"\
    \ :: r\n        }\n        r.reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n   \
    \ assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxs_y07oe.scala:32)\n\tat Problem.main(tmpxs_y07oe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010032
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        // Write\
    \ your code here\n        Nil\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n\
    \    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"\
    One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong,\
    \ 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong,\
    \ 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkt2on7wt.scala:21)\n\tat Problem.main(tmpkt2on7wt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010031
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        var list\
    \ = List[String]()\n        for (n <- arr) {\n            n match {\n        \
    \        case 1 => list = \"One\" :: list\n                case 2 => list = \"\
    Two\" :: list\n                case 3 => list = \"Three\" :: list\n          \
    \      case 4 => list = \"Four\" :: list\n                case 5 => list = \"\
    Five\" :: list\n                case 6 => list = \"Six\" :: list\n           \
    \     case 7 => list = \"Seven\" :: list\n                case 8 => list = \"\
    Eight\" :: list\n                case 9 => list = \"Nine\" :: list\n         \
    \       case _ =>\n            }\n        }\n        list.sorted.reverse\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6dymqgh6.scala:35)\n\tat Problem.main(tmp6dymqgh6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010032
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        var digitNames\
    \ = scala.collection.mutable.LinkedHashMap(1->\"One\", 2->\"Two\", 3->\"Three\"\
    , 4->\"Four\", 5->\"Five\", 6->\"Six\", 7->\"Seven\", 8->\"Eight\", 9->\"Nine\"\
    )\n        var digits = arr.filter(x => x >= 1 && x <= 9)\n        var names =\
    \ for (i <- digits) yield digitNames(i.toInt)\n        names.toList.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_njopgmf.scala:23)\n\tat Problem.main(tmp_njopgmf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010033
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        def valid(value\
    \ : Long) : Boolean = (value >= 1 && value <= 9)\n        def name(value : Long)\
    \ : String = value match {\n            case 1 => \"One\"\n            case 2\
    \ => \"Two\"\n            case 3 => \"Three\"\n            case 4 => \"Four\"\n\
    \            case 5 => \"Five\"\n            case 6 => \"Six\"\n            case\
    \ 7 => \"Seven\"\n            case 8 => \"Eight\"\n            case 9 => \"Nine\"\
    \n            case _ => \"\"\n        }\n        arr.filter(valid).sorted.reverse.map(name)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010036
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val stringMap\
    \ = Map(\n            1l.toLong -> \"One\",\n            2l.toLong -> \"Two\"\
    ,\n            3l.toLong -> \"Three\",\n            4l.toLong -> \"Four\",\n \
    \           5l.toLong -> \"Five\",\n            6l.toLong -> \"Six\",\n      \
    \      7l.toLong -> \"Seven\",\n            8l.toLong -> \"Eight\",\n        \
    \    9l.toLong -> \"Nine\"\n        )\n        val reverseSorted = arr.filter((x\
    \ : Long) => x >= 1 && x <= 9).sorted.reverse\n        reverseSorted.map((x :\
    \ Long) => stringMap(x))\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010037
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        var res\
    \ = arr.filter(x => x >= 1 && x <= 9).sorted(Ordering[Long].reverse).map(x =>\
    \ numberToString(x.toInt))\n        return res\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n   \
    \ assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpu9d2_wr5.scala:17:92 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mvar\e[0m \e[36mres\e[0m = arr.filter(\e\
    [36mx\e[0m => x >= \e[31m1\e[0m && x <= \e[31m9\e[0m).sorted(Ordering[\e[35mLong\e\
    [0m].reverse).map(\e[36mx\e[0m => numberToString(x.toInt))\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \                  ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \                         Not found: numberToString\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010032
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        arr.sortWith(_\
    \ < _).map {\n            case 1 => \"One\"\n            case 2 => \"Two\"\n \
    \           case 3 => \"Three\"\n            case 4 => \"Four\"\n            case\
    \ 5 => \"Five\"\n            case 6 => \"Six\"\n            case 7 => \"Seven\"\
    \n            case 8 => \"Eight\"\n            case 9 => \"Nine\"\n          \
    \  case _ => \"\"\n        }.filter(_ != \"\").reverse\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010038
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        arr.filter(x\
    \ => x > 0 && x < 10).sortWith(_ > _).map(x => x match {\n            case 1 =>\
    \ \"One\"\n            case 2 => \"Two\"\n            case 3 => \"Three\"\n  \
    \          case 4 => \"Four\"\n            case 5 => \"Five\"\n            case\
    \ 6 => \"Six\"\n            case 7 => \"Seven\"\n            case 8 => \"Eight\"\
    \n            case 9 => \"Nine\"\n        })\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n   \
    \ assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010039
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        arr.filter(x\
    \ => x >= 1 && x <= 9).sorted.reverse.map(x => x match {\n            case 1 =>\
    \ \"One\"\n            case 2 => \"Two\"\n            case 3 => \"Three\"\n  \
    \          case 4 => \"Four\"\n            case 5 => \"Five\"\n            case\
    \ 6 => \"Six\"\n            case 7 => \"Seven\"\n            case 8 => \"Eight\"\
    \n            case 9 => \"Nine\"\n        })\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n   \
    \ assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010038
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val range\
    \ = 1 to 9\n        val names = List(\"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")\n        val numbers = arr.filter(n\
    \ => range.contains(n.toInt)).sorted.reverse\n        numbers.map(n => names(n.toInt\
    \ - 1))\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010040
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val map\
    \ = Map[Long, String](1l.toLong -> \"One\", 2l.toLong -> \"Two\", 3l.toLong ->\
    \ \"Three\", 4l.toLong -> \"Four\", 5l.toLong -> \"Five\", 6l.toLong -> \"Six\"\
    , 7l.toLong -> \"Seven\", 8l.toLong -> \"Eight\", 9l.toLong -> \"Nine\")\n   \
    \     val wordList = ListBuffer[String]()\n        val numberList = ListBuffer[Long]()\n\
    \        for (i <- arr) {\n            if (i >= 1 && i <= 9) {\n             \
    \   numberList += i\n            }\n        }\n        numberList.sorted.reverse\n\
    \        for (i <- numberList) {\n            wordList += map(i)\n        }\n\
    \        wordList.toList\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxgfyskoh.scala:32)\n\tat Problem.main(tmpxgfyskoh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010041
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        // Fill\
    \ up this function body\n        // You can add another function as well, if required\n\
    \        def getNumber(num : Long) : String = {\n            num match {\n   \
    \             case 1 => \"One\"\n                case 2 => \"Two\"\n         \
    \       case 3 => \"Three\"\n                case 4 => \"Four\"\n            \
    \    case 5 => \"Five\"\n                case 6 => \"Six\"\n                case\
    \ 7 => \"Seven\"\n                case 8 => \"Eight\"\n                case 9\
    \ => \"Nine\"\n                case _ => \"\"\n            }\n        }\n    \
    \    def isValid(num : Long) : Boolean = {\n            if(num >= 1 && num <=\
    \ 9) true\n            else false\n        }\n        if(arr.length > 0) {\n \
    \           val validNums = for(num <- arr if isValid(num)) yield num\n      \
    \      val sortedNums = validNums.sorted\n            val revNums = sortedNums.reverse\n\
    \            val output = for(num <- revNums) yield getNumber(num)\n         \
    \   output\n        }\n        else List[String]()\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010041
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        // Implement\
    \ your solution here\n        val l = ListBuffer[String]()\n        arr.sorted.foreach(v\
    \ => if (v >= 1 && v <= 9) l += v.toString)\n        val l2 = ListBuffer[String]()\n\
    \        for (i <- l.size - 1 to 0 by -1) l2 += l(i)\n        val l3 = ListBuffer[String]()\n\
    \        for (i <- 0 until l2.size) {\n            l2(i) match {\n           \
    \     case \"1\" => l3 += \"One\"\n                case \"2\" => l3 += \"Two\"\
    \n                case \"3\" => l3 += \"Three\"\n                case \"4\" =>\
    \ l3 += \"Four\"\n                case \"5\" => l3 += \"Five\"\n             \
    \   case \"6\" => l3 += \"Six\"\n                case \"7\" => l3 += \"Seven\"\
    \n                case \"8\" => l3 += \"Eight\"\n                case \"9\" =>\
    \ l3 += \"Nine\"\n            }\n        }\n        l3.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010042
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        // Implement\
    \ this function\n        // Sort list to list sorted(from smallest to largest)\n\
    \        // Reverse list from list sorted to list reverse sorted(from largest\
    \ to smallest)\n        // If a element in list reverse sorted is invalid -> drop\
    \ it\n        // If a element in list reverse sorted is valid -> replace it by\
    \ its corresponding name\n        // Return the list\n        val arrSorted =\
    \ arr.sorted\n        val arrReverseSorted = arrSorted.reverse\n        val arrReverseSortedFiltered\
    \ = arrReverseSorted.filter(e => e > 0 && e < 10)\n        arrReverseSortedFiltered.map(e\
    \ => e match {\n            case 1 => \"One\"\n            case 2 => \"Two\"\n\
    \            case 3 => \"Three\"\n            case 4 => \"Four\"\n           \
    \ case 5 => \"Five\"\n            case 6 => \"Six\"\n            case 7 => \"\
    Seven\"\n            case 8 => \"Eight\"\n            case 9 => \"Nine\"\n   \
    \     })\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010042
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val dict\
    \ = Map(1L -> \"One\", 2L -> \"Two\", 3L -> \"Three\", 4L -> \"Four\", 5L -> \"\
    Five\", 6L -> \"Six\", 7L -> \"Seven\", 8L -> \"Eight\", 9L -> \"Nine\")\n   \
    \     val result = ListBuffer[String]()\n        for (element <- arr) {\n    \
    \        if (dict.contains(element)) result += dict(element)\n        }\n    \
    \    result.toList.sorted.reverse\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n   \
    \ assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpiglsi9p3.scala:25)\n\tat Problem.main(tmpiglsi9p3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010043
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val temp\
    \ = arr.filter(x => x >= 1 && x <= 9).sortWith(_ > _).map(x => x.toString).toList\n\
    \        temp.map(x => x match {\n            case \"1\" => \"One\"\n        \
    \    case \"2\" => \"Two\"\n            case \"3\" => \"Three\"\n            case\
    \ \"4\" => \"Four\"\n            case \"5\" => \"Five\"\n            case \"6\"\
    \ => \"Six\"\n            case \"7\" => \"Seven\"\n            case \"8\" => \"\
    Eight\"\n            case \"9\" => \"Nine\"\n        })\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010043
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        // This\
    \ method is implemented for you. Do not modify it.\n        var res = List[String]()\n\
    \        for (number <- arr) {\n            if (number > 0 && number < 10) {\n\
    \                res = number match {\n                    case 1l.toLong => \"\
    One\" :: res\n                    case 2l.toLong => \"Two\" :: res\n         \
    \           case 3l.toLong => \"Three\" :: res\n                    case 4l.toLong\
    \ => \"Four\" :: res\n                    case 5l.toLong => \"Five\" :: res\n\
    \                    case 6l.toLong => \"Six\" :: res\n                    case\
    \ 7l.toLong => \"Seven\" :: res\n                    case 8l.toLong => \"Eight\"\
    \ :: res\n                    case 9l.toLong => \"Nine\" :: res\n            \
    \    }\n            }\n        }\n        res.sortWith((x, y) => x < y)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpldkry0pd.scala:22:27 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                    \e[33mcase\e[0m \e[31m1l\e[0m.toLong\
    \ => \e[31m\"One\"\e[0m :: res\n\e[31m\e[31m   |\e[0m                        \
    \   ^\e[0m\n\e[31m   |\e[0m                           '=>' expected, but '.' found\n\
    \e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpldkry0pd.scala:23:27 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                    \e[33mcase\e[0m \e[31m2l\e[0m.toLong\
    \ => \e[31m\"Two\"\e[0m :: res\n\e[31m\e[31m   |\e[0m                        \
    \   ^\e[0m\n\e[31m   |\e[0m                           '=>' expected, but '.' found\n\
    \e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpldkry0pd.scala:24:27 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                    \e[33mcase\e[0m \e[31m3l\e[0m.toLong\
    \ => \e[31m\"Three\"\e[0m :: res\n\e[31m\e[31m   |\e[0m                      \
    \     ^\e[0m\n\e[31m   |\e[0m                           '=>' expected, but '.'\
    \ found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpldkry0pd.scala:25:27 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                    \e[33mcase\e[0m \e[31m4l\e[0m.toLong\
    \ => \e[31m\"Four\"\e[0m :: res\n\e[31m\e[31m   |\e[0m                       \
    \    ^\e[0m\n\e[31m   |\e[0m                           '=>' expected, but '.'\
    \ found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpldkry0pd.scala:26:27 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                    \e[33mcase\e[0m \e[31m5l\e[0m.toLong\
    \ => \e[31m\"Five\"\e[0m :: res\n\e[31m\e[31m   |\e[0m                       \
    \    ^\e[0m\n\e[31m   |\e[0m                           '=>' expected, but '.'\
    \ found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpldkry0pd.scala:27:27 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m                    \e[33mcase\e[0m \e[31m6l\e[0m.toLong\
    \ => \e[31m\"Six\"\e[0m :: res\n\e[31m\e[31m   |\e[0m                        \
    \   ^\e[0m\n\e[31m   |\e[0m                           '=>' expected, but '.' found\n\
    \e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpldkry0pd.scala:28:27 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m                    \e[33mcase\e[0m \e[31m7l\e[0m.toLong\
    \ => \e[31m\"Seven\"\e[0m"
  stdout: ''
  timestamp: 1660010038
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        // Your\
    \ Code Here\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9mds18d8.scala:16:52\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m    \e[33mdef\e[0m \e[36mbyLength\e\
    [0m(\e[36marr\e[0m : \e[35mList\e[0m[\e[35mLong\e[0m]) : \e[35mList\e[0m[\e[35mString\e\
    [0m] = {\n\e[31m\e[31m   |\e[0m                                              \
    \      ^\e[0m\n\e[31m   |\e[0m                                               \
    \   Found:    Unit\n\e[31m   |\e[0m                                          \
    \        Required: List[String]\n\e[31m17 |\e[0m        \e[34m// Your Code Here\e\
    [0m\n\e[31m18 |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010041
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n    }\n}\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0ml4efhp.scala:19:4 ----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    eof expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp0ml4efhp.scala:16:52 --------------------\e[0m\e[0m\n\e[31m16 |\e[0m\
    \    \e[33mdef\e[0m \e[36mbyLength\e[0m(\e[36marr\e[0m : \e[35mList\e[0m[\e[35mLong\e\
    [0m]) : \e[35mList\e[0m[\e[35mString\e[0m] = {\n\e[31m\e[31m   |\e[0m        \
    \                                            ^\e[0m\n\e[31m   |\e[0m         \
    \                                         Found:    Unit\n\e[31m   |\e[0m    \
    \                                              Required: List[String]\n\e[31m17\
    \ |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010041
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val map\
    \ = Map[Int, String](1 -> \"One\", 2 -> \"Two\", 3 -> \"Three\", 4 -> \"Four\"\
    , 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\", 9 -> \"Nine\")\n\
    \        arr.filter(_ <= 9).filter(_ >= 1).sorted.reverse.map(i => map(i.toInt))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010043
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        // your\
    \ code here\n        val range = 1 to 9\n        var numList = arr.filter(x =>\
    \ range.contains(x.toInt))\n        // numList.foreach(println)\n        var strList\
    \ = numList.map(x => x.toString)\n        // strList.foreach(println)\n      \
    \  var sortedList = strList.sorted\n        // sortedList.foreach(println)\n \
    \       var reversedList = sortedList.reverse\n        // reversedList.foreach(println)\n\
    \        var result = reversedList.map(x => x match {\n            case \"1\"\
    \ => \"One\"\n            case \"2\" => \"Two\"\n            case \"3\" => \"\
    Three\"\n            case \"4\" => \"Four\"\n            case \"5\" => \"Five\"\
    \n            case \"6\" => \"Six\"\n            case \"7\" => \"Seven\"\n   \
    \         case \"8\" => \"Eight\"\n            case \"9\" => \"Nine\"\n      \
    \  })\n        // result.foreach(println)\n        return result\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010044
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        return\
    \ List[String]()\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpecfvq_0_.scala:20)\n\tat Problem.main(tmpecfvq_0_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010043
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        // TODO\
    \ implement the function\n        var result = ListBuffer[String]()\n        arr.filter(_\
    \ > 0).filter(_ < 10).sorted.reverse.foreach(x => x match {\n            case\
    \ 1 => result += \"One\"\n            case 2 => result += \"Two\"\n          \
    \  case 3 => result += \"Three\"\n            case 4 => result += \"Four\"\n \
    \           case 5 => result += \"Five\"\n            case 6 => result += \"Six\"\
    \n            case 7 => result += \"Seven\"\n            case 8 => result += \"\
    Eight\"\n            case 9 => result += \"Nine\"\n        })\n        result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010044
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        var lst\
    \ = new ListBuffer[String]()\n        arr.sorted.reverse.foreach(x => if (x >=\
    \ 1 && x <= 9) lst += x.toString())\n        var result = new ListBuffer[String]()\n\
    \        for (i <- 0 until lst.length) {\n            lst(i) match {\n       \
    \         case \"1\" => result += \"One\"\n                case \"2\" => result\
    \ += \"Two\"\n                case \"3\" => result += \"Three\"\n            \
    \    case \"4\" => result += \"Four\"\n                case \"5\" => result +=\
    \ \"Five\"\n                case \"6\" => result += \"Six\"\n                case\
    \ \"7\" => result += \"Seven\"\n                case \"8\" => result += \"Eight\"\
    \n                case \"9\" => result += \"Nine\"\n            }\n        }\n\
    \        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010044
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        // This\
    \ solution is buggy\n        var list = new ListBuffer[Long]()\n        for (i\
    \ <- arr) {\n            if (i > 0 && i < 10) {\n                list += i\n \
    \           }\n        }\n        var new_list = list.sorted\n        var new_list2\
    \ = new_list.reverse\n        var new_list3 = new ListBuffer[String]()\n     \
    \   for (i <- new_list2) {\n            if (i == 1) {\n                new_list3\
    \ += \"One\"\n            }\n            else if (i == 2) {\n                new_list3\
    \ += \"Two\"\n            }\n            else if (i == 3) {\n                new_list3\
    \ += \"Three\"\n            }\n            else if (i == 4) {\n              \
    \  new_list3 += \"Four\"\n            }\n            else if (i == 5) {\n    \
    \            new_list3 += \"Five\"\n            }\n            else if (i == 6)\
    \ {\n                new_list3 += \"Six\"\n            }\n            else if\
    \ (i == 7) {\n                new_list3 += \"Seven\"\n            }\n        \
    \    else if (i == 8) {\n                new_list3 += \"Eight\"\n            }\n\
    \            else if (i == 9) {\n                new_list3 += \"Nine\"\n     \
    \       }\n        }\n        new_list3.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n   \
    \ assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010045
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        arr.filter((v\
    \ : Long) => v > 0 && v < 10).sortWith((v1 : Long, v2 : Long) => v1 < v2).reverse.map((v\
    \ : Long) => v match {\n            case 1 => \"One\"\n            case 2 => \"\
    Two\"\n            case 3 => \"Three\"\n            case 4 => \"Four\"\n     \
    \       case 5 => \"Five\"\n            case 6 => \"Six\"\n            case 7\
    \ => \"Seven\"\n            case 8 => \"Eight\"\n            case 9 => \"Nine\"\
    \n        })\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010043
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n    }\n}\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0ml4efhp.scala:19:4 ----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    eof expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp0ml4efhp.scala:16:52 --------------------\e[0m\e[0m\n\e[31m16 |\e[0m\
    \    \e[33mdef\e[0m \e[36mbyLength\e[0m(\e[36marr\e[0m : \e[35mList\e[0m[\e[35mLong\e\
    [0m]) : \e[35mList\e[0m[\e[35mString\e[0m] = {\n\e[31m\e[31m   |\e[0m        \
    \                                            ^\e[0m\n\e[31m   |\e[0m         \
    \                                         Found:    Unit\n\e[31m   |\e[0m    \
    \                                              Required: List[String]\n\e[31m17\
    \ |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010041
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        // Write\
    \ your code here, using the methods above\n        arr.filter(x => x >= 1 && x\
    \ <= 9).sorted.reverse.map(x => if (x == 1) \"One\" else if (x == 2) \"Two\" else\
    \ if (x == 3) \"Three\" else if (x == 4) \"Four\" else if (x == 5) \"Five\" else\
    \ if (x == 6) \"Six\" else if (x == 7) \"Seven\" else if (x == 8) \"Eight\" else\
    \ if (x == 9) \"Nine\" else \"\")\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n   \
    \ assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010045
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        // Compute\
    \ the result using the \"arr\" variable which contains the input\n        arr.sorted.filter(x\
    \ => x > 0 && x < 10).reverse.map(x => { if (x == 1) \"One\" else if (x == 2)\
    \ \"Two\" else if (x == 3) \"Three\" else if (x == 4) \"Four\" else if (x == 5)\
    \ \"Five\" else if (x == 6) \"Six\" else if (x == 7) \"Seven\" else if (x == 8)\
    \ \"Eight\" else if (x == 9) \"Nine\" else \"\" })\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010049
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        var a\
    \ = arr.filter(x => x > 0 && x < 10)\n        a = a.sorted\n        a = a.reverse\n\
    \        a = a.map(x => x match {\n                    case 1 => \"One\"\n   \
    \                 case 2 => \"Two\"\n                    case 3 => \"Three\"\n\
    \                    case 4 => \"Four\"\n                    case 5 => \"Five\"\
    \n                    case 6 => \"Six\"\n                    case 7 => \"Seven\"\
    \n                    case 8 => \"Eight\"\n                    case 9 => \"Nine\"\
    \n                })\n        return a\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n   \
    \ assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpeaoj8ku2.scala:21:30\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m                    \e[33mcase\e\
    [0m \e[31m1\e[0m => \e[31m\"One\"\e[0m\n\e[31m\e[31m   |\e[0m                \
    \              ^^^^^\e[0m\n\e[31m   |\e[0m                              Found:\
    \    (\e[32m\"One\"\e[0m : String)\n\e[31m   |\e[0m                          \
    \    Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpeaoj8ku2.scala:22:30\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m                    \e[33mcase\e\
    [0m \e[31m2\e[0m => \e[31m\"Two\"\e[0m\n\e[31m\e[31m   |\e[0m                \
    \              ^^^^^\e[0m\n\e[31m   |\e[0m                              Found:\
    \    (\e[32m\"Two\"\e[0m : String)\n\e[31m   |\e[0m                          \
    \    Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpeaoj8ku2.scala:23:30\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m                    \e[33mcase\e\
    [0m \e[31m3\e[0m => \e[31m\"Three\"\e[0m\n\e[31m\e[31m   |\e[0m              \
    \                ^^^^^^^\e[0m\n\e[31m   |\e[0m                              Found:\
    \    (\e[32m\"Three\"\e[0m : String)\n\e[31m   |\e[0m                        \
    \      Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpeaoj8ku2.scala:24:30\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m                    \e[33mcase\e\
    [0m \e[31m4\e[0m => \e[31m\"Four\"\e[0m\n\e[31m\e[31m   |\e[0m               \
    \               ^^^^^^\e[0m\n\e[31m   |\e[0m                              Found:\
    \    (\e[32m\"Four\"\e[0m : String)\n\e[31m   |\e[0m                         \
    \     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpeaoj8ku2.scala:25:30\
    \ --------------------\e[0m\e[0m\n\e[31m25 |\e[0m                    \e[33mcase\e\
    [0m \e[31m5\e[0m => \e[31m\"Five\"\e[0m\n\e[31m\e[31m   |\e[0m             "
  stdout: ''
  timestamp: 1660010048
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val nums\
    \ = arr.filter(x => x >= 1 && x <= 9).sorted.reverse\n        val nums2Strings\
    \ = nums.map(x => x match {\n            case 1 => \"One\"\n            case 2\
    \ => \"Two\"\n            case 3 => \"Three\"\n            case 4 => \"Four\"\n\
    \            case 5 => \"Five\"\n            case 6 => \"Six\"\n            case\
    \ 7 => \"Seven\"\n            case 8 => \"Eight\"\n            case 9 => \"Nine\"\
    \n        })\n        nums2Strings\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n   \
    \ assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010051
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        arr.filter(x\
    \ => x >= 1 && x <= 9).sortWith(_ > _).map(x => x match {\n            case 1\
    \ => \"One\"\n            case 2 => \"Two\"\n            case 3 => \"Three\"\n\
    \            case 4 => \"Four\"\n            case 5 => \"Five\"\n            case\
    \ 6 => \"Six\"\n            case 7 => \"Seven\"\n            case 8 => \"Eight\"\
    \n            case 9 => \"Nine\"\n        })\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n   \
    \ assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        arr.sorted.reverse.map(num\
    \ => num match {\n            case 1l.toLong => \"One\"\n            case 2l.toLong\
    \ => \"Two\"\n            case 3l.toLong => \"Three\"\n            case 4l.toLong\
    \ => \"Four\"\n            case 5l.toLong => \"Five\"\n            case 6l.toLong\
    \ => \"Six\"\n            case 7l.toLong => \"Seven\"\n            case 8l.toLong\
    \ => \"Eight\"\n            case 9l.toLong => \"Nine\"\n            case _ =>\
    \ \"\"\n        }).filter(x => x != \"\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n   \
    \ assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp6j17okgh.scala:18:19 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mcase\e[0m \e[31m1l\e[0m.toLong => \e\
    [31m\"One\"\e[0m\n\e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e\
    [0m                   '=>' expected, but '.' found\n\e[31m\e[31m-- [E040] Syntax\
    \ Error: /tmp/tmp6j17okgh.scala:19:19 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m            \e[33mcase\e[0m \e[31m2l\e[0m.toLong => \e[31m\"Two\"\
    \e[0m\n\e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m       \
    \            '=>' expected, but '.' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmp6j17okgh.scala:20:19 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m            \e[33mcase\e[0m \e[31m3l\e[0m.toLong => \e[31m\"Three\"\e\
    [0m\n\e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m         \
    \          '=>' expected, but '.' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp6j17okgh.scala:21:19\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m            \e[33mcase\e\
    [0m \e[31m4l\e[0m.toLong => \e[31m\"Four\"\e[0m\n\e[31m\e[31m   |\e[0m       \
    \            ^\e[0m\n\e[31m   |\e[0m                   '=>' expected, but '.'\
    \ found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp6j17okgh.scala:22:19 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mcase\e[0m \e[31m5l\e[0m.toLong => \e\
    [31m\"Five\"\e[0m\n\e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e\
    [0m                   '=>' expected, but '.' found\n\e[31m\e[31m-- [E040] Syntax\
    \ Error: /tmp/tmp6j17okgh.scala:23:19 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m            \e[33mcase\e[0m \e[31m6l\e[0m.toLong => \e[31m\"Six\"\
    \e[0m\n\e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m       \
    \            '=>' expected, but '.' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmp6j17okgh.scala:24:19 ---------------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m            \e[33mcase\e[0m \e[31m7l\e[0m.toLong => \e[31m\"Seven\"\e\
    [0m\n\e[31m\e[31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m         \
    \          '=>' expected, but '.' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp6j17okgh.scala:25:19\
    \ --------------------------"
  stdout: ''
  timestamp: 1660010046
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        // Fill\
    \ up this function body\n        // You may also define new function(s) to structure\
    \ your code\n        val dict = Map(1 -> \"One\", 2 -> \"Two\", 3 -> \"Three\"\
    , 4 -> \"Four\", 5 -> \"Five\", 6 -> \"Six\", 7 -> \"Seven\", 8 -> \"Eight\",\
    \ 9 -> \"Nine\")\n        val valid_numbers = arr.filter(x => x >= 1 && x <= 9)\n\
    \        valid_numbers.sortWith(_ < _).reverse.map(x => dict(x.toInt))\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010051
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        // Fill\
    \ up this function body\n        // You can add another function as well, if required\n\
    \        arr.map(x => (x, x.toString)).filter(x => x._1 >= 1 && x._1 <= 9).sortBy(x\
    \ => x._1).reverse.map(x => x._2).map(x => x match {\n            case \"1\" =>\
    \ \"One\"\n            case \"2\" => \"Two\"\n            case \"3\" => \"Three\"\
    \n            case \"4\" => \"Four\"\n            case \"5\" => \"Five\"\n   \
    \         case \"6\" => \"Six\"\n            case \"7\" => \"Seven\"\n       \
    \     case \"8\" => \"Eight\"\n            case \"9\" => \"Nine\"\n        })\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010052
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        var list\
    \ = new ListBuffer[String]\n        for (i <- arr) {\n            i match {\n\
    \                case 1 => list += \"One\"\n                case 2 => list +=\
    \ \"Two\"\n                case 3 => list += \"Three\"\n                case 4\
    \ => list += \"Four\"\n                case 5 => list += \"Five\"\n          \
    \      case 6 => list += \"Six\"\n                case 7 => list += \"Seven\"\n\
    \                case 8 => list += \"Eight\"\n                case 9 => list +=\
    \ \"Nine\"\n                case _ =>\n            }\n        }\n        list.toList.sortWith((a,\
    \ b) => a.length < b.length).reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n   \
    \ assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprvol9tu2.scala:35)\n\tat Problem.main(tmprvol9tu2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010051
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val temp\
    \ = arr.filter(x => (x > 0 && x < 10)).sortWith(_ > _).map(x => x.toString).mkString(\"\
    \ \")\n        temp.split(\" \").map(x => x match {\n            case \"1\" =>\
    \ \"One\"\n            case \"2\" => \"Two\"\n            case \"3\" => \"Three\"\
    \n            case \"4\" => \"Four\"\n            case \"5\" => \"Five\"\n   \
    \         case \"6\" => \"Six\"\n            case \"7\" => \"Seven\"\n       \
    \     case \"8\" => \"Eight\"\n            case \"9\" => \"Nine\"\n        }).toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.byLength$$anonfun$1(tmpbsphhvmo.scala:27)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.byLength(tmpbsphhvmo.scala:28)\n\
    \tat Problem$.main(tmpbsphhvmo.scala:32)\n\tat Problem.main(tmpbsphhvmo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010053
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n    }\n}\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0ml4efhp.scala:19:4 ----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    eof expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp0ml4efhp.scala:16:52 --------------------\e[0m\e[0m\n\e[31m16 |\e[0m\
    \    \e[33mdef\e[0m \e[36mbyLength\e[0m(\e[36marr\e[0m : \e[35mList\e[0m[\e[35mLong\e\
    [0m]) : \e[35mList\e[0m[\e[35mString\e[0m] = {\n\e[31m\e[31m   |\e[0m        \
    \                                            ^\e[0m\n\e[31m   |\e[0m         \
    \                                         Found:    Unit\n\e[31m   |\e[0m    \
    \                                              Required: List[String]\n\e[31m17\
    \ |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010041
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        // Fill\
    \ up this function body\n        // You can add another function as well, if required\n\
    \        var result = List[String]()\n        var length = arr.length\n      \
    \  for (i <- 0 until length) {\n            if (arr(i) < 10) {\n             \
    \   var s = arr(i).toString()\n                switch(s) {\n                 \
    \   case \"1\" => result = \"One\" :: result\n                    case \"2\" =>\
    \ result = \"Two\" :: result\n                    case \"3\" => result = \"Three\"\
    \ :: result\n                    case \"4\" => result = \"Four\" :: result\n \
    \                   case \"5\" => result = \"Five\" :: result\n              \
    \      case \"6\" => result = \"Six\" :: result\n                    case \"7\"\
    \ => result = \"Seven\" :: result\n                    case \"8\" => result =\
    \ \"Eight\" :: result\n                    case \"9\" => result = \"Nine\" ::\
    \ result\n                }\n            }\n        }\n        result\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpx59129en.scala:24:16 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                switch(s) {\n\e[31m\e[31m   |\e[0m  \
    \              ^^^^^^\e[0m\n\e[31m   |\e[0m                Not found: switch\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010048
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        //implement\
    \ your solution here\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsbmwd_xt.scala:16:52\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m    \e[33mdef\e[0m \e[36mbyLength\e\
    [0m(\e[36marr\e[0m : \e[35mList\e[0m[\e[35mLong\e[0m]) : \e[35mList\e[0m[\e[35mString\e\
    [0m] = {\n\e[31m\e[31m   |\e[0m                                              \
    \      ^\e[0m\n\e[31m   |\e[0m                                               \
    \   Found:    Unit\n\e[31m   |\e[0m                                          \
    \        Required: List[String]\n\e[31m17 |\e[0m        \e[34m//implement your\
    \ solution here\e[0m\n\e[31m18 |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        for (x\
    \ <- arr) {\n            if (x < 1 || x > 9) {\n                arr.remove(x)\n\
    \            }\n        }\n        val list = arr.sorted\n        val reverseList\
    \ = list.reverse\n        return reverseList.map(x => x match {\n            case\
    \ 1 => \"One\"\n            case 2 => \"Two\"\n            case 3 => \"Three\"\
    \n            case 4 => \"Four\"\n            case 5 => \"Five\"\n           \
    \ case 6 => \"Six\"\n            case 7 => \"Seven\"\n            case 8 => \"\
    Eight\"\n            case 9 => \"Nine\"\n        })\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpk72lg5b7.scala:19:20 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                arr.remove(x)\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   value remove is not a member\
    \ of List[Long] - did you mean arr.reduce?\n1 error found\n"
  stdout: ''
  timestamp: 1660010051
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val oneToNine\
    \ = (1 to 9).toList.map(x => x.toLong)\n        // Assume that the list has a\
    \ size of 3.\n        // If we have numbers that are between 1 and 9 inclusive,\
    \ we will have:\n        // (1, 2, 3, 1, 2, 3, 1, 2, 3)\n        // Now we want\
    \ to create a list with three times the size of our original list,\n        //\
    \ with the numbers having the same relative positions.\n        // The result\
    \ of the previous list will be:\n        // (1, 1, 1, 2, 2, 2, 3, 3, 3)\n    \
    \    // The first 9 elements will be the numbers having the relative position\
    \ of 0,\n        // the next 9 will be the numbers having the relative position\
    \ of 1,\n        // and so on.\n        // We can do this by multiplying the original\
    \ list by the size of the original list\n        // and then by zipping the result\
    \ with a list containing the indexes from 0 to the size of the original list\n\
    \        // and by computing the modulo between the number and the size of the\
    \ original list.\n        // We also sort the list in ascending order.\n     \
    \   val sorted = arr.filter(x => oneToNine.contains(x)).sorted\n        val size\
    \ = sorted.size\n        val multiplied = sorted.flatMap(x => List.fill(size)(x))\n\
    \        val withIndexes = multiplied.zipWithIndex\n        val filtered = withIndexes.filter(x\
    \ => (x._2 % size) == (sorted.indexOf(x._1) % size))\n        val result = filtered.map(x\
    \ => x._1).reverse\n        result.map(x => {\n            x match {\n       \
    \         case 1 => \"One\"\n                case 2 => \"Two\"\n             \
    \   case 3 => \"Three\"\n                case 4 => \"Four\"\n                case\
    \ 5 => \"Five\"\n                case 6 => \"Six\"\n                case 7 =>\
    \ \"Seven\"\n                case 8 => \"Eight\"\n                case 9 => \"\
    Nine\"\n            }\n        })\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n   \
    \ assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010054
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        var myMap\
    \ = Map[Long, String]()\n        myMap += (1l.toLong -> \"One\")\n        myMap\
    \ += (2l.toLong -> \"Two\")\n        myMap += (3l.toLong -> \"Three\")\n     \
    \   myMap += (4l.toLong -> \"Four\")\n        myMap += (5l.toLong -> \"Five\"\
    )\n        myMap += (6l.toLong -> \"Six\")\n        myMap += (7l.toLong -> \"\
    Seven\")\n        myMap += (8l.toLong -> \"Eight\")\n        myMap += (9l.toLong\
    \ -> \"Nine\")\n        var myList = List[String]()\n        for (i <- arr) {\n\
    \            if (myMap.contains(i)) myList ::= myMap(i)\n        }\n        myList.sortWith(_.length\
    \ < _.length).reverse\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdvyncy0y.scala:34)\n\tat Problem.main(tmpdvyncy0y.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010055
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        // Your\
    \ code here\n        arr.filter(e => e >= 1 && e <= 9).sortWith(_ > _).map(e =>\n\
    \            e match {\n                case 1 => \"One\"\n                case\
    \ 2 => \"Two\"\n                case 3 => \"Three\"\n                case 4 =>\
    \ \"Four\"\n                case 5 => \"Five\"\n                case 6 => \"Six\"\
    \n                case 7 => \"Seven\"\n                case 8 => \"Eight\"\n \
    \               case 9 => \"Nine\"\n            }\n        )\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010054
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        // your\
    \ code here\n        List[String](\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\").sortWith(_.length < _.length).reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp25l2q394.scala:21)\n\tat Problem.main(tmp25l2q394.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010054
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        var result\
    \ = List[String]()\n        var map = Map[Int, String]()\n        map += (1 ->\
    \ \"One\")\n        map += (2 -> \"Two\")\n        map += (3 -> \"Three\")\n \
    \       map += (4 -> \"Four\")\n        map += (5 -> \"Five\")\n        map +=\
    \ (6 -> \"Six\")\n        map += (7 -> \"Seven\")\n        map += (8 -> \"Eight\"\
    )\n        map += (9 -> \"Nine\")\n        arr.foreach(x => if (x >= 1 && x <=\
    \ 9) result = result :+ map(x.toInt))\n        result.sorted.reverse\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv00dp06g.scala:32)\n\tat Problem.main(tmpv00dp06g.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010055
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        // if\
    \ the list is empty, then just return an empty list\n        if (arr.isEmpty)\n\
    \            return List[String]()\n        // filter out everything that is not\
    \ between 1 and 9 inclusive\n        val filtered = arr.filter((x : Long) => x\
    \ >= 1 && x <= 9)\n        // sort the list, and then reverse it\n        val\
    \ sortedAndReversed = filtered.sorted.reverse\n        // convert each digit in\
    \ the list to its corresponding name\n        sortedAndReversed.map((x : Long)\
    \ => x match {\n            case 1 => \"One\"\n            case 2 => \"Two\"\n\
    \            case 3 => \"Three\"\n            case 4 => \"Four\"\n           \
    \ case 5 => \"Five\"\n            case 6 => \"Six\"\n            case 7 => \"\
    Seven\"\n            case 8 => \"Eight\"\n            case 9 => \"Nine\"\n   \
    \     })\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010056
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val sarr\
    \ = arr.filter(i => i >= 1 && i <= 9).sortBy(i => i).reverse.map(i => i.toString)\n\
    \        for (i <- 0 until sarr.length) {\n            sarr(i) = sarr(i) match\
    \ {\n                case \"1\" => \"One\"\n                case \"2\" => \"Two\"\
    \n                case \"3\" => \"Three\"\n                case \"4\" => \"Four\"\
    \n                case \"5\" => \"Five\"\n                case \"6\" => \"Six\"\
    \n                case \"7\" => \"Seven\"\n                case \"8\" => \"Eight\"\
    \n                case \"9\" => \"Nine\"\n            }\n        }\n        sarr\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmplrmo0oea.scala:19:12 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            sarr(i) = sarr(i) \e[33mmatch\e[0m {\n\e\
    [31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0mvalue update is not a\
    \ member of List[String] - did you mean sarr.updated?\n1 error found\n"
  stdout: ''
  timestamp: 1660010055
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        // the\
    \ issue here is that it is sorting the list, but\n        // I would rather maintain\
    \ the original ordering of the list\n        // but just add the words in the\
    \ correct place.\n        var output = ListBuffer[String]()\n        var sorted\
    \ = arr.sorted\n        var position = 0\n        for (i <- sorted) {\n      \
    \      if (i == 1) {\n                output.insert(position, \"One\")\n     \
    \           position += 1\n            }\n            else if (i == 2) {\n   \
    \             output.insert(position, \"Two\")\n                position += 1\n\
    \            }\n            else if (i == 3) {\n                output.insert(position,\
    \ \"Three\")\n                position += 1\n            }\n            else if\
    \ (i == 4) {\n                output.insert(position, \"Four\")\n            \
    \    position += 1\n            }\n            else if (i == 5) {\n          \
    \      output.insert(position, \"Five\")\n                position += 1\n    \
    \        }\n            else if (i == 6) {\n                output.insert(position,\
    \ \"Six\")\n                position += 1\n            }\n            else if\
    \ (i == 7) {\n                output.insert(position, \"Seven\")\n           \
    \     position += 1\n            }\n            else if (i == 8) {\n         \
    \       output.insert(position, \"Eight\")\n                position += 1\n  \
    \          }\n            else if (i == 9) {\n                output.insert(position,\
    \ \"Nine\")\n                position += 1\n            }\n        }\n       \
    \ output.toList\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1b5sb0yj.scala:64)\n\tat Problem.main(tmp1b5sb0yj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010056
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        // We\
    \ are going to use stream. It's a lazy implementation.\n        val list = arr.filter(x\
    \ => (x > 0 && x < 10)).sorted.toStream.reverse.map(x => x match {\n         \
    \   case 1 => \"One\"\n            case 2 => \"Two\"\n            case 3 => \"\
    Three\"\n            case 4 => \"Four\"\n            case 5 => \"Five\"\n    \
    \        case 6 => \"Six\"\n            case 7 => \"Seven\"\n            case\
    \ 8 => \"Eight\"\n            case 9 => \"Nine\"\n            case _ => \"Unknown\"\
    \n        })\n        list.toList\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n   \
    \ assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010056
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val d\
    \ = Array(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\")\n        val list = arr.filter(e => e <= 9 && e >= 1).sorted.reverse.map(e\
    \ => d(e.toInt - 1))\n        return list\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n   \
    \ assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010056
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        // Fill\
    \ up this function body\n        // You may also define new functions as you wish\n\
    \        arr.filter(x => x > 0 && x < 10).sorted.reverse.map(x => x match {\n\
    \            case 1 => \"One\"\n            case 2 => \"Two\"\n            case\
    \ 3 => \"Three\"\n            case 4 => \"Four\"\n            case 5 => \"Five\"\
    \n            case 6 => \"Six\"\n            case 7 => \"Seven\"\n           \
    \ case 8 => \"Eight\"\n            case 9 => \"Nine\"\n        })\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010058
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val r\
    \ = for (x <- arr if x >= 1 && x <= 9) yield x\n        val reverse = r.sorted.reverse\n\
    \        val s = for (x <- reverse) yield (x match {\n            case 1 => \"\
    One\"\n            case 2 => \"Two\"\n            case 3 => \"Three\"\n      \
    \      case 4 => \"Four\"\n            case 5 => \"Five\"\n            case 6\
    \ => \"Six\"\n            case 7 => \"Seven\"\n            case 8 => \"Eight\"\
    \n            case 9 => \"Nine\"\n        })\n        s\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010058
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n      val toStr\
    \ : List[String] = arr.filter(_ > 0).filter(_ < 10).sorted.reverse.map(_.toString)\n\
    \      toStr.map(x => x match {\n        case \"1\" => \"One\"\n        case \"\
    2\" => \"Two\"\n        case \"3\" => \"Three\"\n        case \"4\" => \"Four\"\
    \n        case \"5\" => \"Five\"\n        case \"6\" => \"Six\"\n        case\
    \ \"7\" => \"Seven\"\n        case \"8\" => \"Eight\"\n        case \"9\" => \"\
    Nine\"\n      })\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010060
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val temp\
    \ = for (a <- arr if a > 0 && a < 10) yield a\n        val result = temp.toArray.sortWith(_\
    \ > _).toList\n        for (i <- result) yield i match {\n            case 1 =>\
    \ \"One\"\n            case 2 => \"Two\"\n            case 3 => \"Three\"\n  \
    \          case 4 => \"Four\"\n            case 5 => \"Five\"\n            case\
    \ 6 => \"Six\"\n            case 7 => \"Seven\"\n            case 8 => \"Eight\"\
    \n            case 9 => \"Nine\"\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n   \
    \ assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010061
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        return\
    \ arr.filter(x => x <= 9 && x >= 1).sorted.reverse.map(x => x match {\n      \
    \      case 1 => \"One\"\n            case 2 => \"Two\"\n            case 3 =>\
    \ \"Three\"\n            case 4 => \"Four\"\n            case 5 => \"Five\"\n\
    \            case 6 => \"Six\"\n            case 7 => \"Seven\"\n            case\
    \ 8 => \"Eight\"\n            case 9 => \"Nine\"\n        })\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010061
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        // This\
    \ is working properly, not sure why it's not compiling\n        arr.sorted.reverse.filter(n\
    \ => (n > 0 && n < 10)).map(n => n match {\n            case 1 => \"One\"\n  \
    \          case 2 => \"Two\"\n            case 3 => \"Three\"\n            case\
    \ 4 => \"Four\"\n            case 5 => \"Five\"\n            case 6 => \"Six\"\
    \n            case 7 => \"Seven\"\n            case 8 => \"Eight\"\n         \
    \   case 9 => \"Nine\"\n        })\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n   \
    \ assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010062
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val nums\
    \ = arr.filter((e : Long) => e > 0 && e < 10)\n        val strs = nums.sorted.reverse.map(\n\
    \            (e : Long) => {\n                e match {\n                    case\
    \ 1 => \"One\"\n                    case 2 => \"Two\"\n                    case\
    \ 3 => \"Three\"\n                    case 4 => \"Four\"\n                   \
    \ case 5 => \"Five\"\n                    case 6 => \"Six\"\n                \
    \    case 7 => \"Seven\"\n                    case 8 => \"Eight\"\n          \
    \          case 9 => \"Nine\"\n                }\n            }\n        )\n \
    \       strs\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010062
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        //Fill\
    \ Up this function body\n        // `arr` is a `List[Long]`\n        // `temp`\
    \ is a `List[Long]`\n        // `temp1` is a `List[String]`\n        // `temp2`\
    \ is a `List[String]`\n        var temp : List[Long] = List()\n        for (i\
    \ <- arr) {\n            if (i>=1 && i<=9) {\n                temp = temp :+ i\n\
    \            }\n        }\n        temp = temp.sorted\n        var temp1 : List[String]\
    \ = List()\n        for (i <- temp) {\n            if (i == 1) {\n           \
    \     temp1 = temp1 :+ \"One\"\n            }\n            else if (i == 2) {\n\
    \                temp1 = temp1 :+ \"Two\"\n            }\n            else if\
    \ (i == 3) {\n                temp1 = temp1 :+ \"Three\"\n            }\n    \
    \        else if (i == 4) {\n                temp1 = temp1 :+ \"Four\"\n     \
    \       }\n            else if (i == 5) {\n                temp1 = temp1 :+ \"\
    Five\"\n            }\n            else if (i == 6) {\n                temp1 =\
    \ temp1 :+ \"Six\"\n            }\n            else if (i == 7) {\n          \
    \      temp1 = temp1 :+ \"Seven\"\n            }\n            else if (i == 8)\
    \ {\n                temp1 = temp1 :+ \"Eight\"\n            }\n            else\
    \ if (i == 9) {\n                temp1 = temp1 :+ \"Nine\"\n            }\n  \
    \      }\n        var temp2 : List[String] = List()\n        for (i <- temp1.reverse)\
    \ {\n            temp2 = temp2 :+ i\n        }\n        temp2\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010063
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n      //Complete\
    \ your implementation here.\n      val One = \"One\"\n      val Two = \"Two\"\n\
    \      val Three = \"Three\"\n      val Four = \"Four\"\n      val Five = \"Five\"\
    \n      val Six = \"Six\"\n      val Seven = \"Seven\"\n      val Eight = \"Eight\"\
    \n      val Nine = \"Nine\"\n      def NameToString(l: List[Long]): List[String]\
    \ = l match {\n        case Nil => Nil\n        case 1l.toLong :: t => One ::\
    \ NameToString(t)\n        case 2l.toLong :: t => Two :: NameToString(t)\n   \
    \     case 3l.toLong :: t => Three :: NameToString(t)\n        case 4l.toLong\
    \ :: t => Four :: NameToString(t)\n        case 5l.toLong :: t => Five :: NameToString(t)\n\
    \        case 6l.toLong :: t => Six :: NameToString(t)\n        case 7l.toLong\
    \ :: t => Seven :: NameToString(t)\n        case 8l.toLong :: t => Eight :: NameToString(t)\n\
    \        case 9l.toLong :: t => Nine :: NameToString(t)\n        case _ :: t =>\
    \ NameToString(t)\n      }\n      NameToString(arr.filter(_ >= 1l.toLong).filter(_\
    \ <= 9l.toLong).sorted.reverse)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n\
    \    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"\
    One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong,\
    \ 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong,\
    \ 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp55gh93jj.scala:29:15 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mcase\e[0m \e[31m1l\e[0m.toLong :: t =>\
    \ One :: NameToString(t)\n\e[31m\e[31m   |\e[0m               ^\e[0m\n\e[31m \
    \  |\e[0m               '=>' expected, but '.' found\n\e[31m\e[31m-- [E040] Syntax\
    \ Error: /tmp/tmp55gh93jj.scala:30:15 ---------------------------\e[0m\e[0m\n\e\
    [31m30 |\e[0m        \e[33mcase\e[0m \e[31m2l\e[0m.toLong :: t => Two :: NameToString(t)\n\
    \e[31m\e[31m   |\e[0m               ^\e[0m\n\e[31m   |\e[0m               '=>'\
    \ expected, but '.' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp55gh93jj.scala:31:15\
    \ ---------------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mcase\e[0m\
    \ \e[31m3l\e[0m.toLong :: t => Three :: NameToString(t)\n\e[31m\e[31m   |\e[0m\
    \               ^\e[0m\n\e[31m   |\e[0m               '=>' expected, but '.' found\n\
    \e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp55gh93jj.scala:32:15 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mcase\e[0m \e[31m4l\e[0m.toLong :: t =>\
    \ Four :: NameToString(t)\n\e[31m\e[31m   |\e[0m               ^\e[0m\n\e[31m\
    \   |\e[0m               '=>' expected, but '.' found\n\e[31m\e[31m-- [E040] Syntax\
    \ Error: /tmp/tmp55gh93jj.scala:33:15 ---------------------------\e[0m\e[0m\n\e\
    [31m33 |\e[0m        \e[33mcase\e[0m \e[31m5l\e[0m.toLong :: t => Five :: NameToString(t)\n\
    \e[31m\e[31m   |\e[0m               ^\e[0m\n\e[31m   |\e[0m               '=>'\
    \ expected, but '.' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp55gh93jj.scala:34:15\
    \ ---------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mcase\e[0m\
    \ \e[31m6l\e[0m.toLong :: t => Six :: NameToString(t)\n\e[31m\e[31m   |\e[0m \
    \              ^\e[0m\n\e[31m   |\e[0m               '=>' expected, but '.' found\n\
    \e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp55gh93jj.scala:35:15 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mcase\e[0m \e[31m7l\e[0m.toLong :: t =>\
    \ Seven :: NameToString(t)\n\e[31m\e[31m   |\e[0m               ^\e[0m\n\e[31m\
    \   |\e[0m               '=>' expected, but '.' found\n\e[31m\e[31m-- [E040] Syntax\
    \ Error: /tmp/tmp55gh93jj.scala:36:15 -------------------"
  stdout: ''
  timestamp: 1660010059
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        // Define\
    \ your own implementation here\n        val nums : List[String] = List(\"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    )\n        val map : Map[Long, String] = Map(1l.toLong -> \"One\", 2l.toLong ->\
    \ \"Two\", 3l.toLong -> \"Three\", 4l.toLong -> \"Four\", 5l.toLong -> \"Five\"\
    , 6l.toLong -> \"Six\", 7l.toLong -> \"Seven\", 8l.toLong -> \"Eight\", 9l.toLong\
    \ -> \"Nine\")\n        val finalArray : ListBuffer[String] = ListBuffer[String]()\n\
    \        for (elem <- arr) {\n            if (nums.contains(map(elem))) {\n  \
    \              finalArray += map(elem)\n            }\n        }\n        finalArray.toList.sorted.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0271_7ix.scala:29)\n\tat Problem.main(tmp0271_7ix.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010064
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        // This\
    \ is an example of a body code block - a block that has\n        // code for a\
    \ function's body. In this case, the function's\n        // name is \"byLength\"\
    \ and it takes a single argument, \"arr\".\n        // Some functions can return\
    \ a value; this one does, and that\n        // value is a list of strings.\n \
    \       // Using the given list of integers, we'll produce a new list\n      \
    \  // that contains only the integers within the specified range\n        // (1\
    \ to 9 inclusive).\n        val sorted = arr.filter(1l.toLong to 9l.toLong contains\
    \ _).sorted\n        // Taking the resulting list, we'll reverse it to put it\
    \ in\n        // descending order.\n        val reversed = sorted.reverse\n  \
    \      // Finally, we'll apply the name function to each of the\n        // integers\
    \ and return the resulting list of strings.\n        // Note the use of the _.toString()\
    \ method - all objects in\n        // Scala have a toString() method, and we can\
    \ use it to turn\n        // a numeric object into a string object.\n        reversed.map(name(_))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6hu9f_5j.scala:34:21 ------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        reversed.map(name(_))\n\e[31m\e[31m   |\e[0m\
    \                     ^^^^\e[0m\n\e[31m   |\e[0m                     Not found:\
    \ name\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010059
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        // IMPLEMENT\
    \ ME\n        var r = \"\";\n        val a = arr.map(e => e.toString.map(b =>\
    \ if(b == '1') \"One\" else if(b == '2') \"Two\" else if(b == '3') \"Three\" else\
    \ if(b == '4') \"Four\" else if(b == '5') \"Five\" else if(b == '6') \"Six\" else\
    \ if(b == '7') \"Seven\" else if(b == '8') \"Eight\" else if(b == '9') \"Nine\"\
    \ else \"\"))\n        a.filter(b => b.length > 0).sortBy(b => b.length).reverse.foreach(b\
    \ => b.foreach(c => r += c + \" \"))\n        r.substring(0, r.length - 1).split(\"\
    \ \").toList\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmuw178zc.scala:24)\n\tat Problem.main(tmpmuw178zc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010065
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n    }\n}\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0ml4efhp.scala:19:4 ----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    eof expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp0ml4efhp.scala:16:52 --------------------\e[0m\e[0m\n\e[31m16 |\e[0m\
    \    \e[33mdef\e[0m \e[36mbyLength\e[0m(\e[36marr\e[0m : \e[35mList\e[0m[\e[35mLong\e\
    [0m]) : \e[35mList\e[0m[\e[35mString\e[0m] = {\n\e[31m\e[31m   |\e[0m        \
    \                                            ^\e[0m\n\e[31m   |\e[0m         \
    \                                         Found:    Unit\n\e[31m   |\e[0m    \
    \                                              Required: List[String]\n\e[31m17\
    \ |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010041
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        arr.filter(e\
    \ => e >= 1 && e <= 9).sortWith(_ < _).reverse.map(e => e match {\n          \
    \  case 1 => \"One\"\n            case 2 => \"Two\"\n            case 3 => \"\
    Three\"\n            case 4 => \"Four\"\n            case 5 => \"Five\"\n    \
    \        case 6 => \"Six\"\n            case 7 => \"Seven\"\n            case\
    \ 8 => \"Eight\"\n            case 9 => \"Nine\"\n        })\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010065
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val x\
    \ = arr.filter(x => x >= 1 && x <= 9).sorted(Ordering[Long].reverse).map(x =>\
    \ x match {\n            case 1 => \"One\"\n            case 2 => \"Two\"\n  \
    \          case 3 => \"Three\"\n            case 4 => \"Four\"\n            case\
    \ 5 => \"Five\"\n            case 6 => \"Six\"\n            case 7 => \"Seven\"\
    \n            case 8 => \"Eight\"\n            case 9 => \"Nine\"\n        })\n\
    \        x\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010065
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        // Code\
    \ goes here\n        var temp = ListBuffer[Long]()\n        for (i <- arr) {\n\
    \            if (i > 0 && i < 10) temp += i\n        }\n        temp = temp.sorted.reverse\n\
    \        var ans = ListBuffer[String]()\n        for (i <- temp) {\n         \
    \   if (i == 1) ans += \"One\"\n            else if (i == 2) ans += \"Two\"\n\
    \            else if (i == 3) ans += \"Three\"\n            else if (i == 4) ans\
    \ += \"Four\"\n            else if (i == 5) ans += \"Five\"\n            else\
    \ if (i == 6) ans += \"Six\"\n            else if (i == 7) ans += \"Seven\"\n\
    \            else if (i == 8) ans += \"Eight\"\n            else if (i == 9) ans\
    \ += \"Nine\"\n        }\n        ans.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n   \
    \ assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010066
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        return\
    \ List[String]()\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpecfvq_0_.scala:20)\n\tat Problem.main(tmpecfvq_0_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010043
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val c:Map[Long,\
    \ String] = Map(1l.toLong -> \"One\", 2l.toLong -> \"Two\", 3l.toLong -> \"Three\"\
    , 4l.toLong -> \"Four\", 5l.toLong -> \"Five\", 6l.toLong -> \"Six\", 7l.toLong\
    \ -> \"Seven\", 8l.toLong -> \"Eight\", 9l.toLong -> \"Nine\")\n        var l:List[String]\
    \ = List()\n        val l1:List[Long] = arr.filter(x => x >= 1 && x <= 9)\n  \
    \      val l2:List[Long] = l1.sortWith(_ > _)\n        for (x <- l2) {\n     \
    \       l = l :+ c(x)\n        }\n        l\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n   \
    \ assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010066
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val l\
    \ = List(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\",\
    \ \"Eight\", \"Nine\")\n        val numbers = arr.filter(x => x >= 1 && x <= 9)\n\
    \        val reverse = numbers.sorted.reverse\n        val result = ListBuffer[String]()\n\
    \        for (i <- reverse) {\n            result += l(i.toInt - 1)\n        }\n\
    \        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010066
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val result\
    \ = new ListBuffer[String]\n        for (x <- arr if x >= 1 && x <= 9) result\
    \ += x.toString.capitalize\n        result.toList.sorted.reverse\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong,\
    \ 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpufnf90vs.scala:22)\n\tat Problem.main(tmpufnf90vs.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010066
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        var res\
    \ = List[String]()\n        for (e <- arr) {\n            if (e >= 1 && e <= 9)\
    \ {\n                var str = \"\"\n                e match {\n             \
    \       case 1 => str = \"One\"\n                    case 2 => str = \"Two\"\n\
    \                    case 3 => str = \"Three\"\n                    case 4 =>\
    \ str = \"Four\"\n                    case 5 => str = \"Five\"\n             \
    \       case 6 => str = \"Six\"\n                    case 7 => str = \"Seven\"\
    \n                    case 8 => str = \"Eight\"\n                    case 9 =>\
    \ str = \"Nine\"\n                }\n                res = str :: res\n      \
    \      }\n        }\n        res\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n\
    \    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"\
    One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong,\
    \ 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong,\
    \ 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp14atjrc1.scala:38)\n\tat Problem.main(tmp14atjrc1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010067
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        // Insert\
    \ your code here\n        return List()\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n   \
    \ assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnmwrwwcs.scala:21)\n\tat Problem.main(tmpnmwrwwcs.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010066
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val result\
    \ = new ArrayBuffer[String]\n        for (x <- arr) {\n            if (x < 1 ||\
    \ x > 9) ()\n            else if (x == 1) result += \"One\"\n            else\
    \ if (x == 2) result += \"Two\"\n            else if (x == 3) result += \"Three\"\
    \n            else if (x == 4) result += \"Four\"\n            else if (x == 5)\
    \ result += \"Five\"\n            else if (x == 6) result += \"Six\"\n       \
    \     else if (x == 7) result += \"Seven\"\n            else if (x == 8) result\
    \ += \"Eight\"\n            else if (x == 9) result += \"Nine\"\n        }\n \
    \       result.sortWith(_ < _).reverse.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n   \
    \ assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2_3ilqlo.scala:33)\n\tat Problem.main(tmp2_3ilqlo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010066
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        var l\
    \ = ListBuffer[String]()\n        for (a <- arr) {\n            a match {\n  \
    \              case 1 => l += \"One\"\n                case 2 => l += \"Two\"\n\
    \                case 3 => l += \"Three\"\n                case 4 => l += \"Four\"\
    \n                case 5 => l += \"Five\"\n                case 6 => l += \"Six\"\
    \n                case 7 => l += \"Seven\"\n                case 8 => l += \"\
    Eight\"\n                case 9 => l += \"Nine\"\n                case _ =>\n\
    \            }\n        }\n        l.toList.sorted.reverse\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkqvxwafi.scala:35)\n\tat Problem.main(tmpkqvxwafi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010067
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val dict\
    \ = Map(\n            1l.toLong -> \"One\",\n            2l.toLong -> \"Two\"\
    ,\n            3l.toLong -> \"Three\",\n            4l.toLong -> \"Four\",\n \
    \           5l.toLong -> \"Five\",\n            6l.toLong -> \"Six\",\n      \
    \      7l.toLong -> \"Seven\",\n            8l.toLong -> \"Eight\",\n        \
    \    9l.toLong -> \"Nine\"\n        )\n        val res = arr.map(x => dict.get(x).getOrElse(\"\
    \")).filter(_ != \"\").sorted.reverse\n        res\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjuk7ahsz.scala:32)\n\tat Problem.main(tmpjuk7ahsz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010068
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        // Fill\
    \ up this function body\n        // You can add another function as well, if required\n\
    \        val sorted = arr.sorted\n        val rev = sorted.reverse\n        val\
    \ one = \"One\"\n        val two = \"Two\"\n        val three = \"Three\"\n  \
    \      val four = \"Four\"\n        val five = \"Five\"\n        val six = \"\
    Six\"\n        val seven = \"Seven\"\n        val eight = \"Eight\"\n        val\
    \ nine = \"Nine\"\n        val zeros = List[String]()\n        var result = zeros\n\
    \        for (x <- rev) {\n            if (x == 1) {\n                result =\
    \ result :+ one\n            }\n            else if (x == 2) {\n             \
    \   result = result :+ two\n            }\n            else if (x == 3) {\n  \
    \              result = result :+ three\n            }\n            else if (x\
    \ == 4) {\n                result = result :+ four\n            }\n          \
    \  else if (x == 5) {\n                result = result :+ five\n            }\n\
    \            else if (x == 6) {\n                result = result :+ six\n    \
    \        }\n            else if (x == 7) {\n                result = result :+\
    \ seven\n            }\n            else if (x == 8) {\n                result\
    \ = result :+ eight\n            }\n            else if (x == 9) {\n         \
    \       result = result :+ nine\n            }\n        }\n        result\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010068
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val res\
    \ = for (a <- arr if a >= 1 && a <= 9) yield a\n        val re2 = res.toArray.sortWith(_\
    \ > _)\n        re2.map(x => x match {\n            case 1 => \"One\"\n      \
    \      case 2 => \"Two\"\n            case 3 => \"Three\"\n            case 4\
    \ => \"Four\"\n            case 5 => \"Five\"\n            case 6 => \"Six\"\n\
    \            case 7 => \"Seven\"\n            case 8 => \"Eight\"\n          \
    \  case 9 => \"Nine\"\n        }).toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n   \
    \ assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010068
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n      def aux(arr\
    \ : List[Long], acc : List[String]) : List[String] = {\n        arr match {\n\
    \          case Nil => acc\n          case _ => aux(arr.tail, acc :+ toEnglish(arr.head))\n\
    \        }\n      }\n      aux(arr.filter(x => x > 0 && x < 10).sortWith(_ > _),\
    \ List())\n    }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpz349c9ft.scala:20:41 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m          \e[33mcase\e[0m _ => aux(arr.tail, acc :+ toEnglish(arr.head))\n\
    \e[31m\e[31m   |\e[0m                                         ^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                         Not found: toEnglish\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010066
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        var result\
    \ : List[String] = List()\n        for (x <- arr) {\n            x match {\n \
    \               case 1 => result = \"One\" :: result\n                case 2 =>\
    \ result = \"Two\" :: result\n                case 3 => result = \"Three\" ::\
    \ result\n                case 4 => result = \"Four\" :: result\n            \
    \    case 5 => result = \"Five\" :: result\n                case 6 => result =\
    \ \"Six\" :: result\n                case 7 => result = \"Seven\" :: result\n\
    \                case 8 => result = \"Eight\" :: result\n                case\
    \ 9 => result = \"Nine\" :: result\n                case _ =>\n            }\n\
    \        }\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n    assert(byLength((List[Long]())).equals((List[String]())));\n\
    \    assert(byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong))).equals((List[String](\"\
    One\"))));\n    assert(byLength((List[Long](1l.toLong, -1l.toLong, 3l.toLong,\
    \ 2l.toLong))).equals((List[String](\"Three\", \"Two\", \"One\"))));\n    assert(byLength((List[Long](9l.toLong,\
    \ 4l.toLong, 8l.toLong))).equals((List[String](\"Nine\", \"Eight\", \"Four\"))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8khxmqgc.scala:35)\n\tat Problem.main(tmp8khxmqgc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010068
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        def stringify(digit\
    \ : Long) : String = digit match {\n            case 1 => \"One\"\n          \
    \  case 2 => \"Two\"\n            case 3 => \"Three\"\n            case 4 => \"\
    Four\"\n            case 5 => \"Five\"\n            case 6 => \"Six\"\n      \
    \      case 7 => \"Seven\"\n            case 8 => \"Eight\"\n            case\
    \ 9 => \"Nine\"\n            case _ => \"None\"\n        }\n        var ret =\
    \ ArrayBuffer[String]()\n        var digits = ArrayBuffer[Long]()\n        for\
    \ (i <- arr) {\n            if (i <= 9 && i >= 1) digits += i\n        }\n   \
    \     digits = digits.sorted\n        for (i <- digits.reverse) {\n          \
    \  ret += stringify(i)\n        }\n        ret.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong,\
    \ 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010068
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n    }\n}\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0ml4efhp.scala:19:4 ----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    eof expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp0ml4efhp.scala:16:52 --------------------\e[0m\e[0m\n\e[31m16 |\e[0m\
    \    \e[33mdef\e[0m \e[36mbyLength\e[0m(\e[36marr\e[0m : \e[35mList\e[0m[\e[35mLong\e\
    [0m]) : \e[35mList\e[0m[\e[35mString\e[0m] = {\n\e[31m\e[31m   |\e[0m        \
    \                                            ^\e[0m\n\e[31m   |\e[0m         \
    \                                         Found:    Unit\n\e[31m   |\e[0m    \
    \                                              Required: List[String]\n\e[31m17\
    \ |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010041
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val allowed\
    \ = List(1, 2, 3, 4, 5, 6, 7, 8, 9)\n        val allowedMap = allowed.zip(List(\"\
    One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\",\
    \ \"Nine\")).toMap\n        val newlist = arr.filter(x => allowed.contains(x.toInt)).sorted.reverse.map(x\
    \ => allowedMap(x.toInt))\n        newlist\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n   \
    \ assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010069
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        // Write\
    \ your code here\n        List[String]()\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n   \
    \ assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsxlo1cxt.scala:21)\n\tat Problem.main(tmpsxlo1cxt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010068
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        var lst\
    \ = arr.filter(x => (x >= 1 && x <= 9))\n        lst = lst.sortWith(_ < _)\n \
    \       lst = lst.reverse\n        var lst2 = List[String]()\n        for (i <-\
    \ lst) {\n            i match {\n                case 1 => lst2 = lst2 :+ \"One\"\
    \n                case 2 => lst2 = lst2 :+ \"Two\"\n                case 3 =>\
    \ lst2 = lst2 :+ \"Three\"\n                case 4 => lst2 = lst2 :+ \"Four\"\n\
    \                case 5 => lst2 = lst2 :+ \"Five\"\n                case 6 =>\
    \ lst2 = lst2 :+ \"Six\"\n                case 7 => lst2 = lst2 :+ \"Seven\"\n\
    \                case 8 => lst2 = lst2 :+ \"Eight\"\n                case 9 =>\
    \ lst2 = lst2 :+ \"Nine\"\n            }\n        }\n        lst2\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(byLength((List[Long](2l.toLong,\
    \ 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n\
    \    assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010069
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
    \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n  \
    \  // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong,\
    \ 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list\
    \ is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    //\
    \ (List[String]())\n    // If the list has any strange number ignore it:\n   \
    \ // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"\
    One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val dict\
    \ = Map[Long, String](1l.toLong -> \"One\", 2l.toLong -> \"Two\", 3l.toLong ->\
    \ \"Three\", 4l.toLong -> \"Four\", 5l.toLong -> \"Five\", 6l.toLong -> \"Six\"\
    , 7l.toLong -> \"Seven\", 8l.toLong -> \"Eight\", 9l.toLong -> \"Nine\")\n   \
    \     val list = arr.filter(e => e > 0 && e < 10)\n        list.sortWith((a, b)\
    \ => a < b).reverse.map(e => dict(e))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong,\
    \ 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong))).equals((List[String](\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))));\n   \
    \ assert(byLength((List[Long]())).equals((List[String]())));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 55l.toLong))).equals((List[String](\"One\"))));\n    assert(byLength((List[Long](1l.toLong,\
    \ -1l.toLong, 3l.toLong, 2l.toLong))).equals((List[String](\"Three\", \"Two\"\
    , \"One\"))));\n    assert(byLength((List[Long](9l.toLong, 4l.toLong, 8l.toLong))).equals((List[String](\"\
    Nine\", \"Eight\", \"Four\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010069
