name: HumanEval_101_words_string
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // You will be given a string of words separated by commas or spaces. Your\
  \ task is\n    // to split the string into words and return a list of the words.\n\
  \    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    //\
  \ (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"\
  One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"\
  three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String]\
  \ = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi,\
  \ my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"\
  John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
  One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
  Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
  One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\", \"\
  three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
  \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
  , \"gamal\"))));\n    }\n\n}\n"
completions: ["        def helper(s: String, l: List[String]) : List[String] = {\n\
    \            if (s.isEmpty) l\n            else if (s.contains(\",\")) {\n   \
    \             helper(s.substring(s.indexOf(\",\") + 1, s.length).trim, l :+ s.substring(0,\
    \ s.indexOf(\",\")).trim)\n            }\n            else helper(s.substring(s.indexOf(\"\
    \ \") + 1, s.length).trim, l :+ s.substring(0, s.indexOf(\" \")).trim)\n     \
    \   }\n        helper(s, List())", '      return s.split("[, ]+").toList', " \
    \       s.split(Array(' ', ',')).toList", "        val a = s.split(\"[ ]|[,]\"\
    )\n        var r : List[String] = Nil\n        for (i <- 0 until a.length) {\n\
    \            r = r :+ a(i)\n        }\n        r", "        var words : List[String]\
    \ = Nil\n        var word = \"\"\n        for (i <- 0 until s.length) {\n    \
    \        if (s(i) == ' ' || s(i) == ',') {\n                if (word != \"\")\
    \ {\n                    words = word :: words\n                    word = \"\"\
    \n                }\n            } else {\n                word += s(i)\n    \
    \        }\n        }\n        if (word != \"\") words = word :: words\n     \
    \   words.reverse", "        var words = List[String]()\n        s.split(\", \"\
    ).foreach(x => words = words :+ x)\n        words", '        s.split(" |,").toList',
  '        return s.split("[\\s,]+").toList', "        val w = s.split(\",\", -1)\n\
    \        val l = for (i <- w) yield i.trim\n        return l.toList", '        s.split("
    ").toList', "\t  var l : List[String] = List()\n\t  l = s.split(\" \").toList\n\
    \t  return l", '        return s.split(", ").toList', '        s.split("[, ]+").toList',
  '        s.split(" ").toList', '        s.split("[,\\s]").toList', '        return
    s.split("[ ,]+").toList', "        val pattern = \"\\\\s*(\\\\s|,)\\\\s*\".r\n\
    \        val result = pattern.split(s)\n        result.toList", '        s.split("""\s+""").toList',
  "        // return an array of words\n        val words = ListBuffer[String]()\n\
    \        val word = ListBuffer[Char]()\n        for (c <- s) {\n            if\
    \ (c != ' ' && c != ',') {\n                word += c\n            } else {\n\
    \                if (word.length > 0) {\n                    words += word.mkString\n\
    \                    word.clear\n                }\n            }\n        }\n\
    \        if (word.length > 0) words += word.mkString\n        return words.toList",
  "        s.split(Array(' ', ',')).toList", "        // First we need to split the\
    \ string into words, so we use the split method.\n        // This will give us\
    \ an array of words.\n        // Then, we convert the array into a list of words.\n\
    \        s.split(\"[,\\\\s]+\").toList", "        val wordList = ListBuffer[String]()\n\
    \        var wordBuffer = new StringBuilder()\n        s.foreach((c : Char) =>\
    \ {\n            if (c == ' ' || c == ',') {\n                wordList += wordBuffer.toString\n\
    \                wordBuffer = new StringBuilder()\n            } else {\n    \
    \            wordBuffer += c\n            }\n        })\n        wordList += wordBuffer.toString\n\
    \        wordList.toList", '        // your code here', '        return s.split("[,
    ]+").toList', '        s.split(",| ").toList', '        s.split("[, ]+").toList',
  '        s.split("[, ]+").toList', '        List("one", "two", "three")', '        return
    s.split("[, ]+").toList', "        // Split by commas and/or spaces.\n       \
    \ val words = s.split(Array(' ', ','))\n        // Return only the non-empty words.\n\
    \        for (word <- words if word.length > 0) yield word", '        s.split("[,|\\s]+").toList',
  "        // s.split(\" |,\").toList\n        // s.split(\" |,\").toList\n      \
    \  // s.split(\" |,\").toList\n        s.split(\" |,\").toList\n        // s.split(\"\
    \ |,\").toList\n        // s.split(\" |,\").toList\n        // s.split(\" |,\"\
    ).toList\n        // s.split(\" |,\").toList\n        // s.split(\" |,\").toList\n\
    \        // s.split(\" |,\").toList\n        // s.split(\" |,\").toList\n    \
    \    // s.split(\" |,\").toList\n        // s.split(\" |,\").toList\n        //\
    \ s.split(\" |,\").toList\n        // s.split(\" |,\").toList\n        // s.split(\"\
    \ |,\").toList\n        // s.split(\" |,\").toList\n        // s.split(\" |,\"\
    ).toList\n        // s.split(\" |,\").toList\n        // s.split(\" |,\").toList\n\
    \        // s.split(\" |,\").toList\n        // s.split(\" |,\").toList\n    \
    \    // s.split(\" |,\").toList\n        // s.split(\" |,\").toList\n        //\
    \ s.split(\" |,\").toList\n        // s.split(\" |,\").toList\n        // s.split(\"\
    \ |,\").toList\n        // s.split(\" |,\").toList\n        // s.split(\" |,\"\
    ).toList\n        // s.split(\" |,\").toList\n        // s.split(\" |,\").toList\n\
    \        // s.split(\" |,\").toList\n        // s.split(\" |,\").toList\n    \
    \    // s.split(\" |,\").toList\n        // s.split(\" |,\").toList\n        //\
    \ s.split(\" |,\").toList\n        // s.split(\" |,\").toList\n        // s.split(\"\
    \ |,\").toList\n        // s.split(\" |,\").toList\n        // s.split(\" |,\"\
    ).toList\n        // s.split(\" |,\").toList\n        // s.split(\" |,\").toList\n\
    \        // s.split(\" |,\"", "        // def wordsString(s : String) : List[String]\
    \ = s.split(\",\").map(_.trim).toList\n        s.split(\",\").map(_.trim).toList",
  '        s.split(",| ").toList', '        return s.split("[, ]+").toList', "   \
    \     def split(s : String) : List[String] = {\n            def innerSplit(s :\
    \ String, index : Int, list : List[String]) : List[String] = {\n             \
    \   if (index >= s.length) list\n                else if (s(index) == ' ' || s(index)\
    \ == ',') innerSplit(s, index + 1, list)\n                else {\n           \
    \         val start = index\n                    def loop(s : String, index :\
    \ Int) : Int = {\n                        if (index >= s.length) index\n     \
    \                   else if (s(index) == ' ' || s(index) == ',') index\n     \
    \                   else loop(s, index + 1)\n                    }\n         \
    \           val end = loop(s, start)\n                    innerSplit(s, end, list\
    \ :+ s.substring(start, end))\n                }\n            }\n            innerSplit(s,\
    \ 0, List())\n        }\n        split(s)", "      val l = s.split(\" \")\n  \
    \    var r = new ListBuffer[String]()\n      for (x <- l) r += x\n      r.toList",
  '        s.split(",").map(_.trim).toList', "        val a = s.split(\",\")\n   \
    \     val b = a.map(word => word.trim)\n        b.toList", "        val words\
    \ = new ListBuffer[String]\n        val comma = s.indexOf(',')\n        if (comma\
    \ != -1) {\n            words ++= wordsString(s.substring(0, comma))\n       \
    \     words ++= wordsString(s.substring(comma + 1))\n        } else {\n      \
    \      val wordsAsList = s.split(\" \").toList\n            words ++= wordsAsList\n\
    \        }\n        words.toList", '        s.split("[, ]+").filter(!_.isEmpty).toList',
  "        // Fill in the code and return the list of words\n        s.split(\"\\\\\
    s+|,\\\\s*\").toList", "        // This is the entry point for your solution.\n\
    \        List[String]()", "        s.split(',', ' ').toList", "        var list\
    \ = List[String]()\n        var words = s.split(\" |,\")\n        for (word <-\
    \ words) {\n            list = list :+ word\n        }\n        return list",
  '        s.split(" |,").toList', "        val res : ListBuffer[String] = new ListBuffer[String]\n\
    \        var index = 0\n        while (index < s.length) {\n            var word\
    \ : String = \"\"\n            while (index < s.length && s(index) != ' ' && s(index)\
    \ != ',') {\n                word += s(index)\n                index += 1\n  \
    \          }\n            if (word != \"\") {\n                res += word\n \
    \           }\n            index += 1\n        }\n        res.toList", '        s.split("[\\s,]+").toList',
  "        val wordList = scala.collection.mutable.ListBuffer[String]()\n        var\
    \ word = \"\"\n        for (c <- s) {\n            if (c == ' ' || c == ',') {\n\
    \                wordList += word\n                word = \"\"\n            }\
    \ else {\n                word += c\n            }\n        }\n        wordList\
    \ += word\n        wordList.toList", "      val s_split : Array[String] = s.split(\"\
    [, ]+\")\n      val result = new ListBuffer[String]()\n      for (i <- 0 until\
    \ s_split.length) {\n        result += s_split(i)\n      }\n      result.toList",
  "\t\t//!!!\n\t\tnull", '        return s.split("\\s+|,\\s*").toList', "        val\
    \ words = ArrayBuffer[String]()\n        var i = 0\n        while (i < s.length)\
    \ {\n            var word = \"\"\n            while (i < s.length && s(i) != '\
    \ ' && s(i) != ',') {\n                word += s(i)\n                i += 1\n\
    \            }\n            words += word\n            i += 1\n        }\n   \
    \     words.toList", "        var ret = s.split(\"[ ,]+\").toList\n        return\
    \ ret", "        // split the string by commas and spaces and then return the\
    \ list of words.\n        return s.split(\",\\\\s*\").toList", "        val s2\
    \ = s.split(\", | \")\n        for (i <- 0 until s2.length) yield s2(i)", "  \
    \      val split = s.split(\",\")\n        val list = new ListBuffer[String]\n\
    \        for (i <- split) {\n            val join = i.split(\" \")\n         \
    \   for (j <- join) {\n                list += j\n            }\n        }\n \
    \       list.toList", "        var x = s.split(\" \")\n        var y = x.map(x\
    \ => x.split(\",\"))\n        var z = y.map(y => y.toList)\n        z.reduceLeft(_\
    \ ++ _)", '        s.split(", | ").toList', "        var words : List[String]\
    \ = Nil\n        var iter = s.iterator\n        var currentWord : String = \"\"\
    \n        while (iter.hasNext) {\n            var c = iter.next\n            if\
    \ (c != ' ' && c != ',') currentWord += c\n            else {\n              \
    \  if (currentWord != \"\") {\n                    words = currentWord :: words\n\
    \                    currentWord = \"\"\n                }\n            }\n  \
    \      }\n        words = currentWord :: words\n        words", '        return
    s.split(" ").toList', "        // Fill in code here\n        List()", '        return
    s.split(" ").toList', '        s.split("[, ]+").toList', "        val a = s.split(\"\
    [, ]\")\n        for (i <- 0 until a.length) {\n            if (a(i) == \"\")\
    \ a(i) = null\n        }\n        a.filter(_ != null).toList", '        return
    s.split("[, ]+").toList', '        return s.split("\\s+|,\\s*").toList', '        s.split("""[,\s]+""").toList',
  "        // YOUR CODE HERE\n        val words = s.split(\"[,\\\\s]+\")\n       \
    \ words.toList", "        val result = s.split(\"[,\\\\s]+\")\n        result.toList",
  '        s.trim.split("(,|\\s)+").toList', '        s.split("""[\s,]+""").toList',
  "        //s.split(\"[,\\\\s]+\").toList\n        //List() ++ s.split(\"[,\\\\s]+\"\
    )\n        s.split(\"[,\\\\s]+\").toList", "        // Complete this function.\n\
    \        s.split(\"[\\\\s,]+\").toList", '        s.split(",").toList.map(x =>
    x.trim)', '        s.split("[, ]+").toList', '        return s.split("[, ]+").toList',
  '        s.split(" ").toList', '        s.split("\\s*(,|\\s)\\s*").toList', "  \
    \      val res = s.split(\"\"\"[\\s,]+\"\"\")\n        res.toList", '        s.split("[
    ,]+").toList', "        var words : List[String] = List()\n        for (w <- s.split(\"\
    [ ,]+\")) {\n            words = words :+ w\n        }\n        return words",
  "        var words = List[String]()\n        var word = \"\"\n        for (c <-\
    \ s) {\n            if (c == ' ' || c == ',') {\n                if (word != \"\
    \") {\n                    words = words :+ word\n                    word = \"\
    \"\n                }\n            } else {\n                word += c\n     \
    \       }\n        }\n        if (word != \"\") words = words :+ word\n      \
    \  words", '        return s.split("[\\,\\s]+").toList', '        s.split("[ ,]+").toList',
  '        s.split("[ ,]+").toList', '        return s.split(",| ").toList', "   \
    \   val words = s.split(\"[, ]+\")\n      words.toList", '        ???', "    \
    \    // TBC\n        s.split(',').toList", "        return s.split(',').map(_.trim).toList",
  "        return s.split(Array(' ', ',', '.')).filter(!_.isEmpty).toList", "    \
    \    var result : List[String] = Nil\n        var s2 = \"\"\n        for (i <-\
    \ 0 until s.length) {\n            if (s(i) == ' ' || s(i) == ',') {\n       \
    \         result = result :+ s2\n                s2 = \"\"\n            } else\
    \ {\n                s2 += s(i)\n            }\n        }\n        result :+ s2",
  "        var out = List[String]()\n        var str = \"\"\n        for (c <- s)\
    \ {\n            if (c == ' ' || c == ',') {\n                out = out :+ str\n\
    \                str = \"\"\n            } else {\n                str += c\n\
    \            }\n        }\n        out = out :+ str\n        return out", "  \
    \      // Split the given string at commas or spaces\n        val words = s.split(\"\
    ,\").map(s => s.trim()).filter(s => s.length > 0)\n        words.toList", '        s.split("[
    ,]+").toList', '        return s.split("[,\\s]").toList', '        s.split("[
    ,]+").toList', "        return s.split(',').map(_.trim).toList", '        return
    s.split("[,\\s]+").toList', '        s.split("[\\s,]+").toList', '        s.split(",
    ").toList', '        return s.split(" |,").toList', "        s.split(',').map(_.trim).toList",
  "        // For example:\n        // >>> wordsString((\"Hi, my name is John\"))\n\
    \        // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n     \
    \   // >>> wordsString((\"One, two, three, four, five, six\"))\n        // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n        val words =\
    \ s.split(\"[ ,]+\")\n        return words.toList", "        val list = ListBuffer[String]()\n\
    \        var index = 0\n        while (index < s.length) {\n            if (s(index)\
    \ == ' ' || s(index) == ',') {\n                index += 1\n            } else\
    \ {\n                var start = index\n                while (index < s.length\
    \ && s(index) != ' ' && s(index) != ',') {\n                    index += 1\n \
    \               }\n                list += s.substring(start, index)\n       \
    \     }\n        }\n        list.toList", "        val words = s.split(\"\\\\\
    s+|,\")\n        words.toList", '        return List()', "        // Note: I had\
    \ to split on \",\" and \" \"\n        s.split(\", \").toList", '        s.split("[,\\s]+").toList',
  '        return s.split("[ ,]+").toList', "        return s.split(Array(' ', ',')).toList",
  '        s.split("\\s+|,\\s*").toList', '        s.split("\\s+|,\\s*").toList',
  "        val sb = new StringBuilder\n        val result = new ListBuffer[String]\n\
    \        for (c <- s) {\n            if (c != ' ' && c != ',') {\n           \
    \     sb.append(c)\n            } else {\n                if (sb.size > 0) {\n\
    \                    result += sb.toString\n                    sb.clear\n   \
    \             }\n            }\n        }\n        if (sb.size > 0) {\n      \
    \      result += sb.toString\n        }\n        result.toList", "        var\
    \ words = s.split(\"\"\"[\\s,]+\"\"\")\n        words.toList", "        // s.split(\"\
    ,\") \n        // the above works, but isn't robust\n        def recurse(s : String,\
    \ acc : List[String]) : List[String] = {\n            val s2 = s.trim\n      \
    \      if (s2.length == 0) acc\n            else {\n                val s3 = s2.split(\"\
    \ \")(0)\n                val word = s3.split(\",\")(0)\n                recurse(s2.substring(word.length),\
    \ acc :+ word)\n            }\n        }\n        recurse(s, List[String]())",
  '        return s.split("""[, ]+""").toList', "        var result = List[String]()\n\
    \        var words = s.split(\"[,\\\\s]+\")\n        for (word <- words) {\n \
    \           result ::= word\n        }\n        result.reverse", "        val\
    \ seperators = \" ,\\t\"\n        val buffer = new ListBuffer[String]\n      \
    \  var start = 0\n        var end = 0\n        while (end < s.length) {\n    \
    \        while (end < s.length && seperators.contains(s(end))) end += 1\n    \
    \        start = end\n            while (end < s.length && !seperators.contains(s(end)))\
    \ end += 1\n            if (start < end) buffer += s.substring(start, end)\n \
    \       }\n        buffer.toList", '        s.split("[ ,]+").toList', '        s.split("""[,\s]+""").toList',
  "        // fill this in\n        ???", '        s.split(" ").toList', '        s.split("[,
    ]+").toList', '        return s.split("[, ]+").toList', '        return s.split(",").toList.map(x
    => x.trim())', "        val parts = s.trim.split(\"\\\\s+\")\n        parts.toList",
  "\t    val regex = \"\\\\W\".r\n\t    regex.split(s).toList", '        s.split("\\s+|,").toList',
  "        val strs = s.split(\" \")\n        var ret = List[String]()\n        for\
    \ (s <- strs) {\n            ret = ret :+ s\n        }\n        ret", "      \
    \  val regex = \"\\\\s+|,\\\\s*\".r\n        regex.split(s).toList", "       \
    \ val lst = s.split(\",\").toList\n        val lst2 = lst.map(x => x.trim)\n \
    \       lst2", "        val stringList = s.split(\" |,\")\n        stringList.toList",
  "        // The split method will turn a string into a list of strings. It takes\
    \ a\n        // string representing a delimiter on which to split. If given an\
    \ empty\n        // string, it will split the string into individual characters.\n\
    \        // >>> \"one-two-three\".split(\"-\")\n        // List[String](\"one\"\
    , \"two\", \"three\")\n        // >>> \"one-two-three\".split(\"\")\n        //\
    \ List[String](\"o\", \"n\", \"e\", \"-\", \"t\", \"w\", \"o\", \"-\", \"t\",\
    \ \"h\", \"r\", \"e\", \"e\")\n        // If you give split two strings, it will\
    \ split on the first string while\n        // excluding the second string.\n \
    \       // >>> \"one-two-three\".split(\"-\", \"/\")\n        // List[String](\"\
    one\", \"two\", \"three\")\n        // You can also give split a limit to the\
    \ number of times it will perform the\n        // split.\n        // >>> \"one-two-three\"\
    .split(\"-\", 2)\n        // List[String](\"one\", \"two-three\")\n        //\
    \ Given the above information, split the string as necessary to solve the\n  \
    \      // problem.\n        s.split(\"[ ,]+\").toList", '        return s.split(",
    | ").toList', '        s.split("[, ]+").filter(_ != "").toList', "        var\
    \ result = List[String]()\n        result = s.split(\",\").toList\n        result",
  "        // s.split(',').toList\n        s.split(Array(' ', ',')).toList", "   \
    \     val array = s.split(\"\\\\s+|,\\\\s*\")\n        for (i <- 0 until array.length)\
    \ yield array(i)", '        s.split(",").toList.map(_.trim)', "        var l :\
    \ List[String] = List()\n        s.split(\"[ ,]+\").foreach(l = l :+ _)\n    \
    \    l", '        s.split("[ ,]+").toList', "        val words = new ArrayBuffer[String]()\n\
    \        var currentWord = new StringBuilder()\n        for (c <- s) {\n     \
    \       if (c != ' ' && c != ',') currentWord += c\n            else {\n     \
    \           if (currentWord.length > 0) {\n                    words += currentWord.toString\n\
    \                    currentWord = new StringBuilder()\n                }\n  \
    \          }\n        }\n        if (currentWord.length > 0) words += currentWord.toString\n\
    \        words.toList", '        return s.split("[,\\s]+").toList', '        return
    s.split(" |,").toList', '        s.split("[, ]+").toList', '        return s.split("[,
    ]+").toList', '      // TODO', '        return s.split(" |,").toList', '        s.split("""[
    ,]+""").toList', "        val list = s.split(\"[, ]\").toList\n        list",
  "        // YOUR CODE HERE\n        return null", '        s.split("""\s+""").toList',
  "        // You fill this in\n        var list : List[String] = List()\n       \
    \ var temp = new StringBuilder\n        var i = 0\n        while (i < s.length)\
    \ {\n            if (s(i) == ' ' || s(i) == ',') {\n                list = list\
    \ :+ temp.toString\n                temp = new StringBuilder\n            } else\
    \ {\n                temp.append(s(i))\n            }\n            i += 1\n  \
    \      }\n        list = list :+ temp.toString\n        list", "        val result\
    \ = new ArrayBuffer[String]\n        val tmp = new StringBuilder\n        for\
    \ (c <- s) {\n            if (c == ' ' || c == ',') {\n                if (tmp.length\
    \ > 0) {\n                    result += tmp.toString\n                    tmp.clear\n\
    \                }\n            } else {\n                tmp += c\n         \
    \   }\n        }\n        if (tmp.length > 0) {\n            result += tmp.toString\n\
    \        }\n        result.toList", "        def stringToWordList(s : String)\
    \ : List[String] = {\n            s.split(\",\").toList.map(_.trim)\n        }\n\
    \        if (s.contains(\",\")) {\n            stringToWordList(s)\n        }\
    \ else {\n            stringToWordList(s.replace(\" \", \",\"))\n        }", '        return
    s.split(",").toList.map(_.trim)', "        val space = \" \"\n        val spaceChars\
    \ = space.toCharArray\n        val comma = \",\"\n        val commaChars = comma.toCharArray\n\
    \        def go(word : String, acc : List[String]) : List[String] = {\n      \
    \      if (word.length == 0) acc\n            else {\n                val wordCharArray\
    \ = word.toCharArray\n                val indexOfFirstSpace = wordCharArray.indexOfSlice(spaceChars)\n\
    \                val indexOfFirstComma = wordCharArray.indexOfSlice(commaChars)\n\
    \                if (indexOfFirstSpace == -1 && indexOfFirstComma == -1) {\n \
    \                   go(\"\", acc :+ word)\n                } else if (indexOfFirstSpace\
    \ == -1) {\n                    val (currWord, rem) = word.splitAt(indexOfFirstComma)\n\
    \                    go(rem.drop(1), acc :+ currWord)\n                } else\
    \ if (indexOfFirstComma == -1) {\n                    val (currWord, rem) = word.splitAt(indexOfFirstSpace)\n\
    \                    go(rem.drop(1), acc :+ currWord)\n                } else\
    \ {\n                    val i = min(indexOfFirstSpace, indexOfFirstComma)\n \
    \                   val (currWord, rem) = word.splitAt(i)\n                  \
    \  go(rem.drop(1), acc :+ currWord)\n                }\n            }\n      \
    \  }\n        go(s, List())", "        s.split(',').toList.map(_.trim)", "   \
    \     // TODO\n        val splitString = s.split(\"[\\\\s,]+\")\n        splitString.toList",
  "        val list = ListBuffer[String]()\n        var temp = \"\"\n        for (c\
    \ <- s) {\n            if (c == ' ' || c == ',') {\n                list += temp\n\
    \                temp = \"\"\n            } else {\n                temp += c\n\
    \            }\n        }\n        list += temp\n        list.toList", "     \
    \   var result : List[String] = List[String]()\n        var word = \"\"\n    \
    \    for (c <- s) {\n            if (c == ' ' || c == ',') {\n               \
    \ if (word != \"\") {\n                    result = result :+ word\n         \
    \           word = \"\"\n                }\n            } else {\n           \
    \     word += c\n            }\n        }\n        if (word != \"\") {\n     \
    \       result = result :+ word\n        }\n        return result", "        var\
    \ result : List[String] = List()\n        val words = s.split(\"[,\\\\s]+\")\n\
    \        for (word <- words) {\n            result = result :+ word\n        }\n\
    \        result", '        return s.split("[\\s,]+").toList', "        var l :\
    \ List[String] = List()\n        for (i <- s.split(\", \")) {\n            l =\
    \ l :+ i\n        }\n        return l", "        s.split(',').toList.map(s =>\
    \ s.trim())", '        List()', '        s.split("[, ]+").toList', '        return
    s.split("[, ]+").toList', '        s.split(",").map(_.trim).toList', "\t\tvar\
    \ w = new ArrayBuffer[String]()\n\t\tvar word = \"\"\n\t\tfor (c <- s) {\n\t\t\
    \tif (c == ' ' || c == ',') {\n\t\t\t\tif (word != \"\") {\n\t\t\t\t\tw += word\n\
    \t\t\t\t\tword = \"\"\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tword += c\n\t\t\t}\n\
    \t\t}\n\t\tif (word != \"\") w += word\n\t\tw.toList", "        // type your code\
    \ here\n        return List[String]()", '        s.split("[, ]+").toList', "\t\t\
    return s.split(\",\").toList", "        var str = s.trim.split(\"\"\"[\\s,]+\"\
    \"\")\n        List[String]() ++ str", "        val l = s.split(\"[ ,]+\")\n \
    \       l.toList", "        // returns a list of words given a string\n      \
    \  s.split(\", \").toList", '        s.split("[\\s,]+").toList', '        s.split(",").map(_.trim).toList',
  '        return s.split("\\W+").toList', "        // Remove the '?'\n        s.split(\"\
    [, ]+\").toList", '        return s.split(" ").toList', '        s.split("[ ,]+").toList',
  "        val words = s.split(\"[ ,]+\")\n        words.toList", "        if (s.trim().length\
    \ == 0) return List()\n        s.split(\"[ ,]+\").toList", "        if (s.length\
    \ == 0) List[String]()\n        else if (s.contains(\" \")) s.substring(0, s.indexOf(\"\
    \ \")) :: wordsString(s.substring(s.indexOf(\" \") + 1))\n        else List[String](s)",
  "        var l = new ListBuffer[String]\n        s.split(\"[ ,]+\").foreach(l +=\
    \ _)\n        l.toList", '        return null', '        return s.split(" |,").toList',
  "        s.split(',').toList.map(x => x.trim)", "        val list = s.split(\"[\
    \ ,]+\")\n        list.toList", "        val l = s.split(\",\").map(_.trim).toList\n\
    \        return l", "        val l = ListBuffer[String]()\n        var temp =\
    \ \"\"\n        s.foreach(c => {\n            if (c == ' ' || c == ',') {\n  \
    \              l += temp\n                temp = \"\"\n            } else temp\
    \ += c\n        })\n        l += temp\n        l.toList", "        // fill this\
    \ in\n        var r = List[String]()\n        val w = s.split(\"\\\\s+\")\n  \
    \      for (e <- w) r = r :+ e\n        r", '        return s.split("[\\s\\,]+").toList',
  "        val str = s.split(\"[,\\\\s]+\")\n        str.toList", '        s.split("
    |,").toList', '        s.split("[ ,]+").toList', '        s.split("[,\\s]+").toList']
stop_tokens:
- "\n    }\n"
