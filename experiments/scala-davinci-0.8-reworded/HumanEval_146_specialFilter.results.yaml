language: scala
name: HumanEval_146_specialFilter
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        // Fill Up this\
    \ function body\n        // `nums` is a List of numbers\n        // Compute and\
    \ return the number of elements in the `nums` list that are greater than 10 and\
    \ both \n        // first and last digits of a number are odd (1, 3, 5, 7, 9).\
    \ \n        nums.count(n => n >= 10 && n % 2 == 1 && (n / 10 == 0 || n / 10 %\
    \ 2 == 1))\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4ddw6xtt.scala:22)\n\tat Problem.main(tmp4ddw6xtt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028754
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        var count = 0l\n\
    \        for (num <- nums) {\n            if (num > 10 && abs(num) % 10 % 2 ==\
    \ 1 && num / 10 == 0) {\n                count += 1\n            }\n        }\n\
    \        return count\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0rkfu3bp.scala:23)\n\tat Problem.main(tmp0rkfu3bp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028754
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        //fill this\n  \
    \      return 0l;\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpx4z_p30j.scala:18)\n\tat Problem.main(tmpx4z_p30j.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028754
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        // Fill Up this\
    \ function body\n        // `nums` contains all test cases\n        // Return\
    \ a single number as output\n        // Do not modify the existing code\n    \
    \    var c:Long = 0;\n        var a:Long = 0;\n        var b:Long = 0;\n     \
    \   var d:Long = 0;\n        var g:Long = 0;\n        for(i <- 0 to nums.length-1)\n\
    \        {\n          a = nums(i);\n          c = a%10;\n          g = 0;\n  \
    \        while(a != 0)\n          {\n            b = a%10;\n            a = a/10;\n\
    \            g = g+1;\n          }\n          d = nums(i)/pow(10,(g-1)).toLong;\n\
    \          if(abs(nums(i)) > 10 && d%2 != 0 && c%2 != 0)\n          {\n      \
    \      nums(i) = 1;\n          }\n          else\n          {\n            nums(i)\
    \ = 0;\n          }\n        }\n        for(i <- 0 to nums.length-1)\n       \
    \ {\n          c = c+nums(i);\n        }\n        return c;\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong,\
    \ 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpjp13_109.scala:36:12 ------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m            nums(i) = \e[31m1\e[0m;\n\e[31m\e[31m   |\e\
    [0m            ^^^^\e[0m\n\e[31m   |\e[0m value update is not a member of List[Long]\
    \ - did you mean nums.updated?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpjp13_109.scala:40:12\
    \ ------------------------\e[0m\e[0m\n\e[31m40 |\e[0m            nums(i) = \e\
    [31m0\e[0m;\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m value\
    \ update is not a member of List[Long] - did you mean nums.updated?\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660028754
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        var count = 0l;\n\
    \        for (num <- nums) {\n            val numStr = num.toString;\n       \
    \     if (num > 10 && (numStr(0) % 2 == 1) && (numStr(numStr.length - 1) % 2 ==\
    \ 1)) {\n                count += 1;\n            }\n        }\n        return\
    \ count;\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028754
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        nums.filter(x =>\
    \ x > 10 && (x % 2 == 1) && (x / pow(10, floor(log10(x)))).toInt % 2 == 1).length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028754
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        0\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpep4unny5.scala:17)\n\tat Problem.main(tmpep4unny5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028754
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        // Fill Up this\
    \ function body\n        // `nums` is list of numbers\n        // do not change\
    \ function name, return type, and parameters\n        if (nums.length == 0) 0\n\
    \        else if (abs(nums.head) > 10 && firstDigit(nums.head) % 2 != 0 && lastDigit(nums.head)\
    \ % 2 != 0) 1 + specialFilter(nums.tail)\n        else specialFilter(nums.tail)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpeena65p6.scala:17:40 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (abs(nums.head)\
    \ > \e[31m10\e[0m && firstDigit(nums.head) % \e[31m2\e[0m != \e[31m0\e[0m && lastDigit(nums.head)\
    \ % \e[31m2\e[0m != \e[31m0\e[0m) \e[31m1\e[0m + specialFilter(nums.tail)\n\e\
    [31m\e[31m   |\e[0m                                        ^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                        Not found: firstDigit\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpeena65p6.scala:17:74\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33melse\e[0m \e\
    [33mif\e[0m (abs(nums.head) > \e[31m10\e[0m && firstDigit(nums.head) % \e[31m2\e\
    [0m != \e[31m0\e[0m && lastDigit(nums.head) % \e[31m2\e[0m != \e[31m0\e[0m) \e\
    [31m1\e[0m + specialFilter(nums.tail)\n\e[31m\e[31m   |\e[0m                 \
    \                                                         ^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                                    Not found: lastDigit\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028750
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        0\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpep4unny5.scala:17)\n\tat Problem.main(tmpep4unny5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028754
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        nums.filter(n =>\
    \ (abs(n) > 10) && ((abs(n) % 10) % 2 == 1) && (abs(n) / (math.pow(10, math.floor(math.log10(abs(n))).toInt))\
    \ % 2 == 1)).length\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp78wij5df.scala:17)\n\tat Problem.main(tmp78wij5df.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028754
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        // Fill Up this\
    \ function body\n        // `nums`  list of numbers\n        // return the number\
    \ of elements in the list that are greater than 10 and both first and last digits\
    \ of a number are odd (1, 3, 5, 7, 9).\n        // Should return a value of type\
    \ `Long`\n        nums.filter(x => x > 10 && (x / 1000000 % 10 % 2 == 1 || x /\
    \ 1000000 % 10 % 2 == -1) && (x % 10 % 2 == 1 || x % 10 % 2 == -1)).length\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdkhhq4mf.scala:21)\n\tat Problem.main(tmpdkhhq4mf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028754
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        // Fill Up this\
    \ function body\n        // You can add another function as well, if required\n\
    \        nums.count((num : Long) => abs(num) > 10 && isOdd(num) && isOdd(num %\
    \ 10))\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2c_7bsxa.scala:15:52 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        nums.count((\e[36mnum\e[0m : \e[35mLong\e[0m)\
    \ => abs(num) > \e[31m10\e[0m && isOdd(num) && isOdd(num % \e[31m10\e[0m))\n\e\
    [31m\e[31m   |\e[0m                                                    ^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                    Not found:\
    \ isOdd\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2c_7bsxa.scala:15:66\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        nums.count((\e[36mnum\e\
    [0m : \e[35mLong\e[0m) => abs(num) > \e[31m10\e[0m && isOdd(num) && isOdd(num\
    \ % \e[31m10\e[0m))\n\e[31m\e[31m   |\e[0m                                   \
    \                               ^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \                                      Not found: isOdd\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660028750
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        var result = 0l\n\
    \        nums.foreach(n => {\n            if (n > 10) {\n                var c\
    \ = n.toString().toList\n                if (n.toString.charAt(0).toInt % 2 !=\
    \ 0 && n.toString.charAt(n.toString.length - 1).toInt % 2 != 0) result += 1\n\
    \            }\n        })\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028754
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        nums.filter(x =>\
    \ x >= 10 && isOdd(x % 10) && isOdd(x / pow(10, floor(log10(x)).toInt).toLong)).length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmv7sh2nr.scala:13:36 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        nums.filter(\e[36mx\e[0m => x >= \e[31m10\e[0m\
    \ && isOdd(x % \e[31m10\e[0m) && isOdd(x / pow(\e[31m10\e[0m, floor(log10(x)).toInt).toLong)).length\n\
    \e[31m\e[31m   |\e[0m                                    ^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                                    Not found: isOdd\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpmv7sh2nr.scala:13:53 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        nums.filter(\e[36mx\e[0m => x >= \e[31m10\e[0m\
    \ && isOdd(x % \e[31m10\e[0m) && isOdd(x / pow(\e[31m10\e[0m, floor(log10(x)).toInt).toLong)).length\n\
    \e[31m\e[31m   |\e[0m                                                     ^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                     Not found:\
    \ isOdd\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028751
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        def isSpecial(num\
    \ : Long) : Boolean = {\n            num > 10 &&\n            num.toString.length\
    \ > 1 &&\n            num.toString.length < 10 &&\n            (num.toString.take(1).toInt\
    \ % 2 != 0) &&\n            (num.toString.takeRight(1).toInt % 2 != 0)\n     \
    \   }\n        nums.count(isSpecial)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028754
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        // Fill Up this\
    \ function body\n                // List(1l)\n        nums.filter(i => i > 10\
    \ && (i.toString.head.toInt - '0') % 2 == 1 && (i.toString.last.toInt - '0') %\
    \ 2 == 1).size.toLong\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028754
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        var count = 0\n\
    \        for (i <- nums) {\n            if (i.toString.length > 1 && abs(i) >\
    \ 10 && i.toString.head.toInt % 2 != 0 && i.toString.last.toInt % 2 != 0) count\
    \ += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong, -5l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong, 14l.toLong,\
    \ -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong, -2l.toLong,\
    \ -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n    assert(specialFilter((List[Long](43l.toLong,\
    \ -12l.toLong, 93l.toLong, 125l.toLong, 121l.toLong, 109l.toLong))) == (4l));\n\
    \    assert(specialFilter((List[Long](71l.toLong, -2l.toLong, -33l.toLong, 75l.toLong,\
    \ 21l.toLong, 19l.toLong))) == (3l));\n    assert(specialFilter((List[Long](1l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long]())) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe7kbzbf3.scala:21)\n\tat Problem.main(tmpe7kbzbf3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028754
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n\t\tval firstNumber = nums.head\n\
    \t\tval lastNumber = nums.last\n\t\tval numDigits = nums.length\n\t\tval firstOdd\
    \ = firstNumber % 2 == 1\n\t\tval lastOdd = lastNumber % 2 == 1\n\t\tnums.filter(x\
    \ => x > 10 && firstOdd && lastOdd).length\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpkebvjzl0.scala:19:4 ------------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m   Incompatible combinations of tabs and spaces in indentation prefixes.\n\e\
    [31m   |\e[0m   Previous indent : 2 tabs\n\e[31m   |\e[0m   Latest indent   :\
    \ 4 spaces\n1 error found\n"
  stdout: ''
  timestamp: 1660028750
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n      var count = 0l;\n\
    \      var fd = 0l;\n      var ld = 0l;\n      for (num <- nums) {\n        if\
    \ (num > 10) {\n          fd = num / 10;\n          ld = num % 10;\n         \
    \ if (fd % 2 != 0 && ld % 2 != 0) {\n            count += 1;\n          }\n  \
    \      }\n      }\n      return count;\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpl1kt32n9.scala:30)\n\tat Problem.main(tmpl1kt32n9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028754
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        // Fill Up this\
    \ function body\n        // `nums` is a list of numbers\n        // `return` should\
    \ be a number\n        if (nums.length == 0) return 0\n        def isSpecial(x\
    \ : Long) : Boolean = {\n            val str = abs(x).toString\n            val\
    \ first = str.charAt(0).toInt - '0'.toInt\n            val last = str.charAt(str.length\
    \ - 1).toInt - '0'.toInt\n            (x > 10) && (first % 2 == 1) && (last %\
    \ 2 == 1)\n        }\n        if (isSpecial(nums.head)) 1 + specialFilter(nums.tail)\
    \ else specialFilter(nums.tail)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong, -5l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong, 14l.toLong,\
    \ -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong, -2l.toLong,\
    \ -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n    assert(specialFilter((List[Long](43l.toLong,\
    \ -12l.toLong, 93l.toLong, 125l.toLong, 121l.toLong, 109l.toLong))) == (4l));\n\
    \    assert(specialFilter((List[Long](71l.toLong, -2l.toLong, -33l.toLong, 75l.toLong,\
    \ 21l.toLong, 19l.toLong))) == (3l));\n    assert(specialFilter((List[Long](1l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long]())) == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028754
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        def l1 = List[Int](1,\
    \ 3, 5, 7, 9)\n        def l2 = List[Int](1, 3, 5, 7, 9)\n        // 10 - 5, 11\
    \ - 6\n        def specialFilterHelper(nums : List[Long], curr : Long, acc : Long)\
    \ : Long = {\n            if (nums.isEmpty) acc\n            else {\n        \
    \        if (curr % 10 >= 5) {\n                    if (l1.contains(curr.toString.head.asDigit)\
    \ && l2.contains(curr.toString.last.asDigit))\n                        specialFilterHelper(nums.tail,\
    \ nums.head, acc + 1)\n                    else specialFilterHelper(nums.tail,\
    \ nums.head, acc)\n                }\n                else {\n               \
    \     if (l1.contains(curr.toString.head.asDigit) && l2.contains(curr.toString.last.asDigit))\n\
    \                        specialFilterHelper(nums.tail, nums.head, acc + 1)\n\
    \                    else specialFilterHelper(nums.tail, nums.head, acc)\n   \
    \             }\n            }\n        }\n        specialFilterHelper(nums.tail,\
    \ nums.head, 0)\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptc33ps6v.scala:34)\n\tat Problem.main(tmptc33ps6v.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028754
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        def digits(num :\
    \ Long) : List[Long] = {\n            if (num < 10) List(num)\n            else\
    \ digits(num / 10) :+ (num % 10)\n        }\n        def isOdd(n : Long) : Boolean\
    \ = n % 2 == 1\n        nums.count { x =>\n            val lst = digits(x.abs)\n\
    \            x.abs > 10 && lst.head.abs % 2 == 1 && lst.last.abs % 2 == 1\n  \
    \      }\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpinktr59s.scala:25)\n\tat Problem.main(tmpinktr59s.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028755
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val stringNums =\
    \ nums.map(x => x.toString)\n        val greaterThanTen = stringNums.filter(x\
    \ => x.toInt > 10)\n        greaterThanTen.filter(x => (x.head.toString.toInt\
    \ % 2 != 0) && (x.last.toString.toInt % 2 != 0)).size.toLong\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong,\
    \ 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028755
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val biggerThan10\
    \ = nums.filter((x) => x > 10)\n        val firstAndLast = biggerThan10.filter((x)\
    \ => {\n            val s = x.toString\n            ((s(0) - '0') % 2 == 1) &&\
    \ ((s(s.length - 1) - '0') % 2 == 1)\n        })\n        firstAndLast.length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028754
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        // Fill up this\
    \ function body\n        // You have to return a Long value\n        nums.filter(x\
    \ => x > 10 && (x.toString.head.toString.toInt % 2 != 0) && (x.toString.last.toString.toInt\
    \ % 2 != 0)).length\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028761
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        // Fill Up this\
    \ function body\n        // `nums` Inpute List\n        // Should return output\
    \ List\n        // For Example\n        // specialFilter(List(15, -73, 14, -15))\
    \ == List(15, -15)\n        // specialFilter(List(33, -2, -3, 45, 21, 109)) ==\
    \ List(33, -3, 45, 21, 109)\n        def countDigits(n : Long) : Int = {\n   \
    \         var len = 0\n            var n1 = n\n            while (n1 > 0) {\n\
    \                len += 1\n                n1 /= 10\n            }\n         \
    \   len\n        }\n        var cnt = 0\n        for (num <- nums) {\n       \
    \     if (num < 10 && num % 2 == 1) cnt += 1\n            else if (num >= 10)\
    \ {\n                var isSpecial = true\n                val len = countDigits(num)\n\
    \                var n = num\n                var last = n % 10\n            \
    \    if (last % 2 == 0) isSpecial = false\n                n /= 10\n         \
    \       for (i <- 1 to len - 2) {\n                    val dig = n % 10\n    \
    \                if (dig % 2 == 0) isSpecial = false\n                    n /=\
    \ 10\n                }\n                val first = n % 10\n                if\
    \ (first % 2 == 0) isSpecial = false\n                if (isSpecial) cnt += 1\n\
    \            }\n        }\n        cnt\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcqzw_wso.scala:51)\n\tat Problem.main(tmpcqzw_wso.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028762
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        def firstDigit(num\
    \ : Long) : Long = {\n            if (num > 0) {\n                num / pow(10,\
    \ ceil(log10(num)).toInt).toLong\n            } else {\n                num /\
    \ pow(10, ceil(log10(-num)).toInt).toLong\n            }\n        }\n        def\
    \ lastDigit(num : Long) : Long = {\n            if (num > 0) {\n             \
    \   num % 10\n            } else {\n                (-num) % 10\n            }\n\
    \        }\n        def isFirstAndLastDigitOdd(num : Long) : Boolean = {\n   \
    \         firstDigit(num) % 2 == 1 && lastDigit(num) % 2 == 1\n        }\n   \
    \     nums.foldLeft(0l)((acc, num) => {\n            if (abs(num) > 10 && isFirstAndLastDigitOdd(num))\
    \ {\n                acc + 1\n            } else {\n                acc\n    \
    \        }\n        })\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcaujvinw.scala:40)\n\tat Problem.main(tmpcaujvinw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028763
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        var counter = 0l\n\
    \        for (num <- nums) {\n            val n = abs(num)\n            val firstDigit\
    \ = n / pow(10, floor(log10(n)).toInt).toLong\n            val lastDigit = n %\
    \ 10\n            if (n > 10 && firstDigit % 2 == 1 && lastDigit % 2 == 1) {\n\
    \                counter += 1\n            }\n        }\n        counter\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphxg8d_rx.scala:26)\n\tat Problem.main(tmphxg8d_rx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028762
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        nums.filter(n =>\
    \ n > 10 && n.toString.head.toString.toInt % 2 == 1 && n.toString.last.toString.toInt\
    \ % 2 == 1).length\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028766
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n      var numOfSpecialNums\
    \ = 0\n      for (num <- nums) {\n        if (abs(num) > 10 && isOdd(num.toString.charAt(0))\
    \ && isOdd(num.toString.charAt(num.toString.length() - 1))) {\n          numOfSpecialNums\
    \ += 1\n        }\n      }\n      return numOfSpecialNums\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong,\
    \ 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphfhdjy9p.scala:15:29 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mif\e[0m (abs(num) > \e[31m10\e[0m && isOdd(num.toString.charAt(\e\
    [31m0\e[0m)) && isOdd(num.toString.charAt(num.toString.length() - \e[31m1\e[0m)))\
    \ {\n\e[31m\e[31m   |\e[0m                             ^^^^^\e[0m\n\e[31m   |\e\
    [0m                             Not found: isOdd\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmphfhdjy9p.scala:15:62 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mif\e[0m (abs(num) > \e[31m10\e[0m && isOdd(num.toString.charAt(\e\
    [31m0\e[0m)) && isOdd(num.toString.charAt(num.toString.length() - \e[31m1\e[0m)))\
    \ {\n\e[31m\e[31m   |\e[0m                                                   \
    \           ^^^^^\e[0m\n\e[31m   |\e[0m                                      \
    \                  Not found: isOdd\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028761
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        return nums.filter(n\
    \ => (n > 10 && isOdd(n % 10) && isOdd(n / pow(10, floor(log10(n))))))\n     \
    \                                           .map(n => 1l)\n                  \
    \                              .sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp18hx7qwd.scala:13:43 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mreturn\e[0m nums.filter(\e[36mn\e[0m =>\
    \ (n > \e[31m10\e[0m && isOdd(n % \e[31m10\e[0m) && isOdd(n / pow(\e[31m10\e[0m,\
    \ floor(log10(n))))))\n\e[31m\e[31m   |\e[0m                                 \
    \          ^^^^^\e[0m\n\e[31m   |\e[0m                                       \
    \    Not found: isOdd\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp18hx7qwd.scala:13:60\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mreturn\e[0m\
    \ nums.filter(\e[36mn\e[0m => (n > \e[31m10\e[0m && isOdd(n % \e[31m10\e[0m) &&\
    \ isOdd(n / pow(\e[31m10\e[0m, floor(log10(n))))))\n\e[31m\e[31m   |\e[0m    \
    \                                                        ^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                                                        Not found: isOdd\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028761
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        def firstDigit(num\
    \ : Long) : Int = {\n            num.toString.head.asDigit\n        }\n      \
    \  def lastDigit(num : Long) : Int = {\n            num.toString.last.asDigit\n\
    \        }\n        nums.filter(num => num > 10 && firstDigit(num) % 2 == 1 &&\
    \ lastDigit(num) % 2 == 1).length\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong, -5l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong, 14l.toLong,\
    \ -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong, -2l.toLong,\
    \ -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n    assert(specialFilter((List[Long](43l.toLong,\
    \ -12l.toLong, 93l.toLong, 125l.toLong, 121l.toLong, 109l.toLong))) == (4l));\n\
    \    assert(specialFilter((List[Long](71l.toLong, -2l.toLong, -33l.toLong, 75l.toLong,\
    \ 21l.toLong, 19l.toLong))) == (3l));\n    assert(specialFilter((List[Long](1l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long]())) == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028765
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val nStr = nums.map(x\
    \ => x.toString)\n        nStr.filter(x => x.toLong > 10 && x.head.toString.toInt\
    \ % 2 == 1 && x.last.toString.toInt % 2 == 1).size\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong,\
    \ 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028767
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        var count = 0\n\
    \        for (num <- nums) {\n            if (num > 10 && (num % 10) % 2 == 1\
    \ && num / 10 == 0) count += 1\n        }\n        count\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong,\
    \ 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpoybr8zq5.scala:21)\n\tat Problem.main(tmpoybr8zq5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028765
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        nums.filter(n =>\
    \ (n.toString().head.toString().toInt % 2 != 0) && (n.toString().last.toString().toInt\
    \ % 2 != 0) && (n > 10)).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong, -5l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong, 14l.toLong,\
    \ -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong, -2l.toLong,\
    \ -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n    assert(specialFilter((List[Long](43l.toLong,\
    \ -12l.toLong, 93l.toLong, 125l.toLong, 121l.toLong, 109l.toLong))) == (4l));\n\
    \    assert(specialFilter((List[Long](71l.toLong, -2l.toLong, -33l.toLong, 75l.toLong,\
    \ 21l.toLong, 19l.toLong))) == (3l));\n    assert(specialFilter((List[Long](1l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long]())) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"-\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:658)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.specialFilter$$anonfun$1(tmpx31oz6hp.scala:13)\n\
    \tat scala.runtime.java8.JFunction1$mcZJ$sp.apply(JFunction1$mcZJ$sp.scala:17)\n\
    \tat scala.collection.immutable.List.filter(List.scala:515)\n\tat Problem$.specialFilter(tmpx31oz6hp.scala:13)\n\
    \tat Problem$.main(tmpx31oz6hp.scala:16)\n\tat Problem.main(tmpx31oz6hp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028766
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        var result = 0l\n\
    \        for (num <- nums) {\n            if (num.toString.length > 1 && num.toString.head.toString.toInt\
    \ % 2 != 0 && num.toString.last.toString.toInt % 2 != 0 && num > 10) {\n     \
    \           result += 1\n            }\n        }\n        result\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"-\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:658)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.specialFilter$$anonfun$1(tmpubdw6xlt.scala:15)\n\
    \tat scala.runtime.java8.JFunction1$mcVJ$sp.apply(JFunction1$mcVJ$sp.scala:18)\n\
    \tat scala.collection.immutable.List.foreach(List.scala:333)\n\tat Problem$.specialFilter(tmpubdw6xlt.scala:18)\n\
    \tat Problem$.main(tmpubdw6xlt.scala:22)\n\tat Problem.main(tmpubdw6xlt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028766
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        // Fill Up this\
    \ function body\n        // `nums` In case you do not remember, `List` is a type\
    \ which takes one type parameter (Int, String, ...)\n        // For example to\
    \ declare a `List` of `Long` type:\n        // var x = List[Long](1l,2l,3l)\n\
    \        nums.foldLeft(0l)((acc, x) => if (10 < x && x.toString.head.toString.toInt\
    \ % 2 == 1 && x.toString.last.toString.toInt % 2 == 1) acc + 1 else acc)\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028766
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        // Fill Up this\
    \ function body\n        // `nums` In your implementation, consider `nums` as\
    \ input\n        // Do not hardcode %10 or /10\n        // It is expected that\
    \ you use % and /\n        // Your solution will be evaluated on the basis of\
    \ correctness and \n        // performance\n        nums.filter(x => x > 10 &&\
    \ x % 2 == 1 && x % 10 == 1).length\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2yr639a9.scala:23)\n\tat Problem.main(tmp2yr639a9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028766
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        return nums.filter(num\
    \ => abs(num) > 10 && abs(num)%10%2 != 0 && num%10%2 != 0).length\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpehm323in.scala:17)\n\tat Problem.main(tmpehm323in.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028766
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        def firstDigit(n\
    \ : Long) : Long = {\n            if (n > -10 && n < 10) n else firstDigit(n /\
    \ 10)\n        }\n        def lastDigit(n : Long) : Long = {\n            n %\
    \ 10\n        }\n        nums.filter(n => abs(n) > 10 && firstDigit(n) % 2 ==\
    \ 1 && lastDigit(n) % 2 == 1).length\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028766
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n\tnums.map(n => n.toString).filter(n\
    \ => ((n.length > 1) && \n\t\t\t\t\t      (n.charAt(0).toString.toInt % 2 != 0)\
    \ && \n\t\t\t\t\t      (n.charAt(n.length - 1).toString.toInt % 2 != 0) && \n\t\
    \t\t\t\t      (n.toLong > 10l))).size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpidssbdx0.scala:17:4 ------------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m   Incompatible combinations of tabs and spaces in indentation prefixes.\n\e\
    [31m   |\e[0m   Previous indent : 1 tab\n\e[31m   |\e[0m   Latest indent   : 4\
    \ spaces\n1 error found\n"
  stdout: ''
  timestamp: 1660028762
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        var i = 0\n    \
    \    var count = 0\n        while (i < nums.length) {\n            if (nums(i)\
    \ > 10 && nums(i).toString.head.toString.toInt % 2 == 1 && nums(i).toString.last.toString.toInt\
    \ % 2 == 1) count += 1\n            i += 1\n        }\n        count\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028766
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n      nums.filter(x => x\
    \ > 10).filter(x => x.toString().startsWith(\"1\") || x.toString().startsWith(\"\
    3\") || x.toString().startsWith(\"5\") || x.toString().startsWith(\"7\") || x.toString().startsWith(\"\
    9\")).filter(x => x.toString().endsWith(\"1\") || x.toString().endsWith(\"3\"\
    ) || x.toString().endsWith(\"5\") || x.toString().endsWith(\"7\") || x.toString().endsWith(\"\
    9\")).length\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028766
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        var ret : Long =\
    \ 0\n        var stk : Stack[Char] = new Stack[Char]\n        for (x <- nums)\
    \ {\n            var s = x.toString\n            if (s.length > 1) {\n       \
    \         var t = s.toCharArray\n                if (t(0) % 2 != 0 && t(t.length\
    \ - 1) % 2 != 0) {\n                    if (x > 10) ret += 1\n               \
    \ }\n            }\n        }\n        return ret\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028766
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        def firstDigit(n\
    \ : Long) : Int = {\n            var nn = n\n            while (nn >= 10) nn /=\
    \ 10\n            nn.toInt\n        }\n        def lastDigit(n : Long) : Int =\
    \ {\n            n % 10\n        }\n        nums.filter(n => n > 10 && firstDigit(n)\
    \ % 2 == 1 && lastDigit(n) % 2 == 1).length\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpllnfi52b.scala:19:12\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m            n % \e[31m10\e[0m\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Found:\
    \    Long\n\e[31m   |\e[0m            Required: Int\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028765
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        var filter = 0l\n\
    \        for (num <- nums) {\n            if (num > 10 && (num % 10) % 2 == 1\
    \ && num / 10 > 0 && num / pow(10, (num.toString.length - 1).toInt) % 2 == 1)\
    \ filter += 1\n        }\n        filter\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1o60crym.scala:21)\n\tat Problem.main(tmp1o60crym.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028767
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n      // x is the currently\
    \ checked number\n      // xh is the first digit of the currently checked number\n\
    \      // xt is the last digit of the currently checked number\n      // count\
    \ is the number of numbers that satisfy the conditions\n      var count = 0\n\
    \      for (x <- nums) {\n        var xh = 0\n        var xt = 0\n        var\
    \ y = x\n        if (y >= 0) {\n          while (y > 0) {\n            xh = y\
    \ % 10\n            y = y / 10\n          }\n          xt = x % 10\n        }\
    \ else {\n          y = -y\n          while (y > 0) {\n            xh = y % 10\n\
    \            y = y / 10\n          }\n          xt = -(x % 10)\n        }\n  \
    \      if (x > 10 && (xh % 2 == 1 || xh % 2 == -1) && (xt % 2 == 1 || xt % 2 ==\
    \ -1)) {\n          count += 1\n        }\n      }\n      count\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6ax52k_d.scala:24:17\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m            xh = y % \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m                 ^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \           Found:    Long\n\e[31m   |\e[0m                 Required: Int\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6ax52k_d.scala:27:15\
    \ --------------------\e[0m\e[0m\n\e[31m27 |\e[0m          xt = x % \e[31m10\e\
    [0m\n\e[31m\e[31m   |\e[0m               ^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \       Found:    Long\n\e[31m   |\e[0m               Required: Int\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6ax52k_d.scala:31:17 --------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m            xh = y % \e[31m10\e[0m\n\e[31m\e[31m   |\e\
    [0m                 ^^^^^^\e[0m\n\e[31m   |\e[0m                 Found:    Long\n\
    \e[31m   |\e[0m                 Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp6ax52k_d.scala:34:15 --------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m          xt = -(x % \e[31m10\e[0m)\n\e[31m\e[31m   |\e\
    [0m               ^^^^^^^^^\e[0m\n\e[31m   |\e[0m               Found:    Long\n\
    \e[31m   |\e[0m               Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660028766
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        def isGreaterThan10(num\
    \ : Long) : Boolean = if (num > 10) true else false\n        def isFirstAndLastDigitOdd(num\
    \ : Long) : Boolean = {\n            val str = num.toString\n            if (str.length\
    \ == 1) {\n                if (num % 2 == 1) true else false\n            } else\
    \ {\n                if (str.head % 2 == 1 && str.last % 2 == 1) true else false\n\
    \            }\n        }\n        nums.filter(x => isGreaterThan10(x) && isFirstAndLastDigitOdd(x)).length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028773
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        var count = 0l\n\
    \        for (i <- nums) {\n            if (abs(i) > 10) {\n                val\
    \ j = abs(i)\n                val first = (j - j % 10) / 10\n                val\
    \ last = j % 10\n                if (first % 2 == 1 && last % 2 == 1) count +=\
    \ 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpploff8vt.scala:26)\n\tat Problem.main(tmpploff8vt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028774
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        var cnt = 0\n  \
    \      for (num <- nums) {\n            if (abs(num) > 10 && num % 2 == 1 && toString(num).last\
    \ == toString(num).head) cnt += 1\n        }\n        cnt\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong,\
    \ 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmps6k9p1m9.scala:15:58 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (abs(num) > \e[31m10\e[0m &&\
    \ num % \e[31m2\e[0m == \e[31m1\e[0m && toString(num).last == toString(num).head)\
    \ cnt += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                                 \
    \                         ^^^\e[0m\n\e[31m   |\e[0m         too many arguments\
    \ for \e[33mmethod\e[0m \e[35mtoString\e[0m in \e[33mclass\e[0m \e[35mAny\e[0m:\
    \ (): String\n1 error found\n"
  stdout: ''
  timestamp: 1660028769
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        return nums.filter(n\
    \ => n > 10 && n.toString.charAt(0).toInt % 2 == 1 && n.toString.charAt(n.toString.length\
    \ - 1).toInt % 2 == 1).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong, -5l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong, 14l.toLong,\
    \ -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong, -2l.toLong,\
    \ -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n    assert(specialFilter((List[Long](43l.toLong,\
    \ -12l.toLong, 93l.toLong, 125l.toLong, 121l.toLong, 109l.toLong))) == (4l));\n\
    \    assert(specialFilter((List[Long](71l.toLong, -2l.toLong, -33l.toLong, 75l.toLong,\
    \ 21l.toLong, 19l.toLong))) == (3l));\n    assert(specialFilter((List[Long](1l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long]())) == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028774
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        // Fill Up this\
    \ function body\n        // `nums` can be assigned to `nums` again\n        //\
    \ `specialFilter` should return the number of elements in the list that are greater\
    \ than 10 and both \n        // first and last digits of a number are odd (1,\
    \ 3, 5, 7, 9).\n        val number = nums.filter(x => x.toString.head.toString.toInt\
    \ % 2 != 0 && x.toString.last.toString.toInt % 2 != 0)\n        val num = number.filter(x\
    \ => x > 10)\n        num.length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong, -5l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong, 14l.toLong,\
    \ -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong, -2l.toLong,\
    \ -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n    assert(specialFilter((List[Long](43l.toLong,\
    \ -12l.toLong, 93l.toLong, 125l.toLong, 121l.toLong, 109l.toLong))) == (4l));\n\
    \    assert(specialFilter((List[Long](71l.toLong, -2l.toLong, -33l.toLong, 75l.toLong,\
    \ 21l.toLong, 19l.toLong))) == (3l));\n    assert(specialFilter((List[Long](1l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long]())) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"-\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:658)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$1(tmppjz3xaec.scala:17)\n\
    \tat scala.runtime.java8.JFunction1$mcZJ$sp.apply(JFunction1$mcZJ$sp.scala:17)\n\
    \tat scala.collection.immutable.List.filter(List.scala:529)\n\tat Problem$.specialFilter(tmppjz3xaec.scala:17)\n\
    \tat Problem$.main(tmppjz3xaec.scala:22)\n\tat Problem.main(tmppjz3xaec.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028774
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        // Fill Up this\
    \ function body\n        // `nums` is a list of integers\n        // You have\
    \ to return number of integers in `nums` list\n        // which are both greater\
    \ than 10 and have odd first digit\n        // as well as odd last digit.\n  \
    \      return 0l\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn5bebaf8.scala:22)\n\tat Problem.main(tmpn5bebaf8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028774
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        // Fill Up this\
    \ function body\n        // `nums` is a list of numbers\n        // `nums.length`\
    \ is the number of elements\n        // `nums(i)` is the ith element of the list\n\
    \        // Return the number of elements that match the required property\n \
    \       var ans : Long = 0l\n        for (i <- 0 until nums.length) {\n      \
    \      val n = nums(i)\n            if (n > 10) {\n                val s = n.toString\n\
    \                val last = s(s.length - 1).toString.toInt\n                val\
    \ first = s(0).toString.toInt\n                if (last % 2 == 1 && first % 2\
    \ == 1) ans += 1\n            }\n        }\n        ans\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong,\
    \ 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028775
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        nums.filter(x =>\
    \ math.abs(x) > 10 && math.abs(x) % 2 == 1 && (math.abs(x) / pow(10, math.log10(math.abs(x)).toInt)).toInt\
    \ % 2 == 1).length\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7ehhgqpp.scala:17)\n\tat Problem.main(tmp7ehhgqpp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028776
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        // Fill Up this\
    \ function body\n        // `nums` is List[Long]\n        // The function should\
    \ return Long\n        def isSpecial(n : Long) : Boolean = {\n            if (n\
    \ < 10 || n > 10) {\n                val fd = n % 10\n                val sd =\
    \ n / 10 % 10\n                ((fd + sd) % 2 != 0)\n            } else {\n  \
    \              false\n            }\n        }\n        nums.filter(isSpecial(_)).length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9lef23p_.scala:28)\n\tat Problem.main(tmp9lef23p_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028776
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        nums.filter(x =>\
    \ x.toString.length >= 2 && x.toString.head.toString.toInt % 2 == 1 && \n    \
    \        x.toString.last.toString.toInt % 2 == 1 && x > 10).length\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"-\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:658)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.specialFilter$$anonfun$1(tmps8xa7dp3.scala:13)\n\
    \tat scala.runtime.java8.JFunction1$mcZJ$sp.apply(JFunction1$mcZJ$sp.scala:17)\n\
    \tat scala.collection.immutable.List.filter(List.scala:515)\n\tat Problem$.specialFilter(tmps8xa7dp3.scala:14)\n\
    \tat Problem$.main(tmps8xa7dp3.scala:17)\n\tat Problem.main(tmps8xa7dp3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028776
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        // Fill Up this\
    \ function body\n        // `nums` contains the list of numbers passed\n     \
    \   // Return the number of elements that satisfy the given conditions\n     \
    \   // Implement the algorithm using Scala\n        def isFirstAndLastDigitOdd(num\
    \ : Long) : Boolean = {\n            val lastDigit = num % 10\n            var\
    \ num1 = num\n            while (num1 >= 10) {\n                num1 /= 10\n \
    \           }\n            return (num1 % 2 == 1 && lastDigit % 2 == 1)\n    \
    \    }\n        def filter(nums : List[Long]) : List[Long] = {\n            if\
    \ (nums.isEmpty) return List()\n            if (nums.head > 10 && isFirstAndLastDigitOdd(nums.head))\n\
    \                return nums.head :: filter(nums.tail)\n            else\n   \
    \             return filter(nums.tail)\n        }\n        return filter(nums).length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028777
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n    \t// Fill Up this function\
    \ body\n        // `nums` is a list of numbers\n        // return the number of\
    \ elements in the list that are greater than 10 and both \n        // first and\
    \ last digits of a number are odd (1, 3, 5, 7, 9).\n        var curr_num : Long\
    \ = 0\n        var first_digit : Long = 0\n        var last_digit : Long = 0\n\
    \        var count : Long = 0\n        var flag : Boolean = false\n        for\
    \ (curr_num <- nums) {\n            first_digit = curr_num / 10\n            last_digit\
    \ = curr_num % 10\n            if (curr_num > 10) {\n                if (first_digit\
    \ % 2 != 0) {\n                    if (last_digit % 2 != 0) {\n              \
    \          count += 1\n                    }\n                }\n            }\n\
    \        }\n        return count\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong, -5l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong, 14l.toLong,\
    \ -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong, -2l.toLong,\
    \ -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n    assert(specialFilter((List[Long](43l.toLong,\
    \ -12l.toLong, 93l.toLong, 125l.toLong, 121l.toLong, 109l.toLong))) == (4l));\n\
    \    assert(specialFilter((List[Long](71l.toLong, -2l.toLong, -33l.toLong, 75l.toLong,\
    \ 21l.toLong, 19l.toLong))) == (3l));\n    assert(specialFilter((List[Long](1l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long]())) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpktbj4g63.scala:38)\n\tat Problem.main(tmpktbj4g63.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028777
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val even : Long\
    \ = 2\n        val odd : Long = 1\n        var count : Long = 0\n        for (num\
    \ <- nums) {\n            if (num > 10) {\n                val last : Long = num\
    \ % 10\n                var num2 : Long = num\n                while (num2 > 10)\
    \ {\n                    num2 = num2 / 10\n                }\n               \
    \ val first : Long = num2\n                if (last % even != 0 && first % even\
    \ != 0) {\n                    count += 1\n                }\n            }\n\
    \        }\n        return count\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong, -5l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong, 14l.toLong,\
    \ -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong, -2l.toLong,\
    \ -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n    assert(specialFilter((List[Long](43l.toLong,\
    \ -12l.toLong, 93l.toLong, 125l.toLong, 121l.toLong, 109l.toLong))) == (4l));\n\
    \    assert(specialFilter((List[Long](71l.toLong, -2l.toLong, -33l.toLong, 75l.toLong,\
    \ 21l.toLong, 19l.toLong))) == (3l));\n    assert(specialFilter((List[Long](1l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long]())) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbod61k41.scala:34)\n\tat Problem.main(tmpbod61k41.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028777
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        nums.filter(x =>\
    \ {\n            (x > 10) && (x % 2 == 1) && (x.toString().last.toInt % 2 == 1)\n\
    \        }).length\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp34s3zsdr.scala:20)\n\tat Problem.main(tmp34s3zsdr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028777
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val firstDigitOdd\
    \ = (x : Long) => x.toString.head.toString.toInt % 2 == 1\n        val lastDigitOdd\
    \ = (x : Long) => x.toString.last.toString.toInt % 2 == 1\n        val greaterThanTen\
    \ = (x : Long) => x > 10\n        nums.filter(firstDigitOdd).filter(lastDigitOdd).filter(greaterThanTen).length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"-\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:658)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$1(tmpbfmd712j.scala:13)\n\
    \tat scala.runtime.java8.JFunction1$mcZJ$sp.apply(JFunction1$mcZJ$sp.scala:17)\n\
    \tat scala.collection.immutable.List.filter(List.scala:529)\n\tat Problem$.specialFilter(tmpbfmd712j.scala:16)\n\
    \tat Problem$.main(tmpbfmd712j.scala:19)\n\tat Problem.main(tmpbfmd712j.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028777
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val n = nums.filter(n\
    \ => n > 10 && (n % 2 == 1) && (n.toString.head.toString.toInt % 2 == 1) && (n.toString.last.toString.toInt\
    \ % 2 == 1)).size\n        return n\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028778
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        if (nums.length\
    \ == 0) 0\n        else {\n            if (nums.head > 10 && isFirstAndLastDigitOdd(nums.head))\
    \ 1 + specialFilter(nums.tail)\n            else specialFilter(nums.tail)\n  \
    \      }\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpysaeik1w.scala:15:34 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (nums.head > \e[31m10\e[0m\
    \ && isFirstAndLastDigitOdd(nums.head)) \e[31m1\e[0m + specialFilter(nums.tail)\n\
    \e[31m\e[31m   |\e[0m                                  ^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  Not found: isFirstAndLastDigitOdd\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028773
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val low : Long =\
    \ 10\n        nums.filter(\n            num => (num >= low) && (firstDigit(num)\
    \ % 2 == 1) && (lastDigit(num) % 2 == 1)\n        ).length\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong,\
    \ 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxuxyif9p.scala:15:36 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[36mnum\e[0m => (num >= low) && (firstDigit(num)\
    \ % \e[31m2\e[0m == \e[31m1\e[0m) && (lastDigit(num) % \e[31m2\e[0m == \e[31m1\e\
    [0m)\n\e[31m\e[31m   |\e[0m                                    ^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                    Not found: firstDigit\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxuxyif9p.scala:15:66 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[36mnum\e[0m => (num >= low) && (firstDigit(num)\
    \ % \e[31m2\e[0m == \e[31m1\e[0m) && (lastDigit(num) % \e[31m2\e[0m == \e[31m1\e\
    [0m)\n\e[31m\e[31m   |\e[0m                                                  \
    \                ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                             \
    \                       Not found: lastDigit\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028774
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n      def firstDigit(n :\
    \ Long) : Int = {\n        return n.toString().toList.head.toString().toInt\n\
    \      }\n      def lastDigit(n : Long) : Int = {\n        return n.toString().toList.last.toString().toInt\n\
    \      }\n      return nums.filter(x => (x > 10) && (firstDigit(x) % 2 == 1) &&\
    \ (lastDigit(x) % 2 == 1)).length\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong, -5l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong, 14l.toLong,\
    \ -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong, -2l.toLong,\
    \ -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n    assert(specialFilter((List[Long](43l.toLong,\
    \ -12l.toLong, 93l.toLong, 125l.toLong, 121l.toLong, 109l.toLong))) == (4l));\n\
    \    assert(specialFilter((List[Long](71l.toLong, -2l.toLong, -33l.toLong, 75l.toLong,\
    \ 21l.toLong, 19l.toLong))) == (3l));\n    assert(specialFilter((List[Long](1l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long]())) == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028779
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        nums.filter(x =>\
    \ abs(x) >= 10 && abs(x).toString.init.last.toInt % 2 == 1 && abs(x).toString.last.toInt\
    \ % 2 == 1).length\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkibepnu1.scala:17)\n\tat Problem.main(tmpkibepnu1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028778
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        // Fill Up this\
    \ function body\n        // `nums` is a list of integers\n        // remember\
    \ you can use multiline statements if you need to\n        var count = 0l\n  \
    \      for (num <- nums) {\n            if (num > 10 && (num % 10).abs % 2 ==\
    \ 1 && num.abs / 10 % 10 % 2 == 1) count += 1\n        }\n        count\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3vh727xf.scala:25)\n\tat Problem.main(tmp3vh727xf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028777
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        nums.filter((num\
    \ : Long) => num.toString.length > 1 && \n            abs(num) > 10 && (num.toString.head.toString.toInt\
    \ % 2 == 1) &&\n            (num.toString.last.toString.toInt % 2 == 1)).length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"-\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:658)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.specialFilter$$anonfun$1(tmpj9xqf4y2.scala:14)\n\
    \tat scala.runtime.java8.JFunction1$mcZJ$sp.apply(JFunction1$mcZJ$sp.scala:17)\n\
    \tat scala.collection.immutable.List.filter(List.scala:529)\n\tat Problem$.specialFilter(tmpj9xqf4y2.scala:15)\n\
    \tat Problem$.main(tmpj9xqf4y2.scala:19)\n\tat Problem.main(tmpj9xqf4y2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028778
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        nums.count(x =>\
    \ x > 10 && (x % 2 != 0) && (x / 10 % 2 != 0))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmph00suxm7.scala:18)\n\tat Problem.main(tmph00suxm7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028778
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        var acc = 0l\n \
    \       for (i <- nums) {\n            if (i > 10 && i.toString.size > 1 && (i.toString.last\
    \ - '0') % 2 == 1 && (i.toString.head - '0') % 2 == 1) acc += 1\n        }\n \
    \       acc\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028781
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        nums.filter(x =>\
    \ {\n            val str = x.toString\n            val first = str.charAt(0).toString.toInt\n\
    \            val last = str.charAt(str.length - 1).toString.toInt\n          \
    \  (first % 2 != 0) && (last % 2 != 0) && (x > 10)\n        }).length\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"-\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:658)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.specialFilter$$anonfun$1(tmpjuhv68ko.scala:15)\n\
    \tat scala.runtime.java8.JFunction1$mcZJ$sp.apply(JFunction1$mcZJ$sp.scala:17)\n\
    \tat scala.collection.immutable.List.filter(List.scala:515)\n\tat Problem$.specialFilter(tmpjuhv68ko.scala:18)\n\
    \tat Problem$.main(tmpjuhv68ko.scala:21)\n\tat Problem.main(tmpjuhv68ko.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028784
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        def isGreaterThan10(num\
    \ : Long) : Boolean = num > 10\n        def isFirstLastDigitOdd(num : Long) :\
    \ Boolean = {\n            val firstDigit = num.toString.head.asDigit\n      \
    \      val lastDigit = num.toString.last.asDigit\n            firstDigit % 2 ==\
    \ 1 && lastDigit % 2 == 1\n        }\n        val greaterThan10 = nums.filter(isGreaterThan10)\n\
    \        greaterThan10.filter(isFirstLastDigitOdd).length\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong,\
    \ 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028785
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        nums.filter(x =>\
    \ x.toString.length > 1 && x > 10 && x.toString.head.toString.toInt % 2 != 0 &&\
    \ x.toString.last.toString.toInt % 2 != 0).length\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028785
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        var count = 0l\n\
    \        for (num <- nums) {\n            if (num > 10 && Math.abs(num) % 10 %\
    \ 2 == 1 && num / pow(10, Math.log10(Math.abs(num)).toInt) % 2 == 1) count +=\
    \ 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong, -5l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong, 14l.toLong,\
    \ -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong, -2l.toLong,\
    \ -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n    assert(specialFilter((List[Long](43l.toLong,\
    \ -12l.toLong, 93l.toLong, 125l.toLong, 121l.toLong, 109l.toLong))) == (4l));\n\
    \    assert(specialFilter((List[Long](71l.toLong, -2l.toLong, -33l.toLong, 75l.toLong,\
    \ 21l.toLong, 19l.toLong))) == (3l));\n    assert(specialFilter((List[Long](1l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long]())) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgjjhwo14.scala:21)\n\tat Problem.main(tmpgjjhwo14.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028785
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        var firstDigitIsOdd\
    \ = false\n        var lastDigitIsOdd = false\n        var result = 0\n      \
    \  for (num <- nums) {\n            if (num > 10) {\n                firstDigitIsOdd\
    \ = num % 10 > 0 && num % 10 < 8\n                lastDigitIsOdd = (num / pow(10,\
    \ floor(log10(num)).toInt)).toInt % 2 == 1\n                if (firstDigitIsOdd\
    \ && lastDigitIsOdd) {\n                    result += 1\n                }\n \
    \           }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnks_brmd.scala:29)\n\tat Problem.main(tmpnks_brmd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028785
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        def digits(n : Long)\
    \ : List[Long] = {\n            if (n == 0) List[Long]()\n            else (n\
    \ % 10) :: digits(n / 10)\n        }\n        def isFirstLastDigitOdd(n : Long)\
    \ : Boolean = {\n            val l = digits(n)\n            l.size > 0 && l.size\
    \ > 1 && l(0) % 2 == 1 && l(l.size - 1) % 2 == 1\n        }\n        def isSpecial(n\
    \ : Long) : Boolean = {\n            n > 10 && isFirstLastDigitOdd(n)\n      \
    \  }\n        nums.count(n => isSpecial(n))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028785
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        nums.filter(i =>\
    \ i > 10 && {(i % 10) % 2 == 1 && (i / pow(10, log10(i).toInt)).toInt % 2 == 1}).length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028785
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        nums.count(x =>\
    \ x.toString.size > 1 && x > 10 && (x.toString.head.toString.toInt % 2 == 1) &&\
    \ (x.toString.last.toString.toInt % 2 == 1))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028786
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        def recurse(num\
    \ : Long) : Boolean = {\n            num < 10 && num % 2 == 1\n        }\n   \
    \     nums.filter((num) => {\n            num >= 10 && recurse(num % 10) && recurse(num\
    \ / (pow(10, num.toString.length - 1).toLong))\n        }).length\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028787
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n    \tnums.filter(x => x.toString.length\
    \ > 1 && x > 10 && x.toString.last.toInt % 2 == 1 && x.toString.take(1).toInt\
    \ % 2 == 1).length\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028787
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        // Fill Up this\
    \ function body\n        // `nums` are the input numbers and are of type `List[Long]`\n\
    \        // The output should be a `Long`\n        nums.filter(x => (x > 10) &&\
    \ (x % 2 == 1) && ((x % 10) % 2 == 1)).length\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjy56l5to.scala:21)\n\tat Problem.main(tmpjy56l5to.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028788
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        nums.filter(p =>\
    \ {\n            var count = 0\n            var x = p\n            while (x >\
    \ 0) {\n                x /= 10\n                count += 1\n            }\n \
    \           var first = p / pow(10, count - 1).toLong\n            var last =\
    \ p % 10\n            p > 10 && (first % 2 == 1 && last % 2 == 1)\n        }).length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArithmeticException: / by zero\n\tat Problem$.specialFilter$$anonfun$1(tmpjnss7v78.scala:20)\n\
    \tat scala.runtime.java8.JFunction1$mcZJ$sp.apply(JFunction1$mcZJ$sp.scala:17)\n\
    \tat scala.collection.immutable.List.filter(List.scala:515)\n\tat Problem$.specialFilter(tmpjnss7v78.scala:23)\n\
    \tat Problem$.main(tmpjnss7v78.scala:26)\n\tat Problem.main(tmpjnss7v78.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028788
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        // Fill Up this\
    \ function body\n        // `nums` is a List of Long\n        // use pattern matching\
    \ and for loop to solve this problem\n        nums.filter(x => x > 10 && x.toString().head.toString().toInt\
    \ % 2 != 0 && x.toString().last.toString().toInt % 2 != 0).length\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028788
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        var sum = 0l\n \
    \       for (num <- nums) {\n            if (num > 10 && num.toString.head.toInt\
    \ % 2 == 1 && num.toString.last.toInt % 2 == 1) {\n                sum += 1\n\
    \            }\n        }\n        sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028788
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        // Fill Up this\
    \ function body\n        // `nums` is list of long\n        // output should be\
    \ a long\n        var count = 0L\n        for (e <- nums) {\n            if (abs(e)\
    \ > 10 && e % 2 != 0 && e / 10 % 2 != 0) count += 1\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbyh62wvb.scala:24)\n\tat Problem.main(tmpbyh62wvb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028788
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        // Fill up this\
    \ function body\n        // It should return the number of elements that satisfy\
    \ the given property\n        var count = 0\n        for (i <- nums) {\n     \
    \       if (i >= 10 && isOdd(i.toString.head) && isOdd(i.toString.last)) {\n \
    \               count += 1\n            }\n        }\n        count\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8wndm49g.scala:17:27 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mif\e[0m (i >= \e[31m10\e[0m && isOdd(i.toString.head)\
    \ && isOdd(i.toString.last)) {\n\e[31m\e[31m   |\e[0m                        \
    \   ^^^^^\e[0m\n\e[31m   |\e[0m                           Not found: isOdd\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8wndm49g.scala:17:53\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            \e[33mif\e[0m\
    \ (i >= \e[31m10\e[0m && isOdd(i.toString.head) && isOdd(i.toString.last)) {\n\
    \e[31m\e[31m   |\e[0m                                                     ^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                     Not found:\
    \ isOdd\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028785
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        def isValid(n :\
    \ Long) : Boolean = {\n            if (n < 10) return false\n            var current\
    \ = n\n            while (current != 0) {\n                val digit = current\
    \ % 10\n                if (digit % 2 == 0) return false\n                current\
    \ /= 10\n            }\n            true\n        }\n        nums.filter(x =>\
    \ isValid(x)).length\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpr_8126b4.scala:28)\n\tat Problem.main(tmpr_8126b4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028788
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n    \tnums.count(x => x\
    \ > 10 && hasOddFirstLastDigit(x))\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong, -5l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong, 14l.toLong,\
    \ -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong, -2l.toLong,\
    \ -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n    assert(specialFilter((List[Long](43l.toLong,\
    \ -12l.toLong, 93l.toLong, 125l.toLong, 121l.toLong, 109l.toLong))) == (4l));\n\
    \    assert(specialFilter((List[Long](71l.toLong, -2l.toLong, -33l.toLong, 75l.toLong,\
    \ 21l.toLong, 19l.toLong))) == (3l));\n    assert(specialFilter((List[Long](1l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long]())) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpowtdre6n.scala:13:34 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m    \tnums.count(\e[36mx\e[0m => x > \e[31m10\e[0m &&\
    \ hasOddFirstLastDigit(x))\n\e[31m\e[31m   |\e[0m    \t                      \
    \    ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \t                        \
    \  Not found: hasOddFirstLastDigit\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028785
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        // Fill Up this\
    \ function body\n        // `nums` In case you do not remember is a list of all\
    \ the numbers\n        // For example: if `nums` is (1, 2, 3, 4, 5)\n        //\
    \ This means: there are 5 numbers\n        // 1, 2, 3, 4, 5\n        var count\
    \ = 0l;\n        nums.foreach(num => {\n            var x = num.toString\n   \
    \         if (x.toLong > 10 && (x.charAt(0).toString.toInt % 2 != 0) && (x.charAt(x.length\
    \ - 1).toString.toInt % 2 != 0)) {\n                count += 1\n            }\n\
    \        })\n        count\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong, -5l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong, 14l.toLong,\
    \ -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong, -2l.toLong,\
    \ -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n    assert(specialFilter((List[Long](43l.toLong,\
    \ -12l.toLong, 93l.toLong, 125l.toLong, 121l.toLong, 109l.toLong))) == (4l));\n\
    \    assert(specialFilter((List[Long](71l.toLong, -2l.toLong, -33l.toLong, 75l.toLong,\
    \ 21l.toLong, 19l.toLong))) == (3l));\n    assert(specialFilter((List[Long](1l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long]())) == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028789
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        // Fill Up this\
    \ function body\n        // `nums` = List[Long]\n        // Do Not Write anything\
    \ outside this function\n        // Implementation Goes Here\n        var count\
    \ = 0\n        for (i <- nums) {\n            var p = abs(i)\n            var\
    \ s = 0\n            var r = 0\n            var r1 = 0\n            var r2 = 0\n\
    \            if (p > 10) {\n                while (p != 0) {\n               \
    \     var k = p % 10\n                    s = s + k\n                    p = p\
    \ / 10\n                    r1 = r1 + 1\n                }\n                p\
    \ = s\n                while (p != 0) {\n                    var k = p % 10\n\
    \                    r = r + k\n                    p = p / 10\n             \
    \       r2 = r2 + 1\n                }\n                if (r1 == r2) {\n    \
    \                if (r % 2 != 0) {\n                        if (s % 2 != 0) {\n\
    \                            count = count + 1\n                        }\n  \
    \                  }\n                }\n            }\n        }\n        count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpx1ad75ys.scala:27:24\
    \ --------------------\e[0m\e[0m\n\e[31m27 |\e[0m                    s = s + k\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                   Found:    Long\n\e[31m   |\e[0m                        Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpx1ad75ys.scala:34:24\
    \ --------------------\e[0m\e[0m\n\e[31m34 |\e[0m                    r = r + k\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                   Found:    Long\n\e[31m   |\e[0m                        Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028789
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        // Your code here\n\
    \        nums.filter(x => x > 10 && x.toString.charAt(0).toString.toInt % 2 !=\
    \ 0 && x.toString.charAt(x.toString.length - 1).toString.toInt % 2 != 0).length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028789
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val f = (x : Long)\
    \ => x.toString\n        val g = (x : String) => x.substring(1, x.length - 1)\n\
    \        val h = (x : String) => x.split(\"\")\n        val k = (x : Array[String])\
    \ => x.filter(_ != \"\").filter(_.toInt % 2 == 1)\n        nums.filter(_ > 10).filter(x\
    \ => {\n            val y = g(f(x))\n            k(h(y)).length == 2\n       \
    \ }).length\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpka_4k550.scala:24)\n\tat Problem.main(tmpka_4k550.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028792
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val res = nums.filter(x\
    \ => x > 10 && x.toString.length > 1 && (x.toString.head.toString.toInt % 2 ==\
    \ 1) && (x.toString.last.toString.toInt % 2 == 1))\n        return res.length.toLong\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028793
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        // Fill Up this\
    \ function body\n        // `nums` contains all the numbers\n        // Compute\
    \ and return the number of elements in `nums` that satisfy the condition\n   \
    \     // **count of all the numbers > 10 such that 1st and last digits are odd.\n\
    \        nums.filter(x => x > 10 && x % 2 != 0 && (x % 10) % 2 != 0).size\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3d8otx9q.scala:22)\n\tat Problem.main(tmp3d8otx9q.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028796
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        // Fill Up this\
    \ function body\n        // `nums` is a list of numbers\n        // return the\
    \ number of elements greater than 10 and both first and last digits are odd\n\
    \        var cnt = 0\n        for (n <- nums) {\n            if (n > 10 && abs(n)\
    \ % 10 % 2 == 1 && n / pow(10, n.toString.length - 1).toLong % 2 == 1) {\n   \
    \             cnt += 1\n            }\n        }\n        cnt\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028796
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        nums.filter(n =>\
    \ (n % 2 != 0) && (abs(n) > 10)).map(n => (n / 10) % 10 != 0).filter(n => n).size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpomqn4k1t.scala:17)\n\tat Problem.main(tmpomqn4k1t.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028796
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        return nums.filter(x\
    \ => abs(x) > 10 && abs(x) % 10 % 2 == 1 && x / abs(x / 10) % 10 % 2 == 1).length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp60vcow_x.scala:19)\n\tat Problem.main(tmp60vcow_x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028796
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        return nums.filter(x\
    \ => x > 10 && abs(x).toString.charAt(0).toInt % 2 == 1 && abs(x).toString.charAt(abs(x).toString.length\
    \ - 1).toInt % 2 == 1).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong, -5l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong, 14l.toLong,\
    \ -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong, -2l.toLong,\
    \ -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n    assert(specialFilter((List[Long](43l.toLong,\
    \ -12l.toLong, 93l.toLong, 125l.toLong, 121l.toLong, 109l.toLong))) == (4l));\n\
    \    assert(specialFilter((List[Long](71l.toLong, -2l.toLong, -33l.toLong, 75l.toLong,\
    \ 21l.toLong, 19l.toLong))) == (3l));\n    assert(specialFilter((List[Long](1l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long]())) == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028796
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n\t\tval s = nums.filter(x\
    \ => x >= 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt\
    \ % 2 == 1)\n\t\treturn s.length.toLong\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpb45mqe2a.scala:15:4 ------------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m   Incompatible combinations of tabs and spaces in indentation prefixes.\n\e\
    [31m   |\e[0m   Previous indent : 2 tabs\n\e[31m   |\e[0m   Latest indent   :\
    \ 4 spaces\n1 error found\n"
  stdout: ''
  timestamp: 1660028793
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        // Fill Up this\
    \ function body\n        // `nums` In case you do not know what it means, look\
    \ it up in google.\n        return -1\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_1965qbf.scala:18)\n\tat Problem.main(tmp_1965qbf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028796
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        var count = 0\n\
    \        for (i <- nums) {\n            if (i > 10 && firstIsOdd(i) && lastIsOdd(i))\
    \ count += 1\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphnqqm05c.scala:15:26 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (i > \e[31m10\e[0m && firstIsOdd(i)\
    \ && lastIsOdd(i)) count += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m              \
    \            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                          Not found:\
    \ firstIsOdd\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphnqqm05c.scala:15:43\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m\
    \ (i > \e[31m10\e[0m && firstIsOdd(i) && lastIsOdd(i)) count += \e[31m1\e[0m\n\
    \e[31m\e[31m   |\e[0m                                           ^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                           Not found: lastIsOdd\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028793
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        def isValid(n :\
    \ Long) : Boolean = {\n            val s = n.toString\n            (n > 10) &&\
    \ (s(0).toString.toInt % 2 == 1) && (s(s.length - 1).toString.toInt % 2 == 1)\n\
    \        }\n        nums.filter(isValid).length\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028797
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val nums2 = for(i\
    \ <- nums; if(i > 10)) yield i\n        val nums3 = for(i <- nums2; if(i.toString.length\
    \ > 1)) yield i\n        val nums4 = for(i <- nums3; if(i.toString.charAt(0).asDigit\
    \ % 2 == 1 && i.toString.charAt(i.toString.length - 1).asDigit % 2 == 1)) yield\
    \ i\n        nums4.length\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028797
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        // Fill Up this\
    \ function body\n        // `nums` is a list containing some integers\n      \
    \  // Calculate and return the number of integers in `nums` that are\n       \
    \ // greater than 10, and both first and last digits of a number are odd.\n  \
    \      // For example:\n        // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n        // (1l)\n        // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n        // (2l)\n\
    \        // -15 % 10 = -5\n        //  15 % 10 =  5\n        // 15 / 10 = 1\n\
    \        // -15 / 10 = -1\n        def isFirstAndLastOdd(num : Long) : Boolean\
    \ = {\n            if (num < 0) {\n                if (abs(num) % 10 % 2 == 1\
    \ && abs(num) / 10 % 2 == 1) true\n                else false\n            }\n\
    \            else {\n                if (num % 10 % 2 == 1 && num / 10 % 2 ==\
    \ 1) true\n                else false\n            }\n        }\n        var count\
    \ = 0\n        for (num <- nums) {\n            if (num > 10 && isFirstAndLastOdd(num))\
    \ count += 1\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0zomgpbw.scala:45)\n\tat Problem.main(tmp0zomgpbw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028798
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        return nums.filter(x\
    \ => x > 10 && x.toString.charAt(0).asDigit % 2 == 1 && x.toString.charAt(x.toString.length\
    \ - 1).asDigit % 2 == 1).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong, -5l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong, 14l.toLong,\
    \ -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong, -2l.toLong,\
    \ -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n    assert(specialFilter((List[Long](43l.toLong,\
    \ -12l.toLong, 93l.toLong, 125l.toLong, 121l.toLong, 109l.toLong))) == (4l));\n\
    \    assert(specialFilter((List[Long](71l.toLong, -2l.toLong, -33l.toLong, 75l.toLong,\
    \ 21l.toLong, 19l.toLong))) == (3l));\n    assert(specialFilter((List[Long](1l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long]())) == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028797
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        nums.filter(x =>\
    \ (abs(x) > 10l && (abs(x) % 10l % 2l != 0l) && ((abs(x) / pow(10l, floor(log10(abs(x))))).toLong\
    \ % 2l != 0l))).length\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8ww7p51_.scala:17)\n\tat Problem.main(tmp8ww7p51_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028798
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        var result = 0\n\
    \        for (num <- nums) {\n            if (num > 10 && num.toString.charAt(0).asDigit\
    \ % 2 == 1 && num.toString.charAt(num.toString.length - 1).asDigit % 2 == 1) result\
    \ += 1\n        }\n        result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong, -5l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong, 14l.toLong,\
    \ -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong, -2l.toLong,\
    \ -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n    assert(specialFilter((List[Long](43l.toLong,\
    \ -12l.toLong, 93l.toLong, 125l.toLong, 121l.toLong, 109l.toLong))) == (4l));\n\
    \    assert(specialFilter((List[Long](71l.toLong, -2l.toLong, -33l.toLong, 75l.toLong,\
    \ 21l.toLong, 19l.toLong))) == (3l));\n    assert(specialFilter((List[Long](1l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long]())) == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028799
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n    \tval digitCount = (floor(log10(abs(nums.max)))\
    \ + 1).toInt\n    \tnums.filter(x => abs(x) > 10 && \n    \t\t\t\t\tx.toString.substring(0,\
    \ 1).toInt % 2 != 0 && \n    \t\t\t\t\tx.toString.substring(digitCount - 1, digitCount).toInt\
    \ % 2 != 0).size\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"-\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:658)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.specialFilter$$anonfun$1(tmpgg8nxsfv.scala:15)\n\
    \tat scala.runtime.java8.JFunction1$mcZJ$sp.apply(JFunction1$mcZJ$sp.scala:17)\n\
    \tat scala.collection.immutable.List.filter(List.scala:529)\n\tat Problem$.specialFilter(tmpgg8nxsfv.scala:16)\n\
    \tat Problem$.main(tmpgg8nxsfv.scala:20)\n\tat Problem.main(tmpgg8nxsfv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028799
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        // Your code goes\
    \ here.\n        // Replace 0 with your answer.\n        def isGood(x : Long)\
    \ : Boolean = {\n            val xStr = x.toString\n            if (x < 10) {\n\
    \                return false\n            }\n            if (xStr.head.toString.toInt\
    \ % 2 == 0 || xStr.last.toString.toInt % 2 == 0) {\n                return false\n\
    \            }\n            return true\n        }\n        nums.filter(isGood(_)).length.toLong\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028799
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        var count = 0\n\
    \        for (num <- nums) {\n            if (num > 10 && num.toString.length\
    \ > 1 && num.toString.charAt(0).asDigit % 2 == 1 && num.toString.charAt(num.toString.length\
    \ - 1).asDigit % 2 == 1) count += 1\n        }\n        count\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028799
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val result = nums.filter(x\
    \ => isBothFirstAndLastDigitsOdd(x)).count(x => x > 10)\n        return result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp63p2zs45.scala:13:38 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = nums.filter(\e\
    [36mx\e[0m => isBothFirstAndLastDigitsOdd(x)).count(\e[36mx\e[0m => x > \e[31m10\e\
    [0m)\n\e[31m\e[31m   |\e[0m                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  Not found: isBothFirstAndLastDigitsOdd\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028796
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        nums.filter(x =>\
    \ {\n            val s = x.toString()\n            (x > 10) && (s(0).toString.toInt\
    \ % 2 == 1) && (s(s.length - 1).toString.toInt % 2 == 1)\n        }).length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028800
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n\t\tnums.filter(x => x >\
    \ 10 && x % 2 == 1 && x % 10 == 1).length\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpj50ovsrx.scala:14:4 ------------------------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m   Incompatible combinations of tabs and spaces in indentation prefixes.\n\e\
    [31m   |\e[0m   Previous indent : 2 tabs\n\e[31m   |\e[0m   Latest indent   :\
    \ 4 spaces\n1 error found\n"
  stdout: ''
  timestamp: 1660028797
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        nums.filter(n =>\
    \ n > 10 && (n % 2 == 1) && (n.toString.last.toString.toInt % 2 == 1)).length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpj7wgrveq.scala:18)\n\tat Problem.main(tmpj7wgrveq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028801
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        var count = 0l\n\
    \        for (num <- nums) {\n            if (num > 10) {\n                val\
    \ firstDigit = num.toString.substring(0, 1).toInt\n                val lastDigit\
    \ = num.toString.substring(num.toString.length - 1, num.toString.length).toInt\n\
    \                if (firstDigit % 2 == 1 && lastDigit % 2 == 1) count += 1\n \
    \           }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028803
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        // Fill up this\
    \ function body\n        // You can add another function as well, if required\n\
    \        def bothOdd(num : Long) : Boolean = {\n            var s = num.toString.map(x\
    \ => x.asDigit)\n            return (s(0) % 2 != 0 && s(s.length - 1) % 2 != 0)\n\
    \        }\n        var r = nums.filter(x => x > 10 && bothOdd(x))\n        return\
    \ r.length\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028804
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        nums.count(n =>\
    \ n > 10 &&\n        n.toString.head.toString.toInt % 2 == 1 &&\n        n.toString.last.toString.toInt\
    \ % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028805
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        nums.map(x => if\
    \ (x > 10 && x % 2 == 1 && (x / 10) % 2 == 1) 1 else 0).reduce(_ + _)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpu3_antsq.scala:18)\n\tat Problem.main(tmpu3_antsq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028805
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        // Fill Up this\
    \ function body\n                // To print the output to the screen\n      \
    \          // Console.println(\"Hello World\")\n                var count = 0\n\
    \                nums.foreach{ n => if (n > 10 && n % 2 == 1 && n / 10 % 2 ==\
    \ 1) count += 1}\n                count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5xdg5_sr.scala:23)\n\tat Problem.main(tmp5xdg5_sr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028807
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        // Fill up this\
    \ function body\n        // You can add another function as well, if required\n\
    \        0\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1jt9crc8.scala:19)\n\tat Problem.main(tmp1jt9crc8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028807
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        def isGreaterThan10(n\
    \ : Long) : Boolean = {\n            if (n > 10) true else false\n        }\n\
    \        def firstAndLastDigits(n : Long) : Boolean = {\n            val strN\
    \ = n.toString\n            if (strN.length == 1) {\n                true\n  \
    \          } else {\n                val firstDigit = strN.substring(0, 1).toInt\n\
    \                val lastDigit = strN.substring(strN.length - 1, strN.length).toInt\n\
    \                if (firstDigit % 2 == 1 && lastDigit % 2 == 1) true else false\n\
    \            }\n        }\n        val filteredNums = nums.filter(x => isGreaterThan10(x)\
    \ && firstAndLastDigits(x))\n        filteredNums.length.toLong\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028807
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        var count = 0l\n\
    \        for (num <- nums) {\n            if (num > 10 && isDigitOdd(num) && isDigitOdd(num\
    \ / 10)) count += 1\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8l75uxt2.scala:15:28 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (num > \e[31m10\e[0m && isDigitOdd(num)\
    \ && isDigitOdd(num / \e[31m10\e[0m)) count += \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m                            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \              Not found: isDigitOdd\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp8l75uxt2.scala:15:47 ------------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (num > \e[31m10\e[0m && isDigitOdd(num)\
    \ && isDigitOdd(num / \e[31m10\e[0m)) count += \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m                                               ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                               Not found: isDigitOdd\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660028803
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        nums.filter(x =>\
    \ (x > 10) && ((x % 10) % 2 != 0) && ((x / 10) % 2 != 0)).length\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppfforhkt.scala:18)\n\tat Problem.main(tmppfforhkt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028807
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        def helper(nums\
    \ : List[Long], cnt : Long) : Long = {\n            if (nums.length == 0) cnt\n\
    \            else {\n                if (nums.head > 10 && abs(nums.head) % 2\
    \ == 1 && abs(nums.head % 10) % 2 == 1) helper(nums.tail, cnt + 1)\n         \
    \       else helper(nums.tail, cnt)\n            }\n        }\n        helper(nums,\
    \ 0)\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv8khguhg.scala:25)\n\tat Problem.main(tmpv8khguhg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028807
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val filtered = nums.filter(s\
    \ => {\n            val str = s.toString\n            str.length > 1 && (abs(s)\
    \ > 10) && (str.head.toString.toInt % 2 == 1) && (str.last.toString.toInt % 2\
    \ == 1)\n        })\n        return filtered.length.toLong\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong,\
    \ 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"-\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:658)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$1(tmpphass5v0.scala:15)\n\
    \tat scala.runtime.java8.JFunction1$mcZJ$sp.apply(JFunction1$mcZJ$sp.scala:17)\n\
    \tat scala.collection.immutable.List.filter(List.scala:529)\n\tat Problem$.specialFilter(tmpphass5v0.scala:16)\n\
    \tat Problem$.main(tmpphass5v0.scala:21)\n\tat Problem.main(tmpphass5v0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028808
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        def reverseLong(n\
    \ : Long) : Long = {\n            var m = n\n            var result = 0l\n   \
    \         while (m > 0) {\n                result = result * 10 + m % 10\n   \
    \             m /= 10\n            }\n            result\n        }\n        nums.filter((n\
    \ : Long) => n > 10 && n % 2 == 1 && (n / 10) % 2 == 1 && reverseLong(n) % 2 ==\
    \ 1).length\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmhohu7z2.scala:27)\n\tat Problem.main(tmpmhohu7z2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028808
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        nums.filter(n =>\
    \ (n > 10 && n % 2 == 1 && n.toString.charAt(0).toInt % 2 == 1 && n.toString.charAt(n.toString.length\
    \ - 1).toInt % 2 == 1)).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong, -5l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong, 14l.toLong,\
    \ -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong, -2l.toLong,\
    \ -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n    assert(specialFilter((List[Long](43l.toLong,\
    \ -12l.toLong, 93l.toLong, 125l.toLong, 121l.toLong, 109l.toLong))) == (4l));\n\
    \    assert(specialFilter((List[Long](71l.toLong, -2l.toLong, -33l.toLong, 75l.toLong,\
    \ 21l.toLong, 19l.toLong))) == (3l));\n    assert(specialFilter((List[Long](1l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long]())) == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028808
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        // Fill Up this\
    \ function body\n        // `nums` is List[Long] type\n        // `return` should\
    \ be Long type\n        nums.count(n => n > 10 && n % 2 == 1 && (n % 10) % 2 ==\
    \ 1)\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3handdon.scala:21)\n\tat Problem.main(tmp3handdon.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028808
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        nums.filter(n =>\
    \ (n > 10) && (n % 2 == 1) && (n % 10 == n / pow(10, n.toString.length - 1).toLong)).length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4zvp54fp.scala:17)\n\tat Problem.main(tmp4zvp54fp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028809
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        nums.map(x => x.toString).filter(x\
    \ => x.length >= 2 && x.length <= 9).filter(x => x.head.toString.toInt % 2 ==\
    \ 1 && x.last.toString.toInt % 2 == 1).map(x => x.toLong).filter(x => x > 10).size\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"-\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:658)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.specialFilter$$anonfun$3(tmpocqvx2r1.scala:13)\n\
    \tat scala.collection.immutable.List.filter(List.scala:515)\n\tat Problem$.specialFilter(tmpocqvx2r1.scala:13)\n\
    \tat Problem$.main(tmpocqvx2r1.scala:16)\n\tat Problem.main(tmpocqvx2r1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028809
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        return nums.filter(x\
    \ => x > 10 && x.toString.charAt(0).toString.toInt % 2 == 1 && x.toString.charAt(x.toString.length\
    \ - 1).toString.toInt % 2 == 1).length\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028809
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        // Fill Up this\
    \ function body\n        // `nums` is a list of `Long`\n        // The return\
    \ type of this function must be `Long`\n        if (nums.isEmpty) 0l\n       \
    \ else {\n          if (nums.head >= 10 && isOdd(nums.head) && isOdd(nums.last))\
    \ 1l + specialFilter(nums.tail)\n          else specialFilter(nums.tail)\n   \
    \     }\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1b4012_f.scala:18:33 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m          \e[33mif\e[0m (nums.head >= \e[31m10\e[0m &&\
    \ isOdd(nums.head) && isOdd(nums.last)) \e[31m1l\e[0m + specialFilter(nums.tail)\n\
    \e[31m\e[31m   |\e[0m                                 ^^^^^\e[0m\n\e[31m   |\e\
    [0m                                 Not found: isOdd\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp1b4012_f.scala:18:53 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m          \e[33mif\e[0m (nums.head >= \e[31m10\e[0m &&\
    \ isOdd(nums.head) && isOdd(nums.last)) \e[31m1l\e[0m + specialFilter(nums.tail)\n\
    \e[31m\e[31m   |\e[0m                                                     ^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                     Not found:\
    \ isOdd\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660028806
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        def isSpecial(n\
    \ : Long) : Boolean = {\n            val s = n.toString\n            val last\
    \ = s.last\n            val first = s.head\n            n > 10 && last.toInt %\
    \ 2 == 1 && first.toInt % 2 == 1\n        }\n        return nums.filter(isSpecial).length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028810
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        // Fill Up this\
    \ function body\n        // `nums` List of integers\n        // To return the\
    \ number of elements in `nums` that satisfy a predicate\n        nums.filter(t\
    \ => t > 10 && t.toString.length == 2 && t.toString.head.toString.toInt % 2 !=\
    \ 0 && t.toString.last.toString.toInt % 2 != 0).length\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong,\
    \ 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpc3_dyop7.scala:21)\n\tat Problem.main(tmpc3_dyop7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028809
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        // Fill Up this\
    \ function body\n        // `nums` is a list containing integers, e.g. (1l, -1l,\
    \ 1l, 6l, 5l, 7l)\n        // `return` should return the number of elements in\
    \ the list that\n        //  are greater than 10 and both first and last digits\
    \ of a number are odd (1, 3, 5, 7, 9).\n        var count = 0l\n        for (num\
    \ <- nums) {\n            if (num > 10) {\n                val digits = num.toString.split(\"\
    \").toList.map(x => x.toLong)\n                if (digits.head % 2 != 0 && digits.last\
    \ % 2 != 0) {\n                    count += 1\n                }\n           \
    \ }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong, -5l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong, 14l.toLong,\
    \ -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong, -2l.toLong,\
    \ -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n    assert(specialFilter((List[Long](43l.toLong,\
    \ -12l.toLong, 93l.toLong, 125l.toLong, 121l.toLong, 109l.toLong))) == (4l));\n\
    \    assert(specialFilter((List[Long](71l.toLong, -2l.toLong, -33l.toLong, 75l.toLong,\
    \ 21l.toLong, 19l.toLong))) == (3l));\n    assert(specialFilter((List[Long](1l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long]())) == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028811
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        nums.map(x => if\
    \ (x > 10 && x % 2 == 1 && (x % 10) % 2 == 1) 1 else 0).sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong,\
    \ 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2p4uvmky.scala:18)\n\tat Problem.main(tmp2p4uvmky.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028812
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        // Fill up this\
    \ function body\n        // You can add another function as well, if required\n\
    \        nums.filter(x => abs(x) > 10 && (abs(x) % 10) % 2 == 1 && abs(x) / 10\
    \ % 2 == 1).length\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpm7k0jzj2.scala:19)\n\tat Problem.main(tmpm7k0jzj2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028812
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        nums.filter(n =>\
    \ n > 10 && getFirstDigit(n) % 2 == 1 && getLastDigit(n) % 2 == 1).length\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp06pzz_l5.scala:13:35 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        nums.filter(\e[36mn\e[0m => n > \e[31m10\e[0m\
    \ && getFirstDigit(n) % \e[31m2\e[0m == \e[31m1\e[0m && getLastDigit(n) % \e[31m2\e\
    [0m == \e[31m1\e[0m).length\n\e[31m\e[31m   |\e[0m                           \
    \        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                 \
    \  Not found: getFirstDigit\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp06pzz_l5.scala:13:64 ------------------------\e[0m\e[0m\n\e[31m13 |\e\
    [0m        nums.filter(\e[36mn\e[0m => n > \e[31m10\e[0m && getFirstDigit(n) %\
    \ \e[31m2\e[0m == \e[31m1\e[0m && getLastDigit(n) % \e[31m2\e[0m == \e[31m1\e\
    [0m).length\n\e[31m\e[31m   |\e[0m                                           \
    \                     ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \                            Not found: getLastDigit\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660028810
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        def firstDigit(n\
    \ : Long) : Long = {\n            var tmp = n\n            while (tmp >= 10) tmp\
    \ /= 10\n            tmp\n        }\n        def lastDigit(n : Long) : Long =\
    \ n % 10\n        val l = nums.filter(n => n >= 10 && firstDigit(n) % 2 == 1 &&\
    \ lastDigit(n) % 2 == 1)\n        l.length\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028814
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        def isSpecial(n\
    \ : Long) : Boolean = {\n            if (n < 10) return false\n            val\
    \ len = n.toString.length\n            val ld = n % 10\n            val fd = n\
    \ / pow(10, len - 1).toLong\n            ((fd % 2 != 0) && (ld % 2 != 0) && (n\
    \ > 10))\n        }\n        return nums.filter(isSpecial).length\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028815
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        var count = 0l\n\
    \        for (num <- nums) {\n            if (num > 10 && Math.abs(num) % 10 %\
    \ 2 == 1 && num / pow(10, floor(log10(abs(num))).toInt) % 2 == 1) {\n        \
    \        count += 1\n            }\n        }\n        count\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong,\
    \ 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv7197knb.scala:23)\n\tat Problem.main(tmpv7197knb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028817
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        var cnt = 0\n  \
    \      for (i <- nums) {\n            if (i > 10 && i.toString.length > 1 && i.toString.head.toString.toInt\
    \ % 2 == 1 && i.toString.last.toString.toInt % 2 == 1) {\n                cnt\
    \ += 1\n            }\n        }\n        cnt\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028816
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        def isGreaterThan10(n\
    \ : Long) : Boolean = n > 10\n        def isSpecial(n : Long) : Boolean = {\n\
    \            val sn = n.toString\n            val len = sn.length\n          \
    \  val first = sn.head.toString.toInt\n            val last = sn.last.toString.toInt\n\
    \            if (first % 2 == 1 && last % 2 == 1) true else false\n        }\n\
    \        nums.filter(n => isGreaterThan10(n) && isSpecial(n)).length\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028817
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val filtered = nums.filter(n\
    \ => n > 10 && n % 2 == 1 && (n / 10) % 2 == 1 && (n % 10) % 2 == 1)\n       \
    \ println(filtered)\n        filtered.length\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8p3xldf_.scala:20)\n\tat Problem.main(tmp8p3xldf_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: 'List()

    List(15)

    List(33)

    '
  timestamp: 1660028817
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n\t\t// Fill Up this function\
    \ body\n        // `nums` contains only positive integers\n        // Do not change\
    \ the signature of this function\n        -1\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6p5dh8mi.scala:19)\n\tat Problem.main(tmp6p5dh8mi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028817
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        nums.count(x =>\
    \ x > 10 && x.toString.length > 1 && List(x.toString.charAt(0), x.toString.charAt(x.toString.length\
    \ - 1)).forall(y => List('1', '3', '5', '7', '9').contains(y)))\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028818
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        nums.filter(x =>\
    \ (x > 10) && (x % 2 == 1) && (x / 10 % 2 == 1)).length\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong,\
    \ 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3vah0b2i.scala:18)\n\tat Problem.main(tmp3vah0b2i.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028818
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val s = nums.filter(x\
    \ => (x > 10) && (x % 2 == 1)).map(x => (x / 10, x % 10)).filter(x => (x._1 %\
    \ 2 == 1) && (x._2 % 2 == 1)).map(x => 1l).foldLeft(0l)(_ + _)\n        s\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpirbmav9t.scala:19)\n\tat Problem.main(tmpirbmav9t.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028818
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n      nums.filter(p => (p\
    \ > 10) && (p.toString.head.toInt % 2 == 1) && (p.toString.last.toInt % 2 == 1)).length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028819
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        var cnt = 0l\n \
    \       for (num <- nums) {\n            if (num > 10 && math.abs(num % 10) %\
    \ 2 == 1 && math.abs(num / math.pow(10, math.floor(math.log10(math.abs(num))))\
    \ % 10) % 2 == 1) cnt += 1\n        }\n        cnt\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong,\
    \ 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv7jiw0vg.scala:21)\n\tat Problem.main(tmpv7jiw0vg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028819
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n      nums.filter(x => x\
    \ > 10 && (x % 2 == 1) && ((x % 10) % 2 == 1)).length\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong,\
    \ 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmputoz6fem.scala:18)\n\tat Problem.main(tmputoz6fem.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028819
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        // Fill Up this\
    \ function body\n        // `nums` is a list of integers\n        // Do your magic\
    \ here\n        if (nums.length == 0) {\n            return 0\n        }\n   \
    \     val first = nums.head\n        val second = specialFilter(nums.tail)\n \
    \       if (isBigEnough(first) && isOdd(first) && isOdd(lastDigit(first))) {\n\
    \            return 1 + second\n        }\n        second\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong,\
    \ 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkqvrkq1h.scala:21:12 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mif\e[0m (isBigEnough(first) && isOdd(first)\
    \ && isOdd(lastDigit(first))) {\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Not found: isBigEnough\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028815
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        // Fill Up this\
    \ function body\n        // `nums` list consists of numbers that are Long type\n\
    \        // To access the individual element of `nums`, you need to use `nums.apply(0)`\n\
    \        // If you want to return the number of elements in the list that are\
    \ greater than 10 and both first and last digits of a number are odd (1, 3, 5,\
    \ 7, 9), you need to return `Long`\n        def isDivisibleBy(num : Long, div\
    \ : Long) : Boolean = {\n            num % div == 0\n        }\n        def isOdd(num\
    \ : Long) : Boolean = {\n            num % 2 == 1\n        }\n        def firstDigit(num\
    \ : Long) : Long = {\n            return num.toString.charAt(0).toLong - '0'.toLong\n\
    \        }\n        def lastDigit(num : Long) : Long = {\n            return num.toString.charAt(num.toString.length\
    \ - 1).toLong - '0'.toLong\n        }\n        var count = 0l\n        for (num\
    \ <- nums) {\n            if (num > 10 && isOdd(firstDigit(num)) && isOdd(lastDigit(num)))\
    \ {\n                count += 1\n            }\n        }\n        return count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028820
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n\t\tval numDigits = nums.map(x\
    \ => x.toString.length)\n\t\tval numDigitsFiltered = numDigits.map(x => if (x\
    \ <= 2) 1 else x - 2)\n\t\tval oddDigits = nums.zip(numDigitsFiltered).map(x =>\
    \ x._1 * x._2)\n\t\tval digitsFiltered = oddDigits.filter(x => abs(x) % 2 == 1)\n\
    \t\tval result = digitsFiltered.filter(x => x > 10)\n\t\tresult.length\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpcl7p3i6h.scala:19:4 ------------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m   Incompatible combinations of tabs and spaces in indentation prefixes.\n\e\
    [31m   |\e[0m   Previous indent : 2 tabs\n\e[31m   |\e[0m   Latest indent   :\
    \ 4 spaces\n1 error found\n"
  stdout: ''
  timestamp: 1660028817
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        nums.filter(x =>\
    \ abs(x) > 10).count(x => {\n            val xs = x.toString\n            xs.head.toString.toInt\
    \ % 2 == 1 && xs.last.toString.toInt % 2 == 1\n        })\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong,\
    \ 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"-\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:658)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.specialFilter$$anonfun$2(tmpd5hrhe6f.scala:15)\n\
    \tat scala.runtime.java8.JFunction1$mcZJ$sp.apply(JFunction1$mcZJ$sp.scala:17)\n\
    \tat scala.collection.IterableOnceOps.count(IterableOnce.scala:605)\n\tat scala.collection.IterableOnceOps.count$(IterableOnce.scala:602)\n\
    \tat scala.collection.AbstractIterable.count(Iterable.scala:926)\n\tat Problem$.specialFilter(tmpd5hrhe6f.scala:16)\n\
    \tat Problem$.main(tmpd5hrhe6f.scala:20)\n\tat Problem.main(tmpd5hrhe6f.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainG"
  stdout: ''
  timestamp: 1660028821
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        var count = 0l\n\
    \        for (n <- nums) {\n            if (n >= 10) {\n                val fd\
    \ = n.toString.take(1).toInt\n                val ld = n.toString.takeRight(1).toInt\n\
    \                if (fd % 2 == 1 && ld % 2 == 1) {\n                    count\
    \ += 1\n                }\n            }\n        }\n        count\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028820
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        var result = 0l;\n\
    \        for (n <- nums) {\n            if (n > 10) {\n                var nn\
    \ = n;\n                if (nn < 0) nn = nn * -1;\n                var firstDigit\
    \ = nn % 10;\n                while (nn > 10) nn = nn / 10;\n                if\
    \ (firstDigit % 2 == 1 && nn % 2 == 1) result += 1;\n            }\n        }\n\
    \        return result;\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp321ge96r.scala:28)\n\tat Problem.main(tmp321ge96r.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028821
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        // Fill Up this\
    \ function body\n        // `nums`  argument is a List[Long]\n        // Do not\
    \ modify the return type of this function\n        var count = 0l\n        for\
    \ (num <- nums) {\n            if (num.abs > 10) {\n                var val1 =\
    \ num\n                var val2 = num.abs\n                while (val1 > 10) {\n\
    \                    val1 /= 10\n                }\n                while (val2\
    \ > 10) {\n                    val2 /= 10\n                }\n               \
    \ if (val1 % 2 != 0 && val2 % 2 != 0) count += 1\n            }\n        }\n \
    \       count\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjrxm_zz1.scala:34)\n\tat Problem.main(tmpjrxm_zz1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028821
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        nums.filter(x =>\
    \ {\n            x > 10 && x % 2 == 1 && (x % 10 == 1 || x % 10 == 3 || x % 10\
    \ == 5 || x % 10 == 7 || x % 10 == 9)\n        }).length\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong,\
    \ 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpruldoj_3.scala:20)\n\tat Problem.main(tmpruldoj_3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028823
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        nums.filter(n =>\
    \ n > 10 && n.toString.head.toInt % 2 == 1 && n.toString.last.toInt % 2 == 1).length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028823
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        def isOdd(num :\
    \ Int) : Boolean = {\n            if (num == -1) true\n            else if (num\
    \ % 2 == 0) false\n            else isOdd(num / 10)\n        }\n        def specialFilter(nums\
    \ : List[Long], acc : Long) : Long = {\n            if (nums.isEmpty) acc\n  \
    \          else if (abs(nums.head) > 10 && isOdd(nums.head.toInt) && isOdd(nums.head.toString.last.toInt\
    \ - '0')) specialFilter(nums.tail, acc + 1)\n            else specialFilter(nums.tail,\
    \ acc)\n        }\n        specialFilter(nums, 0)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpl511lu58.scala:27)\n\tat Problem.main(tmpl511lu58.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028823
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        nums.filter(a =>\
    \ a > 10 && (a % 2 != 0) && a.toString.head.toString.toInt % 2 != 0 && a.toString.last.toString.toInt\
    \ % 2 != 0).length\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028826
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        nums.filter(x =>\
    \ abs(x) > 10 && abs(x) % 10 % 2 == 1 && x % 10 % 2 == 1).length\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6aiz94pk.scala:18)\n\tat Problem.main(tmp6aiz94pk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028826
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        // Have a function\
    \ that converts a long to a list of its digits\n        def longToDigits(num :\
    \ Long) : List[Int] = {\n            if (num == 0) List[Int]()\n            else\
    \ {\n                val x = num % 10\n                x :: longToDigits(num /\
    \ 10)\n            }\n        }\n        // Have a function that checks if a long\
    \ is \"valid\"\n        def checkValid(num : Long) : Boolean = {\n           \
    \ if (num < 10) num % 2 == 1\n            else {\n                val digits =\
    \ longToDigits(num)\n                digits.head % 2 == 1 && digits.last % 2 ==\
    \ 1\n            }\n        }\n        // Have a function that filters a list\
    \ of longs\n        def filter(nums : List[Long]) : List[Long] = {\n         \
    \   if (nums.isEmpty) nums\n            else {\n                val x = nums.head\n\
    \                if (x > 10 && checkValid(x)) x :: filter(nums.tail)\n       \
    \         else filter(nums.tail)\n            }\n        }\n        // Filter\
    \ the list\n        filter(nums).length\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpe9yx9clm.scala:18:16\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m                x :: longToDigits(num\
    \ / \e[31m10\e[0m)\n\e[31m\e[31m   |\e[0m                ^\e[0m\n\e[31m   |\e\
    [0m                Found:    (x : Long)\n\e[31m   |\e[0m                Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660028824
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        var result = 0l\n\
    \        for (num <- nums) {\n            if (num > 10) {\n                var\
    \ first = num.toString.charAt(0).toString.toInt\n                var last = num.toString.charAt(num.toString.length\
    \ - 1).toString.toInt\n                if (first % 2 == 1 && last % 2 == 1) result\
    \ += 1\n            }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028828
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        def isAllowed(num\
    \ : Long) : Boolean = {\n            val firstDigit = num.toString.toList.head.toString.toInt\n\
    \            val lastDigit = num.toString.toList.last.toString.toInt\n       \
    \     (num > 10 && firstDigit % 2 == 1 && lastDigit % 2 == 1)\n        }\n   \
    \     nums.filter(isAllowed).length\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"-\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:658)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.isAllowed$1(tmpxlrtt6k3.scala:14)\n\
    \tat Problem$.specialFilter$$anonfun$1(tmpxlrtt6k3.scala:18)\n\tat scala.runtime.java8.JFunction1$mcZJ$sp.apply(JFunction1$mcZJ$sp.scala:17)\n\
    \tat scala.collection.immutable.List.filter(List.scala:515)\n\tat Problem$.specialFilter(tmpxlrtt6k3.scala:18)\n\
    \tat Problem$.main(tmpxlrtt6k3.scala:21)\n\tat Problem.main(tmpxlrtt6k3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028828
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n    \tdef even(x : Long)\
    \ : Boolean = (x % 2 == 0)\n    \tdef first(x : Long) : Long = {\n    \t\tvar\
    \ first = x\n    \t\twhile (first > 9) first /= 10\n    \t\tfirst\n    \t}\n \
    \   \tdef last(x : Long) : Long = {\n    \t\tvar last = x\n    \t\twhile (last\
    \ % 10 == 0) last /= 10\n    \t\tlast % 10\n    \t}\n    \tnums.filter(x => x\
    \ > 10 && !even(first(x)) && !even(last(x))).length\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong,\
    \ 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028828
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        def isValid(n :\
    \ Long) : Boolean = {\n            if (n > 10) {\n                val firstDigit\
    \ = n.toString()(0).asDigit\n                val lastDigit = n.toString()(n.toString().length\
    \ - 1).asDigit\n                if (firstDigit % 2 == 1 && lastDigit % 2 == 1)\
    \ true\n                else false\n            }\n            else false\n  \
    \      }\n        nums.filter(isValid(_)).length\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028829
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        // Fill up this\
    \ function body\n        // You can add another function as well, if required\n\
    \        var result = 0l\n        for (num <- nums) {\n            if (num > 10)\
    \ {\n                val strNum = num.toString\n                val fst = strNum.charAt(0).toString.toInt\n\
    \                val last = strNum.charAt(strNum.length - 1).toString.toInt\n\
    \                if (fst % 2 != 0 && last % 2 != 0) result += 1\n            }\n\
    \        }\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong, -5l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong, 14l.toLong,\
    \ -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong, -2l.toLong,\
    \ -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n    assert(specialFilter((List[Long](43l.toLong,\
    \ -12l.toLong, 93l.toLong, 125l.toLong, 121l.toLong, 109l.toLong))) == (4l));\n\
    \    assert(specialFilter((List[Long](71l.toLong, -2l.toLong, -33l.toLong, 75l.toLong,\
    \ 21l.toLong, 19l.toLong))) == (3l));\n    assert(specialFilter((List[Long](1l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long]())) == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028829
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        //\n        // Fill\
    \ in the implementation here.\n        //\n        var res : Long = 0\n      \
    \  for (i <- nums) {\n            if (i > 10 && i.toString.head.toString.toInt\
    \ % 2 != 0 && i.toString.last.toString.toInt % 2 != 0) res += 1\n        }\n \
    \       res\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028828
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        var result = List[Long]()\n\
    \        for (n <- nums) {\n            if (n > 10 && (n % 10 % 2 == 1) && (n.toString.head.toString.toInt\
    \ % 2 == 1)) result = n :: result\n        }\n        result.length\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028829
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        var count = 0l\n\
    \        for (num <- nums) {\n            val str = num.toString\n           \
    \ val first = str.charAt(0).toString.toInt\n            val last = str.charAt(str.length\
    \ - 1).toString.toInt\n            if (num > 10 && first % 2 != 0 && last % 2\
    \ != 0) count += 1\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"-\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:658)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.specialFilter$$anonfun$1(tmpqc1k2ul9.scala:16)\n\
    \tat scala.runtime.java8.JFunction1$mcVJ$sp.apply(JFunction1$mcVJ$sp.scala:18)\n\
    \tat scala.collection.immutable.List.foreach(List.scala:333)\n\tat Problem$.specialFilter(tmpqc1k2ul9.scala:19)\n\
    \tat Problem$.main(tmpqc1k2ul9.scala:23)\n\tat Problem.main(tmpqc1k2ul9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028829
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        nums.filter(x =>\
    \ x > 10 && x.toString.head.toString.toInt % 2 == 1 && x.toString.last.toString.toInt\
    \ % 2 == 1).length\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028829
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        // Fix me\n    \
    \    0l\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8dypeq2l.scala:18)\n\tat Problem.main(tmp8dypeq2l.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028830
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        nums.filter(x =>\
    \ x > 10 && x.toString.last.toString.toInt % 2 == 1 && x.toString.head.toString.toInt\
    \ % 2 == 1).length\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028830
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        var count = 0\n\
    \        for (num <- nums) {\n            if (num >= 10 && (num % 10) % 2 == 1\
    \ && num / pow(10, floor(log10(num)).toInt) % 2 == 1) {\n                count\
    \ += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn8zu1s9p.scala:23)\n\tat Problem.main(tmpn8zu1s9p.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028830
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val result = ListBuffer[Long]()\n\
    \        for (num <- nums) {\n            val s = num.toString\n            if\
    \ (s.length > 1 && s.head.toString.toInt % 2 != 0 && s.last.toString.toInt % 2\
    \ != 0 && num > 10) {\n                result += num\n            }\n        }\n\
    \        result.size\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"-\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:658)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.specialFilter$$anonfun$1(tmpxws0pjsj.scala:16)\n\
    \tat scala.runtime.java8.JFunction1$mcVJ$sp.apply(JFunction1$mcVJ$sp.scala:18)\n\
    \tat scala.collection.immutable.List.foreach(List.scala:333)\n\tat Problem$.specialFilter(tmpxws0pjsj.scala:19)\n\
    \tat Problem$.main(tmpxws0pjsj.scala:23)\n\tat Problem.main(tmpxws0pjsj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028831
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        def toDigits(n :\
    \ Long) : List[Long] = {\n            if (n < 0) -n :: toDigits(-n / 10)\n   \
    \         else if (n < 10) List(n)\n            else n % 10 :: toDigits(n / 10)\n\
    \        }\n        nums.filter(num => (num >= 10) && ((num % 10) % 2 == 1) &&\
    \ (toDigits(num).last % 2 == 1)).length\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028831
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        nums.count(x =>\
    \ {\n            if (x >= 10) {\n                val first = x.toString.charAt(0).asDigit\n\
    \                val last = x.toString.charAt(x.toString.length - 1).asDigit\n\
    \                (first % 2 == 1) && (last % 2 == 1)\n            } else false\n\
    \        })\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028833
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        def check(n : Long)\
    \ : Boolean = {\n            def helper(p : Long) : Boolean = {\n            \
    \    if (p == 0) true\n                else if (p % 10 == 0) false\n         \
    \       else if (p % 2 == 0) false\n                else helper(p / 10)\n    \
    \        }\n            if (n > 10) helper(n)\n            else false\n      \
    \  }\n        return nums.map(n => if (check(n)) 1 else 0).sum\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvkfwwoi7.scala:28)\n\tat Problem.main(tmpvkfwwoi7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028833
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        nums.filter(n =>\
    \ (n > 10 && n.toString.reverse.take(1).toInt % 2 == 1 && n.toString.take(1).toInt\
    \ % 2 == 1)).length\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028833
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        var result = 0l\n\
    \        for (num <- nums) {\n            val lastDigit = num % 10\n         \
    \   val firstDigit = num / pow(10, num.toString.length - 1).toLong\n         \
    \   if (num > 10 && firstDigit % 2 == 1 && lastDigit % 2 == 1) result += 1\n \
    \       }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028834
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        val filteredNums\
    \ = nums.filter(num => (abs(num) > 10) && (num.toString()(0).toInt % 2 != 0) &&\
    \ (num.toString()(num.toString().length - 1).toInt % 2 != 0))\n        return\
    \ filteredNums.length\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp58nvfzzw.scala:18)\n\tat Problem.main(tmp58nvfzzw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028834
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        nums.filter(n =>\
    \ n.toString.length() > 1 && n.toString.head.toString.toInt % 2 != 0 && n.toString.last.toString.toInt\
    \ % 2 != 0 && n > 10).length\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong, -5l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong, 14l.toLong,\
    \ -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong, -2l.toLong,\
    \ -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n    assert(specialFilter((List[Long](43l.toLong,\
    \ -12l.toLong, 93l.toLong, 125l.toLong, 121l.toLong, 109l.toLong))) == (4l));\n\
    \    assert(specialFilter((List[Long](71l.toLong, -2l.toLong, -33l.toLong, 75l.toLong,\
    \ 21l.toLong, 19l.toLong))) == (3l));\n    assert(specialFilter((List[Long](1l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long]())) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"-\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:658)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.specialFilter$$anonfun$1(tmp231f8fv_.scala:13)\n\
    \tat scala.runtime.java8.JFunction1$mcZJ$sp.apply(JFunction1$mcZJ$sp.scala:17)\n\
    \tat scala.collection.immutable.List.filter(List.scala:515)\n\tat Problem$.specialFilter(tmp231f8fv_.scala:13)\n\
    \tat Problem$.main(tmp231f8fv_.scala:16)\n\tat Problem.main(tmp231f8fv_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028834
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n      nums.filter(x => x\
    \ > 10 && x.toString.charAt(0).toString.toInt % 2 == 1 && x.toString.charAt(x.toString.length\
    \ - 1).toString.toInt % 2 == 1).length\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028835
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        nums.filter(num\
    \ => abs(num) > 10 && num.toString.charAt(0).asDigit % 2 == 1 && num.toString.charAt(num.toString.length\
    \ - 1).asDigit % 2 == 1).length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong, -5l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong, 14l.toLong,\
    \ -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong, -2l.toLong,\
    \ -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n    assert(specialFilter((List[Long](43l.toLong,\
    \ -12l.toLong, 93l.toLong, 125l.toLong, 121l.toLong, 109l.toLong))) == (4l));\n\
    \    assert(specialFilter((List[Long](71l.toLong, -2l.toLong, -33l.toLong, 75l.toLong,\
    \ 21l.toLong, 19l.toLong))) == (3l));\n    assert(specialFilter((List[Long](1l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long]())) == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028836
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        0l\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe1jvk_31.scala:17)\n\tat Problem.main(tmpe1jvk_31.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028835
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        def helper(nums\
    \ : List[Long], acc : Long) : Long = {\n            if (nums.isEmpty) acc\n  \
    \          else {\n                val head = nums.head\n                if (head\
    \ > 10 && head.toString.take(1).toInt % 2 == 1 && head.toString.takeRight(1).toInt\
    \ % 2 == 1) helper(nums.tail, acc + 1)\n                else helper(nums.tail,\
    \ acc)\n            }\n        }\n        helper(nums, 0)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong,\
    \ 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028837
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        // Fill Up this\
    \ function body\n        // `nums` is a List[Long] type\n        // `nums` will\
    \ contain only one digit.\n        // For example, [-73l, 14l, -15l]\n       \
    \ nums.count(x => x > 10 && x % 2 == 1 && (x % 10 == 1 || x % 10 == 3 || x % 10\
    \ == 5 || x % 10 == 7 || x % 10 == 9))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_w3qfr65.scala:22)\n\tat Problem.main(tmp_w3qfr65.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028837
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        var count = 0l\n\
    \        for (i <- nums) {\n            if (i > 10 && i.toString.charAt(0).toInt\
    \ % 2 == 1 && i.toString.charAt(i.toString.length - 1).toInt % 2 == 1) count +=\
    \ 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong, -5l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong, 14l.toLong,\
    \ -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong, -2l.toLong,\
    \ -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n    assert(specialFilter((List[Long](43l.toLong,\
    \ -12l.toLong, 93l.toLong, 125l.toLong, 121l.toLong, 109l.toLong))) == (4l));\n\
    \    assert(specialFilter((List[Long](71l.toLong, -2l.toLong, -33l.toLong, 75l.toLong,\
    \ 21l.toLong, 19l.toLong))) == (3l));\n    assert(specialFilter((List[Long](1l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long]())) == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028837
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        nums.filter(x =>\
    \ x > 10 && isFirstAndLastDigitOdd(x)).length\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong,\
    \ -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzhk54qnv.scala:13:35 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        nums.filter(\e[36mx\e[0m => x > \e[31m10\e[0m\
    \ && isFirstAndLastDigitOdd(x)).length\n\e[31m\e[31m   |\e[0m                \
    \                   ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \                      Not found: isFirstAndLastDigitOdd\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660028835
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        ???\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.NotImplementedError: an implementation is missing\n\tat scala.Predef$.$qmark$qmark$qmark(Predef.scala:344)\n\
    \tat Problem$.specialFilter(tmpiyg_3wt6.scala:13)\n\tat Problem$.main(tmpiyg_3wt6.scala:16)\n\
    \tat Problem.main(tmpiyg_3wt6.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028837
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        def helper(nums\
    \ : List[Long], count : Long) : Long = {\n            if (nums.isEmpty) {\n  \
    \              count\n            } else {\n                if (abs(nums.head)\
    \ > 10 && abs(nums.head).toString.length > 1 && abs(nums.head).toString.head.toString.toInt\
    \ % 2 == 1 && abs(nums.head).toString.last.toString.toInt % 2 == 1) {\n      \
    \              helper(nums.tail, count + 1)\n                } else {\n      \
    \              helper(nums.tail, count)\n                }\n            }\n  \
    \      }\n        helper(nums, 0)\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong, -5l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong, 14l.toLong,\
    \ -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong, -2l.toLong,\
    \ -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n    assert(specialFilter((List[Long](43l.toLong,\
    \ -12l.toLong, 93l.toLong, 125l.toLong, 121l.toLong, 109l.toLong))) == (4l));\n\
    \    assert(specialFilter((List[Long](71l.toLong, -2l.toLong, -33l.toLong, 75l.toLong,\
    \ 21l.toLong, 19l.toLong))) == (3l));\n    assert(specialFilter((List[Long](1l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long]())) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpyiewjegi.scala:28)\n\tat Problem.main(tmpyiewjegi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028837
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        // Fill Up this\
    \ function body\n        // `nums` contains a list of integers\n        // `return`\
    \ the number of elements in `nums` that are greater than 10 \n        // and both\
    \ first and last digits of a number are odd (1, 3, 5, 7, 9).\n        // Do not\
    \ modify the function signature\n        def firstDigit(n : Long) : Long = {\n\
    \            if (n < 0) return firstDigit(-n)\n            if (n < 10) return\
    \ n\n            firstDigit(n / 10)\n        }\n        def lastDigit(n : Long)\
    \ : Long = {\n            if (n < 0) return lastDigit(-n)\n            n % 10\n\
    \        }\n        var count = 0l\n        for (n <- nums) {\n            if\
    \ (n > 10 && firstDigit(n) % 2 == 1 && lastDigit(n) % 2 == 1) count += 1\n   \
    \     }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028837
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        nums.map(x => x.toString).filter(x\
    \ => {\n            x.size >= 2 && abs(x.head.toString.toInt) % 2 == 1 && x.last.toString.toInt\
    \ % 2 == 1\n        }).size\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(specialFilter((List[Long](5l.toLong, -2l.toLong, 1l.toLong, -5l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long](15l.toLong, -73l.toLong, 14l.toLong,\
    \ -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong, -2l.toLong,\
    \ -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n    assert(specialFilter((List[Long](43l.toLong,\
    \ -12l.toLong, 93l.toLong, 125l.toLong, 121l.toLong, 109l.toLong))) == (4l));\n\
    \    assert(specialFilter((List[Long](71l.toLong, -2l.toLong, -33l.toLong, 75l.toLong,\
    \ 21l.toLong, 19l.toLong))) == (3l));\n    assert(specialFilter((List[Long](1l.toLong)))\
    \ == (0l));\n    assert(specialFilter((List[Long]())) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"-\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:658)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.specialFilter$$anonfun$2(tmp8h8awfyv.scala:14)\n\
    \tat scala.collection.immutable.List.filter(List.scala:515)\n\tat Problem$.specialFilter(tmp8h8awfyv.scala:15)\n\
    \tat Problem$.main(tmp8h8awfyv.scala:18)\n\tat Problem.main(tmp8h8awfyv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028837
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        // Fill up this\
    \ function body\n        // `nums` is a list of numbers and\n        // you should\
    \ return the count of numbers that satisfy the constraints\n        0l\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpad8loiuo.scala:20)\n\tat Problem.main(tmpad8loiuo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028837
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n    \tvar num = 0\n    \t\
    for (x <- nums) {\n    \t\tif (x >= 10 && x.toString.charAt(0).asDigit % 2 ==\
    \ 1 && x.toString.charAt(x.toString.length - 1).asDigit % 2 == 1) num += 1\n \
    \   \t}\n    \tnum\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028838
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        // Fill Up this\
    \ function body\n        // `nums` is a list of numbers\n        // Do the computation\
    \ here and return the output\n        var count = 0l\n        for (i <- nums)\
    \ {\n            if (abs(i) > 10) {\n                var n = abs(i)\n        \
    \        var lastDigit = n % 10\n                while (n >= 10) n /= 10\n   \
    \             if (n % 2 != 0 && lastDigit % 2 != 0) count += 1\n            }\n\
    \        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong,\
    \ -2l.toLong, 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpovga8xb4.scala:29)\n\tat Problem.main(tmpovga8xb4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028838
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a list of numbers as input and returns\
    \ \n    // the number of elements in the list that are greater than 10 and both\
    \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    //\
    \ For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong,\
    \ 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n\
    \    def specialFilter(nums : List[Long]) : Long = {\n        return nums.filter((n\
    \ : Long) => (n.toString().charAt(0).toString().toInt % 2 != 0) && (n.toString().charAt(n.toString().length()\
    \ - 1).toString().toInt % 2 != 0) && (n > 10)).length.toLong\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(specialFilter((List[Long](5l.toLong, -2l.toLong,\
    \ 1l.toLong, -5l.toLong))) == (0l));\n    assert(specialFilter((List[Long](15l.toLong,\
    \ -73l.toLong, 14l.toLong, -15l.toLong))) == (1l));\n    assert(specialFilter((List[Long](33l.toLong,\
    \ -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong))) == (2l));\n \
    \   assert(specialFilter((List[Long](43l.toLong, -12l.toLong, 93l.toLong, 125l.toLong,\
    \ 121l.toLong, 109l.toLong))) == (4l));\n    assert(specialFilter((List[Long](71l.toLong,\
    \ -2l.toLong, -33l.toLong, 75l.toLong, 21l.toLong, 19l.toLong))) == (3l));\n \
    \   assert(specialFilter((List[Long](1l.toLong))) == (0l));\n    assert(specialFilter((List[Long]()))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"-\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:658)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.specialFilter$$anonfun$1(tmpqnh_d6r1.scala:13)\n\
    \tat scala.runtime.java8.JFunction1$mcZJ$sp.apply(JFunction1$mcZJ$sp.scala:17)\n\
    \tat scala.collection.immutable.List.filter(List.scala:515)\n\tat Problem$.specialFilter(tmpqnh_d6r1.scala:13)\n\
    \tat Problem$.main(tmpqnh_d6r1.scala:16)\n\tat Problem.main(tmpqnh_d6r1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660028838
