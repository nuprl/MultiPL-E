language: scala
name: HumanEval_158_find_max
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        var dict = Map[String, Int]()\n        var res = \"\"\n\
    \        for (word <- words) {\n            var unique = Set[Char]()\n       \
    \     for (ch <- word) {\n                unique += ch\n            }\n      \
    \      dict += (word -> unique.size)\n        }\n        var max = 0\n       \
    \ for ((k, v) <- dict) {\n            if (v > max) {\n                max = v\n\
    \                res = k\n            }\n        }\n        return res\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\"\
    , \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmph1xv1ph6.scala:35)\n\tat Problem.main(tmph1xv1ph6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009271
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        var max_word = \"\"\n        var max_cnt = 0\n       \
    \ for (word <- words) {\n            val tmp = word.toSet.size\n            if\
    \ (tmp > max_cnt) {\n                max_cnt = tmp\n                max_word =\
    \ word\n            }\n        }\n        max_word\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"\
    ))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\"\
    , \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\"\
    , \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgwm7bj43.scala:28)\n\tat Problem.main(tmpgwm7bj43.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009270
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        if (words.length == 0) return null\n        var max =\
    \ words(0)\n        for (word <- words) {\n            if (word.length > max.length)\
    \ max = word\n            else if (word.length == max.length) if (word < max)\
    \ max = word\n        }\n        return max\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4u54yi84.scala:31)\n\tat Problem.main(tmp4u54yi84.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009270
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        var ans = \"\";\n        var count = 0;\n        for (word\
    \ <- words) {\n            val unique = uniqueCharacters(word);\n            if\
    \ (unique.size > count) {\n                ans = word;\n                count\
    \ = unique.size;\n            }\n        }\n        return ans;\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"\
    of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3a_80lnl.scala:18:25 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[36munique\e[0m = uniqueCharacters(word);\n\
    \e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                         Not found: uniqueCharacters\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009266
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        var maxWord = \"\";\n        var maxUnique = 0;\n    \
    \    for (word <- words) {\n            val unique = word.groupBy(identity).size;\n\
    \            if (unique > maxUnique) {\n                maxUnique = unique;\n\
    \                maxWord = word;\n            }\n        }\n        return maxWord;\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw0zydxki.scala:28)\n\tat Problem.main(tmpw0zydxki.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009270
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val a = for (word <- words) yield (word, word.toSet.size)\n\
    \        val b = a.sortWith((i, j) => i._2 > j._2 || (i._2 == j._2 && i._1 < j._1))\n\
    \        b.head._1\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009270
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        return words.maxBy(word => word.toSet.size)\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\"\
    , \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpo_x1fxsx.scala:19)\n\tat Problem.main(tmpo_x1fxsx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009270
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        var best = words(0)\n        var max = 0\n        for\
    \ (word <- words) {\n            val set = word.toSet\n            if (set.size\
    \ > max) {\n                max = set.size\n                best = word\n    \
    \        }\n        }\n        best\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe7uyrccc.scala:28)\n\tat Problem.main(tmpe7uyrccc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009270
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        // Use a hash to store the frequency of each char.\n \
    \       // This can be implemented as a mutable map or a immutable map,\n    \
    \    // or even an array.\n        var best = words(0)\n        var bestSize =\
    \ best.distinct.size\n        for (w <- words.tail) {\n            val size =\
    \ w.distinct.size\n            if (size > bestSize) {\n                best =\
    \ w\n                bestSize = size\n            }\n        }\n        best\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6kgt12y6.scala:31)\n\tat Problem.main(tmp6kgt12y6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009270
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        def count(s : String) : Int = {\n            var c = 0\n\
    \            for (c1 <- 'a' to 'z')\n                if (s.indexOf(c1) >= 0) c\
    \ += 1\n            c\n        }\n        var mx = 0\n        var index = 0\n\
    \        for (i <- 0 until words.length) {\n            val s = words(i)\n   \
    \         val x = count(s)\n            if (x > mx) {\n                mx = x\n\
    \                index = i\n            }\n        }\n        words(index)\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmk7wcn1g.scala:35)\n\tat Problem.main(tmpmk7wcn1g.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009270
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n      var current = \"\"\n      var currentSet = Set[Char]()\n\
    \      var max = \"\"\n      var maxSet = Set[Char]()\n      for (word <- words)\
    \ {\n        current = word\n        currentSet = current.toSet\n        if (currentSet.size\
    \ > maxSet.size) {\n          max = current\n          maxSet = currentSet\n \
    \       }\n        else if (currentSet.size == maxSet.size) {\n          max =\
    \ if (max > current) max else current\n        }\n      }\n      max\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\"\
    , \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphu2igf4x.scala:21:21\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        currentSet = current.toSet\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                     Found:    Set[Char]\n\e[31m   |\e[0m                   \
    \  Required: scala.collection.mutable.Set[Char]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009268
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        var max = 0\n        var index = 0\n        for (i <-\
    \ 0 until words.length) {\n            val cnt = words(i).toSet.size\n       \
    \     if (cnt > max) {\n                max = cnt\n                index = i\n\
    \            }\n        }\n        words(index)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcphpa1nl.scala:28)\n\tat Problem.main(tmpcphpa1nl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009270
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        // Your code here\n        return \"\"\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"\
    of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1xyqvo8a.scala:19)\n\tat Problem.main(tmp1xyqvo8a.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009270
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        var chars = new HashMap[Char, Int]\n        var answer\
    \ = \"\"\n        var max = 0\n        var result = 0\n        for (word <- words)\
    \ {\n            for (c <- word) {\n                if (chars.contains(c)) {\n\
    \                    chars(c) += 1\n                } else {\n               \
    \     chars(c) = 1\n                }\n            }\n            for (c <- chars.keySet)\
    \ {\n                if (chars(c) == 1) {\n                    result += 1\n \
    \               }\n            }\n            if (result > max) {\n          \
    \      max = result\n                answer = word\n            } else if (result\
    \ == max) {\n                if (word < answer) {\n                    answer\
    \ = word\n                }\n            }\n            result = 0\n         \
    \   chars.clear\n        }\n        answer\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpd06sv366.scala:48)\n\tat Problem.main(tmpd06sv366.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009271
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        def findMax0(max : String, words : List[String]) : String\
    \ = {\n            if (words.isEmpty) max\n            else {\n              \
    \  val max1 = if (words.head.distinct.length > max.distinct.length) words.head\
    \ else max\n                findMax0(max1, words.tail)\n            }\n      \
    \  }\n        findMax0(words.head, words.tail)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsv8fymx2.scala:26)\n\tat Problem.main(tmpsv8fymx2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009270
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        var max = (\"\", Set[Char]())\n        for (word <- words)\
    \ {\n            var set = Set[Char]()\n            for (c <- word) set += c\n\
    \            if (set.size > max._2.size) max = (word, set)\n            else if\
    \ (set.size == max._2.size && word < max._1) max = (word, set)\n        }\n  \
    \      max._1\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009270
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val sorted = words.sortWith(_.length < _.length)\n   \
    \     for (i <- sorted.indices) {\n            val temp = sorted(i)\n        \
    \    if (sorted.exists(temp.length < _.length))\n                return temp\n\
    \        }\n        return \"\"\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\"\
    )));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbzdnfedv.scala:24)\n\tat Problem.main(tmpbzdnfedv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009270
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        var map = Map[String, Int]()\n        for (word <- words)\
    \ {\n            map(word) = word.distinct.length\n        }\n        return map.maxBy(_._2)._1\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprjr0ebv6.scala:23)\n\tat Problem.main(tmprjr0ebv6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009270
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        return words.minBy(x => (x.length, x))\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"\
    of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwtnikwsd.scala:18)\n\tat Problem.main(tmpwtnikwsd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009270
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        var result = \"\"\n        var max = -1\n        words.foreach(word\
    \ => {\n            val currentUnique = word.groupBy(x => x).keys.size\n     \
    \       if (currentUnique > max) {\n                max = currentUnique\n    \
    \            result = word\n            }\n        })\n        result\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\"\
    , \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv2e6pnr5.scala:28)\n\tat Problem.main(tmpv2e6pnr5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009270
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        words.foldLeft(\"\")((m, x) => if (m.length < x.length)\
    \ x else m)\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0fgrjeg8.scala:19)\n\tat Problem.main(tmp0fgrjeg8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009270
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        // Define an ordering on strings by their maximum number\
    \ of unique\n        // characters.\n        val o = Ordering.by((s : String)\
    \ => s.toSet.size)\n        // Apply this ordering to each string in the list\
    \ of words, sorting\n        // them in increasing order according to their maximum\
    \ number of unique\n        // characters.\n        val wordsSorted = words.sorted(o)\n\
    \        // Since the list is sorted, the maximum number of unique characters\n\
    \        // is attained by the last element in the list, and any words tied for\n\
    \        // maximum number of unique characters are adjacent to it.\n        //\
    \ We filter these words, leaving only the one which comes first in\n        //\
    \ lexicographical order.\n        wordsSorted.filter((s : String) => s.toSet.size\
    \ == wordsSorted.last.toSet.size).head\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9849rebg.scala:31)\n\tat Problem.main(tmp9849rebg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009270
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val characters = words.map(w => w.toSet)\n        val\
    \ max = characters.map(s => s.size).max\n        characters.zip(words).filter(_._1.size\
    \ == max).map(_._2).sortWith(_ < _).head\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009270
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        var uniqueMax = -1\n        var uniqueWord = \"\"\n  \
    \      words.foreach(word => {\n            var uniqueCount = 0\n            word.foreach(char\
    \ => {\n                if (word.count(_ == char) == 1) uniqueCount += 1\n   \
    \         })\n            if (uniqueCount > uniqueMax) {\n                uniqueMax\
    \ = uniqueCount\n                uniqueWord = word\n            }\n        })\n\
    \        uniqueWord\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpofk18dnt.scala:31)\n\tat Problem.main(tmpofk18dnt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009278
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        // Your code here!\n        if (words.isEmpty) return\
    \ \"\"\n        else {\n            var word = words.head\n            var word_char_count\
    \ = words.head.toSet.size\n            for (w <- words) {\n                val\
    \ char_count = w.toSet.size\n                if (char_count > word_char_count)\
    \ {\n                    word = w\n                    word_char_count = char_count\n\
    \                }\n                else if (char_count == word_char_count) {\n\
    \                    if (w < word) word = w\n                }\n            }\n\
    \            return word\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009280
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        var dict = Map[String, List[String]]()\n        for (word\
    \ <- words) {\n            var value = word.toSet.toList.sorted\n            if\
    \ (dict.contains(value.mkString)) dict(value.mkString) = dict(value.mkString)\
    \ :+ word\n            else dict += (value.mkString -> List(word))\n        }\n\
    \        var max = 0\n        var result = \"\"\n        for (word <- words) {\n\
    \            var value = word.toSet.toList.sorted\n            if (value.length\
    \ > max) {\n                max = value.length\n                result = word\n\
    \            }\n        }\n        dict(result.toSet.toList.sorted.mkString).sorted.head\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp129a55ms.scala:37)\n\tat Problem.main(tmp129a55ms.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009281
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        words.sortWith((a, b) => (f(a) > f(b)) || ((f(a) == f(b))\
    \ && (a < b))).head\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjvo_m2_u.scala:15:34 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        words.sortWith((\e[36ma\e[0m, \e[36mb\e[0m) =>\
    \ (f(a) > f(b)) || ((f(a) == f(b)) && (a < b))).head\n\e[31m\e[31m   |\e[0m  \
    \                                ^\e[0m\n\e[31m   |\e[0m                     \
    \             Not found: f\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009276
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        words.sortWith((a, b) => a.length > b.length).filter(word\
    \ => word.length == words.map(word => word.length).max).sortWith((a, b) => a <\
    \ b).head\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_24n5sdo.scala:25)\n\tat Problem.main(tmp_24n5sdo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009281
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        var maxLen = 0\n        var maxWord = \"\"\n        for\
    \ (w <- words) {\n            val len = w.toSet.size\n            if (len > maxLen)\
    \ {\n                maxLen = len\n                maxWord = w\n            }\n\
    \        }\n        maxWord\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\"\
    )));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjpu2wlxv.scala:28)\n\tat Problem.main(tmpjpu2wlxv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009281
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val map = new HashMap[String, Set[Char]]\n        words.foreach\
    \ {s =>\n            val chars = s.toSet\n            map(s) = chars\n       \
    \ }\n        var max = map(words(0)).size\n        words.foreach {word =>\n  \
    \          val size = map(word).size\n            if (size > max) {\n        \
    \        max = size\n            }\n        }\n        var min = map(words(0))\n\
    \        words.foreach {word =>\n            val chars = map(word)\n         \
    \   if (chars.size == max && chars < min) {\n                min = chars\n   \
    \         }\n        }\n        words.find(map(_) == min).get\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"\
    of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpuy52cg4m.scala:18:21\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m            map(s) = chars\n\e\
    [31m\e[31m   |\e[0m                     ^^^^^\e[0m\n\e[31m   |\e[0m          \
    \           Found:    (chars : Set[Char])\n\e[31m   |\e[0m                   \
    \  Required: collection.mutable.Set[Char]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpuy52cg4m.scala:30:43 ------------------------\e[0m\e\
    [0m\n\e[31m30 |\e[0m            \e[33mif\e[0m (chars.size == max && chars < min)\
    \ {\n\e[31m\e[31m   |\e[0m                                     ^^^^^^^\e[0m\n\e\
    [31m   |\e[0mvalue < is not a member of collection.mutable.Set[Char], but could\
    \ be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne\
    \ of the following imports might make progress towards fixing the problem:\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m  import math.Ordered.orderingToOrdered\n\e[31m\
    \   |\e[0m  import math.Ordering.Implicits.infixOrderingOps\n\e[31m   |\e[0m\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009281
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        var maxWord = words(0)\n        var max = countDistinctChars(words(0))\n\
    \        for (i <- 1 until words.length) {\n            val cur = countDistinctChars(words(i))\n\
    \            if (cur > max) {\n                max = cur\n                maxWord\
    \ = words(i)\n            }\n        }\n        maxWord\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"\
    ))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\"\
    , \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\"\
    , \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6j9_vqly.scala:16:18 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mvar\e[0m \e[36mmax\e[0m = countDistinctChars(words(\e\
    [31m0\e[0m))\n\e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                  Not found: countDistinctChars\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp6j9_vqly.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[36mcur\e[0m = countDistinctChars(words(i))\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                      Not found: countDistinctChars\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009277
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        var maxWord = \"\"\n        var maxNum = 0\n        for\
    \ (word <- words) {\n            val num = (word.toSet).size\n            if (num\
    \ > maxNum) {\n                maxNum = num\n                maxWord = word\n\
    \            }\n        }\n        maxWord\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphv93zi9r.scala:28)\n\tat Problem.main(tmphv93zi9r.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009281
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val s = words.map(s => (s, s.toSet.size)).sortWith(_._2\
    \ > _._2)\n        s.head._1\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\"\
    )));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwzui4jar.scala:20)\n\tat Problem.main(tmpwzui4jar.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009281
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        var maxLen = 0\n        var maxWord = \"\"\n        for\
    \ (word <- words) {\n            val uniqueChars = word.toSet\n            if\
    \ (uniqueChars.size > maxLen) {\n                maxLen = uniqueChars.size\n \
    \               maxWord = word\n            }\n        }\n        maxWord\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpp5i7dzft.scala:28)\n\tat Problem.main(tmpp5i7dzft.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009281
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n      val res = words.map(word => (word, word.toSet.size)).sortWith((a,\
    \ b) => a._2 > b._2 || (a._2 == b._2 && a._1 < b._1))\n      return res.head._1\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009281
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        if (words.isEmpty) \"\"\n        else words.sortWith((x,\
    \ y) => x.length > y.length || (x.length == y.length && x.compareTo(y) < 0)).head\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgjslyfbw.scala:26)\n\tat Problem.main(tmpgjslyfbw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009281
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        words.maxBy(word => word.toSet.size)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"\
    ))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\"\
    , \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\"\
    , \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3fcp02o_.scala:19)\n\tat Problem.main(tmp3fcp02o_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009281
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val wordCount = words.map(x => (x, x.toSet.size)).sortBy(x\
    \ => (x._2, x._1))\n        wordCount.reverse.head._1\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"\
    ))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\"\
    , \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\"\
    , \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcichaejf.scala:20)\n\tat Problem.main(tmpcichaejf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009281
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        words.maxBy(w => w.toSet.size)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"\
    ))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\"\
    , \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\"\
    , \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpc8q5gee3.scala:19)\n\tat Problem.main(tmpc8q5gee3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009281
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        // Hint: How do you find the maximum number in a list?\n\
    \        def findMaxUnique(words : List[String]) : Int = {\n            var list\
    \ = new ListBuffer[Int]()\n            for (i <- 0 until words.length) {\n   \
    \             var number = 0\n                var unique = new ListBuffer[Char]()\n\
    \                for (j <- 0 until words(i).length) {\n                    var\
    \ c = words(i)(j)\n                    if (!unique.contains(c)) {\n          \
    \              unique += c\n                        number += 1\n            \
    \        }\n                }\n                list += number\n            }\n\
    \            return list.max\n        }\n        var result = \"\"\n        var\
    \ max = findMaxUnique(words)\n        for (i <- 0 until words.length) {\n    \
    \        var number = 0\n            var unique = new ListBuffer[Char]()\n   \
    \         for (j <- 0 until words(i).length) {\n                var c = words(i)(j)\n\
    \                if (!unique.contains(c)) {\n                    unique += c\n\
    \                    number += 1\n                }\n            }\n         \
    \   if (number == max) {\n                result = words(i)\n                break\n\
    \            }\n        }\n        return result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpo2ed9uut.scala:46:16 ------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m                break\n\e[31m\e[31m   |\e[0m        \
    \        ^^^^^\e[0m\n\e[31m   |\e[0m                Not found: break\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009278
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        var best = \"\"\n        for (w <- words) {\n        \
    \    if (best == \"\" || w.distinct.length > best.distinct.length ||\n       \
    \             (w.distinct.length == best.distinct.length && w < best)) {\n   \
    \             best = w\n            }\n        }\n        best\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"\
    of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009281
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        if (words.length == 0) return \"\"\n        var max =\
    \ words(0)\n        var maxSet : Set[Char] = Set()\n        for (word <- words)\
    \ {\n            val set = word.toSet\n            if (set.size > maxSet.size)\
    \ {\n                max = word\n                maxSet = set\n            }\n\
    \        }\n        return max\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\"\
    )));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptyfwwdo_.scala:22:25\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m                maxSet = set\n\
    \e[31m\e[31m   |\e[0m                         ^^^\e[0m\n\e[31m   |\e[0m      \
    \                   Found:    (set : Set[Char])\n\e[31m   |\e[0m             \
    \            Required: collection.mutable.Set[Char]\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660009280
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val sizes = for(word <- words) yield (word, word.groupBy(identity).size)\n\
    \        sizes.maxBy(x => (x._2, x._1))._1\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3lthcp2y.scala:20)\n\tat Problem.main(tmp3lthcp2y.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009281
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        words.sortWith(\n            (left, right) => {\n    \
    \            if (left.distinct.length > right.distinct.length)\n             \
    \       true\n                else if (left.distinct.length < right.distinct.length)\n\
    \                    false\n                else\n                    left.compareTo(right)\
    \ < 0\n            }\n        ).last\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpahk_cirm.scala:27)\n\tat Problem.main(tmpahk_cirm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009281
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        def findMax(words : List[String], current : (String, Int))\
    \ : String = {\n            def uniqCharCount(word : String) : Int = {\n     \
    \           word.toList.distinct.length\n            }\n            words match\
    \ {\n                case Nil => current._1\n                case x :: xs => {\n\
    \                    val curCount = uniqCharCount(x)\n                    if (curCount\
    \ > current._2) findMax(xs, (x, curCount))\n                    else if (curCount\
    \ == current._2) findMax(xs, (if (x < current._1) x else current._1, curCount))\n\
    \                    else findMax(xs, current)\n                }\n          \
    \  }\n        }\n        findMax(words, (\"\", 0))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"\
    ))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\"\
    , \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\"\
    , \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009282
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        words.foldLeft(words.head)((x, y) =>\n            if (unique(x)\
    \ > unique(y))\n                x\n            else if (unique(x) < unique(y))\n\
    \                y\n            else if (x < y)\n                x\n         \
    \   else\n                y)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\"\
    )));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5fqjl48h.scala:16:16 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mif\e[0m (unique(x) > unique(y))\n\e\
    [31m\e[31m   |\e[0m                ^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \  Not found: unique\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5fqjl48h.scala:18:21\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m            \e[33melse\e\
    [0m \e[33mif\e[0m (unique(x) < unique(y))\n\e[31m\e[31m   |\e[0m             \
    \        ^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: unique\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009279
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val list = words.map(x => (x, x.toSet.size)).toList\n\
    \        list.reduce((a, b) => if (a._2 >= b._2) a else b)._1\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"\
    of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbesuxkpy.scala:20)\n\tat Problem.main(tmpbesuxkpy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009286
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        // Solution 1. Use the last, which is safe for the first\
    \ condition\n        // and sort for the second condition.\n        // words.filter(w\
    \ => w.length == words.map(w => w.toSet.size).max).last\n        // Solution 2.\
    \ Use groupBy to group words by the length of the set of\n        // characters\
    \ they contain, then reverse to get the longest word, then\n        // apply a\
    \ custom sorting function.\n        words.groupBy(w => w.toSet.size).toList.sortBy(pair\
    \ => (pair._1, pair._2)).last._2.sorted.head\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp2arcqs_5.scala:21:82 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        words.groupBy(\e[36mw\e[0m => w.toSet.size).toList.sortBy(\e\
    [36mpair\e[0m => (pair._1, pair._2)).last._2.sorted.head\n\e[31m\e[31m   |\e[0m\
    \                                                                            \
    \      ^\e[0m\n\e[31m   |\e[0mNo implicit Ordering defined for (Int, List[String])..\n\
    \e[31m   |\e[0mI found:\n\e[31m   |\e[0m\n\e[31m   |\e[0m    scala.math.Ordering.Tuple2[\e\
    [35mInt\e[0m, \e[35mList[String]\e[0m](scala.math.Ordering.Int, \n\e[31m   |\e\
    [0m      scala.math.Ordering.ordered[\e[35mList[String]\e[0m](\n\e[31m   |\e[0m\
    \        /* missing */summon[scala.math.Ordering.AsComparable[List[String]]]\n\
    \e[31m   |\e[0m      )\n\e[31m   |\e[0m    )\n\e[31m   |\e[0m\n\e[31m   |\e[0mBut\
    \ no implicit values were found that match type scala.math.Ordering.AsComparable[List[String]].\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009288
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        words.sortWith((a, b) => a.length > b.length || (a.length\
    \ == b.length && a < b)).find(a => a.toSet.size == a.length).get\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"\
    of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: None.get\n\tat scala.None$.get(Option.scala:627)\n\
    \tat scala.None$.get(Option.scala:626)\n\tat Problem$.findMax(tmp8jglgwri.scala:15)\n\
    \tat Problem$.main(tmp8jglgwri.scala:20)\n\tat Problem.main(tmp8jglgwri.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009289
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        // Case 1: words contains single string.\n        if (words.size\
    \ == 1) return words(0)\n        // Case 2: words contains multiple strings.\n\
    \        var max : Int = 0\n        var maxString : String = \"\"\n        for\
    \ (w <- words) {\n            val count = w.toCharArray.toSet.size\n         \
    \   if (count > max) {\n                max = count\n                maxString\
    \ = w\n            }\n        }\n        return maxString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"\
    ))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\"\
    , \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\"\
    , \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpev420ysd.scala:31)\n\tat Problem.main(tmpev420ysd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009289
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        var max = 0\n        var maxw = \"\"\n        for (w <-\
    \ words) {\n            if (w.toSet.size > max) {\n                max = w.toSet.size\n\
    \                maxw = w\n            }\n        }\n        maxw\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\"\
    , \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3ih1i5gh.scala:27)\n\tat Problem.main(tmp3ih1i5gh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009290
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        words.sortWith((a, b) => (a.distinct.length compare b.distinct.length)\
    \ match {\n            case 1 => true\n            case -1 => false\n        \
    \    case 0 => a < b\n        }).last\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprhxx739u.scala:22)\n\tat Problem.main(tmprhxx739u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009291
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        var bestWord = \"\"\n        var bestCount = 0\n     \
    \   for (word <- words) {\n            val count = word.toSet.size\n         \
    \   if (count > bestCount) {\n                bestCount = count\n            \
    \    bestWord = word\n            }\n        }\n        bestWord\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"\
    of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8so8u6mv.scala:28)\n\tat Problem.main(tmp8so8u6mv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009291
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        var lst = new ListBuffer[String]\n        var lst2 = new\
    \ ListBuffer[String]\n        var lst3 = new ListBuffer[String]\n        var str\
    \ = \"\"\n        for (i <- words) {\n            for (j <- 0 until i.length)\
    \ {\n                var flag = false\n                for (k <- 0 until lst.length)\
    \ {\n                    if (i(j) == lst(k)) {\n                        flag =\
    \ true\n                    }\n                }\n                if (flag ==\
    \ false) {\n                    lst += i(j).toString\n                }\n    \
    \        }\n            lst2 += lst.length.toString\n            lst.clear\n \
    \       }\n        var max = -99999\n        for (i <- 0 until lst2.length) {\n\
    \            if (lst2(i).toInt > max) {\n                max = lst2(i).toInt\n\
    \            }\n        }\n        for (i <- 0 until lst2.length) {\n        \
    \    if (lst2(i).toInt == max) {\n                lst3 += words(i)\n         \
    \   }\n        }\n        if (lst3.length > 1) {\n            str = lst3(0)\n\
    \            for (i <- 1 until lst3.length) {\n                if (lst3(i) < str)\
    \ {\n                    str = lst3(i)\n                }\n            }\n   \
    \     } else {\n            str = lst3(0)\n        }\n        str\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\"\
    , \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp63wvb3bb.scala:23:24 -----------------------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                    \e[33mif\e[0m (i(j) == lst(k)) {\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m        Values of types Char and String cannot be compared with == or !=\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009291
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        words.foldLeft(\"\") { (acc, word) =>\n            if\
    \ (acc == \"\") word\n            else if (acc.distinct.length < word.distinct.length)\
    \ word\n            else if (acc.distinct.length == word.distinct.length) {\n\
    \                if (acc > word) acc\n                else word\n            }\n\
    \            else acc\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\"\
    )));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpj96xbr2y.scala:27)\n\tat Problem.main(tmpj96xbr2y.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009292
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n    \twords.reduceLeft((acc, word) => {\n    \t\tif (word.distinct.length\
    \ > acc.distinct.length) word\n    \t\telse if (word.distinct.length == acc.distinct.length)\
    \ {\n    \t\t\tif (word.compareTo(acc) < 0) word\n    \t\t\telse acc\n    \t\t\
    }\n    \t\telse acc\n    \t})\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\"\
    )));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009292
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n      if (words.isEmpty) null\n      else words.reduce((a, b)\
    \ => {\n        if (a.length > b.length) a\n        else if (a.length < b.length)\
    \ b\n        else if (a.compareTo(b) < 0) a\n        else b\n      })\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\"\
    , \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzo1wohik.scala:31)\n\tat Problem.main(tmpzo1wohik.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009292
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        var max : String = words(0)\n        var maxUniqueCharacters\
    \ : Int = 0\n        for (i <- 0 until words.length) {\n            val uniqueChars\
    \ = getUniqueChars(words(i))\n            if (uniqueChars.length > maxUniqueCharacters)\
    \ {\n                max = words(i)\n                maxUniqueCharacters = uniqueChars.length\n\
    \            }\n        }\n        return max\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphv58jm60.scala:18:30 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[36muniqueChars\e[0m = getUniqueChars(words(i))\n\
    \e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                              Not found: getUniqueChars\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009289
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n      val numUniques = words.map(word => word.groupBy(char =>\
    \ char).keys.size)\n      val maxUniques = numUniques.max\n      val numWithMaxUniques\
    \ = numUniques.zipWithIndex.filter(_._1 == maxUniques).map(_._2)\n      words(numWithMaxUniques.min)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwhxi8uy8.scala:22)\n\tat Problem.main(tmpwhxi8uy8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009292
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        var max = \"\"\n        for (w <- words) {\n         \
    \   if (w.size > max.size) {\n                max = w\n            } else if (w.size\
    \ == max.size) {\n                if (w < max) {\n                    max = w\n\
    \                }\n            }\n        }\n        max\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"\
    ))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\"\
    , \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\"\
    , \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpu7nin1tw.scala:35)\n\tat Problem.main(tmpu7nin1tw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009292
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        var map = Map[String, Int]()\n        words.foreach(word\
    \ => map += (word -> word.toSet.size))\n        map.toList.maxBy(_._2)._1\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdaog0tbx.scala:21)\n\tat Problem.main(tmpdaog0tbx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009292
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        if (words.length == 0) return null\n        var maxWord\
    \ = words(0)\n        for (word <- words) {\n            if (word.distinct.length\
    \ > maxWord.distinct.length) maxWord = word\n            else if (word.distinct.length\
    \ == maxWord.distinct.length) {\n                if (word < maxWord) maxWord =\
    \ word\n            }\n        }\n        return maxWord\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"\
    ))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\"\
    , \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\"\
    , \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009292
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val wordWithUniqueCharacters = for (word <- words) yield\
    \ word -> word.distinct.length\n        wordWithUniqueCharacters.sortBy(x => (-x._2,\
    \ x._1)).head._1\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009293
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        var max : String = \"\"\n        for (word <- words) {\n\
    \            if (max == \"\") max = word\n            else if (word.toSet.size\
    \ > max.toSet.size) max = word\n            else if (word.toSet.size == max.toSet.size\
    \ && word < max) max = word\n        }\n        return max\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"\
    ))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\"\
    , \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\"\
    , \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009292
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        words.maxBy(_.toSet.size)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxjzu4ae1.scala:19)\n\tat Problem.main(tmpxjzu4ae1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009291
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        var max = \"\";\n        for (word <- words) {\n     \
    \       if (word.length > max.length) max = word;\n            else if (word.length\
    \ == max.length) max = word.compareTo(max) match {\n                case -1 =>\
    \ word;\n                case 0 => word;\n                case 1 => max;\n   \
    \         }\n        }\n        return max;\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError: -9 (of class java.lang.Integer)\n\tat Problem$.findMax$$anonfun$1(tmph531i4lk.scala:21)\n\
    \tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)\n\tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)\n\
    \tat scala.collection.immutable.List.foreach(List.scala:333)\n\tat Problem$.findMax(tmph531i4lk.scala:23)\n\
    \tat Problem$.main(tmph531i4lk.scala:28)\n\tat Problem.main(tmph531i4lk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009292
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n      def f(word : String) : Int = {\n        var c = Set[Char]()\n\
    \        for (i <- 0 until word.length) {\n          c += word(i)\n        }\n\
    \        c.size\n      }\n      var result = words(0)\n      var max = f(result)\n\
    \      for (i <- 1 until words.length) {\n        val word = words(i)\n      \
    \  val m = f(word)\n        if (m > max) {\n          max = m\n          result\
    \ = word\n        }\n      }\n      result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppdk3fza0.scala:36)\n\tat Problem.main(tmppdk3fza0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009293
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        def unique(word : String) : HashSet[Char] = {\n      \
    \      val hs = new HashSet[Char]\n            for (i <- 0 until word.length)\
    \ {\n                hs += word(i)\n            }\n            hs\n        }\n\
    \        def uniqueMax(word : String, max : Int, maxWord : String) : String =\
    \ {\n            if (unique(word).size > max) word\n            else if (unique(word).size\
    \ == max) {\n                if (word < maxWord) word\n                else maxWord\n\
    \            }\n            else maxWord\n        }\n        words.foldLeft(\"\
    \")((maxWord, word) => uniqueMax(word, unique(maxWord).size, maxWord))\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\"\
    , \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009292
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n      if (words.length == 0)\n        return \"\"\n      words.foldLeft(words.head)((max\
    \ : String, word : String) => {\n        if (word.length > max.length)\n     \
    \     word\n        else if (word.length == max.length) {\n          val mchars\
    \ = countChars(max)\n          val wchars = countChars(word)\n          if (mchars.size\
    \ < wchars.size)\n            word\n          else if (mchars.size == wchars.size)\
    \ {\n            if (word < max)\n              word\n            else\n     \
    \         max\n          }\n          else\n            max\n        }\n     \
    \   else\n          max\n      })\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpehh5mikd.scala:21:23 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m          \e[33mval\e[0m \e[36mmchars\e[0m = countChars(max)\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                      Not found: countChars\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpehh5mikd.scala:22:23 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m          \e[33mval\e[0m \e[36mwchars\e[0m = countChars(word)\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                      Not found: countChars\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009291
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        def f(x : String, y : String) : Boolean = x.size > y.size\
    \ || (x.size == y.size && x < y)\n        if (words.size == 0) \"\"\n        else\
    \ words.reduceLeft((x, y) => if (f(x, y)) x else y)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"\
    ))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\"\
    , \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\"\
    , \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpm505ktew.scala:27)\n\tat Problem.main(tmpm505ktew.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009298
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        words.maxBy(word => word.groupBy(x => x).size)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\"\
    , \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9hzhgwc0.scala:19)\n\tat Problem.main(tmp9hzhgwc0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009299
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val u = words.map(x => x.toSet)\n        val q = words.zip(u)\n\
    \        val w = q.sortBy(x => x._2.size)\n        val e = w.map(x => x._1)\n\
    \        return e.last\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7wsqto2e.scala:23)\n\tat Problem.main(tmp7wsqto2e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009300
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val wordScore = words.map { word =>\n            (word,\
    \ word.toSet.size)\n        }\n        val maxScore = wordScore.maxBy(_._2)._2\n\
    \        wordScore.filter(_._2 == maxScore).minBy(_._1)._1\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"\
    ))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\"\
    , \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\"\
    , \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009301
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        var maxString = \"\"\n        var maxLength = 0\n    \
    \    for (word <- words) {\n            val length = word.groupBy(c => c).size\n\
    \            if (length > maxLength) {\n                maxLength = length\n \
    \               maxString = word\n            }\n        }\n        maxString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9rn5sfjv.scala:28)\n\tat Problem.main(tmp9rn5sfjv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009301
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        var pairs = new ListBuffer[(String, Int)]\n        for\
    \ (word <- words) {\n            pairs += ((word, word.length))\n        }\n \
    \       pairs.sortWith((x, y) => if (x._2 == y._2) x._1 < y._1 else x._2 > y._2).head._1\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfth46nor.scala:29)\n\tat Problem.main(tmpfth46nor.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009301
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        var result = words(0)\n        for (i <- 1 until words.length)\
    \ {\n            if (words(i).toSet.size > result.toSet.size) result = words(i)\n\
    \            else if (words(i).toSet.size == result.toSet.size && words(i) < result)\
    \ result = words(i)\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009301
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        words.foldLeft((\"\", 0))((acc, cur) => if (cur.distinct.length\
    \ > acc._2) (cur, cur.distinct.length) else acc)._1\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"\
    ))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\"\
    , \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\"\
    , \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4gzgc8ll.scala:19)\n\tat Problem.main(tmp4gzgc8ll.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009302
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        var max = (\"\", 0)\n        for (word <- words) {\n \
    \           val unique = new HashSet[Char]\n            for (c <- word) unique\
    \ += c\n            if (unique.size > max._2) max = (word, unique.size)\n    \
    \        else if (unique.size == max._2 && word < max._1) max = (word, unique.size)\n\
    \        }\n        max._1\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\"\
    )));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009302
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        def f(words : List[String], max : (String, Int)) : String\
    \ = {\n            if (words.length == 0) max._1\n            else {\n       \
    \         val (word, count) = words.head.distinct.foldLeft((words.head, 0))((a,\
    \ b) => (a._1, a._2 + 1))\n                if (count > max._2) f(words.tail, (word,\
    \ count))\n                else if (count == max._2) {\n                    if\
    \ (word < max._1) f(words.tail, (word, count))\n                    else f(words.tail,\
    \ max)\n                }\n                else f(words.tail, max)\n         \
    \   }\n        }\n        f(words, (\"\", 0))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009302
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        words.maxBy(w => (w.toSet.size, w))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"\
    ))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\"\
    , \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\"\
    , \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9ugdc1j4.scala:19)\n\tat Problem.main(tmp9ugdc1j4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009303
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        var max : String = \"\"\n        var maxCount : Int =\
    \ 0\n        for (word <- words) {\n            val count = word.toSet.size\n\
    \            if (count > maxCount) {\n                max = word\n           \
    \     maxCount = count\n            }\n        }\n        max\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"\
    of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpieuke_39.scala:28)\n\tat Problem.main(tmpieuke_39.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009303
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        if (words.isEmpty) \"\"\n        else {\n            val\
    \ unsorted = words.map(word => (word, word.toSet.size))\n            val sorted\
    \ = unsorted.sortWith((x, y) => x._2 > y._2 || (x._2 == y._2 && x._1 < y._1))\n\
    \            sorted.head._1\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009303
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        var max = 1\n        var maxWords = Array[String]()\n\
    \        for (word <- words) {\n            val uniques = word.distinct.length\n\
    \            if (uniques > max) {\n                max = uniques\n           \
    \     maxWords = Array[String](word)\n            } else if (uniques == max) {\n\
    \                maxWords :+= word\n            }\n        }\n        maxWords.sortWith(_\
    \ < _)(0)\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009303
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        // Use a HashMap to count the number of unique characters\
    \ in each word.\n        val uniqueChars = new HashMap[String, Int]()\n      \
    \  for (word <- words) {\n            uniqueChars += word -> word.distinct.length\n\
    \        }\n        // Use a Buffer to store the words with max number of unique\
    \ characters.\n        val mostUniqueChars = new Buffer[String]()\n        for\
    \ ((word, numUniqueChars) <- uniqueChars) {\n            if (mostUniqueChars.isEmpty)\
    \ {\n                mostUniqueChars += word\n            } else {\n         \
    \       if (numUniqueChars > uniqueChars(mostUniqueChars(0))) {\n            \
    \        mostUniqueChars.clear\n                    mostUniqueChars += word\n\
    \                } else if (numUniqueChars == uniqueChars(mostUniqueChars(0)))\
    \ {\n                    mostUniqueChars += word\n                }\n        \
    \    }\n        }\n        // Sort the words with max number of unique characters\
    \ and return the first one.\n        return mostUniqueChars.sortWith(_ < _)(0)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpe37bwm59.scala:23:32 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mif\e[0m (mostUniqueChars.isEmpty) {\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                value isEmpty is not a member of Unit\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpe37bwm59.scala:24:32 ------------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m                mostUniqueChars += word\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     value += is not\
    \ a member of Unit - did you mean mostUniqueChars.!=?\n\e[31m\e[31m-- [E050] Type\
    \ Error: /tmp/tmpe37bwm59.scala:26:49 -----------------------------\e[0m\e[0m\n\
    \e[31m26 |\e[0m                \e[33mif\e[0m (numUniqueChars > uniqueChars(mostUniqueChars(\e\
    [31m0\e[0m))) {\n\e[31m\e[31m   |\e[0m                                       \
    \          ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                          \e[33mvalue\e\
    [0m \e[35mmostUniqueChars\e[0m does not take parameters\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpe37bwm59.scala:27:36 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m                    mostUniqueChars.clear\n\e[31m\e[31m\
    \   |\e[0m                    ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                value clear is not a member of Unit\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpe37bwm59.scala:28:36 ------------------------\e[0m\e[0m\n\
    \e[31m28 |\e[0m                    mostUniqueChars += word\n\e[31m\e[31m   |\e\
    [0m                    ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     value += is\
    \ not a member of Unit - did you mean mostUniqueChars.!=?\n\e[31m\e[31m-- [E050]\
    \ Type Error: /tmp/tmpe37bwm59.scala:29:57 -----------------------------\e[0m\e\
    [0m\n\e[31m29 |\e[0m                } \e[33melse\e[0m \e[33mif\e[0m (numUniqueChars\
    \ == uniqueChars(mostUniqueChars(\e[31m0\e[0m))) {\n\e[31m\e[31m   |\e[0m    \
    \                                                     ^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                          \e[33mvalue\e[0m \e[35mmostUniqueChars\e"
  stdout: ''
  timestamp: 1660009303
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n    \tif (words.isEmpty) \"\"\n    \telse words.map((word) =>\
    \ word -> word.distinct.length).maxBy(_._2)._1\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdr36b9wm.scala:20)\n\tat Problem.main(tmpdr36b9wm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009304
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n    \tvar max : String = \"\"\n    \tvar l : Int = -1\n    \t\
    for (i <- 0 until words.length) {\n    \t\tval word = words(i)\n    \t\tval m\
    \ = word.toSet.size\n    \t\tif (m > l) {\n    \t\t\tmax = word\n    \t\t\tl =\
    \ m\n    \t\t}\n    \t}\n    \tmax\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpy9w5txu_.scala:29)\n\tat Problem.main(tmpy9w5txu_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009304
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        var map = new HashMap[String, Int]\n        for (word\
    \ <- words) {\n            map += (word -> word.distinct.length)\n        }\n\
    \        var max = (words(0), 0)\n        for ((word, count) <- map) {\n     \
    \       if (count > max._2) max = (word, count)\n        }\n        max._1\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwi_xwmjo.scala:27)\n\tat Problem.main(tmpwi_xwmjo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009304
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        return words.maxBy(x => x.distinct.length)\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\"\
    , \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgv06kk0m.scala:19)\n\tat Problem.main(tmpgv06kk0m.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009304
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        var result = \"\"\n        var max = -1\n        for (word\
    \ <- words) {\n            val unique = word.toSet.size\n            if (unique\
    \ > max) {\n                max = unique\n                result = word\n    \
    \        }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3tu8sua3.scala:28)\n\tat Problem.main(tmp3tu8sua3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009303
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        var maxWord = \"\"\n        var maxUniqChars = 0\n   \
    \     for (word <- words) {\n            val uniqChars = word.toList.distinct.length\n\
    \            if (uniqChars > maxUniqChars) {\n                maxUniqChars = uniqChars\n\
    \                maxWord = word\n            }\n        }\n        maxWord\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp55gvckvh.scala:28)\n\tat Problem.main(tmp55gvckvh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009304
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        def findUniqueChars(s : String) : List[Char] = {\n   \
    \         var charSet = Set[Char]()\n            for (c <- s) {\n            \
    \    charSet += c\n            }\n            charSet.toList\n        }\n    \
    \    def maxWord(s1 : String, s2 : String) : String = {\n            if (findUniqueChars(s1).length\
    \ > findUniqueChars(s2).length) s1\n            else if (findUniqueChars(s1).length\
    \ < findUniqueChars(s2).length) s2\n            else if (s1 < s2) s1\n       \
    \     else s2\n        }\n        words.reduceLeft(maxWord)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"\
    ))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\"\
    , \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\"\
    , \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009304
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val distinct = words.map(w => w.distinct)\n        val\
    \ (max_len, max_string) = distinct.zip(words).maxBy(_._1.length)\n        max_string\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe8gemk94.scala:21)\n\tat Problem.main(tmpe8gemk94.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009305
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        def findMax(currentMax : String, words : List[String])\
    \ : String = {\n            if (words.isEmpty) currentMax\n            else {\n\
    \                val currentUnique = words.head.groupBy(ch => ch).mapValues(s\
    \ => s.length).values.sum\n                val maxUnique = currentMax.groupBy(ch\
    \ => ch).mapValues(s => s.length).values.sum\n                if (currentUnique\
    \ > maxUnique) findMax(words.head, words.tail)\n                else if (currentUnique\
    \ == maxUnique) {\n                    if (words.head < currentMax) findMax(words.head,\
    \ words.tail)\n                    else findMax(currentMax, words.tail)\n    \
    \            }\n                else findMax(currentMax, words.tail)\n       \
    \     }\n        }\n        findMax(words.head, words.tail)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"\
    ))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\"\
    , \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\"\
    , \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_iwan49b.scala:38)\n\tat Problem.main(tmp_iwan49b.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009309
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        words.maxBy(word => word.toSet.size)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"\
    ))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\"\
    , \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\"\
    , \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3fcp02o_.scala:19)\n\tat Problem.main(tmp3fcp02o_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009281
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val allChars = words.foldLeft(Set[Char]())((set, word)\
    \ => set ++ word.toSet)\n        val wordsWithCharCount = words.map(word => (word,\
    \ word.map(c => allChars.count(c2 => c == c2)).sum))\n        var maxWord = wordsWithCharCount.head\n\
    \        wordsWithCharCount.tail.foreach(word => if (word._2 > maxWord._2) maxWord\
    \ = word)\n        maxWord._1\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\"\
    )));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpghrxft8g.scala:23)\n\tat Problem.main(tmpghrxft8g.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009311
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        words.foldLeft((\"\", (HashSet[Char](), 0)))((state, word)\
    \ => {\n            val uniqueChars = word.toSet\n            val numUniqueChars\
    \ = uniqueChars.size\n            if (numUniqueChars > state._2._2) {\n      \
    \          (word, (uniqueChars, numUniqueChars))\n            } else if (numUniqueChars\
    \ == state._2._2) {\n                if (word < state._1) {\n                \
    \    (word, (uniqueChars, numUniqueChars))\n                } else {\n       \
    \             state\n                }\n            } else {\n               \
    \ state\n            }\n        })._1\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbkpxs4dd.scala:19:24\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m                (word, (uniqueChars,\
    \ numUniqueChars))\n\e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                        Found:    (uniqueChars : Set[Char])\n\
    \e[31m   |\e[0m                        Required: scala.collection.mutable.HashSet[Char]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbkpxs4dd.scala:22:28\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m                    (word, (uniqueChars,\
    \ numUniqueChars))\n\e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                        Found:    (uniqueChars : Set[Char])\n\
    \e[31m   |\e[0m                        Required: scala.collection.mutable.HashSet[Char]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009310
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val (max, word) = words.foldLeft((0, \"\"))((max, word)\
    \ => {\n            val count = word.toSet.size\n            if (count > max._1)\
    \ (count, word) else (max._1, max._2)\n        })\n        word\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"\
    of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdsbu6s9g.scala:23)\n\tat Problem.main(tmpdsbu6s9g.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009311
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n      var sortedWords = words.sortWith(_ < _)\n      var result\
    \ : String = \"\"\n      var maxLength : Int = 0\n      sortedWords.foreach(word\
    \ => {\n        if (word.length > maxLength) {\n          var duplicates = new\
    \ HashSet[Char]\n          var uniqueCount : Int = 0\n          word.foreach(ch\
    \ => {\n            if (!duplicates.contains(ch)) {\n              uniqueCount\
    \ += 1\n              duplicates.add(ch)\n            }\n          })\n      \
    \    if (uniqueCount >= maxLength) {\n            maxLength = uniqueCount\n  \
    \          result = word\n          }\n        }\n      })\n      result\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpoxqwkgup.scala:39)\n\tat Problem.main(tmpoxqwkgup.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009313
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        def isUnique(c : Char, word : String) : Boolean = {\n\
    \            if (word.isEmpty) false\n            else if (word.head == c) true\n\
    \            else isUnique(c, word.tail)\n        }\n        def getUniqueChar(word\
    \ : String) : List[Char] = {\n            if (word.isEmpty) Nil\n            else\
    \ if (isUnique(word.head, word.tail)) word.head :: getUniqueChar(word.tail)\n\
    \            else getUniqueChar(word.tail)\n        }\n        words.filter(word\
    \ => getUniqueChar(word).length == words.map(w => getUniqueChar(w).length).max).sortWith((a,\
    \ b) => a < b).head\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqmokz9si.scala:28)\n\tat Problem.main(tmpqmokz9si.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009313
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        def helper(words : List[String], word : String, max :\
    \ Int) : String = {\n            if (words.isEmpty) word\n            else {\n\
    \                val c = count(words.head)\n                if (c > max) helper(words.tail,\
    \ words.head, c)\n                else if (c == max) helper(words.tail, if (words.head\
    \ < word) words.head else word, c)\n                else helper(words.tail, word,\
    \ max)\n            }\n        }\n        def count(word : String) : Int = {\n\
    \            val set = HashSet[Char]()\n            for (i <- 0 until word.length)\
    \ {\n                set += word(i)\n            }\n            set.size\n   \
    \     }\n        helper(words, \"\", 0)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009313
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        if (words.length == 0) throw new IllegalArgumentException\n\
    \        if (words.length == 1) return words(0)\n        val uniqueChars : List[Tuple2[String,\
    \ Int]] = for (word <- words) yield (word, word.distinct.length)\n        var\
    \ max = 0\n        for (uniqueChar <- uniqueChars) {\n            if (uniqueChar._2\
    \ > max) max = uniqueChar._2\n        }\n        var candidates : List[String]\
    \ = for (uniqueChar <- uniqueChars if uniqueChar._2 == max) yield uniqueChar._1\n\
    \        var minIndex = candidates(0)\n        for (candidate <- candidates) {\n\
    \            if (candidate < minIndex) minIndex = candidate\n        }\n     \
    \   return minIndex\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009314
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        var max = 0\n        var maxWord = \"\"\n        for (word\
    \ <- words) {\n            val count = word.groupBy(identity).mapValues(_.size).size\n\
    \            if (count > max) {\n                max = count\n               \
    \ maxWord = word\n            }\n        }\n        maxWord\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"\
    ))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\"\
    , \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\"\
    , \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6are1nzx.scala:28)\n\tat Problem.main(tmp6are1nzx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009314
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        var set = Set[Char]()\n        var map = Map[String, Int]()\n\
    \        for (word <- words) {\n            set.clear\n            for (ch <-\
    \ word) set += ch\n            map += (word -> set.size)\n        }\n        var\
    \ max : String = null\n        var maxVal : Int = 0\n        for ((word, cnt)\
    \ <- map) {\n            if (max == null || maxVal < cnt || (maxVal == cnt &&\
    \ word < max)) {\n                max = word\n                maxVal = cnt\n \
    \           }\n        }\n        max\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009314
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        var maxLength = -1\n        var maxString = \"\"\n   \
    \     for (word <- words) {\n            val chars = new HashSet[Char]\n     \
    \       for (c <- word) {\n                chars += c\n            }\n       \
    \     if (chars.size > maxLength) {\n                maxLength = chars.size\n\
    \                maxString = word\n            }\n        }\n        maxString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7wdtsntq.scala:31)\n\tat Problem.main(tmp7wdtsntq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009313
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        var maxString = \"\"\n        var max = 0\n        for\
    \ (word <- words) {\n            val set = new HashSet[Char]\n            for\
    \ (ch <- word) set += ch\n            if (set.size > max) {\n                max\
    \ = set.size\n                maxString = word\n            }\n        }\n   \
    \     maxString\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9mh4t24y.scala:29)\n\tat Problem.main(tmp9mh4t24y.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009314
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        words.map(word => (word, word.toSet.size)).sortWith((x,\
    \ y) => { if (x._2 == y._2) (x._1 < y._1) else (x._2 > y._2) }).head._1\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\"\
    , \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009314
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        var maxWord = \"\"\n        var maxLength = 0\n      \
    \  for (word <- words) {\n            if (word.distinct.length > maxLength) {\n\
    \                maxWord = word\n                maxLength = word.distinct.length\n\
    \            }\n        }\n        return maxWord\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpz1fja4n3.scala:27)\n\tat Problem.main(tmpz1fja4n3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009314
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val groupedWords = words.map(x => (x, x.toSet.size)).groupBy(_._2).toList.sortBy(_._1).reverse\n\
    \        val numUnique = groupedWords.head._1\n        val wordsOfNumUnique =\
    \ groupedWords.head._2.map(_._1).sortWith(_ < _)\n        wordsOfNumUnique.head\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009315
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        // all lowercase characters from 'a' to 'z'\n        val\
    \ allChars = List.range('a', 'z' + 1).map(c => c.toChar)\n        // all characters\
    \ in the word\n        def getChars(word : String) : List[Char] = word.toList.map(c\
    \ => c.toLower)\n        // get the unique characters of a string\n        def\
    \ getUniqueChars(word : String) : List[Char] = {\n            val chars = getChars(word)\n\
    \            var uniqueChars = List[Char]()\n            for (c <- allChars) {\n\
    \                if (chars.contains(c)) uniqueChars ::= c\n            }\n   \
    \         uniqueChars\n        }\n        // get the number of unique characters\
    \ of a string\n        def getUniqueCharCount(word : String) : Int = getUniqueChars(word).length\n\
    \        // get all strings with the max number of unique characters\n       \
    \ def getMax(words : List[String]) : List[String] = {\n            val max = words.map(w\
    \ => getUniqueCharCount(w)).max\n            words.filter(w => getUniqueCharCount(w)\
    \ == max)\n        }\n        // get the string that comes first in lexicographical\
    \ order\n        def getLexi(words : List[String]) : String = words.min\n    \
    \    getLexi(getMax(words))\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\"\
    )));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpdms2ubmn.scala:16:47 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mallChars\e[0m = List.range(\e\
    [31m'a'\e[0m, \e[31m'z'\e[0m + \e[31m1\e[0m).map(\e[36mc\e[0m => c.toChar)\n\e\
    [31m\e[31m   |\e[0m                                               ^\e[0m\n\e[31m\
    \   |\e[0m                                No implicit Ordering defined for AnyVal.\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009313
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        // let unique characters be the number of unique characters\n\
    \        // let characters be the number of characters\n        // if unique characters\
    \ is greater, then that word is most unique\n        // if unique characters is\
    \ the same, then we check lexicographically\n        val list = for (word <- words)\
    \ yield {\n            (word, word.distinct.length, word.length)\n        }\n\
    \        var index = 0\n        var maxCharacters = 0\n        var maxUniqueCharacters\
    \ = 0\n        for (i <- 0 until list.length) {\n            val (word, uniqueCharacters,\
    \ characters) = list(i)\n            if (uniqueCharacters > maxUniqueCharacters)\
    \ {\n                maxUniqueCharacters = uniqueCharacters\n                maxCharacters\
    \ = characters\n                index = i\n            } else if (uniqueCharacters\
    \ == maxUniqueCharacters) {\n                if (characters > maxCharacters) {\n\
    \                    maxCharacters = characters\n                    index = i\n\
    \                }\n            }\n        }\n        list(index)._1\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\"\
    , \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpb3ug2tdz.scala:42)\n\tat Problem.main(tmpb3ug2tdz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009314
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        words.reduceLeft((a, b) => if (a.toSet.size > b.toSet.size)\
    \ a else b)\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpynsa_8gq.scala:19)\n\tat Problem.main(tmpynsa_8gq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009315
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        words.maxBy(word => word.toSet.size)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"\
    ))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\"\
    , \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\"\
    , \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3fcp02o_.scala:19)\n\tat Problem.main(tmp3fcp02o_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009281
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        // Your code goes here\n        return \"\"\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\"\
    , \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgdc4_ex_.scala:19)\n\tat Problem.main(tmpgdc4_ex_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009314
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        // TODO\n        \"\"\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppabh2gsr.scala:19)\n\tat Problem.main(tmppabh2gsr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009314
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        def findMaxIter(words : List[String], max : String) :\
    \ String = {\n            if (words.isEmpty) max\n            else if (words.head.toSet.size\
    \ > max.toSet.size) findMaxIter(words.tail, words.head)\n            else if (words.head.toSet.size\
    \ == max.toSet.size) findMaxIter(words.tail, if (words.head < max) words.head\
    \ else max)\n            else findMaxIter(words.tail, max)\n        }\n      \
    \  if (words.isEmpty) \"\"\n        else findMaxIter(words.tail, words.head)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009315
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        def findMax(words : List[String], max : (String, Int))\
    \ : String = {\n            if (words.length == 0) max._1\n            else {\n\
    \                val count = words.head.groupBy(x => x).values.map(x => x.length).toList.sorted\n\
    \                val current = (words.head, count.last)\n                if (current._2\
    \ > max._2) findMax(words.tail, current)\n                else if (current._2\
    \ == max._2) {\n                    if (current._1 < max._1) findMax(words.tail,\
    \ current)\n                    else findMax(words.tail, max)\n              \
    \  }\n                else findMax(words.tail, max)\n            }\n        }\n\
    \        findMax(words, (\"\", 0))\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp92pkk4ut.scala:31)\n\tat Problem.main(tmp92pkk4ut.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009316
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val res = new ArrayBuffer[String]()\n        var max =\
    \ -1\n        for (word <- words) {\n            val u = word.toSet.size\n   \
    \         if (u > max) {\n                max = u\n                res.clear\n\
    \                res += word\n            } else if (u == max) {\n           \
    \     res += word\n            }\n        }\n        return res.min\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\"\
    , \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009317
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        words.maxBy((word : String) => word.distinct.length)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbcfjqk9y.scala:19)\n\tat Problem.main(tmpbcfjqk9y.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009321
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val freq = scala.collection.mutable.Map[Char, Int]()\n\
    \        def count(word : String) : Int = {\n            freq.clear\n        \
    \    for (ch <- word)\n                freq(ch) = freq.getOrElse(ch, 0) + 1\n\
    \            return freq.size\n        }\n        var best = \"\"\n        var\
    \ bestCount = 0\n        for (word <- words) {\n            val count = count(word)\n\
    \            if (count > bestCount) {\n                best = word\n         \
    \       bestCount = count\n            }\n            else if (count == bestCount\
    \ && word < best) {\n                best = word\n                bestCount =\
    \ count\n            }\n        }\n        return best\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"\
    ))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\"\
    , \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\"\
    , \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpn_pik280.scala:25:24 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            \e[33mval\e[0m \e[36mcount\e[0m = count(word)\n\
    \e[31m\e[31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m         \
    \               Recursive \e[33mvalue\e[0m \e[35mcount\e[0m needs type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009317
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        var best = (0, \"\")\n        for (word <- words) {\n\
    \            var uniqueChars = Set[Char]()\n            for (c <- word) uniqueChars\
    \ += c\n            if (uniqueChars.size > best._1) best = (uniqueChars.size,\
    \ word)\n            else if (uniqueChars.size == best._1 && word < best._2) best\
    \ = (uniqueChars.size, word)\n        }\n        best._2\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"\
    ))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\"\
    , \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\"\
    , \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009322
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        words.maxBy(s => s.toSet.size)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"\
    ))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\"\
    , \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\"\
    , \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzvbj0qk4.scala:19)\n\tat Problem.main(tmpzvbj0qk4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009323
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        // code here\n        \"\"\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"\
    ))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\"\
    , \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\"\
    , \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnz06648k.scala:19)\n\tat Problem.main(tmpnz06648k.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009323
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n      words.foldLeft((\"\", 0))((res, item) => if (item.distinct.length\
    \ > res._2) (item, item.distinct.length) else res)._1\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"\
    ))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\"\
    , \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\"\
    , \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfivu0pd3.scala:19)\n\tat Problem.main(tmpfivu0pd3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009323
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n      var max = 0\n      var ret = words(0)\n      for (word <-\
    \ words) {\n        val h = new HashSet[Char]\n        var len = 0\n        for\
    \ (i <- 0 until word.length) {\n          if (!h.contains(word(i))) {\n      \
    \      h += word(i)\n            len += 1\n          }\n        }\n        if\
    \ (len > max) {\n          max = len\n          ret = word\n        }\n      }\n\
    \      ret\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3ht_ztj9.scala:35)\n\tat Problem.main(tmp3ht_ztj9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009325
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n      words.map(x => x -> x.toSet.size).sortBy(x => (-x._2, x._1)).head._1\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009325
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        var max = (0, \"\")\n        words.foreach {word =>\n\
    \            val unique = word.toSet.size\n            if (unique > max._1) max\
    \ = (unique, word)\n            else if (unique == max._1 && word < max._2) max\
    \ = (unique, word)\n        }\n        max._2\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009324
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        var max = 0\n        var index = 0\n        for (i <-\
    \ 0 until words.length) {\n            val set = new HashSet[Char]\n         \
    \   for (c <- words(i)) {\n                set += c\n            }\n         \
    \   if (set.size > max) {\n                max = set.size\n                index\
    \ = i\n            }\n        }\n        words(index)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"\
    ))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\"\
    , \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\"\
    , \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzd8d5bo9.scala:31)\n\tat Problem.main(tmpzd8d5bo9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009325
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val maxCharLength = words.map(_.toSet.size).max\n    \
    \    words.filter(_.toSet.size == maxCharLength).min\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"\
    ))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\"\
    , \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\"\
    , \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009325
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        // Error check.\n        if (words.length == 0) throw\
    \ new Exception(\"The list is empty!\")\n        if (words.length == 1) return\
    \ words(0)\n        // Collect the number of unique characters.\n        var numOfUniqueChars\
    \ = new Array[Int](words.length)\n        for (i <- 0 until words.length) {\n\
    \            var chars = Set[Char]()\n            for (c <- words(i)) {\n    \
    \            chars += c\n            }\n            numOfUniqueChars(i) = chars.size\n\
    \        }\n        // Find the maximum number of unique characters.\n       \
    \ var maxNumOfUniqueChars = 0\n        for (i <- 0 until numOfUniqueChars.length)\
    \ {\n            if (numOfUniqueChars(i) > maxNumOfUniqueChars) {\n          \
    \      maxNumOfUniqueChars = numOfUniqueChars(i)\n            }\n        }\n \
    \       // Return the word with maximum number of unique characters.\n       \
    \ for (i <- 0 until numOfUniqueChars.length) {\n            if (numOfUniqueChars(i)\
    \ == maxNumOfUniqueChars) {\n                return words(i)\n            }\n\
    \        }\n        // This code should never be executed.\n        throw new\
    \ Exception(\"Error occurred!\")\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\"\
    )));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmkzsifnl.scala:45)\n\tat Problem.main(tmpmkzsifnl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009325
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val max = words.map(s => s.toSet.size).max\n        words.filter(s\
    \ => s.toSet.size == max).sortWith((a, b) => a < b).head\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"\
    ))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\"\
    , \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\"\
    , \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009325
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        var maxWord = \"\"\n        var maxCnt = 0\n        for\
    \ (i <- 0 until words.length) {\n            val word = words(i)\n           \
    \ val cnt = word.toSet.size\n            if (cnt > maxCnt) {\n               \
    \ maxCnt = cnt\n                maxWord = word\n            }\n        }\n   \
    \     maxWord\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpol1pjvju.scala:29)\n\tat Problem.main(tmpol1pjvju.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009325
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val wordMap = new HashMap[String, Int]()\n        words.foreach(word\
    \ => {\n            wordMap.update(word, word.distinct.length)\n        })\n \
    \       val map = wordMap.toSeq.sortBy(word => word._2)\n        val max = map.last._2\n\
    \        val maxWord = map.filter(word => word._2 == max)\n        val minWord\
    \ = maxWord.sortBy(word => word._1).head\n        minWord._1\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"\
    ))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\"\
    , \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\"\
    , \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009326
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        var (max, res) = (0, \"\")\n        for (word <- words)\
    \ {\n            val counts = new HashMap[Char, Int]\n            for (c <- word)\
    \ {\n                counts(c) = counts.getOrElse(c, 0) + 1\n            }\n \
    \           if (counts.size > max) {\n                max = counts.size\n    \
    \            res = word\n            }\n        }\n        res\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"\
    of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpm3pmdhjk.scala:30)\n\tat Problem.main(tmpm3pmdhjk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009325
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        def unique(word : String) : Int = word.groupBy(c => c).map(p\
    \ => p._1).size\n        val m = words.map(word => (word, unique(word))).sortWith((a,\
    \ b) => a._2 > b._2 || (a._2 == b._2 && a._1 < b._1))\n        m(0)._1\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\"\
    , \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009325
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        if (words.length == 0) return null\n        var longest\
    \ = words(0)\n        var maxNumUnique = findNumUnique(words(0))\n        for\
    \ (word <- words) {\n            val numUnique = findNumUnique(word)\n       \
    \     if (numUnique > maxNumUnique) {\n                maxNumUnique = numUnique\n\
    \                longest = word\n            }\n        }\n        longest\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp3s0bnvj.scala:17:27 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mvar\e[0m \e[36mmaxNumUnique\e[0m = findNumUnique(words(\e\
    [31m0\e[0m))\n\e[31m\e[31m   |\e[0m                           ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not found: findNumUnique\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp3s0bnvj.scala:19:28 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m \e[36mnumUnique\e[0m = findNumUnique(word)\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                            Not found: findNumUnique\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009321
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val set = new HashSet[Char]\n        words.foldLeft((\"\
    \", Int.MinValue))((cur, word) => {\n            set.clear\n            var n\
    \ = 0\n            for (c <- word) {\n                if (!set.contains(c)) {\n\
    \                    set += c\n                    n += 1\n                }\n\
    \            }\n            if (n > cur._2) (word, n) else cur\n        })._1\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphz1r1qsz.scala:30)\n\tat Problem.main(tmphz1r1qsz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009326
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n    \tif (words.length == 0) throw new Exception(\"Error: The\
    \ list is empty!\")\n    \tvar maxWord = words(0)\n    \tvar maxChar = words(0).toSet.size\n\
    \    \tfor (i <- 0 until words.length) {\n    \t\tval c = words(i).toSet.size\n\
    \    \t\tif (c > maxChar) {\n    \t\t\tmaxChar = c\n    \t\t\tmaxWord = words(i)\n\
    \    \t\t}\n    \t}\n    \tmaxWord\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfalrfj7i.scala:29)\n\tat Problem.main(tmpfalrfj7i.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009325
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        var result = \"\"\n        var maximum = 0\n        words.foreach(x\
    \ => {\n            val m = x.groupBy(identity).size\n            if (m > maximum)\
    \ {\n                maximum = m\n                result = x\n            }\n\
    \        })\n        result\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\"\
    )));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxob4terd.scala:28)\n\tat Problem.main(tmpxob4terd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009326
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val letterCounts = words.map {word =>\n            val\
    \ counts = Array.fill(26)(0)\n            for (letter <- word) counts(letter -\
    \ 'a') += 1\n            counts\n        }\n        val distinctCounts = letterCounts.map(_.count(_\
    \ > 0))\n        val max = distinctCounts.max\n        var maxWord = \"\"\n  \
    \      var i = 0\n        while (maxWord == \"\" && i < words.length) {\n    \
    \        if (distinctCounts(i) == max) maxWord = words(i)\n            i += 1\n\
    \        }\n        maxWord\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\"\
    )));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpuqwhnrmk.scala:32)\n\tat Problem.main(tmpuqwhnrmk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009328
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        var maxLength = 0\n        var maxWords = List[String]()\n\
    \        for (word <- words) {\n            val chars = word.toSet\n         \
    \   if (chars.size > maxLength) {\n                maxLength = chars.size\n  \
    \              maxWords = List(word)\n            } else if (chars.size == maxLength)\
    \ {\n                maxWords = maxWords :+ word\n            }\n        }\n \
    \       maxWords.sorted.head\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\"\
    )));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009329
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        words.map(w => (w, w.groupBy(ch => ch).size)).sortBy(x\
    \ => (x._2, x._1)).last._1\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\"\
    )));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpiuucj8vc.scala:19)\n\tat Problem.main(tmpiuucj8vc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009329
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val m = new Array[Int](256)\n        val m2 = new Array[Int](256)\n\
    \        for (i <- 0 until words.length) {\n            for (j <- 0 until words(i).length)\
    \ {\n                m(words(i)(j)) += 1\n            }\n            for (k <-\
    \ 0 until m.length) {\n                if (m(k) > 0) m2(k) += 1\n            }\n\
    \            for (l <- 0 until m.length) m(l) = 0\n        }\n        val (maxUnique,\
    \ maxUniqueIndex) = m2.zipWithIndex.max\n        words.filter(word => word.length\
    \ == maxUnique).min\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpb3e3ihyz.scala:30)\n\tat Problem.main(tmpb3e3ihyz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009334
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        if (words.isEmpty)\n            throw new Exception(\"\
    Empty list\")\n        var result = words(0)\n        for (word <- words) {\n\
    \            if (result.length > word.length)\n                result = word\n\
    \            else if (result.length == word.length) {\n                var i =\
    \ 0\n                var j = 0\n                while (i < result.length && j\
    \ < word.length) {\n                    if (result(i) < word(j)) {\n         \
    \               j = 0\n                        i += 1\n                    }\n\
    \                    else if (result(i) > word(j)) {\n                       \
    \ result = word\n                        j = 0\n                        i = 0\n\
    \                    }\n                    else {\n                        j\
    \ += 1\n                    }\n                }\n            }\n        }\n \
    \       result\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660009337
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        var maxChar = 0\n        var maxCharWord = \"\"\n    \
    \    for (word <- words) {\n            val charSet = word.toSet\n           \
    \ if (charSet.size > maxChar) {\n                maxChar = charSet.size\n    \
    \            maxCharWord = word\n            }\n        }\n        maxCharWord\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpl247ys2b.scala:28)\n\tat Problem.main(tmpl247ys2b.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009334
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        if (words.length == 0) throw new Exception(\"The input\
    \ list has to have at least one string\")\n        var bestCount = 0\n       \
    \ var bestWord = \"\"\n        words.foreach(word => {\n            var set =\
    \ Set[Char]()\n            word.foreach(c => set += c)\n            if (set.size\
    \ > bestCount) {\n                bestCount = set.size\n                bestWord\
    \ = word\n            }\n        })\n        bestWord\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"\
    ))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\"\
    , \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\"\
    , \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0t69_tjj.scala:30)\n\tat Problem.main(tmp0t69_tjj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009333
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        words.foldLeft(\"\", 0) { case ((word, max), x) =>\n \
    \           if (x.distinct.length > max)\n                (x, x.distinct.length)\n\
    \            else if (x.distinct.length == max)\n                if (x < word)\
    \ (x, max) else (word, max)\n            else\n                (word, max)\n \
    \       }._1\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009334
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        return \"\"\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpginyjkt3.scala:18)\n\tat Problem.main(tmpginyjkt3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009334
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        words.maxBy(word => word.toSet.size)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"\
    ))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\"\
    , \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\"\
    , \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3fcp02o_.scala:19)\n\tat Problem.main(tmp3fcp02o_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009281
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        var maxWord = \"\"\n        var maxCharSet = Set[Char]()\n\
    \        for (word <- words) {\n            val charSet = word.toSet\n       \
    \     if (charSet.size > maxCharSet.size) {\n                maxWord = word\n\
    \                maxCharSet = charSet\n            }\n        }\n        maxWord\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnrmme7kp.scala:21:29\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m                maxCharSet =\
    \ charSet\n\e[31m\e[31m   |\e[0m                             ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                            Found:    (charSet : Set[Char])\n\e[31m\
    \   |\e[0m                            Required: scala.collection.mutable.Set[Char]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009333
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        words.foldLeft((\"\", 0))((acc, word) => {\n         \
    \   val numChars = Set[Char]() ++ word\n            if (numChars.size > acc._2)\
    \ (word, numChars.size)\n            else if (numChars.size == acc._2) if (word\
    \ < acc._1) (word, numChars.size) else acc\n            else acc\n        })._1\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009336
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        var result = \"\"\n        var maxCount = 0\n        words.foreach(word\
    \ => {\n            val set = Set[Char]()\n            var count = 0\n       \
    \     word.foreach(ch => {\n                if (!set.contains(ch)) {\n       \
    \             set += ch\n                    count += 1\n                }\n \
    \           })\n            if (count > maxCount) {\n                maxCount\
    \ = count\n                result = word\n            }\n        })\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppkiz77ns.scala:35)\n\tat Problem.main(tmppkiz77ns.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009336
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        words.foldLeft((\"\",Set[Char]()))((s,w) => if (w.toSet.size\
    \ > s._2.size) (w,w.toSet) else if (w.toSet.size == s._2.size && w < s._1) (w,w.toSet)\
    \ else s)._1\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpk8nme1dn.scala:15:83\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        words.foldLeft((\e[31m\"\
    \"\e[0m,Set[\e[35mChar\e[0m]()))((\e[36ms\e[0m,\e[36mw\e[0m) => \e[33mif\e[0m\
    \ (w.toSet.size > s._2.size) (w,w.toSet) \e[33melse\e[0m \e[33mif\e[0m (w.toSet.size\
    \ == s._2.size && w < s._1) (w,w.toSet) \e[33melse\e[0m s)._1\n\e[31m\e[31m  \
    \ |\e[0m                                                                     \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                            Found:\
    \    Set[Char]\n\e[31m   |\e[0m                            Required: scala.collection.mutable.Set[Char]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpk8nme1dn.scala:15:143\
    \ -------------------\e[0m\e[0m\n\e[31m15 |\e[0m        words.foldLeft((\e[31m\"\
    \"\e[0m,Set[\e[35mChar\e[0m]()))((\e[36ms\e[0m,\e[36mw\e[0m) => \e[33mif\e[0m\
    \ (w.toSet.size > s._2.size) (w,w.toSet) \e[33melse\e[0m \e[33mif\e[0m (w.toSet.size\
    \ == s._2.size && w < s._1) (w,w.toSet) \e[33melse\e[0m s)._1\n\e[31m\e[31m  \
    \ |\e[0m                                                                     \
    \                                                                          ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                            Found:    Set[Char]\n\e[31m  \
    \ |\e[0m                            Required: scala.collection.mutable.Set[Char]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009335
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n    \tdef hasMoreUniqueChar(w1 : String, w2 : String) : Boolean\
    \ = {\n    \t\tval chSet1 = new HashSet[Char]\n    \t\tval chSet2 = new HashSet[Char]\n\
    \    \t\tfor (ch <- w1) chSet1 += ch\n    \t\tfor (ch <- w2) chSet2 += ch\n  \
    \  \t\treturn chSet1.size > chSet2.size\n    \t}\n    \tif (words.size == 1) return\
    \ words(0)\n    \treturn words.tail.foldLeft(words(0))((w1, w2) => {\n    \t\t\
    if (hasMoreUniqueChar(w1, w2)) w1 else w2\n    \t})\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"\
    ))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\"\
    , \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\"\
    , \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsz4cxxo0.scala:29)\n\tat Problem.main(tmpsz4cxxo0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009336
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        words.maxBy(w => w.toSet.size)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"\
    ))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\"\
    , \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\"\
    , \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpc8q5gee3.scala:19)\n\tat Problem.main(tmpc8q5gee3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009281
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n    \tvar maxChar = ' '\n    \tvar maxWord = \"\"\n    \tfor (word\
    \ <- words) {\n    \t\tvar chars = new HashSet[Char]\n    \t\tfor (char <- word)\
    \ {\n    \t\t\tchars += char\n    \t\t}\n    \t\tif (chars.size > maxChar) {\n\
    \    \t\t\tmaxChar = chars.size\n    \t\t\tmaxWord = word\n    \t\t}\n    \t}\n\
    \    \treturn maxWord\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxts5tg5b.scala:23:24\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m    \t\t\tmaxChar = chars.size\n\
    \e[31m\e[31m   |\e[0m    \t\t\t          ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \t\
    \t\t          Found:    Int\n\e[31m   |\e[0m    \t\t\t          Required: Char\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009334
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        var m = words.head\n        var maxCount = m.distinct.length\n\
    \        words.foreach { w =>\n            val count = w.distinct.length\n   \
    \         if (count > maxCount) {\n                m = w\n                maxCount\
    \ = count\n            }\n        }\n        m\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwchy0qts.scala:28)\n\tat Problem.main(tmpwchy0qts.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009336
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        words.maxBy(w => (w.groupBy(c => c).size, w))\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\"\
    , \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpysr06qdq.scala:19)\n\tat Problem.main(tmpysr06qdq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009336
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        var result = words(0)\n        var freq = mutable.Map[Char,\
    \ Int]()\n        for (ch <- result) {\n            if (freq.contains(ch)) freq(ch)\
    \ += 1 else freq(ch) = 1\n        }\n        for (word <- words) {\n         \
    \   var freq2 = mutable.Map[Char, Int]()\n            for (ch <- word) {\n   \
    \             if (freq2.contains(ch)) freq2(ch) += 1 else freq2(ch) = 1\n    \
    \        }\n            if (freq2.size > freq.size || (freq2.size == freq.size\
    \ && word < result)) {\n                result = word\n                freq =\
    \ freq2\n            }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppfq36_vw.scala:16:19 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mvar\e[0m \e[36mfreq\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmppfq36_vw.scala:21:24 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mvar\e[0m \e[36mfreq2\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                        Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009333
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        var max = \"\"\n        for (word <- words) {\n      \
    \      if (word.length > max.length) max = word\n            else if (word.length\
    \ == max.length) max = min(word, max)\n        }\n        max\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"\
    of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpyxbmc8ol.scala:18:54 -----------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33melse\e[0m \e[33mif\e[0m (word.length\
    \ == max.length) max = min(word, max)\n\e[31m\e[31m   |\e[0m                 \
    \                                     ^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded\
    \ alternatives of \e[33mmethod\e[0m \e[35mmin\e[0m in \e[33mpackage\e[0m \e[35mscala.math\e\
    [0m with types\n\e[31m   |\e[0m (x: Double, y: Double): Double\n\e[31m   |\e[0m\
    \ (x: Float, y: Float): Float\n\e[31m   |\e[0m (x: Long, y: Long): Long\n\e[31m\
    \   |\e[0m (x: Int, y: Int): Int\n\e[31m   |\e[0mmatch arguments ((word : String),\
    \ (max : String))\n1 error found\n"
  stdout: ''
  timestamp: 1660009334
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        if (words.isEmpty) return \"\"\n        var maxStr = words(0)\n\
    \        var maxCount = countUnique(words(0))\n        for (i <- 1 until words.length)\
    \ {\n            val cnt = countUnique(words(i))\n            if (cnt > maxCount)\
    \ {\n                maxStr = words(i)\n                maxCount = cnt\n     \
    \       }\n            else if (cnt == maxCount) {\n                if (words(i)\
    \ < maxStr) {\n                    maxStr = words(i)\n                    maxCount\
    \ = cnt\n                }\n            }\n        }\n        return maxStr\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpck87kfsk.scala:17:23 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mvar\e[0m \e[36mmaxCount\e[0m = countUnique(words(\e\
    [31m0\e[0m))\n\e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: countUnique\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpck87kfsk.scala:19:22 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m \e[36mcnt\e[0m = countUnique(words(i))\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                     Not found: countUnique\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009333
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        var max = 0\n        var maxWord = \"\"\n        words.foreach(w\
    \ => {\n            val count = w.toList.toSet.size\n            if (count > max)\
    \ {\n                max = count\n                maxWord = w\n            }\n\
    \        })\n        maxWord\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"string\"\
    )));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpc63u1vn2.scala:28)\n\tat Problem.main(tmpc63u1vn2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009337
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val map = HashMap[String, List[Char]]()\n        words.foreach(word\
    \ => map += (word -> word.toSet.toList))\n        val maxWord = words.filter(word\
    \ => map(word).length == map.values.maxBy(_.length).length).sorted.head\n    \
    \    return maxWord\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009338
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        // Implement this placeholder.\n        return \"\"\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpygsn14i3.scala:19)\n\tat Problem.main(tmpygsn14i3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009336
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        words.map(word => (word, word.toSet.size)).maxBy(_._2)._1\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkzc41qd1.scala:19)\n\tat Problem.main(tmpkzc41qd1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009341
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val result = words.map(x => (x, x.groupBy(x => x).map(x\
    \ => x._1).size)).toList.sortBy(x => (x._2, x._1))\n        result.last._1\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzpu3g1aw.scala:20)\n\tat Problem.main(tmpzpu3g1aw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009342
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        var max = \"\";\n        for (word <- words) {\n     \
    \       if (word > max) max = word;\n        }\n        return max;\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\"\
    , \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9w5auwsp.scala:23)\n\tat Problem.main(tmp9w5auwsp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009341
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        words.filter((x) => x.distinct.length == words.map((y)\
    \ => y.distinct.length).max).head\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpu14_yrd6.scala:19)\n\tat Problem.main(tmpu14_yrd6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009344
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        words.maxBy(_.distinct.length)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"\
    ))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\"\
    , \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\"\
    , \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpx4eb9yd3.scala:19)\n\tat Problem.main(tmpx4eb9yd3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009345
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        var max = \"\"\n        for (word <- words) {\n      \
    \      if (uniqueCharNum(word) > uniqueCharNum(max)) {\n                max =\
    \ word\n            }\n        }\n        max\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8cz32aa2.scala:17:16 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mif\e[0m (uniqueCharNum(word) > uniqueCharNum(max))\
    \ {\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                Not found: uniqueCharNum\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009340
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        var max = words(0)\n        var maxlength = words(0).toSet.size\n\
    \        for (word <- words) {\n            if (word.toSet.size > maxlength) {\n\
    \                max = word\n                maxlength = word.toSet.size\n   \
    \         }\n        }\n        return max\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4is7tkl7.scala:27)\n\tat Problem.main(tmp4is7tkl7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009344
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        var ans = \"\"\n        var cnt = -1\n        for (w <-\
    \ words) {\n            val cur = w.toSet.size\n            if (cur > cnt) {\n\
    \                ans = w\n                cnt = cur\n            }\n        }\n\
    \        ans\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphmdmmyma.scala:28)\n\tat Problem.main(tmphmdmmyma.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val m = words.map(w => (w, w.toSet.size)).toList.sortWith((x,\
    \ y) => x._2 > y._2 || (x._2 == y._2 && x._1 < y._1))\n        m.head._1\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009344
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        words.maxBy(w => w.distinct.length)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"\
    ))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\"\
    , \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\"\
    , \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprw3dprhc.scala:19)\n\tat Problem.main(tmprw3dprhc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        def findMaxHelper(words : List[String], currentMax : String,\
    \ acc : String) : String = {\n            if (words.isEmpty) acc\n           \
    \ else {\n                val count = words.head.toSet.size\n                if\
    \ (count > currentMax.toSet.size) findMaxHelper(words.tail, words.head, words.head)\n\
    \                else if (count == currentMax.toSet.size) findMaxHelper(words.tail,\
    \ currentMax, acc)\n                else findMaxHelper(words.tail, currentMax,\
    \ acc)\n            }\n        }\n        findMaxHelper(words, \"\", \"\")\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphh59kf8t.scala:28)\n\tat Problem.main(tmphh59kf8t.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009344
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val word = words.maxBy(x => x.toSet.size)\n        word\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt4jv49xs.scala:20)\n\tat Problem.main(tmpt4jv49xs.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009345
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n      var maxLength = 0\n      var result = \"\"\n      for (w\
    \ <- words) {\n        val l = w.toSet.size\n        if (l > maxLength) {\n  \
    \        maxLength = l\n          result = w\n        }\n      }\n      result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfhp04smf.scala:28)\n\tat Problem.main(tmpfhp04smf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009346
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        return \"string\"\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjj1gp2ea.scala:19)\n\tat Problem.main(tmpjj1gp2ea.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009344
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        words.maxBy(x => (x.toSet).size)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"\
    ))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\"\
    , \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\"\
    , \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwe46cd8i.scala:19)\n\tat Problem.main(tmpwe46cd8i.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        var maxWord = \"\"\n        var maxCount = 0\n       \
    \ for (w <- words) {\n            val count = countUnique(w)\n            if (count\
    \ > maxCount) {\n                maxCount = count\n                maxWord = w\n\
    \            }\n        }\n        maxWord\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpuieou4v1.scala:18:24 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[36mcount\e[0m = countUnique(w)\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                        Not found: countUnique\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009343
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        words.foldLeft(words.head)((max, word) => if (word.distinct.length\
    \ > max.distinct.length) word else max)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppt_08xw9.scala:19)\n\tat Problem.main(tmppt_08xw9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009347
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        var max = (0, words(0))\n        for (word <- words) {\n\
    \            val newMax = word match {\n                case word if word.distinct.length\
    \ > max._1 => (word.distinct.length, word)\n                case word if word.distinct.length\
    \ == max._1 && word < max._2 => (word.distinct.length, word)\n               \
    \ case _ => max\n            }\n            max = newMax\n        }\n        max._2\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009347
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        words.filter(_.size > 0).maxBy(x => (x.size, x))\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpawqn6sp7.scala:19)\n\tat Problem.main(tmpawqn6sp7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009348
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n      words.sortWith((a, b) => (a.length > b.length) || (a.length\
    \ == b.length && a.compareTo(b) < 0)).head\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf9bftdou.scala:25)\n\tat Problem.main(tmpf9bftdou.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009347
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val uniqueCharactersCount = words.map(x => (x, x.toSet.size))\n\
    \        uniqueCharactersCount.maxBy(_._2)._1\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgsf5b9fo.scala:20)\n\tat Problem.main(tmpgsf5b9fo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009348
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        var maxWord = \"\"\n        var maxCount = 0\n       \
    \ for (word <- words) {\n            val count = word.toSet.size\n           \
    \ if (count > maxCount) {\n                maxCount = count\n                maxWord\
    \ = word\n            }\n        }\n        maxWord\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"\
    ))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\"\
    , \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\"\
    , \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmph6ex__fq.scala:28)\n\tat Problem.main(tmph6ex__fq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009348
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val hm = new HashMap[String, Int]()\n        for (word\
    \ <- words) {\n            val set = new HashSet[Char]()\n            for (c <-\
    \ word) set += c\n            hm += (word -> set.size)\n        }\n        var\
    \ min = Integer.MAX_VALUE\n        var ans = \"\"\n        for ((word, count)\
    \ <- hm) {\n            if (count < min) {\n                min = count\n    \
    \            ans = word\n            }\n        }\n        ans\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"\
    of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1a4ddn12.scala:32)\n\tat Problem.main(tmp1a4ddn12.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009349
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        var maxWord = words(0)\n        var maxCharCount = 0\n\
    \        for (word <- words) {\n            val charCount = word.distinct.length\n\
    \            if (charCount > maxCharCount) {\n                maxCharCount = charCount\n\
    \                maxWord = word\n            }\n        }\n        maxWord\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvjoishrr.scala:28)\n\tat Problem.main(tmpvjoishrr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009350
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        def findMaxRec(words : List[String], max : (String, Int))\
    \ : String = {\n            if (words.isEmpty) max._1\n            else {\n  \
    \              val count = words.head.toCharArray.toSet.size\n               \
    \ if (count > max._2) findMaxRec(words.tail, (words.head, count))\n          \
    \      else if (count == max._2) findMaxRec(words.tail, (min(words.head, max._1),\
    \ count))\n                else findMaxRec(words.tail, max)\n            }\n \
    \       }\n        findMaxRec(words, (\"\", 0))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpb6tdtfzm.scala:20:66 -----------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                \e[33melse\e[0m \e[33mif\e[0m (count\
    \ == max._2) findMaxRec(words.tail, (min(words.head, max._1), count))\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \  ^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives of \e[33mmethod\e\
    [0m \e[35mmin\e[0m in \e[33mpackage\e[0m \e[35mscala.math\e[0m with types\n\e\
    [31m   |\e[0m (x: Double, y: Double): Double\n\e[31m   |\e[0m (x: Float, y: Float):\
    \ Float\n\e[31m   |\e[0m (x: Long, y: Long): Long\n\e[31m   |\e[0m (x: Int, y:\
    \ Int): Int\n\e[31m   |\e[0mmatch arguments ((words.head : => String), (max._1\
    \ : => String))\n1 error found\n"
  stdout: ''
  timestamp: 1660009348
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val maxWord = words.maxBy(word => word.toSet.size)\n \
    \       val maxCount = maxWord.toSet.size\n        words.filter(word => word.toSet.size\
    \ == maxCount).sortWith((w1, w2) => w1 < w2).head\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009351
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        var maxWord = \"\"\n        var maxCount = 0\n       \
    \ for (word <- words) {\n            var count = 0\n            for (i <- 0 until\
    \ word.length) {\n                if (word.lastIndexOf(word(i)) == i) count +=\
    \ 1\n            }\n            if (count > maxCount) {\n                maxCount\
    \ = count\n                maxWord = word\n            }\n        }\n        maxWord\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprx_tktff.scala:31)\n\tat Problem.main(tmprx_tktff.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009351
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val distinctMap = words.map { w =>\n            w -> w.toSet.size\n\
    \        }.toMap\n        val mx = distinctMap.values.max\n        distinctMap.filter\
    \ { case (_, v) => v == mx }.keys.min\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009352
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        def findMax(words : List[String], maxWord : String, maxChar\
    \ : Int) : String = {\n            words match {\n                case Nil =>\
    \ maxWord\n                case x :: xs => {\n                    val uniqueChar\
    \ = x.distinct.length\n                    if (uniqueChar > maxChar) findMax(xs,\
    \ x, uniqueChar)\n                    else if (uniqueChar == maxChar) findMax(xs,\
    \ (x :: maxWord :: Nil).sorted.head, uniqueChar)\n                    else findMax(xs,\
    \ maxWord, maxChar)\n                }\n            }\n        }\n        findMax(words,\
    \ \"\", 0)\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009352
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        var max = List[String]()\n        for (word <- words)\
    \ {\n            if (max.isEmpty || max.head.length < word.length) max = List(word)\n\
    \            else if (max.head.length == word.length) max = max :+ word\n    \
    \    }\n        var best = \"\"\n        for (word <- max) {\n            var\
    \ count = 0\n            var used = List[Char]()\n            for (c <- word)\
    \ {\n                if (!used.contains(c)) {\n                    used = used\
    \ :+ c\n                    count += 1\n                }\n            }\n   \
    \         if (count > best.length) best = word\n        }\n        best\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\"\
    , \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_in55wn9.scala:36)\n\tat Problem.main(tmp_in55wn9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009352
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        def hasMoreUniqueChars(word1 : String, word2 : String)\
    \ : Boolean = {\n            def numUniqueChars(word : String) : Int = {\n   \
    \             var s = Set[Char]()\n                for (c <- word) s += c\n  \
    \              s.size\n            }\n            numUniqueChars(word1) > numUniqueChars(word2)\n\
    \        }\n        words.reduceLeft((s1, s2) => if (hasMoreUniqueChars(s1, s2))\
    \ s1 else s2)\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_o92qc7j.scala:27)\n\tat Problem.main(tmp_o92qc7j.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009352
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        def countUnique(word : String) : Int = word.toSet.size\n\
    \        def max(a : String, b : String) : String = if (countUnique(a) < countUnique(b))\
    \ b else a\n        words.foldLeft(words.head)(max)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"\
    ))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\"\
    , \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\"\
    , \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmvnosr8e.scala:21)\n\tat Problem.main(tmpmvnosr8e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009352
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        words.foldLeft(\"\")((x, y) => if (x.length() == 0) y\
    \ else {\n            if (x.distinct.length() > y.distinct.length()) x else {\n\
    \                if (x.distinct.length() < y.distinct.length()) y else {\n   \
    \                 if (x.compareTo(y) > 0) x else y\n                }\n      \
    \      }\n        })\n    }\n    def main(args: Array[String]) = {\n    assert(findMax((List[String](\"\
    name\", \"of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpelu2et75.scala:25)\n\tat Problem.main(tmpelu2et75.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009352
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val charMap = new HashMap[String, Set[Char]]\n       \
    \ words.foreach(x => charMap += (x -> (x.toSet[Char])))\n        var max = 0\n\
    \        var maxName = \"\"\n        charMap.foreach(x => {\n            if (x._2.size\
    \ > max) {\n                max = x._2.size\n                maxName = x._1\n\
    \            }\n        })\n        return maxName\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"\
    ))).equals((\"string\")));\n    assert(findMax((List[String](\"name\", \"enam\"\
    , \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"aaaaaaa\"\
    , \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpew2okun9.scala:16:52\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        words.foreach(\e[36mx\e\
    [0m => charMap += (x -> (x.toSet[\e[35mChar\e[0m])))\n\e[31m\e[31m   |\e[0m  \
    \                                           ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                  Found:    Set[Char]\n\e[31m   |\e[0m      \
    \                            Required: collection.mutable.Set[Char]\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009352
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        def helper(max : String, word : String) : String = {\n\
    \            if (word.length > max.length) word\n            else if (word.length\
    \ == max.length) {\n                if (word < max) word\n                else\
    \ max\n            }\n            else max\n        }\n        words.foldLeft(\"\
    \")((acc, cur) => helper(acc, cur.toLowerCase.toSet.mkString))\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(findMax((List[String](\"name\", \"\
    of\", \"string\"))).equals((\"string\")));\n    assert(findMax((List[String](\"\
    name\", \"enam\", \"game\"))).equals((\"enam\")));\n    assert(findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\"))).equals((\"aaaaaaa\")));\n    assert(findMax((List[String](\"\
    abc\", \"cba\"))).equals((\"abc\")));\n    assert(findMax((List[String](\"play\"\
    , \"this\", \"game\", \"of\", \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqs6ewi04.scala:26)\n\tat Problem.main(tmpqs6ewi04.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009352
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        val unsorted = words.map(x => (x, x.toSet.size))\n   \
    \     val sorted = unsorted.sortWith((x, y) => x._2 > y._2 || (x._2 == y._2 &&\
    \ x._1 < y._1))\n        sorted.head._1\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009352
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings.\n    // The list\
    \ contains different words. Return the word with maximum number\n    // of unique\
    \ characters. If multiple strings have maximum number of unique\n    // characters,\
    \ return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"\
    name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"\
    name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"\
    aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String])\
    \ : String = {\n        def loop(s : String, words : List[String]) : String =\
    \ {\n            if (words.isEmpty) s\n            else {\n                val\
    \ w = words.head\n                if (s.toSet.size < w.toSet.size) loop(w, words.tail)\n\
    \                else if (s.toSet.size == w.toSet.size) {\n                  \
    \  if (s > w) loop(s, words.tail)\n                    else loop(w, words.tail)\n\
    \                }\n                else loop(s, words.tail)\n            }\n\
    \        }\n        loop(words.head, words.tail)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(findMax((List[String](\"name\", \"of\", \"string\"))).equals((\"\
    string\")));\n    assert(findMax((List[String](\"name\", \"enam\", \"game\"))).equals((\"\
    enam\")));\n    assert(findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\"))).equals((\"\
    aaaaaaa\")));\n    assert(findMax((List[String](\"abc\", \"cba\"))).equals((\"\
    abc\")));\n    assert(findMax((List[String](\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\"))).equals((\"footbott\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"gonna\", \"rock\"))).equals((\"gonna\")));\n    assert(findMax((List[String](\"\
    we\", \"are\", \"a\", \"mad\", \"nation\"))).equals((\"nation\")));\n    assert(findMax((List[String](\"\
    this\", \"is\", \"a\", \"prrk\"))).equals((\"this\")));\n    assert(findMax((List[String](\"\
    b\"))).equals((\"b\")));\n    assert(findMax((List[String](\"play\", \"play\"\
    , \"play\"))).equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpuyu82g47.scala:31)\n\tat Problem.main(tmpuyu82g47.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009352
