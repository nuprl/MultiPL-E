language: scala
name: HumanEval_83_starts_one_ends
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        val pow10 = (0 to (n - 1)).map(x => pow(10, x).toLong).toList\n\
    \        val sums = pow10.scanLeft(0L)(_ + _)\n        val numsOfDigits = pow10.map(x\
    \ => x / 10).toList\n        val numsStarting = pow10.map(x => (x - 1) / 9).toList\n\
    \        val numsEnding = pow10.map(x => x / 9).toList\n        val result = (0\
    \ to (n - 1)).map(x => numsOfDigits(x) * (numsStarting(x) + numsEnding(x) - 1)).toList\n\
    \        val resultSum = result.sum\n        resultSum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l))\
    \ == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l))\
    \ == (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgy8kfj8z.scala:7:27\
    \ ---------------------\e[0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mpow10\e\
    [0m = (\e[31m0\e[0m to (n - \e[31m1\e[0m)).map(\e[36mx\e[0m => pow(\e[31m10\e\
    [0m, x).toLong).toList\n\e[31m\e[31m  |\e[0m                           ^^^^^\e\
    [0m\n\e[31m  |\e[0m                           Found:    Long\n\e[31m  |\e[0m \
    \                          Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpgy8kfj8z.scala:12:28 --------------------\e[0m\e\
    [0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = (\e[31m0\e[0m to\
    \ (n - \e[31m1\e[0m)).map(\e[36mx\e[0m => numsOfDigits(x) * (numsStarting(x) +\
    \ numsEnding(x) - \e[31m1\e[0m)).toList\n\e[31m\e[31m   |\e[0m               \
    \             ^^^^^\e[0m\n\e[31m   |\e[0m                            Found:  \
    \  Long\n\e[31m   |\e[0m                            Required: Int\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659822040
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        1\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n\
    \    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l)) ==\
    \ (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpb2r9b528.scala:11)\n\tat Problem.main(tmpb2r9b528.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659822039
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) {\n            return 2\n        }\n \
    \       if (n == 2) {\n            return 4\n        }\n        return (1 to 9).map(i\
    \ => pow(10, n - 1).toLong).sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n\
    \    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l)) ==\
    \ (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzwaa3all.scala:16)\n\tat Problem.main(tmpzwaa3all.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659822040
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) 1\n        else (BigInt(10).pow(n - 1)\
    \ - 1).toLong * 10 + 11 - BigInt(10).pow(n - 2).toLong\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l))\
    \ == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l))\
    \ == (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpw24l87kb.scala:8:29\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33melse\e[0m (BigInt(\e\
    [31m10\e[0m).pow(n - \e[31m1\e[0m) - \e[31m1\e[0m).toLong * \e[31m10\e[0m + \e\
    [31m11\e[0m - BigInt(\e[31m10\e[0m).pow(n - \e[31m2\e[0m).toLong\n\e[31m\e[31m\
    \  |\e[0m                             ^^^^^\e[0m\n\e[31m  |\e[0m             \
    \                Found:    Long\n\e[31m  |\e[0m                             Required:\
    \ Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpw24l87kb.scala:8:75\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33melse\e[0m (BigInt(\e\
    [31m10\e[0m).pow(n - \e[31m1\e[0m) - \e[31m1\e[0m).toLong * \e[31m10\e[0m + \e\
    [31m11\e[0m - BigInt(\e[31m10\e[0m).pow(n - \e[31m2\e[0m).toLong\n\e[31m\e[31m\
    \  |\e[0m                                                                    \
    \       ^^^^^\e[0m\n\e[31m  |\e[0m                                           \
    \                 Found:    Long\n\e[31m  |\e[0m                             \
    \                               Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659822039
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        (1 to 9).map(x => func(x, n)).sum\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n  \
    \  assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n\
    \    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l)) ==\
    \ (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbwbcrxej.scala:7:26 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        (\e[31m1\e[0m to \e[31m9\e[0m).map(\e[36mx\e[0m\
    \ => func(x, n)).sum\n\e[31m\e[31m  |\e[0m                          ^^^^\e[0m\n\
    \e[31m  |\e[0m                          Not found: func\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659822038
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) 1 else (1 to 9).foldLeft(0L)((acc, x)\
    \ => acc + startsOneEnds(n - 1, 0, x))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l))\
    \ == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l))\
    \ == (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyr70ai0g.scala:7:81\
    \ ---------------------\e[0m\e[0m\n\e[31m7 |\e[0m        \e[33mif\e[0m (n == \e\
    [31m1\e[0m) \e[31m1\e[0m \e[33melse\e[0m (\e[31m1\e[0m to \e[31m9\e[0m).foldLeft(\e\
    [31m0L\e[0m)((\e[36macc\e[0m, \e[36mx\e[0m) => acc + startsOneEnds(n - \e[31m1\e\
    [0m, \e[31m0\e[0m, x))\n\e[31m\e[31m  |\e[0m                                 \
    \                                                ^^^^^^^^^^^\e[0m\n\e[31m  |\e\
    [0m                                                Found:    (Long, Int, Int)\n\
    \e[31m  |\e[0m                                                Required: Long\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659822039
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) 1\n        else {\n            val x =\
    \ pow(10, n - 1).toLong\n            val y = pow(10, n).toLong\n            (y\
    \ - x) * 2 - (x - (x / 10))\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l))\
    \ == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l))\
    \ == (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdg86jo1k.scala:16)\n\tat Problem.main(tmpdg86jo1k.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659822039
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n      // All numbers between 1 and 9 of length n have n digits\n\
    \      // All numbers between 10^(n-1) and 10^n have n digits\n      // All numbers\
    \ between 10^(n-1) and 11(10^(n-2)-1) have n digits and end with 1\n      // All\
    \ numbers between 11(10^(n-2)) and 19(10^(n-2)) have n digits and start with 1\n\
    \      // All numbers between 11(10^(n-2)) and 11(10^(n-2)+10^(n-2)-1) have n\
    \ digits and start with 1\n      // All numbers between 11(10^(n-2)) and 11(10^(n-2)+10^(n-2)-1)\
    \ have n digits and end with 1\n      // All numbers between 11(10^(n-2)+10^(n-2))\
    \ and 11(10^(n-2)+10^(n-2)+10^(n-2)-1) have n digits and start with 1\n      //\
    \ All numbers between 11(10^(n-2)+10^(n-2)) and 11(10^(n-2)+10^(n-2)+10^(n-2)-1)\
    \ have n digits and end with 1\n      // ...\n      // All numbers between 11(10^(n-2)+10^(n-2)+...+10^(n-2))\
    \ and 11(10^(n-2)+10^(n-2)+...+10^(n-2)+10^(n-2)-1) have n digits and start with\
    \ 1\n      // All numbers between 11(10^(n-2)+10^(n-2)+...+10^(n-2)) and 11(10^(n-2)+10^(n-2)+...+10^(n-2)+10^(n-2)-1)\
    \ have n digits and end with 1\n      if (n == 1) return 9\n      val startEnds\
    \ = (1 to (n - 1) / 2) map {i => 10 * 9 * pow(10, i - 1).toLong} sum\n      val\
    \ ends = (1 to (n - 1) / 2) map {i => 10 * pow\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l))\
    \ == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l))\
    \ == (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp8trx85k9.scala:19:86 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m      \e[33mval\e[0m \e[36mstartEnds\e[0m = (\e[31m1\e\
    [0m to (n - \e[31m1\e[0m) / \e[31m2\e[0m) map {\e[36mi\e[0m => \e[31m10\e[0m *\
    \ \e[31m9\e[0m * pow(\e[31m10\e[0m, i - \e[31m1\e[0m).toLong} sum\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \                   ^\e[0m\n\e[31m   |\e[0m                          expression\
    \ expected but \e[31mend of statement\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E040] Syntax Error: /tmp/tmp8trx85k9.scala:31:0 ----------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8trx85k9.scala:19:28\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m      \e[33mval\e[0m \e[36mstartEnds\e\
    [0m = (\e[31m1\e[0m to (n - \e[31m1\e[0m) / \e[31m2\e[0m) map {\e[36mi\e[0m =>\
    \ \e[31m10\e[0m * \e[31m9\e[0m * pow(\e[31m10\e[0m, i - \e[31m1\e[0m).toLong}\
    \ sum\n\e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                            Found:    Long\n\e[31m   |\e[0m        \
    \                    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp8trx85k9.scala:20:23 --------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m      \e[33mval\e[0m \e[36mends\e[0m = (\e[31m1\e[0m to (n - \e[31m1\e\
    [0m) / \e[31m2\e[0m) map {\e[36mi\e[0m => \e[31m10\e[0m * pow\n\e[31m\e[31m  \
    \ |\e[0m                       ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \          Found:    Long\n\e[31m   |\e[0m                       Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmp8trx85k9.scala:20:49 -----------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m      \e[33mval\e[0m \e[36mends\e[0m = (\e[31m1\e[0m\
    \ to (n - \e[31m1\e[0m) / \e[31m2\e[0m) map {\e[36mi\e[0m => \e[31m10\e[0m * pow\n\
    \e[31m\e[31m   |\e[0m              "
  stdout: ''
  timestamp: 1659822040
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n <= 0) 0\n        else if (n == 1) 2\n      \
    \  else (10 - 2) * pow(9, n - 1).toLong + startsOneEnds(n - 1)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n  \
    \  assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n\
    \    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l)) ==\
    \ (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpklo_s_rr.scala:12)\n\tat Problem.main(tmpklo_s_rr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659822040
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        // First, count all n-digit numbers. \n        val\
    \ total = BigInt(10).pow(n.toInt)\n        // Count numbers containing a 1.\n\
    \        val size = n.toInt\n        val ret = if (size == 1) total else total\
    \ - BigInt(10).pow(size - 1)\n        ret.toLong\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l))\
    \ == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l))\
    \ == (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3yxh40e9.scala:15)\n\tat Problem.main(tmp3yxh40e9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659822039
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 10\n        else {\n          \
    \  val cur = startsOneEnds(n - 1)\n            val a = 4L * pow(10, n - 2).toLong\n\
    \            val b = cur - a\n            2 * a + b\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n  \
    \  assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n\
    \    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l)) ==\
    \ (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp330qbbk1.scala:16)\n\tat Problem.main(tmp330qbbk1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659822039
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        val end = pow(10, n).toLong\n        var length =\
    \ 1\n        var sum = 1\n        while (length < n) {\n            sum += end\n\
    \            length += 1\n        }\n        sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l))\
    \ == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l))\
    \ == (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmptuerxa3k.scala:11:16 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m            sum += end\n\e[31m\e[31m   |\e[0m       \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Int\
    \ - did you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659822039
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        // If we start with 1, then there are 10**(n-1) choices\
    \ for the remaining\n        // digits. If we end with 1, then there are 10**(n-1)\
    \ choices for the\n        // remaining digits.\n        2 * (BigInt(10).pow(n\
    \ - 1)).toLong\n    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdsrv3945.scala:10:28\
    \ --------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[31m2\e[0m * (BigInt(\e\
    [31m10\e[0m).pow(n - \e[31m1\e[0m)).toLong\n\e[31m\e[31m   |\e[0m            \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                            Found:\
    \    Long\n\e[31m   |\e[0m                            Required: Int\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659822038
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        def numberOfDigits(k : Long) : Long = {\n        \
    \    var n = k\n            var count = 0\n            while (n > 0) {\n     \
    \           n /= 10\n                count += 1\n            }\n            count\n\
    \        }\n        var count = 0\n        for (i <- 1 to n) {\n            val\
    \ lower = pow(10, i - 1).toLong\n            val upper = pow(10, i).toLong - 1\n\
    \            count += upper - lower + 1\n        }\n        count\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n\
    \    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l)) ==\
    \ (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpn11hrtov.scala:17:23\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m1\e[0m to n) {\n\e[31m\e[31m   |\e[0m                       ^\e[0m\n\e\
    [31m   |\e[0m                       Found:    (n : Long)\n\e[31m   |\e[0m    \
    \                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpn11hrtov.scala:20:18 ------------------------\e[0m\e[0m\n\e[31m20 |\e\
    [0m            count += upper - lower + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m  \
    \          ^^^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member\
    \ of Int - did you mean Int.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659822039
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        def count(n : Long) : Long = {\n            if (n\
    \ == 1)\n                return 2\n            var ret = 0L\n            ret +=\
    \ count(n - 1) * 9 // random digits\n            ret += pow(10, n - 1).toLong\
    \ // all ones\n            ret\n        }\n        if (n == 1)\n            return\
    \ 2\n        return count(n)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n\
    \    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l)) ==\
    \ (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdzxh0pza.scala:20)\n\tat Problem.main(tmpdzxh0pza.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659822039
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        assert(n >= 1)\n        if (n == 1) 1 else 9 + 10\
    \ * (n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdpb74zvm.scala:12)\n\tat Problem.main(tmpdpb74zvm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659822039
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 2\n        else {\n           \
    \ var result = 0L\n            for (i <- 0 to n - 1) result += pow(10, i).toLong\n\
    \            result * 2\n        }\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l))\
    \ == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l))\
    \ == (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphab6j11j.scala:10:27\
    \ --------------------\e[0m\e[0m\n\e[31m10 |\e[0m            \e[33mfor\e[0m (i\
    \ <- \e[31m0\e[0m to n - \e[31m1\e[0m) result += pow(\e[31m10\e[0m, i).toLong\n\
    \e[31m\e[31m   |\e[0m                           ^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                         Found:    Long\n\e[31m   |\e[0m                    \
    \       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659822039
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        def startsOneEnds(n : Long, digit : Long) : Long =\
    \ {\n            if (n == 1) return 1\n            var total = 1 + 9 * pow(10,\
    \ n - 2).toLong\n            for (i <- 1 to (n - 2)) {\n                total\
    \ += startsOneEnds(i, 1) * pow(10, n - i - 1).toLong\n            }\n        \
    \    total\n        }\n        startsOneEnds(n, 1)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l))\
    \ == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l))\
    \ == (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6tjb0mej.scala:10:28\
    \ --------------------\e[0m\e[0m\n\e[31m10 |\e[0m            \e[33mfor\e[0m (i\
    \ <- \e[31m1\e[0m to (n - \e[31m2\e[0m)) {\n\e[31m\e[31m   |\e[0m            \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                            Found:\
    \    Long\n\e[31m   |\e[0m                            Required: Int\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659822039
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        val dp = new Array[Long](n.toInt)\n        dp(0) =\
    \ 2\n        for (i <- 1 until n.toInt) dp(i) = dp(i - 1) * 10 + pow(10, i).toLong\n\
    \        dp(n.toInt - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptm68_i6h.scala:13)\n\tat Problem.main(tmptm68_i6h.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659822040
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1)\n            return 2\n        var dp\
    \ = Array.ofDim[Long](n + 1, 2)\n        dp(1)(0) = 0\n        dp(1)(1) = 2\n\
    \        for (i <- 2 to n) {\n            dp(i)(0) = (dp(i - 1)(0) + dp(i - 1)(1))\
    \ * 9\n            dp(i)(1) = dp(i - 1)(0) + dp(i - 1)(1)\n        }\n       \
    \ dp(n)(0) + dp(n)(1)\n    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpirjdonqt.scala:9:35\
    \ ---------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mvar\e[0m \e[36mdp\e\
    [0m = Array.ofDim[\e[35mLong\e[0m](n + \e[31m1\e[0m, \e[31m2\e[0m)\n\e[31m\e[31m\
    \  |\e[0m                                   ^^^^^\e[0m\n\e[31m  |\e[0m       \
    \                            Found:    Long\n\e[31m  |\e[0m                  \
    \                 Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpirjdonqt.scala:12:23 --------------------\e[0m\e[0m\n\e[31m12\
    \ |\e[0m        \e[33mfor\e[0m (i <- \e[31m2\e[0m to n) {\n\e[31m\e[31m   |\e\
    [0m                       ^\e[0m\n\e[31m   |\e[0m                       Found:\
    \    (n : Long)\n\e[31m   |\e[0m                       Required: Int\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpirjdonqt.scala:16:11 --------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        dp(n)(\e[31m0\e[0m) + dp(n)(\e[31m1\e[0m)\n\e\
    [31m\e[31m   |\e[0m           ^\e[0m\n\e[31m   |\e[0m           Found:    (n :\
    \ Long)\n\e[31m   |\e[0m           Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpirjdonqt.scala:16:22 --------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        dp(n)(\e[31m0\e[0m) + dp(n)(\e[31m1\e[0m)\n\e\
    [31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m             \
    \         Found:    (n : Long)\n\e[31m   |\e[0m                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659822040
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        (1L until n).map(i => pow(2, i).toLong).sum + pow(2,\
    \ n).toLong\n    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpaz1zy5pu.scala:10)\n\tat Problem.main(tmpaz1zy5pu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659976068
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        var answer = 0L\n        val power = pow(10, n - 1).toLong\n\
    \        val limit = power * 10\n        for (i <- 1L until limit) {\n       \
    \     if (i / power == 1) {\n                val j = i % power\n             \
    \   if (j == 0) answer += 2\n                else if (j % 10 == 1) answer += 1\n\
    \            }\n        }\n        answer\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l))\
    \ == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l))\
    \ == (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpm18ee2mx.scala:20)\n\tat Problem.main(tmpm18ee2mx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659976068
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        var x = new StringBuilder(n.toString)\n        x(0)\
    \ = '1'\n        x(n.toInt - 1) = '1'\n        var l = 1L\n        var r = 1L\n\
    \        for (i <- 1 to n.toInt - 1) {\n            l = l * 10\n            r\
    \ = r * 10 + 1\n        }\n        r - l + 1\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l))\
    \ == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l))\
    \ == (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: index 1, length 1\n\tat java.base/java.lang.String.checkIndex(String.java:4563)\n\
    \tat java.base/java.lang.AbstractStringBuilder.setCharAt(AbstractStringBuilder.java:533)\n\
    \tat java.base/java.lang.StringBuilder.setCharAt(StringBuilder.java:91)\n\tat\
    \ scala.collection.mutable.StringBuilder.update(StringBuilder.scala:343)\n\tat\
    \ Problem$.startsOneEnds(tmplq1ttfwy.scala:9)\n\tat Problem$.main(tmplq1ttfwy.scala:20)\n\
    \tat Problem.main(tmplq1ttfwy.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659976068
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        val digits = n.toString.toArray\n        val ending\
    \ = Array.fill(digits.length + 1)(0L)\n        val starting = Array.fill(digits.length\
    \ + 1)(0L)\n        ending(0) = 0\n        ending(1) = 1\n        starting(0)\
    \ = 0\n        starting(1) = 1\n        for (i <- 2 to digits.length) {\n    \
    \        starting(i) = 9 * ending(i - 1) + starting(i - 1)\n            ending(i)\
    \ = starting(i - 1)\n        }\n        starting(digits.length)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n  \
    \  assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n\
    \    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l)) ==\
    \ (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpisser5x5.scala:22)\n\tat Problem.main(tmpisser5x5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659976068
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        (n + 1) * math.pow(10, n - 1).toLong\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n  \
    \  assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n\
    \    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l)) ==\
    \ (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8mw9b2re.scala:10)\n\tat Problem.main(tmp8mw9b2re.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659976068
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        def func(n : Long) : Long = {\n            if (n ==\
    \ 1)\n                return 3\n            else\n                return 10 *\
    \ func(n - 1) + 10\n        }\n        return func(n)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l))\
    \ == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l))\
    \ == (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmph0okfu7b.scala:16)\n\tat Problem.main(tmph0okfu7b.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659976067
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        def f(n : Long) : Long = {\n            if (n == 1)\
    \ 1\n            else if (n == 2) 2\n            else {\n                var ret\
    \ = 0L\n                for (i <- 1 to 9) {\n                    var sub = 0L\n\
    \                    for (j <- 1 to 9) {\n                        sub += f(n -\
    \ 1)\n                    }\n                    ret += sub\n                }\n\
    \                ret\n            }\n        }\n        f(n)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l))\
    \ == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l))\
    \ == (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpr51fd1fn.scala:26)\n\tat Problem.main(tmpr51fd1fn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659976068
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 2\n        var sum = 1\n      \
    \  for (i <- 2 to n) sum = sum * 10\n        for (i <- 2 to n) sum += sum * (n\
    \ - 1)\n        return sum\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n\
    \    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l)) ==\
    \ (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7suihm4m.scala:9:23\
    \ ---------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m2\e[0m to n) sum = sum * \e[31m10\e[0m\n\e[31m\e[31m  |\e[0m         \
    \              ^\e[0m\n\e[31m  |\e[0m                       Found:    (n : Long)\n\
    \e[31m  |\e[0m                       Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp7suihm4m.scala:10:23 --------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mfor\e[0m (i <- \e[31m2\e[0m to n) sum +=\
    \ sum * (n - \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                       ^\e[0m\n\
    \e[31m   |\e[0m                       Found:    (n : Long)\n\e[31m   |\e[0m  \
    \                     Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp7suihm4m.scala:10:30 ------------------------\e[0m\e[0m\n\e[31m10 |\e\
    [0m        \e[33mfor\e[0m (i <- \e[31m2\e[0m to n) sum += sum * (n - \e[31m1\e\
    [0m)\n\e[31m\e[31m   |\e[0m                          ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                  value += is not a member of Int - did you mean Int.!=?\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659976068
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n      var ten = 1L\n      for (i <- 1 to n - 1) ten *= 10\n\
    \      ten + (ten - 1) / 9 * n\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n\
    \    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l)) ==\
    \ (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpz3ek6epg.scala:8:21\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m      \e[33mfor\e[0m (i <- \e\
    [31m1\e[0m to n - \e[31m1\e[0m) ten *= \e[31m10\e[0m\n\e[31m\e[31m  |\e[0m   \
    \                  ^^^^^\e[0m\n\e[31m  |\e[0m                     Found:    Long\n\
    \e[31m  |\e[0m                     Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659976067
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        val n2 = pow(10, n - 1).toLong\n        val n1 = pow(10,\
    \ n).toLong\n        return n1 - 2 * n2\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l))\
    \ == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l))\
    \ == (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqvz_u5wr.scala:12)\n\tat Problem.main(tmpqvz_u5wr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659976068
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 1\n        if (n == 2) return 2\n\
    \        var dp = ArrayBuffer.fill(n.toInt + 1)(0)\n        dp(1) = 1\n      \
    \  dp(2) = 2\n        for (i <- 3 to n.toInt) {\n            dp(i) = 2 * dp(i\
    \ - 1) - dp(i - 2)\n        }\n        return dp(n.toInt)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l))\
    \ == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l))\
    \ == (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp53wmq4_s.scala:19)\n\tat Problem.main(tmp53wmq4_s.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659976068
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 2\n        val fact10 = (1 to 10).product\n\
    \        val fact9 = (1 to 9).product\n        // Count of numbers whose first\
    \ digit is 1\n        val first = fact10 / fact9\n        // Count of numbers\
    \ whose last digit is 1\n        val last = (1 to (n - 1)).map(n => fact10 / fact9).sum\n\
    \        // Count of numbers whose first or last digit is 1\n        first + last\
    \ - 1\n    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptl7psadt.scala:13:26\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mlast\e\
    [0m = (\e[31m1\e[0m to (n - \e[31m1\e[0m)).map(\e[36mn\e[0m => fact10 / fact9).sum\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                       Found:    Long\n\e[31m   |\e[0m                      \
    \    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659976067
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) 1\n        else {\n            val ten\
    \ : Long = pow(10, n).toLong\n            // Start with 1\n            val n1\
    \ : Long = ten - 1\n            // End with 1\n            val n2 : Long = ten\
    \ / 10\n            n1 + n2\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l))\
    \ == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l))\
    \ == (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpr3sxh3bb.scala:19)\n\tat Problem.main(tmpr3sxh3bb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659976067
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        // since the number starts and ends with 1, there\
    \ will be n-2 numbers in between\n        // Thus, the total number will be 9*10^(n-2)\n\
    \        return 9 * pow(10, n - 2).toLong\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l))\
    \ == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l))\
    \ == (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpr5d7rid3.scala:12)\n\tat Problem.main(tmpr5d7rid3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659976067
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) 1\n        else {\n            // The\
    \ number of numbers with a given number of digits that start with 1\n        \
    \    // equals the number of combinations of digits that can be used for the\n\
    \            // remaining digits. There are 9 such combinations for each digit,\
    \ so the\n            // total is 9 * 9 * ... * 9 (n-1 times).\n            //\
    \ The same holds for numbers ending with 1.\n            var result = 1L\n   \
    \         for (i <- 1 to n - 1) {\n                result *= 9\n            }\n\
    \            result * 2\n        }\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l))\
    \ == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l))\
    \ == (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyu1mp5kb.scala:15:27\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33mfor\e[0m (i\
    \ <- \e[31m1\e[0m to n - \e[31m1\e[0m) {\n\e[31m\e[31m   |\e[0m              \
    \             ^^^^^\e[0m\n\e[31m   |\e[0m                           Found:   \
    \ Long\n\e[31m   |\e[0m                           Required: Int\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659976068
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        var count = 0L\n        var power = 1L\n        for\
    \ (i <- 1 to n) {\n            count += 9 * power\n            power *= 10\n \
    \       }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpy_ah5wvo.scala:9:23\
    \ ---------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m1\e[0m to n) {\n\e[31m\e[31m  |\e[0m                       ^\e[0m\n\e\
    [31m  |\e[0m                       Found:    (n : Long)\n\e[31m  |\e[0m      \
    \                 Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659976067
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 10\n        val root = pow(10,\
    \ n - 1).toLong\n        (root * 2 - 1) + root\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l))\
    \ == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l))\
    \ == (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpaurucvgi.scala:12)\n\tat Problem.main(tmpaurucvgi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659976067
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        def startsOneEnds(n : Long, m : Long) : Long = {\n\
    \            if (n == 0) return 1\n            if (n == 1) return m\n        \
    \    return (10 * startsOneEnds(n - 1, m) - startsOneEnds(n - 2, m) + m) % 1000000007\n\
    \        }\n        return startsOneEnds(n, 10)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l))\
    \ == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l))\
    \ == (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkernmxsy.scala:15)\n\tat Problem.main(tmpkernmxsy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659976067
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1)\n        \treturn 2\n        val dp =\
    \ Array.ofDim[Long](2, n + 1)\n        dp(0)(1) = 1\n        dp(1)(1) = 1\n  \
    \      for (i <- 2 to n) {\n            dp(0)(i) = dp(0)(i - 1) + dp(1)(i - 1)\n\
    \            dp(1)(i) = dp(0)(i - 1)\n        }\n        dp(0)(n) + dp(1)(n)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpckirrucg.scala:9:38\
    \ ---------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mdp\e\
    [0m = Array.ofDim[\e[35mLong\e[0m](\e[31m2\e[0m, n + \e[31m1\e[0m)\n\e[31m\e[31m\
    \  |\e[0m                                      ^^^^^\e[0m\n\e[31m  |\e[0m    \
    \                                  Found:    Long\n\e[31m  |\e[0m            \
    \                          Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpckirrucg.scala:12:23 --------------------\e[0m\e\
    [0m\n\e[31m12 |\e[0m        \e[33mfor\e[0m (i <- \e[31m2\e[0m to n) {\n\e[31m\e\
    [31m   |\e[0m                       ^\e[0m\n\e[31m   |\e[0m                  \
    \     Found:    (n : Long)\n\e[31m   |\e[0m                       Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpckirrucg.scala:16:14\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        dp(\e[31m0\e[0m)(n) +\
    \ dp(\e[31m1\e[0m)(n)\n\e[31m\e[31m   |\e[0m              ^\e[0m\n\e[31m   |\e\
    [0m              Found:    (n : Long)\n\e[31m   |\e[0m              Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpckirrucg.scala:16:25\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        dp(\e[31m0\e[0m)(n) +\
    \ dp(\e[31m1\e[0m)(n)\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Found:    (n : Long)\n\e[31m   |\e[0m  \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659976068
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n      var dp = Array.ofDim[Long](n.toInt + 1, 2)\n      dp(1)(0)\
    \ = 1\n      dp(1)(1) = 1\n      for (i <- 2 to n.toInt) {\n        dp(i)(0) =\
    \ dp(i - 1)(0) + dp(i - 1)(1)\n        dp(i)(1) = dp(i - 1)(0)\n      }\n    \
    \  dp(n.toInt)(0) + dp(n.toInt)(1)\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l))\
    \ == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l))\
    \ == (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkj82aoa4.scala:17)\n\tat Problem.main(tmpkj82aoa4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659976068
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        def countNumberOfDS(d : Long, s : Long) : Long = {\n\
    \            if (d == 0) s\n            else if (d == 1) s + 2\n            else\
    \ {\n                val digits = pow(10, d - 1).toLong\n                val near\
    \ = pow(10, d - 2).toLong\n                (near * 9 * countNumberOfDS(d - 2,\
    \ 1)) + (digits * countNumberOfDS(d - 1, 0))\n            }\n        }\n     \
    \   val digits = pow(10, n - 1).toLong\n        countNumberOfDS(n, 0) + (digits\
    \ * countNumberOfDS(n - 1, 0))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n\
    \    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l)) ==\
    \ (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6k8gjmpk.scala:20)\n\tat Problem.main(tmp6k8gjmpk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659976068
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 2\n        var product = 1L\n \
    \       for (i <- 1L to n) product *= 10\n        product\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l))\
    \ == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l))\
    \ == (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5krqfmiw.scala:13)\n\tat Problem.main(tmp5krqfmiw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659976068
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        // We have 9 choices for the first digit, 8 choices\
    \ for the second, etc.\n        //\n        // Our answer is 10^(n-1) - 9^(n-1)\
    \ + 9^(n-2) - 9^(n-3) + ... + 9 - 9^0\n        //         = 10^(n-1) - 9 * (9^(n-1)\
    \ - 9^(n-2) + 9^(n-3) - ... + 9 - 9^0)\n        //         = 10^(n-1) - 9 * (9^(n-1)\
    \ - 9 * (9^(n-2) - 9 * (9^(n-3) - ... + 9 - 9^0)))\n        // We are essentially\
    \ \"splitting\" 9^(n-1) in 9 different ways, and picking\n        // one of the\
    \ 9 ways to split 9^(n-2), etc.\n        if (n <= 1) 0\n        else {\n     \
    \       var sum = 0L\n            var root = 9L\n            var product = pow(10,\
    \ n - 1).toLong\n            var term = pow(9, n - 1).toLong\n            for\
    \ (i <- 2 to n) {\n                sum += (product - term) * root\n          \
    \      root = pow(9, i - 1).toLong\n                product = pow(10, n - i).toLong\n\
    \                term = pow(9, n - i).toLong\n            }\n            sum +\
    \ 10\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpo15oopw9.scala:20:27\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m            \e[33mfor\e[0m (i\
    \ <- \e[31m2\e[0m to n) {\n\e[31m\e[31m   |\e[0m                           ^\e\
    [0m\n\e[31m   |\e[0m                           Found:    (n : Long)\n\e[31m  \
    \ |\e[0m                           Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659976067
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        var sum = 0L\n        for (i <- 1L to n) {\n     \
    \       sum += pow(10, i - 1).toLong\n        }\n        return sum * 2\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n\
    \    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l)) ==\
    \ (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2iwwdfda.scala:14)\n\tat Problem.main(tmp2iwwdfda.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659976078
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 1\n        else if (n == 2) return\
    \ 3\n        var dp = new Array[Long](n.toInt + 1)\n        dp(1) = 1\n      \
    \  dp(2) = 3\n        var k = 2\n        while (k <= n) {\n            dp(k) =\
    \ (dp(k - 1) + dp(k - 2)) * 2\n            k += 1\n        }\n        dp(n.toInt)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpap3g13sj.scala:21)\n\tat Problem.main(tmpap3g13sj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659976077
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) {\n            2\n        } else {\n \
    \           // Count the numbers between 10...00 and 19...99 + the numbers between\
    \ 1\n            // and 9.\n            startsOneEnds(n - 1) + (9 * pow(10, n\
    \ - 2)).toLong\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw0eswvtj.scala:16)\n\tat Problem.main(tmpw0eswvtj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659976076
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        val (a, b) = (n / 2, n % 2)\n        pow(10, a).toLong\
    \ - pow(9, a).toLong + pow(9, a).toLong * b\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l))\
    \ == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l))\
    \ == (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp55ver1b1.scala:12)\n\tat Problem.main(tmp55ver1b1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659976077
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        require(n >= 1)\n        var count = 10 * ((n - 1)\
    \ / 2)\n        if (n % 2 == 1) {\n            count += 9\n        }\n       \
    \ count\n    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_jdal5sv.scala:15)\n\tat Problem.main(tmp_jdal5sv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659976078
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n      if (n == 1) return 10\n      var dp : Array[Long] =\
    \ new Array[Long](n.toInt + 1)\n      dp(1) = 10\n      for (i <- 2 to n.toInt)\
    \ {\n        val last = pow(10, i - 1).toLong\n        dp(i) = dp(i - 1) * 9 +\
    \ last\n      }\n      dp(n.toInt)\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l))\
    \ == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l))\
    \ == (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgiv9sv24.scala:17)\n\tat Problem.main(tmpgiv9sv24.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659976078
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        // Let f(n) be the number of n-digit positive integers\
    \ that start or end with 1.\n        // f(n) = 2f(n - 1) + 10^(n - 1) - 1 (f(1)\
    \ = 2)\n        // f(n) = 2(2f(n - 2) + 10^(n - 2) - 1) + 10^(n - 1) - 1\n   \
    \     //      = 4f(n - 2) + 10^(n - 1) + 10^(n - 2) - 2\n        // f(n) = 2^kf(n\
    \ - k) + (1 + ... + 10^(k - 1)) - (k - 1)\n        //      = 2^kf(n - k) + 10^k\
    \ - k\n        val f : Array[Long] = Array.fill(n.toInt + 1)(0)\n        f(1)\
    \ = 2\n        for (i <- 2 to n.toInt) {\n            var tmp = 0L\n         \
    \   for (j <- 1 to i - 1) {\n                tmp += pow(10, j - 1).toLong\n  \
    \          }\n            f(i) = 2 * f(i - 1) + pow(10, i - 1).toLong - 1 - tmp\n\
    \        }\n        f(n.toInt)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n\
    \    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l)) ==\
    \ (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe4kcgix_.scala:25)\n\tat Problem.main(tmpe4kcgix_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659976078
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        var nd = n.toString.size\n        var n10 = BigInt(10).pow(nd\
    \ - 1)\n        var result = BigInt(9) * BigInt(10).pow(nd - 2)\n        if (n\
    \ % n10 == 0) result += 1\n        return result.toLong\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l))\
    \ == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l))\
    \ == (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArithmeticException: Negative exponent\n\tat java.base/java.math.BigInteger.pow(BigInteger.java:2421)\n\
    \tat scala.math.BigInt.pow(BigInt.scala:456)\n\tat Problem$.startsOneEnds(tmpvz28k10b.scala:9)\n\
    \tat Problem$.main(tmpvz28k10b.scala:14)\n\tat Problem.main(tmpvz28k10b.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659976078
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1)\n            return 10\n        val b\
    \ = ArrayBuffer[Long]()\n        for (i <- 0 to n - 1) {\n            val v =\
    \ n - i - 1\n            b += (v * (9 * pow(10, v)).toLong)\n        }\n     \
    \   b.sum\n    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmph3s29n6a.scala:10:23\
    \ --------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m to n - \e[31m1\e[0m) {\n\e[31m\e[31m   |\e[0m                 \
    \      ^^^^^\e[0m\n\e[31m   |\e[0m                       Found:    Long\n\e[31m\
    \   |\e[0m                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659976077
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        /*\n         * To simplify the problem, consider the\
    \ problem for n-1\n         * digit integers. Let the count be X.\n         *\
    \ For a given n-digit number, it can start with 1 iff the\n         * remaining\
    \ n-1 digits form a valid number. Thus,\n         * the count of numbers starting\
    \ with 1 is X.\n         * Similarly, the count of numbers ending with 1 is X.\n\
    \         * For a given n-digit number, if neither of the last two\n         *\
    \ digits is 1, then the remaining n-2 digits must form a\n         * valid number.\
    \ Thus, the count of numbers not ending\n         * or starting with 1 is 10 *\
    \ X.\n         * Therefore, the total count of numbers with n digits is\n    \
    \     * 10X + 2X.\n         */\n        val ans = if (n == 1) 10 else {\n    \
    \        val last = startsOneEnds(n - 1)\n            10 * last + 2 * last\n \
    \       }\n        ans\n    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt9gkykhf.scala:28)\n\tat Problem.main(tmpt9gkykhf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659976077
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        // (1 + 10 + 10^2 + 10^3 + ... + 10^(n-1)) + (1 +\
    \ 9 + 90 + 900 + ... + 9*10^(n-2))\n        val first = pow(10, n - 1).toLong\
    \ - 1\n        val second = first * (n - 1)\n        first + second\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n\
    \    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l)) ==\
    \ (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptn6ywuv1.scala:13)\n\tat Problem.main(tmptn6ywuv1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659976077
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        var a : Long = (1 - pow(10, -n + 1)) / (1 - 10)\n\
    \        var b : Long = 10 * a - 9 * (1 - pow(10, -n)) / (1 - 10)\n        return\
    \ a + b\n    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpx3n7e7fu.scala:7:23\
    \ ---------------------\e[0m\e[0m\n\e[31m7 |\e[0m        \e[33mvar\e[0m \e[36ma\e\
    [0m : \e[35mLong\e[0m = (\e[31m1\e[0m - pow(\e[31m10\e[0m, -n + \e[31m1\e[0m))\
    \ / (\e[31m1\e[0m - \e[31m10\e[0m)\n\e[31m\e[31m  |\e[0m                     \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  |\e[0m                      \
    \ Found:    Double\n\e[31m  |\e[0m                       Required: Long\n\e[31m\
    \  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpx3n7e7fu.scala:8:23 ---------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m        \e[33mvar\e[0m \e[36mb\e[0m : \e[35mLong\e[0m\
    \ = \e[31m10\e[0m * a - \e[31m9\e[0m * (\e[31m1\e[0m - pow(\e[31m10\e[0m, -n))\
    \ / (\e[31m1\e[0m - \e[31m10\e[0m)\n\e[31m\e[31m  |\e[0m                     \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  |\e[0m            \
    \           Found:    Double\n\e[31m  |\e[0m                       Required: Long\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659976078
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 2\n        var result = n\n   \
    \     for (p <- 2 to n) {\n            val r = pow(10, p - 1).toLong\n       \
    \     result += 9 * r\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l))\
    \ == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l))\
    \ == (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2dd7slbz.scala:9:23\
    \ ---------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mfor\e[0m (p <-\
    \ \e[31m2\e[0m to n) {\n\e[31m\e[31m  |\e[0m                       ^\e[0m\n\e\
    [31m  |\e[0m                       Found:    (n : Long)\n\e[31m  |\e[0m      \
    \                 Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659976077
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        var f = BigInt(10).pow(n - 1)\n        var c = 0\n\
    \        while (f > 0) {\n            c += 1\n            f /= 10\n        }\n\
    \        c\n    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpul6i2zwo.scala:7:31\
    \ ---------------------\e[0m\e[0m\n\e[31m7 |\e[0m        \e[33mvar\e[0m \e[36mf\e\
    [0m = BigInt(\e[31m10\e[0m).pow(n - \e[31m1\e[0m)\n\e[31m\e[31m  |\e[0m      \
    \                         ^^^^^\e[0m\n\e[31m  |\e[0m                         \
    \      Found:    Long\n\e[31m  |\e[0m                               Required:\
    \ Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659976077
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        def f(a : Long, b : Long, c : Long, d : Long) : Long\
    \ = if (n == 0) a + b + c + d else {\n            f(b, a + b + c + d, d, a + b\
    \ + c + d)\n        }\n        f(0, 1, 0, 0)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l))\
    \ == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l))\
    \ == (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659976081
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        var count = 0L\n        for (i <- 1 to 9) {\n    \
    \        count += pow(10, n - 1).toLong * (10 - i)\n        }\n        count +=\
    \ (pow(10, n - 1).toLong * 10 - pow(10, n - 2).toLong)\n        count\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n\
    \    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l)) ==\
    \ (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpj544imb5.scala:15)\n\tat Problem.main(tmpj544imb5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659976079
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        var a = new Array[Long](n.toInt + 1)\n        var\
    \ b = new Array[Long](n.toInt + 1)\n        a(1) = 1\n        b(1) = 1\n     \
    \   for (i <- 2 to n.toInt) {\n            a(i) = a(i - 1) + b(i - 1)\n      \
    \      b(i) = a(i - 1)\n        }\n        a(n.toInt) + b(n.toInt)\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n\
    \    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l)) ==\
    \ (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbbrk5qjf.scala:18)\n\tat Problem.main(tmpbbrk5qjf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659976078
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        var product = 1L\n        var total = 0L\n       \
    \ for (i <- 1L to n) {\n            product *= 10\n            if (i == 1) total\
    \ += 2\n            else total += 9 * product / 10\n        }\n        total\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpti_0ivut.scala:17)\n\tat Problem.main(tmpti_0ivut.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659976078
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        def go(d : Long, s : Long) : Long = {\n          \
    \  if (d == 0) 1\n            else s + go(d - 1, s * 10)\n        }\n        go(n\
    \ - 1, 9)\n    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7n9kc5ok.scala:15)\n\tat Problem.main(tmp7n9kc5ok.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659976077
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 2\n        var result = 0L\n  \
    \      var i = 0L\n        while (i < n) {\n            val tem = pow(10, i).toLong\n\
    \            val count = pow(9, n - i - 1).toLong\n            result += tem *\
    \ count\n            i += 1\n        }\n        result * 2\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l))\
    \ == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l))\
    \ == (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp17ksoi10.scala:19)\n\tat Problem.main(tmp17ksoi10.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659976078
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        def pow(x : Long, y : Long) : Long = if (y == 0) 1\
    \ else x * pow(x, y - 1)\n        var right : Long = pow(10, n - 1)\n        var\
    \ left : Long = pow(10, n - 2)\n        var result : Long = 0\n        while (right\
    \ != 0) {\n            result += (right - 1) * left + right\n            right\
    \ /= 10\n            left /= 10\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l))\
    \ == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l))\
    \ == (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat Problem$.pow$1(tmp5mrb4o7d.scala:7)\n\
    \tat Problem$.pow$1(tmp5mrb4o7d.scala:7)\n\tat Problem$.pow$1(tmp5mrb4o7d.scala:7)\n\
    \tat Problem$.pow$1(tmp5mrb4o7d.scala:7)\n\tat Problem$.pow$1(tmp5mrb4o7d.scala:7)\n\
    \tat Problem$.pow$1(tmp5mrb4o7d.scala:7)\n\tat Problem$.pow$1(tmp5mrb4o7d.scala:7)\n\
    \tat Problem$.pow$1(tmp5mrb4o7d.scala:7)\n\tat Problem$.pow$1(tmp5mrb4o7d.scala:7)\n\
    \tat Problem$.pow$1(tmp5mrb4o7d.scala:7)\n\tat Problem$.pow$1(tmp5mrb4o7d.scala:7)\n\
    \tat Problem$.pow$1(tmp5mrb4o7d.scala:7)\n\tat Problem$.pow$1(tmp5mrb4o7d.scala:7)\n\
    \tat Problem$.pow$1(tmp5mrb4o7d.scala:7)\n\tat Problem$.pow$1(tmp5mrb4o7d.scala:7)\n\
    \tat Problem$.pow$1(tmp5mrb4o7d.scala:7)\n\tat Problem$.pow$1(tmp5mrb4o7d.scala:7)\n\
    \tat Problem$.pow$1(tmp5mrb4o7d.scala:7)\n\tat Problem$.pow$1(tmp5mrb4o7d.scala:7)\n\
    \tat Problem$.pow$1(tmp5mrb4o7d.scala:7)\n\tat Problem$.pow$1(tmp5mrb4o7d.scala:7)\n\
    \tat Problem$.pow$1(tmp5mrb4o7d.scala:7)\n\tat Problem$.pow$1(tmp5mrb4o7d.scala:7)\n\
    \tat Problem$.pow$1(tmp5mrb4o7d.scala:7)\n\tat Problem$.pow$1(tmp5mrb4o7d.scala:7)\n\
    \tat Problem$.pow$1(tmp5mrb4o7d.scala:7)\n\tat Problem$.pow$1(tmp5mrb4o7d.scala:7)\n\
    \tat Problem$.pow$1(tmp5mrb4o7d.scala:7)\n\tat Problem$.pow$1(tmp5mrb4o7d.scala:7)\n\
    \tat Problem$.pow$1(tmp5mrb4o7d.scala:7)\n\tat Problem$.pow$1(tmp5mrb4o7d.scala:7)\n\
    \tat Problem$.pow$1(tmp5mrb4o7d.scala:7)\n\tat Problem$.pow$1(tmp5mrb4o7d.scala:7)\n\
    \tat Problem$.pow$1(tmp5mrb4o7d.scala:7)\n\tat Problem$.pow$1(tmp5mrb4o7d.scala:7)\n\
    \tat Problem$.pow$1(tmp5mrb4o7d.scala:7)\n\tat Problem$.pow$1(tmp5mrb4o7d.scala:7)\n\
    \tat Problem$.pow$1(tmp5mrb4o7d.scala:7)\n\tat Problem$.pow$1(tmp5mrb4o7d.scala:7)\n\
    \tat Problem$.pow$1(tmp5mrb4o7d.scala:7)\n\tat Problem$.pow$1(tmp5mrb4o7d.scala:7)\n\
    \tat Problem$.pow$1(tmp5mrb4o7d.scala:7)\n\tat Problem$.pow$1(tmp5mrb4o7d.scala:7)\n\
    \tat Problem$.pow$1(tmp5mrb4o7d.scala:7)\n\tat Problem$.pow$1(tmp5mrb4o7d.scala:7)\n\
    \tat Problem$.pow$1(tmp5mrb4o7d.scala:7)\n\tat Problem$.pow$1(tmp5mrb4o7d.scala:7)\n\
    \tat Problem$.pow$1(tmp5mrb4o7d.scala:7)\n\tat Problem$.pow$1(tmp5mrb4o7d.scala:7)\n\
    \tat Problem$.pow$1(tmp5mrb4o7d.s"
  stdout: ''
  timestamp: 1659976078
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 10;\n        // 1 ... i ... 9\n\
    \        val maxEnd = n - 1;\n        val maxStart = n - 2;\n        var total\
    \ = 0l;\n        // Start with one.\n        total += pow(10, maxStart).toLong\
    \ - pow(9, maxStart).toLong;\n        // End with one.\n        total += pow(10,\
    \ maxEnd).toLong - pow(9, maxEnd).toLong;\n        total;\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l))\
    \ == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l))\
    \ == (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqdm07ko4.scala:19)\n\tat Problem.main(tmpqdm07ko4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659976078
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 1\n        var result = 0L\n  \
    \      for (i <- 1 to 9) {\n            var array = new Array[Int](n.toInt)\n\
    \            array(0) = i\n            result += endsOne(array, 1, n)\n      \
    \  }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmptx4mldjw.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            result += endsOne(array, \e[31m1\e[0m, n)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Long - did you mean Long.!=?\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmptx4mldjw.scala:12:22 ------------------------\e[0m\e[0m\n\
    \e[31m12 |\e[0m            result += endsOne(array, \e[31m1\e[0m, n)\n\e[31m\e\
    [31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \         Not found: endsOne\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659976078
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 2\n        val max = (n - 1) /\
    \ 2\n        // how many ways to fill in the middle digits\n        val count\
    \ = (2 to max).map(n => n - 1).reduce(_ * _)\n        // ways to add extra digits\
    \ to fill in\n        val extra = (1 to (n - 1) % 2).map(n => n + 1).reduce(_\
    \ * _)\n        return count * extra\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l))\
    \ == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l))\
    \ == (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp82hn9cnx.scala:10:26\
    \ --------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mcount\e\
    [0m = (\e[31m2\e[0m to max).map(\e[36mn\e[0m => n - \e[31m1\e[0m).reduce(_ * _)\n\
    \e[31m\e[31m   |\e[0m                          ^^^\e[0m\n\e[31m   |\e[0m     \
    \                     Found:    (max : Long)\n\e[31m   |\e[0m                \
    \          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp82hn9cnx.scala:12:26 --------------------\e[0m\e[0m\n\e[31m12\
    \ |\e[0m        \e[33mval\e[0m \e[36mextra\e[0m = (\e[31m1\e[0m to (n - \e[31m1\e\
    [0m) % \e[31m2\e[0m).map(\e[36mn\e[0m => n + \e[31m1\e[0m).reduce(_ * _)\n\e[31m\e\
    [31m   |\e[0m                          ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                     Found:    Long\n\e[31m   |\e[0m                        \
    \  Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659976086
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        // dp[i] is the count of numbers of digit i.\n   \
    \     val dp = Array.fill(n.toInt + 1)(0L)\n        dp(1) = 1\n        for (i\
    \ <- 2 to n.toInt) {\n            // end with 1;\n            dp(i) += dp(i -\
    \ 1)\n            // start with 1;\n            dp(i) += 9 * pow(10, i - 2).toLong\n\
    \        }\n        dp(n.toInt)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n\
    \    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l)) ==\
    \ (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp05mhffec.scala:20)\n\tat Problem.main(tmp05mhffec.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659976088
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) {\n            2\n        } else {\n \
    \           (1 to n).map(i => BigInt(10).pow(i - 1)).sum + 1\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n\
    \    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l)) ==\
    \ (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgz1hiq68.scala:10:18\
    \ --------------------\e[0m\e[0m\n\e[31m10 |\e[0m            (\e[31m1\e[0m to\
    \ n).map(\e[36mi\e[0m => BigInt(\e[31m10\e[0m).pow(i - \e[31m1\e[0m)).sum + \e\
    [31m1\e[0m\n\e[31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m   \
    \               Found:    (n : Long)\n\e[31m   |\e[0m                  Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659976087
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 10\n        var p = n - 1\n   \
    \     var a = n - 1\n        var b = 1\n        var ret = 10\n        while (p\
    \ >= 2) {\n            a *= p\n            b *= 9\n            p -= 1\n      \
    \      ret += a / b\n        }\n        return ret\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l))\
    \ == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l))\
    \ == (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbayxpvdf.scala:16:16 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            ret += a / b\n\e[31m\e[31m   |\e[0m     \
    \       ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Int\
    \ - did you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659976087
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n      // Count the number of integers that start or end with\
    \ 1\n      // for n - 1 digits.\n      // Start with the end case: n = 1.\n  \
    \    var cnt = n\n      // Induction step.\n      for (i <- n - 1 to 1 by -1)\
    \ {\n        cnt = cnt * (9 - i + 2)\n      }\n      return cnt\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n  \
    \  assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n\
    \    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l)) ==\
    \ (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_syf9mzg.scala:19)\n\tat Problem.main(tmp_syf9mzg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659976088
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        // return (pow(10, n).toLong - 9 * pow(9, n - 1).toLong)\n\
    \        if (n == 1) return 10\n        if (n == 2) return 100\n        var ans\
    \ = 0L\n        for (i <- 1 to 9) {\n            ans += pow(10, n - 1).toLong\
    \ - pow(9, n - 1).toLong\n        }\n        ans += pow(10, n - 1).toLong\n  \
    \      ans\n    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3py7oxan.scala:18)\n\tat Problem.main(tmp3py7oxan.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659976088
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        // A rough estimate of the value of pi, calculated\
    \ using the method\n        // described in wikipedia.\n        // https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Continued_fraction_expansion\n\
    \        def pi(n : Long) : Double = {\n            var m = 0\n            var\
    \ d = 1\n            var a0 = floor(sqrt(n)).toLong\n            var a = a0\n\
    \            var res = a0\n            while (a != 2 * a0) {\n               \
    \ m = d * a - m\n                d = (n - m * m) / d\n                a = (a0\
    \ + m) / d\n                res = a\n            }\n            res\n        }\n\
    \        val cache = new HashMap[Long, Double]\n        def f(n : Long) : Double\
    \ = {\n            if (cache.contains(n)) cache(n)\n            else {\n     \
    \           val res = if (n == 1) 10.0 else 10.0 * (1.0 - 1.0 / (pi(n) + 1.0))\n\
    \                cache += (n -> res)\n                res\n            }\n   \
    \     }\n        var res = 0.0\n        for (i <- 1 to n.toInt) res += f(i)\n\
    \        res.toLong\n    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjcv0uju1.scala:17:20\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m                m = d * a - m\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \               Found:    Long\n\e[31m   |\e[0m                    Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjcv0uju1.scala:18:20\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m                d = (n - m *\
    \ m) / d\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Found:    Long\n\e[31m   |\e[0m                \
    \    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659976088
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        // Count the number of 2-digit positive integers that\
    \ start or end with 1.\n        // 11 12 13 14 15 16 17 18 19 21 22 23 24 25 26\
    \ 27 28 29 31 ... 91\n        if (n == 2) 10\n        // Count the number of 3-digit\
    \ positive integers that start or end with 1.\n        // 111 112 113 114 115\
    \ 116 117 118 119 121 122 123 124 125 126 127 128 129 131 ... 191 911 912 913\
    \ 914 915 916 917 918 919 921 922 923 924 925 926 927 928 929 931 ... 991\n  \
    \      else if (n == 3) {\n            val N = 10\n            // Count of 3-digit\
    \ positive integers that start or end with 1 and\n            // have no trailing\
    \ zeros.\n            val count = (1 to N).map(i => pow(N - 1, i).toLong).sum\n\
    \            // There are N^2 3-digit positive integers that end with 0.\n   \
    \         count + pow(N, 2).toLong\n        }\n        // Count the number of\
    \ n-digit positive integers that start or end with 1.\n        // 11111 11112\
    \ 11113 11114 11115 11116 11117 11118 11119 11121 11122 11123 11124 11125 11126\
    \ 11127 11128 11129 11131 ... 11191 91111 91112 91113 91114 91115 91116 91117\
    \ 91118 91119 91121 91122 91123 91124 91125 91126 91127 91128 91129 91131 ...\
    \ 91191\n        else {\n            val N = 10\n            // Count of n-digit\
    \ positive integers that start or end with 1 and\n            // have no trailing\
    \ zeros.\n            val count = (1 to N).map(i => pow(N - 1, i).toLong).sum\n\
    \            // There are N^2 (n - 1)-digit positive integers that end with 0.\n\
    \            count + pow(N, 2).toLong * (pow(N, n - 2).toLong - 1)\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpd5xsvr76.scala:32)\n\tat Problem.main(tmpd5xsvr76.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 10\n        else if (n == 2) return\
    \ 10 * 9 + 10\n        else {\n            (1 to 9).map(x => pow(10, n - 1).toLong).reduce(_\
    \ + _) * 9 + startsOneEnds(n - 1)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l))\
    \ == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l))\
    \ == (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpj5frxyhe.scala:14)\n\tat Problem.main(tmpj5frxyhe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 2\n        if (n == 2) return 4\n\
    \        var nums = 4 : Long\n        for (i <- 3 to n.toInt) {\n            nums\
    \ = nums * (9 - i + 2) + (nums * (nums - 1)) / 2\n        }\n        nums\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l)) ==\
    \ (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf5ya7mwh.scala:16)\n\tat Problem.main(tmpf5ya7mwh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659976088
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        def f(n : Long) : Long = {\n            if (n == 1)\
    \ 1\n            else if (n == 2) 21\n            else {\n                var\
    \ result = 0L\n                for (i <- (1 to 9).toList) {\n                \
    \    val sub1 = (i - 1) * pow(9, n - 2).toLong\n                    val sub2 =\
    \ pow(10, n - 2).toLong\n                    result += f(n - 1) - sub1 + sub2\n\
    \                }\n                result\n            }\n        }\n       \
    \ f(n)\n    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpspv78qwd.scala:24)\n\tat Problem.main(tmpspv78qwd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 1\n        var total = 0\n    \
    \    for (i <- 1 to (n - 1)) {\n            val ones = BigInt(10).pow(i)\n   \
    \         total += ones.toLong\n        }\n        total += BigInt(10).pow(n -\
    \ 1).toLong\n        return total\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l))\
    \ == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l))\
    \ == (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9zt4qvox.scala:9:24\
    \ ---------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m1\e[0m to (n - \e[31m1\e[0m)) {\n\e[31m\e[31m  |\e[0m                \
    \        ^^^^^\e[0m\n\e[31m  |\e[0m                        Found:    Long\n\e\
    [31m  |\e[0m                        Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp9zt4qvox.scala:11:18 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m            total += ones.toLong\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member\
    \ of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9zt4qvox.scala:13:14\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        total += BigInt(\e\
    [31m10\e[0m).pow(n - \e[31m1\e[0m).toLong\n\e[31m\e[31m   |\e[0m        ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        value += is not a member of Int - did you mean Int.!=?\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9zt4qvox.scala:13:32 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        total += BigInt(\e[31m10\e[0m).pow(n - \e[31m1\e\
    [0m).toLong\n\e[31m\e[31m   |\e[0m                                ^^^^^\e[0m\n\
    \e[31m   |\e[0m                                Found:    Long\n\e[31m   |\e[0m\
    \                                Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        def df(n : Long, start : Long, end : Long) : Long\
    \ = {\n            if (n == 0) return end\n            var total = end\n     \
    \       if (start != 1) total += pow(9, n - 1).toLong\n            var i = 0\n\
    \            while (i < 10) {\n                if (i != 0) total += df(n - 1,\
    \ start, end)\n                i += 1\n            }\n            total\n    \
    \    }\n        if (n == 1) return 10\n        else return df(n - 1, 1, 0) + df(n\
    \ - 1, 0, 1)\n    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptie10x36.scala:22)\n\tat Problem.main(tmptie10x36.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659976088
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        val pow10 = BigInt(10).pow(n.toInt - 1)\n        def\
    \ f(m : Long) : Long = {\n            val res = if (m == 1) 1L else 9L\n     \
    \       res * pow10\n        }\n        (1L to 9L).map(f).sum\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n  \
    \  assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n\
    \    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l)) ==\
    \ (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmposupi8zg.scala:10:12\
    \ --------------------\e[0m\e[0m\n\e[31m10 |\e[0m            res * pow10\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Found: \
    \   BigInt\n\e[31m   |\e[0m            Required: Long\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659976088
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        // This can be done by PIE. Let f(i) be the number\
    \ of i-digit numbers\n        // that start with 1, and g(i) be the number of\
    \ i-digit numbers that\n        // end with 1. Then f(i) = g(i - 1) and g(i) =\
    \ 9 * f(i - 1) + g(i - 1).\n        // This can be solved by matrix exponentiation.\n\
    \        def matrixExponentiation(a : Array[Array[Long]], b : Long) : Array[Array[Long]]\
    \ = {\n            def matmul(a : Array[Array[Long]], b : Array[Array[Long]])\
    \ : Array[Array[Long]] = {\n                val c = Array.ofDim[Long](a.length,\
    \ a.length)\n                for (i <- 0 until a.length; j <- 0 until a.length;\
    \ k <- 0 until a.length) c(i)(j) = (c(i)(j) + a(i)(k) * b(k)(j)) % 1000000007\n\
    \                c\n            }\n            if (b == 1) a\n            else\
    \ if (b % 2 == 0) {\n                val x = matrixExponentiation(a, b / 2)\n\
    \                matmul(x, x)\n            } else matmul(a, matrixExponentiation(a,\
    \ b - 1))\n        }\n        val a = Array(Array(0, 1), Array(9, 10))\n     \
    \   val f0 = Array(Array(1, 0))\n        val ans = matmul(f0, matrixExponentiation(a,\
    \ n - 1))\n        ans(0)(0)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n\
    \    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l)) ==\
    \ (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppyz3jswk.scala:25:18 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mans\e[0m = matmul(f0, matrixExponentiation(a,\
    \ n - \e[31m1\e[0m))\n\e[31m\e[31m   |\e[0m                  ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: matmul\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmppyz3jswk.scala:25:50 --------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mans\e[0m = matmul(f0, matrixExponentiation(a,\
    \ n - \e[31m1\e[0m))\n\e[31m\e[31m   |\e[0m                                  \
    \                ^\e[0m\n\e[31m   |\e[0m                                     \
    \  Found:    \e[1m\e[31m(\e[0m\e[1m\e[31ma\e[0m\e[1m\e[31m \e[0m\e[1m\e[31m:\e\
    [0m\e[1m\e[31m \e[0mArray[Array[\e[1m\e[31mInt\e[0m]]\e[1m\e[31m)\e[0m\n\e[31m\
    \   |\e[0m                                       Required: Array[Array[\e[1m\e\
    [32mLong\e[0m]]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        def f(k : Long) : Long = {\n            if (k == 0)\
    \ return 0\n            val nn = pow(10, k - 1).toLong\n            f(k - 1) +\
    \ nn * 9 * k + nn * 10\n        }\n        f(n)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l))\
    \ == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l))\
    \ == (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3hw1r0tu.scala:15)\n\tat Problem.main(tmp3hw1r0tu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659976088
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        val pow = pow(10, n - 1).toLong\n        2 + pow +\
    \ 2 * pow - 2\n    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpik5_5ub4.scala:7:18 ----------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mpow\e[0m = pow(\e[31m10\e\
    [0m, n - \e[31m1\e[0m).toLong\n\e[31m\e[31m  |\e[0m                  ^\e[0m\n\e\
    [31m  |\e[0m                  Recursive \e[33mvalue\e[0m \e[35mpow\e[0m needs\
    \ type\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659976085
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1)\n            return 10\n        val count\
    \ = Array.fill(n.toInt)(10L)\n        count(0) = 9\n        for (i <- 2 to n.toInt)\
    \ {\n            for (j <- 0 until i - 1) {\n                count(i - 1) += 9\
    \ * pow(10, j).toLong\n            }\n        }\n        count(n.toInt - 1)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpke4le386.scala:19)\n\tat Problem.main(tmpke4le386.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        var m : Long = 0\n        if (n == 1) m = 10\n   \
    \     else {\n            val count = (1 to 9).map(pow(10, _).toLong).toList.takeWhile(_\
    \ < n).sum\n            m = count * 10 + 1\n        }\n        m\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n  \
    \  assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n\
    \    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l)) ==\
    \ (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmnrtop68.scala:16)\n\tat Problem.main(tmpmnrtop68.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 3\n        // # of digits starting\
    \ with 1 + # of digits ending with 1 - # of digits starting and ending with 1\n\
    \        pow(10, n - 1).toLong * 2 - pow(10, n - 2).toLong\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l))\
    \ == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l))\
    \ == (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzm6n_y2n.scala:12)\n\tat Problem.main(tmpzm6n_y2n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n      // Take the binary number and count the number of digits\
    \ 1, mod 3.\n      def countOnes(x : Long) : Long = if (x == 0) 0 else if (x %\
    \ 2 == 1) 1 + countOnes(x / 2) else countOnes(x / 2)\n      val powerOfTen = pow(10,\
    \ n).toLong\n      // The first digit is 1.\n      val firstDigitOne = powerOfTen\
    \ - powerOfTen / 10\n      // The last digit is 1.\n      val lastDigitOne = powerOfTen\
    \ / 2\n      // The first and last digits are 1.\n      val lastAndFirstDigitOne\
    \ = countOnes(powerOfTen)\n      firstDigitOne + lastDigitOne - lastAndFirstDigitOne\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8c5px4ha.scala:19)\n\tat Problem.main(tmp8c5px4ha.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659976089
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        def pow(n : Long) : Long = if (n == 0) 1 else 10 *\
    \ pow(n - 1)\n        // Return the number of n-digit numbers whose first digit\
    \ equals `c1`,\n        // second digit equals `c2`, ... last digit equals `cn`\n\
    \        def f(c1 : Int, c2 : Int, c3 : Int, c4 : Int, c5 : Int, c6 : Int, c7\
    \ : Int, c8 : Int, c9 : Int, c10 : Int) : Long = {\n            val num = pow(10\
    \ - n).toInt\n            var result = 0\n            if (c1 != 0) result += 1\n\
    \            if (c10 != 0) result += 1\n            if (n >= 2) {\n          \
    \      if (c1 != 0) result += (c1 - 1) * num\n                if (c10 != 0) result\
    \ += (c10 - 1) * num\n                if (c2 != 0) result += c2 * (num / 10)\n\
    \                if (c9 != 0) result += c9 * (num / 10)\n            }\n     \
    \       if (n >= 3) {\n                if (c1 != 0) result += (c1 - 1) * num *\
    \ 10 * 9 / 100\n                if (c10 != 0) result += (c10 - 1) * num * 10 *\
    \ 9 / 100\n                if (c2 != 0) result += c2 * (num / 10) * 10 * 9 / 100\n\
    \                if (c9 != 0) result += c9 * (num / 10) * 10 * 9 / 100\n     \
    \           if (c3 != 0) result += c3 * (num / 100)\n                if (c8 !=\
    \ 0) result += c8 * (num / 100)\n            }\n            if (n >= 4) {\n  \
    \              if (c1 != 0) result += (c1 - 1) * num * 10 * 9 * 10 * 9 / 10000\n\
    \                if (c10 != 0) result += (c10 - 1) * num * 10 * 9 * 10 * 9 / 10000\n\
    \                if (c2 != 0) result += c2 * (num / 10) * 10 * 9 * 10 * 9 / 10000\n\
    \                if (c9 != 0) result += c\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l))\
    \ == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l))\
    \ == (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5qrirg1j.scala:44:0 ----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5qrirg1j.scala:33:36\
    \ ------------------------\e[0m\e[0m\n\e[31m33 |\e[0m                \e[33mif\e\
    [0m (c9 != \e[31m0\e[0m) result += c\n\e[31m\e[31m   |\e[0m                  \
    \           ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                  value += is not a\
    \ member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp5qrirg1j.scala:33:39 ------------------------\e[0m\e[0m\n\e[31m33 |\e\
    [0m                \e[33mif\e[0m (c9 != \e[31m0\e[0m) result += c\n\e[31m\e[31m\
    \   |\e[0m                                       ^\e[0m\n\e[31m   |\e[0m     \
    \                                  Not found: c\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp5qrirg1j.scala:43:1 ---------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:\
    \    Unit\n\e[31m   |\e[0m Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[33m\e[33m-- Warning:\
    \ /tmp/tmp5qrirg1j.scala:35:4 ----------------------------------------\e[0m\e\
    [0m\n\e[33m35 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e\
    [0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m   |\e[0m\
    \    Line is indented too far to the left, or a `}` is missing\n1 warning found\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659976091
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        // Number of n-digit positive integers that start\
    \ or end with 1.\n        // Start by computing that for n = 1, then using that\
    \ to compute\n        // for n = 2, 3, ..., N.\n        val results = new Array[Long](n.toInt\
    \ + 1)\n        results(1) = 2\n        for (i <- 2 to n.toInt) {\n          \
    \  // Count the numbers of i-digit numbers starting or ending with 1\n       \
    \     // based on the numbers of (i - 1)-digit numbers starting or ending\n  \
    \          // with 1.\n            //\n            // First, the numbers of (i\
    \ - 1)-digit numbers starting or ending\n            // with 1 that have a 0 in\
    \ the middle, i.e. 10_ _ _0, 0_ _ _1.\n            // There are 10 such numbers,\
    \ since they can start with 10_ _ _,\n            // or end with 0_ _ _1.\n  \
    \          //\n            // Next, the numbers of (i - 1)-digit numbers starting\
    \ or ending\n            // with 1 that have a 1 in the middle, i.e. 10_ _ _1,\
    \ 1_ _ _1.\n            // Since these numbers must start with a 1, there are\
    \ 9 such\n            // numbers, since they can start with 10_ _ _1, 11_ _ _1,\
    \ ...,\n            // 19_ _ _1.\n            //\n            // Therefore, there\
    \ are 10 + 9 = 19 numbers of i-digit numbers\n            // starting or ending\
    \ with 1.\n            results(i) = 10 + results(i - 1)\n        }\n        results(n.toInt)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4y81isgq.scala:35)\n\tat Problem.main(tmp4y81isgq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659976094
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        n match {\n            case 1 => 2\n            case\
    \ 2 => 6\n            case _ => 2 * (10 * pow(9, n - 2).toLong - pow(9, n - 2).toLong)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpuqss2ix6.scala:14)\n\tat Problem.main(tmpuqss2ix6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659976096
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to 9) {\n      \
    \      var times = 9\n            for (j <- 1 until n) {\n                sum\
    \ += i * times\n                times *= 10\n            }\n        }\n      \
    \  return sum\n    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp31hyv7ex.scala:10:30\
    \ --------------------\e[0m\e[0m\n\e[31m10 |\e[0m            \e[33mfor\e[0m (j\
    \ <- \e[31m1\e[0m until n) {\n\e[31m\e[31m   |\e[0m                          \
    \    ^\e[0m\n\e[31m   |\e[0m                              Found:    (n : Long)\n\
    \e[31m   |\e[0m                              Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659976097
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        // We can use digit partitioning to solve this.\n\
    \        // A number with k digits ending in 1 will have k-1 digits before the\
    \ 1.\n        // So we can choose from our n digits k-1 digits to put before the\
    \ 1, and\n        // we will have n-k digits left to put after the 1.\n      \
    \  // For example, if n = 6, then we can have k = 1, 2, 3, 4, 5, or 6.\n     \
    \   // For k = 1, we have 1 number\n        // For k = 2, we have 5 numbers\n\
    \        // For k = 3, we have 20 numbers\n        // For k = 4, we have 70 numbers\n\
    \        // For k = 5, we have 252 numbers\n        // For k = 6, we have 924\
    \ numbers\n        // We can also use this method to count numbers ending in 0\n\
    \        // We can also use this method to count numbers starting in 1\n     \
    \   // But we cannot use this method to count numbers starting in 0\n        //\
    \ because we will have no digits left to put after the 0.\n        // We can,\
    \ however, use this method to count numbers starting in 2\n        // up to 9.\n\
    \        // So we can use this to count numbers with a 1 in the first digit\n\
    \        // and a 2-9 in the last digit, and add that to the number of numbers\n\
    \        // with a 1 in the first digit and a 0 in the last digit, and add that\n\
    \        // to the number of numbers with a 1 in the last digit.\n        // For\
    \ each of those numbers starting in 1, there are 9 options for\n        // each\
    \ digit from the first digit to the second to last digit.\n        // After the\
    \ second to last digit, there is only one option.\n        // For each of those\
    \ numbers ending in 1, there are 9 options for\n        // each digit from the\
    \ second digit to the last digit.\n        // Before the second digit, there is\
    \ only one option.\n        // So we have 10 times the sum of the binomial coefficients\n\
    \        val count1 = (1 to (n-1).toInt).map(k => BigInt(9) * binomial(n-1, k-1)).sum\n\
    \        val count2 = 10 * binomial(n-1, n-2)\n        count1 + count2\n\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l)) ==\
    \ (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsux4zuyz.scala:35:61 ------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mcount1\e[0m = (\e[31m1\e\
    [0m to (n-\e[31m1\e[0m).toInt).map(\e[36mk\e[0m => BigInt(\e[31m9\e[0m) * binomial(n-\e\
    [31m1\e[0m, k-\e[31m1\e[0m)).sum\n\e[31m\e[31m   |\e[0m                      \
    \                                       ^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                                              Not found: binomial\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsux4zuyz.scala:36:26 ------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36mcount2\e[0m = \e[31m10\e\
    [0m * binomial(n-\e[31m1\e[0m, n-\e[31m2\e[0m)\n\e[31m\e[31m   |\e[0m        \
    \                  ^^^^^^^^\e[0m\n\e[31m   |\e[0m                          Not\
    \ found: binomial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsux4zuyz.scala:37:8\
    \ ---------------------\e[0m\e[0m\n\e[31m37 |\e[0m        count1 + count2\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:\
    \    BigInt\n\e[31m   |\e[0m        Required: Long\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659976097
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 2\n        val dp = Array.ofDim[Long](n\
    \ + 1, 10)\n        for (k <- 1 to 9) dp(1)(k) = 1\n        for (i <- 2 to n)\
    \ {\n            for (j <- 0 to 9) {\n                if (j == 0) dp(i)(j) = dp(i\
    \ - 1)(1)\n                else if (j == 9) dp(i)(j) = dp(i - 1)(8)\n        \
    \        else dp(i)(j) = dp(i - 1)(j - 1) + dp(i - 1)(j + 1)\n            }\n\
    \        }\n        var res = 0L\n        for (k <- 1 to 9) res += dp(n)(k)\n\
    \        res\n    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpoyyz5ios.scala:8:35\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdp\e\
    [0m = Array.ofDim[\e[35mLong\e[0m](n + \e[31m1\e[0m, \e[31m10\e[0m)\n\e[31m\e\
    [31m  |\e[0m                                   ^^^^^\e[0m\n\e[31m  |\e[0m    \
    \                               Found:    Long\n\e[31m  |\e[0m               \
    \                    Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpoyyz5ios.scala:10:23 --------------------\e[0m\e[0m\n\e[31m10\
    \ |\e[0m        \e[33mfor\e[0m (i <- \e[31m2\e[0m to n) {\n\e[31m\e[31m   |\e\
    [0m                       ^\e[0m\n\e[31m   |\e[0m                       Found:\
    \    (n : Long)\n\e[31m   |\e[0m                       Required: Int\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpoyyz5ios.scala:18:30 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mfor\e[0m (k <- \e[31m1\e[0m to \e[31m9\e\
    [0m) res += dp(n)(k)\n\e[31m\e[31m   |\e[0m                          ^^^^^^\e\
    [0m\n\e[31m   |\e[0m                value += is not a member of Long - did you\
    \ mean Long.!=?\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpoyyz5ios.scala:18:36\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mfor\e[0m (k <-\
    \ \e[31m1\e[0m to \e[31m9\e[0m) res += dp(n)(k)\n\e[31m\e[31m   |\e[0m       \
    \                             ^\e[0m\n\e[31m   |\e[0m                        \
    \            Found:    (n : Long)\n\e[31m   |\e[0m                           \
    \         Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659976099
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1)\n            return 1\n        return\
    \ pow(10, n - 1).toLong\n    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxecswaqa.scala:13)\n\tat Problem.main(tmpxecswaqa.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659976098
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        // 1 = 1\n        // 10 - 99 = 90 = (10^1-10^0) *\
    \ 9\n        // 100 - 999 = 900 = (10^2-10^1) * 9\n        // 1000 - 9999 = 9000\
    \ = (10^3-10^2) * 9\n        // 10000 - 99999 = 90000 = (10^4-10^3) * 9\n    \
    \    // 100000 - 999999 = 900000 = (10^5-10^4) * 9\n        // 1000000 - 9999999\
    \ = 9000000 = (10^6-10^5) * 9\n        // 10000000 - 99999999 = 90000000 = (10^7-10^6)\
    \ * 9\n        // 100000000 - 999999999 = 900000000 = (10^8-10^7) * 9\n      \
    \  // 1000000000 - 9999999999 = 9000000000 = (10^9-10^8) * 9\n        // 10000000000\
    \ - 99999999999 = 90000000000 = (10^10-10^9) * 9\n        // 100000000000 - 999999999999\
    \ = 900000000000 = (10^11-10^10) * 9\n        // 1000000000000 - 9999999999999\
    \ = 9000000000000 = (10^12-10^11) * 9\n        // 10000000000000 - 99999999999999\
    \ = 90000000000000 = (10^13-10^12) * 9\n        // 100000000000000 - 999999999999999\
    \ = 900000000000000 = (10^14-10^13) * 9\n        // 1000000000000000 - 9999999999999999\
    \ = 9000000000000000 = (10^15-10^14) * 9\n        // 10000000000000000 - 99999999999999999\
    \ = 90000000000000000 = (10^16-10^15) * 9\n        // 100000000000000000 - 999999999999999999\
    \ = 900000000000000000 = (10^17-10^16) * 9\n        // 1000000000000000000 - 9999999999999999999\
    \ = 9000000000000000000 = (10^18-10^17) * 9\n        // 10000000000000000000 -\
    \ 99999999999999999999 = 90000000000000000000 = (10^19-10^18) * 9\n        //\
    \ 100000000000000000000 - 999999999999999999999 = 900000000000000000000 = (10^20-\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphb1uv5fx.scala:6:41\
    \ ---------------------\e[0m\e[0m\n\e[31m 6 |\e[0m    \e[33mdef\e[0m \e[36mstartsOneEnds\e\
    [0m(\e[36mn\e[0m : \e[35mLong\e[0m) : \e[35mLong\e[0m = {\n\e[31m\e[31m   |\e\
    [0m                                         ^\e[0m\n\e[31m   |\e[0m          \
    \                               Found:    Unit\n\e[31m   |\e[0m              \
    \                           Required: Long\n\e[31m 7 |\e[0m        \e[34m// 1\
    \ = 1\e[0m\n\e[31m 8 |\e[0m        \e[34m// 10 - 99 = 90 = (10^1-10^0) * 9\e[0m\n\
    \e[31m 9 |\e[0m        \e[34m// 100 - 999 = 900 = (10^2-10^1) * 9\e[0m\n\e[31m10\
    \ |\e[0m        \e[34m// 1000 - 9999 = 9000 = (10^3-10^2) * 9\e[0m\n\e[31m11 |\e\
    [0m        \e[34m// 10000 - 99999 = 90000 = (10^4-10^3) * 9\e[0m\n\e[31m12 |\e\
    [0m        \e[34m// 100000 - 999999 = 900000 = (10^5-10^4) * 9\e[0m\n\e[31m13\
    \ |\e[0m        \e[34m// 1000000 - 9999999 = 9000000 = (10^6-10^5) * 9\e[0m\n\e\
    [31m14 |\e[0m        \e[34m// 10000000 - 99999999 = 90000000 = (10^7-10^6) * 9\e\
    [0m\n\e[31m15 |\e[0m        \e[34m// 100000000 - 999999999 = 900000000 = (10^8-10^7)\
    \ * 9\e[0m\n\e[31m16 |\e[0m        \e[34m// 1000000000 - 9999999999 = 9000000000\
    \ = (10^9-10^8) * 9\e[0m\n\e[31m17 |\e[0m        \e[34m// 10000000000 - 99999999999\
    \ = 90000000000 = (10^10-10^9) * 9\e[0m\n\e[31m18 |\e[0m        \e[34m// 100000000000\
    \ - 999999999999 = 900000000000 = (10^11-10^10) * 9\e[0m\n\e[31m19 |\e[0m    \
    \    \e[34m// 1000000000000 - 9999999999999 = 9000000000000 = (10^12-10^11) *\
    \ 9\e[0m\n\e[31m20 |\e[0m        \e[34m// 10000000000000 - 99999999999999 = 90000000000000\
    \ = (10^13-10^12) * 9\e[0m\n\e[31m21 |\e[0m        \e[34m// 100000000000000 -\
    \ 999999999999999 = 900000000000000 = (10^14-10^13) * 9\e[0m\n\e[31m22 |\e[0m\
    \        \e[34m// 1000000000000000 - 9999999999999999 = 9000000000000000 = (10^15-10^14)\
    \ * 9\e[0m\n\e[31m23 |\e[0m        \e[34m// 10000000000000000 - 99999999999999999\
    \ = 90000000000000000 = (10^16-10^15) * 9\e[0m\n\e[31m24 |\e[0m        \e[34m//\
    \ 100000000000000000 - 999999999999999999 = 900000000000000000 = (10^17-10^16)\
    \ * 9\e[0m\n\e[31m25 |\e[0m        \e[34m// 1000000000000000000 - 9999999999999999999\
    \ = 9000000000000000000 = "
  stdout: ''
  timestamp: 1659976097
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 10\n        val dp = Array.ofDim[Long](n\
    \ + 1, 2)\n        dp(1)(0) = 9\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n) {\n            dp(i)(0) = dp(i - 1)(0) * 9 + dp(i - 1)(1)\n            dp(i)(1)\
    \ = dp(i - 1)(0)\n        }\n        dp(n)(0) + dp(n)(1)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l))\
    \ == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l))\
    \ == (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdug5oh9l.scala:8:35\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdp\e\
    [0m = Array.ofDim[\e[35mLong\e[0m](n + \e[31m1\e[0m, \e[31m2\e[0m)\n\e[31m\e[31m\
    \  |\e[0m                                   ^^^^^\e[0m\n\e[31m  |\e[0m       \
    \                            Found:    Long\n\e[31m  |\e[0m                  \
    \                 Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpdug5oh9l.scala:11:23 --------------------\e[0m\e[0m\n\e[31m11\
    \ |\e[0m        \e[33mfor\e[0m (i <- \e[31m2\e[0m to n) {\n\e[31m\e[31m   |\e\
    [0m                       ^\e[0m\n\e[31m   |\e[0m                       Found:\
    \    (n : Long)\n\e[31m   |\e[0m                       Required: Int\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdug5oh9l.scala:15:11 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        dp(n)(\e[31m0\e[0m) + dp(n)(\e[31m1\e[0m)\n\e\
    [31m\e[31m   |\e[0m           ^\e[0m\n\e[31m   |\e[0m           Found:    (n :\
    \ Long)\n\e[31m   |\e[0m           Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpdug5oh9l.scala:15:22 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        dp(n)(\e[31m0\e[0m) + dp(n)(\e[31m1\e[0m)\n\e\
    [31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m             \
    \         Found:    (n : Long)\n\e[31m   |\e[0m                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659976099
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        var c = 0\n        for (i <- 1 to 9) {\n         \
    \   c += pow(10, n - 1).toLong\n        }\n        for (i <- 1 to n - 1) {\n \
    \           c += (pow(10, i - 1).toLong) * 9 * pow(10, n - i - 1).toLong\n   \
    \     }\n        c\n    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp81i5u3oo.scala:9:14 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m            c += pow(\e[31m10\e[0m, n - \e[31m1\e[0m).toLong\n\
    \e[31m\e[31m  |\e[0m            ^^^^\e[0m\n\e[31m  |\e[0m            value +=\
    \ is not a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp81i5u3oo.scala:11:23 --------------------\e[0m\e[0m\n\e[31m11\
    \ |\e[0m        \e[33mfor\e[0m (i <- \e[31m1\e[0m to n - \e[31m1\e[0m) {\n\e[31m\e\
    [31m   |\e[0m                       ^^^^^\e[0m\n\e[31m   |\e[0m              \
    \         Found:    Long\n\e[31m   |\e[0m                       Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp81i5u3oo.scala:12:14\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m            c += (pow(\e\
    [31m10\e[0m, i - \e[31m1\e[0m).toLong) * \e[31m9\e[0m * pow(\e[31m10\e[0m, n -\
    \ i - \e[31m1\e[0m).toLong\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m\
    \   |\e[0m            value += is not a member of Int - did you mean Int.!=?\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659976099
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 1\n        val power = (n - 1)\
    \ * (n - 1)\n        val tens = pow(10, n - 1).toLong\n        val numerator =\
    \ (power + 1) * (power + 1)\n        val denominator = 100 * power\n        return\
    \ numerator / denominator * tens\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n\
    \    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l)) ==\
    \ (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4bfmui33.scala:16)\n\tat Problem.main(tmp4bfmui33.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659976100
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        var ans = pow(10, n - 1).toLong\n        ans *= 8\n\
    \        ans\n    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpa2iszbmf.scala:12)\n\tat Problem.main(tmpa2iszbmf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659976099
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n      val cache = new Memoize[Int, Long]\n      def f(n :\
    \ Int) : Long = {\n        if (n == 1) return 2\n        cache.getOrElseUpdate(n,\
    \ f(n - 1) + pow(10, n - 1).toLong)\n      }\n      f(n.toInt)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n  \
    \  assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n\
    \    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l)) ==\
    \ (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp91z542oh.scala:7:22 -------------------------\e\
    [0m\e[0m\n\e[31m7 |\e[0m      \e[33mval\e[0m \e[36mcache\e[0m = \e[33mnew\e[0m\
    \ \e[35mMemoize\e[0m[\e[35mInt\e[0m, \e[35mLong\e[0m]\n\e[31m\e[31m  |\e[0m  \
    \                    ^^^^^^^\e[0m\n\e[31m  |\e[0m                      Not found:\
    \ type Memoize\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659976095
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 10\n        var count = 10\n  \
    \      var d = n - 1\n        while (d > 0) {\n            if (d == 1) count +=\
    \ 9 else count += pow(10, d - 1).toLong * 9\n            d -= 1\n        }\n \
    \       count\n    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmppnl5uond.scala:11:46 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m            \e[33mif\e[0m (d == \e[31m1\e[0m) count +=\
    \ \e[31m9\e[0m \e[33melse\e[0m count += pow(\e[31m10\e[0m, d - \e[31m1\e[0m).toLong\
    \ * \e[31m9\e[0m\n\e[31m\e[31m   |\e[0m                                      \
    \  ^^^^^^^^\e[0m\n\e[31m   |\e[0m                  value += is not a member of\
    \ Int - did you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659976099
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        val startOneMap = Map(0 -> 1, 1 -> 1, 2 -> 1, 3 ->\
    \ 1, 4 -> 1, 5 -> 1, 6 -> 1, 7 -> 1, 8 -> 1, 9 -> 1)\n        val startOtherMap\
    \ = Map(0 -> 0, 1 -> 1, 2 -> 1, 3 -> 1, 4 -> 1, 5 -> 1, 6 -> 1, 7 -> 1, 8 -> 1,\
    \ 9 -> 1)\n        def iter(currentN : Long, startOne : Map[Long, Long], startOther\
    \ : Map[Long, Long]) : Map[Long, Long] = {\n            if (currentN == n) startOne\n\
    \            else {\n                iter(currentN + 1, \n                   \
    \ ((0 to 9).map(x => startOne.getOrElse(x, 0L)) ++ (0 to 9).map(x => startOther.getOrElse(x,\
    \ 0L))).zipWithIndex.map(x => (x._2.toLong, x._1)).toMap,\n                  \
    \  ((0 to 9).map(x => if (x == 0) startOne.getOrElse(x, 0L) else startOther.getOrElse(x,\
    \ 0L)) ++ (0 to 9).map(x => startOne.getOrElse(x, 0L))).zipWithIndex.map(x =>\
    \ (x._2.toLong, x._1)).toMap)\n            }\n        }\n        iter(1, startOneMap,\
    \ startOtherMap).values.sum\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n\
    \    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l)) ==\
    \ (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprztut82y.scala:13:20\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m                    ((\e[31m0\e\
    [0m to \e[31m9\e[0m).map(\e[36mx\e[0m => startOne.getOrElse(x, \e[31m0L\e[0m))\
    \ ++ (\e[31m0\e[0m to \e[31m9\e[0m).map(\e[36mx\e[0m => startOther.getOrElse(x,\
    \ \e[31m0L\e[0m))).zipWithIndex.map(\e[36mx\e[0m => (x._2.toLong, x._1)).toMap,\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Found:    Map[Long, Long]\n\e[31m   |\e\
    [0m                    Required: \e[1m\e[32mcollection\e[0m\e[1m\e[32m.\e[0m\e\
    [1m\e[32mmutable\e[0m\e[1m\e[32m.\e[0mMap[Long, Long]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmprztut82y.scala:14:20 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m                    ((\e[31m0\e[0m to \e[31m9\e[0m).map(\e\
    [36mx\e[0m => \e[33mif\e[0m (x == \e[31m0\e[0m) startOne.getOrElse(x, \e[31m0L\e\
    [0m) \e[33melse\e[0m startOther.getOrElse(x, \e[31m0L\e[0m)) ++ (\e[31m0\e[0m\
    \ to \e[31m9\e[0m).map(\e[36mx\e[0m => startOne.getOrElse(x, \e[31m0L\e[0m))).zipWithIndex.map(\e\
    [36mx\e[0m => (x._2.toLong, x._1)).toMap)\n\e[31m\e[31m   |\e[0m             \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Found:    Map[Long, Long]\n\e[31m   |\e\
    [0m                    Required: \e[1m\e[32mcollection\e[0m\e[1m\e[32m.\e[0m\e\
    [1m\e[32mmutable\e[0m\e[1m\e[32m.\e[0mMap[Long, Long]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmprztut82y.scala:17:16 --------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        iter(\e[31m1\e[0m, startOneMap, startOtherMap).values.sum\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \ Found:    \e[1m\e[31m(\e[0m\e[1m\e"
  stdout: ''
  timestamp: 1659976100
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        var count = 0L\n        for (i <- 1 to 9) {\n    \
    \        count += (1L to n - 1).map(j => j).foldLeft(1L)((product, i) => product\
    \ * 9)\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n\
    \    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l)) ==\
    \ (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp84ta19dm.scala:14)\n\tat Problem.main(tmp84ta19dm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659976101
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 2\n        if (n == 2) return 8\n\
    \        if (n == 3) return 24\n        if (n == 4) return 76\n        if (n ==\
    \ 5) return 236\n        if (n == 6) return 736\n        if (n == 7) return 2308\n\
    \        if (n == 8) return 7284\n        if (n == 9) return 23060\n        var\
    \ last = 23060\n        var lastlast = 7284\n        for (i <- 10 to n.toInt)\
    \ {\n            val next = last * 10 + lastlast * 9\n            lastlast = last\n\
    \            last = next\n        }\n        last\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l))\
    \ == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l))\
    \ == (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2hv2uf8j.scala:26)\n\tat Problem.main(tmp2hv2uf8j.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659976101
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        val x = Array.fill(10, n + 1)(0)\n        for (i <-\
    \ 1 to 9) x(i)(1) = 1\n        for (i <- 2 to n) {\n            for (j <- 1 to\
    \ 9) {\n                for (k <- 0 to 9) x(j)(i) += x(k)(i - 1)\n           \
    \ }\n        }\n        x.map(_.last).sum - x(0).last\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l))\
    \ == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l))\
    \ == (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8bhcab4r.scala:7:31\
    \ ---------------------\e[0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mx\e\
    [0m = Array.fill(\e[31m10\e[0m, n + \e[31m1\e[0m)(\e[31m0\e[0m)\n\e[31m\e[31m\
    \  |\e[0m                               ^^^^^\e[0m\n\e[31m  |\e[0m           \
    \                    Found:    Long\n\e[31m  |\e[0m                          \
    \     Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8bhcab4r.scala:9:23\
    \ ---------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m2\e[0m to n) {\n\e[31m\e[31m  |\e[0m                       ^\e[0m\n\e\
    [31m  |\e[0m                       Found:    (n : Long)\n\e[31m  |\e[0m      \
    \                 Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659976101
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n     \
    \   dp(1)(0) = 0\n        dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n  \
    \          dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i\
    \ - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n  \
    \  assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n\
    \    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l)) ==\
    \ (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjwkapyk9.scala:18)\n\tat Problem.main(tmpjwkapyk9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659976101
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 2\n        val mod : Long = pow(10,\
    \ 9).toLong + 7\n        var result : Long = 0\n        val dp : Array[Array[Long]]\
    \ = Array.ofDim[Long](n.toInt + 1, 2)\n        dp(1)(0) = 1\n        dp(1)(1)\
    \ = 1\n        for (i <- 2 to n.toInt) {\n            dp(i)(0) = (dp(i - 1)(0)\
    \ + dp(i - 1)(1)) % mod\n            dp(i)(1) = dp(i - 1)(0)\n        }\n    \
    \    for (i <- 0 to 1) result = (result + dp(n.toInt)(i)) % mod\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzqoh0bt3.scala:21)\n\tat Problem.main(tmpzqoh0bt3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659976101
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        var ways = 0\n        for (i <- 1 to n) ways += pow(9,\
    \ i).toLong - pow(8, i).toLong\n        ways\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l))\
    \ == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l))\
    \ == (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnl0kiib2.scala:8:23\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m1\e[0m to n) ways += pow(\e[31m9\e[0m, i).toLong - pow(\e[31m8\e[0m, i).toLong\n\
    \e[31m\e[31m  |\e[0m                       ^\e[0m\n\e[31m  |\e[0m            \
    \           Found:    (n : Long)\n\e[31m  |\e[0m                       Required:\
    \ Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnl0kiib2.scala:8:31\
    \ -------------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mfor\e[0m (i\
    \ <- \e[31m1\e[0m to n) ways += pow(\e[31m9\e[0m, i).toLong - pow(\e[31m8\e[0m,\
    \ i).toLong\n\e[31m\e[31m  |\e[0m                          ^^^^^^^\e[0m\n\e[31m\
    \  |\e[0m                    value += is not a member of Int - did you mean Int.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659976101
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 9\n        10 * (pow(10, n - 1).toLong\
    \ - 1) + (startsOneEnds(n - 1) + pow(10, n - 1).toLong)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l))\
    \ == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l))\
    \ == (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphwlgqa5q.scala:11)\n\tat Problem.main(tmphwlgqa5q.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659976101
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        val b = pow(10, n - 1).toLong\n        val e = pow(10,\
    \ n).toLong\n        val count = (b until e).filter(x => {\n            val s\
    \ = x.toString\n            (s.charAt(0) == '1' || s.charAt(s.length - 1) == '1')\n\
    \        }).length\n        count\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l))\
    \ == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l))\
    \ == (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659976102
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        val dp : Array[Array[Long]] = Array.ofDim[Long](n.toInt\
    \ + 1, 2)\n        dp(1)(0) = 0\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n.toInt) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n           \
    \ dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpd4rxccsb.scala:18)\n\tat Problem.main(tmpd4rxccsb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659976103
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        // A possible solution is:\n        // Consider the\
    \ cases of n = 0, 1, 2, 3...\n        // 1, 10, 101, 1010, 10101, 101010, 1010101,\
    \ 10101010, ...\n        // 1, 11, 111, 1111, 11111, 111111, 1111111, 11111111,\
    \ ...\n        // 1, 20, 201, 2010, 20101, 201010, 2010101, 20101010, ...\n  \
    \      // 1, 21, 211, 2111, 21111, 21111, 211111, 2111111, ...\n        // 1,\
    \ 30, 301, 3010, 30101, 301010, 3010101, 30101010, ...\n        // 1, 31, 311,\
    \ 3111, 31111, 311111, 3111111, 31111111, ...\n        // 1, 40, 401, 4010, 40101,\
    \ 401010, 4010101, 40101010, ...\n        // 1, 41, 411, 4111, 41111, 411111,\
    \ 4111111, 41111111, ...\n        // 1, 50, 501, 5010, 50101, 501010, 5010101,\
    \ 50101010, ...\n        // 1, 51, 511, 5111, 51111, 511111, 5111111, 51111111,\
    \ ...\n        // 1, 60, 601, 6010, 60101, 601010, 6010101, 60101010, ...\n  \
    \      // 1, 61, 611, 6111, 61111, 611111, 6111111, 61111111, ...\n        //\
    \ 1, 70, 701, 7010, 70101, 701010, 7010101, 70101010, ...\n        // 1, 71, 711,\
    \ 7111, 71111, 711111, 7111111, 71111111, ...\n        // 1, 80, 801, 8010, 80101,\
    \ 801010, 8010101, 80101010, ...\n        // 1, 81, 811, 8111, 81111, 811111,\
    \ 8111111, 81111111, ...\n        // 1, 90, 901, 9010, 90101, 901010, 9010101,\
    \ 90101010, ...\n        // 1, 91, 911, 9111, 91111\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l))\
    \ == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l))\
    \ == (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcmbxndy9.scala:6:41\
    \ ---------------------\e[0m\e[0m\n\e[31m 6 |\e[0m    \e[33mdef\e[0m \e[36mstartsOneEnds\e\
    [0m(\e[36mn\e[0m : \e[35mLong\e[0m) : \e[35mLong\e[0m = {\n\e[31m\e[31m   |\e\
    [0m                                         ^\e[0m\n\e[31m   |\e[0m          \
    \                               Found:    Unit\n\e[31m   |\e[0m              \
    \                           Required: Long\n\e[31m 7 |\e[0m        \e[34m// A\
    \ possible solution is:\e[0m\n\e[31m 8 |\e[0m        \e[34m// Consider the cases\
    \ of n = 0, 1, 2, 3...\e[0m\n\e[31m 9 |\e[0m        \e[34m// 1, 10, 101, 1010,\
    \ 10101, 101010, 1010101, 10101010, ...\e[0m\n\e[31m10 |\e[0m        \e[34m//\
    \ 1, 11, 111, 1111, 11111, 111111, 1111111, 11111111, ...\e[0m\n\e[31m11 |\e[0m\
    \        \e[34m// 1, 20, 201, 2010, 20101, 201010, 2010101, 20101010, ...\e[0m\n\
    \e[31m12 |\e[0m        \e[34m// 1, 21, 211, 2111, 21111, 21111, 211111, 2111111,\
    \ ...\e[0m\n\e[31m13 |\e[0m        \e[34m// 1, 30, 301, 3010, 30101, 301010, 3010101,\
    \ 30101010, ...\e[0m\n\e[31m14 |\e[0m        \e[34m// 1, 31, 311, 3111, 31111,\
    \ 311111, 3111111, 31111111, ...\e[0m\n\e[31m15 |\e[0m        \e[34m// 1, 40,\
    \ 401, 4010, 40101, 401010, 4010101, 40101010, ...\e[0m\n\e[31m16 |\e[0m     \
    \   \e[34m// 1, 41, 411, 4111, 41111, 411111, 4111111, 41111111, ...\e[0m\n\e\
    [31m17 |\e[0m        \e[34m// 1, 50, 501, 5010, 50101, 501010, 5010101, 50101010,\
    \ ...\e[0m\n\e[31m18 |\e[0m        \e[34m// 1, 51, 511, 5111, 51111, 511111, 5111111,\
    \ 51111111, ...\e[0m\n\e[31m19 |\e[0m        \e[34m// 1, 60, 601, 6010, 60101,\
    \ 601010, 6010101, 60101010, ...\e[0m\n\e[31m20 |\e[0m        \e[34m// 1, 61,\
    \ 611, 6111, 61111, 611111, 6111111, 61111111, ...\e[0m\n\e[31m21 |\e[0m     \
    \   \e[34m// 1, 70, 701, 7010, 70101, 701010, 7010101, 70101010, ...\e[0m\n\e\
    [31m22 |\e[0m        \e[34m// 1, 71, 711, 7111, 71111, 711111, 7111111, 71111111,\
    \ ...\e[0m\n\e[31m23 |\e[0m        \e[34m// 1, 80, 801, 8010, 80101, 801010, 8010101,\
    \ 80101010, ...\e[0m\n\e[31m24 |\e[0m        \e[34m// 1, 81, 811, 8111, 81111,\
    \ 811111, 8111111, 81111111, ...\e[0m\n\e[31m25 |\e[0m        \e[34m// 1, 90,\
    \ 901, 9010, 90101, 901010, 9010101, 90101010, ...\e[0m\n\e[31m"
  stdout: ''
  timestamp: 1659976104
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 10\n        val dp = Array.ofDim[Long](n\
    \ + 1, 2)\n        dp(1)(0) = 9\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n) {\n            dp(i)(0) = dp(i - 1)(0) * 9 + dp(i - 1)(1)\n            dp(i)(1)\
    \ = dp(i - 1)(0)\n        }\n        dp(n)(0) + dp(n)(1)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l))\
    \ == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l))\
    \ == (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdug5oh9l.scala:8:35\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdp\e\
    [0m = Array.ofDim[\e[35mLong\e[0m](n + \e[31m1\e[0m, \e[31m2\e[0m)\n\e[31m\e[31m\
    \  |\e[0m                                   ^^^^^\e[0m\n\e[31m  |\e[0m       \
    \                            Found:    Long\n\e[31m  |\e[0m                  \
    \                 Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpdug5oh9l.scala:11:23 --------------------\e[0m\e[0m\n\e[31m11\
    \ |\e[0m        \e[33mfor\e[0m (i <- \e[31m2\e[0m to n) {\n\e[31m\e[31m   |\e\
    [0m                       ^\e[0m\n\e[31m   |\e[0m                       Found:\
    \    (n : Long)\n\e[31m   |\e[0m                       Required: Int\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdug5oh9l.scala:15:11 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        dp(n)(\e[31m0\e[0m) + dp(n)(\e[31m1\e[0m)\n\e\
    [31m\e[31m   |\e[0m           ^\e[0m\n\e[31m   |\e[0m           Found:    (n :\
    \ Long)\n\e[31m   |\e[0m           Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpdug5oh9l.scala:15:22 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        dp(n)(\e[31m0\e[0m) + dp(n)(\e[31m1\e[0m)\n\e\
    [31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m             \
    \         Found:    (n : Long)\n\e[31m   |\e[0m                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659976099
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1)\n            return 1\n        else {\n\
    \            val k = (n + 1) / 2\n            return pow(10, k - 1).toLong\n \
    \       }\n    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp972lu5yt.scala:16)\n\tat Problem.main(tmp972lu5yt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659976105
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n     \
    \   dp(1)(0) = 0\n        dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n  \
    \          dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i\
    \ - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n  \
    \  assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n\
    \    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l)) ==\
    \ (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjwkapyk9.scala:18)\n\tat Problem.main(tmpjwkapyk9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659976101
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        def f(x : Long) : Long = {\n            if (x == 0)\
    \ 0\n            else {\n                val temp = f(x - 1)\n               \
    \ val pow = pow(10, x - 1).toLong\n                (10 - x + 1) * pow + temp *\
    \ (10 - x)\n            }\n        }\n        val pow = pow(10, n - 1).toLong\n\
    \        2 * pow - 1 + f(n)\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n\
    \    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l)) ==\
    \ (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpk81y2es3.scala:11:26 ---------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m                \e[33mval\e[0m \e[36mpow\e[0m = pow(\e\
    [31m10\e[0m, x - \e[31m1\e[0m).toLong\n\e[31m\e[31m   |\e[0m                 \
    \         ^\e[0m\n\e[31m   |\e[0m                          Recursive \e[33mvalue\e\
    [0m \e[35mpow\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpk81y2es3.scala:15:18 ---------------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m        \e[33mval\e[0m \e[36mpow\e[0m = pow(\e[31m10\e[0m, n - \e[31m1\e\
    [0m).toLong\n\e[31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m  \
    \                Recursive \e[33mvalue\e[0m \e[35mpow\e[0m needs type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659976103
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n     \
    \   dp(1)(0) = 9\n        dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n  \
    \          dp(i)(0) = 10 * dp(i - 1)(0) - dp(i - 1)(1)\n            dp(i)(1) =\
    \ dp(i - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n\
    \    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l)) ==\
    \ (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnt4zr64q.scala:17)\n\tat Problem.main(tmpnt4zr64q.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659976109
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        val N = n.toInt\n        val (counts, ends) = Array.fill(2,\
    \ N + 1)(0L)\n        counts(0) = 1\n        for (i <- 1 to N) {\n           \
    \ for (j <- 1 to 9) {\n                counts(1) += counts(0)\n              \
    \  ends(1) += ends(0)\n            }\n            for (j <- 0 to 9) {\n      \
    \          counts(0) += ends(j)\n                ends(j) = counts(j)\n       \
    \     }\n        }\n        counts(1) + counts(0)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l))\
    \ == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l))\
    \ == (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvq9h8tdh.scala:9:8 --------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m        counts(\e[31m0\e[0m) = \e[31m1\e[0m\n\e[31m\e\
    [31m  |\e[0m        ^^^^^^\e[0m\n\e[31m  |\e[0m        value update is not a member\
    \ of Any\n\e[31m\e[31m-- [E050] Type Error: /tmp/tmpvq9h8tdh.scala:12:16 -----------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m                counts(\e[31m1\e[0m) += counts(\e[31m0\e\
    [0m)\n\e[31m\e[31m   |\e[0m                ^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \          \e[33mvalue\e[0m \e[35mcounts\e[0m does not take parameters\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E050] Type Error: /tmp/tmpvq9h8tdh.scala:13:16 -----------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m                ends(\e[31m1\e[0m) += ends(\e[31m0\e\
    [0m)\n\e[31m\e[31m   |\e[0m                ^^^^\e[0m\n\e[31m   |\e[0m        \
    \        \e[33mvalue\e[0m \e[35mends\e[0m does not take parameters\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E050] Type Error: /tmp/tmpvq9h8tdh.scala:16:16 -----------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                counts(\e[31m0\e[0m) += ends(j)\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^\e[0m\n\e[31m   |\e[0m                \e[33mvalue\e\
    [0m \e[35mcounts\e[0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpvq9h8tdh.scala:17:16 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                ends(j) = counts(j)\n\e[31m\e[31m   |\e\
    [0m                ^^^^\e[0m\n\e[31m   |\e[0m                value update is not\
    \ a member of Any\n\e[31m\e[31m-- [E050] Type Error: /tmp/tmpvq9h8tdh.scala:17:26\
    \ -----------------------------\e[0m\e[0m\n\e[31m17 |\e[0m                ends(j)\
    \ = counts(j)\n\e[31m\e[31m   |\e[0m                          ^^^^^^\e[0m\n\e\
    [31m   |\e[0m                          \e[33mvalue\e[0m \e[35mcounts\e[0m does\
    \ not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E050] T"
  stdout: ''
  timestamp: 1659976108
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        var digits = List[Int]()\n        var a = n\n    \
    \    while (a > 0) {\n            digits = (a % 10).toInt :: digits\n        \
    \    a /= 10\n        }\n        if (digits.length == 1) return 1\n        var\
    \ endsOne = digits.last == 1\n        var count = 0\n        for (i <- digits.length\
    \ - 2 to 0 by -1) {\n            if (digits(i) == 1) count += pow(9, i).toLong\n\
    \            else count += 9 * pow(9, i).toLong\n        }\n        if (endsOne)\
    \ return count + 1\n        return count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l))\
    \ == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l))\
    \ == (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmppv7vn6rm.scala:17:38 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mif\e[0m (digits(i) == \e[31m1\e[0m)\
    \ count += pow(\e[31m9\e[0m, i).toLong\n\e[31m\e[31m   |\e[0m                \
    \                ^^^^^^^^\e[0m\n\e[31m   |\e[0m                  value += is not\
    \ a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmppv7vn6rm.scala:18:23 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m            \e[33melse\e[0m count += \e[31m9\e[0m * pow(\e[31m9\e[0m, i).toLong\n\
    \e[31m\e[31m   |\e[0m                 ^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \        value += is not a member of Int - did you mean Int.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659976109
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n <= 2) return 0\n        var total = 1L\n   \
    \     for (i <- 1 to n - 2) total *= 10\n        total *= 2\n        total\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l)) ==\
    \ (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkgz8ub86.scala:9:23\
    \ ---------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m1\e[0m to n - \e[31m2\e[0m) total *= \e[31m10\e[0m\n\e[31m\e[31m  |\e\
    [0m                       ^^^^^\e[0m\n\e[31m  |\e[0m                       Found:\
    \    Long\n\e[31m  |\e[0m                       Required: Int\n\e[31m  |\e[0m\n\
    \e[31m  |\e[0m longer explanation available when compiling with `-explain`\n1\
    \ error found\n"
  stdout: ''
  timestamp: 1659976109
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n      if (n == 1) 1\n      else (1 to (n - 1).toInt).map(1\
    \ * pow(10, _).toLong).sum + pow(10, n - 1).toLong\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l))\
    \ == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l))\
    \ == (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2mummud4.scala:12)\n\tat Problem.main(tmp2mummud4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659976111
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 10\n        if (n == 2) return\
    \ 55\n        // If we have n digits and start with 1, then the rest of the n-1\
    \ digits\n        // can be chosen in 9*9^(n-2) ways, and the first digit can\
    \ be either 0 or\n        // 1, for a total of 10*9^(n-2) ways.\n        // If\
    \ we have n digits and end with 1, then the rest of the n-1 digits can\n     \
    \   // be chosen in 9*9^(n-2) ways, and the last digit can be either 0 or 1,\n\
    \        // for a total of 10*9^(n-2) ways.\n        // So we have 20*9^(n-2)\
    \ = 2*10*9^(n-2) ways.\n        2 * 10 * pow(9, n - 2).toLong\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n  \
    \  assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n\
    \    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l)) ==\
    \ (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpk6hdzrsj.scala:19)\n\tat Problem.main(tmpk6hdzrsj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659976109
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n <= 2)\n            return n\n        // The\
    \ key observation is that the results can be categorized into two\n        //\
    \ categories:\n        // (1) The number is composed of two parts, the first part\
    \ is a number\n        //     with one digit less than n and the second part is\
    \ a digit. This\n        //     category has a number of `pow(9, n - 1) * 9`.\n\
    \        // (2) The number is composed of two parts, the first part is a number\n\
    \        //     with one digit less than n and the second part is not a digit.\n\
    \        //     This category has a number of `pow(9, n - 1) * 8`.\n        //\
    \ (3) The number is composed of one part, which has a number of\n        //  \
    \   `pow(9, n - 1)`.\n        pow(9, n - 1) * 9 + pow(9, n - 1) * 8 + pow(9, n\
    \ - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpob0uhr98.scala:19:8\
    \ ---------------------\e[0m\e[0m\n\e[31m19 |\e[0m        pow(\e[31m9\e[0m, n\
    \ - \e[31m1\e[0m) * \e[31m9\e[0m + pow(\e[31m9\e[0m, n - \e[31m1\e[0m) * \e[31m8\e\
    [0m + pow(\e[31m9\e[0m, n - \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    Double\n\e[31m   |\e[0m        Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659976109
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        val limit = (\"1\" + \"0\" * (n - 1)).toLong;\n  \
    \      def count(m : Long) : Long = {\n            if (m < 10) 1\n           \
    \ else 10 * count(m / 10)\n        }\n        val res = (1 to limit.toString.length\
    \ - 1).map(x => (1 + pow(10, x) - 1).toLong).sum + 1 + count(limit)\n        res\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpk7nx2c2h.scala:7:34\
    \ ---------------------\e[0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36mlimit\e\
    [0m = (\e[31m\"1\"\e[0m + \e[31m\"0\"\e[0m * (n - \e[31m1\e[0m)).toLong;\n\e[31m\e\
    [31m  |\e[0m                                  ^^^^^\e[0m\n\e[31m  |\e[0m     \
    \                             Found:    Long\n\e[31m  |\e[0m                 \
    \                 Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659976110
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 2\n        var ans = pow(2, n -\
    \ 1).toLong\n        ans *= ans\n        ans /= 2\n        ans *= 2\n        ans\
    \ -= 1\n        ans\n    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp466jbncw.scala:16)\n\tat Problem.main(tmp466jbncw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659976110
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 2\n        val ones = 2 + pow(10,\
    \ n - 1).toLong\n        return ones + ones - 1 + startsOneEnds(n - 1)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n\
    \    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l)) ==\
    \ (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmcn52ln8.scala:12)\n\tat Problem.main(tmpmcn52ln8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659976110
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        // A number ending in 1 must be one less than a power\
    \ of 10, so we\n        // begin there. There will be no more than log10(n) numbers\
    \ of this\n        // form.\n        var i = 0\n        var result = 0\n     \
    \   var p = 1\n        while (p <= n) {\n            p *= 10\n            i +=\
    \ 1\n        }\n        result += i\n        // Next we consider numbers of the\
    \ form 1x1x1x...x1, where x is any\n        // digit.\n        result += (n -\
    \ 1).toInt\n        // Finally, we consider numbers of the form nx, where n and\
    \ x have a\n        // common length, and n > x.\n        var nextLength = 0\n\
    \        var currentLength = i\n        while (nextLength < currentLength) {\n\
    \            nextLength = floor(log10(n)).toInt\n            result += min(n,\
    \ 10).toInt * (currentLength - nextLength)\n            n /= 10\n            currentLength\
    \ = nextLength\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l))\
    \ == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l))\
    \ == (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpp250xz3u.scala:28:14 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m            n /= \e[31m10\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value /= is not a member of\
    \ Long - did you mean n.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659976111
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n      if (n == 1) return 2\n      val start1 = (1 to (n -\
    \ 1)).map(i => pow(10, i).toLong).sum\n      val end1 = start1\n      return start1\
    \ + end1\n    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpw9kzxgcs.scala:8:26\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m      \e[33mval\e[0m \e[36mstart1\e\
    [0m = (\e[31m1\e[0m to (n - \e[31m1\e[0m)).map(\e[36mi\e[0m => pow(\e[31m10\e\
    [0m, i).toLong).sum\n\e[31m\e[31m  |\e[0m                          ^^^^^\e[0m\n\
    \e[31m  |\e[0m                          Found:    Long\n\e[31m  |\e[0m       \
    \                   Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659976111
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        var s = 0L\n        for (i <- 1 to n) {\n        \
    \    s += pow(10, i - 1).toLong\n        }\n        s\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l))\
    \ == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l))\
    \ == (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvvek_b9a.scala:8:23\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m1\e[0m to n) {\n\e[31m\e[31m  |\e[0m                       ^\e[0m\n\e\
    [31m  |\e[0m                       Found:    (n : Long)\n\e[31m  |\e[0m      \
    \                 Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659976111
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 2\n        var sum = 0L\n     \
    \   for (i <- 1 to 9) {\n            val k = pow(10, n - 1).toLong\n         \
    \   sum += (k - 1) * 10 + i\n        }\n        sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l))\
    \ == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l))\
    \ == (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphjfvnx1b.scala:16)\n\tat Problem.main(tmphjfvnx1b.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659976112
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        val startOne = Array.fill(n.toInt + 1)(1L)\n     \
    \   val endOne = Array.fill(n.toInt + 1)(1L)\n        for (i <- 2 to n.toInt)\
    \ {\n            startOne(i) = 10 * startOne(i - 1)\n            endOne(i) = 9\
    \ * endOne(i - 1) + startOne(i - 1)\n        }\n        startOne(n.toInt) + endOne(n.toInt)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpksfs5flk.scala:16)\n\tat Problem.main(tmpksfs5flk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659976113
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) 1\n        else {\n            val first\
    \ = 9 * power(10, n - 2)\n            val second = power(10, n - 1)\n        \
    \    first + second\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n\
    \    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l)) ==\
    \ (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpd47c7xvl.scala:9:28 -------------------------\e\
    [0m\e[0m\n\e[31m9 |\e[0m            \e[33mval\e[0m \e[36mfirst\e[0m = \e[31m9\e\
    [0m * power(\e[31m10\e[0m, n - \e[31m2\e[0m)\n\e[31m\e[31m  |\e[0m           \
    \                 ^^^^^\e[0m\n\e[31m  |\e[0m                            Not found:\
    \ power\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpd47c7xvl.scala:10:25\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m            \e[33mval\e[0m\
    \ \e[36msecond\e[0m = power(\e[31m10\e[0m, n - \e[31m1\e[0m)\n\e[31m\e[31m   |\e\
    [0m                         ^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \   Not found: power\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659976107
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 1\n        if (n % 2 == 0) {\n\
    \            val l = n / 2\n            return 10 * (1 to l).map(i => pow(2, i\
    \ - 1).toLong).reduceLeft(_ + _)\n        } else {\n            val l = n / 2\n\
    \            return 10 * 10 * (1 to l).map(i => pow(2, i - 1).toLong).reduceLeft(_\
    \ + _)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5sbxzsrh.scala:10:30\
    \ --------------------\e[0m\e[0m\n\e[31m10 |\e[0m            \e[33mreturn\e[0m\
    \ \e[31m10\e[0m * (\e[31m1\e[0m to l).map(\e[36mi\e[0m => pow(\e[31m2\e[0m, i\
    \ - \e[31m1\e[0m).toLong).reduceLeft(_ + _)\n\e[31m\e[31m   |\e[0m           \
    \                   ^\e[0m\n\e[31m   |\e[0m                              Found:\
    \    (l : Long)\n\e[31m   |\e[0m                              Required: Int\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5sbxzsrh.scala:13:35\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m            \e[33mreturn\e[0m\
    \ \e[31m10\e[0m * \e[31m10\e[0m * (\e[31m1\e[0m to l).map(\e[36mi\e[0m => pow(\e\
    [31m2\e[0m, i - \e[31m1\e[0m).toLong).reduceLeft(_ + _)\n\e[31m\e[31m   |\e[0m\
    \                                   ^\e[0m\n\e[31m   |\e[0m                  \
    \                 Found:    (l : Long)\n\e[31m   |\e[0m                      \
    \             Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659976112
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1)\n            return 10\n        var count\
    \ = 9\n        var i = 0\n        while (i < n - 1) {\n            count = (count\
    \ * (9 - i)) % 1000000007\n            i += 1\n        }\n        count\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n\
    \    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l)) ==\
    \ (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1y4y2g77.scala:18)\n\tat Problem.main(tmp1y4y2g77.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659976112
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        var total = 0L\n        var cn = n\n        while\
    \ (cn > 0) {\n            val counts = getCounts(cn)\n            if (counts.isDefined)\
    \ {\n                val (startOne, endOne) = counts.get\n                total\
    \ += startOne + endOne\n            }\n            cn -= 1\n        }\n      \
    \  total\n    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyienc_11.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m            \e[33mval\e[0m \e[36mcounts\e[0m = getCounts(cn)\n\
    \e[31m\e[31m   |\e[0m                         ^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                         Not found: getCounts\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpyienc_11.scala:12:21 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m                \e[33mval\e[0m (startOne, endOne) = counts.get\n\
    \e[31m\e[31m   |\e[0m                     ^\e[0m\n\e[31m   |\e[0m            \
    \         Recursive \e[33mvalue\e[0m \e[35m$1$\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E045] Cyclic Error: /tmp/tmpyienc_11.scala:12:31 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m                \e[33mval\e[0m (startOne, endOne) = counts.get\n\
    \e[31m\e[31m   |\e[0m                               ^\e[0m\n\e[31m   |\e[0m  \
    \                             Recursive \e[33mvalue\e[0m \e[35m$1$\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659976110
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) 1\n        else {\n            val base\
    \ = pow(10, n - 1).toLong\n            val end = pow(10, n - 2).toLong\n     \
    \       base - end\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n\
    \    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l)) ==\
    \ (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfanepk0e.scala:16)\n\tat Problem.main(tmpfanepk0e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659976114
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        val digitCounts = Array.fill(10)(0)\n        val queue\
    \ = Array.fill(10)(new Queue[Long])\n        var result = 0L\n        var nBase10\
    \ = n\n        while (nBase10 > 0) {\n            digitCounts(nBase10 % 10) +=\
    \ 1\n            nBase10 /= 10\n        }\n        // start or end with 1\n  \
    \      digitCounts(1) -= 1\n        for (i <- 0 until 10) {\n            for (j\
    \ <- 0 until digitCounts(i)) {\n                queue(i).enqueue(i)\n        \
    \    }\n        }\n        while (queue(1).length > 0) {\n            val cur\
    \ = queue(1).dequeue\n            result += 1\n            for (d <- 0 until 10)\
    \ {\n                if (digitCounts(d) > 0) {\n                    digitCounts(d)\
    \ -= 1\n                    queue(d).enqueue(cur * 10 + d)\n                }\n\
    \            }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l))\
    \ == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l))\
    \ == (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0x7scs91.scala:12:24\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m            digitCounts(nBase10\
    \ % \e[31m10\e[0m) += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                    \
    \    ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                        Found:    Long\n\
    \e[31m   |\e[0m                        Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659976114
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 2\n        val dp = Array.ofDim[Long](n\
    \ + 1, 2)\n        dp(1)(0) = 1\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1) * (i - 1)\n       \
    \     dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n)(0) + dp(n)(1)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n\
    \    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l)) ==\
    \ (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmph1bzkvj6.scala:8:35\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdp\e\
    [0m = Array.ofDim[\e[35mLong\e[0m](n + \e[31m1\e[0m, \e[31m2\e[0m)\n\e[31m\e[31m\
    \  |\e[0m                                   ^^^^^\e[0m\n\e[31m  |\e[0m       \
    \                            Found:    Long\n\e[31m  |\e[0m                  \
    \                 Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmph1bzkvj6.scala:11:23 --------------------\e[0m\e[0m\n\e[31m11\
    \ |\e[0m        \e[33mfor\e[0m (i <- \e[31m2\e[0m to n) {\n\e[31m\e[31m   |\e\
    [0m                       ^\e[0m\n\e[31m   |\e[0m                       Found:\
    \    (n : Long)\n\e[31m   |\e[0m                       Required: Int\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmph1bzkvj6.scala:15:11 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        dp(n)(\e[31m0\e[0m) + dp(n)(\e[31m1\e[0m)\n\e\
    [31m\e[31m   |\e[0m           ^\e[0m\n\e[31m   |\e[0m           Found:    (n :\
    \ Long)\n\e[31m   |\e[0m           Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmph1bzkvj6.scala:15:22 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        dp(n)(\e[31m0\e[0m) + dp(n)(\e[31m1\e[0m)\n\e\
    [31m\e[31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m             \
    \         Found:    (n : Long)\n\e[31m   |\e[0m                      Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659976116
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        var count = 0L\n        for (i <- 1 to n) count +=\
    \ pow(10, i - 1).toLong\n        return count * 2 - pow(10, n - 1).toLong\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l)) ==\
    \ (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpksz10bt_.scala:8:23\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m1\e[0m to n) count += pow(\e[31m10\e[0m, i - \e[31m1\e[0m).toLong\n\e\
    [31m\e[31m  |\e[0m                       ^\e[0m\n\e[31m  |\e[0m              \
    \         Found:    (n : Long)\n\e[31m  |\e[0m                       Required:\
    \ Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659976116
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        // number of such integers with ending 1 = number\
    \ of such integers with\n        // starting 1\n        // number of such integers\
    \ with starting 1 = number of such integers with\n        // first digit of 0\
    \ and last digit of 1 (or first digit of 1 and last digit\n        // of 0)\n\
    \        // number of such integers with first digit of 0 and last digit of 1\n\
    \        // = number of such integers with first digit of 0 and any last digit\n\
    \        // (can only be 0 or 1)\n        // = number of such integers with first\
    \ digit of 0 and any last digit\n        // (can only be 0 or 1)\n        // =\
    \ number of such integers with any first digit and any last digit\n        //\
    \ (can only be 0 or 1)\n        // = number of such integers with any first and\
    \ last digit\n        // (can only be 0 or 1) minus number of such integers with\
    \ first and last\n        // digit being 0\n        // = number of such integers\
    \ with any first and last digit (can only be 0\n        // or 1) - 1\n       \
    \ return pow(2, n - 1).toLong - 1\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l))\
    \ == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l))\
    \ == (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3b51ikfh.scala:27)\n\tat Problem.main(tmp3b51ikfh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659976118
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        def digitSum(n : Long) : Long = {\n            if\
    \ (n == 0) return 0\n            var sum = n % 10\n            var nn = n / 10\n\
    \            while (nn > 0) {\n                sum += nn % 10\n              \
    \  nn /= 10\n            }\n            return sum\n        }\n        if (n ==\
    \ 1) return 10\n        var count = 10 + (n - 1) * 9\n        for (first <- 1\
    \ to 9) {\n            var sum = first + digitSum(first)\n            var t =\
    \ sum\n            while (t <= 9 * n) {\n                if (t >= n) count +=\
    \ 1\n                t = sum + t\n            }\n        }\n        return count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmrnptxvj.scala:30)\n\tat Problem.main(tmpmrnptxvj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        val nn = n.toInt\n        val startOnes = (0 until\
    \ nn).foldLeft(0L)((acc, i) => acc + i)\n        val endOnes = (0 until nn).foldLeft(0L)((acc,\
    \ i) => acc + i)\n        startOnes + endOnes\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l))\
    \ == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l))\
    \ == (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4g7mxgf0.scala:13)\n\tat Problem.main(tmp4g7mxgf0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) 1\n        else {\n            val x =\
    \ 9 * pow(10, n - 2).toLong\n            startsOneEnds(n - 1) + x\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgds_zs67.scala:15)\n\tat Problem.main(tmpgds_zs67.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659976120
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n      (1 until n).map(i => 9 * pow(10, i - 1).toLong).sum\
    \ + pow(10, n - 1).toLong\n    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbzs9jtat.scala:7:15\
    \ ---------------------\e[0m\e[0m\n\e[31m7 |\e[0m      (\e[31m1\e[0m until n).map(\e\
    [36mi\e[0m => \e[31m9\e[0m * pow(\e[31m10\e[0m, i - \e[31m1\e[0m).toLong).sum\
    \ + pow(\e[31m10\e[0m, n - \e[31m1\e[0m).toLong\n\e[31m\e[31m  |\e[0m        \
    \       ^\e[0m\n\e[31m  |\e[0m               Found:    (n : Long)\n\e[31m  |\e\
    [0m               Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659976120
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) {\n            1\n        } else {\n \
    \           (0 to 9).map(x => pow(10, n - 1).toLong).sum\n        }\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n\
    \    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l)) ==\
    \ (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp697bix_2.scala:15)\n\tat Problem.main(tmp697bix_2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 2\n        if (n % 2 == 0) return\
    \ startsOneEnds(n / 2) * 10 + 100\n        else return startsOneEnds(n / 2) *\
    \ 10 + 10\n    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3vq94836.scala:12)\n\tat Problem.main(tmp3vq94836.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659976120
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        // The number of numbers that start or end with 1\
    \ is equal to the\n        // number of numbers of length n-1 that don't start\
    \ or end with 1\n        // minus the number of numbers of length n-2 that do\
    \ start or end with 1.\n        startsOneEnds(n-1) - startsOneEnds(n-2)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n\
    \    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l)) ==\
    \ (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat Problem$.startsOneEnds(tmpjs42tazf.scala:10)\n\
    \tat Problem$.startsOneEnds(tmpjs42tazf.scala:10)\n\tat Problem$.startsOneEnds(tmpjs42tazf.scala:10)\n\
    \tat Problem$.startsOneEnds(tmpjs42tazf.scala:10)\n\tat Problem$.startsOneEnds(tmpjs42tazf.scala:10)\n\
    \tat Problem$.startsOneEnds(tmpjs42tazf.scala:10)\n\tat Problem$.startsOneEnds(tmpjs42tazf.scala:10)\n\
    \tat Problem$.startsOneEnds(tmpjs42tazf.scala:10)\n\tat Problem$.startsOneEnds(tmpjs42tazf.scala:10)\n\
    \tat Problem$.startsOneEnds(tmpjs42tazf.scala:10)\n\tat Problem$.startsOneEnds(tmpjs42tazf.scala:10)\n\
    \tat Problem$.startsOneEnds(tmpjs42tazf.scala:10)\n\tat Problem$.startsOneEnds(tmpjs42tazf.scala:10)\n\
    \tat Problem$.startsOneEnds(tmpjs42tazf.scala:10)\n\tat Problem$.startsOneEnds(tmpjs42tazf.scala:10)\n\
    \tat Problem$.startsOneEnds(tmpjs42tazf.scala:10)\n\tat Problem$.startsOneEnds(tmpjs42tazf.scala:10)\n\
    \tat Problem$.startsOneEnds(tmpjs42tazf.scala:10)\n\tat Problem$.startsOneEnds(tmpjs42tazf.scala:10)\n\
    \tat Problem$.startsOneEnds(tmpjs42tazf.scala:10)\n\tat Problem$.startsOneEnds(tmpjs42tazf.scala:10)\n\
    \tat Problem$.startsOneEnds(tmpjs42tazf.scala:10)\n\tat Problem$.startsOneEnds(tmpjs42tazf.scala:10)\n\
    \tat Problem$.startsOneEnds(tmpjs42tazf.scala:10)\n\tat Problem$.startsOneEnds(tmpjs42tazf.scala:10)\n\
    \tat Problem$.startsOneEnds(tmpjs42tazf.scala:10)\n\tat Problem$.startsOneEnds(tmpjs42tazf.scala:10)\n\
    \tat Problem$.startsOneEnds(tmpjs42tazf.scala:10)\n\tat Problem$.startsOneEnds(tmpjs42tazf.scala:10)\n\
    \tat Problem$.startsOneEnds(tmpjs42tazf.scala:10)\n\tat Problem$.startsOneEnds(tmpjs42tazf.scala:10)\n\
    \tat Problem$.startsOneEnds(tmpjs42tazf.scala:10)\n\tat Problem$.startsOneEnds(tmpjs42tazf.scala:10)\n\
    \tat Problem$.startsOneEnds(tmpjs42tazf.scala:10)\n\tat Problem$.startsOneEnds(tmpjs42tazf.scala:10)\n\
    \tat Problem$.startsOneEnds(tmpjs42tazf.scala:10)\n\tat Problem$.startsOneEnds(tmpjs42tazf.scala:10)\n\
    \tat Problem$.startsOneEnds(tmpjs42tazf.scala:10)\n\tat Problem$.startsOneEnds(tmpjs42tazf.scala:10)\n\
    \tat Problem$.startsOneEnds(tmpjs42tazf.scala:10)\n\tat Problem$.startsOneEnds(tmpjs"
  stdout: ''
  timestamp: 1659976120
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 2\n        else {\n           \
    \ val midBit = n - 2\n            val result = (BigInt(10).pow(midBit) - 1) *\
    \ 2 + BigInt(10).pow(midBit)\n            return result.toLong\n        }\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l)) ==\
    \ (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpz71aammp.scala:10:41\
    \ --------------------\e[0m\e[0m\n\e[31m10 |\e[0m            \e[33mval\e[0m \e\
    [36mresult\e[0m = (BigInt(\e[31m10\e[0m).pow(midBit) - \e[31m1\e[0m) * \e[31m2\e\
    [0m + BigInt(\e[31m10\e[0m).pow(midBit)\n\e[31m\e[31m   |\e[0m               \
    \                          ^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \                   Found:    (midBit : Long)\n\e[31m   |\e[0m               \
    \                          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpz71aammp.scala:10:75 --------------------\e[0m\e\
    [0m\n\e[31m10 |\e[0m            \e[33mval\e[0m \e[36mresult\e[0m = (BigInt(\e\
    [31m10\e[0m).pow(midBit) - \e[31m1\e[0m) * \e[31m2\e[0m + BigInt(\e[31m10\e[0m).pow(midBit)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                   ^^^^^^\e[0m\n\e[31m   |\e[0m                             \
    \                  Found:    (midBit : Long)\n\e[31m   |\e[0m                \
    \                               Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 2\n        if (n == 2) return 3\n\
    \        var a = 1L\n        var b = 1L\n        for (i <- 2 to n.toInt) {\n \
    \           val c = a + b\n            a = b\n            b = c\n        }\n \
    \       a * 2 + b\n    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppls0b_im.scala:19)\n\tat Problem.main(tmppls0b_im.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        val l = (0 until n).map(x => pow(10, x).toLong)\n\
    \        def recurse(n : Long) : Long = {\n            if (n == 0) return 0\n\
    \            if (n == 1) return 10 - 2\n            if (n == 2) return 10 - 2\n\
    \            if (n % 2 == 0) return 10 - 2 + (9 * pow(10, n / 2 - 1).toLong)\n\
    \            else return 10 - 2 + (9 * pow(10, n / 2 - 1).toLong) + 9 * recurse(n\
    \ - 1)\n        }\n        recurse(n)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l))\
    \ == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l))\
    \ == (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptbejixes.scala:7:25\
    \ ---------------------\e[0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36ml\e\
    [0m = (\e[31m0\e[0m until n).map(\e[36mx\e[0m => pow(\e[31m10\e[0m, x).toLong)\n\
    \e[31m\e[31m  |\e[0m                         ^\e[0m\n\e[31m  |\e[0m          \
    \               Found:    (n : Long)\n\e[31m  |\e[0m                         Required:\
    \ Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) 1\n        else {\n            val fact\
    \ = List.fill(n.toInt)(9L).product\n            val p = pow(10, n).toLong\n  \
    \          val divisor = pow(10, n - 1).toLong\n            val mod = p % divisor\n\
    \            val sum = (fact * mod) / divisor\n            sum + (p - sum)\n \
    \       }\n    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgh93ijuw.scala:19)\n\tat Problem.main(tmpgh93ijuw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659976123
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) {\n            10\n        } else {\n\
    \            var result = 9 * (10.pow(n - 1) - 10.pow(n - 2))\n            if\
    \ (n % 2 == 0) result += (1 to (n / 2 - 1)).foldLeft(1)((a, b) => a * 10)\n  \
    \          result\n        }\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n\
    \    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l)) ==\
    \ (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpyxwalogz.scala:10:33 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m            \e[33mvar\e[0m \e[36mresult\e[0m = \e[31m9\e\
    [0m * (\e[31m10\e[0m.pow(n - \e[31m1\e[0m) - \e[31m10\e[0m.pow(n - \e[31m2\e[0m))\n\
    \e[31m\e[31m   |\e[0m                              ^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ pow is not a member of Int, but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might fix the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import math.BigDecimal.int2bigDecimal\n\e[31m\
    \   |\e[0m  import math.BigInt.int2bigInt\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1)\n            return 2\n        var result\
    \ = 1L\n        for (i <- 2 to n) {\n            result *= (10 - i + 1)\n    \
    \    }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxv0o9eps.scala:10:23\
    \ --------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m2\e[0m to n) {\n\e[31m\e[31m   |\e[0m                       ^\e[0m\n\e\
    [31m   |\e[0m                       Found:    (n : Long)\n\e[31m   |\e[0m    \
    \                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659976121
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        // The number of n-digit numbers that start with 1\
    \ is\n        // 10^(n-1) - 1. The number of n-digit numbers that end with 1 is\n\
    \        // 9 * 10^(n-1).\n        2 * (pow(10, n) - 1) - 9 * pow(10, n - 1)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcq509wb8.scala:10:8\
    \ ---------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[31m2\e[0m * (pow(\e\
    [31m10\e[0m, n) - \e[31m1\e[0m) - \e[31m9\e[0m * pow(\e[31m10\e[0m, n - \e[31m1\e\
    [0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    Double\n\e[31m   |\e[0m        Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659976122
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 2\n        val endOne = startsOneEnds(n\
    \ - 1)\n        val startOne = (BigInt(10).pow(n - 1) - BigInt(9).pow(n - 1)).toLong\n\
    \        val others = BigInt(10).pow(n).toLong - (startOne + endOne)\n       \
    \ startOne + endOne + others\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n\
    \    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l)) ==\
    \ (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplm2cknvl.scala:9:39\
    \ ---------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mstartOne\e\
    [0m = (BigInt(\e[31m10\e[0m).pow(n - \e[31m1\e[0m) - BigInt(\e[31m9\e[0m).pow(n\
    \ - \e[31m1\e[0m)).toLong\n\e[31m\e[31m  |\e[0m                              \
    \         ^^^^^\e[0m\n\e[31m  |\e[0m                                       Found:\
    \    Long\n\e[31m  |\e[0m                                       Required: Int\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplm2cknvl.scala:9:62\
    \ ---------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mval\e[0m \e[36mstartOne\e\
    [0m = (BigInt(\e[31m10\e[0m).pow(n - \e[31m1\e[0m) - BigInt(\e[31m9\e[0m).pow(n\
    \ - \e[31m1\e[0m)).toLong\n\e[31m\e[31m  |\e[0m                              \
    \                                ^^^^^\e[0m\n\e[31m  |\e[0m                  \
    \                                          Found:    Long\n\e[31m  |\e[0m    \
    \                                                        Required: Int\n\e[31m\
    \  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplm2cknvl.scala:10:36 --------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mothers\e[0m = BigInt(\e\
    [31m10\e[0m).pow(n).toLong - (startOne + endOne)\n\e[31m\e[31m   |\e[0m      \
    \                              ^\e[0m\n\e[31m   |\e[0m                       \
    \             Found:    (n : Long)\n\e[31m   |\e[0m                          \
    \          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659976123
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n      var count = 1L\n      for (i <- 1 to n) {\n        val\
    \ lo = pow(10, i - 1).toLong\n        val hi = pow(10, i).toLong\n        count\
    \ += (hi - lo) * pow(9, n - i).toLong\n      }\n      return count\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n\
    \    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l)) ==\
    \ (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprmwnj10i.scala:8:21\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m      \e[33mfor\e[0m (i <- \e\
    [31m1\e[0m to n) {\n\e[31m\e[31m  |\e[0m                     ^\e[0m\n\e[31m  |\e\
    [0m                     Found:    (n : Long)\n\e[31m  |\e[0m                 \
    \    Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659976123
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        // a number ends with 1 iff it is not divisible by\
    \ 10\n        // a number starts with 1 iff its first digit is 1\n        // a\
    \ number has m digits iff 10^(m-1) <= n < 10^m\n        (for (m <- 1 to n.toString.length)\
    \ yield {\n            val count = pow(2, m - 1).toLong - 2\n            count\
    \ * (pow(10, m - 1).toLong + pow(10, n - m).toLong)\n        }).sum\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n\
    \    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l)) ==\
    \ (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7xn29pza.scala:16)\n\tat Problem.main(tmp7xn29pza.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659976126
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        def canStartsOneEnds(x : Long) : Boolean = {\n   \
    \         return (x % 10 == 1 || x / (pow(10, n - 1).toLong) == 1)\n        }\n\
    \        (1L to pow(10, n).toLong).filter(x => canStartsOneEnds(x)).length\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l)) ==\
    \ (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvu3s3qeb.scala:14)\n\tat Problem.main(tmpvu3s3qeb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659976126
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1)\n            return 2\n        else if\
    \ (n == 2)\n            return 3\n        else {\n            var sum = 0L\n \
    \           for (j <- 1 to (n - 1)) {\n                var m = 1L\n          \
    \      for (i <- 1 to (n - j))\n                    m *= 10\n                sum\
    \ += m\n            }\n            return sum * 9 + (startsOneEnds(n - 1) * 10)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjna73ook.scala:13:28\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m            \e[33mfor\e[0m (j\
    \ <- \e[31m1\e[0m to (n - \e[31m1\e[0m)) {\n\e[31m\e[31m   |\e[0m            \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                            Found:\
    \    Long\n\e[31m   |\e[0m                            Required: Int\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjna73ook.scala:15:32 --------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                \e[33mfor\e[0m (i <- \e[31m1\e[0m to\
    \ (n - j))\n\e[31m\e[31m   |\e[0m                                ^^^^^\e[0m\n\e\
    [31m   |\e[0m                                Found:    Long\n\e[31m   |\e[0m \
    \                               Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659976125
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        // Find all (n - 1)-digit positive integers that start\
    \ with 1.\n        val starts = Problem.startsOneEnds(n - 1)\n        // Find\
    \ all (n - 1)-digit positive integers that end with 1.\n        val ends = Problem.endsOne(n\
    \ - 1)\n        // The result is the sum of the two.\n        starts + ends\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmptwmp212r.scala:10:27 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mends\e[0m = Problem.endsOne(n\
    \ - \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                   value endsOne is not a member of object Problem\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659976124
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        val count = new Array[Long](10)\n        for (i <-\
    \ 0 to 9) {\n            count(i) = 1\n        }\n        for (i <- 1 to n.toInt\
    \ - 1) {\n            count(0) = count(0) * 9\n            count(1) = count(1)\
    \ * 10\n            for (j <- 2 to 9) {\n                count(j) = count(j) *\
    \ 10 + count(j - 1)\n            }\n        }\n        count(1) + count(9)\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l)) ==\
    \ (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpy7jox_dx.scala:21)\n\tat Problem.main(tmpy7jox_dx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659976127
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) 1\n        else if (n == 2) 21\n     \
    \   else (1L to 9L).map(a => {\n            val x = pow(10, n - 1).toLong\n  \
    \          val d = (1L to 9L).map(b => {\n                val e = pow(10, b -\
    \ 1).toLong\n                if (b != a) (e - 1) * x\n                else e *\
    \ (x - 1) + 1\n            }).sum\n            d * 2\n        }).sum + startsOneEnds(n\
    \ - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpoca84gx_.scala:21)\n\tat Problem.main(tmpoca84gx_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659976128
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        val max : Long = (math.pow(10, n) - 1).toLong\n  \
    \      val min : Long = (math.pow(10, n - 1)).toLong\n        val nines : Long\
    \ = ((pow(10, n - 1) - 1) / 9).toLong\n        val eights : Long = ((pow(10, n\
    \ - 1) - 1) / 8).toLong\n        val sevens : Long = ((pow(10, n - 1) - 1) / 7).toLong\n\
    \        val sixes : Long = ((pow(10, n - 1) - 1) / 6).toLong\n        val fives\
    \ : Long = ((pow(10, n - 1) - 1) / 5).toLong\n        val fours : Long = ((pow(10,\
    \ n - 1) - 1) / 4).toLong\n        val threes : Long = ((pow(10, n - 1) - 1) /\
    \ 3).toLong\n        val twos : Long = ((pow(10, n - 1) - 1) / 2).toLong\n   \
    \     val ones : Long = (pow(10, n - 1) - 1)\n        return nines + eights +\
    \ sevens + sixes + fives + fours + threes + twos + ones\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l))\
    \ == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l))\
    \ == (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpn_ul_kgg.scala:17:27\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mones\e\
    [0m : \e[35mLong\e[0m = (pow(\e[31m10\e[0m, n - \e[31m1\e[0m) - \e[31m1\e[0m)\n\
    \e[31m\e[31m   |\e[0m                           ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                           Found:    Double\n\e[31m   |\e[0m       \
    \                    Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659976129
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        var r = BigInt(10).pow(n.toInt - 1) - BigInt(10).pow(n.toInt\
    \ - 2)\n        r += BigInt(10).pow(n.toInt - 1)\n        r.toLong\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n\
    \    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l)) ==\
    \ (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArithmeticException: Negative exponent\n\tat java.base/java.math.BigInteger.pow(BigInteger.java:2421)\n\
    \tat scala.math.BigInt.pow(BigInt.scala:456)\n\tat Problem$.startsOneEnds(tmp94eznt_o.scala:7)\n\
    \tat Problem$.main(tmp94eznt_o.scala:12)\n\tat Problem.main(tmp94eznt_o.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659976131
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        val MOD = 1000000007\n        val dig = Array.fill(n\
    \ + 1)(0)\n        dig(1) = 2\n        dig(2) = 4\n        for (i <- 3 to n) {\n\
    \            dig(i) = (dig(i - 1) * 2 + dig(i - 2)) % MOD\n        }\n       \
    \ dig(n)\n    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppw8ytxbd.scala:8:29\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mval\e[0m \e[36mdig\e\
    [0m = Array.fill(n + \e[31m1\e[0m)(\e[31m0\e[0m)\n\e[31m\e[31m  |\e[0m       \
    \                      ^^^^^\e[0m\n\e[31m  |\e[0m                            \
    \ Found:    Long\n\e[31m  |\e[0m                             Required: Int\n\e\
    [31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppw8ytxbd.scala:11:23\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m3\e[0m to n) {\n\e[31m\e[31m   |\e[0m                       ^\e[0m\n\e\
    [31m   |\e[0m                       Found:    (n : Long)\n\e[31m   |\e[0m    \
    \                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmppw8ytxbd.scala:14:12 --------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m        dig(n)\n\e[31m\e[31m   |\e[0m            ^\e[0m\n\e[31m   |\e\
    [0m            Found:    (n : Long)\n\e[31m   |\e[0m            Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659976131
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        def f(n : Long) : Long = if (n == 0) 0 else if (n\
    \ == 1) 1 else f(n - 1) + 9 * pow(10, n - 1).toLong\n        f(n) - 1\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n\
    \    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l)) ==\
    \ (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpib68jwmg.scala:11)\n\tat Problem.main(tmpib68jwmg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659976131
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n\tdef go(n : Long, n1 : Long, n2 : Long) : Long = {\n\t  \
    \  if (n == 0) n1 + n2\n\t    else {\n\t\tif (n % 2 == 0) go(n / 2, n1 * 10 +\
    \ 1, n2)\n\t\telse go(n / 2, n1 * 10 + 1, n2 * 10 + 1)\n\t    }\n\t}\n\tgo(n -\
    \ 1, 1, 0)\n    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmptqzy2dh0.scala:12:4 ------------------------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m\t    }\n\e[31m\e[31m   |\e[0m\t    ^\e[0m\n\e[31m  \
    \ |\e[0m   Incompatible combinations of tabs and spaces in indentation prefixes.\n\
    \e[31m   |\e[0m   Previous indent : 2 tabs\n\e[31m   |\e[0m   Latest indent  \
    \ : 1 tab, 4 spaces\n\e[31m\e[31m-- Error: /tmp/tmptqzy2dh0.scala:15:4 ------------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m   Incompatible combinations of tabs and spaces in indentation prefixes.\n\e\
    [31m   |\e[0m   Previous indent : 1 tab\n\e[31m   |\e[0m   Latest indent   : 4\
    \ spaces\n2 errors found\n"
  stdout: ''
  timestamp: 1659976127
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 2\n        (1 to 9).map(x => pow(10,\
    \ n - 1).toLong + x).sum +\n        (1 to 9).map(x => pow(10, n - 1).toLong *\
    \ x + 1).sum -\n        10\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n\
    \    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l)) ==\
    \ (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpm_jayg09.scala:13)\n\tat Problem.main(tmpm_jayg09.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        require(n > 0)\n        // given n, we can have n\
    \ - 1 digits beginning with 1 and ending in any digit\n        val pows = List.tabulate(n.toInt\
    \ - 1)(x => pow(10, x).toLong)\n        val ends = pows.map(x => (x - 1)).foldLeft(0L)(_\
    \ + _)\n        val beg = (pow(10, n - 1) - 1).toLong\n        beg + ends\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l)) ==\
    \ (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpk3nv4j5b.scala:15)\n\tat Problem.main(tmpk3nv4j5b.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659976132
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        var sum = (1 to n).map(pow(10, _).toLong).sum - pow(10,\
    \ n).toLong\n        var cur = 10\n        while (cur <= sum) {\n            sum\
    \ += cur\n            cur *= 10\n        }\n        sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l))\
    \ == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l))\
    \ == (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpk9dega6y.scala:7:24\
    \ ---------------------\e[0m\e[0m\n\e[31m7 |\e[0m        \e[33mvar\e[0m \e[36msum\e\
    [0m = (\e[31m1\e[0m to n).map(pow(\e[31m10\e[0m, _).toLong).sum - pow(\e[31m10\e\
    [0m, n).toLong\n\e[31m\e[31m  |\e[0m                        ^\e[0m\n\e[31m  |\e\
    [0m                        Found:    (n : Long)\n\e[31m  |\e[0m              \
    \          Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659976131
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        // Recursive case:\n        // Suppose f(n) is the\
    \ amount of n-digit numbers that start or end with 1.\n        // Then f(n) =\
    \ 9f(n - 1) + 9^{n - 1}\n        // Base case:\n        // f(1) = 2\n        if\
    \ (n == 1) return 2\n        9 * startsOneEnds(n - 1) + pow(9, n - 1).toLong\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvoy6652q.scala:16)\n\tat Problem.main(tmpvoy6652q.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659976132
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 2\n        return 1 + 9 * (1 to\
    \ n - 1).foldLeft(1)((a, b) => a * 10)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l))\
    \ == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l))\
    \ == (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_1re40tw.scala:8:29\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mreturn\e[0m \e\
    [31m1\e[0m + \e[31m9\e[0m * (\e[31m1\e[0m to n - \e[31m1\e[0m).foldLeft(\e[31m1\e\
    [0m)((\e[36ma\e[0m, \e[36mb\e[0m) => a * \e[31m10\e[0m)\n\e[31m\e[31m  |\e[0m\
    \                             ^^^^^\e[0m\n\e[31m  |\e[0m                     \
    \        Found:    Long\n\e[31m  |\e[0m                             Required:\
    \ Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659976132
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 2\n        val nDigits = n - 1\n\
    \        val nZeros = pow(10, nDigits).toLong\n        nZeros + (nZeros - 1)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0mb6k5s0.scala:13)\n\tat Problem.main(tmp0mb6k5s0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659976132
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 2\n        var count = 0L\n   \
    \     var i = 1L\n        for (x <- 1 to n) {\n            count += 1\n      \
    \      if (x > 1) {\n                i *= 10\n                count += 9 * i\n\
    \            }\n        }\n        return count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l))\
    \ == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l))\
    \ == (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp80ocbg1u.scala:10:23\
    \ --------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mfor\e[0m (x <-\
    \ \e[31m1\e[0m to n) {\n\e[31m\e[31m   |\e[0m                       ^\e[0m\n\e\
    [31m   |\e[0m                       Found:    (n : Long)\n\e[31m   |\e[0m    \
    \                   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659976132
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        val tens = Array.fill(n.toInt + 1)(BigInt(1))\n  \
    \      for (i <- 2 to n.toInt) tens(i) = 10 * tens(i - 1)\n        var res = 0L\n\
    \        var i = 0\n        var j = n.toInt\n        while (i < j) {\n       \
    \     res += (tens(i) * tens(j)).toLong\n            i += 1\n            j -=\
    \ 1\n        }\n        if (i == j) res += tens(i).toLong\n        res\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n\
    \    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l)) ==\
    \ (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplrsbqt8u.scala:22)\n\tat Problem.main(tmplrsbqt8u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n      val pow10 = pow(10, n).toLong\n      val pow9 = pow(10,\
    \ n - 1).toLong\n      (pow10 - 1) - (pow9 - 1)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l))\
    \ == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l))\
    \ == (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpob037mp9.scala:12)\n\tat Problem.main(tmpob037mp9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) 1\n        else 10 * (n - 1) + startsOneEnds(n\
    \ - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpz9acfpc9.scala:12)\n\tat Problem.main(tmpz9acfpc9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659976132
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) {\n            return 10\n        }\n\
    \        // let's assume we're using base 10 numbers\n        var result = 0L\n\
    \        val base = 10L\n        val baseCount = 9L\n        val max = (1 to n.toInt).map(x\
    \ => base).reduceLeft(_ * _)\n        for (i <- 1L to max) {\n            val\
    \ str = i.toString\n            if (str.head == '1' || str.last == '1') {\n  \
    \              result += 1\n            }\n        }\n        return result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpj1ib7_3x.scala:24)\n\tat Problem.main(tmpj1ib7_3x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659976134
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        val zeros = pow(10, n - 1).toLong\n        zeros +\
    \ zeros - 9\n    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphzsbs1xe.scala:11)\n\tat Problem.main(tmphzsbs1xe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659976133
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        var result = 1L\n        for (i <- 0 until n - 1)\
    \ result *= 9\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n\
    \    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l)) ==\
    \ (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgiogvwwd.scala:8:26\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n - \e[31m1\e[0m) result *= \e[31m9\e[0m\n\e[31m\e[31m  |\e\
    [0m                          ^^^^^\e[0m\n\e[31m  |\e[0m                      \
    \    Found:    Long\n\e[31m  |\e[0m                          Required: Int\n\e\
    [31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659976134
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        val dp = Array.ofDim[Long](n.toInt, 10)\n        //\
    \ dp(i)(j) is the number of ways to get to the i'th digit (0-indexed)\n      \
    \  // that ends with the digit j.\n        dp(0)(1) = 1\n        dp(0)(0) = 0\n\
    \        // First digit can't be 0 so start with 1\n        for (i <- 1 until\
    \ n.toInt) {\n            for (j <- 0 until 10) {\n                dp(i)(j) =\
    \ dp(i - 1).sum\n                // If the previous digit is j, then no number\
    \ with 1s\n                // at the start and end can be formed.\n          \
    \      if (j != 1) dp(i)(j) -= dp(i - 1)(j)\n            }\n        }\n      \
    \  dp(n.toInt - 1).sum\n    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt2_19jih.scala:25)\n\tat Problem.main(tmpt2_19jih.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659976138
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1)\n            return 10;\n        var numOfOnes\
    \ : Long = 10;\n        for (i <- 1 to n.toInt - 2) {\n            numOfOnes =\
    \ (numOfOnes * 10 + 1) % 1000000007;\n        }\n        var numOfOthers : Long\
    \ = (10 - 2) * pow(10, n - 2).toLong % 1000000007;\n        return (numOfOnes\
    \ + numOfOthers) % 1000000007;\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n\
    \    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l)) ==\
    \ (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe25dpsb4.scala:17)\n\tat Problem.main(tmpe25dpsb4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659976137
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n      // The digit at the beginning or end must be 1.\n  \
    \    val startWith1 = 0L +: ((2L to 9L).map(pow(10, _ - 1).toLong).scanLeft(0L)(_\
    \ + _))\n      val endWith1 = 0L +: ((2L to 9L).map(pow(10, _ - 1).toLong).scanRight(0L)(_\
    \ + _))\n      val total = 0L +: ((1L to 9L).map(pow(10, _).toLong).scanLeft(0L)(_\
    \ + _))\n      val with0 = total(n - 1) - (0L +: (1L to 9L).map(pow(10, _ - 1).toLong).scanLeft(0L)(_\
    \ + _))(n - 1)\n      val repeat = 1L + (1L to n - 2).map(pow(10, _).toLong).scanLeft(0L)(_\
    \ + _)(n - 2)\n      (startWith1(n) - with0) + (endWith1(n) - with0) + repeat\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmpmr04wlxo.scala:8:53 ------------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m      \e[33mval\e[0m \e[36mstartWith1\e[0m = \e[31m0L\e\
    [0m +: ((\e[31m2L\e[0m to \e[31m9L\e[0m).map(pow(\e[31m10\e[0m, _ - \e[31m1\e\
    [0m).toLong).scanLeft(\e[31m0L\e[0m)(_ + _))\n\e[31m\e[31m  |\e[0m           \
    \                                          ^\e[0m\n\e[31m  |\e[0m     Missing\
    \ parameter type\n\e[31m  |\e[0m\n\e[31m  |\e[0m     I could not infer the type\
    \ of the parameter _$1 of expanded function:\n\e[31m  |\e[0m     _$1 => _$1 -\
    \ 1.\n\e[31m\e[31m-- [E051] Reference Error: /tmp/tmpmr04wlxo.scala:8:83 -------------------------\e\
    [0m\e[0m\n\e[31m8 |\e[0m      \e[33mval\e[0m \e[36mstartWith1\e[0m = \e[31m0L\e\
    [0m +: ((\e[31m2L\e[0m to \e[31m9L\e[0m).map(pow(\e[31m10\e[0m, _ - \e[31m1\e\
    [0m).toLong).scanLeft(\e[31m0L\e[0m)(_ + _))\n\e[31m\e[31m  |\e[0m           \
    \                                                                      ^^^\e[0m\n\
    \e[31m  |\e[0mAmbiguous overload. The overloaded alternatives of \e[33mmethod\e\
    [0m \e[35m+\e[0m in \e[33mclass\e[0m \e[35mLong\e[0m with types\n\e[31m  |\e[0m\
    \ (x: Long): Long\n\e[31m  |\e[0m (x: Int): Long\n\e[31m  |\e[0m (x: Char): Long\n\
    \e[31m  |\e[0m (x: Short): Long\n\e[31m  |\e[0m (x: Byte): Long\n\e[31m  |\e[0mall\
    \ match arguments ((_$3 : Nothing))\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E081] Type Error:\
    \ /tmp/tmpmr04wlxo.scala:9:51 ------------------------------\e[0m\e[0m\n\e[31m9\
    \ |\e[0m      \e[33mval\e[0m \e[36mendWith1\e[0m = \e[31m0L\e[0m +: ((\e[31m2L\e\
    [0m to \e[31m9L\e[0m).map(pow(\e[31m10\e[0m, _ - \e[31m1\e[0m).toLong).scanRight(\e\
    [31m0L\e[0m)(_ + _))\n\e[31m\e[31m  |\e[0m                                   \
    \                ^\e[0m\n\e[31m  |\e[0m     Missing parameter type\n\e[31m  |\e\
    [0m\n\e[31m  |\e[0m     I could not infer the type of the parameter _$4 of expanded\
    \ function:\n\e[31m  |\e[0m     _$4 => _$4 - 1.\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpmr04wlxo.scala:9:82 -------------------------\e[0m\e[0m\n\e[31m9\
    \ |\e[0m      \e[33mval\e[0m \e[36mendWith1\e[0m = \e[31m0L\e[0m +: ((\e[31m2L\e\
    [0m to \e[31m9L\e[0m).map(pow(\e[31m10\e[0m, _"
  stdout: ''
  timestamp: 1659976138
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        val max = pow(10, n).toLong\n        val min = pow(10,\
    \ n - 1).toLong\n        val minus = pow(10, n - 2).toLong\n        ((max / 10)\
    \ - minus) * 2 + (max % 10) - (if (min % 10 == 0) 1 else 0)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l))\
    \ == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l))\
    \ == (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn6wm00aq.scala:13)\n\tat Problem.main(tmpn6wm00aq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659976138
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        var dp = Array.ofDim[Long](2, n + 1)\n        dp(0)(1)\
    \ = 1\n        dp(1)(1) = 1\n        for (i <- 2 to n) {\n            dp(0)(i)\
    \ = dp(0)(i - 1) + dp(1)(i - 1)\n            dp(1)(i) = dp(0)(i - 1)\n       \
    \ }\n        dp(0)(n) + dp(1)(n)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n\
    \    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l)) ==\
    \ (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7hjscvlx.scala:7:38\
    \ ---------------------\e[0m\e[0m\n\e[31m7 |\e[0m        \e[33mvar\e[0m \e[36mdp\e\
    [0m = Array.ofDim[\e[35mLong\e[0m](\e[31m2\e[0m, n + \e[31m1\e[0m)\n\e[31m\e[31m\
    \  |\e[0m                                      ^^^^^\e[0m\n\e[31m  |\e[0m    \
    \                                  Found:    Long\n\e[31m  |\e[0m            \
    \                          Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp7hjscvlx.scala:10:23 --------------------\e[0m\e\
    [0m\n\e[31m10 |\e[0m        \e[33mfor\e[0m (i <- \e[31m2\e[0m to n) {\n\e[31m\e\
    [31m   |\e[0m                       ^\e[0m\n\e[31m   |\e[0m                  \
    \     Found:    (n : Long)\n\e[31m   |\e[0m                       Required: Int\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7hjscvlx.scala:14:14\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        dp(\e[31m0\e[0m)(n) +\
    \ dp(\e[31m1\e[0m)(n)\n\e[31m\e[31m   |\e[0m              ^\e[0m\n\e[31m   |\e\
    [0m              Found:    (n : Long)\n\e[31m   |\e[0m              Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7hjscvlx.scala:14:25\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        dp(\e[31m0\e[0m)(n) +\
    \ dp(\e[31m1\e[0m)(n)\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Found:    (n : Long)\n\e[31m   |\e[0m  \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659976138
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        val msd = new Array[Long](n.toInt + 1)\n        val\
    \ lsd = new Array[Long](n.toInt + 1)\n        msd(1) = 1\n        lsd(1) = 1\n\
    \        for (i <- 2 to n.toInt) {\n            lsd(i) = (msd(i - 1) + lsd(i -\
    \ 1)) * 9\n            msd(i) = lsd(i - 1) + msd(i - 1)\n        }\n        lsd(n.toInt)\
    \ + msd(n.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnlzor288.scala:18)\n\tat Problem.main(tmpnlzor288.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659976139
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n     \
    \   dp(1)(0) = 1\n        dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n  \
    \          dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i\
    \ - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n  \
    \  assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n\
    \    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l)) ==\
    \ (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_hq0ndyj.scala:17)\n\tat Problem.main(tmp_hq0ndyj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        var ans = 0L\n        // first digit = 1\n       \
    \ ans += pow(2, n - 1).toLong\n        // last digit = 1\n        ans += pow(2,\
    \ n - 1).toLong\n        // first digit = 1, last digit = 1\n        ans -= pow(2,\
    \ n - 2).toLong\n        ans\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n\
    \    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l)) ==\
    \ (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9l9cnc9d.scala:17)\n\tat Problem.main(tmp9l9cnc9d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        val mem = new HashMap[(Int, Boolean), Long]()\n  \
    \      val f = (i : Int, startOne : Boolean) => {\n            if (i == 0) 1\n\
    \            else if (mem.contains((i, startOne))) mem((i, startOne))\n      \
    \      else {\n                val result = (0 to 9).foldLeft(0L)((r, j) => {\n\
    \                    val start = j != 0\n                    val end = j == 1\n\
    \                    if (startOne) if (start) r + f(i - 1, startOne) else r\n\
    \                    else if (end) r + f(i - 1, end) else r + f(i - 1, startOne)\n\
    \                })\n                mem((i, startOne)) = result\n           \
    \     result\n            }\n        }\n        f(n.toInt, false)\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n\
    \    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l)) ==\
    \ (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpn6rfo2e3.scala:15:49 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                    \e[33mif\e[0m (startOne) \e[33mif\e\
    [0m (start) r + f(i - \e[31m1\e[0m, startOne) \e[33melse\e[0m r\n\e[31m\e[31m\
    \   |\e[0m                                                 ^\e[0m\n\e[31m   |\e\
    [0m                                            Recursive \e[33mvalue\e[0m \e[35mf\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpn6rfo2e3.scala:16:38\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m                    \e\
    [33melse\e[0m \e[33mif\e[0m (end) r + f(i - \e[31m1\e[0m, end) \e[33melse\e[0m\
    \ r + f(i - \e[31m1\e[0m, startOne)\n\e[31m\e[31m   |\e[0m                   \
    \                   ^\e[0m\n\e[31m   |\e[0m                                  \
    \    Recursive \e[33mvalue\e[0m \e[35mf\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmpn6rfo2e3.scala:16:61 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                    \e[33melse\e[0m \e[33mif\e[0m (end)\
    \ r + f(i - \e[31m1\e[0m, end) \e[33melse\e[0m r + f(i - \e[31m1\e[0m, startOne)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \     ^\e[0m\n\e[31m   |\e[0m                                            Recursive\
    \ \e[33mvalue\e[0m \e[35mf\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659976137
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        // make a tree\n        var nums = new ArrayBuffer[Long]()\n\
    \        val chars = List(0, 1)\n        for (c <- chars) {\n            for (i\
    \ <- 1 to n - 1) {\n                val next = c * pow(10, i).toLong\n       \
    \         for (c2 <- chars) {\n                    nums += (next + c2)\n     \
    \           }\n            }\n        }\n        nums.toSet.size\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n  \
    \  assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n\
    \    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l)) ==\
    \ (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp34ksgm2p.scala:11:27\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m            \e[33mfor\e[0m (i\
    \ <- \e[31m1\e[0m to n - \e[31m1\e[0m) {\n\e[31m\e[31m   |\e[0m              \
    \             ^^^^^\e[0m\n\e[31m   |\e[0m                           Found:   \
    \ Long\n\e[31m   |\e[0m                           Required: Int\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        val dp = Array.ofDim[Long](n.toInt + 1, 10)\n    \
    \    for (i <- 0 to 9) {\n            dp(1)(i) = 1\n        }\n        for (j\
    \ <- 2 to n.toInt) {\n            for (i <- 0 to 9) {\n                dp(j)(i)\
    \ = dp(j - 1).sum\n            }\n        }\n        return dp(n.toInt).sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpso92h_4t.scala:19)\n\tat Problem.main(tmpso92h_4t.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659976141
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 2\n        (BigInt(10).pow(n -\
    \ 1) - BigInt(9).pow(n - 1)) * n\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n\
    \    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l)) ==\
    \ (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpi43o61hj.scala:8:24\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        (BigInt(\e[31m10\e[0m).pow(n\
    \ - \e[31m1\e[0m) - BigInt(\e[31m9\e[0m).pow(n - \e[31m1\e[0m)) * n\n\e[31m\e\
    [31m  |\e[0m                        ^^^^^\e[0m\n\e[31m  |\e[0m               \
    \         Found:    Long\n\e[31m  |\e[0m                        Required: Int\n\
    \e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpi43o61hj.scala:8:47\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        (BigInt(\e[31m10\e[0m).pow(n\
    \ - \e[31m1\e[0m) - BigInt(\e[31m9\e[0m).pow(n - \e[31m1\e[0m)) * n\n\e[31m\e\
    [31m  |\e[0m                                               ^^^^^\e[0m\n\e[31m\
    \  |\e[0m                                               Found:    Long\n\e[31m\
    \  |\e[0m                                               Required: Int\n\e[31m\
    \  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 2\n        else return startsOneEnds(n\
    \ - 1) + pow(10, n - 1).toLong\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n\
    \    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l)) ==\
    \ (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwcbkyja_.scala:11)\n\tat Problem.main(tmpwcbkyja_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659976140
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1)\n            return 2\n        val b =\
    \ Array.fill(n.toInt)(2)\n        b(0) = 1\n        b(n.toInt - 1) = 1\n     \
    \   return b.product\n    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpq98rffv7.scala:15)\n\tat Problem.main(tmpq98rffv7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659976141
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        val a = Array.fill(n + 1, 2)(0L)\n        for (i <-\
    \ 1 to n) {\n            a(i)(0) = a(i - 1)(0) + a(i - 1)(1)\n            a(i)(1)\
    \ = a(i - 1)(0)\n        }\n        a(n)(0) + a(n)(1)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l))\
    \ == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l))\
    \ == (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpq94t5m6n.scala:7:27\
    \ ---------------------\e[0m\e[0m\n\e[31m7 |\e[0m        \e[33mval\e[0m \e[36ma\e\
    [0m = Array.fill(n + \e[31m1\e[0m, \e[31m2\e[0m)(\e[31m0L\e[0m)\n\e[31m\e[31m\
    \  |\e[0m                           ^^^^^\e[0m\n\e[31m  |\e[0m               \
    \            Found:    Long\n\e[31m  |\e[0m                           Required:\
    \ Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpq94t5m6n.scala:8:23\
    \ ---------------------\e[0m\e[0m\n\e[31m8 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m1\e[0m to n) {\n\e[31m\e[31m  |\e[0m                       ^\e[0m\n\e\
    [31m  |\e[0m                       Found:    (n : Long)\n\e[31m  |\e[0m      \
    \                 Required: Int\n\e[31m  |\e[0m\n\e[31m  |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpq94t5m6n.scala:12:10 --------------------\e[0m\e[0m\n\e[31m12\
    \ |\e[0m        a(n)(\e[31m0\e[0m) + a(n)(\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m\
    \          ^\e[0m\n\e[31m   |\e[0m          Found:    (n : Long)\n\e[31m   |\e\
    [0m          Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpq94t5m6n.scala:12:20 --------------------\e[0m\e[0m\n\e[31m12\
    \ |\e[0m        a(n)(\e[31m0\e[0m) + a(n)(\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                    ^\e[0m\n\e[31m   |\e[0m                    Found:    (n :\
    \ Long)\n\e[31m   |\e[0m                    Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659976141
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n      val dp : Array[Array[Long]] = Array.ofDim[Long](n.toInt\
    \ + 1, 2)\n      dp(1)(0) = 1\n      dp(1)(1) = 1\n      for (i <- 2 to n.toInt)\
    \ {\n        dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n        dp(i)(1) = dp(i -\
    \ 1)(0)\n      }\n      dp(n.toInt)(0) + dp(n.toInt)(1)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l))\
    \ == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l))\
    \ == (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp63i4bh2f.scala:17)\n\tat Problem.main(tmp63i4bh2f.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659976141
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        val i = n - 1\n        pow(2, i).toLong * 2 * i *\
    \ pow(9, i - 1).toLong\n    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
    \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
    \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
    \ == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpq1nc3_ka.scala:11)\n\tat Problem.main(tmpq1nc3_ka.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659976141
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        var isOne = true\n        var ans = 1L\n        for\
    \ (i <- 0 until n - 1) {\n            isOne &= (i != 0)\n            ans *= 9\n\
    \            if (isOne) ans += 1\n        }\n        ans\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l))\
    \ == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l))\
    \ == (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_qvnlhk8.scala:9:26\
    \ ---------------------\e[0m\e[0m\n\e[31m9 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until n - \e[31m1\e[0m) {\n\e[31m\e[31m  |\e[0m               \
    \           ^^^^^\e[0m\n\e[31m  |\e[0m                          Found:    Long\n\
    \e[31m  |\e[0m                          Required: Int\n\e[31m  |\e[0m\n\e[31m\
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659976141
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        if (n == 1) return 2\n        var w = n - 1\n    \
    \    var d = 1\n        while (w > 0) {\n            d *= 10\n            w -=\
    \ 1\n        }\n        var p = 1\n        while (p < n) {\n            d /= 10\n\
    \            p += 1\n        }\n        d + 10 - 2\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l))\
    \ == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l))\
    \ == (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpx1_bhqej.scala:22)\n\tat Problem.main(tmpx1_bhqej.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659976141
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, return the count of the numbers of n-digit\n\
    \    // positive integers that start or end with 1.\n    def startsOneEnds(n :\
    \ Long) : Long = {\n        val a = Array.fill(n.toInt + 1)(1L)\n        for (i\
    \ <- 2 to n.toInt) {\n            for (j <- 1 to 9) {\n                a(i) +=\
    \ a(i - 1)\n            }\n        }\n        a(n.toInt)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(startsOneEnds((1l)) == (1l));\n    assert(startsOneEnds((2l))\
    \ == (18l));\n    assert(startsOneEnds((3l)) == (180l));\n    assert(startsOneEnds((4l))\
    \ == (1800l));\n    assert(startsOneEnds((5l)) == (18000l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpuhf4ov8w.scala:17)\n\tat Problem.main(tmpuhf4ov8w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659976141
