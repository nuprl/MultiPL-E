name: HumanEval_131_digits
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a positive integer n, return the product of the odd digits.\n    //\
  \ Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n\
  \    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n\
  \    // (15l)\n    def digits(n : Long) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(digits((5l)) == (5l));\n\
  \    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l))\
  \ == (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l))\
  \ == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
completions: ["        // If a multiple of 10, return 0\n        if (n % 10 == 0)\
    \ {\n            return 0\n        }\n        // Otherwise, take the mod 10 and\
    \ multiply it by the product of the rest of the digits\n        val digit = n\
    \ % 10\n        if (digit % 2 == 0) {\n            return digits(n / 10)\n   \
    \     }\n        return digit * digits(n / 10)", "        var acc = 1l\n     \
    \   for (i <- 0 to n.toString.length - 1) {\n            if (n.toString.charAt(i).toString.toInt\
    \ % 2 == 1) {\n                acc *= n.toString.charAt(i).toString.toInt\n  \
    \          }\n        }\n        acc", "        var result = 1l\n        var x\
    \ = n\n        while (x > 0) {\n            var digit = x % 10\n            if\
    \ (digit % 2 == 1) result *= digit\n            x /= 10\n        }\n        return\
    \ result", "        val s = n.toString\n        var result = 1l\n        for (i\
    \ <- 0 until s.length) {\n            if (s(i) != '0' && s(i) != '2' && s(i) !=\
    \ '4' && s(i) != '6' && s(i) != '8') {\n                result *= s(i).asDigit\n\
    \            }\n        }\n        return result", "        var m = n\n      \
    \  var product = 1l\n        while (m > 0) {\n            var d = m % 10\n   \
    \         if (d % 2 == 1) product *= d\n            m /= 10\n        }\n     \
    \   return product", "        var product = 1l\n        n.toString.foreach(c =>\
    \ if (c.asDigit % 2 == 1) product *= c.asDigit)\n        product", "        def\
    \ digitsImpl(n : Long, result : Long) : Long = {\n            if (n == 0) result\n\
    \            else {\n                val digit = n % 10\n                if (digit\
    \ % 2 == 1) digitsImpl(n / 10, result * digit)\n                else digitsImpl(n\
    \ / 10, result)\n            }\n        }\n        digitsImpl(n, 1)", "      var\
    \ p = 1l\n      var t = n\n      while (t > 0) {\n        val d = t % 10\n   \
    \     if (d % 2 == 1) p *= d\n        t /= 10\n      }\n      p", "        var\
    \ p = 1l\n        var r = n\n        while (r > 0) {\n            val d = r %\
    \ 10\n            if (d % 2 == 1) p *= d\n            r /= 10\n        }\n   \
    \     p", '        return digitsRec(n, 1l)', "        var str = n.toString\n \
    \       var prod = 1l\n        for (i <- 0 until str.length) {\n            var\
    \ d = str(i).asDigit\n            if (d % 2 == 1) prod *= d\n        }\n     \
    \   prod", "        var product = 1l\n        var n2 = n\n        while (n2 >\
    \ 0) {\n            val d = n2 % 10\n            if (d % 2 == 1) product *= d\n\
    \            n2 /= 10\n        }\n        product", "        var product = 1l\n\
    \        var m = n\n        while (m > 0) {\n            val d = m % 10\n    \
    \        if (d % 2 == 1) product *= d\n            m /= 10\n        }\n      \
    \  product", '        return n.toString.filter(x => (x.asDigit % 2 == 1)).map(x
    => x.asDigit).reduceLeft(_ * _)', "        val buf = new StringBuilder\n     \
    \   buf.append(n)\n        val str = buf.toString\n        var product = 1l\n\
    \        var i = 0\n        while (i < str.length) {\n            val c = str.charAt(i)\n\
    \            if (c % 2 == 1) {\n                product *= c.toLong - '0'\n  \
    \          }\n            i += 1\n        }\n        product", "        var r\
    \ = 1l\n        var p = n\n        while (p > 0) {\n            val x = p % 10\n\
    \            if (x % 2 == 1) {\n                r *= x\n            }\n      \
    \      p /= 10\n        }\n        return r", "        var product = 1l\n    \
    \    for (i <- (0 until n.toString.length).toList.reverse) {\n            val\
    \ digit = (n / pow(10, i).toLong) % 10\n            if (digit % 2 == 1) product\
    \ *= digit\n        }\n        return product", "        if (n == 0) return 0\n\
    \        val a = (n % 10)\n        val b = digits(n / 10)\n        if (a % 2 ==\
    \ 0) return b\n        else return a * b", "        var product = 1l\n       \
    \ n.toString.foreach(x => product *= (if (x.asDigit % 2 == 0) 1 else x.asDigit))\n\
    \        product", "        var result = 1l\n        var x = n\n        while\
    \ (x > 0) {\n            val d = x % 10\n            if (d % 2 == 1) {\n     \
    \           result *= d\n            }\n            x /= 10\n        }\n     \
    \   return result", "        var result = 1l\n        var x = n\n        while\
    \ (x > 0) {\n            val digit = x % 10\n            if (digit % 2 == 1) {\n\
    \                result *= digit\n            }\n            x /= 10\n       \
    \ }\n        return result", "        if (n == 0) return 0\n        var result\
    \ = 1l\n        var m = n\n        while (m > 0) {\n            val d = m % 10\n\
    \            if (d % 2 == 1) result *= d\n            m /= 10\n        }\n   \
    \     return result", "        var res = 1l\n        var t = n\n        while\
    \ (t > 0) {\n            val digit = t % 10\n            if (digit % 2 == 1) res\
    \ *= digit\n            t /= 10\n        }\n        res", "        var product\
    \ = 1l\n        var temp = n\n        while (temp > 0) {\n            var digit\
    \ = temp % 10\n            if (digit % 2 == 1) product *= digit\n            temp\
    \ /= 10\n        }\n        return product", "        if (n == 0) return 0\n \
    \       var (odd, even) = (1l, 1l)\n        var (d, m) = (n, 0l)\n        while\
    \ (d > 0) {\n            m = d % 10\n            if (m % 2 == 0) even *= m\n \
    \           else odd *= m\n            d /= 10\n        }\n        if (even ==\
    \ 1) return odd\n        return 0", "        var product = 1l\n        var t =\
    \ n\n        while (t > 0) {\n            val digit = t % 10\n            if (digit\
    \ % 2 == 1) {\n                product *= digit\n            }\n            t\
    \ /= 10\n        }\n        return product", "        var product = 1l\n     \
    \   var i = n\n        while (i > 0) {\n            val digit = i % 10\n     \
    \       if (digit % 2 == 1) {\n                product *= digit\n            }\n\
    \            i /= 10\n        }\n        product", "        var product = 1l\n\
    \        var m = n\n        while (m > 0) {\n            val d = m % 10\n    \
    \        if (d % 2 == 1) product *= d\n            m /= 10\n        }\n      \
    \  product", "        var product = 1l\n        var m = n\n        while (m >\
    \ 0) {\n            val d = m % 10\n            if (d % 2 == 1) {\n          \
    \      product *= d\n            }\n            m /= 10\n        }\n        return\
    \ product", "        var res = 1l\n        for (c <- n.toString().toCharArray)\
    \ {\n            val p = Character.getNumericValue(c)\n            if (p % 2 ==\
    \ 1) res *= p\n        }\n        res", "        if (n == 0) 0\n        else if\
    \ (n % 2 == 1) n % 10 * digits(n / 10)\n        else digits(n / 10)", "      \
    \  if (n == 0)\n            0\n        else {\n            val d = n % 10\n  \
    \          if (d % 2 == 0)\n                digits(n / 10)\n            else\n\
    \                d * digits(n / 10)\n        }", "        def digitsR(n : Long,\
    \ result : Long) : Long = n match {\n            case 0 => result\n          \
    \  case _ => {\n                val lastDigit = n % 10\n                if (lastDigit\
    \ % 2 == 1) digitsR(n / 10, result * lastDigit)\n                else digitsR(n\
    \ / 10, result)\n            }\n        }\n        digitsR(n, 1)", "        var\
    \ result = 1l\n        for (digit <- n.toString) {\n            val x = digit.asDigit\n\
    \            if (x % 2 == 1) result *= x\n        }\n        return result", " \
    \       var result = 1l\n        var m = n\n        while (m > 0) {\n        \
    \    var d = m % 10\n            if (d % 2 == 1) result *= d\n            m /=\
    \ 10\n        }\n        return result", "        def f(n : Long, acc : Long)\
    \ : Long = {\n            if (n == 0) acc\n            else {\n              \
    \  val d = n % 10\n                val next = if (d % 2 == 1) d * acc else acc\n\
    \                f(n / 10, next)\n            }\n        }\n        f(n, 1)",
  "        var r = 1l\n        var t = n\n        while (t > 0) {\n            val\
    \ m = t % 10\n            if (m % 2 == 1) r *= m\n            t /= 10\n      \
    \  }\n        r", "        def digits(n : Long, result : Long) : Long = {\n  \
    \          if (n == 0) result\n            else {\n                val t = n %\
    \ 10\n                if (t % 2 == 1) digits(n / 10, result * t)\n           \
    \     else digits(n / 10, result)\n            }\n        }\n        digits(n,\
    \ 1)", "        var value = 1l\n        var remaining = n\n        while (remaining\
    \ > 0) {\n            val digit = remaining % 10\n            if (digit % 2 ==\
    \ 1) {\n                value *= digit\n            }\n            remaining /=\
    \ 10\n        }\n        return value", "        var m = n\n        var product\
    \ = 1l\n        while (m > 0) {\n            val digit = m % 10\n            if\
    \ (digit % 2 == 1) product *= digit\n            m /= 10\n        }\n        product",
  "        var p = 1L\n        var i = n\n        while (i > 0) {\n            val\
    \ d = i % 10\n            if (d % 2 == 1) p *= d\n            i /= 10\n      \
    \  }\n        p", "        var p = 1l\n        var x = n\n        while (x > 0)\
    \ {\n            val d = x % 10\n            if (d % 2 == 1) p *= d\n        \
    \    x /= 10\n        }\n        p", "        var m = n\n        var product =\
    \ 1l\n        while (m > 0) {\n            val digit = m % 10\n            if\
    \ (digit % 2 == 1) product *= digit\n            m /= 10\n        }\n        product",
  "        var x = n\n        var product = 1l\n        while (x > 0) {\n        \
    \    val d = x % 10\n            if (d % 2 == 1) {\n                product *=\
    \ d\n            }\n            x /= 10\n        }\n        return product", " \
    \       if (n == 0) return 0\n        var prod = 1l\n        var m = n\n     \
    \   while (m > 0) {\n            val d = m % 10\n            if (d % 2 == 1) prod\
    \ *= d\n            m /= 10\n        }\n        prod", '        if (n < 10) if
    (n % 2 == 1) n else 0 else if (n % 2 == 1) n % 10 * digits(n / 10) else digits(n
    / 10)', "        if (n == 0) return 0\n        val d = n % 10\n        if (d %\
    \ 2 == 0) return digits(n / 10)\n        d * digits(n / 10)", "        var product\
    \ = 1l\n        for (c <- n.toString) {\n            val digit = Integer.parseInt(c.toString)\n\
    \            if (digit % 2 == 1) {\n                product *= digit\n       \
    \     }\n        }\n        product", "        var product = 1l\n        n.toString.foreach(\n\
    \            c => if (c.toString.toInt % 2 == 1) product *= c.toString.toInt\n\
    \        )\n        return product", "        var result = 1l\n        var flag\
    \ = false\n        for (d <- n.toString) {\n            var digit = d.asDigit\n\
    \            if (digit % 2 == 1) {\n                result *= digit\n        \
    \        flag = true\n            }\n        }\n        if (flag) result else\
    \ 0", "      var answer = 1l\n      var current = n\n      while (current > 0)\
    \ {\n        val digit = current % 10\n        if (digit % 2 == 1) answer *= digit\n\
    \        current /= 10\n      }\n      answer", "      var product = 1l\n    \
    \  var remaining = n\n      while (remaining > 0) {\n        val lastDigit = remaining\
    \ % 10\n        if (lastDigit % 2 == 1) {\n          product *= lastDigit\n  \
    \      }\n        remaining /= 10\n      }\n      product", "        if (n ==\
    \ 0) return 0\n        val (p, q) = (digits(n / 10), n % 10)\n        if (q %\
    \ 2 == 0) return p\n        return p * q", "        var result = 1l\n        for\
    \ (i <- n.toString) result *= if (i % 2 == 1) i.asDigit else 1\n        result",
  "        var product = 1l\n        var m = n\n        while (m > 0) {\n        \
    \    val digit = m % 10\n            if (digit % 2 == 1) {\n                product\
    \ *= digit\n            }\n            m /= 10\n        }\n        product", " \
    \       if (n == 0) return 0\n        val d = n % 10\n        val r = digits(n\
    \ / 10)\n        if (d % 2 == 0) r else r * d", "        var result = 1l\n   \
    \     var n2 = n\n        while (n2 > 0) {\n            val r = n2 % 10\n    \
    \        if (r % 2 == 1) result *= r\n            n2 /= 10\n        }\n      \
    \  result", "        if (n == 0)\n            0\n        else if (n % 2 == 1)\n\
    \            n % 10 * digits(n / 10)\n        else\n            digits(n / 10)",
  "        var d = 1l\n        for (c <- n.toString) {\n            if (c.toString.toInt\
    \ % 2 == 1) {\n                d *= c.toString.toInt\n            }\n        }\n\
    \        return d", "      var m = 1l\n      var x = n\n      while (x > 0) {\n\
    \        val d = x % 10\n        if (d % 2 == 1) m *= d\n        x /= 10\n   \
    \   }\n      m", "        if (n < 10) {\n            return (if (n % 2 == 1) n\
    \ else 0)\n        }\n        else {\n            val digit = n % 10\n       \
    \     val product = digits(n / 10)\n            return (if (digit % 2 == 1) product\
    \ * digit else product)\n        }", "        var x = n\n        var answer =\
    \ 1l\n        while (x > 0) {\n            val d = x % 10\n            if (d %\
    \ 2 == 1) answer *= d\n            x /= 10\n        }\n        return answer",
  "        val digits = n.toString.map(x => x.asDigit).toList.filter(x => x % 2 ==\
    \ 1)\n        if (digits.length == 0) 0 else digits.product", "        var product\
    \ = 1l\n        for (i <- 0 to n.toString.length - 1) {\n            val d = n.toString.charAt(i).asDigit\n\
    \            if (d % 2 == 1) {\n                product *= d\n            }\n\
    \        }\n        return product", "        var result = 1L\n        var x =\
    \ n\n        while (x > 0) {\n            val y = x % 10\n            if (y %\
    \ 2 == 1) result *= y\n            x /= 10\n        }\n        result", "    \
    \    var digits = new ListBuffer[Long]()\n        var tmp = n\n        while (tmp\
    \ > 0) {\n            val digit = tmp % 10\n            digits += digit\n    \
    \        tmp /= 10\n        }\n        digits.foldLeft(1l)((x, y) => if (y % 2\
    \ == 1) x * y else x)", "        if (n == 0) return 0\n        var product = 1l\n\
    \        var current = n\n        while (current > 0) {\n            val digit\
    \ = current % 10\n            if (digit % 2 == 1) product *= digit\n         \
    \   current /= 10\n        }\n        return product", "        var prod = 1l\n\
    \        var temp = n\n        while (temp > 0) {\n            val digit = temp\
    \ % 10\n            if (digit % 2 == 1) prod *= digit\n            temp /= 10\n\
    \        }\n        prod", "        if (n == 0) return 0\n        val x = n %\
    \ 10\n        val y = n / 10\n        if (x % 2 == 0) return digits(y)\n     \
    \   val x1 = max(1, x)\n        return x1 * digits(y)", "        var r = 1l\n\
    \        var k = n\n        while (k > 0) {\n            var d = k % 10\n    \
    \        if (d % 2 == 1) {\n                r *= d\n            }\n          \
    \  k /= 10\n        }\n        return r", "      var result = 1l\n      var m\
    \ = n\n      while (m > 0) {\n        val d = m % 10\n        if (d % 2 == 1)\
    \ {\n          result *= d\n        }\n        m /= 10\n      }\n      result",
  "        var product = 1l\n        var t = n\n        while (t > 0) {\n        \
    \    val d = t % 10\n            if (d % 2 == 1) product *= d\n            t /=\
    \ 10\n        }\n        product", "        val numDigits = floor(log10(n)).toInt\
    \ + 1\n        var list = new Array[Int](numDigits)\n        var i = 0\n     \
    \   while (n > 0) {\n            list(i) = (n % 10).toInt\n            n /= 10\n\
    \            i += 1\n        }\n        list.reduceLeft((x, y) => if (x % 2 ==\
    \ 1) x * y else x)", "        var m = 1l\n        var n2 = n\n        while (n2\
    \ > 0) {\n            val d = n2 % 10\n            if (d % 2 == 1) m *= d\n  \
    \          n2 /= 10\n        }\n        m", "        var r = 1l\n        var x\
    \ = n\n        while (x > 0) {\n            val d = x % 10\n            if (d\
    \ % 2 == 1) r *= d\n            x /= 10\n        }\n        r", "        var p\
    \ = 1l\n        n.toString.foreach(c => {\n            val i = c.asDigit\n   \
    \         if (i % 2 == 1) p *= i\n        })\n        p", "    \tval s = n.toString\n\
    \    \tvar p = 1l\n    \tfor (i <- 0 until s.length) {\n    \t\tif (s(i) % 2 ==\
    \ 1) p *= s(i).toString.toLong\n    \t}\n    \tp", "        var result = 1l\n\
    \        var n_copy = n\n        while (n_copy > 0) {\n            val digit =\
    \ n_copy % 10\n            if (digit % 2 == 1) result *= digit\n            n_copy\
    \ /= 10\n        }\n        return result", "        var p = 1l\n        for (i\
    \ <- n.toString) {\n            if (i.toInt % 2 == 1) p *= i.toInt\n        }\n\
    \        return p", "        var sum = 1l\n        n.toString.foreach(i => {\n\
    \            val d = i.asDigit\n            if (d % 2 == 1) {\n              \
    \  sum *= d\n            }\n        })\n        sum", "        var product = 1l\n\
    \        n.toString.foreach(c => if (c.asDigit % 2 == 1) product *= c.asDigit)\n\
    \        return product", "        var pr = 1l\n        var m = n\n        while\
    \ (m > 0) {\n            val d = m % 10\n            if (d % 2 == 1) pr *= d\n\
    \            m /= 10\n        }\n        pr", "        var product = 1l\n    \
    \    var temp = n\n        while (temp > 0) {\n            val digit = temp %\
    \ 10\n            if (digit % 2 == 1) product *= digit\n            temp /= 10\n\
    \        }\n        product", "        if (n < 0) throw new Exception(\"negative\
    \ input: \" + n)\n        if (n < 10) {\n            if (n % 2 == 1) n else 0\n\
    \        } else {\n            val rest = digits(n / 10)\n            if (rest\
    \ == 0) {\n                if (n % 2 == 1) n % 10 else 0\n            } else {\n\
    \                if (n % 2 == 1) n % 10 * rest else 0\n            }\n       \
    \ }", "        n.toString.map(x => (x - '0').toLong).filter(x => x % 2 == 1).foldLeft(1l)((x,\
    \ y) => x * y)", "        if (n == 0) return 1\n        var x = 1l\n        while\
    \ (n > 0) {\n            val d = n % 10\n            if (d % 2 == 1) x *= d\n\
    \            n /= 10\n        }\n        x", "        val x = n.toString.split(\"\
    \").map(a => a.toLong).filter(a => a != 0l).filter(a => a % 2 == 1).product\n\
    \        x", "        if (n <= 0) return 0\n        var nn = n\n        var result\
    \ = 1\n        while (nn > 0) {\n            val d = nn % 10\n            if (d\
    \ % 2 == 1) result *= d\n            nn /= 10\n        }\n        return result",
  "        val d = n.toString.map(_.asDigit)\n        d.filter(_ % 2 == 1).product",
  "        var product = 1l\n        var curr = n\n        while (curr > 0) {\n  \
    \          val lastDigit = curr % 10\n            if (lastDigit % 2 == 1) product\
    \ *= lastDigit\n            curr /= 10\n        }\n        product", "       \
    \ var product = 1l\n        var m = n\n        while (m > 0) {\n            val\
    \ d = m % 10\n            if (d % 2 == 1) {\n                product *= d\n  \
    \          }\n            m /= 10\n        }\n        return product", "     \
    \ var s = 1l\n      var t = n\n      while (t > 0) {\n        val d = t % 10\n\
    \        if (d % 2 == 1) s *= d\n        t /= 10\n      }\n      s", "       \
    \ var result = 1l\n        var nn = n\n        while (nn > 0) {\n            var\
    \ d = nn % 10\n            if (d % 2 == 1) result *= d\n            nn /= 10\n\
    \        }\n        return result", "        var product = 1l\n        var s =\
    \ n.toString\n        for (i <- 0 until s.length) {\n            val c = s(i)\n\
    \            val d = c.toString.toInt\n            if (d % 2 == 1) product *=\
    \ d\n        }\n        product", "      var prod = 1l\n      var n1 = n\n   \
    \   while (n1 > 0) {\n        val dig = n1 % 10\n        if (dig % 2 == 1) prod\
    \ *= dig\n        n1 /= 10\n      }\n      prod", "        if (n == 0) return\
    \ 0\n        val digit = n % 10\n        if (digit % 2 == 0) 0\n        else digit\
    \ * digits(n / 10)", "        var result = 1l\n        var m = n\n        while\
    \ (m > 0) {\n            val d = m % 10\n            if (d % 2 == 1) result *=\
    \ d\n            m /= 10\n        }\n        result", "      def f(n : Long, acc\
    \ : Long) : Long = {\n        if (n <= 0) acc\n        else {\n          val a\
    \ = n % 10\n          if (a % 2 == 1) f(n / 10, acc * a)\n          else f(n /\
    \ 10, acc)\n        }\n      }\n      f(n, 1)", "        var result = 1l\n   \
    \     var temp = n\n        while (temp > 0) {\n            val digit = temp %\
    \ 10\n            if (digit % 2 == 1) {\n                result *= digit\n   \
    \         }\n            temp /= 10\n        }\n        return result", "    \
    \    var p = 1l\n        for (i <- 0 until n.toString.length) {\n            val\
    \ c = n.toString.charAt(i).asDigit\n            if (c % 2 == 1) p *= c\n     \
    \   }\n        p", "        var product = 1l\n        var m = n\n        while\
    \ (m > 0) {\n            val d = m % 10\n            if (d % 2 == 1) product *=\
    \ d\n            m /= 10\n        }\n        product", "      var current = n\n\
    \      var product = 1l\n      while (current > 0) {\n        val digit = current\
    \ % 10\n        if (digit % 2 == 1) product *= digit\n        current /= 10\n\
    \      }\n      product", "        var product = 1l\n        n.toString.foreach(c\
    \ => {\n            val d = c.asDigit\n            if (d % 2 == 1) product *=\
    \ d\n        })\n        product", "        if (n == 0) return 0\n        var\
    \ result = 1\n        var remainder = n\n        while (remainder > 0) {\n   \
    \         var digit = remainder % 10\n            if (digit % 2 == 1) {\n    \
    \            result *= digit\n            }\n            remainder /= 10\n   \
    \     }\n        return result", "        var ans = 1l\n        for (c <- n.toString)\
    \ {\n            if (c.toString.toInt % 2 == 1) ans *= c.toString.toInt\n    \
    \    }\n        ans", "        var product = 1l\n        var i = n\n        while\
    \ (i > 0) {\n            val digit = i % 10\n            if (digit % 2 == 1) product\
    \ *= digit\n            i /= 10\n        }\n        product", "        var result\
    \ = 1l\n        var m = n\n        while (m > 0) {\n            val d = m % 10\n\
    \            if (d % 2 == 1) {\n                result *= d\n            }\n \
    \           m /= 10\n        }\n        return result", "        var result =\
    \ 1l\n        var m = n\n        while (m > 0) {\n            val d = m % 10\n\
    \            if (d % 2 == 1) {\n                result *= d\n            }\n \
    \           m /= 10\n        }\n        return result", '        return n.toString.map(x
    => x.asDigit).filter(x => x % 2 == 1).foldLeft(1l)((x, y) => x * y)', "      \
    \  var total = 1l\n        n.toString.foreach(ch => {\n            val digit =\
    \ ch.asDigit\n            if (digit % 2 == 1) total *= digit\n        })\n   \
    \     total", "        def iter(n : Long, acc : Long) : Long = {\n           \
    \ if (n == 0) acc\n            else if (n % 2 == 1) iter(n / 10, n % 10 * acc)\n\
    \            else iter(n / 10, acc)\n        }\n        iter(n, 1)", "      if\
    \ (n == 0) 0\n      else (if (n % 2 == 1) n % 10 else 1) * digits(n / 10)", " \
    \       var result = 1l\n        n.toString.map(_.asDigit).foreach(x => if (x\
    \ % 2 == 1) result *= x)\n        result", "        var p = 1l\n        var r\
    \ = n\n        while (r > 0) {\n            val d = r % 10\n            if (d\
    \ % 2 == 1) {\n                p *= d\n            }\n            r /= 10\n  \
    \      }\n        p", "      var ans = 1l\n      var m = n\n      while (m > 0)\
    \ {\n        val d = m % 10\n        if (d % 2 == 1) ans *= d\n        m /= 10\n\
    \      }\n      ans", "        var product = 1l\n        var m = n\n        while\
    \ (m > 0) {\n            val d = m % 10\n            if (d % 2 == 1) product *=\
    \ d\n            m /= 10\n        }\n        product", "        var product =\
    \ 1l\n        for (c <- n.toString) {\n            if (c % 2 == 1) product *=\
    \ c.toString.toLong\n        }\n        product", "        var product = 1l\n\
    \        for (x <- n.toString.toCharArray) {\n            val digit = x.asDigit\n\
    \            if (digit % 2 == 1) product *= digit\n        }\n        product",
  "        var result = 1l\n        for (a <- n.toString) {\n            val b = a.asDigit\n\
    \            if (b % 2 == 1) result *= b\n        }\n        return result", " \
    \   \tvar p = 1l\n    \tvar q = n\n    \twhile (q > 0) {\n    \t\tvar r = q %\
    \ 10\n    \t\tif (r % 2 == 1) p *= r\n    \t\tq /= 10\n    \t}\n    \treturn p",
  "        if (n == 0) return 0\n        var x = n\n        var product = 1l\n   \
    \     while (x > 0) {\n            val digit = x % 10\n            if (digit %\
    \ 2 == 1) product *= digit\n            x /= 10\n        }\n        product",
  "        var result = 1L\n        var original = n\n        while (original > 0)\
    \ {\n            val digit = original % 10\n            if (digit % 2 == 1) {\n\
    \                result *= digit\n            }\n            original /= 10\n\
    \        }\n        return result", "    \tvar product = 1l\n    \tvar nCpy =\
    \ n\n    \twhile (nCpy > 0) {\n    \t\tval digit = nCpy % 10\n    \t\tif (digit\
    \ % 2 == 1) product *= digit\n    \t\tnCpy /= 10\n    \t}\n    \treturn product",
  "        var output : Long = 1\n        n.toString.foreach(e => if (e.asDigit %\
    \ 2 == 1) output *= e.asDigit)\n        output", "        if (n <= 0) return 0\n\
    \        val d = n % 10\n        if (d % 2 == 0) return digits(n / 10)\n     \
    \   else return d * digits(n / 10)", "        var m = n\n        var result =\
    \ 1l\n        while (m > 0) {\n            val d = m % 10\n            if (d %\
    \ 2 == 1) result *= d\n            m /= 10\n        }\n        result", "    \
    \    var n1 = n\n        var odd_prod = 1l\n        while (n1 > 0) {\n       \
    \     val d = n1 % 10\n            if (d % 2 == 1) {\n                odd_prod\
    \ *= d\n            }\n            n1 /= 10\n        }\n        odd_prod", " \
    \       var product = 1l\n        var m = n\n        while (m > 0) {\n       \
    \     val d = m % 10\n            if (d % 2 == 1) {\n                product *=\
    \ d\n            }\n            m /= 10\n        }\n        product", "      \
    \  val digits = n.toString.map(_.asDigit)\n        var odds = 1\n        for (digit\
    \ <- digits) {\n            if (digit % 2 == 1) {\n                odds *= digit\n\
    \            }\n        }\n        odds", "        def helper(n : Long, acc :\
    \ Long) : Long = {\n            if (n == 0) acc\n            else {\n        \
    \        val d = n % 10\n                if (d % 2 == 1) helper(n / 10, acc *\
    \ d)\n                else helper(n / 10, acc)\n            }\n        }\n   \
    \     helper(n, 1)", "        var product = 1l\n        var div = n\n        while\
    \ (div > 0) {\n            val digit = div % 10\n            if (digit % 2 ==\
    \ 1) {\n                product *= digit\n            }\n            div /= 10\n\
    \        }\n        return product", "        var result = 1l\n        var m =\
    \ n\n        while (m > 0) {\n            val d = m % 10\n            if (d %\
    \ 2 == 1) {\n                result *= d\n            }\n            m /= 10\n\
    \        }\n        return result", "        var result = 1l\n        for (digit\
    \ <- n.toString().map(_.asDigit)) {\n            if (digit % 2 == 1) result *=\
    \ digit\n        }\n        return result", "        var p = 1l\n        var m\
    \ = n\n        while (m > 0) {\n            val d = m % 10\n            if (d\
    \ % 2 == 1) p *= d\n            m /= 10\n        }\n        p", "        val digits\
    \ = n.toString.toList.map(x => x.asDigit).filter(x => x % 2 == 1)\n        if\
    \ (digits.length == 0) 0 else digits.product", "        var r : Long = 1l\n  \
    \      var n2 : Long = n\n        while (n2 > 0) {\n            var d : Long =\
    \ n2 % 10\n            if (d % 2 == 1) r *= d\n            n2 /= 10\n        }\n\
    \        return r", "        val ds = n.toString.map(_.asDigit)\n        ds.filter(_\
    \ % 2 == 1).product", '        return 1l', "      var p = 1l\n      var r = n\n\
    \      while (r > 0) {\n        var d = r % 10\n        if (d % 2 == 1) {\n  \
    \        p *= d\n        }\n        r /= 10\n      }\n      return p", "     \
    \   var prod = 1l\n        var m = n\n        while (m > 0) {\n            val\
    \ digit = m % 10\n            if (digit % 2 == 1) prod *= digit\n            m\
    \ /= 10\n        }\n        prod", "        val digits = n.toString().map(_.asDigit)\n\
    \        var product = 1l\n        for (digit <- digits) {\n            if (digit\
    \ % 2 == 1) {\n                product *= digit\n            }\n        }\n  \
    \      return product", '        n.toString.map(x => x.asDigit).filter(x => x
    % 2 == 1).foldLeft(1l)((a, b) => a * b)', "        var p = 1l\n        n.toString.foreach(d\
    \ => if (d.toString.toInt % 2 == 1) p *= d.toString.toInt)\n        p", "    \
    \    var r = 1l\n        for (c <- n.toString) {\n            var d = c.asDigit\n\
    \            if (d % 2 == 1) {\n                r *= d\n            }\n      \
    \  }\n        return r", "        var result = 1l\n        var nn = n\n      \
    \  while (nn > 0) {\n            val d = nn % 10\n            if (d % 2 == 1)\
    \ {\n                result *= d\n            }\n            nn /= 10\n      \
    \  }\n        return result", "        var result = 1l\n        var n1 = n\n \
    \       while (n1 > 0) {\n            val digit = n1 % 10\n            if (digit\
    \ % 2 == 1) {\n                result *= digit\n            }\n            n1\
    \ /= 10\n        }\n        return result", "        var x = n\n        var product\
    \ = 1l\n        while (x > 0) {\n            val d = x % 10\n            if (d\
    \ % 2 == 1) product *= d\n            x /= 10\n        }\n        product", " \
    \       var p = 1l\n        var num = n\n        while (num > 0) {\n         \
    \   val digit = num % 10\n            if (digit % 2 == 1) p *= digit\n       \
    \     num /= 10\n        }\n        p", "        if (n == 0) return 0\n      \
    \  val (d, m) = ((n / 10), (n % 10))\n        if (m % 2 == 0) return digits(d)\n\
    \        return (10 * digits(d)) + m", "      var x = n\n      var result = 1l\n\
    \      while (x > 0) {\n        val d = x % 10\n        if (d % 2 == 1) result\
    \ *= d\n        x /= 10\n      }\n      result", '        n.toString.map(x =>
    x.asDigit).filter(x => x % 2 == 1).foldLeft(1)((x, y) => x * y)', "        var\
    \ t = n\n        var result = 1l\n        while (t > 0) {\n            val r =\
    \ t % 10\n            if (r % 2 == 1) result *= r\n            t /= 10\n     \
    \   }\n        result", "        var ans = 1l\n        for (ch <- n.toString.toCharArray)\
    \ {\n            val d = ch.asDigit\n            if (d % 2 == 1) ans *= d\n  \
    \      }\n        ans", "        var i = n\n        var r = 1l\n        while\
    \ (i > 0) {\n            val digit = i % 10\n            if (digit % 2 == 1) r\
    \ *= digit\n            i /= 10\n        }\n        r", "        var value = 1l\n\
    \        for (i <- 1 to 9) {\n            if (n % 10 % 2 == 1) {\n           \
    \     value *= n % 10\n            }\n            n /= 10\n        }\n       \
    \ return value", "        if (n == 0) return 0\n        var m = n\n        var\
    \ b = 1\n        while (m > 0) {\n            val a = m % 10\n            if (a\
    \ % 2 == 1) b *= a\n            m /= 10\n        }\n        b", '        n.toString.map(x
    => x.asDigit).filter(x => x % 2 == 1).product', "        var n2 = n\n        var\
    \ p = 1l\n        while (n2 > 0) {\n            val r = n2 % 10\n            if\
    \ (r % 2 == 1) p *= r\n            n2 /= 10\n        }\n        p", "        var\
    \ product = 1l\n        var m = n\n        while (m > 0) {\n            val d\
    \ = m % 10\n            if (d % 2 == 1) {\n                product *= d\n    \
    \        }\n            m /= 10\n        }\n        return product", "       \
    \ var result = 1l\n        var current = n\n        while (current > 0) {\n  \
    \          val digit = current % 10\n            if (digit % 2 == 1) result *=\
    \ digit\n            current /= 10\n        }\n        return result", "     \
    \   def digitsAcc(n : Long, acc : Long) : Long = n match {\n            case 0\
    \ => acc\n            case _ => digitsAcc(n / 10, acc * (if (n % 2 == 1) n % 10\
    \ else 1))\n        }\n        digitsAcc(n, 1)", '        n.toString.map(c =>
    c.asDigit).filter(n => n % 2 == 1).foldLeft(1l)((a, b) => a * b)', "        var\
    \ product = 1l\n        val buffer = new StringBuilder()\n        var m = n\n\
    \        while (m > 0) {\n            val c = m % 10\n            if (c % 2 ==\
    \ 1) product *= c\n            m /= 10\n        }\n        product", "       \
    \ var product = 1l\n        var m = n\n        while (m > 0) {\n            val\
    \ d = m % 10\n            if (d % 2 == 1) {\n                product *= d\n  \
    \          }\n            m /= 10\n        }\n        return product", "     \
    \   var prod = 1l\n        var nn = n\n        while (nn > 0) {\n            val\
    \ cur = nn % 10\n            if (cur % 2 == 1) prod *= cur\n            nn /=\
    \ 10\n        }\n        prod", "        var oddDigits : Long = 1\n        n.toString.map(digit\
    \ => if (digit.asDigit % 2 == 1) oddDigits *= digit.asDigit)\n        if (oddDigits\
    \ == 1) 0 else oddDigits", '        return 0;', "        if (n == 0) return 1\n\
    \        var m = n\n        var product = 1l\n        while (m > 0) {\n      \
    \      val d = m % 10\n            if (d % 2 == 1) product *= d\n            m\
    \ /= 10\n        }\n        product", "        var p = 1l\n        for (c <- n.toString.toCharArray)\
    \ {\n            val digit = c.asDigit\n            if (digit % 2 == 1) p *= digit\n\
    \        }\n        p", "        def iteration(n : Long, p : Long) : Long = {\n\
    \            if (n == 0) p\n            else if (n % 2 == 1) iteration(n / 10,\
    \ p * (n % 10))\n            else iteration(n / 10, p)\n        }\n        iteration(n,\
    \ 1)", "        var p = 1l\n        var digit = 0l\n        while (n > 0) {\n\
    \            digit = n % 10\n            if (digit % 2 == 1) p *= digit\n    \
    \        n /= 10\n        }\n        return p", "        def f(x : Long, y : Long)\
    \ : Long = if (x % 2 == 1) x * y else y\n        n.toString.toList.map(_.asDigit.toLong).foldLeft(1l)(f)",
  "      var accum : Long = 1\n      var m = n\n      while (m > 0) {\n        val\
    \ r = m % 10\n        if (r % 2 == 1) accum *= r\n        m /= 10\n      }\n \
    \     accum", "        var product = 1l\n        var nn = n\n        while (nn\
    \ > 0) {\n            val d = nn % 10\n            if (d % 2 == 1) {\n       \
    \         product *= d\n            }\n            nn /= 10\n        }\n     \
    \   product", "        var p = 1l\n        for (i <- n.toString()) {\n       \
    \     if (i.toInt % 2 == 1) p *= i.toInt - '0'\n        }\n        p", "     \
    \   var r : Long = 1l\n        var t : Long = n\n        while (t > 0) {\n   \
    \         val d : Long = t % 10\n            if (d % 2 == 1) {\n             \
    \   r *= d\n            }\n            t /= 10\n        }\n        return r",
  "        if (n == 0) return 0\n        var product = 1l\n        var current = n\n\
    \        while (current > 0) {\n            val digit = current % 10\n       \
    \     if (digit % 2 == 1) product *= digit\n            current /= 10\n      \
    \  }\n        return product", "    \tvar result = 1l\n    \tvar copy = n\n  \
    \  \twhile (copy > 0) {\n    \t\tvar digit = copy % 10\n    \t\tif (digit % 2\
    \ == 1) {\n    \t\t\tresult *= digit\n    \t\t}\n    \t\tcopy /= 10\n    \t}\n\
    \    \treturn result", "        if (n == 0) return 0\n        val dig = (n % 10).toInt\n\
    \        if (dig % 2 == 0) return digits(n / 10)\n        else return digits(n\
    \ / 10) * dig", "        if (n == 0)\n            0\n        else {\n        \
    \    val d = n % 10\n            if (d % 2 == 0)\n                digits(n / 10)\n\
    \            else\n                d * digits(n / 10)\n        }", "        var\
    \ result = 1l\n        n.toString.foreach(result *= _ - '0')\n        result",
  "    \tvar t = n\n    \tvar p = 1l\n    \twhile (t > 0) {\n    \t\tval d = t % 10\n\
    \    \t\tif (d % 2 == 1) p *= d\n    \t\tt /= 10\n    \t}\n    \tp", "       \
    \ var prod = 1l\n        var temp = n\n        while (temp > 0) {\n          \
    \  val digit = temp % 10\n            if (digit % 2 == 1) prod *= digit\n    \
    \        temp /= 10\n        }\n        prod", '        n.toString.map(_.asDigit).filter(_
    % 2 == 1).product', "        def digitsAux(n : Long, accum : Long) : Long = n\
    \ match {\n            case 0 => accum\n            case x if x % 2 == 1 => digitsAux(n\
    \ / 10, accum * (n % 10))\n            case x => digitsAux(n / 10, accum)\n  \
    \      }\n        digitsAux(n, 1)", "        if (n == 0) return 0\n        val\
    \ d = n % 10\n        if (d % 2 == 0) return digits(n / 10)\n        return d\
    \ * digits(n / 10)", "        if (n == 0)\n            return 0\n        var x\
    \ = n\n        var ans = 1\n        while (x > 0) {\n            val d = x % 10\n\
    \            if (d % 2 == 1)\n                ans *= d\n            x /= 10\n\
    \        }\n        return ans", '        if (n == 0) 0 else if (n % 2 == 1) n
    % 10 * digits(n / 10) else digits(n / 10)', "        var k = n\n        var result\
    \ = 1l\n        while (k > 0) {\n            val d = k % 10\n            if (d\
    \ % 2 == 1) result *= d\n            k /= 10\n        }\n        return result",
  "        var p = 1l\n        var f = n\n        while (f > 0) {\n            val\
    \ d = f % 10\n            if (d % 2 == 1) p *= d\n            f /= 10\n      \
    \  }\n        p", '        n.toString.map(_.asDigit).filter(_ % 2 == 1).product',
  "      var p = 1L\n      var r = n\n      while (r > 0) {\n        val d = r % 10\n\
    \        if (d % 2 == 1) {\n          p *= d\n        }\n        r /= 10\n   \
    \   }\n      p", "    \tdef digits_acc(n : Long, acc : Long) : Long = {\n    \t\
    \tif (n == 0) acc\n    \t\telse {\n    \t\t\tval c = n % 10\n    \t\t\tval acc\
    \ = if (c % 2 == 1) acc * c else acc\n    \t\t\tdigits_acc(n / 10, acc)\n    \t\
    \t}\n    \t}\n    \tdigits_acc(n, 1)", "    \tvar (p, r) = (1l, 0l)\n    \tvar\
    \ (i, n2) = (0l, n)\n    \twhile (n2 > 0) {\n    \t\tr = n2 % 10\n    \t\tn2 /=\
    \ 10\n    \t\tif (r % 2 == 1) {\n    \t\t\tp *= r\n    \t\t}\n    \t}\n    \tp",
  "    \tvar product = 1l\n    \tfor (i <- 0 to n.toString.length - 1) {\n    \t\t\
    val digit = n.toString.charAt(i).asDigit\n    \t\tif (digit % 2 == 1) {\n    \t\
    \t\tproduct *= digit\n    \t\t}\n    \t}\n    \treturn product", '        n.toString.map(i
    => i.asDigit).filter(i => i % 2 == 1).foldLeft(1l)((s, i) => s * i)', '        return
    (n / 100) * ((n % 100) / 10) * (n % 10)', "        var m = n\n        var result\
    \ = 1l\n        while (m > 0) {\n            val digit = m % 10\n            if\
    \ (digit % 2 == 1) result *= digit\n            m /= 10\n        }\n        return\
    \ result", "        var current = n\n        var result = 1l\n        while (current\
    \ > 0) {\n            val digit = current % 10\n            if (digit % 2 == 1)\
    \ result *= digit\n            current /= 10\n        }\n        return result",
  "        val s = n.toString\n        if (s.length() == 1) {\n            if (s.charAt(0)\
    \ % 2 == 1) return n\n            else return 0\n        }\n        val t = digits(s.substring(1).toLong)\n\
    \        if (s.charAt(0) % 2 == 1) return s.charAt(0).toLong * t\n        else\
    \ return t"]
stop_tokens:
- "\n    }\n"
