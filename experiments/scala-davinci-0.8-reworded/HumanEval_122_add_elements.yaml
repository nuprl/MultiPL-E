name: HumanEval_122_add_elements
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a non-empty list of integers arr and an integer k, return\n    //\
  \ the sum of the elements with at most two digits from the first k elements of arr.\n\
  \    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong,\
  \ 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l))\n\
  \    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1\
  \ <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
  \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
  \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
  \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
  \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
  \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n \
  \   assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
  \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n  \
  \  assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
completions: ["        var result : Long = 0\n        for (i <- 0 until min(k, arr.length).toInt)\
    \ {\n            var n : Long = arr(i)\n            var d : Long = 1\n       \
    \     while (n >= 10) {\n                n /= 10\n                d *= 10\n  \
    \          }\n            result += arr(i) - n * d\n        }\n        return\
    \ result", '        return arr.take(k.toInt).filter(x => x < 100).sum', '        arr.take(k.toInt).filter(x
    => x <= 99).sum', "        var num : Long = 0\n        for (i <- 1 to k.toInt)\
    \ {\n            if (arr(i - 1) >= 10 && arr(i - 1) < 100) num += arr(i - 1)\n\
    \        }\n        return num", "        // Vars for storing the sum of elements\
    \ with at most two digits\n        var sum : Long = 0l\n        // Vars for storing\
    \ the count of elements with at most two digits\n        var cnt : Long = 0l\n\
    \        // Iterating through the list\n        for (e <- arr) {\n           \
    \ // Checking if the number has at most two digits\n            if (e < 100l)\
    \ {\n                // Adding number to the sum\n                sum += e\n \
    \               // Incrementing the count\n                cnt += 1l\n       \
    \     }\n            // Breaking the loop if the count reaches k\n           \
    \ if (cnt == k) break\n        }\n        return sum", "        // This will store\
    \ our answer.\n        var answer : Long = 0l.toLong\n        // Iterate through\
    \ the list.\n        for (i <- 0 until arr.length) {\n            // If the current\
    \ number is less than 100 and the iterator is less than k, then add it to the\
    \ answer.\n            if (arr(i) < 100 && i < k) {\n                answer +=\
    \ arr(i)\n            }\n        }\n        // Return our answer.\n        return\
    \ answer", "        def f(x : Long) : Long = {\n            if (x < 10) return\
    \ x\n            if (x < 100) return (x % 10 + x / 10)\n            return x %\
    \ 10 + x / 10 % 10 + x / 100\n        }\n        return arr.slice(0, k.toInt).map(f).sum",
  '        (arr.filter(e => e <= 99).take(k.toInt)).sum', "        // Implement this\
    \ function!\n        var l = List[Long]()\n        var i = 0\n        var sum\
    \ = 0\n        while (i < k) {\n          var n = arr(i)\n          var d = 0\n\
    \          while (n > 0) {\n            n /= 10\n            d += 1\n        \
    \  }\n          if (d <= 2) {\n            l = l :+ arr(i)\n          }\n    \
    \      i += 1\n        }\n        for (e <- l) {\n          sum += e\n       \
    \ }\n        return sum", "        // Fill in the blanks\n        // arr.slice(0,\
    \ k).foldLeft(0l) {\n        //     (a, b) => if (b.toString.length <= 2) a +\
    \ b else a\n        // }\n        return arr.slice(0, k.toInt).filter(p => p.toString.length\
    \ <= 2).sum", "        // Given a list arr and an integer k, return\n        //\
    \ the sum of the first k elements of arr.\n        def sum(arr : List[Long], k\
    \ : Long) : Long = {\n            if (k == 0) 0\n            else (arr.head) +\
    \ sum(arr.tail, k - 1)\n        }\n        // Given a list arr and an integer\
    \ k, return\n        // the sum of the elements with at most two digits\n    \
    \    // of the first k elements of arr.\n        def sum2(arr : List[Long], k\
    \ : Long) : Long = {\n            if (k == 0) 0\n            else if (arr.head\
    \ < 100) arr.head + sum2(arr.tail, k - 1)\n            else sum2(arr.tail, k -\
    \ 1)\n        }\n        // Given a list arr and an integer k, return\n      \
    \  // the sum of the first k elements of arr.\n        // However, if this sum\
    \ is greater than 10,000, return 10,000 instead.\n        def sum3(arr : List[Long],\
    \ k : Long) : Long = {\n            val s = sum(arr, k)\n            if (s > 10000)\
    \ 10000\n            else s\n        }\n        // Memoize the results to speed\
    \ up execution.\n        val memoizedSum2 = memoize(sum2 _)\n        val memoizedSum3\
    \ = memoize(sum3 _)\n        // Given a list arr and an integer k, return\n  \
    \      // the sum of the elements with at most two digits\n        // of the first\
    \ k elements of arr.\n        // However, if this sum is greater than 10,000,\
    \ return 10,000 instead.\n        def sum4(arr : List[Long], k : Long) : Long\
    \ = {\n            val s = memoizedSum2(arr, k)\n            if (s > 10000) 10000\n\
    \            else s\n        }\n        // Given a list arr and an integer k,\
    \ return\n        // the sum of the first k elements of arr.\n        // However,\
    \ if this sum is greater than 10,000, return 10,000 instead.\n        // Also,\
    \ if k is at least the length of arr, return the sum\n        // of the elements\
    \ with at most two digits of arr.\n        def", "      // This code is wrong,\
    \ although it appears to satisfy the constraints in the question.\n      // If\
    \ the input is a list containing only a single element, say 111l, the first digit\
    \ gets\n      // rounded down to 11l.\n      var s = 0l\n      for (i <- 0l until\
    \ k) {\n        if (arr(i.toInt) > 99l) {\n          s += 11l\n        } else\
    \ if (arr(i.toInt) > 9l) {\n          s += 1l\n        } else {\n          s +=\
    \ arr(i.toInt)\n        }\n      }\n      s", "        // Write your code here\n\
    \        val t = arr.take(k.toInt)\n        var t2 = t.filter(x => (x < 100))\n\
    \        var t3 = t2.map(x => (x % 10))\n        var r = t3.reduce((x, y) => (x\
    \ + y))\n        //return r\n        return r", "        // Change this code\n\
    \        var res = 0L\n        for (i <- 0 until k.toInt) if (arr(i) <= 99) res\
    \ += arr(i)\n        res", "        // Implement this function\n        0", " \
    \       var res : Long = 0\n        for (i <- 0 to (k - 1).toInt) {\n        \
    \    val n = arr(i)\n            if (n < 100 && n > -100) res += n\n        }\n\
    \        res", "        var sum : Long = 0l\n        var count : Long = 0l\n \
    \       while (count < k) {\n            val element : Long = arr(count.toInt)\n\
    \            if (element < 10l) {\n                sum += element\n          \
    \  } else if (element < 100l) {\n                sum += element\n            }\n\
    \            count += 1l\n        }\n        return sum", "        // We are going\
    \ to use the mutable version of the list due to performance reasons\n        val\
    \ arr_m = arr.toBuffer\n        // We going to define a function that takes a\
    \ number and returns the number of digits\n        // that it contains. Here for\
    \ the sake of readability, we decided to use a recursive function\n        def\
    \ get_len(num : Long) : Long = {\n            // We make sure that the length\
    \ of the number we are trying to get its digits cannot be longer than 99\n   \
    \         // as we are working with integers only with at most two digits\n  \
    \          if (num <= 99 && num >= 10) {\n                2\n            } else\
    \ if (num < 10 && num >= 0) {\n                1\n            } else {\n     \
    \           -1\n            }\n        }\n        // Here is where the magic happens.\
    \ As we are going to be iterating over a mutable list, we are\n        // going\
    \ to be using mutable indices as well\n        var i = 0\n        // We are going\
    \ to have a sum variable to collect the result\n        var sum = 0l\n       \
    \ // We need a loop that runs from 0 to k but checks the length of the list arr_m\
    \ to break the loop if it\n        // reached the end of the list\n        while\
    \ (i < arr_m.length && i < k) {\n            // We get the length of the element\
    \ that we are trying to add to the sum\n            val len = get_len(arr_m(i))\n\
    \            // We check if the length is 1 or 2 and proceed\n            if (len\
    \ == 1 || len == 2) {\n                // We calculate the sum\n             \
    \   sum += arr_m(i)\n            }\n            // We increment the index\n  \
    \          i += 1\n        }\n        // We return the result\n        sum", " \
    \       require(arr.length > 0 && k <= arr.length)\n        arr.take(k.toInt).map(x\
    \ => if (x > 9 && x < 100) x else 0).sum", "        val result = arr.slice(0,\
    \ k.toInt).foldLeft(0l)((sum, element) => if (element < 100) sum + element else\
    \ sum)\n        result", "        // Solution 1:\n        // Recursion\n     \
    \   // Type:\n        // Solution\n        arr.zipWithIndex.filter(t => t._2 <\
    \ k).filter(t => 0 <= t._1 && t._1 <= 99).map(t => t._1).sum", "        var s\
    \ = 0l\n        for (i <- arr.indices) {\n            if (i + 1 <= k) {\n    \
    \            val x = arr(i)\n                if (x < 100) s += x\n           \
    \ }\n        }\n        s", '        arr.filter(n => n < 100).take(k.toInt).sum',
  '        return arr.map(e => if (e < 100l) e else 0l).take(k.toInt).sum', "    \
    \    val arrl = arr.take(k.toInt)\n        val filtered = arrl.filter { x => x\
    \ >= 0 && x < 10 }\n        filtered.foldLeft(0l)(_ + _)", "        arr.foldLeft(0L)((accum,\
    \ elem) => {\n            if (elem < 100 && k > 0) {\n                k - 1\n\
    \                accum + elem\n            } else {\n                accum\n \
    \           }\n        })", "        var x : Long = 0\n        var y : Long =\
    \ 0\n        while(arr.nonEmpty) {\n            if(arr.head >= 10 && arr.head\
    \ < 100) {\n                x += arr.head\n            }\n            else if(arr.head\
    \ < 10) {\n                y += arr.head\n            }\n            arr.tail\n\
    \        }\n        return x + y", "        // Your code here\n        var l =\
    \ arr.slice(0, k.toInt)\n        var ans = 0l\n        for (i <- l) {\n      \
    \      if (i.toString.length <= 2) ans += i\n        }\n        ans", "      var\
    \ sum : Long = 0\n      var limit : Long = k\n      for (item <- arr) {\n    \
    \    if (limit > 0) {\n          if (item < 100) {\n            sum += item\n\
    \          }\n          limit -= 1\n        }\n      }\n      return sum", " \
    \       var sum = 0l\n        for (i <- 0 to k.toInt - 1) {\n            val elem\
    \ = arr(i)\n            if (elem < 100) {\n                sum += elem\n     \
    \       }\n        }\n        return sum", "        // Given k, return the number\
    \ of digits of its binary representation\n        def binaryDigits(n : Long) :\
    \ Long = {\n            ceil(log(n)/log(2)).toLong\n        }\n        // Given\
    \ k, return the number of digits of its decimal representation\n        def decimalDigits(n\
    \ : Long) : Long = {\n            ceil(log(n)/log(10)).toLong\n        }\n   \
    \     // Given k, return the maximum number of elements with at most k decimal\
    \ digits\n        def maxElements(n : Long) : Long = {\n            if (n == 0)\
    \ 1\n            else if (n == 1) 9\n            else if (n == 2) 99\n       \
    \     else pow(10, n).toLong - 1\n        }\n        // Given k, return the maximum\
    \ number of elements with at most k binary digits\n        def maxBinaryElements(n\
    \ : Long) : Long = {\n            if (n == 0) 1\n            else if (n == 1)\
    \ 2\n            else if (n == 2) 3\n            else pow(2, n).toLong - 1\n \
    \       }\n        // Implementation\n        val maxDecimalDigits = min(binaryDigits(k),\
    \ decimalDigits(arr.max))\n        val decimalElems = min(maxDecimalDigits, maxElements(maxDecimalDigits))\n\
    \        val binaryElems = min(k, maxBinaryElements(binaryDigits(k)))\n      \
    \  val result = arr.filter(x => x <= decimalElems).sum + arr.filter(x => x > decimalElems\
    \ && x <= binaryElems).sum\n        result", "        // your code here\n    \
    \    val a = arr.slice(0, k.toInt).filter(x => x >= 0 && x < 100).sum\n      \
    \  return a", "        val b = arr.map(p => p.toString.length < 3).zipWithIndex.filter(p\
    \ => p._1).map(p => p._2)\n        return arr.zipWithIndex.filter(p => b.contains(p._2)).map(p\
    \ => p._1).sum", '        return arr.take(k.toInt).filter(x => x < 100).sum',
  '        return arr.take(k.toInt).filter(i => i <= 99).sum', '        arr.filter(x
    => x.toString.length <= 2).take(k.toInt).sum', "        // Your Code Here\n  \
    \      arr.take(k.toInt).filter(x => x >= 10 && x < 100).sum", "        // Write\
    \ your code here\n        // return sum of elements\n        arr.take(k.toInt).filter(_\
    \ < 100).sum", '        arr.zipWithIndex.filter(p => p._2 < k).filter(p => p._1
    <= 99l).map(p => p._1).sum', "        // Write your code here\n        arr.filter(_.toString.length\
    \ <= 2).take(k.toInt).sum", '        return arr.take(k.toInt).map(x => x/10).sum',
  '      ???', "        // We could just go through the list and add the ones with\
    \ at most two digits.\n        // var result : Long = 0\n        // for (i <-\
    \ 0 until k.toInt) {\n        //     if (arr(i) < 100) {\n        //         result\
    \ += arr(i)\n        //     }\n        // }\n        // return result\n      \
    \  // But we could also \n        var k_i : Int = k.toInt\n        var result\
    \ : Long = 0\n        var count : Int = 0\n        var current : Long = -1\n \
    \       while (count < k_i) {\n            if (current == -1) {\n            \
    \    current = arr(count)\n                if (current < 100) {\n            \
    \        result += current\n                }\n                count += 1\n  \
    \          } else {\n                if (current < 100) {\n                  \
    \  result += current\n                }\n                current = -1\n      \
    \      }\n        }\n        if (current < 100) {\n            result += current\n\
    \        }\n        return result", '        return arr.filter(x => x.toString.length
    <= 2).slice(0, k.toInt).sum', "        // only binary search will work.\n    \
    \    // if the length is 1, return the integer itself\n        // else, find the\
    \ nearest element to k, then sum elements below it.\n        def recursion(m :\
    \ Long, arr : List[Long]) : Long = {\n            if (m == 1) arr.head\n     \
    \       else {\n                val mid = floor(arr.length.toDouble / 2).toLong\n\
    \                val (left, right) = arr.splitAt(mid.toInt)\n                if\
    \ (left.length == k) {\n                    val (leftbelow, leftabove) = left.partition(_\
    \ < 10)\n                    val (rightbelow, rightabove) = right.partition(_\
    \ < 10)\n                    if (leftbelow.length == m) leftbelow.sum\n      \
    \              else if (leftabove.length == m) leftabove.sum\n               \
    \     else if (rightbelow.length == m) rightbelow.sum\n                    else\
    \ rightabove.sum\n                }\n                else if (left.length < k)\
    \ recursion(m, right)\n                else recursion(m, left)\n            }\n\
    \        }\n        recursion(k, arr)", "        // Write your code here\n   \
    \     return (1l)", '      arr.take(k.toInt).foldLeft(0l.toLong)((acc, x) => acc
    + x)', "        // Define the method here\n        def loop(arr : List[Long],\
    \ sum : Long, count : Long) : Long = {\n            if (count == k) return sum\n\
    \            val digit = arr(count.toInt).toString.length\n            if (digit\
    \ == 1 || digit == 2) loop(arr, sum + arr(count.toInt), count + 1)\n         \
    \   else loop(arr, sum, count + 1)\n        }\n        loop(arr, 0, 0)", "   \
    \     var total = 0l\n        for (i <- arr.slice(0, k.toInt)) {\n           \
    \ if (i < 100) {\n                total += i\n            }\n        }\n     \
    \   return total", '        ???', '        arr.take(k.toInt).filter(_.toString.length
    <= 2).sum', "        var sum = 0l.toLong\n        var counter = 0l.toLong\n  \
    \      while (counter < k) {\n            var curNum = arr(counter.toInt)\n  \
    \          if (curNum < 100) {\n                sum += curNum\n            }\n\
    \            counter += 1\n        }\n        return sum", "        // Write your\
    \ code here\n        val x = arr.slice(0, k.toInt)\n        var res = 0l\n   \
    \     for (i <- x) {\n            if (i >= 10) {\n                res += i.toString.length\
    \ match {\n                    case 2 => i\n                    case 3 => i /\
    \ 10\n                }\n            } else {\n                res += i\n    \
    \        }\n        }\n        res", '        arr.slice(0, k.toInt).filter(x =>
    x < 100).sum', "        var current_index = 0\n        var sum = 0l\n        while\
    \ (current_index < k && current_index < arr.length) {\n            val current_value\
    \ = arr(current_index)\n            if (current_value >= 100 || current_value\
    \ < 10) {\n                sum += current_value\n            }\n            current_index\
    \ += 1\n        }\n        return sum", '        arr.zipWithIndex.filter { case
    (_, index) => index < k}.map { case (x, _) => if (x < 100) x else 0}.sum', '        return
    0', "        // Edge cases\n        if (arr.isEmpty) return 0\n        // Obtain\
    \ the initial state\n        val kSum = arr.take(k.toInt).sum\n        val arrRev\
    \ = arr.reverse\n        // Take the sum of the first k elements\n        val\
    \ kSumRev = arrRev.take(k.toInt).sum\n        // Take the sum of the first k elements\
    \ that have at most two digits\n        val kLowSum = arr.take(k.toInt).filter(e\
    \ => e < 100).sum\n        val kLowSumRev = arrRev.take(k.toInt).filter(e => e\
    \ < 100).sum\n        // Add the kth element\n        val kthElement = arr(k.toInt)\n\
    \        // If the kth element is greater than or equal to 100 then return the\
    \ previous sum\n        if (kthElement >= 100) return kSum\n        // The first\
    \ k elements have at most two digits\n        else if (kthElement < 100 && kLowSum\
    \ == kSum) return kSum + kthElement\n        // The last k elements have at most\
    \ two digits\n        else if (kthElement < 100 && kLowSumRev == kSumRev) return\
    \ kSum + kthElement\n        // All else\n        else return kSum", "       \
    \ def addElementsHelper(arr : List[Long], k : Long, acc : Long) : Long = {\n \
    \           if (k == 0) acc\n            else {\n                val n = arr.head\n\
    \                val nStr = n.toString\n                if (nStr.length <= 2)\
    \ addElementsHelper(arr.tail, k - 1, acc + n)\n                else addElementsHelper(arr.tail,\
    \ k - 1, acc)\n            }\n        }\n        addElementsHelper(arr, k, 0)",
  "        // There are three cases.\n        // Case 1. k is even.\n        // Case\
    \ 2. k is odd.\n        // Case 3. k is 2 or 1.\n        // We could use a stack\
    \ to store the first k elements of arr.\n        val stack = Stack[Long]()\n \
    \       var count = 0l\n        var sum = 0l\n        for (element <- arr) {\n\
    \            if (count == k) {\n                break\n            }\n       \
    \     stack.push(element)\n            count += 1\n        }\n        for (element\
    \ <- stack) {\n            if (element < 100l) {\n                sum += element\n\
    \            }\n        }\n        sum", '        arr.take(k.toInt).filter(x =>
    x < 100).sum', "        def helper(arr : List[Long], k : Long, acc : Long) : Long\
    \ = {\n            if (k == 0l) acc\n            else if (arr.head >= 10l && arr.head\
    \ < 100l) helper(arr.tail, k - 1l, acc + arr.head)\n            else if (arr.head\
    \ < 10l) helper(arr.tail, k - 1l, acc + arr.head)\n            else helper(arr.tail,\
    \ k, acc)\n        }\n        helper(arr, k, 0l)", '        return (arr.take(k.toInt).map((x
    : Long) => if (x > 99) 100 else x).sum)', "        // Write your solution here\n\
    \        return -1l", "        var result : Long = 0\n        for (i <- 0 to k.toInt\
    \ - 1) {\n            if (arr(i) >= 10 && arr(i) < 100) result += arr(i)\n   \
    \     }\n        return result", '        arr.filter(x => x < 100).take(k.toInt).sum',
  "        var ret : Long = 0l\n        for (i <- arr.indices) {\n            if (i\
    \ < k) {\n                val n = arr(i)\n                if (n < 100l) ret +=\
    \ n\n            }\n        }\n        ret", "        val res = 0l\n        val\
    \ digits : Map[Long, Long] = Map()\n        for (e <- arr) {\n            digits.put(e,\
    \ e.toString.length)\n        }\n        for (e <- arr.take(k.toInt)) {\n    \
    \        if (digits(e) > 2) {\n                res += e\n            }\n     \
    \   }\n        res", '        return arr.filter((x : Long) => x < 100l).take(k.toInt).sum',
  "        var l : Long = 0\n        for (i <- 0 until k.toInt) {\n            val\
    \ s : String = arr(i).toString\n            if (s.length <= 2) {\n           \
    \     l += arr(i)\n            }\n        }\n        return l", "        if (k\
    \ > arr.length) {\n            throw new IllegalArgumentException(\"k cannot be\
    \ greater than the length of arr.\")\n        }\n        else {\n            var\
    \ sum : Long = 0\n            for (i <- arr.indices) {\n                if (i\
    \ < k && arr(i) < 100) {\n                    sum += arr(i)\n                }\n\
    \            }\n            return sum\n        }", "        var sum : Long =\
    \ 0l\n        var n : Long = 0l\n        for (x <- arr.take(k.toInt)) {\n    \
    \        if (x < 100l) {\n                sum += x\n                n += 1l\n\
    \            }\n        }\n        return sum + k - n", "        // Implement\
    \ this function\n        var result = 0l\n        for (i <- 0 until min(k, arr.length))\
    \ {\n            if (arr(i) < 100) result += arr(i)\n        }\n        return\
    \ result", "        if (k > arr.length) k = arr.length\n        var sum = 0l\n\
    \        for (i <- 0 until k.toInt) {\n            if (arr(i) < 100) sum += arr(i)\n\
    \        }\n        return sum", "        // Write your code here\n        val\
    \ ans = new ArrayBuffer[Long]\n        for (i <- arr.indices) {\n            if\
    \ (i < k) {\n                if (arr(i) < 100) {\n                    ans += arr(i)\n\
    \                }\n            }\n        }\n        ans.sum", "        var res\
    \ : Long = 0\n        for (i <- 0 to k.toInt - 1) {\n            val n = arr(i)\n\
    \            val d1 = n % 10\n            val d2 = n / 10 % 10\n            val\
    \ d3 = n / 100 % 10\n            if (d2 == 0 && d3 == 0) res += n\n          \
    \  else if (d3 == 0) res += d1 + d2\n            else res += d1\n        }\n \
    \       res", "        //\n        //\n        //\n        //\n        //\n  \
    \      //\n        //\n        //\n        //\n        //\n        //\n      \
    \  //\n        //\n        //\n        //\n        //\n        //\n        //\n\
    \        //\n        //\n        //\n        //\n        //\n        //\n    \
    \    //\n        //\n        //\n        //\n        //\n        //\n        //\n\
    \        //\n        //\n        //\n        //\n        //\n        //\n    \
    \    //\n        //\n        //\n        //\n        //\n        //\n        //\n\
    \        //\n        //\n        //\n        //\n        //\n        //\n    \
    \    //\n        //\n        //\n        //\n        //\n        //\n        //\n\
    \        //\n        //\n        //\n        //\n        //\n        //\n    \
    \    //\n        //\n        //\n        //\n        //\n        //\n        //\n\
    \        //\n        //\n        //\n        //\n        //\n        //\n    \
    \    //\n        //\n        //\n        //\n        //\n        //\n        //\n\
    \        //\n        //\n        //\n        //\n        //\n        //\n    \
    \    //\n        //\n        //\n        //\n        //\n        //\n        //\n\
    \        //\n        //\n        //\n        //\n        //\n        //\n    \
    \    //\n        //\n        //\n        //\n        //\n        //\n        //\n\
    \        //\n        //\n        //\n        //\n        //\n        //\n    \
    \    //\n        //\n        //\n        //\n        //\n        //\n        //\n\
    \        //\n        //\n        //\n        //\n        //\n        //\n    \
    \    //\n        //\n        //\n        //\n        //\n        //\n        //\n\
    \        //\n        //\n        //\n        //\n        //\n        //\n    \
    \    //\n        //\n        //\n        //\n        //\n        //\n        //\n\
    \        //\n        //\n        //\n        //\n        //\n        //\n    \
    \    //\n        //\n        //\n        //\n        //\n        //\n        //\n\
    \        //\n        //\n        //\n        //\n        //\n        //\n    \
    \    //\n        //\n        //\n       ", "        // Recursive Solution:\n \
    \       def addElementsRec(arr : List[Long], k : Long, accum : Long) : Long =\
    \ {\n            if (k == 0) accum\n            else if (arr.head < 10) addElementsRec(arr.tail,\
    \ k - 1, accum + arr.head)\n            else if (arr.head < 100) addElementsRec(arr.tail,\
    \ k - 1, accum + arr.head)\n            else addElementsRec(arr.tail, k - 1, accum)\n\
    \        }\n        addElementsRec(arr, k, 0)", "        var sum = 0l\n      \
    \  var count = 0l\n        for (x <- arr) {\n            if (count < k) {\n  \
    \              val string_rep = x.toString\n                if (string_rep.length\
    \ <= 2) {\n                    sum += x\n                }\n                count\
    \ += 1\n            }\n        }\n        return sum", "        var total : Long\
    \ = 0\n        for (num <- arr.take(k.toInt)) {\n            if (num < 100) total\
    \ += num\n        }\n        return total", "        var sum : Long = 0\n    \
    \    for (i <- 0 until k.toInt) {\n            val x = arr(i)\n            if\
    \ (x < 100) {\n                sum += x\n            }\n        }\n        return\
    \ sum", "        def solve(list : List[Long], k : Long, result : Long) : Long\
    \ = {\n            if (k == 0) result\n            else {\n                val\
    \ current = list.head\n                if (current < 10) solve(list.tail, k -\
    \ 1, result + current)\n                else if (current < 100) solve(list.tail,\
    \ k - 1, result + current % 10 + current / 10)\n                else solve(list.tail,\
    \ k - 1, result + current % 10 + current / 10 % 10 + current / 100)\n        \
    \    }\n        }\n        solve(arr, k, 0)", "        var sum : Long = 0\n  \
    \      for (i <- 0 until min(k, arr.length)) {\n            if (arr(i) < 100)\
    \ sum += arr(i)\n        }\n        return sum", "        var k : Long = k;\n\
    \        var s : Long = 0;\n        for (a <- arr) {\n            if (a < 100)\
    \ {\n                s += a;\n                k -= 1;\n                if (k ==\
    \ 0) return s;\n            }\n        }\n        return s;", "        //\n  \
    \      // your code goes here\n        //\n        arr.take(k.toInt).filter(_\
    \ <= 99).sum", "        var result : Long = 0l\n        for (i <- 0 until min(k,\
    \ arr.length)) {\n            if (arr(i) < 100) result += arr(i)\n        }\n\
    \        return result", "        // We will use the mutable buffer acc.\n   \
    \     // We initialize acc to be an empty buffer.\n        // If we have 1 <=\
    \ n <= 9, then (n / 10) is 0.\n        // So, if n is a one-digit number, then\
    \ we will have (acc += n).\n        // If we have 10 <= n <= 99, then (n / 10)\
    \ is 1.\n        // So, if n is a two-digit number, then we will have (acc +=\
    \ n).\n        // If we have 100 <= n <= 999, then (n / 10) is 10.\n        //\
    \ So, if n is a three-digit number, then we will have (n % 10) is added to acc.\n\
    \        // We add the elements to acc and then we will sum the elements of acc.\n\
    \        // We will use the mutable buffer acc.\n        // We initialize acc\
    \ to be an empty buffer.\n        val acc = new ListBuffer[Long]\n        // We\
    \ iterate through the first k elements of arr.\n        for (i <- arr.take(k.toInt))\
    \ {\n            // If i is a one-digit number, then we will have (acc += i).\n\
    \            if (i <= 9) {\n                acc += i\n            }\n        \
    \    // If i is a two-digit number, then we will have (acc += i).\n          \
    \  else if (i <= 99) {\n                acc += i\n            }\n            //\
    \ If i is a three-digit number, then we will have (i % 10) is added to acc.\n\
    \            else {\n                acc += (i % 10)\n            }\n        }\n\
    \        // sum(acc) is the answer.\n        acc.sum", "        // Implement this\
    \ function\n        0", '        return 0l', "        // Write your code here\n\
    \        var ans : Long = 0\n        for (i <- 0 until min(k, arr.length).toInt)\
    \ {\n            if (arr(i) < 100) ans += arr(i)\n        }\n        ans", " \
    \       var a = arr.filter(x => x >= 1 && x <= 99)\n        if (a.length < k)\
    \ return 0\n        a.sorted.take(k.toInt).sum", '        arr.take(k.toInt).filter(x
    => x < 100).sum', "        //arr.take(k.toInt).filter(x => x <= 9l || x >= 100l).sum\n\
    \        arr.take(k.toInt).map(x => if (x >= 100l) 100l else x).sum", "      \
    \  var c : Long = 0\n        var i : Long = 0\n        while(i < k && i < arr.length)\
    \ {\n            if(arr(i.toInt).toString.length <= 2) {\n                c +=\
    \ arr(i.toInt)\n            }\n            i += 1\n        }\n        return c",
  "        // Write your code here\n        null", "        val l = arr.take(k.toInt).filter(x\
    \ => x < 100).sum\n        l", '        return arr.take(k.toInt).filter(i => i
    < 100l).sum', "        var sum : Long = 0\n        for (n <- arr) {\n        \
    \    if (n <= 99) {\n                sum += n\n            }\n        }\n    \
    \    sum", '        return arr.filter(n => n < 100l).slice(0, k.toInt).sum', " \
    \       var sum = 0l.toLong\n        for (i <- 0l.toLong until k) {\n        \
    \    if (arr(i.toInt).toString.length <= 2) sum += arr(i.toInt)\n        }\n \
    \       return sum", '        arr.take(k.toInt).map(_.toString.length).map(n =>
    if (n <= 2) arr(n-1) else 0).sum', '        arr.map(a => a.toString.length).take(k.toInt).filter(a
    => a <= 2).map(a => a.toInt).map(a => a).sum', "        var sum = 0l\n       \
    \ for (i <- arr.take(k.toInt).filter(x => x < 100)) sum += i\n        return sum",
  "        val sum = arr.foldLeft(0l)((acc, e) => {\n            if (e < 100) acc\
    \ + e\n            else acc\n        })\n        return sum", "        // Type\
    \ your solution here\n        0", "        //\n        // Implement this function\n\
    \        //\n        val list = arr.sorted\n        val first = list.take(k.toInt)\n\
    \        var sum = 0\n        for (num <- first) {\n            val numlen = num.toString.length\n\
    \            if (numlen == 1 || numlen == 2) {\n                sum += num\n \
    \           }\n        }\n        sum", '        arr.take(k.toInt).filter(_ <
    100).sum', "        // Implement this function\n        var t_arr = new ArrayBuffer[Long]\n\
    \        var t_sum = 0l\n        for (a <- arr) {\n            if (a >= 0 && a\
    \ < 100) {\n                t_arr += a\n            }\n        }\n        for\
    \ (i <- 0 until min(k, t_arr.length).toInt) {\n            t_sum += t_arr(i)\n\
    \        }\n        return t_sum", '        return arr.map(_.toString.length).zip(arr).filter(_._1
    <= 2).map(_._2).take(k.toInt).sum', "        // >>> addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l))\n        // (24l)\n        // >>> addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (5l))\n        // (30l)\n        // >>> addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (6l))\n        // (33l)\n        // >>> addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (7l))\n        // (41l)\n        // >>> addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (8l))\n        // (49l)\n        // >>> addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (9l))\n        // (58l)\n        // >>> addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l", "        //\
    \ Fill in the body of this function\n        val s = arr.slice(0, k.toInt)\n \
    \       s.foldLeft(0l)((x, y) => {\n            if (y >= 10l && y < 100l) {\n\
    \                x + y\n            } else {\n                x\n            }\n\
    \        })", "        def addElementsIter(arr : List[Long], k : Long, acc : Long)\
    \ : Long = arr match {\n            case Nil => acc\n            case x :: xs\
    \ => if (x.toString.length > 2) addElementsIter(xs, k, acc) else addElementsIter(xs,\
    \ k - 1, acc + x)\n        }\n        addElementsIter(arr, k, 0)", "        //\
    \ We will accumulate the answer in this var.\n        var answer : Long = 0\n\
    \        // We need to iterate through the list\n        // up to the given number\
    \ of elements.\n        // Iterate through the list using a standard for loop.\n\
    \        for (i <- 0 until k.toInt) {\n            // Now each element is an Int\
    \ so we need to convert that\n            // to a string then to a Long.\n   \
    \         var elem : Long = arr(i).toString.toLong\n            // If the element\
    \ is less than 10 then add it to our answer.\n            if (elem < 10) {\n \
    \               answer += elem\n            }\n            // Otherwise if it\
    \ is less than 100 then also add it.\n            else if (elem < 100) {\n   \
    \             answer += elem\n            }\n        }\n        // Return the\
    \ answer.\n        return answer", "        var sum = 0l\n        for (i <- 0\
    \ until k.toInt) {\n            if (arr(i) > 9 && arr(i) < 100) {\n          \
    \      sum += arr(i)\n            }\n        }\n        return sum", "       \
    \ var result : Long = 0\n        for (i <- 0 until k.toInt) {\n            var\
    \ x : String = arr(i).toString\n            if (x.length <= 2) {\n           \
    \     result += arr(i)\n            }\n        }\n        return result", "  \
    \      // We have to take the k first elements from arr, then we have to keep\
    \ the element which have at most 2 digits.\n        var r = arr.take(k.toInt).filter((n)\
    \ => n.toString.length <= 2)\n        return r.sum", "        // Fill this in.\n\
    \        arr.take(k.toInt).filter(i => i < 100).sum", "        // Good luck!\n\
    \        arr.take(k.toInt).filter(x => x >= 10 && x < 100).sum", "        // Good\
    \ luck!\n        return 0;", "        //return (0l)\n        return arr.filter(x\
    \ => x < 100).take(k.toInt).sum", "        // Fill up this function body\n   \
    \     // 'arr' is a list of integers\n        // 'k' will be a long\n        //\
    \ 'return' the sum of the elements with at most two digits from the first k elements\
    \ of arr\n        0", '        ???', "        var sum : Long = 0l\n        for\
    \ (i <- 0l to k - 1l) {\n            if (arr(i.toInt).toString.length() <= 2)\
    \ {\n                sum += arr(i.toInt)\n            }\n        }\n        return\
    \ sum", "      // Recursive solution\n      val k_int = k.toInt\n      def recur(i\
    \ : Int, l : List[Long], acc : Long) : Long =\n        if (i >= k_int) acc\n \
    \       else {\n          val e = l(i)\n          val new_acc = if (e >= 100)\
    \ acc + e else acc\n          recur(i + 1, l, new_acc)\n        }\n      recur(0,\
    \ arr, 0)", "        var r = 0l\n        var count = 0l\n        for (i <- arr.take(k.toInt))\
    \ {\n            if (i < 100) {\n                r += i\n                count\
    \ += 1\n            }\n            if (count == k) return r\n        }\n     \
    \   return r", '        arr.slice(0, k.toInt).filter(x => x < 100l).sum', "  \
    \      // Your code here\n        def get(list : List[Long], n : Long) : Long\
    \ = {\n            n match {\n                case n if n <= 0 => 0\n        \
    \        case n if n == 1 => list.head\n                case n => get(list.tail,\
    \ n - 1)\n            }\n        }\n        def isTwoDigit(num : Long) : Boolean\
    \ = {\n            num >= 10 && num < 100\n        }\n        def solve(list :\
    \ List[Long], n : Long, sum : Long) : Long = {\n            if (n == 0) return\
    \ sum\n            val c = get(list, n)\n            val next = if (isTwoDigit(c))\
    \ c else 0\n            solve(list, n - 1, sum + next)\n        }\n        return\
    \ solve(arr, k, 0)", "        var sum : Long = 0\n        for (i <- 0 until min(k,\
    \ arr.length).toInt) {\n            val n = arr(i)\n            val d = trunc(log10(n)\
    \ + 1)\n            if (d <= 2) {\n                sum += n\n            }\n \
    \       }\n        return sum", "        // Iterate over the entire list of elements.\n\
    \        // For each element, find the length of the element in characters.\n\
    \        // If it's 3 characters or greater, skip it.\n        // If it's less\
    \ than 3 characters, increment the total.\n        // If the total is greater\
    \ than k, return the sum.\n        var n = 0l\n        var sum = 0l\n        arr.foreach(a\
    \ => {\n            if (n < k) {\n                if (a.toString.length < 3) {\n\
    \                    sum += a\n                    n += 1\n                }\n\
    \            }\n        })\n        sum", "        // Implemented in Java\n  \
    \      null.asInstanceOf[Long]", '        arr.slice(0, k.toInt).filter(x => x
    < 100).sum', "        var s = 0l\n        for (i <- arr) {\n            if (i\
    \ < 100) {\n                s += i\n            }\n        }\n        return s",
  "        // your code here\n        var ans = 0l;\n        for (i <- 0 until k.toInt)\
    \ {\n            var num = arr(i);\n            while (num > 0) {\n          \
    \      ans += num % 10;\n                num /= 10;\n            }\n        }\n\
    \        return ans;", "        // Implemenet here\n        var sum = 0L\n   \
    \     for (i <- 0 to (arr.length - 1)) {\n            if (i >= k) {\n        \
    \        return sum\n            }\n            if (arr(i) >= 100) {\n       \
    \         sum += arr(i) / 100\n            } else if (arr(i) >= 10) {\n      \
    \          sum += arr(i)\n            } else {\n                sum += arr(i)\n\
    \            }\n        }\n        return sum", "        // Write your code here\n\
    \        var result : Long = 0\n        val len : Long = arr.length\n        for\
    \ (i <- 0 until k.toInt) {\n            val curr : Long = arr(i.toInt)\n     \
    \       if (curr < 100) result += curr\n        }\n        return result", " \
    \       // Big N time and Big N space solution\n        // var sum : Long = 0l\n\
    \        // for (i <- 0l until k) if (arr(i.toInt) < 100l) sum += arr(i.toInt)\n\
    \        // return sum\n        // Big k time and Big N space solution\n     \
    \   // return arr.slice(0, k.toInt).filter(x => x < 100l).sum\n        // Big\
    \ 1 time and Big N space solution\n        // Only need to check first k elements\
    \ so .take(k.toInt)\n        // Converting the element to a String and then the\
    \ length to an Int to check if length is less than or equal to 2\n        // Return\
    \ the filtered list summed up\n        arr.take(k.toInt).filter(x => x.toString.length\
    \ <= 2).sum", "        // Variable Declaration(s)\n        var sum : Long = 0\n\
    \        var count : Long = 0\n        // Processing\n        while (count < k)\
    \ {\n            if (arr(count.toInt).toString.length <= 2) sum += arr(count.toInt)\n\
    \            count += 1\n        }\n        // Return Statement\n        return\
    \ sum", "        def loop(arr : List[Long], k : Long, sum : Long) : Long = arr\
    \ match {\n            case x :: xs => if (k == 0) sum else if (abs(x) < 100)\
    \ loop(xs, k - 1, sum + x) else loop(xs, k - 1, sum)\n            case Nil =>\
    \ sum\n        }\n        loop(arr, k, 0)", "        if (k <= 0) 0\n        else\
    \ {\n            val a = arr.map(_.toString).map(_.size).map(min(_, 2)).sum\n\
    \            a + addElements(arr.drop(1), k - 1)\n        }", "        // My code\
    \ starts here\n        return arr.take(k.toInt).filter(x => x < 100).sum\n   \
    \     // My code ends here", "        var result : Long = 0l\n        val len\
    \ = arr.length\n        for (i <- 0 to k.toInt - 1) {\n            val str = arr(i).toString\n\
    \            if (str.length <= 2) {\n                result += arr(i)\n      \
    \      }\n        }\n        return result", "        val newArr = arr.map(x =>\
    \ if (x > 99) x / 100 else x)\n        newArr.take(k.toInt).foldLeft(0l)(_ + _)",
  "        val arr2 = arr.take(k.toInt)\n        def addElementsHelper(arr : List[Long],\
    \ k : Long, sum : Long) : Long = {\n            if (k == 0) sum\n            else\
    \ {\n                val max = arr.max\n                val n = max.toString.length\n\
    \                if (n <= 2) addElementsHelper(arr.filter(_ != max), k - 1, sum\
    \ + max)\n                else addElementsHelper(arr.filter(_ != max), k, sum)\n\
    \            }\n        }\n        addElementsHelper(arr2, k, 0)", "        var\
    \ result : Long = 0l\n        var i : Long = 0l\n        while (i < k) {\n   \
    \         result += if (arr(i.toInt).toString.length <= 2) arr(i.toInt) else 0\n\
    \            i += 1\n        }\n        return result", "        // Good luck!\n\
    \        val sums = new Array[Long](arr.length + 1)\n        for (i <- 0 until\
    \ arr.length) {\n            sums(i + 1) = sums(i) + arr(i)\n        }\n     \
    \   var result = 0l\n        for (i <- 1 to k.toInt) {\n            if (arr(i\
    \ - 1) < 100) result += arr(i - 1)\n        }\n        result", "        // Your\
    \ code here\n        var sum : Long = 0\n        for (i <- 0 until min(k, arr.length).toInt)\
    \ {\n            var number : Long = arr(i)\n            var largest : Long =\
    \ 0\n            while (number > 0) {\n                largest = number % 10\n\
    \                number /= 10\n            }\n            if (largest > 0) {\n\
    \                sum += arr(i)\n            }\n        }\n        return sum",
  "      // Fill in the code here\n      arr.filter(e => e > 9 && e < 100).take(k.toInt).sum",
  '        ???', '        return 0l.toLong', "        var total = 0l\n        var\
    \ counter = 0l\n        for (i <- arr) {\n            if (i < 100) {\n       \
    \         total += i\n                counter += 1\n            }\n          \
    \  if (counter == k) {\n                return total\n            }\n        }\n\
    \        return total", "        var total = 0l\n        for (x <- arr.slice(0,\
    \ k.toInt)) {\n            if (x < 100) total += x\n        }\n        return\
    \ total", "        // Your code here\n        0", '        return arr.map(x =>
    if (x < 100) x else 0).take(k.toInt).sum', '        return 0l', "        // Good\
    \ luck!\n        arr.take(k.toInt).map(_.toString.length).zip(arr.take(k.toInt)).filter(_._1\
    \ <= 2).map(_._2).sum", '        0', "        // Fit the documentation.\n    \
    \    // Partition arr into three lists: list of at most two digits,\n        //\
    \ list of more than two digits and of less than ten digits, and\n        // list\
    \ of greater than ten digits.\n        var (arr_two_digits, arr_more_digits, arr_ten_digits)\
    \ = arr.partition({e => e <= 99})\n        // Partition arr_more_digits into two\
    \ lists: list of less than hundred digits and\n        // list of more than hundred\
    \ digits.\n        var (arr_more_digits_less_hundred, arr_more_digits_more_hundred)\
    \ = arr_more_digits.partition({e => e <= 99})\n        // Partition arr_ten_digits\
    \ into two lists: list of less than thousand digits and\n        // list of more\
    \ than thousand digits.\n        var (arr_ten_digits_less_thousand, arr_ten_digits_more_thousand)\
    \ = arr_ten_digits.partition({e => e <= 999})\n        // If k is less than the\
    \ size of arr_two_digits, take the first k elements of arr_two_digits and the\
    \ first\n        // k elements of arr_more_digits_less_hundred and the first k\
    \ elements of arr_ten_digits_less_thousand.\n        // If k is greater than the\
    \ size of arr_two_digits, take the first k elements of arr_two_digits and the\
    \ first\n        // k elements of arr_more_digits_less_hundred and the first k\
    \ elements of arr_ten_digits_less_thousand,\n        // and the first k elements\
    \ of arr_more_digits_more_hundred and the first k elements of arr_ten_digits_more_thousand.\n\
    \        if (k <= arr_two_digits.size) {\n            // Sum the first k elements\
    \ of arr_two_digits and the first k elements of arr_more_digits_less_hundred\n\
    \            // and the first k elements of arr_ten_digits_less_thousand.\n  \
    \          return arr_two_digits.slice(0, k.toInt).sum + arr_more_digits", " \
    \       if (k < 1) {\n            return 0l\n        }\n        val first_k =\
    \ arr.take(k.toInt)\n        first_k.foldLeft(0l)((a, b) => a + b.toString.toList.map(_.toString.toInt).filter(x\
    \ => x > 0 && x < 100).foldLeft(0)((c, d) => c + d))", "      (1l to k).map(x\
    \ => {\n        val y = arr(x.toInt - 1)\n        if (y < 100) y else 0\n    \
    \  }).sum", "        // Solution:\n        val l = arr.length\n        val ll\
    \ = arr.take(k.toInt).filter((x : Long) => x >= 10l.toLong && x < 100l.toLong).sum\n\
    \        val lr = arr.take(k.toInt).filter((x : Long) => x < 10l.toLong).sum\n\
    \        return ll + lr", "      def recurse(list : List[Long], sum : Long, index\
    \ : Long) : Long = {\n        list match {\n          case Nil => sum\n      \
    \    case head :: tail => {\n            if (head < 100) {\n              if (index\
    \ < k) {\n                sum + head + recurse(tail, sum, index + 1)\n       \
    \       } else {\n                sum\n              }\n            } else {\n\
    \              if (index < k) {\n                sum + recurse(tail, sum, index\
    \ + 1)\n              } else {\n                sum\n              }\n       \
    \     }\n          }\n        }\n      }\n      recurse(arr, 0, 0)", "       \
    \ val num = arr.take(k.toInt).filter(x => x >= 10 && x < 100).reduce(_ + _)\n\
    \        return num", "        // Write your code here\n        0", "        //\
    \ Fill in the code here\n        0l", "        var result : Long = 0\n       \
    \ for (i <- 1 to min(k, arr.length).toInt) {\n            if (arr(i - 1) < 100)\
    \ result += arr(i - 1)\n        }\n        return result", "        var total\
    \ : Long = 0\n        for (i <- 0 until min(k, arr.length)) {\n            val\
    \ item = arr(i)\n            if (item < 100) total += item\n        }\n      \
    \  return total", "        // This worked but was not as fast as the solution\
    \ below.\n        // arr.filter(x => x < 100l).take(k.toInt).sum\n        var\
    \ sum = 0\n        for (i <- 0 until k.toInt) {\n            if (arr(i) < 100l)\
    \ {\n                sum += arr(i)\n            }\n        }\n        sum", " \
    \       // Declare a mutable variable for the sum.\n        var sum : Long = 0l\n\
    \        // Loop k times.\n        for (i <- 0l until k) {\n            // Select\
    \ the ith element of arr.\n            val arr_i : Long = arr(i.toInt)\n     \
    \       // If the element is less than 99, add it to the sum.\n            if\
    \ (arr_i < 99l) {\n                sum += arr_i\n            }\n        }\n  \
    \      // Return the sum.\n        return sum", "        var total : Long = 0l\n\
    \        var i : Long = 0l\n        while (i < k) {\n            if (arr(i.toInt).toString.length\
    \ <= 2) {\n                total += arr(i.toInt)\n            }\n            i\
    \ += 1l\n        }\n        return total", '        (arr.take(k.toInt).filter(x
    => x <= 99l).sum)', '      arr.map(x => if (x >= 100l) 100l else x).take(k.toInt).sum',
  "        // Type your code here\n        return arr.slice(0, k.toInt).map(x => if\
    \ (x < 100) x else 0).sum", "        // If we want to solve this problem without\
    \ mutation we must use a loop.\n        // Addition is just an associative operation\
    \ so we can concatenate all the\n        // elements in the list, and then sum\
    \ the list.\n        // Once we know the sum of the entire list, we can subtract\
    \ the elements\n        // we don't want.\n        // Remember that subtracting\
    \ the first k elements is the same as subtracting\n        // the last len(arr)\
    \ - k elements.\n        // Time complexity: O(n)\n        // Space complexity:\
    \ O(1)\n        def addElementsLoop(arr : List[Long], k : Long, sum : Long) :\
    \ Long = {\n            arr match {\n                case Nil => sum\n       \
    \         case h :: t => {\n                    val newSum = sum + h\n       \
    \             addElementsLoop(t, k, newSum)\n                }\n            }\n\
    \        }\n        val len = arr.length\n        val totalSum = addElementsLoop(arr,\
    \ k, 0)\n        val lastInd = len - 1\n        // To implement without mutation,\
    \ we must again use a loop.\n        // Time complexity: O(n)\n        // Space\
    \ complexity: O(1)\n        def addElementsLoop2(arr : List[Long], k : Long, sum\
    \ : Long, ind : Int) : Long = {\n            if (ind < len - k) {\n          \
    \      val h = arr(ind)\n                val newSum = sum - h\n              \
    \  addElementsLoop2(arr, k, newSum, ind + 1)\n            } else sum\n       \
    \ }\n        addElementsLoop2(arr, k, totalSum, 0)", "        var sum = 0l.toLong\n\
    \        for (i <- arr.take(k.toInt)) {\n            if (i < 100) {\n        \
    \        sum += i\n            }\n        }\n        return sum", '        arr.filter(x
    => x.toString.length <= 2).sum', "        var sum : Long = 0l\n        for (i\
    \ <- 0 until min(k, arr.length)) {\n            if (arr(i) < 100) {\n        \
    \        sum += arr(i)\n            }\n        }\n        return sum", "     \
    \   // Define your body and calculate the result value accordingly\n        //\
    \ Return a Long or Int, according to the question type\n        return k.toInt",
  "        var list = arr.sorted\n        var sum = 0l\n        for (i <- 0 until\
    \ k.toInt) {\n            var n = list(i)\n            if (n.toString.length <=\
    \ 2) {\n                sum += n\n            }\n        }\n        return sum",
  "        // Return the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n        arr.take(k.toInt).filter(x => (x < 100)).sum", " \
    \       var result : Long = 0\n        for (i <- 0 until min(k, arr.length).toInt)\
    \ {\n            if (arr(i) < 100) result += arr(i)\n        }\n        return\
    \ result", '        throw new NotImplementedError("Problem.addElements")', '        return
    arr.take(k.toInt).filter(x => x.toString.length <= 2).sum', "        // Write\
    \ your code here\n        arr.slice(0, k.toInt).filter(a => a < 100).sum", " \
    \       val result = new StringBuilder\n        var sum = 0l\n        for (i <-\
    \ 0 until k.toInt) {\n            val p = arr(i).toString\n            if (p.length\
    \ <= 2) {\n                sum += arr(i)\n            }\n        }\n        return\
    \ sum", "        // Start by simply adding the top k numbers and then subtracting\n\
    \        // those that are 3 digits, then return answer\n        var result =\
    \ 0l\n        var i = 0\n        while (i < k) {\n            result += arr(i)\n\
    \            i += 1\n        }\n        i = 0\n        while (i < k) {\n     \
    \       if (arr(i) > 99) result -= arr(i)\n            i += 1\n        }\n   \
    \     return result", "        val valids = arr.filter((x) => (x >= 0 && x <=\
    \ 99))\n        valids.take(k.toInt).sum", "        var a = 0l\n        for (i\
    \ <- 0 until k.toInt) {\n            val n = arr(i)\n            if (n < 100)\
    \ a += n\n        }\n        a", '        arr.filter(x => x <= 99).slice(0, k.toInt).sum',
  "        var sum : Long = 0\n        for (i <- 0 to k.toInt - 1) {\n           \
    \ if (arr(i) >= 10 && arr(i) < 100) sum += arr(i)\n        }\n        return sum",
  "        def aux(arr : List[Long], k : Long, acc : Long) : Long = {\n          \
    \  if (k == 0) return acc\n            else if (arr.head.toString.length <= 2)\
    \ aux(arr.tail, k - 1, acc + arr.head)\n            else aux(arr.tail, k - 1,\
    \ acc)\n        }\n        aux(arr, k, 0)", "        if (k == 0) {\n         \
    \   return 0\n        }\n        val head = arr.head\n        if (head >= 100)\
    \ {\n            return addElements(arr.tail, k - 1)\n        }\n        head\
    \ + addElements(arr.tail, k - 1)", "        // Good luck!\n        0", "     \
    \   var result : Long = 0l\n        for (i <- 0 until k.toInt) {\n           \
    \ if (abs(arr(i)).toString.length <= 2) result += arr(i)\n        }\n        return\
    \ result", '        arr.zipWithIndex.filter(x => x._2 < k && x._1.toString.length
    < 3).map(x => x._1).sum', "        // Good luck!\n        arr.slice(0, k.toInt).map\
    \ { x =>\n            if (x < 100) x\n            else if (x < 1000) x % 100\n\
    \            else x % 1000\n        }.sum", "        // did not use the first\
    \ k elements of arr\n        // the problem statement is too ambiguous:\n    \
    \    //  - what is the maximum number of digits we want to add?\n        //  -\
    \ what is the convention for adding digits, i.e. are we using\n        //    the\
    \ same digits in each number and adding them together, or\n        //    are we\
    \ adding the numbers themselves?\n        //  - is the first element of the list\
    \ the first element to add,\n        //    or is it the last element?\n      \
    \  //  - if we are using the same digits in each number, how do we\n        //\
    \    deal with carry?\n        //  - if we are adding the numbers themselves,\
    \ how do we deal with\n        //    integers that have more than 2 digits?\n\
    \        // this is the latter case, where we are adding the numbers\n       \
    \ // themselves and we ignore the digits beyond the first 2\n        def solve(arr\
    \ : List[Long], acc : Long) : Long = {\n            arr match {\n            \
    \    case Nil => acc\n                case x :: Nil => acc + x % 100\n       \
    \         case x :: y :: Nil => acc + x % 100 + y % 100\n                case\
    \ x :: y :: xs => solve(xs, acc + x % 100 + y % 100)\n            }\n        }\n\
    \        solve(arr, 0)", "        var sum : Long = 0l.toLong\n        for (i <-\
    \ 0 until k.toInt) {\n            var num : Long = arr(i)\n            if (num\
    \ < 100) {\n                sum += num\n            }\n        }\n        return\
    \ sum", "        // Write your code here\n        0", '        arr.take(k.toInt).filter(x
    => x < 100).foldLeft(0l)(_ + _)', "        // Implemented in REPL.it\n       \
    \ // Example:\n        // >>> Problem.addElements((List[Long](111l.toLong, 21l.toLong,\
    \ 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)),\
    \ (4l))\n        // (24l)\n        // Note that I can't think of a more efficient\
    \ way to do this.\n        var sum = 0l\n        var index = 0\n        while\
    \ (index < k && arr(index) >= 10) {\n            sum += arr(index)\n         \
    \   index += 1\n        }\n        sum"]
stop_tokens:
- "\n    }\n"
