name: HumanEval_74_total_match
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Write a function that accepts two lists of strings and returns the list\
  \ that has \n    // total number of chars in the all strings of the list less than\
  \ the other list.\n    // if the two lists have the same number of chars, return\
  \ the first list.\n    // Examples\n    // >>> totalMatch((List[String]()), (List[String]()))\n\
  \    // (List[String]())\n    // >>> totalMatch((List[String](\"hi\", \"admin\"\
  )), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\", \"Hi\"))\n   \
  \ // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\", \"\
  hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"))\n    //\
  \ >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"hi\"\
  , \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    // >>> totalMatch((List[String](\"\
  4\")), (List[String](\"1\", \"2\", \"3\", \"4\", \"5\")))\n    // (List[String](\"\
  4\"))\n    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String]\
  \ = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
  \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
  hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\",\
  \ \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
  hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"))));\n\
  \    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\"\
  , \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
  hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\",\
  \ \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
  hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
  hi\", \"admin\")), (List[String](\"hI\", \"hi\", \"hii\"))).equals((List[String](\"\
  hi\", \"admin\"))));\n    assert(totalMatch((List[String]()), (List[String](\"this\"\
  ))).equals((List[String]())));\n    assert(totalMatch((List[String](\"this\")),\
  \ (List[String]())).equals((List[String]())));\n    }\n\n}\n"
completions: ["        // Your answer here\n        null", "        // Print out list\n\
    \        def printList(lst : List[String]) : Unit = {\n            println(\"\
    (List[String](\" + lst.mkString(\", \") + \"))\")\n        }\n        val total1\
    \ = lst1.map(_.length).sum\n        val total2 = lst2.map(_.length).sum\n    \
    \    if (total1 < total2) printList(lst1)\n        else if (total1 > total2) printList(lst2)\n\
    \        else printList(lst1)\n        lst1", "        if (lst1.length == 0 &&\
    \ lst2.length == 0) {\n            return lst1\n        }\n        if (lst1.length\
    \ == 0 && lst2.length != 0) {\n            return lst2\n        }\n        if\
    \ (lst1.length != 0 && lst2.length == 0) {\n            return lst1\n        }\n\
    \        var sum1 = 0\n        for (l <- lst1) {\n            sum1 += l.length\n\
    \        }\n        var sum2 = 0\n        for (l <- lst2) {\n            sum2\
    \ += l.length\n        }\n        if (sum1 == sum2) {\n            return lst1\n\
    \        }\n        if (sum1 < sum2) {\n            return lst1\n        }\n \
    \       return lst2", "        if (lst1.map(_.length).sum < lst2.map(_.length).sum)\
    \ lst1\n        else lst2", "        def recur(lst1 : List[String], lst2 : List[String],\
    \ total1 : Int, total2 : Int) : List[String] = {\n            if (lst1.isEmpty\
    \ && lst2.isEmpty) return Nil\n            else if (lst1.isEmpty) return recur(lst1,\
    \ lst2.tail, total1, total2 + lst2.head.length)\n            else if (lst2.isEmpty)\
    \ return recur(lst1.tail, lst2, total1 + lst1.head.length, total2)\n         \
    \   else {\n                val total1_next = total1 + lst1.head.length\n    \
    \            val total2_next = total2 + lst2.head.length\n                if (total1_next\
    \ < total2_next) return lst1\n                else if (total1_next > total2_next)\
    \ return lst2\n                else return lst1\n            }\n        }\n  \
    \      return recur(lst1, lst2, 0, 0)", "        var lst1Len = 0\n        var\
    \ lst2Len = 0\n        for (i <- lst1) lst1Len += i.length\n        for (i <-\
    \ lst2) lst2Len += i.length\n        if (lst1Len <= lst2Len) lst1 else lst2",
  "        val total1 = lst1.foldLeft(0)((acc, str) => acc + str.length)\n       \
    \ val total2 = lst2.foldLeft(0)((acc, str) => acc + str.length)\n        if (total1\
    \ == total2) lst1\n        else if (total1 < total2) lst1\n        else lst2",
  "        var chars1 = 0\n        var chars2 = 0\n        for (str <- lst1) chars1\
    \ += str.length\n        for (str <- lst2) chars2 += str.length\n        if (chars1\
    \ <= chars2) lst1 else lst2", "        // Fill Up this function body\n       \
    \ // `List[String]()` is a placeholder for a correct return type\n        var\
    \ sumLst1 = 0\n        var sumLst2 = 0\n        for (i <- lst1) {\n          \
    \  sumLst1 += i.length\n        }\n        for (i <- lst2) {\n            sumLst2\
    \ += i.length\n        }\n        if (sumLst1 < sumLst2)\n            lst1\n \
    \       else if (sumLst1 > sumLst2)\n            lst2\n        else\n        \
    \    lst1", "        var num1 = 0\n        var num2 = 0\n        for (i <- lst1)\
    \ {\n            num1 += i.length\n        }\n        for (i <- lst2) {\n    \
    \        num2 += i.length\n        }\n        if (num1 <= num2) lst1 else lst2",
  "        var total1 = 0\n        var total2 = 0\n        for (i <- lst1) total1\
    \ += i.length\n        for (i <- lst2) total2 += i.length\n        if (total1\
    \ < total2) lst1\n        else if (total1 > total2) lst2\n        else lst1",
  "        def total(lst : List[String]) : Int = lst match {\n            case Nil\
    \ => 0\n            case x :: xs => x.length + total(xs)\n        }\n        if\
    \ (total(lst1) < total(lst2)) lst1 else lst2", "        if (lst1.size == 0 &&\
    \ lst2.size == 0) {\n            return List[String]()\n        }\n        var\
    \ total1 = 0\n        var total2 = 0\n        for (s <- lst1) {\n            total1\
    \ += s.size\n        }\n        for (s <- lst2) {\n            total2 += s.size\n\
    \        }\n        if (total1 < total2) {\n            return lst1\n        }\n\
    \        else if (total1 > total2) {\n            return lst2\n        }\n   \
    \     else {\n            return lst1\n        }", "        // Write your code\
    \ here\n        if (lst1.length == 0) return lst2\n        if (lst2.length ==\
    \ 0) return lst1\n        var cnt1 = 0\n        var cnt2 = 0\n        lst1.foreach(a\
    \ => cnt1 += a.length)\n        lst2.foreach(a => cnt2 += a.length)\n        if\
    \ (cnt1 == cnt2) return lst1\n        if (cnt1 < cnt2) return lst1\n        return\
    \ lst2", "        // Fill Up this function body\n        // `lst1` contains strings\n\
    \        // `lst2` contains strings\n        // if lst1 has more chars, return\
    \ lst1\n        // if lst2 has more chars, return lst2\n        // otherwise,\
    \ return lst1\n        var sum1 = 0\n        var sum2 = 0\n        for (i <- lst1)\
    \ {\n            sum1 += i.length\n        }\n        for (i <- lst2) {\n    \
    \        sum2 += i.length\n        }\n        if (sum1 > sum2) {\n           \
    \ return lst1\n        } else if (sum1 < sum2) {\n            return lst2\n  \
    \      } else {\n            return lst1\n        }", "        if (lst1.isEmpty\
    \ && lst2.isEmpty) return lst1\n        val sum1 = lst1.foldLeft(0)((x, y) =>\
    \ x + y.length)\n        val sum2 = lst2.foldLeft(0)((x, y) => x + y.length)\n\
    \        if (sum1 <= sum2) lst1 else lst2", "        // Fill Up this function\
    \ body\n        // `lst1` and `lst2` are lists of strings.\n        // `lst1`\
    \ has less or same number of characters as `lst2`.\n        // if the total number\
    \ of characters of `lst1` is less than `lst2`,\n        // return `lst1`, else\
    \ return `lst2`.\n        // if both lists have the same number of characters,\
    \ return `lst1`.\n        def total(lst : List[String]) : Int = {\n          \
    \  lst.foldLeft(0)((acc, str) => acc + str.length)\n        }\n        def isLessOrEqual(lst1\
    \ : List[String], lst2 : List[String]) : Boolean = {\n            if (total(lst1)\
    \ <= total(lst2)) true else false\n        }\n        if (isLessOrEqual(lst1,\
    \ lst2)) lst1 else lst2", "        var c1 = 0\n        for (i <- lst1) c1 += i.length\n\
    \        var c2 = 0\n        for (i <- lst2) c2 += i.length\n        if (c1 ==\
    \ c2) lst1\n        else if (c1 < c2) lst1\n        else lst2", "        // Fill\
    \ Up this function body\n                // Computing the total number of chars\
    \ in all the strings of a list\n                def totalChars (lst : List[String])\
    \ : Int = {\n                        if (lst.isEmpty) 0\n                    \
    \    else lst.head.length + totalChars(lst.tail)\n                }\n        \
    \        if (totalChars(lst1) < totalChars(lst2)) lst1\n                else if\
    \ (totalChars(lst1) > totalChars(lst2)) lst2\n                else lst1", '        return
    if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1 else lst2', "      \
    \  // Fill Up this function body\n                // method 1\n        // if (lst1.map(x\
    \ => x.length).sum == lst2.map(x => x.length).sum) lst1\n        // else if (lst1.map(x\
    \ => x.length).sum < lst2.map(x => x.length).sum) lst1\n        // else lst2\n\
    \        \n        // method 2\n        if (lst1.map(x => x.length).sum < lst2.map(x\
    \ => x.length).sum) lst1\n        else lst2", "        var count = 0\n       \
    \ for (str <- lst1) {\n            count += str.length\n        }\n        var\
    \ count2 = 0\n        for (str <- lst2) {\n            count2 += str.length\n\
    \        }\n        if (count <= count2) lst1 else lst2", "        if (lst1.length\
    \ == 0 && lst2.length == 0)\n            return lst1\n        var sum1 = 0\n \
    \       var sum2 = 0\n        lst1.foreach(sum1 += _.length)\n        lst2.foreach(sum2\
    \ += _.length)\n        if (sum1 <= sum2)\n            return lst1\n        return\
    \ lst2", "        // You need to add the proper return type\n        // You need\
    \ to add the proper return type\n        def totalMatch(lst1 : List[String], lst2\
    \ : List[String], count1 : Int, count2 : Int) : List[String] = {\n           \
    \ if (lst1.isEmpty) {\n                if (count1 > count2) {\n              \
    \      return lst2\n                } else {\n                    return lst1\n\
    \                }\n            } else {\n                totalMatch(lst1.tail,\
    \ lst2, count1 + lst1.head.length, count2)\n            }\n        }\n       \
    \ if (lst1.isEmpty) {\n            return lst2\n        } else {\n           \
    \ if (lst2.isEmpty) {\n                return lst1\n            } else {\n   \
    \             return totalMatch(lst1, lst2, 0, 0)\n            }\n        }",
  "        if (lst1.length == 0) return lst2\n        if (lst2.length == 0) return\
    \ lst1\n        val sum1 = lst1.foldLeft(0)((a, b) => a + b.length)\n        val\
    \ sum2 = lst2.foldLeft(0)((a, b) => a + b.length)\n        if (sum1 < sum2) return\
    \ lst1\n        return lst2", "        val lst1Total = lst1.foldLeft(0)((a, b)\
    \ => a + b.length)\n        val lst2Total = lst2.foldLeft(0)((a, b) => a + b.length)\n\
    \        if (lst1Total < lst2Total) lst1 else lst2", "        // Fill Up this\
    \ function body\n        // `import scala.math._` may be usefull\n        // Do\
    \ not use any builtin List functions.\n        var charCountLst1 = 0\n       \
    \ var charCountLst2 = 0\n        for (x <- lst1) {\n            charCountLst1\
    \ += x.length\n        }\n        for (x <- lst2) {\n            charCountLst2\
    \ += x.length\n        }\n        if (charCountLst1 == charCountLst2) lst1\n \
    \       else if (charCountLst1 < charCountLst2) lst1\n        else lst2", "  \
    \      if (lst1.length == 0) return lst2\n        if (lst2.length == 0) return\
    \ lst1\n        var t1 = 0\n        var t2 = 0\n        for (str <- lst1) {\n\
    \            t1 += str.length\n        }\n        for (str <- lst2) {\n      \
    \      t2 += str.length\n        }\n        if (t1 < t2) return lst1\n       \
    \ else return lst2", "        if (lst1.isEmpty && lst2.isEmpty) return lst1\n\
    \        else if (lst1.isEmpty) return lst2\n        else if (lst2.isEmpty) return\
    \ lst1\n        var totalCharsOfList1 = 0\n        var totalCharsOfList2 = 0\n\
    \        for (word <- lst1) totalCharsOfList1 += word.length\n        for (word\
    \ <- lst2) totalCharsOfList2 += word.length\n        if (totalCharsOfList1 ==\
    \ totalCharsOfList2) return lst1\n        else if (totalCharsOfList1 < totalCharsOfList2)\
    \ return lst1\n        else return lst2", "        def helper(lst1 : List[String],\
    \ lst2 : List[String], s1 : Int, s2 : Int) : Boolean = lst1 match {\n        \
    \    case Nil => s1 <= s2\n            case x :: xs => helper(xs, lst2, s1 + x.length,\
    \ s2)\n        }\n        if (helper(lst1, lst2, 0, 0)) lst1 else lst2", "   \
    \     if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1\n        else\
    \ lst2", "        val totalChars1 = lst1.foldLeft(0)((total, str) => total + str.length)\n\
    \        val totalChars2 = lst2.foldLeft(0)((total, str) => total + str.length)\n\
    \        if (totalChars1 == totalChars2) lst1\n        else if (totalChars1 <\
    \ totalChars2) lst1\n        else lst2", "        var lst1total = 0\n        var\
    \ lst2total = 0\n        for (x <- lst1) {\n            lst1total += x.length\n\
    \        }\n        for (x <- lst2) {\n            lst2total += x.length\n   \
    \     }\n        if (lst1total < lst2total) lst1 else lst2", "        // We can't\
    \ just use List.length because the empty list is a singleton object,\n       \
    \ // which is always equal to itself.  It has length 0.\n        // So we also\
    \ need to check for empty list.\n        def totalChars(lst : List[String]) :\
    \ Int = {\n            if (lst.isEmpty) 0\n            else lst.map(_.length).sum\n\
    \        }\n        if (totalChars(lst1) <= totalChars(lst2)) lst1\n        else\
    \ lst2", "        // Your Code Here\n        ???", "        // this function will\
    \ check if the string is made of a single char\n        def isSingle(str : String)\
    \ : Boolean = (str.length == 1)\n        // this function will add an int to a\
    \ list of integers\n        def addToLst(lst : List[Int], elem : Int) : List[Int]\
    \ = {\n            if (lst.isEmpty) List(elem)\n            else lst.head + elem\
    \ :: addToLst(lst.tail, elem)\n        }\n        // this function will add a\
    \ list of integers to another list of integers\n        def addLstToLst(lst1 :\
    \ List[Int], lst2 : List[Int]) : List[Int] = {\n            if (lst1.isEmpty)\
    \ lst2\n            else if (lst2.isEmpty) lst1\n            else addToLst(lst1,\
    \ lst2.head) ::: addLstToLst(lst1, lst2.tail)\n        }\n        // this function\
    \ will return the number of chars in each string of a list\n        def countNums(lst\
    \ : List[String]) : List[Int] = {\n            if (lst.isEmpty) List()\n     \
    \       else if (isSingle(lst.head)) addToLst(countNums(lst.tail), 1)\n      \
    \      else addToLst(countNums(lst.tail), lst.head.length)\n        }\n      \
    \  // this function will add a list of numbers together\n        def totalNums(lst\
    \ : List[Int]) : Int = {\n            if (lst.isEmpty) 0\n            else lst.head\
    \ + totalNums(lst.tail)\n        }\n        // this function will return the total\
    \ of each individual element\n        def totalInd(lst : List[Int]) : List[Int]\
    \ = {\n            if (lst.isEmpty) List()\n            else totalNums(lst.head)\
    \ :: totalInd(lst.tail)\n        }\n        // this function will return the sum\
    \ of a list of numbers\n        def total(lst : List[Int]) : Int = {\n       \
    \     if (lst.isEmpty", "        // Fill Up this function body\n        // `totalMatch`\
    \ should be recursive\n        if(lst1.length == 0 && lst2.length == 0)\n    \
    \    {\n            return lst1\n        }\n        if(lst1.map(_.length).sum\
    \ == lst2.map(_.length).sum)\n        {\n            return lst1\n        }\n\
    \        if(lst1.map(_.length).sum > lst2.map(_.length).sum)\n        {\n    \
    \        return lst2\n        }\n        else\n        {\n            return lst1\n\
    \        }", "        // Fill Up this function body\n        // `lst1` and `lst2`\
    \ have type List[String]\n        // `totalMatch` has type List[String]\n    \
    \    def countChars(list : List[String]) : Int = {\n            var total : Int\
    \ = 0\n            for (i <- list) {\n                total += i.length\n    \
    \        }\n            total\n        }\n        val count1 = countChars(lst1)\n\
    \        val count2 = countChars(lst2)\n        if (count1 > count2) lst2\n  \
    \      else if (count1 < count2) lst1\n        else lst1", "        // Fill Up\
    \ this function body\n        // `lst1` will always be either shorter or equal\
    \ length to `lst2`\n        var counter1 = 0\n        var counter2 = 0\n     \
    \   for (i <- lst1) {\n            counter1 += i.length\n        }\n        for\
    \ (i <- lst2) {\n            counter2 += i.length\n        }\n        if (counter1\
    \ == counter2) {\n            return lst1\n        } else if (counter1 < counter2)\
    \ {\n            return lst1\n        } else {\n            return lst2\n    \
    \    }", "        // Fill up this function body\n        // using pattern matching\n\
    \        // Do not use any loops", "        def total(lst : List[String]) : Int\
    \ = {\n            var result = 0\n            for (x <- lst) result += x.length\n\
    \            result\n        }\n        if (total(lst1) < total(lst2)) lst1\n\
    \        else lst2", "        if (lst1.map(_.length).sum == lst2.map(_.length).sum)\
    \ lst1\n        else if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1\n\
    \        else lst2", "        var sz1 = 0\n        var sz2 = 0\n        for (str\
    \ <- lst1) sz1 += str.length\n        for (str <- lst2) sz2 += str.length\n  \
    \      return if (sz1 < sz2) lst1 else lst2", "        if (lst1.length == 0 &&\
    \ lst2.length == 0) lst1\n        else if (lst1.length == 0) lst2\n        else\
    \ if (lst2.length == 0) lst1\n        else {\n            var sum1 = 0\n     \
    \       var sum2 = 0\n            for (str <- lst1) {\n                sum1 +=\
    \ str.length\n            }\n            for (str <- lst2) {\n               \
    \ sum2 += str.length\n            }\n            if (sum1 == sum2) lst1\n    \
    \        else if (sum1 < sum2) lst1\n            else lst2\n        }", "    \
    \    if (lst1.length == 0) lst2\n        else if (lst2.length == 0) lst1\n   \
    \     else {\n            val sum1 = lst1.foldLeft(0)((sum, s) => sum + s.length)\n\
    \            val sum2 = lst2.foldLeft(0)((sum, s) => sum + s.length)\n       \
    \     if (sum1 == sum2) lst1\n            else if (sum1 < sum2) lst1\n       \
    \     else lst2\n        }", "        def helper(lst1 : List[String], lst2 : List[String],\
    \ acc1 : Int, acc2 : Int) : Boolean = {\n            if (lst1.length == 0 && lst2.length\
    \ == 0) {\n                acc1 <= acc2\n            } else if (lst1.length ==\
    \ 0) {\n                helper(lst1, lst2.tail, acc1, acc2 + lst2.head.length)\n\
    \            } else if (lst2.length == 0) {\n                helper(lst1.tail,\
    \ lst2, acc1 + lst1.head.length, acc2)\n            } else {\n               \
    \ helper(lst1.tail, lst2.tail, acc1 + lst1.head.length, acc2 + lst2.head.length)\n\
    \            }\n        }\n        if (helper(lst1, lst2, 0, 0)) lst1 else lst2",
  "        var s1 : Int = 0\n        var s2 : Int = 0\n        for (str <- lst1) {\n\
    \            s1 += str.length\n        }\n        for (str <- lst2) {\n      \
    \      s2 += str.length\n        }\n        if (s1 == s2) {\n            return\
    \ lst1\n        } else if (s1 < s2) {\n            return lst1\n        } else\
    \ {\n            return lst2\n        }", '        // Your code here', "     \
    \   def totalMatchHelper(lst1 : List[String], lst2 : List[String], sum1 : Int,\
    \ sum2 : Int) : List[String] = {\n            if (lst1.isEmpty && lst2.isEmpty)\
    \ return lst1\n            else if (lst1.isEmpty) return lst2\n            else\
    \ if (lst2.isEmpty) return lst1\n            else if (sum1 == sum2) return lst1\n\
    \            else if (sum1 < sum2) return lst1\n            else return lst2\n\
    \        }\n        if (lst1.isEmpty && lst2.isEmpty) return lst1\n        else\
    \ if (lst1.isEmpty) return lst2\n        else if (lst2.isEmpty) return lst1\n\
    \        else {\n            val sum1 = lst1.foldLeft(0)((x, y) => x + y.length)\n\
    \            val sum2 = lst2.foldLeft(0)((x, y) => x + y.length)\n           \
    \ return totalMatchHelper(lst1, lst2, sum1, sum2)\n        }", "        if (lst1.size\
    \ == 0 && lst2.size == 0) return List[String]()\n        if (lst1.size == 0) return\
    \ lst2\n        if (lst2.size == 0) return lst1\n        val sum1 = lst1.foldLeft(0)((a,b)\
    \ => a + b.size)\n        val sum2 = lst2.foldLeft(0)((a,b) => a + b.size)\n \
    \       if (sum1 <= sum2) return lst1\n        else return lst2", "        def\
    \ totalMatchHelper(lst1 : List[String], lst2 : List[String], sum1 : Int, sum2\
    \ : Int) : List[String] = {\n            if (lst1.isEmpty) {\n               \
    \ if (sum1 < sum2) lst1 else lst2\n            } else {\n                if (lst2.isEmpty)\
    \ {\n                    if (sum1 < sum2) lst1 else lst2\n                } else\
    \ {\n                    if (sum1 < sum2) lst1 else lst2\n                }\n\
    \            }\n        }\n        totalMatchHelper(lst1, lst2, lst1.map(_.length).sum,\
    \ lst2.map(_.length).sum)", "        // Fill Up this function body\n        //\
    \ `lst1` is the list that has lesser total num of chars\n        if (lst1.length\
    \ <= lst2.length) {\n            var (lst1Total, lst2Total) = (0, 0)\n       \
    \     for (a <- lst1) {\n                lst1Total += a.length\n            }\n\
    \            for (a <- lst2) {\n                lst2Total += a.length\n      \
    \      }\n            if (lst1Total == lst2Total) {\n                return lst1\n\
    \            } else if (lst1Total < lst2Total) {\n                return lst1\n\
    \            } else {\n                return lst2\n            }\n        } else\
    \ {\n            return totalMatch(lst2, lst1)\n        }", "        // Fill Up\
    \ this function body\n                // Note: You can use the built-in functions\
    \ available in scala.\n                if(lst1.map(_.length).sum < lst2.map(_.length).sum)\n\
    \                    lst1\n                else if(lst1.map(_.length).sum > lst2.map(_.length).sum)\n\
    \                    lst2\n                else\n                    lst1", " \
    \       var t1 = lst1.foldLeft(0)((acc, lst) => lst.length + acc)\n        var\
    \ t2 = lst2.foldLeft(0)((acc, lst) => lst.length + acc)\n        if (t1 == t2)\
    \ {\n            return lst1\n        } else if (t1 < t2) {\n            return\
    \ lst1\n        } else {\n            return lst2\n        }", "        val total1\
    \ = lst1.foldLeft(0)((sum, str) => sum + str.length)\n        val total2 = lst2.foldLeft(0)((sum,\
    \ str) => sum + str.length)\n        if (total1 <= total2) lst1 else lst2", " \
    \       var lst1Count = 0\n        var lst2Count = 0\n        for (i <- lst1)\
    \ {\n            lst1Count += i.length\n        }\n        for (i <- lst2) {\n\
    \            lst2Count += i.length\n        }\n        if (lst1Count == lst2Count)\
    \ {\n            return lst1\n        }\n        else if (lst1Count < lst2Count)\
    \ {\n            return lst1\n        }\n        else {\n            return lst2\n\
    \        }", "        val total1 = lst1.foldLeft(0)((a, b) => a + b.length)\n\
    \        val total2 = lst2.foldLeft(0)((a, b) => a + b.length)\n        if (total1\
    \ == total2) {\n            lst1\n        } else if (total1 < total2) {\n    \
    \        lst1\n        } else {\n            lst2\n        }", "        var result\
    \ = List[String]()\n        var lst1Total = 0\n        var lst2Total = 0\n   \
    \     for (item <- lst1) {\n            lst1Total += item.length\n        }\n\
    \        for (item <- lst2) {\n            lst2Total += item.length\n        }\n\
    \        if (lst1Total < lst2Total) {\n            result = lst1\n        } else\
    \ {\n            result = lst2\n        }\n        return result", "      if (lst1.isEmpty\
    \ && lst2.isEmpty) return lst1\n      var sum1 = 0\n      for (s <- lst1) sum1\
    \ += s.length\n      var sum2 = 0\n      for (s <- lst2) sum2 += s.length\n  \
    \    if (sum1 <= sum2) return lst1\n      return lst2", "        if (lst1.foldLeft(0)((total,\
    \ str) => total + str.length) < lst2.foldLeft(0)((total, str) => total + str.length))\
    \ {\n            lst1\n        } else {\n            lst2\n        }", "     \
    \   // Fill Up this function body\n        // `index` is the index of the current\
    \ element\n        // `accumulator` is the partial result\n        //var l1 =\
    \ lst1.foldLeft(0)(_ + _.length)\n        //var l2 = lst2.foldLeft(0)(_ + _.length)\n\
    \        //l1 < l2\n        var l1 = 0\n        var l2 = 0\n        lst1.foreach(l1\
    \ += _.length)\n        lst2.foreach(l2 += _.length)\n        if (l1 < l2) lst1\
    \ else lst2", "        val cnt1 = lst1.foldLeft(0)((sum, str) => sum + str.length)\n\
    \        val cnt2 = lst2.foldLeft(0)((sum, str) => sum + str.length)\n       \
    \ if (cnt1 < cnt2) lst1 else lst2", "        def totalMatchHelper(lst1 : List[String],\
    \ lst2 : List[String], tot1 : Int, tot2 : Int) : List[String] = {\n          \
    \  if (lst1.isEmpty) {\n                if (tot1 > tot2) lst2 else lst1\n    \
    \        } else if (lst2.isEmpty) {\n                if (tot1 > tot2) lst2 else\
    \ lst1\n            } else {\n                totalMatchHelper(lst1.tail, lst2.tail,\
    \ tot1 + lst1.head.length, tot2 + lst2.head.length)\n            }\n        }\n\
    \        totalMatchHelper(lst1, lst2, 0, 0)", "        var sum1 = 0\n        var\
    \ sum2 = 0\n        for (s <- lst1) {\n            sum1 += s.length\n        }\n\
    \        for (s <- lst2) {\n            sum2 += s.length\n        }\n        if\
    \ (sum1 == sum2) {\n            return lst1\n        } else if (sum1 < sum2) {\n\
    \            return lst1\n        } else {\n            return lst2\n        }",
  "        if (lst1.length == 0 && lst2.length == 0) lst1\n        else if (lst1.length\
    \ == 0) lst2\n        else if (lst2.length == 0) lst1\n        else {\n      \
    \      var total1 = 0\n            var total2 = 0\n            for (s <- lst1)\
    \ total1 += s.length\n            for (s <- lst2) total2 += s.length\n       \
    \     if (total1 < total2) lst1\n            else if (total1 > total2) lst2\n\
    \            else lst1\n        }", "        if (lst1.length == 0 && lst2.length\
    \ == 0)\n            lst1\n        else if (lst1.length == 0)\n            lst2\n\
    \        else if (lst2.length == 0)\n            lst1\n        else {\n      \
    \      var sum1 = 0\n            for (s <- lst1)\n                sum1 += s.length\n\
    \            var sum2 = 0\n            for (s <- lst2)\n                sum2 +=\
    \ s.length\n            if (sum1 < sum2)\n                lst1\n            else\
    \ if (sum1 > sum2)\n                lst2\n            else\n                lst1\n\
    \        }", "        val lst1Size = lst1.foldLeft(0)((acc, i) => acc + i.length)\n\
    \        val lst2Size = lst2.foldLeft(0)((acc, i) => acc + i.length)\n       \
    \ if (lst1Size < lst2Size) lst1 else lst2", "        var n1 = 0\n        for (i\
    \ <- lst1) n1 += i.length\n        var n2 = 0\n        for (i <- lst2) n2 += i.length\n\
    \        if (n1 == n2) lst1\n        else if (n1 < n2) lst1\n        else lst2",
  "\t    // your implementation goes here", "        val totalChar1 = lst1.foldLeft(0)((total,\
    \ s) => total + s.length)\n        val totalChar2 = lst2.foldLeft(0)((total, s)\
    \ => total + s.length)\n        if (totalChar1 <= totalChar2) lst1 else lst2",
  "      // Fill Up this function body\n        //`\n        def sum(lst: List[String]):\
    \ Int = lst match {\n            case Nil => 0\n            case x :: tail =>\
    \ x.length + sum(tail)\n        }\n        if (sum(lst1) < sum(lst2)) {\n    \
    \        lst1\n        } else {\n            lst2\n        }", "        def totalMatchIter(lst1\
    \ : List[String], lst2 : List[String], num1 : Int, num2 : Int) : List[String]\
    \ = {\n            (lst1, lst2) match {\n                case (Nil, Nil) => if\
    \ (num1 == num2) lst1 else if (num1 < num2) lst1 else lst2\n                case\
    \ (lst1, Nil) => if (num1 == num2) lst1 else if (num1 < num2) lst1 else lst2\n\
    \                case (Nil, lst2) => if (num1 == num2) lst1 else if (num1 < num2)\
    \ lst1 else lst2\n                case (str1 :: rest1, str2 :: rest2) => totalMatchIter(rest1,\
    \ rest2, num1 + str1.length, num2 + str2.length)\n            }\n        }\n \
    \       totalMatchIter(lst1, lst2, 0, 0)", "        val (sum1, sum2) = (lst1.map(_.length).sum,\
    \ lst2.map(_.length).sum)\n        if (sum1 == sum2) lst1\n        else if (sum1\
    \ < sum2) lst1\n        else lst2", "        lst1.length match {\n           \
    \ case 0 => lst2\n            case _ => lst2.length match {\n                case\
    \ 0 => lst1\n                case _ => {\n                    var len1 = 0\n \
    \                   var len2 = 0\n                    for (i <- 0 until lst1.length)\
    \ len1 += lst1(i).length\n                    for (i <- 0 until lst2.length) len2\
    \ += lst2(i).length\n                    if (len1 < len2) lst1 else lst2\n   \
    \             }\n            }\n        }", "        def totalMatchHelper(lst1\
    \ : List[String], lst2 : List[String], acc1 : Int, acc2 : Int) : List[String]\
    \ = (lst1, lst2) match {\n            case (Nil, Nil) => Nil\n            case\
    \ (head1 :: tail1, Nil) => head1 :: totalMatchHelper(tail1, Nil, acc1 + head1.length,\
    \ acc2)\n            case (Nil, head2 :: tail2) => head2 :: totalMatchHelper(Nil,\
    \ tail2, acc1, acc2 + head2.length)\n            case (head1 :: tail1, head2 ::\
    \ tail2) => {\n                if (acc1 + head1.length <= acc2 + head2.length)\
    \ head1 :: totalMatchHelper(tail1, lst2, acc1 + head1.length, acc2)\n        \
    \        else head2 :: totalMatchHelper(lst1, tail2, acc1, acc2 + head2.length)\n\
    \            }\n        }\n        if (lst1.length <= lst2.length) totalMatchHelper(lst1,\
    \ lst2, 0, 0)\n        else totalMatchHelper(lst2, lst1, 0, 0)", "        var\
    \ count1 = 0\n        var count2 = 0\n        for (s <- lst1) {\n            count1\
    \ += s.length\n        }\n        for (s <- lst2) {\n            count2 += s.length\n\
    \        }\n        if (count1 < count2) lst1 else lst2", "        if (lst1.length\
    \ == 0) return lst2\n        if (lst2.length == 0) return lst1\n        if (lst1.foldLeft(0)((sum,\
    \ string) => sum + string.length) < lst2.foldLeft(0)((sum, string) => sum + string.length))\
    \ return lst1\n        return lst2", "        if (lst1.isEmpty) {\n          \
    \  lst2\n        } else if (lst2.isEmpty) {\n            lst1\n        } else\
    \ {\n            def totalChars(lst : List[String]) : Int = {\n              \
    \  lst.foldLeft(0)((acc, word) => acc + word.length)\n            }\n        \
    \    if (totalChars(lst1) > totalChars(lst2)) {\n                lst2\n      \
    \      } else {\n                lst1\n            }\n        }", "        var\
    \ t1 = lst1.foldLeft(0)((acc, str) => acc + str.length)\n        var t2 = lst2.foldLeft(0)((acc,\
    \ str) => acc + str.length)\n        if (t1 <= t2)\n            lst1\n       \
    \ else\n            lst2", "\t\tif (lst1.length == 0 && lst2.length == 0) lst1\n\
    \t\telse if (lst1.length == 0) lst2\n\t\telse if (lst2.length == 0) lst1\n\t\t\
    else {\n\t\t\tvar total1 = 0\n\t\t\tfor (word <- lst1) total1 += word.length\n\
    \t\t\tvar total2 = 0\n\t\t\tfor (word <- lst2) total2 += word.length\n\t\t\tif\
    \ (total1 <= total2) lst1\n\t\t\telse lst2\n\t\t}", "        // Fill Up this function\
    \ body\n        // `totalMatch` should return the list that has total number of\
    \ chars in the all strings of the list less than the other list.\n        // Write\
    \ your if condition here\n        if (lst1.map(_.length).sum < lst2.map(_.length).sum)\
    \ lst1\n        else lst2", "        if (lst1.length == 0) return lst2\n     \
    \   if (lst2.length == 0) return lst1\n        var n1 = 0\n        for (s <- lst1)\
    \ n1 += s.length\n        var n2 = 0\n        for (s <- lst2) n2 += s.length\n\
    \        if (n1 <= n2) lst1 else lst2", "        if (lst1.length == 0 && lst2.length\
    \ == 0) {\n            return lst1\n        }\n        var sum = 0\n        for\
    \ (i <- 0 until lst1.length) {\n            sum += lst1(i).length\n        }\n\
    \        var sum2 = 0\n        for (i <- 0 until lst2.length) {\n            sum2\
    \ += lst2(i).length\n        }\n        if (sum < sum2) {\n            return\
    \ lst1\n        }\n        else if (sum > sum2) {\n            return lst2\n \
    \       }\n        else {\n            return lst1\n        }", "        def length(lst\
    \ : List[String]) : Int = {\n            var len = 0\n            for (str <-\
    \ lst) len += str.length\n            len\n        }\n        var count1 = length(lst1)\n\
    \        var count2 = length(lst2)\n        var ret = List[String]()\n       \
    \ if (count1 < count2) ret = lst1\n        else if (count1 > count2) ret = lst2\n\
    \        else ret = lst1\n        ret", "        //if (lst1.map(s => s.length).sum\
    \ < lst2.map(s => s.length).sum) lst1 else lst2\n        if (lst1.map(s => s.length).sum\
    \ < lst2.map(s => s.length).sum) lst1 else lst2", "        val lst1charSum = lst1.foldLeft(0)\
    \ {(sum, str) => sum + str.length}\n        val lst2charSum = lst2.foldLeft(0)\
    \ {(sum, str) => sum + str.length}\n        if (lst1charSum < lst2charSum) lst1\n\
    \        else if (lst1charSum > lst2charSum) lst2\n        else lst1", "     \
    \   // Your code here\n        return lst1", "        var total1 = 0\n       \
    \ var total2 = 0\n        for (x <- lst1) total1 += x.length\n        for (x <-\
    \ lst2) total2 += x.length\n        if (total1 == total2) lst1\n        else if\
    \ (total1 < total2) lst1\n        else lst2", "        var total1 = 0\n      \
    \  var total2 = 0\n        for (i <- lst1) {\n            total1 += i.length\n\
    \        }\n        for (i <- lst2) {\n            total2 += i.length\n      \
    \  }\n        if (total1 < total2) lst1 else lst2", "        // your answer here\n\
    \        val len1 = lst1.foldLeft(0){(acc, x) => acc + x.length}\n        val\
    \ len2 = lst2.foldLeft(0){(acc, x) => acc + x.length}\n        if (len1 < len2)\
    \ lst1 else lst2", "        var lst1tot = 0\n        var lst2tot = 0\n       \
    \ for (str <- lst1) {\n            lst1tot += str.length\n        }\n        for\
    \ (str <- lst2) {\n            lst2tot += str.length\n        }\n        if (lst1tot\
    \ < lst2tot) lst1 else lst2", "        if (lst1.length == 0 && lst2.length ==\
    \ 0) return lst1\n        if (lst1.length == 0) return lst2\n        if (lst2.length\
    \ == 0) return lst1\n        var sum1 = 0\n        var sum2 = 0\n        for (elem\
    \ <- lst1) {\n            sum1 += elem.length\n        }\n        for (elem <-\
    \ lst2) {\n            sum2 += elem.length\n        }\n        if (sum1 <= sum2)\
    \ return lst1\n        return lst2", '        // Your code goes here', "     \
    \   // Fill Up this function body\n        // `lst1` contains list of strings\n\
    \        // `lst2` contains list of strings\n        // You have to return which\
    \ list has lesser sum of length of all strings in the list.\n        // You are\
    \ required to use length and foldLeft functions.\n        if (lst1.foldLeft(0)(_\
    \ + _.length) < lst2.foldLeft(0)(_ + _.length)) lst1\n        else lst2", "  \
    \      if (lst1.length == 0) return lst2\n        if (lst2.length == 0) return\
    \ lst1\n        var lst1Count = 0\n        var lst2Count = 0\n        for (s <-\
    \ lst1) lst1Count += s.length\n        for (s <- lst2) lst2Count += s.length\n\
    \        if (lst1Count <= lst2Count) lst1 else lst2", "        if (lst1.length\
    \ == 0 && lst2.length == 0) lst1\n        else if (lst1.length == 0) lst2\n  \
    \      else if (lst2.length == 0) lst1\n        else {\n            var chars1\
    \ = 0\n            for (str <- lst1) {\n                chars1 += str.length\n\
    \            }\n            var chars2 = 0\n            for (str <- lst2) {\n\
    \                chars2 += str.length\n            }\n            if (chars1 ==\
    \ chars2) lst1\n            else if (chars1 < chars2) lst1\n            else lst2\n\
    \        }", "        if (lst1.size < lst2.size) return lst1\n        else if\
    \ (lst1.size > lst2.size) return lst2\n        else {\n            var sum1 =\
    \ 0\n            var sum2 = 0\n            for (i <- 0 until lst1.size) {\n  \
    \              sum1 += lst1(i).size\n                sum2 += lst2(i).size\n  \
    \          }\n            if (sum1 < sum2) return lst1\n            else if (sum1\
    \ > sum2) return lst2\n            else return lst1\n        }", "        var\
    \ result : List[String] = List()\n        if (lst1.length == 0 && lst2.length\
    \ == 0) {\n            result = lst1\n        } else if (lst1.length == 0 && lst2.length\
    \ != 0) {\n            result = lst2\n        } else if (lst1.length != 0 && lst2.length\
    \ == 0) {\n            result = lst1\n        } else {\n            var t1 : Int\
    \ = 0\n            for (i <- 0 until lst1.length) {\n                t1 += lst1(i).length\n\
    \            }\n            var t2 : Int = 0\n            for (i <- 0 until lst2.length)\
    \ {\n                t2 += lst2(i).length\n            }\n            if (t1 >\
    \ t2) {\n                result = lst2\n            } else if (t1 < t2) {\n  \
    \              result = lst1\n            } else {\n                result = lst1\n\
    \            }\n        }\n        result", "        // fill in here\n       \
    \ def totalMatchRec(lst1 : List[String], lst2 : List[String], \n            total1\
    \ : Int, total2 : Int) : List[String] = {\n            if (lst1.isEmpty) {\n \
    \               if (total1 == total2) lst1 else lst2\n            } else {\n \
    \               if (total1 > total2) lst2 else totalMatchRec(lst1.tail, lst2,\
    \ \n                    total1 + lst1.head.length, total2)\n            }\n  \
    \      }\n        totalMatchRec(lst1, lst2, 0, 0)", "        if (lst1.map(_.length).sum\
    \ > lst2.map(_.length).sum) lst2\n        else lst1", '        ???', "       \
    \ var total1 = 0\n        var total2 = 0\n        lst1.foreach(total1 += _.length)\n\
    \        lst2.foreach(total2 += _.length)\n        if (total1 == total2) lst1\n\
    \        else if (total1 < total2) lst1\n        else lst2", "        if (lst1.size\
    \ == 0) lst2\n        else if (lst2.size == 0) lst1\n        else {\n        \
    \    if (lst1.map(_.size).sum == lst2.map(_.size).sum) return lst1\n         \
    \   if (lst1.map(_.size).sum < lst2.map(_.size).sum) return lst1\n           \
    \ else return lst2\n        }", "        if (lst1.length < lst2.length) lst1\n\
    \        else if (lst1.length > lst2.length) lst2\n        else lst1", "     \
    \   var lst1_total = 0\n        var lst2_total = 0\n        for (str <- lst1)\
    \ lst1_total += str.length\n        for (str <- lst2) lst2_total += str.length\n\
    \        return if (lst1_total <= lst2_total) lst1 else lst2", "        // Define\
    \ a function that takes a list of string and returns the number of chars.\n  \
    \      def totalNumChars(lst : List[String]) : Int = {\n            // Sum up\
    \ the lengths of each string in the list.\n            lst.foldLeft(0)((acc, x)\
    \ => acc + x.length)\n        }\n        // Total number of chars in lst1 and\
    \ lst2.\n        val t1 = totalNumChars(lst1)\n        val t2 = totalNumChars(lst2)\n\
    \        // Compare the number of chars.\n        if (t1 < t2)\n            lst1\n\
    \        else if (t1 > t2)\n            lst2\n        else\n            lst1",
  "        // Fill up this function body\n        // using higher order functions\n\
    \        // you can use Scala library functions like map or fold", "        val\
    \ lst1Total = lst1.foldLeft(0)((acc, x) => acc + x.length)\n        val lst2Total\
    \ = lst2.foldLeft(0)((acc, x) => acc + x.length)\n        if (lst1Total < lst2Total)\
    \ lst1 else lst2", "        // your code here\n        // number of chars in lst1\n\
    \        val c1 = lst1.foldLeft(0)((s, x) => s + x.length)\n        // number\
    \ of chars in lst2\n        val c2 = lst2.foldLeft(0)((s, x) => s + x.length)\n\
    \        if (c1 <= c2) lst1 else lst2", "        val totalChar1 = lst1.foldLeft(0)((a,\
    \ b) => a + b.length)\n        val totalChar2 = lst2.foldLeft(0)((a, b) => a +\
    \ b.length)\n        if (totalChar1 == totalChar2) {\n            lst1\n     \
    \   } else if (totalChar1 < totalChar2) {\n            lst1\n        } else {\n\
    \            lst2\n        }", "        var lst1Total : Int = 0\n        for (word\
    \ <- lst1) {\n            lst1Total += word.length\n        }\n        var lst2Total\
    \ : Int = 0\n        for (word <- lst2) {\n            lst2Total += word.length\n\
    \        }\n        if (lst1Total < lst2Total) {\n            return lst1\n  \
    \      }\n        else {\n            return lst2\n        }", "        var totalChars1\
    \ = 0\n        var totalChars2 = 0\n        for (str <- lst1) {\n            totalChars1\
    \ += str.length\n        }\n        for (str <- lst2) {\n            totalChars2\
    \ += str.length\n        }\n        if (totalChars1 < totalChars2) {\n       \
    \     return lst1\n        } else if (totalChars1 > totalChars2) {\n         \
    \   return lst2\n        } else {\n            return lst1\n        }", '        if
    (lst1.foldLeft(0)((count, str) => count + str.length) <= lst2.foldLeft(0)((count,
    str) => count + str.length)) lst1 else lst2', "      var lstLen1 = 0\n      for\
    \ (i <- lst1) lstLen1 += i.length\n      var lstLen2 = 0\n      for (i <- lst2)\
    \ lstLen2 += i.length\n      if (lstLen1 == lstLen2) lst1\n      else if (lstLen1\
    \ < lstLen2) lst1\n      else lst2", "        if (lst1.length == 0 && lst2.length\
    \ == 0) return List[String]()\n        else if (lst1.map(_.length).sum == lst2.map(_.length).sum)\
    \ return lst1\n        else if (lst1.map(_.length).sum < lst2.map(_.length).sum)\
    \ return lst1\n        else return lst2", "      // write your code here.\n  \
    \    // return the appropriate list.\n      return null;", "    \tvar n1 = 0\n\
    \    \tvar n2 = 0\n    \tlst1.foreach { n1 += _.length }\n    \tlst2.foreach {\
    \ n2 += _.length }\n    \tif (n1 < n2) lst1 else lst2", "        val total1 =\
    \ lst1.foldLeft(0)((x, y) => x + y.length)\n        val total2 = lst2.foldLeft(0)((x,\
    \ y) => x + y.length)\n        if (total1 < total2) lst1 else lst2", "       \
    \ // Fill Up this function body\n        // `totalMatch.length` should be the\
    \ number of function arguments\n        0", "        // Fill Up this function\
    \ body\n                // method 1\n                // lst1.foldLeft(0)((sum,\
    \ x) => sum + x.length) match {\n                //     case l1 if l1 > lst2.foldLeft(0)((sum,\
    \ x) => sum + x.length) => lst2\n                //     case l1 if l1 < lst2.foldLeft(0)((sum,\
    \ x) => sum + x.length) => lst1\n                //     case _ => lst1\n     \
    \           // }\n                // method 2\n                // if (lst1.foldLeft(0)((sum,\
    \ x) => sum + x.length) > lst2.foldLeft(0)((sum, x) => sum + x.length))\n    \
    \            //     lst2\n                // else if (lst1.foldLeft(0)((sum, x)\
    \ => sum + x.length) < lst2.foldLeft(0)((sum, x) => sum + x.length))\n       \
    \         //     lst1\n                // else\n                //     lst1\n\
    \                // method 3\n                // (lst1.foldLeft(0)((sum, x) =>\
    \ sum + x.length), lst2.foldLeft(0)((sum, x) => sum + x.length)) match {\n   \
    \             //     case (l1, l2) if l1 > l2 => lst2\n                //    \
    \ case (l1, l2) if l1 < l2 => lst1\n                //     case _ => lst1\n  \
    \              // }\n                // method 4\n                lst1.foldLeft(0)((sum,\
    \ x) => sum + x.length) match {\n                    case l1 if l1 > lst2.foldLeft(0)((sum,\
    \ x) => sum + x.length) => lst2\n                    case l1 if l1 < lst2.foldLeft(0)((sum,\
    \ x) => sum + x.length) => lst1\n                    case _ => lst1\n        \
    \        }", "        // Fill Up this function body\n        // `lst1` and `lst2`\
    \ are lists of strings\n        // For example,\n        // >>> (List[String](\"\
    abc\", \"abc\", \"abc\", \"abc\")).length\n        // 4\n        // >>> (List[String](\"\
    abc\", \"abc\", \"abc\", \"abc\")).map(l => l.length).sum\n        // 12\n   \
    \     val totalChars1 = lst1.map(l => l.length).sum\n        val totalChars2 =\
    \ lst2.map(l => l.length).sum\n        if (totalChars1 < totalChars2) lst1\n \
    \       else if (totalChars1 > totalChars2) lst2\n        else lst1", "      \
    \  // Your Code Here\n        if (lst1.size == 0 && lst2.size == 0) return lst1\n\
    \        if (lst1.size != 0 && lst2.size == 0) return lst1\n        if (lst1.size\
    \ == 0 && lst2.size != 0) return lst2\n        var total1 = 0\n        var total2\
    \ = 0\n        lst1.foreach(x => total1 += x.size)\n        lst2.foreach(x =>\
    \ total2 += x.size)\n        if (total1 < total2) lst1 else lst2", "        val\
    \ total1 = lst1.map(x => x.length).reduceLeft(_ + _)\n        val total2 = lst2.map(x\
    \ => x.length).reduceLeft(_ + _)\n        if (total1 == total2) lst1\n       \
    \ else if (total1 < total2) lst1\n        else lst2", "        def totalMatch(lst1\
    \ : List[String], lst2 : List[String], sum1 : Int, sum2 : Int) : List[String]\
    \ = {\n            if (lst1.isEmpty) {\n                if (sum1 == sum2) lst1\
    \ else lst2\n            } else if (lst2.isEmpty) {\n                if (sum1\
    \ == sum2) lst1 else lst2\n            } else {\n                if (sum1 < sum2)\
    \ {\n                    totalMatch(lst1.tail, lst2, sum1 + lst1.head.length,\
    \ sum2)\n                } else {\n                    totalMatch(lst1, lst2.tail,\
    \ sum1, sum2 + lst2.head.length)\n                }\n            }\n        }\n\
    \        totalMatch(lst1, lst2, 0, 0)", "        if (lst1.isEmpty && lst2.isEmpty)\
    \ lst1\n        else if (lst1.isEmpty) lst2\n        else if (lst2.isEmpty) lst1\n\
    \        else {\n            var len1 = 0\n            for (i <- lst1) len1 +=\
    \ i.length\n            var len2 = 0\n            for (i <- lst2) len2 += i.length\n\
    \            if (len1 < len2) lst1\n            else if (len1 > len2) lst2\n \
    \           else lst1\n        }", "        val lst1_total = lst1.map(x => x.length).sum\n\
    \        val lst2_total = lst2.map(x => x.length).sum\n        if (lst1_total\
    \ == lst2_total) lst1\n        else if (lst1_total < lst2_total) lst1\n      \
    \  else lst2", "        if (lst1.map(_.length).sum < lst2.map(_.length).sum) lst1\n\
    \        else lst2", "        // Fill Up this function body\n        // `totalSum`\
    \ is a method you can use for computing total sum of a list\n        // Use pattern\
    \ matching to return the list\n        // Do not use while loop, for loop or pattern\
    \ matching\n        // Hint: Use pattern matching and functions like\n       \
    \ // `map` and `filter` to solve this problem\n        def totalSum(lst : List[String])\
    \ : Int = {\n            lst.foldLeft(0)((a, b) => a + b.length)\n        }\n\
    \        (totalSum(lst1), totalSum(lst2)) match {\n            case (a, b) if\
    \ (a < b) => lst1\n            case (a, b) if (a > b) => lst2\n            case\
    \ _ => lst1\n        }", '        // Your Code Here', "        // Fill Up this\
    \ function body\n        // `lst1` and `lst2` are lists of strings\n        //\
    \ For example,\n        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"Hi\")))\n        // should return\n        // (List[String](\"hI\", \"\
    Hi\"))\n        if (lst1.size <= lst2.size) {\n            lst1\n        } else\
    \ {\n            lst2\n        }", "        var totalChars1 = 0\n        var totalChars2\
    \ = 0\n        for (word <- lst1) {\n            totalChars1 += word.length\n\
    \        }\n        for (word <- lst2) {\n            totalChars2 += word.length\n\
    \        }\n        if (totalChars1 <= totalChars2) lst1 else lst2", "       \
    \ val total1 = lst1.foldLeft(0)((a, s) => a + s.length)\n        val total2 =\
    \ lst2.foldLeft(0)((a, s) => a + s.length)\n        if (total1 < total2) lst1\
    \ else lst2", "        var lst1Total = 0\n        var lst2Total = 0\n        lst1.foreach(lst1Total\
    \ += _.length)\n        lst2.foreach(lst2Total += _.length)\n        lst1Total\
    \ < lst2Total match {\n            case true => lst1\n            case false =>\
    \ lst2\n        }", "        if (lst1.map(_.length).sum < lst2.map(_.length).sum)\
    \ lst1\n        else lst2", "        val t1 = lst1.map(_.length).sum\n       \
    \ val t2 = lst2.map(_.length).sum\n        if (t1 < t2) lst1 else lst2", "   \
    \     if (lst1.isEmpty && lst2.isEmpty) (List[String]())\n        else if (lst1.isEmpty)\
    \ lst2\n        else if (lst2.isEmpty) lst1\n        else {\n            val totalChars1\
    \ = lst1.map(x => x.length).sum\n            val totalChars2 = lst2.map(x => x.length).sum\n\
    \            if (totalChars1 < totalChars2) lst1\n            else if (totalChars1\
    \ > totalChars2) lst2\n            else lst1\n        }", "        val lst1Len\
    \ = lst1.foldLeft(0)((sum, word) => sum + word.length)\n        val lst2Len =\
    \ lst2.foldLeft(0)((sum, word) => sum + word.length)\n        if (lst1Len < lst2Len)\
    \ lst1 else lst2", "        // Fill Up this function body\n        // `lst1` and\
    \ `lst2` are two lists of strings\n        // Don't change signature of the function.\n\
    \        // Replace the blank line with the actual code\n        if (lst1.length\
    \ > lst2.length) lst2\n        else if (lst1.length < lst2.length) lst1\n    \
    \    else {\n            var count1 = 0\n            var count2 = 0\n        \
    \    for (str <- lst1) count1 += str.length\n            for (str <- lst2) count2\
    \ += str.length\n            if (count1 == count2) lst1\n            else if (count1\
    \ < count2) lst1\n            else lst2\n        }", "        val lst1Size = lst1.foldLeft(0)((x,\
    \ y) => x + y.length)\n        val lst2Size = lst2.foldLeft(0)((x, y) => x + y.length)\n\
    \        if (lst1Size < lst2Size) lst1 else lst2", "        // Fill Up this function\
    \ body\n        // `totalLen` is a helper function to compute the total length\
    \ of all strings in a list\n        def totalLen(lst : List[String]) : Int = {\n\
    \          var sum = 0\n          for (i <- lst) sum += i.length\n          sum\n\
    \        }\n        var l1 = totalLen(lst1)\n        var l2 = totalLen(lst2)\n\
    \        if (l1 == l2) lst1\n        else if (l1 < l2) lst1\n        else lst2",
  "        // First try is to brute force this.\n        // I can see that I can use\
    \ pattern matching and a fold to accomplish\n        // this.\n        // The\
    \ pattern matching case can be List[String]()\n        // The fold can be foldLeft(lst2){(lst\
    \ : List[String], str : String) => \n        //     lst :+ (if (lst1.map(i =>\
    \ i.length).sum < lst2.map(i => i.length).sum) \n        //         lst1 else\
    \ lst2)\n        // }\n        // This can be simplified to\n        // foldLeft(lst2){(lst\
    \ : List[String], str : String) => \n        //     lst :+ (if (lst1.map(i =>\
    \ i.length).sum < lst2.map(i => i.length).sum) \n        //         lst1 else\
    \ lst2)\n        // }\n        // This can be simplified to\n        // foldLeft(lst2){(lst\
    \ : List[String], str : String) => \n        //     lst :+ (if (lst1.map(i =>\
    \ i.length).sum < lst2.map(i => i.length).sum) \n        //         lst1 else\
    \ lst2)\n        // }\n        // This can be simplified to\n        // foldLeft(lst2){(lst\
    \ : List[String], str : String) => \n        //     lst :+ (if (lst1.map(i =>\
    \ i.length).sum < lst2.map(i => i.length).sum) \n        //         lst1 else\
    \ lst2)\n        // }\n        // This can be simplified to\n        // foldLeft(lst2){(lst\
    \ : List[String], str : String) => \n        //     lst :+ (if (lst1.map(i =>\
    \ i.length).sum < lst2.map(i => i.length).sum) \n        //         lst1 else\
    \ lst2)\n        // }\n        // This can be simplified to\n        // foldLeft(lst2){(lst\
    \ : List[String], str : String", "        def totalMatchR(lst1 : List[String],\
    \ lst2 : List[String], acc1 : Int, acc2 : Int) : List[String] = {\n          \
    \  if (lst1.isEmpty && lst2.isEmpty) {\n                if (acc1 <= acc2) lst1\
    \ else lst2\n            } else if (lst1.isEmpty) {\n                if (acc1\
    \ <= acc2) lst1 else lst2\n            } else if (lst2.isEmpty) {\n          \
    \      if (acc1 <= acc2) lst1 else lst2\n            } else {\n              \
    \  totalMatchR(lst1.tail, lst2.tail, acc1 + lst1.head.length, acc2 + lst2.head.length)\n\
    \            }\n        }\n        totalMatchR(lst1, lst2, 0, 0)", "        val\
    \ sum1 = lst1.foldLeft(0)((acc, n) => acc + n.length)\n        val sum2 = lst2.foldLeft(0)((acc,\
    \ n) => acc + n.length)\n        if (sum1 < sum2) lst1 else lst2", "        //\
    \ Fill Up this function body\n        // `lst1` total number of chars < `lst2`\
    \ total number of chars\n        // ==> `lst1` is the one to return\n        //\
    \ AND\n        // `lst1` total number of chars == `lst2` total number of chars\n\
    \        // ==> return `lst1`\n        var string1Total = 0\n        var string2Total\
    \ = 0\n        for (string <- lst1) string1Total += string.length\n        for\
    \ (string <- lst2) string2Total += string.length\n        if (string1Total < string2Total)\
    \ lst1\n        else lst1", "        val lst1sum = lst1.map(_.length).sum\n  \
    \      val lst2sum = lst2.map(_.length).sum\n        if (lst1sum < lst2sum) lst1\
    \ else lst2", "        val cnt1 = lst1.foldLeft(0)((acc, x) => acc + x.length)\n\
    \        val cnt2 = lst2.foldLeft(0)((acc, x) => acc + x.length)\n        if (cnt1\
    \ <= cnt2) lst1 else lst2", "        lst1 match {\n            case Nil => lst2\n\
    \            case l1 :: l1s => lst2 match {\n                case Nil => lst1\n\
    \                case l2 :: l2s => {\n                    if (totalSize(lst1)\
    \ <= totalSize(lst2)) lst1\n                    else lst2\n                }\n\
    \            }\n        }", "        // Fill Up this function body\n        //\
    \ `totalMatch` should return the the list that has smaller number of chars in\
    \ the all strings of the list\n        // Remove the error and write your implementation\
    \ below\n        var sum1 = 0\n        var sum2 = 0\n        for(i <- lst1){\n\
    \            sum1 += i.length\n        }\n        for(i <- lst2){\n          \
    \  sum2 += i.length\n        }\n        if(sum1 < sum2){\n            return lst1\n\
    \        }\n        else if(sum1 > sum2){\n            return lst2\n        }\n\
    \        else{\n            return lst1\n        }", "        var first = 0\n\
    \        var second = 0\n        for (i <- lst1) {\n            first += i.length\n\
    \        }\n        for (i <- lst2) {\n            second += i.length\n      \
    \  }\n        if (first > second) return lst2\n        else if (first < second)\
    \ return lst1\n        else return lst1", "        var lst1Length = 0\n      \
    \  for (elem <- lst1) {\n            lst1Length += elem.length\n        }\n  \
    \      var lst2Length = 0\n        for (elem <- lst2) {\n            lst2Length\
    \ += elem.length\n        }\n        if (lst1Length < lst2Length) {\n        \
    \    return lst1\n        } else {\n            return lst2\n        }", "   \
    \     if (lst1.length > lst2.length) return lst2\n        else if (lst1.length\
    \ < lst2.length) return lst1\n        return lst1", "      def count(lst : List[String])\
    \ : Int = lst match {\n        case Nil => 0\n        case (h :: t) => h.length\
    \ + count(t)\n      }\n      if (count(lst1) == count(lst2))\n        lst1\n \
    \     else if (count(lst1) < count(lst2))\n        lst1\n      else\n        lst2",
  "        lst1.map(_.length).sum.compare(lst2.map(_.length).sum) match {\n      \
    \      case -1 => lst2\n            case _ => lst1\n        }", "        var t1\
    \ = 0\n        var t2 = 0\n        for (i <- lst1) {\n            t1 += i.length\n\
    \        }\n        for (i <- lst2) {\n            t2 += i.length\n        }\n\
    \        if (t1 < t2) lst1 else lst2", "        val lst1CharCount = totalNumberOfChars(lst1)\n\
    \        val lst2CharCount = totalNumberOfChars(lst2)\n        if (lst1CharCount\
    \ < lst2CharCount) {\n            lst1\n        } else if (lst1CharCount > lst2CharCount)\
    \ {\n            lst2\n        } else {\n            lst1\n        }", "    \t\
    if (lst1.length < lst2.length) lst1\n    \telse if (lst1.length > lst2.length)\
    \ lst2\n    \telse lst1", "        if (lst1.isEmpty && lst2.isEmpty) lst1\n  \
    \      else if (lst1.isEmpty) lst2\n        else if (lst2.isEmpty) lst1\n    \
    \    else {\n            var lst1Total = 0\n            for (string <- lst1) lst1Total\
    \ += string.length\n            var lst2Total = 0\n            for (string <-\
    \ lst2) lst2Total += string.length\n            if (lst1Total <= lst2Total) lst1\n\
    \            else lst2\n        }", '        // Your code here', "        val\
    \ lst1TotalLength = lst1.foldLeft(0)((b, a) => a.length + b)\n        val lst2TotalLength\
    \ = lst2.foldLeft(0)((b, a) => a.length + b)\n        if (lst1TotalLength == lst2TotalLength)\
    \ lst1\n        else if (lst1TotalLength < lst2TotalLength) lst1\n        else\
    \ lst2", "        if (lst1.size == 0) return lst2\n        if (lst2.size == 0)\
    \ return lst1\n        if (lst1.foldLeft(0)((acc, str) => acc + str.size) < lst2.foldLeft(0)((acc,\
    \ str) => acc + str.size)) return lst1\n        lst2", "        if (lst1.isEmpty\
    \ && lst2.isEmpty) (List[String]())\n        else if (lst1.isEmpty) lst2\n   \
    \     else if (lst2.isEmpty) lst1\n        else {\n            var lst1Sum = 0\n\
    \            for (str <- lst1) lst1Sum += str.length\n            var lst2Sum\
    \ = 0\n            for (str <- lst2) lst2Sum += str.length\n            if (lst1Sum\
    \ < lst2Sum) lst1\n            else if (lst1Sum > lst2Sum) lst2\n            else\
    \ lst1\n        }", "        if (lst1.isEmpty) return lst2\n        if (lst2.isEmpty)\
    \ return lst1\n        if (lst1.foldLeft(0)((acc, i) => acc + i.length) == lst2.foldLeft(0)((acc,\
    \ i) => acc + i.length)) return lst1\n        if (lst1.foldLeft(0)((acc, i) =>\
    \ acc + i.length) < lst2.foldLeft(0)((acc, i) => acc + i.length)) return lst1\n\
    \        return lst2", "        // fill in the last parameter\n        def totalMatch_helper(lst1\
    \ : List[String], lst2 : List[String], count1 : Int, count2 : Int) : List[String]\
    \ = {\n            if (lst1.isEmpty) return lst2\n            if (lst2.isEmpty)\
    \ return lst1\n            val head1 = lst1.head\n            val head2 = lst2.head\n\
    \            if (head1.length > head2.length) return totalMatch_helper(lst1.tail,\
    \ lst2, count1, count2 + head2.length)\n            else if (head1.length < head2.length)\
    \ return totalMatch_helper(lst1, lst2.tail, count1 + head1.length, count2)\n \
    \           else return totalMatch_helper(lst1.tail, lst2.tail, count1 + head1.length,\
    \ count2 + head2.length)\n        }\n        totalMatch_helper(lst1, lst2, 0,\
    \ 0)", "        if(lst1.length == 0 && lst2.length == 0) return List[String]()\n\
    \        var total1 = 0\n        var total2 = 0\n        for(i <- 0 until lst1.length)\
    \ {\n            total1 += lst1(i).length\n        }\n        for(i <- 0 until\
    \ lst2.length) {\n            total2 += lst2(i).length\n        }\n        if(total1\
    \ < total2) return lst1\n        else if(total1 > total2) return lst2\n      \
    \  else return lst1", "        val t1 = lst1.foldLeft(0)((x, y) => x + y.length)\n\
    \        val t2 = lst2.foldLeft(0)((x, y) => x + y.length)\n        if (t1 < t2)\
    \ lst1 else lst2", "        // Fill Up this function body\n        // `lst1`,\
    \ `lst2` are lists of strings\n        // You have to return the list that has\
    \ total number of chars in the all strings of the list less than the other list.\n\
    \        // If the two lists have the same number of chars, return the first list.\n\
    \        if (lst1.flatten.length > lst2.flatten.length) lst2\n        else lst1",
  "        val s1 = lst1.reduce((x, y) => x + y)\n        val s2 = lst2.reduce((x,\
    \ y) => x + y)\n        if (s1.length == s2.length) lst1\n        else if (s1.length\
    \ < s2.length) lst1\n        else lst2", "        // Note: lst1.foldLeft(0)(_\
    \ + _.length) is not correct because it will throw exception\n        // if there\
    \ is no element in lst1.\n        // Note: lst1.map(_.length).foldLeft(0)(_ +\
    \ _) does not work because it will first\n        // convert all the strings to\
    \ its length, then do the folding to the list.\n        val total1 = if (lst1.isEmpty)\
    \ 0 else lst1.map(_.length).reduceLeft(_ + _)\n        val total2 = if (lst2.isEmpty)\
    \ 0 else lst2.map(_.length).reduceLeft(_ + _)\n        if (total1 <= total2) lst1\
    \ else lst2", "      val sum1 = lst1.foldLeft(0)((accumulator, str) => accumulator\
    \ + str.length)\n      val sum2 = lst2.foldLeft(0)((accumulator, str) => accumulator\
    \ + str.length)\n      if (sum1 == sum2) lst1\n      else if (sum1 < sum2) lst1\n\
    \      else lst2", "        val lst1total = lst1.foldLeft(0)((a, b) => a + b.length)\n\
    \        val lst2total = lst2.foldLeft(0)((a, b) => a + b.length)\n        if\
    \ (lst1total == lst2total) lst1\n        else if (lst1total < lst2total) lst1\n\
    \        else lst2", "        // Fill Up this function body\n                //\
    \ Method 1\n                // if (lst1.map(_.length).sum <= lst2.map(_.length).sum)\
    \ lst1 else lst2\n                // Method 2\n                val sumLst1 = lst1.map(_.length).sum\n\
    \                val sumLst2 = lst2.map(_.length).sum\n                if (sumLst1\
    \ <= sumLst2) lst1 else lst2", "    \tval totallst1 = lst1.foldLeft(0)((x, y)\
    \ => x + y.length)\n    \tval totallst2 = lst2.foldLeft(0)((x, y) => x + y.length)\n\
    \    \tif (totallst1 < totallst2) lst1\n    \telse lst2", "        var lst1Total\
    \ = 0\n        for (i <- lst1) lst1Total += i.length\n        var lst2Total =\
    \ 0\n        for (i <- lst2) lst2Total += i.length\n        if (lst1Total < lst2Total)\
    \ lst1\n        else lst2", "        // Fill Up this function body\n        //\
    \ `totalCount` is a helper function to get total number of characters in a list\
    \ of strings\n        def totalCount(lst : List[String]) : Int = {\n         \
    \   var count = 0\n            for (i <- lst) {\n                count += i.length\n\
    \            }\n            count\n        }\n        // The length of the first\
    \ list is less than the second list\n        if (totalCount(lst1) < totalCount(lst2))\
    \ {\n            lst1\n        }\n        // If the lengths of the two lists are\
    \ equal\n        else if (totalCount(lst1) == totalCount(lst2)) {\n          \
    \  lst1\n        }\n        // The length of the second list is less than the\
    \ first list\n        else {\n            lst2\n        }", "        // This is\
    \ one of the most common algorithms in computer science.\n        // Starting\
    \ from an empty list, we fold through each element in the list,\n        // applying\
    \ a function on each fold. In this case, we add the length of the string\n   \
    \     // to the running total. At the end, we return the running total length.\n\
    \        // 'list.foldLeft(initial)(function)' is the same as \n        // 'reduceLeft(list,\
    \ initial, function)'\n        def listTotal(list : List[String]) : Int = list.foldLeft(0)((total,\
    \ element) => total + element.length)\n        if (listTotal(lst1) < listTotal(lst2))\
    \ lst1 else lst2", "        val sum1 = lst1.map(_.length).sum\n        val sum2\
    \ = lst2.map(_.length).sum\n        if (sum1 < sum2) lst1 else lst2", "      \
    \  if (lst1.isEmpty && lst2.isEmpty)\n            return lst1\n        if (lst1.isEmpty)\n\
    \            return lst2\n        if (lst2.isEmpty)\n            return lst1\n\
    \        var lst1size = 0\n        var lst2size = 0\n        lst1.foreach(str\
    \ => lst1size += str.length)\n        lst2.foreach(str => lst2size += str.length)\n\
    \        if (lst1size == lst2size)\n            return lst1\n        if (lst1size\
    \ < lst2size)\n            return lst1\n        return lst2", "        if (lst1.isEmpty)\
    \ return lst2\n        if (lst2.isEmpty) return lst1\n        val count1 = lst1.map(x\
    \ => x.length).sum\n        val count2 = lst2.map(x => x.length).sum\n       \
    \ if (count1 < count2) return lst1\n        else if (count1 > count2) return lst2\n\
    \        else return lst1", "        if (lst1.length == 0 && lst2.length == 0)\
    \ return List[String]()\n        else if (lst1.length == 0) return lst2\n    \
    \    else if (lst2.length == 0) return lst1\n        else {\n            var lst1CharTotal\
    \ = 0\n            for (i <- 0 until lst1.length) {\n                lst1CharTotal\
    \ += lst1(i).length\n            }\n            var lst2CharTotal = 0\n      \
    \      for (i <- 0 until lst2.length) {\n                lst2CharTotal += lst2(i).length\n\
    \            }\n            if (lst1CharTotal < lst2CharTotal) return lst1\n \
    \           else if (lst1CharTotal > lst2CharTotal) return lst2\n            else\
    \ return lst1\n        }", "        // Fill Up this function body\n        //\
    \ `total` is a placeholder, replace it with the actual code\n        (lst1, lst2)\
    \ match {\n          case (List(), List()) => List()\n          case (List(),\
    \ xs) => xs\n          case (xs, List()) => xs\n          case (x::xs, y::ys)\
    \ => {\n            if(x.length <= y.length) x::totalMatch(xs, ys)\n         \
    \   else y::totalMatch(xs, ys)\n          }\n        }", "    \tval sum1 = lst1.foldLeft(0)((sum,\
    \ e) => sum + e.length)\n    \tval sum2 = lst2.foldLeft(0)((sum, e) => sum + e.length)\n\
    \    \tif (sum1 == sum2) lst1\n    \telse if (sum1 < sum2) lst1\n    \telse lst2",
  "      var total1 : Int = 0\n      for (i <- lst1) {\n        total1 += i.length\n\
    \      }\n      var total2 : Int = 0\n      for (i <- lst2) {\n        total2\
    \ += i.length\n      }\n      if (total1 < total2) lst1\n      else if (total1\
    \ > total2) lst2\n      else lst1", "        val result = lst1.map(x => x.length).sum\
    \ - lst2.map(x => x.length).sum\n        result match {\n            case result\
    \ if (result > 0) => lst2\n            case result if (result < 0) => lst1\n \
    \           case _ => lst1\n        }", "        if (lst1.length > lst2.length)\
    \ lst2\n        else if (lst1.length < lst2.length) lst1\n        else {\n   \
    \         var sum1 = 0\n            var sum2 = 0\n            for (i <- 0 until\
    \ lst1.length) {\n                sum1 += lst1(i).length\n                sum2\
    \ += lst2(i).length\n            }\n            if (sum1 <= sum2) lst1\n     \
    \       else lst2\n        }", "        // Fill Up this function body\n      \
    \  // `lst1` List of Strings\n        // `lst2` List of Strings\n        // return\
    \ List of Strings\n        lst1", "        val lst1Len = lst1.map(_.length).sum\n\
    \        val lst2Len = lst2.map(_.length).sum\n        if (lst1Len <= lst2Len)\
    \ lst1 else lst2", "        // Fill up this function body\n        // `totalMatch`\
    \ should return the list that has total number of chars in the all \n        //\
    \ strings of the list less than the other list.\n        // if the two lists have\
    \ the same number of chars, return the first list.\n        (lst1, lst2) match\
    \ {\n            case (Nil, _) => Nil\n            case (_, Nil) => Nil\n    \
    \        case _ => {\n                val x = lst1.foldLeft(0)((acc, x) => acc\
    \ + x.length)\n                val y = lst2.foldLeft(0)((acc, x) => acc + x.length)\n\
    \                if (x < y) lst1 else lst2\n            }\n        }", "     \
    \   if (lst1.map(_.length).sum < lst2.map(_.length).sum) return lst1\n       \
    \ if (lst1.map(_.length).sum > lst2.map(_.length).sum) return lst2\n        return\
    \ lst1", "        // Fill Up this function body\n        // `lst1` and `lst2`\
    \ are List[String]\n        // Compute and return the proper List[String]\n  \
    \      if (lst1.length == 0) return lst2\n        if (lst2.length == 0) return\
    \ lst1\n        var total1 = 0\n        var total2 = 0\n        for (i <- 0 until\
    \ lst1.length) {\n            total1 += lst1(i).length\n        }\n        for\
    \ (i <- 0 until lst2.length) {\n            total2 += lst2(i).length\n       \
    \ }\n        if (total1 < total2) return lst1\n        if (total1 > total2) return\
    \ lst2\n        return lst1", "        // Your code goes here\n        var L1\
    \ = lst1\n        var L2 = lst2\n        var a = L1.map(x => x.length).sum\n \
    \       var b = L2.map(x => x.length).sum\n        if (a < b) return L1\n    \
    \    else if (a > b) return L2\n        else if (a == b) return L1\n        else\
    \ return List(\"error\")", "        // Fill up this function body\n        //\
    \ You can add another function as well, if required\n        val lst1char = lst1.foldLeft(0)((a,b)\
    \ => a + b.length)\n        val lst2char = lst2.foldLeft(0)((a,b) => a + b.length)\n\
    \        if (lst1char < lst2char) lst1 else lst2", "        // Fill Up this function\
    \ body\n        // `totalStringLength` is a helper function\n        // Do not\
    \ modify function defination\n        def totalStringLength(lst : List[String])\
    \ : Int = {\n            // Fill Up this function body\n            // This function\
    \ returns the total number of character in all the strings of the list\n     \
    \       var sum = 0\n            for (i <- lst) sum += i.length\n            sum\n\
    \        }\n        val tsl1 = totalStringLength(lst1)\n        val tsl2 = totalStringLength(lst2)\n\
    \        if (tsl1 < tsl2) lst1\n        else if (tsl1 > tsl2) lst2\n        else\
    \ lst1", "        def totalMatchRec(lst1 : List[String], lst2 : List[String],\
    \ n1 : Int, n2 : Int) : List[String] = {\n            (lst1, lst2) match {\n \
    \               case (Nil, _) => if (n1 <= n2) lst1 else lst2\n              \
    \  case (_, Nil) => if (n1 <= n2) lst1 else lst2\n                case (h1 ::\
    \ t1, h2 :: t2) => {\n                    val n1n = n1 + h1.length\n         \
    \           val n2n = n2 + h2.length\n                    if (n1n <= n2n) totalMatchRec(t1,\
    \ lst2, n1n, n2) else totalMatchRec(lst1, t2, n1, n2n)\n                }\n  \
    \          }\n        }\n        totalMatchRec(lst1, lst2, 0, 0)", "        val\
    \ sum1 = lst1.map(_.length).sum\n        val sum2 = lst2.map(_.length).sum\n \
    \       if (sum1 < sum2) lst1 else lst2", "        def totalChars(lst : List[String])\
    \ : Int = {\n            lst.foldLeft(0)((acc, str) => acc + str.length)\n   \
    \     }\n        if (totalChars(lst1) == totalChars(lst2)) lst1\n        else\
    \ if (totalChars(lst1) < totalChars(lst2)) lst1\n        else lst2", "       \
    \ def totalChars(lst : List[String]) : Int = {\n            if (lst.isEmpty) 0\n\
    \            else lst.head.length + totalChars(lst.tail)\n        }\n        if\
    \ (totalChars(lst1) < totalChars(lst2)) lst1\n        else if (totalChars(lst1)\
    \ > totalChars(lst2)) lst2\n        else lst1", "      // Fill Up this function\
    \ body\n      // This function takes in two lists of strings lst1 and lst2\n \
    \     // Returns a list that has total number of chars in the all strings of the\
    \ list less than the other list.\n      // if the two lists have the same number\
    \ of chars, return the first list.\n      var lst1sum = 0\n      var lst2sum =\
    \ 0\n      for (x <- lst1) {\n        lst1sum += x.length\n      }\n      for\
    \ (x <- lst2) {\n        lst2sum += x.length\n      }\n      if (lst1sum < lst2sum)\
    \ {\n        return lst1\n      }\n      else if (lst1sum > lst2sum) {\n     \
    \   return lst2\n      }\n      else {\n        return lst1\n      }", "     \
    \   if (lst1.length == 0 && lst2.length == 0) {\n            lst1\n        } else\
    \ if (lst1.length == 0 && lst2.length != 0) {\n            lst2\n        } else\
    \ if (lst1.length != 0 && lst2.length == 0) {\n            lst1\n        } else\
    \ {\n            val totalChars1 = lst1.foldLeft(0)((sum, element) => sum + element.length)\n\
    \            val totalChars2 = lst2.foldLeft(0)((sum, element) => sum + element.length)\n\
    \            if (totalChars1 == totalChars2) {\n                lst1\n       \
    \     } else if (totalChars1 < totalChars2) {\n                lst1\n        \
    \    } else {\n                lst2\n            }\n        }", "        // >>>\
    \ totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n\
    \        // (List[String](\"hI\", \"Hi\"))\n        if (lst1.isEmpty) lst2\n \
    \       else if (lst2.isEmpty) lst1\n        else {\n            val lst1Length\
    \ = lst1.map(_.length).sum\n            val lst2Length = lst2.map(_.length).sum\n\
    \            if (lst1Length == lst2Length) lst1\n            else if (lst1Length\
    \ < lst2Length) lst1\n            else lst2\n        }", "        var total1 =\
    \ 0\n        var total2 = 0\n        for (s <- lst1) total1 += s.length\n    \
    \    for (s <- lst2) total2 += s.length\n        if (total1 <= total2) lst1 else\
    \ lst2"]
stop_tokens:
- "\n    }\n"
